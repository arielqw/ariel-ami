diff --git a/.gdbinit.tmpl b/.gdbinit.tmpl
new file mode 100644
index 0000000..f71681a
--- /dev/null
+++ b/.gdbinit.tmpl
@@ -0,0 +1,27 @@
+set $lastcs = -1
+
+define hook-stop
+  # There doesn't seem to be a good way to detect if we're in 16- or
+  # 32-bit mode, but in 32-bit mode we always run with CS == 8 in the
+  # kernel and CS == 35 in user space
+  if $cs == 8 || $cs == 35
+    if $lastcs != 8 && $lastcs != 35
+      set architecture i386
+    end
+    x/i $pc
+  else
+    if $lastcs == -1 || $lastcs == 8 || $lastcs == 35
+      set architecture i8086
+    end
+    # Translate the segment:offset into a physical address
+    printf "[%4x:%4x] ", $cs, $eip
+    x/i $cs*16+$eip
+  end
+  set $lastcs = $cs
+end
+
+echo + target remote localhost:1234\n
+target remote localhost:1234
+
+echo + symbol-file kernel\n
+symbol-file kernel
diff --git a/.gitignore b/.gitignore
new file mode 100644
index 0000000..3e2c9de
--- /dev/null
+++ b/.gitignore
@@ -0,0 +1,16 @@
+*~
+_*
+*.o
+*.d
+*.asm
+*.sym
+*.img
+vectors.S
+bootblock
+entryother
+initcode
+initcode.out
+kernel
+kernelmemfs
+mkfs
+.gdbinit
diff --git a/Ass3B/.classpath b/Ass3B/.classpath
deleted file mode 100644
index 91ee9a5..0000000
--- a/Ass3B/.classpath
+++ /dev/null
@@ -1,6 +0,0 @@
-<?xml version="1.0" encoding="UTF-8"?>
-<classpath>
-	<classpathentry kind="src" path="src"/>
-	<classpathentry kind="con" path="org.eclipse.jdt.launching.JRE_CONTAINER/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType/JavaSE-1.7"/>
-	<classpathentry kind="output" path="bin"/>
-</classpath>
diff --git a/Ass3B/.gitignore b/Ass3B/.gitignore
deleted file mode 100644
index e64a7c3..0000000
--- a/Ass3B/.gitignore
+++ /dev/null
@@ -1,2 +0,0 @@
-/log.log
-/build
diff --git a/Ass3B/.project b/Ass3B/.project
deleted file mode 100644
index 387a61f..0000000
--- a/Ass3B/.project
+++ /dev/null
@@ -1,17 +0,0 @@
-<?xml version="1.0" encoding="UTF-8"?>
-<projectDescription>
-	<name>Ass3B</name>
-	<comment></comment>
-	<projects>
-	</projects>
-	<buildSpec>
-		<buildCommand>
-			<name>org.eclipse.jdt.core.javabuilder</name>
-			<arguments>
-			</arguments>
-		</buildCommand>
-	</buildSpec>
-	<natures>
-		<nature>org.eclipse.jdt.core.javanature</nature>
-	</natures>
-</projectDescription>
diff --git a/Ass3B/.settings/org.eclipse.jdt.core.prefs b/Ass3B/.settings/org.eclipse.jdt.core.prefs
deleted file mode 100644
index 838bd9d..0000000
--- a/Ass3B/.settings/org.eclipse.jdt.core.prefs
+++ /dev/null
@@ -1,11 +0,0 @@
-eclipse.preferences.version=1
-org.eclipse.jdt.core.compiler.codegen.inlineJsrBytecode=enabled
-org.eclipse.jdt.core.compiler.codegen.targetPlatform=1.7
-org.eclipse.jdt.core.compiler.codegen.unusedLocal=preserve
-org.eclipse.jdt.core.compiler.compliance=1.7
-org.eclipse.jdt.core.compiler.debug.lineNumber=generate
-org.eclipse.jdt.core.compiler.debug.localVariable=generate
-org.eclipse.jdt.core.compiler.debug.sourceFile=generate
-org.eclipse.jdt.core.compiler.problem.assertIdentifier=error
-org.eclipse.jdt.core.compiler.problem.enumIdentifier=error
-org.eclipse.jdt.core.compiler.source=1.7
diff --git a/Ass3B/InitialData.xml b/Ass3B/InitialData.xml
deleted file mode 100644
index 292999e..0000000
--- a/Ass3B/InitialData.xml
+++ /dev/null
@@ -1,139 +0,0 @@
-<?xml version="1.0" ?> 
-<Restaurant>
-    <Address>
-        <x>10</x>
-        <y>10</y>
-    </Address>
-    <Repository>
-        <Tools>
-            <KitchenTool>
-                <name>Oven</name>
-                <quantity>13</quantity>
-            </KitchenTool>
-            <KitchenTool>
-                <name>Stove</name>
-                <quantity>14</quantity>
-            </KitchenTool>
-            <KitchenTool>
-                <name>Fork</name>
-                <quantity>15</quantity>
-            </KitchenTool>
-            <KitchenTool>
-                <name>Cup</name>
-                <quantity>14</quantity>
-            </KitchenTool>
-            <KitchenTool>
-                <name>Bowl</name>
-                <quantity>19</quantity>
-            </KitchenTool>
-            <KitchenTool>
-                <name>Plate</name>
-                <quantity>15</quantity>
-            </KitchenTool>
-            <KitchenTool>
-                <name>Spoon</name>
-                <quantity>25</quantity>
-            </KitchenTool>
-            <KitchenTool>
-                <name>Knife</name>
-                <quantity>16</quantity>
-            </KitchenTool>
-            <KitchenTool>
-                <name>Pan</name>
-                <quantity>26</quantity>
-            </KitchenTool>
-        </Tools>
-        <Ingredients>
-            <Ingredient>
-                <name>Potato</name>
-                <quantity>5000</quantity>
-            </Ingredient>
-            <Ingredient>
-                <name>Butter</name>
-                <quantity>2000</quantity>
-            </Ingredient>
-            <Ingredient>
-                <name>Olive Oil</name>
-                <quantity>1500</quantity>
-            </Ingredient>
-            <Ingredient>
-                <name>Salt</name>
-                <quantity>1500</quantity>
-            </Ingredient>
-            <Ingredient>
-                <name>Cherry Tomato</name>
-                <quantity>1500</quantity>
-            </Ingredient>
-            <Ingredient>
-                <name>Bread</name>
-                <quantity>2500</quantity>
-            </Ingredient>			
-            <Ingredient>
-                <name>Bread Crumbs</name>
-                <quantity>1500</quantity>
-            </Ingredient>
-            <Ingredient>
-                <name>Egg</name>
-                <quantity>150</quantity>
-            </Ingredient>
-            <Ingredient>
-                <name>Flour</name>
-                <quantity>2500</quantity>
-            </Ingredient>
-            <Ingredient>
-                <name>Gouda Cheese</name>
-                <quantity>2500</quantity>
-            </Ingredient>
-            <Ingredient>
-                <name>Black Pepper</name>
-                <quantity>2500</quantity>
-            </Ingredient>
-        </Ingredients>
-    </Repository>
-    <Staff>
-        <Chefs>
-            <Chef>
-                <name>Gordon Ramsay</name>
-                <efficiencyRating>0.9</efficiencyRating>
-                <enduranceRating>50</enduranceRating>
-            </Chef>
-            <Chef>
-                <name>Rachael Ray</name>
-                <efficiencyRating>0.9</efficiencyRating>
-                <enduranceRating>45</enduranceRating>
-            </Chef>
-            <Chef>
-                <name>Wolfgang Puck</name>
-                <efficiencyRating>1.0</efficiencyRating>
-                <enduranceRating>30</enduranceRating>
-            </Chef>
-            <Chef>
-                <name>Paula Deen</name>
-                <efficiencyRating>1.1</efficiencyRating>
-                <enduranceRating>25</enduranceRating>
-            </Chef>
-        </Chefs>
-        <DeliveryPersonals>
-            <DeliveryPerson>
-                    <name>Garry Simpson</name>
-                    <speed>5</speed>
-            </DeliveryPerson>
-            <DeliveryPerson>
-                    <name>Ken Allen</name>
-                    <speed>7</speed>
-            </DeliveryPerson>
-            <DeliveryPerson>
-                    <name>Patrick Donahoe</name>
-                    <speed>6</speed>
-            </DeliveryPerson>
-            <DeliveryPerson>
-                    <name>Scott Davis</name>
-                    <speed>6</speed>
-            </DeliveryPerson>
-            <DeliveryPerson>
-                    <name>Frederick Smith</name>
-                    <speed>8</speed>
-            </DeliveryPerson>
-        </DeliveryPersonals>
-    </Staff>
-</Restaurant>
\ No newline at end of file
diff --git a/Ass3B/InitialData.xsd b/Ass3B/InitialData.xsd
deleted file mode 100644
index cfc1b86..0000000
--- a/Ass3B/InitialData.xsd
+++ /dev/null
@@ -1,85 +0,0 @@
-<xs:schema attributeFormDefault="unqualified" elementFormDefault="qualified" xmlns:xs="http://www.w3.org/2001/XMLSchema">
-  <xs:element name="Restaurant">
-    <xs:complexType>
-      <xs:sequence>
-        <xs:element name="Address">
-          <xs:complexType>
-            <xs:sequence>
-              <xs:element type="xs:byte" name="x"/>
-              <xs:element type="xs:byte" name="y"/>
-            </xs:sequence>
-          </xs:complexType>
-        </xs:element>
-        <xs:element name="Repository">
-          <xs:complexType>
-            <xs:sequence>
-              <xs:element name="Tools">
-                <xs:complexType>
-                  <xs:sequence>
-                    <xs:element name="KitchenTool" maxOccurs="unbounded" minOccurs="0">
-                      <xs:complexType>
-                        <xs:sequence>
-                          <xs:element type="xs:string" name="name"/>
-                          <xs:element type="xs:byte" name="quantity"/>
-                        </xs:sequence>
-                      </xs:complexType>
-                    </xs:element>
-                  </xs:sequence>
-                </xs:complexType>
-              </xs:element>
-              <xs:element name="Ingredients">
-                <xs:complexType>
-                  <xs:choice maxOccurs="unbounded" minOccurs="0">
-                    <xs:element name="Ingredient">
-                      <xs:complexType>
-                        <xs:sequence>
-                          <xs:element type="xs:string" name="name"/>
-                          <xs:element type="xs:short" name="quantity"/>
-                        </xs:sequence>
-                      </xs:complexType>
-                    </xs:element>
-                  </xs:choice>
-                </xs:complexType>
-              </xs:element>
-            </xs:sequence>
-          </xs:complexType>
-        </xs:element>
-        <xs:element name="Staff">
-          <xs:complexType>
-            <xs:sequence>
-              <xs:element name="Chefs">
-                <xs:complexType>
-                  <xs:sequence>
-                    <xs:element name="Chef" maxOccurs="unbounded" minOccurs="0">
-                      <xs:complexType>
-                        <xs:sequence>
-                          <xs:element type="xs:string" name="name"/>
-                          <xs:element type="xs:float" name="efficiencyRating"/>
-                          <xs:element type="xs:byte" name="enduranceRating"/>
-                        </xs:sequence>
-                      </xs:complexType>
-                    </xs:element>
-                  </xs:sequence>
-                </xs:complexType>
-              </xs:element>
-              <xs:element name="DeliveryPersonals">
-                <xs:complexType>
-                  <xs:sequence>
-                    <xs:element name="DeliveryPerson" maxOccurs="unbounded" minOccurs="0">
-                      <xs:complexType>
-                        <xs:sequence>
-                          <xs:element type="xs:string" name="name"/>
-                          <xs:element type="xs:byte" name="speed"/>
-                        </xs:sequence>
-                      </xs:complexType>
-                    </xs:element>
-                  </xs:sequence>
-                </xs:complexType>
-              </xs:element>
-            </xs:sequence>
-          </xs:complexType>
-        </xs:element>
-      </xs:sequence>
-    </xs:complexType>
-  </xs:element>
-</xs:schema>
\ No newline at end of file
diff --git a/Ass3B/InitialData2.xml b/Ass3B/InitialData2.xml
deleted file mode 100644
index 292999e..0000000
--- a/Ass3B/InitialData2.xml
+++ /dev/null
@@ -1,139 +0,0 @@
-<?xml version="1.0" ?> 
-<Restaurant>
-    <Address>
-        <x>10</x>
-        <y>10</y>
-    </Address>
-    <Repository>
-        <Tools>
-            <KitchenTool>
-                <name>Oven</name>
-                <quantity>13</quantity>
-            </KitchenTool>
-            <KitchenTool>
-                <name>Stove</name>
-                <quantity>14</quantity>
-            </KitchenTool>
-            <KitchenTool>
-                <name>Fork</name>
-                <quantity>15</quantity>
-            </KitchenTool>
-            <KitchenTool>
-                <name>Cup</name>
-                <quantity>14</quantity>
-            </KitchenTool>
-            <KitchenTool>
-                <name>Bowl</name>
-                <quantity>19</quantity>
-            </KitchenTool>
-            <KitchenTool>
-                <name>Plate</name>
-                <quantity>15</quantity>
-            </KitchenTool>
-            <KitchenTool>
-                <name>Spoon</name>
-                <quantity>25</quantity>
-            </KitchenTool>
-            <KitchenTool>
-                <name>Knife</name>
-                <quantity>16</quantity>
-            </KitchenTool>
-            <KitchenTool>
-                <name>Pan</name>
-                <quantity>26</quantity>
-            </KitchenTool>
-        </Tools>
-        <Ingredients>
-            <Ingredient>
-                <name>Potato</name>
-                <quantity>5000</quantity>
-            </Ingredient>
-            <Ingredient>
-                <name>Butter</name>
-                <quantity>2000</quantity>
-            </Ingredient>
-            <Ingredient>
-                <name>Olive Oil</name>
-                <quantity>1500</quantity>
-            </Ingredient>
-            <Ingredient>
-                <name>Salt</name>
-                <quantity>1500</quantity>
-            </Ingredient>
-            <Ingredient>
-                <name>Cherry Tomato</name>
-                <quantity>1500</quantity>
-            </Ingredient>
-            <Ingredient>
-                <name>Bread</name>
-                <quantity>2500</quantity>
-            </Ingredient>			
-            <Ingredient>
-                <name>Bread Crumbs</name>
-                <quantity>1500</quantity>
-            </Ingredient>
-            <Ingredient>
-                <name>Egg</name>
-                <quantity>150</quantity>
-            </Ingredient>
-            <Ingredient>
-                <name>Flour</name>
-                <quantity>2500</quantity>
-            </Ingredient>
-            <Ingredient>
-                <name>Gouda Cheese</name>
-                <quantity>2500</quantity>
-            </Ingredient>
-            <Ingredient>
-                <name>Black Pepper</name>
-                <quantity>2500</quantity>
-            </Ingredient>
-        </Ingredients>
-    </Repository>
-    <Staff>
-        <Chefs>
-            <Chef>
-                <name>Gordon Ramsay</name>
-                <efficiencyRating>0.9</efficiencyRating>
-                <enduranceRating>50</enduranceRating>
-            </Chef>
-            <Chef>
-                <name>Rachael Ray</name>
-                <efficiencyRating>0.9</efficiencyRating>
-                <enduranceRating>45</enduranceRating>
-            </Chef>
-            <Chef>
-                <name>Wolfgang Puck</name>
-                <efficiencyRating>1.0</efficiencyRating>
-                <enduranceRating>30</enduranceRating>
-            </Chef>
-            <Chef>
-                <name>Paula Deen</name>
-                <efficiencyRating>1.1</efficiencyRating>
-                <enduranceRating>25</enduranceRating>
-            </Chef>
-        </Chefs>
-        <DeliveryPersonals>
-            <DeliveryPerson>
-                    <name>Garry Simpson</name>
-                    <speed>5</speed>
-            </DeliveryPerson>
-            <DeliveryPerson>
-                    <name>Ken Allen</name>
-                    <speed>7</speed>
-            </DeliveryPerson>
-            <DeliveryPerson>
-                    <name>Patrick Donahoe</name>
-                    <speed>6</speed>
-            </DeliveryPerson>
-            <DeliveryPerson>
-                    <name>Scott Davis</name>
-                    <speed>6</speed>
-            </DeliveryPerson>
-            <DeliveryPerson>
-                    <name>Frederick Smith</name>
-                    <speed>8</speed>
-            </DeliveryPerson>
-        </DeliveryPersonals>
-    </Staff>
-</Restaurant>
\ No newline at end of file
diff --git a/Ass3B/Menu.xml b/Ass3B/Menu.xml
deleted file mode 100644
index 543fb00..0000000
--- a/Ass3B/Menu.xml
+++ /dev/null
@@ -1,155 +0,0 @@
-<?xml version="1.0" ?> 
-<Menu>
-	<Dishes>
-		<Dish>
-			<name>Hasselback Potatoes</name>
-			<difficultyRating>20</difficultyRating>
-			<expectedCookTime>15000</expectedCookTime>
-			<reward>30</reward>
-			<KitchenTools>
-				<KitchenTool>
-					<name>Spoon</name>
-					<quantity>1</quantity>
-				</KitchenTool>
-				<KitchenTool>
-					<name>Oven</name>
-					<quantity>1</quantity>
-				</KitchenTool>
-				<KitchenTool>
-					<name>Knife</name>
-					<quantity>1</quantity>
-				</KitchenTool>
-				<KitchenTool>
-					<name>Plate</name>
-					<quantity>1</quantity>
-				</KitchenTool>
-			</KitchenTools>
-			<Ingredients>
-				<Ingredient>
-					<name>Potato</name>
-					<quantity>500</quantity>
-				</Ingredient>
-				<Ingredient>
-					<name>Butter</name>
-					<quantity>45</quantity>
-				</Ingredient>
-				<Ingredient>
-					<name>Salt</name>
-					<quantity>20</quantity>
-				</Ingredient>
-				<Ingredient>
-					<name>Olive Oil</name>
-					<quantity>15</quantity>
-				</Ingredient>
-			</Ingredients>
-		</Dish>
-		<Dish>
-			<name>Ramen Soup</name>
-			<difficultyRating>20</difficultyRating>
-			<expectedCookTime>10000</expectedCookTime>
-			<reward>35</reward>
-			<KitchenTools>
-				<KitchenTool>
-					<name>Spoon</name>
-					<quantity>1</quantity>
-				</KitchenTool>
-				<KitchenTool>
-					<name>Oven</name>
-					<quantity>1</quantity>
-				</KitchenTool>
-				<KitchenTool>
-					<name>Stove</name>
-					<quantity>1</quantity>
-				</KitchenTool>
-				<KitchenTool>
-					<name>Cup</name>
-					<quantity>1</quantity>
-				</KitchenTool>
-				<KitchenTool>
-					<name>Bowl</name>
-					<quantity>1</quantity>
-				</KitchenTool>
-			</KitchenTools>
-			<Ingredients>
-				<Ingredient>
-					<name>Flour</name>
-					<quantity>250</quantity>
-				</Ingredient>
-				<Ingredient>
-					<name>Egg</name>
-					<quantity>1</quantity>
-				</Ingredient>
-				<Ingredient>
-					<name>Salt</name>
-					<quantity>7</quantity>
-				</Ingredient>
-			</Ingredients>
-		</Dish>
-		<Dish>
-			<name>The Ultimate Breakfast</name>
-			<difficultyRating>10</difficultyRating>
-			<expectedCookTime>15000</expectedCookTime>
-			<reward>54</reward>
-			<KitchenTools>
-				<KitchenTool>
-					<name>Spoon</name>
-					<quantity>1</quantity>
-				</KitchenTool>
-				<KitchenTool>
-					<name>Pan</name>
-					<quantity>1</quantity>
-				</KitchenTool>
-				<KitchenTool>
-					<name>Oven</name>
-					<quantity>1</quantity>
-				</KitchenTool>
-				<KitchenTool>
-					<name>Stove</name>
-					<quantity>1</quantity>
-				</KitchenTool>
-				<KitchenTool>
-					<name>Knife</name>
-					<quantity>1</quantity>
-				</KitchenTool>
-				<KitchenTool>
-					<name>Plate</name>
-					<quantity>1</quantity>
-				</KitchenTool>
-			</KitchenTools>
-			<Ingredients>
-				<Ingredient>
-					<name>Cherry Tomato</name>
-					<quantity>100</quantity>
-				</Ingredient>
-				<Ingredient>
-					<name>Bread</name>
-					<quantity>15</quantity>
-				</Ingredient>
-				<Ingredient>
-					<name>Olive Oil</name>
-					<quantity>25</quantity>
-				</Ingredient>
-				<Ingredient>
-					<name>Bread Crumbs</name>
-					<quantity>10</quantity>
-				</Ingredient>
-				<Ingredient>
-					<name>Gouda Cheese</name>
-					<quantity>30</quantity>
-				</Ingredient>
-				<Ingredient>
-					<name>Egg</name>
-					<quantity>1</quantity>
-				</Ingredient>
-				<Ingredient>
-					<name>Salt</name>
-					<quantity>5</quantity>
-				</Ingredient>
-				<Ingredient>
-					<name>Black Pepper</name>
-					<quantity>5</quantity>
-				</Ingredient>
-			</Ingredients>
-		</Dish>
-	</Dishes>
-</Menu>
\ No newline at end of file
diff --git a/Ass3B/Menu.xsd b/Ass3B/Menu.xsd
deleted file mode 100644
index cdf64a7..0000000
--- a/Ass3B/Menu.xsd
+++ /dev/null
@@ -1,52 +0,0 @@
-<xs:schema attributeFormDefault="unqualified" elementFormDefault="qualified" xmlns:xs="http://www.w3.org/2001/XMLSchema">
-  <xs:element name="Menu">
-    <xs:complexType>
-      <xs:sequence>
-        <xs:element name="Dishes">
-          <xs:complexType>
-            <xs:sequence>
-              <xs:element name="Dish" maxOccurs="unbounded" minOccurs="0">
-                <xs:complexType>
-                  <xs:sequence>
-                    <xs:element type="xs:string" name="name"/>
-                    <xs:element type="xs:byte" name="difficultyRating"/>
-                    <xs:element type="xs:short" name="expectedCookTime"/>
-                    <xs:element type="xs:byte" name="reward"/>
-                    <xs:element name="KitchenTools">
-                      <xs:complexType>
-                        <xs:sequence>
-                          <xs:element name="KitchenTool" maxOccurs="unbounded" minOccurs="0">
-                            <xs:complexType>
-                              <xs:sequence>
-                                <xs:element type="xs:string" name="name"/>
-                                <xs:element type="xs:byte" name="quantity"/>
-                              </xs:sequence>
-                            </xs:complexType>
-                          </xs:element>
-                        </xs:sequence>
-                      </xs:complexType>
-                    </xs:element>
-                    <xs:element name="Ingredients">
-                      <xs:complexType>
-                        <xs:sequence>
-                          <xs:element name="Ingredient" maxOccurs="unbounded" minOccurs="0">
-                            <xs:complexType>
-                              <xs:sequence>
-                                <xs:element type="xs:string" name="name"/>
-                                <xs:element type="xs:short" name="quantity"/>
-                              </xs:sequence>
-                            </xs:complexType>
-                          </xs:element>
-                        </xs:sequence>
-                      </xs:complexType>
-                    </xs:element>
-                  </xs:sequence>
-                </xs:complexType>
-              </xs:element>
-            </xs:sequence>
-          </xs:complexType>
-        </xs:element>
-      </xs:sequence>
-    </xs:complexType>
-  </xs:element>
-</xs:schema>
\ No newline at end of file
diff --git a/Ass3B/Menu2.xml b/Ass3B/Menu2.xml
deleted file mode 100644
index 543fb00..0000000
--- a/Ass3B/Menu2.xml
+++ /dev/null
@@ -1,155 +0,0 @@
-<?xml version="1.0" ?> 
-<Menu>
-	<Dishes>
-		<Dish>
-			<name>Hasselback Potatoes</name>
-			<difficultyRating>20</difficultyRating>
-			<expectedCookTime>15000</expectedCookTime>
-			<reward>30</reward>
-			<KitchenTools>
-				<KitchenTool>
-					<name>Spoon</name>
-					<quantity>1</quantity>
-				</KitchenTool>
-				<KitchenTool>
-					<name>Oven</name>
-					<quantity>1</quantity>
-				</KitchenTool>
-				<KitchenTool>
-					<name>Knife</name>
-					<quantity>1</quantity>
-				</KitchenTool>
-				<KitchenTool>
-					<name>Plate</name>
-					<quantity>1</quantity>
-				</KitchenTool>
-			</KitchenTools>
-			<Ingredients>
-				<Ingredient>
-					<name>Potato</name>
-					<quantity>500</quantity>
-				</Ingredient>
-				<Ingredient>
-					<name>Butter</name>
-					<quantity>45</quantity>
-				</Ingredient>
-				<Ingredient>
-					<name>Salt</name>
-					<quantity>20</quantity>
-				</Ingredient>
-				<Ingredient>
-					<name>Olive Oil</name>
-					<quantity>15</quantity>
-				</Ingredient>
-			</Ingredients>
-		</Dish>
-		<Dish>
-			<name>Ramen Soup</name>
-			<difficultyRating>20</difficultyRating>
-			<expectedCookTime>10000</expectedCookTime>
-			<reward>35</reward>
-			<KitchenTools>
-				<KitchenTool>
-					<name>Spoon</name>
-					<quantity>1</quantity>
-				</KitchenTool>
-				<KitchenTool>
-					<name>Oven</name>
-					<quantity>1</quantity>
-				</KitchenTool>
-				<KitchenTool>
-					<name>Stove</name>
-					<quantity>1</quantity>
-				</KitchenTool>
-				<KitchenTool>
-					<name>Cup</name>
-					<quantity>1</quantity>
-				</KitchenTool>
-				<KitchenTool>
-					<name>Bowl</name>
-					<quantity>1</quantity>
-				</KitchenTool>
-			</KitchenTools>
-			<Ingredients>
-				<Ingredient>
-					<name>Flour</name>
-					<quantity>250</quantity>
-				</Ingredient>
-				<Ingredient>
-					<name>Egg</name>
-					<quantity>1</quantity>
-				</Ingredient>
-				<Ingredient>
-					<name>Salt</name>
-					<quantity>7</quantity>
-				</Ingredient>
-			</Ingredients>
-		</Dish>
-		<Dish>
-			<name>The Ultimate Breakfast</name>
-			<difficultyRating>10</difficultyRating>
-			<expectedCookTime>15000</expectedCookTime>
-			<reward>54</reward>
-			<KitchenTools>
-				<KitchenTool>
-					<name>Spoon</name>
-					<quantity>1</quantity>
-				</KitchenTool>
-				<KitchenTool>
-					<name>Pan</name>
-					<quantity>1</quantity>
-				</KitchenTool>
-				<KitchenTool>
-					<name>Oven</name>
-					<quantity>1</quantity>
-				</KitchenTool>
-				<KitchenTool>
-					<name>Stove</name>
-					<quantity>1</quantity>
-				</KitchenTool>
-				<KitchenTool>
-					<name>Knife</name>
-					<quantity>1</quantity>
-				</KitchenTool>
-				<KitchenTool>
-					<name>Plate</name>
-					<quantity>1</quantity>
-				</KitchenTool>
-			</KitchenTools>
-			<Ingredients>
-				<Ingredient>
-					<name>Cherry Tomato</name>
-					<quantity>100</quantity>
-				</Ingredient>
-				<Ingredient>
-					<name>Bread</name>
-					<quantity>15</quantity>
-				</Ingredient>
-				<Ingredient>
-					<name>Olive Oil</name>
-					<quantity>25</quantity>
-				</Ingredient>
-				<Ingredient>
-					<name>Bread Crumbs</name>
-					<quantity>10</quantity>
-				</Ingredient>
-				<Ingredient>
-					<name>Gouda Cheese</name>
-					<quantity>30</quantity>
-				</Ingredient>
-				<Ingredient>
-					<name>Egg</name>
-					<quantity>1</quantity>
-				</Ingredient>
-				<Ingredient>
-					<name>Salt</name>
-					<quantity>5</quantity>
-				</Ingredient>
-				<Ingredient>
-					<name>Black Pepper</name>
-					<quantity>5</quantity>
-				</Ingredient>
-			</Ingredients>
-		</Dish>
-	</Dishes>
-</Menu>
\ No newline at end of file
diff --git a/Ass3B/OrdersList.xml b/Ass3B/OrdersList.xml
deleted file mode 100644
index 6e0d842..0000000
--- a/Ass3B/OrdersList.xml
+++ /dev/null
@@ -1,85 +0,0 @@
-<?xml version="1.0" ?> 
-<OrderList>
-	<Orders>
-		<Order id="0">
-			<DeliveryAddress>
-				<x>1</x>
-				<y>2</y>
-			</DeliveryAddress>
-			<Dishes>
-				<Dish>
-					<name>Ramen Soup</name>
-					<quantity>2</quantity>
-				</Dish> 
-				<Dish>
-					<name>Hasselback Potatoes</name>
-					<quantity>4</quantity>
-				</Dish> 
-				<Dish>
-					<name>The Ultimate Breakfast</name>
-					<quantity>2</quantity>
-				</Dish> 
-			</Dishes>
-		</Order>
-		<Order id="1">
-			<DeliveryAddress>
-				<x>10</x>
-				<y>20</y>
-			</DeliveryAddress>
-			<Dishes>
-				<Dish>
-					<name>Hasselback Potatoes</name>
-					<quantity>4</quantity>
-				</Dish> 
-				<Dish>
-					<name>Ramen Soup</name>
-					<quantity>2</quantity>
-				</Dish> 
-			</Dishes>
-		</Order>
-		<Order id="2">
-			<DeliveryAddress>
-				<x>19</x>
-				<y>25</y>
-			</DeliveryAddress>
-			<Dishes>
-				<Dish>
-					<name>The Ultimate Breakfast</name>
-					<quantity>2</quantity>
-				</Dish> 
-			</Dishes>
-		</Order>
-		<Order id="3">
-			<DeliveryAddress>
-				<x>50</x>
-				<y>50</y>
-			</DeliveryAddress>
-			<Dishes>
-				<Dish>
-					<name>The Ultimate Breakfast</name>
-					<quantity>6</quantity>
-				</Dish> 
-			</Dishes>
-		</Order>
-		<Order id="4">
-			<DeliveryAddress>
-				<x>20</x>
-				<y>33</y>
-			</DeliveryAddress>
-			<Dishes>
-				<Dish>
-					<name>Ramen Soup</name>
-					<quantity>4</quantity>
-				</Dish> 
-				<Dish>
-					<name>The Ultimate Breakfast</name>
-					<quantity>4</quantity>
-				</Dish> 
-				<Dish>
-					<name>Hasselback Potatoes</name>
-					<quantity>2</quantity>
-				</Dish> 
-			</Dishes>
-		</Order>
-	</Orders>
-</OrderList>
\ No newline at end of file
diff --git a/Ass3B/OrdersList.xsd b/Ass3B/OrdersList.xsd
deleted file mode 100644
index c19398f..0000000
--- a/Ass3B/OrdersList.xsd
+++ /dev/null
@@ -1,43 +0,0 @@
-<xs:schema attributeFormDefault="unqualified" elementFormDefault="qualified" xmlns:xs="http://www.w3.org/2001/XMLSchema">
-  <xs:element name="OrderList">
-    <xs:complexType>
-      <xs:sequence>
-        <xs:element name="Orders">
-          <xs:complexType>
-            <xs:sequence>
-              <xs:element name="Order" maxOccurs="unbounded" minOccurs="0">
-                <xs:complexType>
-                  <xs:sequence>
-                    <xs:element name="DeliveryAddress">
-                      <xs:complexType>
-                        <xs:sequence>
-                          <xs:element type="xs:byte" name="x"/>
-                          <xs:element type="xs:byte" name="y"/>
-                        </xs:sequence>
-                      </xs:complexType>
-                    </xs:element>
-                    <xs:element name="Dishes">
-                      <xs:complexType>
-                        <xs:sequence>
-                          <xs:element name="Dish" maxOccurs="unbounded" minOccurs="0">
-                            <xs:complexType>
-                              <xs:sequence>
-                                <xs:element type="xs:string" name="name"/>
-                                <xs:element type="xs:byte" name="quantity"/>
-                              </xs:sequence>
-                            </xs:complexType>
-                          </xs:element>
-                        </xs:sequence>
-                      </xs:complexType>
-                    </xs:element>
-                  </xs:sequence>
-                  <xs:attribute type="xs:byte" name="id" use="optional"/>
-                </xs:complexType>
-              </xs:element>
-            </xs:sequence>
-          </xs:complexType>
-        </xs:element>
-      </xs:sequence>
-    </xs:complexType>
-  </xs:element>
-</xs:schema>
\ No newline at end of file
diff --git a/Ass3B/OrdersList2.xml b/Ass3B/OrdersList2.xml
deleted file mode 100644
index a3dc28f..0000000
--- a/Ass3B/OrdersList2.xml
+++ /dev/null
@@ -1,85 +0,0 @@
-<?xml version="1.0" ?> 
-<OrderList>
-	<Orders>
-		<Order id="0">
-			<DeliveryAddress>
-				<x>1</x>
-				<y>2</y>
-			</DeliveryAddress>
-			<Dishes>
-				<Dish>
-					<name>Ramen Soup</name>
-					<quantity>2</quantity>
-				</Dish> 
-				<Dish>
-					<name>Hasselback Potatoes</name>
-					<quantity>2</quantity>
-				</Dish> 
-				<Dish>
-					<name>The Ultimate Breakfast</name>
-					<quantity>1</quantity>
-				</Dish> 
-			</Dishes>
-		</Order>
-		<Order id="1">
-			<DeliveryAddress>
-				<x>10</x>
-				<y>20</y>
-			</DeliveryAddress>
-			<Dishes>
-				<Dish>
-					<name>Hasselback Potatoes</name>
-					<quantity>4</quantity>
-				</Dish> 
-				<Dish>
-					<name>Ramen Soup</name>
-					<quantity>2</quantity>
-				</Dish> 
-			</Dishes>
-		</Order>
-		<Order id="2">
-			<DeliveryAddress>
-				<x>19</x>
-				<y>25</y>
-			</DeliveryAddress>
-			<Dishes>
-				<Dish>
-					<name>The Ultimate Breakfast</name>
-					<quantity>2</quantity>
-				</Dish> 
-			</Dishes>
-		</Order>
-		<Order id="3">
-			<DeliveryAddress>
-				<x>50</x>
-				<y>50</y>
-			</DeliveryAddress>
-			<Dishes>
-				<Dish>
-					<name>The Ultimate Breakfast</name>
-					<quantity>3</quantity>
-				</Dish> 
-			</Dishes>
-		</Order>
-		<Order id="4">
-			<DeliveryAddress>
-				<x>20</x>
-				<y>33</y>
-			</DeliveryAddress>
-			<Dishes>
-				<Dish>
-					<name>Ramen Soup</name>
-					<quantity>2</quantity>
-				</Dish> 
-				<Dish>
-					<name>The Ultimate Breakfast</name>
-					<quantity>2</quantity>
-				</Dish> 
-				<Dish>
-					<name>Hasselback Potatoes</name>
-					<quantity>2</quantity>
-				</Dish> 
-			</Dishes>
-		</Order>
-	</Orders>
-</OrderList>
\ No newline at end of file
diff --git a/Ass3B/bin/spl/assc/Driver.class b/Ass3B/bin/spl/assc/Driver.class
deleted file mode 100644
index 319250d..0000000
Binary files a/Ass3B/bin/spl/assc/Driver.class and /dev/null differ
diff --git a/Ass3B/bin/spl/assc/Management.class b/Ass3B/bin/spl/assc/Management.class
deleted file mode 100644
index d4e1d2c..0000000
Binary files a/Ass3B/bin/spl/assc/Management.class and /dev/null differ
diff --git a/Ass3B/bin/spl/assc/Statistics.class b/Ass3B/bin/spl/assc/Statistics.class
deleted file mode 100644
index 566c718..0000000
Binary files a/Ass3B/bin/spl/assc/Statistics.class and /dev/null differ
diff --git a/Ass3B/bin/spl/assc/model/Address.class b/Ass3B/bin/spl/assc/model/Address.class
deleted file mode 100644
index 19630d4..0000000
Binary files a/Ass3B/bin/spl/assc/model/Address.class and /dev/null differ
diff --git a/Ass3B/bin/spl/assc/model/Dish.class b/Ass3B/bin/spl/assc/model/Dish.class
deleted file mode 100644
index 551e091..0000000
Binary files a/Ass3B/bin/spl/assc/model/Dish.class and /dev/null differ
diff --git a/Ass3B/bin/spl/assc/model/Ingredient.class b/Ass3B/bin/spl/assc/model/Ingredient.class
deleted file mode 100644
index 9846227..0000000
Binary files a/Ass3B/bin/spl/assc/model/Ingredient.class and /dev/null differ
diff --git a/Ass3B/bin/spl/assc/model/KitchenTool.class b/Ass3B/bin/spl/assc/model/KitchenTool.class
deleted file mode 100644
index f55fdeb..0000000
Binary files a/Ass3B/bin/spl/assc/model/KitchenTool.class and /dev/null differ
diff --git a/Ass3B/bin/spl/assc/model/Order$OrderStatus.class b/Ass3B/bin/spl/assc/model/Order$OrderStatus.class
deleted file mode 100644
index 04a00f4..0000000
Binary files a/Ass3B/bin/spl/assc/model/Order$OrderStatus.class and /dev/null differ
diff --git a/Ass3B/bin/spl/assc/model/Order.class b/Ass3B/bin/spl/assc/model/Order.class
deleted file mode 100644
index a07ce91..0000000
Binary files a/Ass3B/bin/spl/assc/model/Order.class and /dev/null differ
diff --git a/Ass3B/bin/spl/assc/model/OrderOfDish.class b/Ass3B/bin/spl/assc/model/OrderOfDish.class
deleted file mode 100644
index 3d01453..0000000
Binary files a/Ass3B/bin/spl/assc/model/OrderOfDish.class and /dev/null differ
diff --git a/Ass3B/bin/spl/assc/model/Warehouse.class b/Ass3B/bin/spl/assc/model/Warehouse.class
deleted file mode 100644
index cd8a500..0000000
Binary files a/Ass3B/bin/spl/assc/model/Warehouse.class and /dev/null differ
diff --git a/Ass3B/bin/spl/assc/model/WarehouseItem.class b/Ass3B/bin/spl/assc/model/WarehouseItem.class
deleted file mode 100644
index a95b00c..0000000
Binary files a/Ass3B/bin/spl/assc/model/WarehouseItem.class and /dev/null differ
diff --git a/Ass3B/bin/spl/assc/runnables/CallableCookWholeOrder.class b/Ass3B/bin/spl/assc/runnables/CallableCookWholeOrder.class
deleted file mode 100644
index e05d832..0000000
Binary files a/Ass3B/bin/spl/assc/runnables/CallableCookWholeOrder.class and /dev/null differ
diff --git a/Ass3B/bin/spl/assc/runnables/RunnableChef.class b/Ass3B/bin/spl/assc/runnables/RunnableChef.class
deleted file mode 100644
index 9155578..0000000
Binary files a/Ass3B/bin/spl/assc/runnables/RunnableChef.class and /dev/null differ
diff --git a/Ass3B/bin/spl/assc/runnables/RunnableCookOneDish.class b/Ass3B/bin/spl/assc/runnables/RunnableCookOneDish.class
deleted file mode 100644
index 9dbcd2c..0000000
Binary files a/Ass3B/bin/spl/assc/runnables/RunnableCookOneDish.class and /dev/null differ
diff --git a/Ass3B/bin/spl/assc/runnables/RunnableDeliveryPerson.class b/Ass3B/bin/spl/assc/runnables/RunnableDeliveryPerson.class
deleted file mode 100644
index e7163f9..0000000
Binary files a/Ass3B/bin/spl/assc/runnables/RunnableDeliveryPerson.class and /dev/null differ
diff --git a/Ass3B/bin/spl/assc/utils/KitchenToolsComparator.class b/Ass3B/bin/spl/assc/utils/KitchenToolsComparator.class
deleted file mode 100644
index 388d054..0000000
Binary files a/Ass3B/bin/spl/assc/utils/KitchenToolsComparator.class and /dev/null differ
diff --git a/Ass3B/bin/spl/assc/utils/MyFormatter.class b/Ass3B/bin/spl/assc/utils/MyFormatter.class
deleted file mode 100644
index dcf882a..0000000
Binary files a/Ass3B/bin/spl/assc/utils/MyFormatter.class and /dev/null differ
diff --git a/Ass3B/bin/spl/assc/utils/MyLogger.class b/Ass3B/bin/spl/assc/utils/MyLogger.class
deleted file mode 100644
index 9f2ebde..0000000
Binary files a/Ass3B/bin/spl/assc/utils/MyLogger.class and /dev/null differ
diff --git a/Ass3B/bin/spl/assc/utils/XMLParser.class b/Ass3B/bin/spl/assc/utils/XMLParser.class
deleted file mode 100644
index e6a8bef..0000000
Binary files a/Ass3B/bin/spl/assc/utils/XMLParser.class and /dev/null differ
diff --git a/Ass3B/build.xml b/Ass3B/build.xml
deleted file mode 100644
index bf493b2..0000000
--- a/Ass3B/build.xml
+++ /dev/null
@@ -1,30 +0,0 @@
-<project>
-
-    <target name="clean">
-        <delete dir="build"/>
-    </target>
-
-    <target name="compile" depends="clean">
-        <mkdir dir="build/classes"/>
-        <javac includeantruntime="false" srcdir="src" destdir="build/classes"/>
-    </target>
-
-    <target name="jar" depends="compile">
-        <mkdir dir="build/jar"/>
-        <jar destfile="build/jar/Ass3B.jar" basedir="build/classes">
-            <manifest>
-                <attribute name="Main-Class" value="spl.assc.Driver"/>
-            </manifest>
-        </jar>
-    </target>
-
-    <target name="run" depends="jar">
-        <java jar="build/jar/Ass3B.jar" fork="true">
-        	<arg value="${arg0}"/>
-        	<arg value="${arg1}"/>
-        	<arg value="${arg2}"/>
-        </java>
-        	
-    </target>
-
-</project>
\ No newline at end of file
diff --git a/Ass3B/log.log.lck b/Ass3B/log.log.lck
deleted file mode 100644
index e69de29..0000000
diff --git a/Ass3B/src/spl/assc/Driver.java b/Ass3B/src/spl/assc/Driver.java
deleted file mode 100644
index e4be9ae..0000000
--- a/Ass3B/src/spl/assc/Driver.java
+++ /dev/null
@@ -1,53 +0,0 @@
-package spl.assc;
-
-import spl.assc.utils.MyLogger;
-import spl.assc.utils.XMLParser;
-
-/**
- * Our program main class which:
- * 1. Calling for Parsing inputs
- * 2. starting up management
- */
-public class Driver
-{
-	public static void main(String[] args)
-	{
-		if (args.length < 2)
-		{
-			System.out.println("Not enough arguments. Exiting...");
-			return;
-		}
-		
-		new MyLogger().setup();
-		
-		//Input files
-		String INITIALDATA_FILENAME 	= args[0];
-		String MENU_FILENAME 			= args[1];
-		String ORDERS_FILENAME 			= args[2];
-		
-		//Creating a new management 
-		Management manager = new Management(
-								XMLParser.getSizeOf(INITIALDATA_FILENAME,"InitialData.xsd", "Chef"), 
-								XMLParser.getSizeOf(INITIALDATA_FILENAME,"InitialData.xsd", "DeliveryPerson"),
-								XMLParser.parseAddress(INITIALDATA_FILENAME,"InitialData.xsd") 
-							);
-		//Parsing data and setting up in management
-		try {
-			XMLParser.parseResturant(INITIALDATA_FILENAME,"InitialData.xsd",manager);
-			XMLParser.parseMenu(MENU_FILENAME,"Menu.xsd",manager);
-			XMLParser.parseOrderList(ORDERS_FILENAME,"OrdersList.xsd",manager);
-		} catch (Exception e) {
-			e.printStackTrace();
-		}
-
-		//Starting the program
-		try {
-			manager.openRestaurant();
-			manager.start();
-		} catch (Exception e) {
-			e.printStackTrace();
-		}
-	}
-	
-
-}
diff --git a/Ass3B/src/spl/assc/Management.java b/Ass3B/src/spl/assc/Management.java
deleted file mode 100644
index be4fe92..0000000
--- a/Ass3B/src/spl/assc/Management.java
+++ /dev/null
@@ -1,292 +0,0 @@
-package spl.assc;
-
-import java.util.ArrayList;
-import java.util.HashMap;
-import java.util.LinkedList;
-import java.util.List;
-import java.util.Map;
-import java.util.Queue;
-import java.util.SortedSet;
-import java.util.concurrent.BlockingQueue;
-import java.util.concurrent.CountDownLatch;
-import java.util.concurrent.LinkedBlockingQueue;
-import java.util.concurrent.atomic.AtomicBoolean;
-import java.util.logging.Logger;
-
-import spl.assc.model.Address;
-import spl.assc.model.Dish;
-import spl.assc.model.Ingredient;
-import spl.assc.model.KitchenTool;
-import spl.assc.model.Order;
-import spl.assc.model.OrderOfDish;
-import spl.assc.model.Warehouse;
-import spl.assc.runnables.RunnableChef;
-import spl.assc.runnables.RunnableDeliveryPerson;
-
-/**
- * This class has two jobs:
- * 1. Setting up the restaurant 
- * 2. Handles orders: sending to appropriate Chefs , sending to delivery
- */
-public class Management
-{
-	private final static Logger LOGGER = Logger.getGlobal();
-	
-	private Statistics _stats;
-	private final Address _address;
-	private Queue<Order> _orders;
-	private Map<String,Dish> _menu;
-
-	private List<RunnableChef> _chefs;
-	private List<RunnableDeliveryPerson> _deliveryGuys;
-	private Warehouse _warehouse;
-	
-	private AtomicBoolean bell; //shared with Chefs - used for wait & notify purposes 
-	private BlockingQueue<Order> _awaitingOrdersToDeliver;
-
-	private CountDownLatch _chefsCountDownLatch;
-	private CountDownLatch _deliveryGuysCountDownLatch;
-
-	/**
-	 * 
-	 * @param chefsSize pre-knowledge of chefs amount
-	 * @param deliveryGuysSize pre-knowledge of delivery guys amount
-	 * @param address restaurant's address
-	 */
-	public Management(int chefsSize,int deliveryGuysSize, Address address) {
-		LOGGER.info(String.format("[-Management initialization started-] [Chefs=%d] [Delivery Persons=%d]\n", chefsSize,deliveryGuysSize));
-		
-		_address = address;
-		_chefs = new ArrayList<>();
-		_deliveryGuys = new ArrayList<>();
-		_menu = new HashMap<String, Dish>();
-		_warehouse = new Warehouse();
-		_orders = new LinkedList<>();
-		_stats = new Statistics(_warehouse);
-
-		_chefsCountDownLatch = new CountDownLatch(chefsSize);
-		_deliveryGuysCountDownLatch = new CountDownLatch(deliveryGuysSize);
-		_awaitingOrdersToDeliver = new LinkedBlockingQueue<>();
-
-		bell = new AtomicBoolean();
-	}
-	
-	/**
-	 * Initialization of staff members
-	 */
-	public void openRestaurant(){
-		for (RunnableChef chef : _chefs) {
-			new Thread(chef).start();
-		}
-		
-		for (RunnableDeliveryPerson deliveryGuy : _deliveryGuys) {
-			new Thread(deliveryGuy).start();
-		}		
-	}
-
-	/**
-	 * This method simulates the restaurant's activity
-	 */
-	public void start() 
-	{
-		LOGGER.info("[-Management started-]");
-		
-		//As long as there is pending orders: send to appropriate chef
-		while(!_orders.isEmpty()){
-			boolean isOrderTaken = false;
-			bell.compareAndSet(true, false);
-			
-			//Go through chefs and try to find a chef that will take the order
-			for (RunnableChef chef : _chefs) {
-				if( chef.canYouTakeThisOrder( _orders.peek()) ){
-					LOGGER.info(String.format("\t[Event=Order Sent To Chef] [Order=%s] [Chef=%s]", _orders.peek().info(),chef.info() ));
-					isOrderTaken = true;
-					_orders.poll();
-					break;
-				}
-			}
-			//if no chef could take the order -> go sleep and wait that a chef becomes available 
-			//*note: checking bell's status for knowing no one notified while awake
-			synchronized (bell) {
-				if(!isOrderTaken && !bell.get()){
-					try {
-						bell.wait();
-					} catch (InterruptedException e) {
-						e.printStackTrace();
-					}
-				}
-			}
-		}
-		
-		//Shutdown chefs
-		for (RunnableChef chef : _chefs) {
-			chef.stopTakingNewOrders();
-			synchronized (chef) {
-				chef.notifyAll();
-			}
-		}
-		
-		//wait for chefs to stop working
-		try {
-			_chefsCountDownLatch.await();
-		} catch (InterruptedException e1) {
-			e1.printStackTrace();
-		}
-
-		//Poison delivery guys
-		for (int i=0; i < _deliveryGuys.size(); i++) {
-			_awaitingOrdersToDeliver.add(new Order("Poisioned"));
-		}
-		
-		//wait for delivery guys to stop
-		try {
-			_deliveryGuysCountDownLatch.await();
-		} catch (InterruptedException e) {
-			e.printStackTrace();
-		}
-		LOGGER.info("[-Management ended-]\n");
-
-		LOGGER.info(String.format("[Statistics]\n%s", _stats.toString()));
-	}
-
-	
-	/**
-	 * push order to delivery queue
-	 * @param order order to add to delivery queue
-	 */
-	public void sendToDelivery(Order order) {
-		_awaitingOrdersToDeliver.add(order);
-	}
-
-	/**
-	 * Retrives an order from orders waiting for delivered queue
-	 * This method is Blocking
-	 * Could return a 'Poisoned' order
-	 * @return order to handle OR 'Poisoned' order
-	 * @throws InterruptedException
-	 */
-	public Order takeNextOrder() throws InterruptedException {
-		return _awaitingOrdersToDeliver.take();		
-	}
-
-	/**
-	 * This method calculates the distance from an order's address to restaurant's address
-	 * @param order
-	 * @return distance
-	 */
-	public long computeDistance(Order order) {
-		return order.computeDistanceFrom(_address);
-	}
-
-	/*
-	 * Methods used for setting up the restaurant
-	 */
-	
-	/**
-	 * adds reward to restaurant's revenue
-	 * @param reward
-	 */
-	public void addToStatistics(double reward) {
-		_stats.add(reward);
-	}
-
-	/**
-	 * adds order to restaurant's statistics 
-	 */
-	public void addToStatistics(Order order) {
-		_stats.add(order);		
-	}
-
-	/**
-	 * Adds a kitchen tool to the warehouse
-	 * @param name kitchen tool name
-	 * @param quantity kitchen tool quantity
-	 */
-	public void addKitchenTool(String name, int quantity) {
-		LOGGER.info(String.format("\t(+) KitchenTool added: [%s=%d]",name,quantity));
-		_warehouse.addKitchenTool(name,new KitchenTool(name, quantity));
-		
-	}
-
-	/**
-	 * Adds an ingredient to the warehouse
-	 * @param name ingredient  name
-	 * @param quantity ingredient quantity
-	 */
-	public void addIngredient(String name, int quantity) {
-		LOGGER.info(String.format("\t(+) Ingredient added: [%s=%d]",name,quantity));
-		_warehouse.addIngredient(name, new Ingredient(name, quantity));
-	}	
-	
-	/**
-	 * Adds a dish to the restaurant's menu
-	 * @param name
-	 * @param difficultyRating 
-	 * @param expectedCookTime 
-	 * @param reward dish cost to client
-	 * @param kitchenTools a list of needed kitchen tools in order to cook this this
-	 * @param ingredients a list of needed ingredients in order to cook this this
-	 */
-	public void addMenuDish(String name, int difficultyRating, long expectedCookTime, int reward, SortedSet<KitchenTool> kitchenTools, List<Ingredient> ingredients){
-		LOGGER.info(String.format("\t(+) Dish added: [%s]",name));
-		_menu.put(name, new Dish(name, difficultyRating, expectedCookTime, reward, kitchenTools, ingredients));
-	}
-	
-	/**
-	 * Adding a chef to restaurant's staff
-	 * @param name
-	 * @param rating chef's efficiency rating
-	 * @param endurance chef's endurance rating
-	 */
-	public void addChef(String name, double rating, int endurance){
-		_chefs.add(new RunnableChef(name, rating, endurance, bell,this, _chefsCountDownLatch, _warehouse) );
-		LOGGER.info(String.format("\t(+) Chef added: [name=%s] [rating=%s] [endurance=%s]", name,rating,endurance));
-	}
-	
-	/**
-	 * Adding a delivery person to restaurant's staff
-	 * @param name
-	 * @param speed
-	 */
-	public void addDeliveryGuy(String name, int speed) {
-		_deliveryGuys.add(new RunnableDeliveryPerson(name, speed, this, _deliveryGuysCountDownLatch) );
-		LOGGER.info(String.format("\t(+) Delivery Person added: [name=%s][speed=%d]", name,speed));		
-	}
-
-	/**
-	 * Adding a new order
-	 * @param id
-	 * @param address
-	 * @param ordersOfDish a list of containing dishes 
-	 */
-	public void addOrder(int id, Address address, List<OrderOfDish> ordersOfDish) {
-		int tmpDifficulty = 0;
-		for (OrderOfDish orderOfDish : ordersOfDish) {
-			orderOfDish.setDish(_menu.get( orderOfDish.getName() ));
-			tmpDifficulty += orderOfDish.get_dish().getDifficultyRating();
-		}
-		_orders.add(new Order(id, address, ordersOfDish,tmpDifficulty));
-		LOGGER.info(String.format("\t(+) Order added: [id=%s] %s", id,ordersOfDish));		
-	}
-
-	/**
-	 * Utility for printing restuarant's menu
-	 */
-	public void printMenu()
-	{
-		StringBuilder builder = new StringBuilder();
-		builder.append("*******************\n***\tMenu:\t***\n*******************\n");
-		
-		
-		for (int i = 0; i < _menu.size(); i++)
-		{
-			builder.append(i+1);
-			builder.append(":");
-			builder.append(_menu.values().toArray()[i].toString());
-		}
-		
-		LOGGER.info(builder.toString());
-	}
-
-	
-}
diff --git a/Ass3B/src/spl/assc/Statistics.java b/Ass3B/src/spl/assc/Statistics.java
deleted file mode 100644
index 04c34f8..0000000
--- a/Ass3B/src/spl/assc/Statistics.java
+++ /dev/null
@@ -1,45 +0,0 @@
-package spl.assc;
-
-import java.util.Vector;
-
-import spl.assc.model.Order;
-import spl.assc.model.Warehouse;
-
-/**
- * This class handles statistics for the restaurant
- */
-public class Statistics
-{
-	private double _moneyGained;
-	private Vector<Order> _deliveredOrders;
-	private Warehouse _warehouse;
-	
-	public Statistics(Warehouse warehouse) {
-		_moneyGained = 0;
-		_deliveredOrders = new Vector<>();
-		_warehouse = warehouse;
-	}
-	
-	//inserting data methods
-	public synchronized void add(double reward){
-		_moneyGained += reward;
-	}
-	public void add(Order order){
-		_deliveredOrders.add(order);
-	}
-
-	
-	@Override
-	public String toString() {
-		StringBuilder builder = new StringBuilder();
-		builder.append(String.format("\t\t[Money Gained=%.2f]\n\t\t[Delivered Orderes=]\n",_moneyGained));
-		for (Order order : _deliveredOrders) {
-			builder.append(String.format("\t%s", order.toString()));
-		}
-		builder.append("\t\t[Ingredients Consumed]\n");
-		builder.append(String.format("\t\t\t%s",_warehouse.consumedIngredientsReport()));
-
-		return builder.toString();
-
-	}
-}
diff --git a/Ass3B/src/spl/assc/model/Address.java b/Ass3B/src/spl/assc/model/Address.java
deleted file mode 100644
index ca96cc6..0000000
--- a/Ass3B/src/spl/assc/model/Address.java
+++ /dev/null
@@ -1,32 +0,0 @@
-package spl.assc.model;
-
-/**
- * This object represents an address (in x,y coords) 
- * This object is Immutable
- */
-public final class Address
-{
-	private final int _x;
-	private final int _y;
-
-	public Address(int x, int y) {
-		_x = x;
-		_y = y;
-	}
-	
-	@Override
-	public String toString()
-	{
-		return String.format("(%d,%d)",_x,_y );
-	}
-
-	/**
-	 * calculating a euclidean distance between this address and other address
-	 * @param other
-	 * @return distance
-	 */
-	public long computeDistanceTo(Address other){
-		return (long)Math.sqrt( Math.abs( Math.pow(this._y - other._y, 2) + Math.pow(this._x - other._x, 2) ));
-	}
-	
-}
diff --git a/Ass3B/src/spl/assc/model/Dish.java b/Ass3B/src/spl/assc/model/Dish.java
deleted file mode 100644
index 1c8bf52..0000000
--- a/Ass3B/src/spl/assc/model/Dish.java
+++ /dev/null
@@ -1,67 +0,0 @@
-package spl.assc.model;
-import java.util.List;
-import java.util.SortedSet;
-
-/**
- * This object represents a dish
- * This object is Immutable
- */
-public final class Dish
-{
-	private final String _name; 
-	private final int _difficultyRating; 
-	private final long _expectedCookTime; 
-	private final int _reward;
-	private final SortedSet<KitchenTool> _kitchenTools; 
-	private final List<Ingredient> _ingredients;
-	
-	public Dish(String name, int difficultyRating, long expectedCookTime, int reward, SortedSet<KitchenTool> kitchenTools, List<Ingredient> ingredients) {
-		_name = name;
-		_difficultyRating = difficultyRating;
-		_expectedCookTime = expectedCookTime;
-		_reward = reward;
-		_kitchenTools = kitchenTools;
-		_ingredients = ingredients;
-	}
-
-	/**
-	 * @return expected cook time for this dish
-	 */
-	public long getExpectedCookTime() {
-		return _expectedCookTime;
-	}
-	
-
-	public int getDifficultyRating() {
-		return _difficultyRating;
-	}
-
-
-	@Override
-	public String toString()
-	{
-		StringBuilder builder = new StringBuilder();
-		builder.append(String.format("\tDish:\t{\tName: %s,\tDifficultyRating: %d,\tExpectedCookTime: %d,\tReward: %d\t}\n", _name, _difficultyRating, _expectedCookTime, _reward));
-		builder.append("\t\tNeeded Kitchen Tools:\t");
-		builder.append(_kitchenTools);
-		builder.append("\n\t\tNeeded Ingredients:\t");
-		builder.append(_ingredients);
-		builder.append("\n\t====================================================================================================================\n");
-
-		return builder.toString();
-	}
-
-
-	public int getReward() {
-		return _reward;
-	}
-
-
-	public void take(Warehouse warehouse) {
-		warehouse.take(_ingredients, _kitchenTools);
-	}
-
-	public void putBack(Warehouse warehouse) {
-		warehouse.putBack(_kitchenTools);		
-	}
-}
diff --git a/Ass3B/src/spl/assc/model/Ingredient.java b/Ass3B/src/spl/assc/model/Ingredient.java
deleted file mode 100644
index bb40ac6..0000000
--- a/Ass3B/src/spl/assc/model/Ingredient.java
+++ /dev/null
@@ -1,29 +0,0 @@
-package spl.assc.model;
-
-/**
- * This object represent an ingredient
- */
-public class Ingredient extends WarehouseItem
-{
-	private int _currentQuantity;
-	
-	public Ingredient(String name, int quantity) {
-		super(name, quantity);
-		_currentQuantity = quantity;
-	}
-	
-	/**
-	 * Simulates taking some units from this ingredient
-	 * @param ingredient a needed ingredient item
-	 */
-	public synchronized void take(Ingredient ingredient){
-		_currentQuantity -= ingredient._initialQuantity;
-	}
-	
-	/**
-	 * @return how many units were used
-	 */
-	public int getConsumedAmount(){
-		return _initialQuantity-_currentQuantity;
-	}
-}
diff --git a/Ass3B/src/spl/assc/model/KitchenTool.java b/Ass3B/src/spl/assc/model/KitchenTool.java
deleted file mode 100644
index 1688b6b..0000000
--- a/Ass3B/src/spl/assc/model/KitchenTool.java
+++ /dev/null
@@ -1,39 +0,0 @@
-package spl.assc.model;
-
-import java.util.concurrent.Semaphore;
-
-/**
- * This class represents a kitchen tool
- */
-public class KitchenTool extends WarehouseItem
-{
-	private Semaphore _lock; //for simulating restrictions on available amount
-	
-	public KitchenTool(String name, int quantity) {
-		super(name, quantity);
-		_lock = new Semaphore(quantity);
-	}
-	
-	/**
-	 * If there is not enough kitchen tools as requested, will be blocked until available 
-	 * @param kitchenTool needed kitchen tools
-	 */
-	public void take(KitchenTool kitchenTool){
-		try {
-			_lock.acquire(kitchenTool._initialQuantity);
-		} catch (InterruptedException e) {
-			e.printStackTrace();
-		}
-
-	}
-	
-	/**
-	 * returning used kitchen tools to warehouse
-	 * @param kitchenTool
-	 */
-	public void putBack(KitchenTool kitchenTool){
-		_lock.release(kitchenTool._initialQuantity);
-	}
-
-	
-}
diff --git a/Ass3B/src/spl/assc/model/Order.java b/Ass3B/src/spl/assc/model/Order.java
deleted file mode 100644
index 7a92d1d..0000000
--- a/Ass3B/src/spl/assc/model/Order.java
+++ /dev/null
@@ -1,186 +0,0 @@
-package spl.assc.model;
-import java.util.ArrayList;
-import java.util.GregorianCalendar;
-import java.util.List;
-
-/**
- * This class represents an order
- */
-public class Order
-{
-	public Order(int id, Address address, List<OrderOfDish> ordersOfDish, int difficulty) {
-		_id = id;
-		_address = address;
-		_ordersOfDish = ordersOfDish;
-		_difficulty = difficulty;
-		_deliveredBy = "N/A";
-		_status = OrderStatus.INCOMPLETE;
-		_rewarded = "N/A";
-	}
-	
-	//for creating a poisoned order
-	public Order(String string) {
-		_id = -1;
-		_address = null;
-		_difficulty = 0;
-		_ordersOfDish = null;
-	}
-
-	private final int _id;
-	private final Address _address;
-	private final int _difficulty;
-	private final List<OrderOfDish> _ordersOfDish;
-	private Order.OrderStatus _status;
-	private long _cookStartTime;
-	private long _cookEndTime;
-	private long _deliveryStartTime;
-	private long _deliveryEndTime;
-	private String _deliveredBy;
-	private String _rewarded;
-	
-	//deep copy
-	private List<OrderOfDish> copyOrderOfDish(){
-		List<OrderOfDish> ordersOfDishCopy = new ArrayList<>();
-		for (int i = 0; i < _ordersOfDish.size(); i++) {
-			ordersOfDishCopy.add(_ordersOfDish.get(i));
-		}
-		return ordersOfDishCopy;
-	}
-	
-	public List<OrderOfDish> get_ordersOfDish() {
-		return copyOrderOfDish();
-	}
-
-	public void setDeliveryStartTime() {
-		this._deliveryStartTime = new GregorianCalendar().getTimeInMillis();
-	}
-
-	public void setDeliveryEndTime() {
-		this._deliveryEndTime = new GregorianCalendar().getTimeInMillis();
-	}
-
-	//not used anywhere.
-	public Order.OrderStatus get_status() {
-		if(_id == -1) return OrderStatus.POISONED;
-		return _status;
-	}
-
-	public void set_status(Order.OrderStatus _status) {
-		this._status = _status;
-	}
-
-
-	public enum OrderStatus {
-		INCOMPLETE,
-		INPROGRESS,
-		COMPLETE,
-		DELIVERED,
-		POISONED
-	}
-	
-	public String info(){
-		return ""+_id;
-	}
-	
-
-	public void setCookStartTime() {
-		_cookStartTime = new GregorianCalendar().getTimeInMillis();
-	}
-
-
-	public void setCookEndTime() {
-		_cookEndTime = new GregorianCalendar().getTimeInMillis();
-	}
-
-	/**
-	 * @return total time (cook + deliver)
-	 */
-	public long getTotalTime() {
-		if( _id == -1 ) return -1;
-		return ( (_cookEndTime-_cookStartTime) + (_deliveryEndTime-_deliveryStartTime) );
-	}
-	
-
-	public int getReward(){
-		int reward = 0;
-		if( _id == -1) return reward;
-		for (OrderOfDish orderOfDish : _ordersOfDish) {
-			reward+= orderOfDish.get_dish().getReward()*orderOfDish.getQuantity();
-		}
-		return reward;
-	}
-
-	public long getExpectedCookTime() {
-		long maxCookTime = 0;
-		if( _id == -1) return maxCookTime;
-
-		for (OrderOfDish orderOfDish : _ordersOfDish) {
-			long tmpExpectedTime = orderOfDish.get_dish().getExpectedCookTime();
-			if( tmpExpectedTime > maxCookTime){
-				maxCookTime = tmpExpectedTime;
-			}
-		}
-		return (maxCookTime);
-	}
-
-
-	public void setDeliveredBy(String _name) {
-		_deliveredBy = _name;
-		
-	}
-
-
-	public long computeDistanceFrom(Address _resturantAddress) {
-		return _resturantAddress.computeDistanceTo(_address);
-	}
-
-	/**
-	 * @return true if order is poisoned
-	 */
-	public boolean isPoisoned() {
-		return (_id == -1);
-	}
-
-	/**
-	 * @param _enduranceRating chef's endurance
-	 * @param _currentPressure chef's pressure
-	 * @return true if chef can take this order
-	 */
-	public boolean canItakeThisOrder(int _enduranceRating, int _currentPressure) {
-		return ( _difficulty <= (_enduranceRating - _currentPressure) );
-	}
-
-	public int decreasedPressure(int currentPressure) {
-		return currentPressure - _difficulty;
-	}
-	public int increasedPressure(int currentPressure) {
-		return currentPressure + _difficulty;
-	}
-
-	/**
-	 * returns: 
-	 * 100% if order was delivered in reasonable time
-	 * 50% otherwise
-	 * @param wasFined
-	 */
-	public void wasFined(boolean wasFined) {
-		if(wasFined){
-			_rewarded = "100%";
-		}
-		else{
-			_rewarded = "50%";
-		}
-	}
-
-	@Override
-	public String toString()
-	{
-		StringBuilder builder = new StringBuilder();
-		builder.append(String.format("\t\t[Order=%d] [Reward=%s] [DeliveryAddress=%s] [Delivery Guys=%s] ", _id,_rewarded, _address,_deliveredBy));
-		builder.append("[Requested Dishes=");
-		builder.append(_ordersOfDish);
-		builder.append("]\n");
-
-		return builder.toString();
-	}
-}
diff --git a/Ass3B/src/spl/assc/model/OrderOfDish.java b/Ass3B/src/spl/assc/model/OrderOfDish.java
deleted file mode 100644
index d9344c0..0000000
--- a/Ass3B/src/spl/assc/model/OrderOfDish.java
+++ /dev/null
@@ -1,40 +0,0 @@
-package spl.assc.model;
-
-/**
- * Represents a dish order (dish + it's amount)
- */
-public class OrderOfDish
-{
-	public OrderOfDish(String name, int quantity) {
-		_name = name;
-		_quantity = quantity;
-	}
-	
-	private final String _name;
-	private int _quantity;
-	private Dish _dish;
-	
-
-	public Dish get_dish() {
-		return _dish;
-	}
-	
-	public void setDish(Dish dish){
-		_dish = dish;
-	}
-
-
-	@Override
-	public String toString()
-	{
-		return String.format("%s=%d", _name, _quantity);
-	}
-
-	public String getName() {
-		return _name;
-	}
-
-	public int getQuantity() {
-		return _quantity;
-	}
-}
diff --git a/Ass3B/src/spl/assc/model/Warehouse.java b/Ass3B/src/spl/assc/model/Warehouse.java
deleted file mode 100644
index 6aeb649..0000000
--- a/Ass3B/src/spl/assc/model/Warehouse.java
+++ /dev/null
@@ -1,97 +0,0 @@
-package spl.assc.model;
-
-import java.util.HashMap;
-import java.util.List;
-import java.util.Map;
-import java.util.SortedSet;
-
-/**
- * This object represents a warehouse
- */
-public class Warehouse
-{
-
-	private Map<String,KitchenTool> _kitchenTools; 
-	private Map<String,Ingredient> 	_ingredients;
-
-	public Warehouse() {
-		_kitchenTools = new HashMap<String,KitchenTool>();
-		_ingredients = new HashMap<String,Ingredient>();
-
-	}
-	
-	public void addKitchenTool(String name, KitchenTool kitchenTool){
-		_kitchenTools.put(name, kitchenTool);
-	}
-	
-	public void addIngredient(String name, Ingredient ingredient){
-		_ingredients.put(name, ingredient);
-	}	
-	
-	/**
-	 * used to retrive desired kitchen tools and ingredients
-	 * This method is Blocking (semaphore kitchen tools take() )
-	 * @param ingredients
-	 * @param kitchenTools
-	 */
-	public void take(List<Ingredient> ingredients,SortedSet<KitchenTool> kitchenTools){
-		//take ingredients
-		for (Ingredient ingredient : ingredients) {
-			_ingredients.get( ingredient.getName() ).take(ingredient);
-		}
-		
-		//take kitchen tools
-		for (KitchenTool kitchenTool : kitchenTools) {
-			KitchenTool warehouseKitchenTool = _kitchenTools.get( kitchenTool.getName() );
-			warehouseKitchenTool.take( kitchenTool );
-		}
-	}
-
-	/**
-	 * return used kitchen tools to the warehouse
-	 * @param kitchenTools
-	 */
-	public void putBack(SortedSet<KitchenTool> kitchenTools){
-		for (KitchenTool kitchenTool : kitchenTools) {
-			_kitchenTools.get( kitchenTool.getName() ).putBack( kitchenTool );
-		}
-	}
-
-	@Override
-	public String toString()
-	{
-		StringBuilder builder = new StringBuilder();
-		//builder.append("***************************\n***\tWarehouse:\t***\n***************************\n");
-		builder.append("\t\tAvailable Kitchen Tools:\t");
-		builder.append(_kitchenTools);
-		builder.append("\n\t\tAvailable Ingredients:\t\t");
-		builder.append(_ingredients);
-		builder.append("\n\t====================================================================================================================\n");
-
-		return builder.toString();
-	}
-	
-	
-	/**
-	 * Utility, printing how many ingredients were used
-	 * @return
-	 */
-	public String consumedIngredientsReport()
-	{
-		StringBuilder builder = new StringBuilder();
-		
-		for (Ingredient ingredient : _ingredients.values()) {
-			if( ingredient.getConsumedAmount() > 0 ){
-				builder.append(String.format("[%s:%d], ", ingredient.getName(),ingredient.getConsumedAmount()));
-			}
-		}
-		//delete last ','
-		if(builder.length() >0){
-			return builder.substring(0,builder.length()-2);
-		}
-		else{
-			return builder.toString();
-		}
-	}
-
-}
diff --git a/Ass3B/src/spl/assc/model/WarehouseItem.java b/Ass3B/src/spl/assc/model/WarehouseItem.java
deleted file mode 100644
index 52ecefd..0000000
--- a/Ass3B/src/spl/assc/model/WarehouseItem.java
+++ /dev/null
@@ -1,22 +0,0 @@
-package spl.assc.model;
-
-public abstract class WarehouseItem
-{
-	public WarehouseItem(String name, int quantity) {
-		_name = name;
-		_initialQuantity = quantity;
-	}
-	
-	protected final String _name;
-	protected final int _initialQuantity;
-	
-	public String getName() {
-		return _name;
-	}	
-		
-	@Override
-	public String toString()
-	{
-		return String.format("%s:%d", _name, _initialQuantity);
-	}
-}
diff --git a/Ass3B/src/spl/assc/runnables/CallableCookWholeOrder.java b/Ass3B/src/spl/assc/runnables/CallableCookWholeOrder.java
deleted file mode 100644
index e5e1ede..0000000
--- a/Ass3B/src/spl/assc/runnables/CallableCookWholeOrder.java
+++ /dev/null
@@ -1,77 +0,0 @@
-package spl.assc.runnables;
-import java.util.concurrent.Callable;
-import java.util.concurrent.CountDownLatch;
-import java.util.logging.Logger;
-
-import spl.assc.model.Order;
-import spl.assc.model.Order.OrderStatus;
-import spl.assc.model.OrderOfDish;
-import spl.assc.model.Warehouse;
-
-/**
- * This class handles cooking all the dishes of an order in parallel 
- */
-public class CallableCookWholeOrder implements Callable<Order>
-{
-	private final static Logger LOGGER = Logger.getGlobal();
-	private final RunnableChef _myChef;
-	private final Order _myOrder;
-	private int _numOfThreads;
-	private final Warehouse _wareHouse;
-	
-	public CallableCookWholeOrder(RunnableChef runnableChef, Order order,Warehouse warhouse) {
-		_myOrder = order;
-		_myChef = runnableChef;
-		_numOfThreads =0;
-		_wareHouse = warhouse;
-	}
-
-	/**
-	 * calculating how much cookOneDish should run
-	 * @return a latch with ^ size
-	 */
-	private CountDownLatch createCountDownLatch(){
-		for (OrderOfDish orderOfDish : _myOrder.get_ordersOfDish()) {
-			_numOfThreads += orderOfDish.getQuantity();
-		}
-		return new CountDownLatch(_numOfThreads);
-	}
-
-	
-	@Override
-	/**
-	 * cooking all the order's dishes in parallel 
-	 */
-	public Order call() throws Exception
-	{
-		LOGGER.info(String.format("\t[Event=Cooking Started] [Order=%s]", _myOrder.info()));
-
-		CountDownLatch _countDownLatch = createCountDownLatch();
-
-		_myOrder.setCookStartTime();
-		
-		//for each dish : for each unit of the dish:
-		//creating a cookOneDish runnable and starting it
-		for (OrderOfDish orderOfDish : _myOrder.get_ordersOfDish()) {
-			for (int i = 0; i < orderOfDish.getQuantity(); i++) {
-				new Thread(new RunnableCookOneDish(orderOfDish.get_dish(), _wareHouse, _myChef,_countDownLatch)).start();
-			}
-		}
-		//waiting for all runnable cookOneDish will finish
-		_countDownLatch.await();
-		
-		_myOrder.setCookEndTime();
-
-		_myOrder.set_status(OrderStatus.COMPLETE);
-		
-		//Notifying the chef that the cook process of the order was completed
-		synchronized (_myChef) {
-			LOGGER.info(String.format("\t[Event=Cooking Ended] [Order=%s]", _myOrder.info()));
-			_myChef.notifyAll();
-			return _myOrder;
-		}
-	}
-
-	
-
-}
diff --git a/Ass3B/src/spl/assc/runnables/RunnableChef.java b/Ass3B/src/spl/assc/runnables/RunnableChef.java
deleted file mode 100644
index 540836e..0000000
--- a/Ass3B/src/spl/assc/runnables/RunnableChef.java
+++ /dev/null
@@ -1,209 +0,0 @@
-package spl.assc.runnables;
-
-import java.util.ArrayList;
-import java.util.Iterator;
-import java.util.LinkedList;
-import java.util.List;
-import java.util.Queue;
-import java.util.concurrent.CountDownLatch;
-import java.util.concurrent.ExecutionException;
-import java.util.concurrent.ExecutorService;
-import java.util.concurrent.Executors;
-import java.util.concurrent.Future;
-import java.util.concurrent.atomic.AtomicBoolean;
-import java.util.logging.Logger;
-
-import spl.assc.Management;
-import spl.assc.model.Order;
-import spl.assc.model.Order.OrderStatus;
-import spl.assc.model.Warehouse;
-
-/**
- * Runnable class which represents a restaurant's chef.
- * Handling cooking given orders
- */
-public class RunnableChef implements Runnable
-{
-	private final static Logger LOGGER = Logger.getGlobal();
-
-	private final String _name;
-	private final double _efficiencyRating;
-	private final int _enduranceRating;
-	private int _currentPressure; 
-
-	private boolean _stopTakingNewOrders;
-
-	private final Management _managment;
-	private final Warehouse _warehouse;
-
-	private final AtomicBoolean _bell;
-
-	private Queue<Order> _myPendingOrders;
-	private List<Future<Order>> _futures;
-	private ExecutorService _cookWholeOrderPool;
-	private CountDownLatch _latch;
-	
-	public RunnableChef(String name, double efficiencyRating, int enduranceRating, AtomicBoolean bell, Management managment, CountDownLatch latch, Warehouse warehouse) {
-		_name = name;
-		_efficiencyRating = efficiencyRating;
-		_enduranceRating = enduranceRating;	
-		_currentPressure = 0;
-		_stopTakingNewOrders = false;
-		_warehouse = warehouse;
-		_futures = new ArrayList<>();
-		_cookWholeOrderPool = Executors.newCachedThreadPool();
-		_myPendingOrders = new LinkedList<>();
-		_bell = bell;
-		_managment = managment;
-		_latch = latch;
-	}
-
-	@Override
-	/**
-	 * starting to work
-	 */
-	public void run()
-	{
-		try {
-			work();
-		} catch (Exception e) {
-			// TODO: handle exception
-			e.printStackTrace();
-		}
-	}
-	
-	/**
-	 * 
-	 */
-	private void work()
-	{
-		/**
-		 * As long as:
-		 * 1. management didn't shut chef down
-		 * 2. got new orders to process
-		 * 3. got orders to deliver
-		 * continue working and handeling the above
-		 */
-		while(!(_stopTakingNewOrders && _futures.isEmpty() && _myPendingOrders.isEmpty() )){
-			
-			//start working on available orders
-			if(!_myPendingOrders.isEmpty()){
-				handleNewOrder(_myPendingOrders.poll());
-			}
-			
-			//send completed orders to delivery
-			boolean wasPressureReduced = sendFinishedOrdersToDelivery();
-			
-			//if Pressure was reduced notify management 
-			if(wasPressureReduced){
-				_bell.compareAndSet(false, true);
-				synchronized (_bell) {
-					_bell.notifyAll(); // notify management that my pressure was reduced and i can take new orders now
-				}
-			}
-			else{ //else - let's try later
-				synchronized (this) {
-					try {
-						this.wait();
-					} catch (InterruptedException e) {
-						e.printStackTrace();
-					}
-				}
-			}
-			
-		}// end while
-		
-		_latch.countDown(); 
-		_cookWholeOrderPool.shutdown();
-		
-		LOGGER.info(String.format("\t[Event=Shutdown] [Chef=%s]", _name));
-	}
-	
-	public void stopTakingNewOrders(){
-		_stopTakingNewOrders = true;
-	}
-	
-	/**
-	 * Going through completed orders and sending them to delivery
-	 * not blocking.
-	 * @return true if pressure was reduced
-	 */
-	private boolean sendFinishedOrdersToDelivery(){
-		int currentOrdersSize = _futures.size();
-		for (Iterator<Future<Order>> it = _futures.iterator() ; it.hasNext() ;  ) {
-			Future<Order> future = it.next();
-			
-			if (future.isDone()){ //ask so won't be blocked
-				it.remove();
-					Order tmp;
-					try {
-						tmp = future.get(); //will succeed because asked if isDone
-						_currentPressure = tmp.decreasedPressure(_currentPressure);
-						deliverOrder(tmp);
-					} catch (InterruptedException | ExecutionException e) {
-						e.printStackTrace();
-					}
-			}
-		}
-		return ( currentOrdersSize > _futures.size() ); 
-	}
-	
-	/**
-	 * start cooking the whole order
-	 * @param order
-	 */
-	private void handleNewOrder(Order order) {
-		LOGGER.info(String.format("\t[Event=Took Order] [Chef=%s] [Order=%s]", _name,order.info()));
-		_futures.add( _cookWholeOrderPool.submit(new CallableCookWholeOrder(this,order,_warehouse)) );
-	}
-	
-	/**
-	 * Sending order to delivery
-	 * @param order
-	 */
-	private void deliverOrder(Order order)
-	{
-		LOGGER.info(String.format("\t[Event=Sent to Delivery] [Chef=%s] [Order=%s]", _name,order.info()));
-		_managment.sendToDelivery(order);
-		
-	}
-	
-
-	@Override
-	public String toString()
-	{
-		return String.format("%s:|efficiency:%.2f|endurance:%d", _name,_efficiencyRating,_enduranceRating);
-	}
-
-
-	/**
-	 * if chef can handle this order - will start working on immediately it and returns true
-	 * @param order
-	 * @return true if chef can take order
-	 */
-	public boolean canYouTakeThisOrder(Order order) {
-		if( order.canItakeThisOrder(_enduranceRating,_currentPressure) ){
-			//take order
-			order.set_status(OrderStatus.INPROGRESS);
-			
-			//reduce pressure and add to queue
-			_currentPressure = order.increasedPressure(_currentPressure);
-			_myPendingOrders.add(order);
-			//wake up chef if sleeping
-			synchronized (this) {
-				this.notifyAll();
-			}
-			return true;
-		}
-		else{
-			return false;
-		}
-	}
-
-	public String info() {
-		return _name;
-	}
-	public double get_efficiencyRating() {
-		return _efficiencyRating;
-	}
-}
diff --git a/Ass3B/src/spl/assc/runnables/RunnableCookOneDish.java b/Ass3B/src/spl/assc/runnables/RunnableCookOneDish.java
deleted file mode 100644
index 6275221..0000000
--- a/Ass3B/src/spl/assc/runnables/RunnableCookOneDish.java
+++ /dev/null
@@ -1,61 +0,0 @@
-package spl.assc.runnables;
-
-import java.util.concurrent.CountDownLatch;
-
-import spl.assc.model.Dish;
-import spl.assc.model.Warehouse;
-
-/**
- * This class handles cooking a single dish
- */
-public class RunnableCookOneDish implements Runnable
-{
-	private final Dish _dish;
-	private final Warehouse _warehouse;
-	private final RunnableChef _chef;
-	private final CountDownLatch _countDownLatch;
-	
-	public RunnableCookOneDish(Dish dish, Warehouse warehouse, RunnableChef chef,CountDownLatch countDownLatch) {
-		_dish = dish;
-		_warehouse = warehouse;
-		_chef = chef;
-		_countDownLatch = countDownLatch;
-	}
-	
-
-	/**
-	 * start coocking
-	 */
-	@Override
-	public void run(){
-		try {
-			cookOneDish();
-		} catch (Exception e) {
-			e.printStackTrace();
-		}
-	}
-
-	/**
-	 * simulates cooking one dish:
-	 * taking needed kitchen tools and ingredients from warehouse
-	 */
-	private void cookOneDish()
-	{
-		//1. take kitchen tools and ingredients from warehouse
-		_dish.take(_warehouse);
-		//2. sleep needed time
-		try {
-			Thread.sleep(Math.round(_dish.getExpectedCookTime()*_chef.get_efficiencyRating()));
-		} catch (InterruptedException e) {
-			e.printStackTrace();
-		}
-		
-		//3. return used kitchen tools to warehouse
-		_dish.putBack(_warehouse);
-
-		_countDownLatch.countDown();
-	}
-	
-
-
-}
diff --git a/Ass3B/src/spl/assc/runnables/RunnableDeliveryPerson.java b/Ass3B/src/spl/assc/runnables/RunnableDeliveryPerson.java
deleted file mode 100644
index 7a60855..0000000
--- a/Ass3B/src/spl/assc/runnables/RunnableDeliveryPerson.java
+++ /dev/null
@@ -1,134 +0,0 @@
-package spl.assc.runnables;
-
-import java.util.concurrent.CountDownLatch;
-import java.util.logging.Logger;
-
-import spl.assc.Management;
-import spl.assc.model.Order;
-import spl.assc.model.Order.OrderStatus;
-
-/**
- * This class represents a restaurant's delivery person
- * In order to shutdown needs to receive a poisoned order.
- */
-public class RunnableDeliveryPerson implements Runnable
-{
-	private final static Logger LOGGER = Logger.getGlobal();
-
-	private final String _name;
-	private final int _speed;
-	private final CountDownLatch _latch;
-	private final Management _management;
-	
-	public RunnableDeliveryPerson(String name, int speed, Management management, CountDownLatch latch) {
-		_name = name;
-		_speed = speed;
-		_latch = latch;
-		_management = management;
-	}
-
-	
-	@Override
-	public void run(){
-		try {
-			work();
-		} catch (Exception e) {
-			e.printStackTrace();
-		}
-	}
-	
-	/**
-	 * Constinley checking for new orders needed delivered and deliver them 
-	 */
-	private void work()
-	{
-		while(true){
-			
-			//trying to take an order (blocked untill succeed)
-			Order orderToDeliver = null;
-			try {
-				orderToDeliver = _management.takeNextOrder();
-				if(orderToDeliver.isPoisoned()){
-					break;
-				}
-
-			} catch (InterruptedException e) {
-				e.printStackTrace();
-			}
-			
-			if(orderToDeliver == null) continue;
-			
-			LOGGER.info(String.format("\t[Event=Order Taken] [DeliveryPerson=%s] [Order=%s]", _name, orderToDeliver.info()));
-
-			
-			long distance = _management.computeDistance(orderToDeliver);
-			long expectedDeliveryTime = (long)(distance/_speed);
-		
-			//1. set delivery start time
-			orderToDeliver.setDeliveryStartTime();
-			//2. deliver order (Sleep)
-			drive(expectedDeliveryTime);
-			//3. set deliver end time
-			orderToDeliver.setDeliveryEndTime();
-
-			//4. recive money
-			_management.addToStatistics( calculateReward(orderToDeliver,expectedDeliveryTime) );
-			_management.addToStatistics( orderToDeliver );
-			
-			//5. mark as delivered
-			orderToDeliver.set_status(OrderStatus.DELIVERED);
-			orderToDeliver.setDeliveredBy(_name);
-			//6. go home (Sleep)
-			drive(expectedDeliveryTime);
-			//if (Thread.interrupted())	wasInterruptSent = true;
-		}
-		LOGGER.info(String.format("\t[Event=Shutdown] [DeliveryPerson=%s]", _name));
-		_latch.countDown();
-
-	}
-
-	/**
-	 * calculating order's reward money
-	 * @param order
-	 * @param expectedDeliveryTime
-	 * @return money
-	 */
-	private double calculateReward(Order order, long expectedDeliveryTime) {
-		long actualTotalTime = order.getTotalTime();
-		long expectedTotalTime = order.getExpectedCookTime() + expectedDeliveryTime;
-
-		//checking if order was fined
-		boolean isFined = (actualTotalTime > 1.15 * expectedTotalTime);
-		double dishReward = order.getReward();
-		
-		LOGGER.info(String.format("\t[Stats] [Order=%s] [Fined=%b] [Actual time=%d] [Expected time=%d]", order.info(),isFined,actualTotalTime,expectedTotalTime));
-
-		if(isFined){
-			order.wasFined(false);
-			return dishReward*0.5;
-		}
-		else{
-			order.wasFined(true);
-			return dishReward;
-		}
-	}
-
-	/**
-	 * simulates driving between locations
-	 * @param deliveryTime
-	 */
-	private void drive(long deliveryTime){
-		
-		try {
-			Thread.sleep( deliveryTime );
-		} catch (InterruptedException e) {
-			Thread.currentThread().interrupt();
-		}
-	}
-
-	@Override
-	public String toString()
-	{
-		return String.format("%s:|speed:%d", _name,_speed);
-	}
-}
diff --git a/Ass3B/src/spl/assc/utils/KitchenToolsComparator.java b/Ass3B/src/spl/assc/utils/KitchenToolsComparator.java
deleted file mode 100644
index 25bcb8b..0000000
--- a/Ass3B/src/spl/assc/utils/KitchenToolsComparator.java
+++ /dev/null
@@ -1,17 +0,0 @@
-package spl.assc.utils;
-
-import java.util.Comparator;
-
-import spl.assc.model.KitchenTool;
-
-/**
- * comparing kitchen tools by name
- */
-public class KitchenToolsComparator implements Comparator<KitchenTool> {
-
-	@Override
-	public int compare(KitchenTool o1, KitchenTool o2) {
-		return o1.getName().compareTo(o2.getName());
-	}
-
-}
diff --git a/Ass3B/src/spl/assc/utils/MyFormatter.java b/Ass3B/src/spl/assc/utils/MyFormatter.java
deleted file mode 100644
index 02f2244..0000000
--- a/Ass3B/src/spl/assc/utils/MyFormatter.java
+++ /dev/null
@@ -1,25 +0,0 @@
-package spl.assc.utils;
-import java.text.SimpleDateFormat;
-import java.util.Date;
-import java.util.logging.Formatter;
-import java.util.logging.LogRecord;
-
-
-/**
- * Custom format for logger
- *
- */
-public class MyFormatter extends Formatter
-{
-	@Override
-	public String format(LogRecord record)
-	{
-		SimpleDateFormat sdf = new SimpleDateFormat("HH:mm:ss.SSS");
-		return String.format("%s %s\n", 
-					sdf.format(new Date(record.getMillis())), 
-					record.getMessage()
-					);
-
-	}
-
-}
diff --git a/Ass3B/src/spl/assc/utils/MyLogger.java b/Ass3B/src/spl/assc/utils/MyLogger.java
deleted file mode 100644
index 6a98a55..0000000
--- a/Ass3B/src/spl/assc/utils/MyLogger.java
+++ /dev/null
@@ -1,41 +0,0 @@
-package spl.assc.utils;
-import java.util.logging.ConsoleHandler;
-import java.util.logging.FileHandler;
-import java.util.logging.Formatter;
-import java.util.logging.Handler;
-import java.util.logging.Level;
-import java.util.logging.Logger;
-
-/**
- * Logger Utility
- */
-public class MyLogger
-{
-
-	public void setup()
-	{
-		Logger logger = Logger.getGlobal();
-		
-		logger.setLevel(Level.FINEST);
-		
-		logger.setUseParentHandlers(false);
-		Formatter formatter = new MyFormatter();
-		
-		Handler consoleHandler = new ConsoleHandler();
-		
-		consoleHandler.setFormatter(formatter);
-		logger.addHandler(consoleHandler);
-
-		try
-		{
-			Handler fileHandler = new FileHandler("log.log");
-			fileHandler.setFormatter(formatter);
-			logger.addHandler(fileHandler);
-		} 
-		catch (Exception e)
-		{
-			logger.warning("could not create file logger");
-		}
-
-	}
-}
diff --git a/Ass3B/src/spl/assc/utils/XMLParser.java b/Ass3B/src/spl/assc/utils/XMLParser.java
deleted file mode 100644
index 23adbd2..0000000
--- a/Ass3B/src/spl/assc/utils/XMLParser.java
+++ /dev/null
@@ -1,252 +0,0 @@
-package spl.assc.utils;
-import java.io.File;
-import java.util.ArrayList;
-import java.util.List;
-import java.util.SortedSet;
-import java.util.TreeSet;
-import java.util.logging.Logger;
-
-import javax.xml.XMLConstants;
-import javax.xml.parsers.DocumentBuilderFactory;
-import javax.xml.validation.Schema;
-import javax.xml.validation.SchemaFactory;
-
-import org.w3c.dom.Document;
-import org.w3c.dom.Element;
-import org.w3c.dom.Node;
-import org.w3c.dom.NodeList;
-
-import spl.assc.Management;
-import spl.assc.model.Address;
-import spl.assc.model.Ingredient;
-import spl.assc.model.KitchenTool;
-import spl.assc.model.OrderOfDish;
-
-
-public class XMLParser
-{
-	private final static Logger LOGGER = Logger.getGlobal();
-
-	//////////// General //////////////////////////////////////////////
-	
-	private static String getNodeStringValue(Node node, String tagName)
-	{
-		Element element = (Element)node;
-		return element.getElementsByTagName(tagName).item(0).getTextContent();
-	}
-	
-	private static int getNodeIntValue(Node node, String tagName)
-	{
-		return Integer.parseInt(getNodeStringValue(node, tagName));
-	}
-	
-	private static long getNodeLongValue(Node node, String tagName)
-	{
-		return Integer.parseInt(getNodeStringValue(node, tagName));
-	}
-	
-	private static double getNodeDoubleValue(Node node, String tagName)
-	{
-		return Double.parseDouble(getNodeStringValue(node, tagName));
-	}
-	
-	private static Document getDocumentFromXML(String filename, String schemaFilename)
-	{
-		DocumentBuilderFactory documentBuilder = DocumentBuilderFactory.newInstance();
-		documentBuilder.setIgnoringElementContentWhitespace(true);
-		Schema schema;
-		Document document = null;
-		try
-		{
-			schema = SchemaFactory.newInstance(XMLConstants.W3C_XML_SCHEMA_NS_URI).newSchema(new File(schemaFilename));
-			documentBuilder.setSchema(schema);
-			document = documentBuilder.newDocumentBuilder().parse(filename);
-		} catch (Exception e)
-		{
-			Logger.getGlobal().severe("xml/xsd error");
-		}
-		
-		return document;
-	    	
-	    	
-	}
-
-	
-	///////////////////////////////////////////////////////////////////
-	
-	
-	//////////// Menu /////////////////////////////////////////////////
-	
-	public static void parseMenu(String filename,String schemaFilename, Management management)
-	{
-		Document doc = getDocumentFromXML(filename,schemaFilename);
-
-		NodeList dishNodes = doc.getElementsByTagName("Dish");
-		LOGGER.info("[DISH]");
-
-		for (int i = 0; i < dishNodes.getLength(); i++)
-		{
-			NodeList kitchenToolNodes 		= ((Element)dishNodes.item(i)).getElementsByTagName("KitchenTool");
-			SortedSet<KitchenTool> kitchenTools 	= parseKitchenTools(kitchenToolNodes);
-			
-			NodeList ingredientNodes 		= ((Element)dishNodes.item(i)).getElementsByTagName("Ingredient");			
-			List<Ingredient> ingredients 	= parseIngredients(ingredientNodes);
-			
-			String name = 			getNodeStringValue(dishNodes.item(i), "name");
-			int difficultyRating = 	getNodeIntValue(dishNodes.item(i), "difficultyRating");
-			long expectedCookTime = getNodeLongValue(dishNodes.item(i), "expectedCookTime");
-			int reward = 			getNodeIntValue(dishNodes.item(i), "reward");
-			management.addMenuDish(name, difficultyRating, expectedCookTime, reward, kitchenTools, ingredients);
-			
-		}
-		LOGGER.info("[/DISH]\n");
-	
-	}
-	
-	private static List<Ingredient> parseIngredients(NodeList ingredientNodes)
-	{
-		List<Ingredient> ingredients = new ArrayList<>();
-		for (int i = 0; i < ingredientNodes.getLength(); i++)
-		{
-			String name = 	getNodeStringValue(ingredientNodes.item(i), "name");  			
-			int quantity = 	getNodeIntValue(ingredientNodes.item(i), "quantity");
-			ingredients.add(new Ingredient(name, quantity));
-		}
-		return ingredients;
-	}
-	
-	private static SortedSet<KitchenTool> parseKitchenTools(NodeList kitchenToolNodes)
-	{
-		
-		SortedSet<KitchenTool> kitchenTools = new TreeSet<KitchenTool>(new KitchenToolsComparator());
-		for (int i = 0; i < kitchenToolNodes.getLength(); i++)
-		{
-			String name = 	getNodeStringValue(kitchenToolNodes.item(i), "name");  			
-			int quantity = 	getNodeIntValue(kitchenToolNodes.item(i), "quantity");
-			kitchenTools.add(new KitchenTool(name, quantity));
-		}
-		return kitchenTools;
-	}
-	private static void parseIngredients(NodeList ingredientNodes,Management management)
-	{
-		LOGGER.info("[INGREDIENTS]");
-		for (int i = 0; i < ingredientNodes.getLength(); i++)
-		{
-			String name = 	getNodeStringValue(ingredientNodes.item(i), "name");  			
-			int quantity = 	getNodeIntValue(ingredientNodes.item(i), "quantity");
-			management.addIngredient(name, quantity);
-
-		}
-		LOGGER.info("[/INGREDIENTS]\n");
-	}
-	
-	private static void parseKitchenTools(NodeList kitchenToolNodes, Management management)
-	{
-		LOGGER.info("[TOOLS]");
-		for (int i = 0; i < kitchenToolNodes.getLength(); i++)
-		{
-			String name = 	getNodeStringValue(kitchenToolNodes.item(i), "name");  			
-			int quantity = 	getNodeIntValue(kitchenToolNodes.item(i), "quantity");
-			management.addKitchenTool(name, quantity);
-		}
-		LOGGER.info("[/TOOLS]\n");
-	}
-	
-	///////////////////////////////////////////////////////////////////
-	
-	//////////// OrderList ////////////////////////////////////////////	
-
-	public static void parseOrderList(String filename, String schemaFilename,Management management)
-	{
-		LOGGER.info("[ORDERS]");
-		
-		Document doc = getDocumentFromXML(filename,schemaFilename);
-
-		NodeList orderNodes = doc.getElementsByTagName("Order");
-
-		for (int i = 0; i < orderNodes.getLength(); i++)
-		{
-			int id = Integer.parseInt(((Element)orderNodes.item(i)).getAttribute("id"));
-			int x = getNodeIntValue(orderNodes.item(i), "x");
-			int y = getNodeIntValue(orderNodes.item(i), "y");
-			Address address = new Address(x, y);
-			
-			NodeList orderOfDishNodes 		= ((Element)orderNodes.item(i)).getElementsByTagName("Dish");
-			List<OrderOfDish> ordersOfDish 	= parseOrderOfDish(orderOfDishNodes);
-			management.addOrder(id, address, ordersOfDish);
-		
-		}
-		LOGGER.info("[/ORDERS]\n");
-	}
-	
-	
-	private static List<OrderOfDish> parseOrderOfDish(NodeList orderOfDishNodes)
-	{
-		List<OrderOfDish> ordersOfDish = new ArrayList<>();
-		for (int i = 0; i < orderOfDishNodes.getLength(); i++)
-		{
-			String name = 	getNodeStringValue(orderOfDishNodes.item(i), "name");  			
-			int quantity = 	getNodeIntValue(orderOfDishNodes.item(i), "quantity");
-			ordersOfDish.add(new OrderOfDish(name, quantity));
-		}
-		return ordersOfDish;
-	}
-	
-	///////////////////////////////////////////////////////////////////	
-	
-	
-	//////////// Resturant ////////////////////////////////////////////
-	
-	public static void parseResturant(String filename,String schemaFilename, Management manager)
-	{
-		Document document = getDocumentFromXML(filename,schemaFilename);
-		
-		parseChefs(document.getElementsByTagName("Chef"),manager);
-		parseDeliveryGuys(document.getElementsByTagName("DeliveryPerson"),manager);
-		parseKitchenTools(document.getElementsByTagName("KitchenTool"),manager);
-		parseIngredients(document.getElementsByTagName("Ingredient"),manager);
-		
-	}
-	
-	public static Address parseAddress(String filename,String schemaFilename){
-		Document document = getDocumentFromXML(filename,schemaFilename);
-		Node addressNode = document.getElementsByTagName("Address").item(0);
-		Address address = new Address(getNodeIntValue(addressNode, "x"), getNodeIntValue(addressNode, "y"));
-		return address;
-	}
-	
-	private static void parseChefs(NodeList chefNodes, Management management)
-	{
-		LOGGER.info("[CHEFS]");
-		for (int i = 0; i < chefNodes.getLength(); i++)
-		{
-			String name = 	getNodeStringValue(chefNodes.item(i), "name");  			
-			double efficiencyRating = 	getNodeDoubleValue(chefNodes.item(i), "efficiencyRating");
-			int enduranceRating = 	getNodeIntValue(chefNodes.item(i), "enduranceRating");
-			management.addChef(name, efficiencyRating, enduranceRating);
-		}
-		LOGGER.info("[/CHEFS]\n");
-	}
-	
-	private static void parseDeliveryGuys(NodeList deliveryGuysNodes, Management management)
-	{
-		LOGGER.info("[DELIVERY]");
-		for (int i = 0; i < deliveryGuysNodes.getLength(); i++)
-		{
-			String name = 	getNodeStringValue(deliveryGuysNodes.item(i), "name");  			
-			int speed = 	getNodeIntValue(deliveryGuysNodes.item(i), "speed");
-			
-			management.addDeliveryGuy(name,speed);
-		}
-		LOGGER.info("[/DELIVERY]\n");
-	}
-
-	public static int getSizeOf(String filename,String schemaFilename,String tag) {
-		Document document = getDocumentFromXML(filename,schemaFilename);
-		return document.getElementsByTagName(tag).getLength();
-	}
-	
-	
-	
-	///////////////////////////////////////////////////////////////////
-}
diff --git a/AssB/.cproject b/AssB/.cproject
deleted file mode 100644
index 8b102aa..0000000
--- a/AssB/.cproject
+++ /dev/null
@@ -1,134 +0,0 @@
-<?xml version="1.0" encoding="UTF-8" standalone="no"?>
-<?fileVersion 4.0.0?>
-
-<cproject storage_type_id="org.eclipse.cdt.core.XmlProjectDescriptionStorage">
-	<storageModule moduleId="org.eclipse.cdt.core.settings">
-		<cconfiguration id="cdt.managedbuild.config.gnu.exe.debug.198419793">
-			<storageModule buildSystemId="org.eclipse.cdt.managedbuilder.core.configurationDataProvider" id="cdt.managedbuild.config.gnu.exe.debug.198419793" moduleId="org.eclipse.cdt.core.settings" name="Debug">
-				<externalSettings/>
-				<extensions>
-					<extension id="org.eclipse.cdt.core.ELF" point="org.eclipse.cdt.core.BinaryParser"/>
-					<extension id="org.eclipse.cdt.core.GmakeErrorParser" point="org.eclipse.cdt.core.ErrorParser"/>
-					<extension id="org.eclipse.cdt.core.CWDLocator" point="org.eclipse.cdt.core.ErrorParser"/>
-					<extension id="org.eclipse.cdt.core.GCCErrorParser" point="org.eclipse.cdt.core.ErrorParser"/>
-					<extension id="org.eclipse.cdt.core.GASErrorParser" point="org.eclipse.cdt.core.ErrorParser"/>
-					<extension id="org.eclipse.cdt.core.GLDErrorParser" point="org.eclipse.cdt.core.ErrorParser"/>
-				</extensions>
-			</storageModule>
-			<storageModule moduleId="cdtBuildSystem" version="4.0.0">
-				<configuration artifactName="${ProjName}" buildArtefactType="org.eclipse.cdt.build.core.buildArtefactType.exe" buildProperties="org.eclipse.cdt.build.core.buildType=org.eclipse.cdt.build.core.buildType.debug,org.eclipse.cdt.build.core.buildArtefactType=org.eclipse.cdt.build.core.buildArtefactType.exe" cleanCommand="rm -rf" description="" id="cdt.managedbuild.config.gnu.exe.debug.198419793" name="Debug" parent="cdt.managedbuild.config.gnu.exe.debug">
-					<folderInfo id="cdt.managedbuild.config.gnu.exe.debug.198419793." name="/" resourcePath="">
-						<toolChain id="cdt.managedbuild.toolchain.gnu.exe.debug.1044611240" name="Linux GCC" superClass="cdt.managedbuild.toolchain.gnu.exe.debug">
-							<targetPlatform id="cdt.managedbuild.target.gnu.platform.exe.debug.366266184" name="Debug Platform" superClass="cdt.managedbuild.target.gnu.platform.exe.debug"/>
-							<builder buildPath="${workspace_loc:/AssB}" id="cdt.managedbuild.target.gnu.builder.exe.debug.1916977152" keepEnvironmentInBuildfile="false" managedBuildOn="false" name="Gnu Make Builder" superClass="cdt.managedbuild.target.gnu.builder.exe.debug"/>
-							<tool id="cdt.managedbuild.tool.gnu.archiver.base.1468088674" name="GCC Archiver" superClass="cdt.managedbuild.tool.gnu.archiver.base"/>
-							<tool id="cdt.managedbuild.tool.gnu.cpp.compiler.exe.debug.219157570" name="GCC C++ Compiler" superClass="cdt.managedbuild.tool.gnu.cpp.compiler.exe.debug">
-								<option id="gnu.cpp.compiler.exe.debug.option.optimization.level.1928113021" name="Optimization Level" superClass="gnu.cpp.compiler.exe.debug.option.optimization.level" value="gnu.cpp.compiler.optimization.level.none" valueType="enumerated"/>
-								<option id="gnu.cpp.compiler.exe.debug.option.debugging.level.1563082071" name="Debug Level" superClass="gnu.cpp.compiler.exe.debug.option.debugging.level" value="gnu.cpp.compiler.debugging.level.max" valueType="enumerated"/>
-								<option id="gnu.cpp.compiler.option.include.paths.1900602992" name="Include paths (-I)" superClass="gnu.cpp.compiler.option.include.paths" valueType="includePath">
-									<listOptionValue builtIn="false" value="/usr/local/include"/>
-									<listOptionValue builtIn="false" value="../include"/>
-								</option>
-								<inputType id="cdt.managedbuild.tool.gnu.cpp.compiler.input.1727772770" superClass="cdt.managedbuild.tool.gnu.cpp.compiler.input"/>
-							</tool>
-							<tool id="cdt.managedbuild.tool.gnu.c.compiler.exe.debug.957370741" name="GCC C Compiler" superClass="cdt.managedbuild.tool.gnu.c.compiler.exe.debug">
-								<option defaultValue="gnu.c.optimization.level.none" id="gnu.c.compiler.exe.debug.option.optimization.level.137863656" name="Optimization Level" superClass="gnu.c.compiler.exe.debug.option.optimization.level" valueType="enumerated"/>
-								<option id="gnu.c.compiler.exe.debug.option.debugging.level.1732701045" name="Debug Level" superClass="gnu.c.compiler.exe.debug.option.debugging.level" value="gnu.c.debugging.level.max" valueType="enumerated"/>
-								<inputType id="cdt.managedbuild.tool.gnu.c.compiler.input.327317854" superClass="cdt.managedbuild.tool.gnu.c.compiler.input"/>
-							</tool>
-							<tool id="cdt.managedbuild.tool.gnu.c.linker.exe.debug.748412504" name="GCC C Linker" superClass="cdt.managedbuild.tool.gnu.c.linker.exe.debug"/>
-							<tool id="cdt.managedbuild.tool.gnu.cpp.linker.exe.debug.36889131" name="GCC C++ Linker" superClass="cdt.managedbuild.tool.gnu.cpp.linker.exe.debug">
-								<option id="gnu.cpp.link.option.paths.805937635" name="Library search path (-L)" superClass="gnu.cpp.link.option.paths" valueType="libPaths">
-									<listOptionValue builtIn="false" value="/usr/local/lib"/>
-									<listOptionValue builtIn="false" value="/usr/lib"/>
-								</option>
-								<option id="gnu.cpp.link.option.libs.1052853844" name="Libraries (-l)" superClass="gnu.cpp.link.option.libs" valueType="libs">
-									<listOptionValue builtIn="false" value="PocoFoundation"/>
-									<listOptionValue builtIn="false" value="PocoUtil"/>
-									<listOptionValue builtIn="false" value="opencv_core"/>
-									<listOptionValue builtIn="false" value="opencv_imgproc"/>
-									<listOptionValue builtIn="false" value="opencv_highgui"/>
-									<listOptionValue builtIn="false" value="opencv_objdetect"/>
-								</option>
-								<inputType id="cdt.managedbuild.tool.gnu.cpp.linker.input.1225001330" superClass="cdt.managedbuild.tool.gnu.cpp.linker.input">
-									<additionalInput kind="additionalinputdependency" paths="$(USER_OBJS)"/>
-									<additionalInput kind="additionalinput" paths="$(LIBS)"/>
-								</inputType>
-							</tool>
-							<tool id="cdt.managedbuild.tool.gnu.assembler.exe.debug.631261999" name="GCC Assembler" superClass="cdt.managedbuild.tool.gnu.assembler.exe.debug">
-								<inputType id="cdt.managedbuild.tool.gnu.assembler.input.2083266419" superClass="cdt.managedbuild.tool.gnu.assembler.input"/>
-							</tool>
-						</toolChain>
-					</folderInfo>
-				</configuration>
-			</storageModule>
-			<storageModule moduleId="org.eclipse.cdt.core.externalSettings"/>
-		</cconfiguration>
-		<cconfiguration id="cdt.managedbuild.config.gnu.exe.release.1448993347">
-			<storageModule buildSystemId="org.eclipse.cdt.managedbuilder.core.configurationDataProvider" id="cdt.managedbuild.config.gnu.exe.release.1448993347" moduleId="org.eclipse.cdt.core.settings" name="Release">
-				<externalSettings/>
-				<extensions>
-					<extension id="org.eclipse.cdt.core.ELF" point="org.eclipse.cdt.core.BinaryParser"/>
-					<extension id="org.eclipse.cdt.core.GmakeErrorParser" point="org.eclipse.cdt.core.ErrorParser"/>
-					<extension id="org.eclipse.cdt.core.CWDLocator" point="org.eclipse.cdt.core.ErrorParser"/>
-					<extension id="org.eclipse.cdt.core.GCCErrorParser" point="org.eclipse.cdt.core.ErrorParser"/>
-					<extension id="org.eclipse.cdt.core.GASErrorParser" point="org.eclipse.cdt.core.ErrorParser"/>
-					<extension id="org.eclipse.cdt.core.GLDErrorParser" point="org.eclipse.cdt.core.ErrorParser"/>
-				</extensions>
-			</storageModule>
-			<storageModule moduleId="cdtBuildSystem" version="4.0.0">
-				<configuration artifactName="${ProjName}" buildArtefactType="org.eclipse.cdt.build.core.buildArtefactType.exe" buildProperties="org.eclipse.cdt.build.core.buildType=org.eclipse.cdt.build.core.buildType.release,org.eclipse.cdt.build.core.buildArtefactType=org.eclipse.cdt.build.core.buildArtefactType.exe" cleanCommand="rm -rf" description="" id="cdt.managedbuild.config.gnu.exe.release.1448993347" name="Release" parent="cdt.managedbuild.config.gnu.exe.release">
-					<folderInfo id="cdt.managedbuild.config.gnu.exe.release.1448993347." name="/" resourcePath="">
-						<toolChain id="cdt.managedbuild.toolchain.gnu.exe.release.1945972564" name="Linux GCC" superClass="cdt.managedbuild.toolchain.gnu.exe.release">
-							<targetPlatform id="cdt.managedbuild.target.gnu.platform.exe.release.975817131" name="Debug Platform" superClass="cdt.managedbuild.target.gnu.platform.exe.release"/>
-							<builder buildPath="${workspace_loc:/AssB/Release}" id="cdt.managedbuild.target.gnu.builder.exe.release.1602705522" keepEnvironmentInBuildfile="false" managedBuildOn="true" name="Gnu Make Builder" superClass="cdt.managedbuild.target.gnu.builder.exe.release"/>
-							<tool id="cdt.managedbuild.tool.gnu.archiver.base.192444584" name="GCC Archiver" superClass="cdt.managedbuild.tool.gnu.archiver.base"/>
-							<tool id="cdt.managedbuild.tool.gnu.cpp.compiler.exe.release.314581331" name="GCC C++ Compiler" superClass="cdt.managedbuild.tool.gnu.cpp.compiler.exe.release">
-								<option id="gnu.cpp.compiler.exe.release.option.optimization.level.1392479869" name="Optimization Level" superClass="gnu.cpp.compiler.exe.release.option.optimization.level" value="gnu.cpp.compiler.optimization.level.most" valueType="enumerated"/>
-								<option id="gnu.cpp.compiler.exe.release.option.debugging.level.681257935" name="Debug Level" superClass="gnu.cpp.compiler.exe.release.option.debugging.level" value="gnu.cpp.compiler.debugging.level.none" valueType="enumerated"/>
-								<inputType id="cdt.managedbuild.tool.gnu.cpp.compiler.input.877797745" superClass="cdt.managedbuild.tool.gnu.cpp.compiler.input"/>
-							</tool>
-							<tool id="cdt.managedbuild.tool.gnu.c.compiler.exe.release.152653160" name="GCC C Compiler" superClass="cdt.managedbuild.tool.gnu.c.compiler.exe.release">
-								<option defaultValue="gnu.c.optimization.level.most" id="gnu.c.compiler.exe.release.option.optimization.level.1683601860" name="Optimization Level" superClass="gnu.c.compiler.exe.release.option.optimization.level" valueType="enumerated"/>
-								<option id="gnu.c.compiler.exe.release.option.debugging.level.1422048896" name="Debug Level" superClass="gnu.c.compiler.exe.release.option.debugging.level" value="gnu.c.debugging.level.none" valueType="enumerated"/>
-								<inputType id="cdt.managedbuild.tool.gnu.c.compiler.input.1059387993" superClass="cdt.managedbuild.tool.gnu.c.compiler.input"/>
-							</tool>
-							<tool id="cdt.managedbuild.tool.gnu.c.linker.exe.release.1872600967" name="GCC C Linker" superClass="cdt.managedbuild.tool.gnu.c.linker.exe.release"/>
-							<tool id="cdt.managedbuild.tool.gnu.cpp.linker.exe.release.2038299733" name="GCC C++ Linker" superClass="cdt.managedbuild.tool.gnu.cpp.linker.exe.release">
-								<inputType id="cdt.managedbuild.tool.gnu.cpp.linker.input.959718811" superClass="cdt.managedbuild.tool.gnu.cpp.linker.input">
-									<additionalInput kind="additionalinputdependency" paths="$(USER_OBJS)"/>
-									<additionalInput kind="additionalinput" paths="$(LIBS)"/>
-								</inputType>
-							</tool>
-							<tool id="cdt.managedbuild.tool.gnu.assembler.exe.release.981482367" name="GCC Assembler" superClass="cdt.managedbuild.tool.gnu.assembler.exe.release">
-								<inputType id="cdt.managedbuild.tool.gnu.assembler.input.420383345" superClass="cdt.managedbuild.tool.gnu.assembler.input"/>
-							</tool>
-						</toolChain>
-					</folderInfo>
-				</configuration>
-			</storageModule>
-			<storageModule moduleId="org.eclipse.cdt.core.externalSettings"/>
-		</cconfiguration>
-	</storageModule>
-	<storageModule moduleId="cdtBuildSystem" version="4.0.0">
-		<project id="AssB.cdt.managedbuild.target.gnu.exe.379973029" name="Executable" projectType="cdt.managedbuild.target.gnu.exe"/>
-	</storageModule>
-	<storageModule moduleId="refreshScope" versionNumber="1">
-		<resource resourceType="PROJECT" workspacePath="/AssB"/>
-	</storageModule>
-	<storageModule moduleId="scannerConfiguration">
-		<autodiscovery enabled="true" problemReportingEnabled="true" selectedProfileId=""/>
-		<scannerConfigBuildInfo instanceId="cdt.managedbuild.config.gnu.exe.debug.198419793;cdt.managedbuild.config.gnu.exe.debug.198419793.;cdt.managedbuild.tool.gnu.c.compiler.exe.debug.957370741;cdt.managedbuild.tool.gnu.c.compiler.input.327317854">
-			<autodiscovery enabled="true" problemReportingEnabled="true" selectedProfileId="org.eclipse.cdt.managedbuilder.core.GCCManagedMakePerProjectProfileC"/>
-		</scannerConfigBuildInfo>
-		<scannerConfigBuildInfo instanceId="cdt.managedbuild.config.gnu.exe.release.1448993347;cdt.managedbuild.config.gnu.exe.release.1448993347.;cdt.managedbuild.tool.gnu.c.compiler.exe.release.152653160;cdt.managedbuild.tool.gnu.c.compiler.input.1059387993">
-			<autodiscovery enabled="true" problemReportingEnabled="true" selectedProfileId="org.eclipse.cdt.managedbuilder.core.GCCManagedMakePerProjectProfileC"/>
-		</scannerConfigBuildInfo>
-		<scannerConfigBuildInfo instanceId="cdt.managedbuild.config.gnu.exe.debug.198419793;cdt.managedbuild.config.gnu.exe.debug.198419793.;cdt.managedbuild.tool.gnu.cpp.compiler.exe.debug.219157570;cdt.managedbuild.tool.gnu.cpp.compiler.input.1727772770">
-			<autodiscovery enabled="true" problemReportingEnabled="true" selectedProfileId="org.eclipse.cdt.managedbuilder.core.GCCManagedMakePerProjectProfileCPP"/>
-		</scannerConfigBuildInfo>
-		<scannerConfigBuildInfo instanceId="cdt.managedbuild.config.gnu.exe.release.1448993347;cdt.managedbuild.config.gnu.exe.release.1448993347.;cdt.managedbuild.tool.gnu.cpp.compiler.exe.release.314581331;cdt.managedbuild.tool.gnu.cpp.compiler.input.877797745">
-			<autodiscovery enabled="true" problemReportingEnabled="true" selectedProfileId="org.eclipse.cdt.managedbuilder.core.GCCManagedMakePerProjectProfileCPP"/>
-		</scannerConfigBuildInfo>
-	</storageModule>
-</cproject>
diff --git a/AssB/.gitignore b/AssB/.gitignore
deleted file mode 100644
index 95e0449..0000000
--- a/AssB/.gitignore
+++ /dev/null
@@ -1,2 +0,0 @@
-/Debug
-/bin
diff --git a/AssB/.project b/AssB/.project
deleted file mode 100644
index e5f119f..0000000
--- a/AssB/.project
+++ /dev/null
@@ -1,83 +0,0 @@
-<?xml version="1.0" encoding="UTF-8"?>
-<projectDescription>
-	<name>AssB</name>
-	<comment></comment>
-	<projects>
-	</projects>
-	<buildSpec>
-		<buildCommand>
-			<name>org.eclipse.cdt.managedbuilder.core.genmakebuilder</name>
-			<triggers>clean,full,incremental,</triggers>
-			<arguments>
-				<dictionary>
-					<key>?name?</key>
-					<value></value>
-				</dictionary>
-				<dictionary>
-					<key>org.eclipse.cdt.make.core.append_environment</key>
-					<value>true</value>
-				</dictionary>
-				<dictionary>
-					<key>org.eclipse.cdt.make.core.autoBuildTarget</key>
-					<value>all</value>
-				</dictionary>
-				<dictionary>
-					<key>org.eclipse.cdt.make.core.buildArguments</key>
-					<value></value>
-				</dictionary>
-				<dictionary>
-					<key>org.eclipse.cdt.make.core.buildCommand</key>
-					<value>make</value>
-				</dictionary>
-				<dictionary>
-					<key>org.eclipse.cdt.make.core.buildLocation</key>
-					<value>${workspace_loc:/AssB}</value>
-				</dictionary>
-				<dictionary>
-					<key>org.eclipse.cdt.make.core.cleanBuildTarget</key>
-					<value>clean</value>
-				</dictionary>
-				<dictionary>
-					<key>org.eclipse.cdt.make.core.contents</key>
-					<value>org.eclipse.cdt.make.core.activeConfigSettings</value>
-				</dictionary>
-				<dictionary>
-					<key>org.eclipse.cdt.make.core.enableAutoBuild</key>
-					<value>false</value>
-				</dictionary>
-				<dictionary>
-					<key>org.eclipse.cdt.make.core.enableCleanBuild</key>
-					<value>true</value>
-				</dictionary>
-				<dictionary>
-					<key>org.eclipse.cdt.make.core.enableFullBuild</key>
-					<value>true</value>
-				</dictionary>
-				<dictionary>
-					<key>org.eclipse.cdt.make.core.fullBuildTarget</key>
-					<value>all</value>
-				</dictionary>
-				<dictionary>
-					<key>org.eclipse.cdt.make.core.stopOnError</key>
-					<value>true</value>
-				</dictionary>
-				<dictionary>
-					<key>org.eclipse.cdt.make.core.useDefaultBuildCmd</key>
-					<value>true</value>
-				</dictionary>
-			</arguments>
-		</buildCommand>
-		<buildCommand>
-			<name>org.eclipse.cdt.managedbuilder.core.ScannerConfigBuilder</name>
-			<triggers>full,incremental,</triggers>
-			<arguments>
-			</arguments>
-		</buildCommand>
-	</buildSpec>
-	<natures>
-		<nature>org.eclipse.cdt.core.cnature</nature>
-		<nature>org.eclipse.cdt.core.ccnature</nature>
-		<nature>org.eclipse.cdt.managedbuilder.core.managedBuildNature</nature>
-		<nature>org.eclipse.cdt.managedbuilder.core.ScannerConfigNature</nature>
-	</natures>
-</projectDescription>
diff --git a/AssB/Configuration.conf b/AssB/Configuration.conf
deleted file mode 100644
index 53e5acd..0000000
--- a/AssB/Configuration.conf
+++ /dev/null
@@ -1,3 +0,0 @@
-LOG_FILE_NAME=ami.log
-LOGGER_FILE_PRIORITY=6
-LOGGER_CONSOLE_PRIORITY=7
\ No newline at end of file
diff --git a/AssB/Events.conf b/AssB/Events.conf
deleted file mode 100644
index 7fd2cf6..0000000
--- a/AssB/Events.conf
+++ /dev/null
@@ -1,5 +0,0 @@
-register,Walter,cappuccino,1
-register,Jesse,hot chocolate,0
-supplier_change,tara,milk,0.1
-supplier_change,tnuva,milk,0.1
-purchase,1.tiff
\ No newline at end of file
diff --git a/AssB/Menu.out b/AssB/Menu.out
deleted file mode 100644
index 76938b9..0000000
--- a/AssB/Menu.out
+++ /dev/null
@@ -1,14 +0,0 @@
-cappuccino,2.03
-espresso,1.42
-instant coffee,1.58
-turkish coffee,1.27
-iced coffee,2.47
-hot chocolate,2.18
-earl gray tea,2.62
-chamomile tea,3.68
-coca cola,4.88
-orange juice,3.38
-lemonade,2.33
-omelet,2.48
-omelet sandwich,3.53
-grilled cheese toast,2.78
\ No newline at end of file
diff --git a/AssB/Products.conf b/AssB/Products.conf
deleted file mode 100644
index 7cde62a..0000000
--- a/AssB/Products.conf
+++ /dev/null
@@ -1,21 +0,0 @@
-cappuccino,coffee beans A,milk
-espresso,coffee beans A
-instant coffee,milk,coffee beans B
-turkish coffee,coffee beans C
-iced coffee,milk,vanilla,coffee beans B
-hot chocolate,milk,cocoa beans
-earl gray tea,earl gray
-chamomile tea,chamomile leafs
-coca cola,coca cola
-coca cola zero,coca cola zero
-fanta,fanta
-orange juice,orange
-lemonade,lemon,spear mint
-granola cookies,quaker,honey,nuts,raisins
-yogurt,quaker,raisins,nuts,orange,yogurt
-tuna salad,tuna,tomato,cucumber,carrot,lettuce,onion,lemon
-tuna sandwich,bread,mayonnaise,tomato,tuna,lettuce
-pastrami sandwich,bread,mayonnaise,tomato,lettuce,pastrami
-omelet,eggs,onion
-omelet sandwich,eggs,bread,tomato,lettuce
-grilled cheese toast,bread,cheese,tomato
\ No newline at end of file
diff --git a/AssB/ShoppingList.out b/AssB/ShoppingList.out
deleted file mode 100644
index 751fd2d..0000000
--- a/AssB/ShoppingList.out
+++ /dev/null
@@ -1,8 +0,0 @@
-elite,coffee beans A,coffee beans C,cocoa beans,earl gray,chamomile leafs
-tara,milk
-nespresso,coffee beans B
-tnuva,vanilla
-RC cola,coca cola
-ein yahav,orange,cheese
-kibuz nirim,lemon,spear mint,eggs,onion,tomato,lettuce
-angel,bread
\ No newline at end of file
diff --git a/AssB/Suppliers.conf b/AssB/Suppliers.conf
deleted file mode 100644
index 6f89c00..0000000
--- a/AssB/Suppliers.conf
+++ /dev/null
@@ -1,52 +0,0 @@
-tnuva,milk,0.5
-tara,milk,0.4
-elite,coffee beans A,0.7
-nespresso,coffee beans A,1.3
-elite,coffee beans C,0.6
-nespresso,coffee beans C,1.0
-tnuva,vanilla,0.6
-elite,coffee beans B,0.5
-nespresso,coffee beans B,0.4
-elite,cocoa beans,0.8
-tnuva,cocoa beans,0.9
-elite,earl gray,1.5
-ein yahav,chamomile leafs,2.6
-elite,chamomile leafs,2.2
-coca cola,coca cola,4.0
-RC cola,coca cola,3.0
-coca cola,coca cola zero,3.5
-coca cola,fanta,3.7
-kibuz nirim,orange,2.2
-ein yahav,orange,2.0
-kibuz nirim,spear mint,0.8
-elite,quaker,2.1
-kibuz nirim,honey,2.2
-kibuz nirim,raisins,2.1
-elite,honey,2.3
-ein yahav,honey,1.6
-elite,raisins,0.9
-elite,nuts,0.5
-tara,yogurt,1.4
-tnuva,yogurt,1.6
-elite,yogurt,1.8
-kibuz nirim,cucumber,0.4
-ein yahav,cucumber,0.7
-kibuz nirim,carrot,0.3
-ein yahav,carrot,0.4
-kibuz nirim,onion,0.1
-ein yahav,onion,0.2
-kibuz nirim,lemon,0.5
-ein yahav,lemon,0.7
-harishonim,bread,0.2
-angel,bread,0.1
-elite,tuna,1.1
-tnuva,tuna,1.2
-tnuva,mayonnaise,1.3
-tara,mayonnaise,1.2
-tnuva,pastrami,2.3
-kibuz nirim,eggs,1.3
-kibuz nirim,lettuce,0.4
-ein yahav,lettuce,0.6
-ein yahav,cheese,1.2
-kibuz nirim,tomato,0.3
-ein yahav,tomato,0.5
\ No newline at end of file
diff --git a/AssB/ami.log b/AssB/ami.log
deleted file mode 100644
index 029d6f6..0000000
--- a/AssB/ami.log
+++ /dev/null
@@ -1,325 +0,0 @@
-New regular Costumer registered - Andrei, Favorite product - fanta.
-New regular Costumer registered - Jesse, Favorite product - omelet.
-New VIP Costumer registered - Meni, Favorite product - orange juice.
-New VIP Costumer registered - Walter, Favorite product - omelet.
-Supplier coca cola changed the price of fanta
-Products updated: 0
-Supplier tnuva changed the price of vanilla
-Products updated: 0
-Supplier tnuva changed the price of cocoa beans
-Products updated: 0
-Supplier tnuva changed the price of milk
-Products updated: 0
-Product cappuccino was removed from the menu.
-Product instant coffee was removed from the menu.
-Product iced coffee was removed from the menu.
-Product hot chocolate was removed from the menu.
-Supplier tara changed the price of milk
-Products updated: 0
-New VIP Costumer registered - Achiya, Favorite product - fanta.
-The total revenue is 0.00, while the total profit is 0.00
-New VIP Costumer registered - Walter, Favorite product - cappuccino.
-New regular Costumer registered - Jesse, Favorite product - hot chocolate.
-Supplier tara changed the price of milk
-Products updated: 0
-Supplier tnuva changed the price of milk
-Products updated: 0
-The total revenue is 0.00, while the total profit is 0.00
-New VIP Costumer registered - Walter, Favorite product - cappuccino.
-New regular Costumer registered - Jesse, Favorite product - hot chocolate.
-Supplier tara changed the price of milk
-Products updated: 0
-Supplier tnuva changed the price of milk
-Products updated: 0
-The total revenue is 0.00, while the total profit is 0.00
-New VIP Costumer registered - Walter, Favorite product - cappuccino.
-New regular Costumer registered - Jesse, Favorite product - hot chocolate.
-Supplier tara changed the price of milk
-Products updated: 0
-Supplier tnuva changed the price of milk
-Products updated: 0
-The total revenue is 0.00, while the total profit is 0.00
-New VIP Costumer registered - Walter, Favorite product - cappuccino.
-New regular Costumer registered - Jesse, Favorite product - hot chocolate.
-New VIP Costumer registered - Walter, Favorite product - cappuccino.
-New regular Costumer registered - Jesse, Favorite product - hot chocolate.
-Supplier tara changed the price of milk
-Products updated: 0
-Supplier tnuva changed the price of milk
-Products updated: 0
-The total revenue is 0.00, while the total profit is 0.00
-New VIP Costumer registered - Walter, Favorite product - cappuccino.
-New regular Costumer registered - Jesse, Favorite product - hot chocolate.
-Supplier tara changed the price of milk
-Products updated: 0
-Supplier tnuva changed the price of milk
-Products updated: 0
-The total revenue is 0.00, while the total profit is 0.00
-New VIP Costumer registered - Walter, Favorite product - cappuccino.
-New regular Costumer registered - Jesse, Favorite product - hot chocolate.
-Supplier tara changed the price of milk
-Products updated: 0
-Supplier tnuva changed the price of milk
-Products updated: 0
-The total revenue is 0.00, while the total profit is 0.00
-New VIP Costumer registered - Walter, Favorite product - cappuccino.
-New regular Costumer registered - Jesse, Favorite product - hot chocolate.
-Supplier tara changed the price of milk
-Products updated: 4
-Supplier tnuva changed the price of milk
-Products updated: 0
-The total revenue is 0.00, while the total profit is 0.00
-New VIP Costumer registered - Walter, Favorite product - cappuccino.
-New regular Costumer registered - Jesse, Favorite product - hot chocolate.
-Supplier tara changed the price of milk
-Products updated: 4
-Supplier tnuva changed the price of milk
-Products updated: 0
-The total revenue is 0.00, while the total profit is 0.00
-New VIP Costumer registered - Walter, Favorite product - cappuccino.
-New regular Costumer registered - Jesse, Favorite product - hot chocolate.
-Supplier tara changed the price of milk
-Products updated: 4
-Supplier tnuva changed the price of milk
-Products updated: 0
-The total revenue is 0.00, while the total profit is 0.00
-New VIP Costumer registered - Walter, Favorite product - cappuccino.
-New regular Costumer registered - Jesse, Favorite product - hot chocolate.
-Supplier tara changed the price of milk
-Products updated: 4
-Supplier tnuva changed the price of milk
-Products updated: 0
-The total revenue is 0.00, while the total profit is 0.00
-New VIP Costumer registered - Walter, Favorite product - cappuccino.
-New regular Costumer registered - Jesse, Favorite product - hot chocolate.
-Supplier tara changed the price of milk
-Products updated: 4
-Supplier tnuva changed the price of milk
-Products updated: 0
-The total revenue is 0.00, while the total profit is 0.00
-New VIP Costumer registered - Walter, Favorite product - cappuccino.
-New regular Costumer registered - Jesse, Favorite product - hot chocolate.
-Supplier tara changed the price of milk
-Products updated: 4
-Supplier tnuva changed the price of milk
-Products updated: 0
-The total revenue is 0.00, while the total profit is 0.00
-New VIP Costumer registered - Walter, Favorite product - cappuccino.
-New regular Costumer registered - Jesse, Favorite product - hot chocolate.
-Supplier tara changed the price of milk
-Products updated: 4
-Supplier tnuva changed the price of milk
-Products updated: 0
-The total revenue is 0.00, while the total profit is 0.00
-New VIP Costumer registered - Walter, Favorite product - cappuccino.
-New regular Costumer registered - Jesse, Favorite product - hot chocolate.
-Supplier tara changed the price of milk
-Products updated: 4
-Supplier tnuva changed the price of milk
-Products updated: 0
-Costumer Jesse purchased hot chocolate
-Costumer Walter purchased cappuccino
-The total revenue is 2.98, while the total profit is 1.28
-New VIP Costumer registered - Walter, Favorite product - cappuccino.
-New regular Costumer registered - Jesse, Favorite product - hot chocolate.
-Supplier tara changed the price of milk
-Products updated: 4
-Supplier tnuva changed the price of milk
-Products updated: 0
-Costumer Jesse purchased hot chocolate
-Costumer Walter purchased cappuccino
-The total revenue is 2.98, while the total profit is 1.28
-New VIP Costumer registered - Walter, Favorite product - cappuccino.
-New regular Costumer registered - Jesse, Favorite product - hot chocolate.
-Supplier tara changed the price of milk
-Products updated: 4
-Supplier tnuva changed the price of milk
-Products updated: 0
-Costumer Jesse purchased hot chocolate
-Costumer Walter purchased cappuccino
-The total revenue is 2.98, while the total profit is 1.28
-New VIP Costumer registered - Walter, Favorite product - cappuccino.
-New regular Costumer registered - Jesse, Favorite product - hot chocolate.
-Supplier tara changed the price of milk
-Products updated: 4
-Supplier tnuva changed the price of milk
-Products updated: 0
-Costumer Jesse purchased hot chocolate
-Costumer Walter purchased cappuccino
-The total revenue is 2.98, while the total profit is 1.28
-New VIP Costumer registered - Walter, Favorite product - cappuccino.
-New regular Costumer registered - Jesse, Favorite product - hot chocolate.
-Supplier tara changed the price of milk
-Products updated: 4
-Supplier tnuva changed the price of milk
-Products updated: 0
-Costumer Jesse purchased hot chocolate
-Costumer Walter purchased cappuccino
-The total revenue is 2.98, while the total profit is 1.28
-New VIP Costumer registered - Walter, Favorite product - cappuccino.
-New regular Costumer registered - Jesse, Favorite product - hot chocolate.
-Supplier tara changed the price of milk
-Products updated: 4
-Supplier tnuva changed the price of milk
-Products updated: 0
-Costumer Jesse purchased hot chocolate
-Costumer Walter purchased cappuccino
-The total revenue is 2.98, while the total profit is 1.28
-New VIP Costumer registered - Walter, Favorite product - cappuccino.
-New regular Costumer registered - Jesse, Favorite product - hot chocolate.
-Supplier tara changed the price of milk
-Products updated: 4
-Supplier tnuva changed the price of milk
-Products updated: 0
-Costumer Jesse purchased hot chocolate
-Costumer Walter purchased cappuccino
-The total revenue is 2.98, while the total profit is 1.28
-New VIP Costumer registered - Walter, Favorite product - cappuccino.
-New regular Costumer registered - Jesse, Favorite product - hot chocolate.
-Supplier tara changed the price of milk
-Products updated: 4
-Supplier tnuva changed the price of milk
-Products updated: 0
-Costumer Jesse purchased hot chocolate
-Costumer Walter purchased cappuccino
-The total revenue is 2.98, while the total profit is 1.28
-New VIP Costumer registered - Walter, Favorite product - cappuccino.
-New regular Costumer registered - Jesse, Favorite product - hot chocolate.
-Supplier tara changed the price of milk
-Products updated: 4
-Supplier tnuva changed the price of milk
-Products updated: 0
-Costumer Jesse purchased hot chocolate
-Costumer Walter purchased cappuccino
-The total revenue is 2.98, while the total profit is 1.28
-New VIP Costumer registered - Walter, Favorite product - cappuccino.
-New regular Costumer registered - Jesse, Favorite product - hot chocolate.
-Supplier tara changed the price of milk
-Products updated: 4
-Supplier tnuva changed the price of milk
-Products updated: 0
-Costumer Jesse purchased hot chocolate
-Costumer Walter purchased cappuccino
-The total revenue is 2.98, while the total profit is 1.28
-New VIP Costumer registered - Walter, Favorite product - cappuccino.
-New regular Costumer registered - Jesse, Favorite product - hot chocolate.
-Supplier tara changed the price of milk
-Products updated: 4
-Supplier tnuva changed the price of milk
-Products updated: 0
-Costumer Jesse purchased hot chocolate
-Costumer Walter purchased cappuccino
-The total revenue is 2.98, while the total profit is 1.28
-New VIP Costumer registered - Walter, Favorite product - cappuccino.
-New regular Costumer registered - Jesse, Favorite product - hot chocolate.
-Supplier tara changed the price of milk
-Products updated: 4
-Supplier tnuva changed the price of milk
-Products updated: 0
-Costumer Jesse purchased hot chocolate
-Costumer Walter purchased cappuccino
-The total revenue is 2.98, while the total profit is 1.28
-New VIP Costumer registered - Walter, Favorite product - cappuccino.
-New regular Costumer registered - Jesse, Favorite product - hot chocolate.
-Supplier tara changed the price of milk
-Products updated: 4
-Supplier tnuva changed the price of milk
-Products updated: 0
-The total revenue is 0.00, while the total profit is 0.00
-New VIP Costumer registered - Walter, Favorite product - cappuccino.
-New regular Costumer registered - Jesse, Favorite product - hot chocolate.
-Supplier tara changed the price of milk
-Products updated: 4
-Supplier tnuva changed the price of milk
-Products updated: 0
-The total revenue is 0.00, while the total profit is 0.00
-New VIP Costumer registered - Walter, Favorite product - cappuccino.
-New regular Costumer registered - Jesse, Favorite product - hot chocolate.
-Supplier tara changed the price of milk
-Products updated: 4
-Supplier tnuva changed the price of milk
-Products updated: 0
-Costumer Jesse purchased hot chocolate
-Costumer Walter purchased cappuccino
-The total revenue is 2.98, while the total profit is 0.78
-New VIP Costumer registered - Walter, Favorite product - cappuccino.
-New regular Costumer registered - Jesse, Favorite product - hot chocolate.
-Supplier tara changed the price of milk
-Products updated: 4
-Supplier tnuva changed the price of milk
-Products updated: 0
-Costumer Jesse purchased hot chocolate
-Costumer Walter purchased cappuccino
-The total revenue is 2.98, while the total profit is 0.78
-New VIP Costumer registered - Walter, Favorite product - cappuccino.
-New regular Costumer registered - Jesse, Favorite product - hot chocolate.
-Supplier tara changed the price of milk
-Products updated: 4
-Supplier tnuva changed the price of milk
-Products updated: 0
-Costumer Jesse purchased hot chocolate
-Costumer Walter purchased cappuccino
-The total revenue is 2.98, while the total profit is 0.78
-New VIP Costumer registered - Walter, Favorite product - cappuccino.
-New regular Costumer registered - Jesse, Favorite product - hot chocolate.
-Supplier tara changed the price of milk
-Products updated: 4
-Supplier tnuva changed the price of milk
-Products updated: 0
-Costumer Jesse purchased hot chocolate
-Costumer Walter purchased cappuccino
-The total revenue is 2.98, while the total profit is 0.78
-New VIP Costumer registered - Walter, Favorite product - cappuccino.
-New regular Costumer registered - Jesse, Favorite product - hot chocolate.
-Supplier tara changed the price of milk
-Products updated: 4
-Supplier tnuva changed the price of milk
-Products updated: 0
-Costumer Jesse purchased hot chocolate
-Costumer Walter purchased cappuccino
-The total revenue is 2.98, while the total profit is 0.78
-New VIP Costumer registered - Walter, Favorite product - cappuccino.
-New regular Costumer registered - Jesse, Favorite product - hot chocolate.
-Supplier tara changed the price of milk
-Products updated: 4
-Supplier tnuva changed the price of milk
-Products updated: 0
-Costumer Jesse purchased hot chocolate
-Costumer Walter purchased cappuccino
-The total revenue is 2.98, while the total profit is 0.78
-New VIP Costumer registered - Walter, Favorite product - cappuccino.
-New regular Costumer registered - Jesse, Favorite product - hot chocolate.
-Supplier tara changed the price of milk
-Products updated: 4
-Supplier tnuva changed the price of milk
-Products updated: 0
-Costumer Jesse purchased hot chocolate
-Costumer Walter purchased cappuccino
-The total revenue is 2.98, while the total profit is 0.78
-New VIP Costumer registered - Walter, Favorite product - cappuccino.
-New regular Costumer registered - Jesse, Favorite product - hot chocolate.
-Supplier tara changed the price of milk
-Products updated: 4
-Supplier tnuva changed the price of milk
-Products updated: 0
-Costumer Jesse purchased hot chocolate
-Costumer Walter purchased cappuccino
-The total revenue is 2.98, while the total profit is 0.78
-New VIP Costumer registered - Walter, Favorite product - cappuccino.
-New regular Costumer registered - Jesse, Favorite product - hot chocolate.
-Supplier tara changed the price of milk
-Products updated: 4
-Supplier tnuva changed the price of milk
-Products updated: 0
-Costumer Jesse purchased hot chocolate
-Costumer Walter purchased cappuccino
-The total revenue is 2.98, while the total profit is 0.78
-New VIP Customer registered - Walter, Favorite product - cappuccino.
-New regular Customer registered - Jesse, Favorite product - hot chocolate.
-Supplier tara changed the price of milk
-Products updated: 4
-Supplier tnuva changed the price of milk
-Products updated: 0
-Customer Jesse purchased hot chocolate
-Customer Walter purchased cappuccino
-The total revenue is 2.98, while the total profit is 0.78
diff --git a/AssB/collage.tiff b/AssB/collage.tiff
deleted file mode 100644
index 63073d3..0000000
Binary files a/AssB/collage.tiff and /dev/null differ
diff --git a/AssB/customers/1.tiff b/AssB/customers/1.tiff
deleted file mode 100644
index f6536f9..0000000
Binary files a/AssB/customers/1.tiff and /dev/null differ
diff --git a/AssB/customers/2.tiff b/AssB/customers/2.tiff
deleted file mode 100644
index e48b99e..0000000
Binary files a/AssB/customers/2.tiff and /dev/null differ
diff --git a/AssB/customers/3.tiff b/AssB/customers/3.tiff
deleted file mode 100644
index 7d5fc2c..0000000
Binary files a/AssB/customers/3.tiff and /dev/null differ
diff --git a/AssB/customers/4.tiff b/AssB/customers/4.tiff
deleted file mode 100644
index 51919c2..0000000
Binary files a/AssB/customers/4.tiff and /dev/null differ
diff --git a/AssB/faces/Achiya/Achiya.tiff b/AssB/faces/Achiya/Achiya.tiff
deleted file mode 100644
index 8976cd0..0000000
Binary files a/AssB/faces/Achiya/Achiya.tiff and /dev/null differ
diff --git a/AssB/faces/Andrei/Andrei.tiff b/AssB/faces/Andrei/Andrei.tiff
deleted file mode 100644
index 446c3cc..0000000
Binary files a/AssB/faces/Andrei/Andrei.tiff and /dev/null differ
diff --git a/AssB/faces/Jesse/Jesse.tiff b/AssB/faces/Jesse/Jesse.tiff
deleted file mode 100644
index 49b7287..0000000
Binary files a/AssB/faces/Jesse/Jesse.tiff and /dev/null differ
diff --git a/AssB/faces/Meni/Meni.tiff b/AssB/faces/Meni/Meni.tiff
deleted file mode 100644
index f9eefd5..0000000
Binary files a/AssB/faces/Meni/Meni.tiff and /dev/null differ
diff --git a/AssB/faces/Walter/Walter.tiff b/AssB/faces/Walter/Walter.tiff
deleted file mode 100644
index b150779..0000000
Binary files a/AssB/faces/Walter/Walter.tiff and /dev/null differ
diff --git a/AssB/gena/Config.conf b/AssB/gena/Config.conf
deleted file mode 100644
index d21172b..0000000
--- a/AssB/gena/Config.conf
+++ /dev/null
@@ -1,3 +0,0 @@
-LOG_FILE_NAME = app.log
-LOGGER_FILE_PRIORITY = 5
-LOGGER_CONSOLE_PRIORITY = 5
diff --git a/AssB/gena/Products.conf b/AssB/gena/Products.conf
deleted file mode 100644
index 7cde62a..0000000
--- a/AssB/gena/Products.conf
+++ /dev/null
@@ -1,21 +0,0 @@
-cappuccino,coffee beans A,milk
-espresso,coffee beans A
-instant coffee,milk,coffee beans B
-turkish coffee,coffee beans C
-iced coffee,milk,vanilla,coffee beans B
-hot chocolate,milk,cocoa beans
-earl gray tea,earl gray
-chamomile tea,chamomile leafs
-coca cola,coca cola
-coca cola zero,coca cola zero
-fanta,fanta
-orange juice,orange
-lemonade,lemon,spear mint
-granola cookies,quaker,honey,nuts,raisins
-yogurt,quaker,raisins,nuts,orange,yogurt
-tuna salad,tuna,tomato,cucumber,carrot,lettuce,onion,lemon
-tuna sandwich,bread,mayonnaise,tomato,tuna,lettuce
-pastrami sandwich,bread,mayonnaise,tomato,lettuce,pastrami
-omelet,eggs,onion
-omelet sandwich,eggs,bread,tomato,lettuce
-grilled cheese toast,bread,cheese,tomato
\ No newline at end of file
diff --git a/AssB/gena/Suppliers.conf b/AssB/gena/Suppliers.conf
deleted file mode 100644
index 6f89c00..0000000
--- a/AssB/gena/Suppliers.conf
+++ /dev/null
@@ -1,52 +0,0 @@
-tnuva,milk,0.5
-tara,milk,0.4
-elite,coffee beans A,0.7
-nespresso,coffee beans A,1.3
-elite,coffee beans C,0.6
-nespresso,coffee beans C,1.0
-tnuva,vanilla,0.6
-elite,coffee beans B,0.5
-nespresso,coffee beans B,0.4
-elite,cocoa beans,0.8
-tnuva,cocoa beans,0.9
-elite,earl gray,1.5
-ein yahav,chamomile leafs,2.6
-elite,chamomile leafs,2.2
-coca cola,coca cola,4.0
-RC cola,coca cola,3.0
-coca cola,coca cola zero,3.5
-coca cola,fanta,3.7
-kibuz nirim,orange,2.2
-ein yahav,orange,2.0
-kibuz nirim,spear mint,0.8
-elite,quaker,2.1
-kibuz nirim,honey,2.2
-kibuz nirim,raisins,2.1
-elite,honey,2.3
-ein yahav,honey,1.6
-elite,raisins,0.9
-elite,nuts,0.5
-tara,yogurt,1.4
-tnuva,yogurt,1.6
-elite,yogurt,1.8
-kibuz nirim,cucumber,0.4
-ein yahav,cucumber,0.7
-kibuz nirim,carrot,0.3
-ein yahav,carrot,0.4
-kibuz nirim,onion,0.1
-ein yahav,onion,0.2
-kibuz nirim,lemon,0.5
-ein yahav,lemon,0.7
-harishonim,bread,0.2
-angel,bread,0.1
-elite,tuna,1.1
-tnuva,tuna,1.2
-tnuva,mayonnaise,1.3
-tara,mayonnaise,1.2
-tnuva,pastrami,2.3
-kibuz nirim,eggs,1.3
-kibuz nirim,lettuce,0.4
-ein yahav,lettuce,0.6
-ein yahav,cheese,1.2
-kibuz nirim,tomato,0.3
-ein yahav,tomato,0.5
\ No newline at end of file
diff --git a/AssB/gena/events.conf b/AssB/gena/events.conf
deleted file mode 100644
index 316d039..0000000
--- a/AssB/gena/events.conf
+++ /dev/null
@@ -1,13 +0,0 @@
-register,Achiya,fanta,1
-register,Meni,chamomile tea,0
-register,Walter,hot chocolate,1
-purchase,1.tiff
-purchase,2.tiff
-purchase,4.tiff
-supplier_change,coca cola,fanta,2.0
-supplier_change,ein yahav,chamomile leafs,2.0
-supplier_change,elite,cocoa beans,7.0
-supplier_change,tnuva,cocoa beans,7.0
-purchase,1.tiff
-purchase,2.tiff
-supplier_change,angel,bread,0.3 
diff --git a/AssB/gena/events_file.conf b/AssB/gena/events_file.conf
deleted file mode 100644
index 9cec455..0000000
--- a/AssB/gena/events_file.conf
+++ /dev/null
@@ -1,41 +0,0 @@
-register,Achiya,fanta,1
-register,Meni,chamomile tea,0
-register,Walter,hot chocolate,1
-purchase,1.tiff
-purchase,2.tiff
-purchase,4.tiff
-supplier_change,coca cola,fanta,2.0
-supplier_change,ein yahav,chamomile leafs,2.0
-supplier_change,elite,cocoa beans,7.0
-supplier_change,tnuva,cocoa beans,7.0
-register,Andrei,coca cola,0
-purchase,1.tiff
-purchase,2.tiff
-supplier_change,angel,bread,0.3
-register,Jesse,omelet,1
-purchase,1.tiff
-purchase,2.tiff
-purchase,3.tiff
-purchase,4.tiff
-supplier_change,angel,bread,0.1
-supplier_change,coca cola,fanta,1
-supplier_change,ein yahav,chamomile leafs,7
-supplier_change,tara,milk,0.1
-supplier_change,elite,cocoa beans,0.3
-supplier_change,kibuz nirim,eggs,2.002
-supplier_change,kibuz nirim,onion,0.23
-purchase,1.tiff
-purchase,2.tiff
-purchase,3.tiff
-purchase,4.tiff
-supplier_change,angel,bread,0.4
-supplier_change,tara,milk,2.4
-supplier_change,elite,cocoa beans,2.54
-supplier_change,kibuz nirim,eggs,1.2
-supplier_change,kibuz nirim,onion,1.7
-supplier_change,ein yahav,chamomile leafs,0.2
-supplier_change,coca cola,fanta,6
-purchase,1.tiff
-purchase,2.tiff
-purchase,3.tiff
-purchase,4.tiff
\ No newline at end of file
diff --git a/AssB/gena/test1 b/AssB/gena/test1
deleted file mode 100644
index 47b402a..0000000
--- a/AssB/gena/test1
+++ /dev/null
@@ -1,22 +0,0 @@
-New VIP Customer registered - Achiya, Favorite product - fanta.
-New regular Customer registered - Meni, Favorite product - chamomile tea.
-New VIP Customer registered - Walter, Favorite product - hot chocolate.
-Customer Walter purchased hot chocolate
-Customer Achiya failed to purchase fanta
-Customer Meni purchased chamomile tea
-Supplier coca cola changed the price of fanta
-Products updated: 0
-Product fanta was added to the menu.
-Supplier ein yahav changed the price of chamomile leafs
-Products updated: 1
-Supplier elite changed the price of cocoa beans
-Products updated: 1
-Supplier tnuva changed the price of cocoa beans
-Products updated: 1
-Product hot chocolate was removed from the menu.
-Customer Walter failed to purchase hot chocolate
-Customer Achiya purchased fanta
-Supplier angel changed the price of bread
-Products updated: 2
-The total revenue is 8.115, while the total profit is 1.965
- 
diff --git a/AssB/haarcascade_frontalface_alt.xml b/AssB/haarcascade_frontalface_alt.xml
deleted file mode 100644
index 5a6f275..0000000
--- a/AssB/haarcascade_frontalface_alt.xml
+++ /dev/null
@@ -1,26161 +0,0 @@
-<?xml version="1.0"?>
-<!--
-    Stump-based 20x20 gentle adaboost frontal face detector.
-    Created by Rainer Lienhart.
-
-////////////////////////////////////////////////////////////////////////////////////////
-
-  IMPORTANT: READ BEFORE DOWNLOADING, COPYING, INSTALLING OR USING.
-
-  By downloading, copying, installing or using the software you agree to this license.
-  If you do not agree to this license, do not download, install,
-  copy or use the software.
-
-
-                        Intel License Agreement
-                For Open Source Computer Vision Library
-
- Copyright (C) 2000, Intel Corporation, all rights reserved.
- Third party copyrights are property of their respective owners.
-
- Redistribution and use in source and binary forms, with or without modification,
- are permitted provided that the following conditions are met:
-
-   * Redistribution's of source code must retain the above copyright notice,
-     this list of conditions and the following disclaimer.
-
-   * Redistribution's in binary form must reproduce the above copyright notice,
-     this list of conditions and the following disclaimer in the documentation
-     and/or other materials provided with the distribution.
-
-   * The name of Intel Corporation may not be used to endorse or promote products
-     derived from this software without specific prior written permission.
-
- This software is provided by the copyright holders and contributors "as is" and
- any express or implied warranties, including, but not limited to, the implied
- warranties of merchantability and fitness for a particular purpose are disclaimed.
- In no event shall the Intel Corporation or contributors be liable for any direct,
- indirect, incidental, special, exemplary, or consequential damages
- (including, but not limited to, procurement of substitute goods or services;
- loss of use, data, or profits; or business interruption) however caused
- and on any theory of liability, whether in contract, strict liability,
- or tort (including negligence or otherwise) arising in any way out of
- the use of this software, even if advised of the possibility of such damage.
--->
-<opencv_storage>
-<haarcascade_frontalface_alt type_id="opencv-haar-classifier">
-  <size>20 20</size>
-  <stages>
-    <_>
-      <!-- stage 0 -->
-      <trees>
-        <_>
-          <!-- tree 0 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>3 7 14 4 -1.</_>
-                <_>3 9 14 2 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>4.0141958743333817e-003</threshold>
-            <left_val>0.0337941907346249</left_val>
-            <right_val>0.8378106951713562</right_val></_></_>
-        <_>
-          <!-- tree 1 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>1 2 18 4 -1.</_>
-                <_>7 2 6 4 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>0.0151513395830989</threshold>
-            <left_val>0.1514132022857666</left_val>
-            <right_val>0.7488812208175659</right_val></_></_>
-        <_>
-          <!-- tree 2 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>1 7 15 9 -1.</_>
-                <_>1 10 15 3 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>4.2109931819140911e-003</threshold>
-            <left_val>0.0900492817163467</left_val>
-            <right_val>0.6374819874763489</right_val></_></_></trees>
-      <stage_threshold>0.8226894140243530</stage_threshold>
-      <parent>-1</parent>
-      <next>-1</next></_>
-    <_>
-      <!-- stage 1 -->
-      <trees>
-        <_>
-          <!-- tree 0 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>5 6 2 6 -1.</_>
-                <_>5 9 2 3 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>1.6227109590545297e-003</threshold>
-            <left_val>0.0693085864186287</left_val>
-            <right_val>0.7110946178436279</right_val></_></_>
-        <_>
-          <!-- tree 1 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>7 5 6 3 -1.</_>
-                <_>9 5 2 3 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>2.2906649392098188e-003</threshold>
-            <left_val>0.1795803010463715</left_val>
-            <right_val>0.6668692231178284</right_val></_></_>
-        <_>
-          <!-- tree 2 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>4 0 12 9 -1.</_>
-                <_>4 3 12 3 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>5.0025708042085171e-003</threshold>
-            <left_val>0.1693672984838486</left_val>
-            <right_val>0.6554006934165955</right_val></_></_>
-        <_>
-          <!-- tree 3 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>6 9 10 8 -1.</_>
-                <_>6 13 10 4 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>7.9659894108772278e-003</threshold>
-            <left_val>0.5866332054138184</left_val>
-            <right_val>0.0914145186543465</right_val></_></_>
-        <_>
-          <!-- tree 4 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>3 6 14 8 -1.</_>
-                <_>3 10 14 4 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-3.5227010957896709e-003</threshold>
-            <left_val>0.1413166970014572</left_val>
-            <right_val>0.6031895875930786</right_val></_></_>
-        <_>
-          <!-- tree 5 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>14 1 6 10 -1.</_>
-                <_>14 1 3 10 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>0.0366676896810532</threshold>
-            <left_val>0.3675672113895416</left_val>
-            <right_val>0.7920318245887756</right_val></_></_>
-        <_>
-          <!-- tree 6 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>7 8 5 12 -1.</_>
-                <_>7 12 5 4 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>9.3361474573612213e-003</threshold>
-            <left_val>0.6161385774612427</left_val>
-            <right_val>0.2088509947061539</right_val></_></_>
-        <_>
-          <!-- tree 7 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>1 1 18 3 -1.</_>
-                <_>7 1 6 3 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>8.6961314082145691e-003</threshold>
-            <left_val>0.2836230993270874</left_val>
-            <right_val>0.6360273957252502</right_val></_></_>
-        <_>
-          <!-- tree 8 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>1 8 17 2 -1.</_>
-                <_>1 9 17 1 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>1.1488880263641477e-003</threshold>
-            <left_val>0.2223580926656723</left_val>
-            <right_val>0.5800700783729553</right_val></_></_>
-        <_>
-          <!-- tree 9 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>16 6 4 2 -1.</_>
-                <_>16 7 4 1 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-2.1484689787030220e-003</threshold>
-            <left_val>0.2406464070081711</left_val>
-            <right_val>0.5787054896354675</right_val></_></_>
-        <_>
-          <!-- tree 10 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>5 17 2 2 -1.</_>
-                <_>5 18 2 1 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>2.1219060290604830e-003</threshold>
-            <left_val>0.5559654831886292</left_val>
-            <right_val>0.1362237036228180</right_val></_></_>
-        <_>
-          <!-- tree 11 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>14 2 6 12 -1.</_>
-                <_>14 2 3 12 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-0.0939491465687752</threshold>
-            <left_val>0.8502737283706665</left_val>
-            <right_val>0.4717740118503571</right_val></_></_>
-        <_>
-          <!-- tree 12 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>4 0 4 12 -1.</_>
-                <_>4 0 2 6 2.</_>
-                <_>6 6 2 6 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>1.3777789426967502e-003</threshold>
-            <left_val>0.5993673801422119</left_val>
-            <right_val>0.2834529876708984</right_val></_></_>
-        <_>
-          <!-- tree 13 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>2 11 18 8 -1.</_>
-                <_>8 11 6 8 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>0.0730631574988365</threshold>
-            <left_val>0.4341886043548584</left_val>
-            <right_val>0.7060034275054932</right_val></_></_>
-        <_>
-          <!-- tree 14 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>5 7 10 2 -1.</_>
-                <_>5 8 10 1 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>3.6767389974556863e-004</threshold>
-            <left_val>0.3027887940406799</left_val>
-            <right_val>0.6051574945449829</right_val></_></_>
-        <_>
-          <!-- tree 15 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>15 11 5 3 -1.</_>
-                <_>15 12 5 1 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-6.0479710809886456e-003</threshold>
-            <left_val>0.1798433959484100</left_val>
-            <right_val>0.5675256848335266</right_val></_></_></trees>
-      <stage_threshold>6.9566087722778320</stage_threshold>
-      <parent>0</parent>
-      <next>-1</next></_>
-    <_>
-      <!-- stage 2 -->
-      <trees>
-        <_>
-          <!-- tree 0 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>5 3 10 9 -1.</_>
-                <_>5 6 10 3 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-0.0165106896311045</threshold>
-            <left_val>0.6644225120544434</left_val>
-            <right_val>0.1424857974052429</right_val></_></_>
-        <_>
-          <!-- tree 1 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>9 4 2 14 -1.</_>
-                <_>9 11 2 7 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>2.7052499353885651e-003</threshold>
-            <left_val>0.6325352191925049</left_val>
-            <right_val>0.1288477033376694</right_val></_></_>
-        <_>
-          <!-- tree 2 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>3 5 4 12 -1.</_>
-                <_>3 9 4 4 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>2.8069869149476290e-003</threshold>
-            <left_val>0.1240288019180298</left_val>
-            <right_val>0.6193193197250366</right_val></_></_>
-        <_>
-          <!-- tree 3 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>4 5 12 5 -1.</_>
-                <_>8 5 4 5 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-1.5402400167658925e-003</threshold>
-            <left_val>0.1432143002748489</left_val>
-            <right_val>0.5670015811920166</right_val></_></_>
-        <_>
-          <!-- tree 4 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>5 6 10 8 -1.</_>
-                <_>5 10 10 4 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-5.6386279175058007e-004</threshold>
-            <left_val>0.1657433062791824</left_val>
-            <right_val>0.5905207991600037</right_val></_></_>
-        <_>
-          <!-- tree 5 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>8 0 6 9 -1.</_>
-                <_>8 3 6 3 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>1.9253729842603207e-003</threshold>
-            <left_val>0.2695507109165192</left_val>
-            <right_val>0.5738824009895325</right_val></_></_>
-        <_>
-          <!-- tree 6 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>9 12 1 8 -1.</_>
-                <_>9 16 1 4 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-5.0214841030538082e-003</threshold>
-            <left_val>0.1893538981676102</left_val>
-            <right_val>0.5782774090766907</right_val></_></_>
-        <_>
-          <!-- tree 7 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>0 7 20 6 -1.</_>
-                <_>0 9 20 2 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>2.6365420781075954e-003</threshold>
-            <left_val>0.2309329062700272</left_val>
-            <right_val>0.5695425868034363</right_val></_></_>
-        <_>
-          <!-- tree 8 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>7 0 6 17 -1.</_>
-                <_>9 0 2 17 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-1.5127769438549876e-003</threshold>
-            <left_val>0.2759602069854736</left_val>
-            <right_val>0.5956642031669617</right_val></_></_>
-        <_>
-          <!-- tree 9 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>9 0 6 4 -1.</_>
-                <_>11 0 2 4 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-0.0101574398577213</threshold>
-            <left_val>0.1732538044452667</left_val>
-            <right_val>0.5522047281265259</right_val></_></_>
-        <_>
-          <!-- tree 10 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>5 1 6 4 -1.</_>
-                <_>7 1 2 4 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-0.0119536602869630</threshold>
-            <left_val>0.1339409947395325</left_val>
-            <right_val>0.5559014081954956</right_val></_></_>
-        <_>
-          <!-- tree 11 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>12 1 6 16 -1.</_>
-                <_>14 1 2 16 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>4.8859491944313049e-003</threshold>
-            <left_val>0.3628703951835632</left_val>
-            <right_val>0.6188849210739136</right_val></_></_>
-        <_>
-          <!-- tree 12 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>0 5 18 8 -1.</_>
-                <_>0 5 9 4 2.</_>
-                <_>9 9 9 4 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-0.0801329165697098</threshold>
-            <left_val>0.0912110507488251</left_val>
-            <right_val>0.5475944876670837</right_val></_></_>
-        <_>
-          <!-- tree 13 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>8 15 10 4 -1.</_>
-                <_>13 15 5 2 2.</_>
-                <_>8 17 5 2 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>1.0643280111253262e-003</threshold>
-            <left_val>0.3715142905712128</left_val>
-            <right_val>0.5711399912834168</right_val></_></_>
-        <_>
-          <!-- tree 14 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>3 1 4 8 -1.</_>
-                <_>3 1 2 4 2.</_>
-                <_>5 5 2 4 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-1.3419450260698795e-003</threshold>
-            <left_val>0.5953313708305359</left_val>
-            <right_val>0.3318097889423370</right_val></_></_>
-        <_>
-          <!-- tree 15 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>3 6 14 10 -1.</_>
-                <_>10 6 7 5 2.</_>
-                <_>3 11 7 5 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-0.0546011403203011</threshold>
-            <left_val>0.1844065934419632</left_val>
-            <right_val>0.5602846145629883</right_val></_></_>
-        <_>
-          <!-- tree 16 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>2 1 6 16 -1.</_>
-                <_>4 1 2 16 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>2.9071690514683723e-003</threshold>
-            <left_val>0.3594244122505188</left_val>
-            <right_val>0.6131715178489685</right_val></_></_>
-        <_>
-          <!-- tree 17 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>0 18 20 2 -1.</_>
-                <_>0 19 20 1 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>7.4718717951327562e-004</threshold>
-            <left_val>0.5994353294372559</left_val>
-            <right_val>0.3459562957286835</right_val></_></_>
-        <_>
-          <!-- tree 18 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>8 13 4 3 -1.</_>
-                <_>8 14 4 1 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>4.3013808317482471e-003</threshold>
-            <left_val>0.4172652065753937</left_val>
-            <right_val>0.6990845203399658</right_val></_></_>
-        <_>
-          <!-- tree 19 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>9 14 2 3 -1.</_>
-                <_>9 15 2 1 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>4.5017572119832039e-003</threshold>
-            <left_val>0.4509715139865875</left_val>
-            <right_val>0.7801457047462463</right_val></_></_>
-        <_>
-          <!-- tree 20 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>0 12 9 6 -1.</_>
-                <_>0 14 9 2 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>0.0241385009139776</threshold>
-            <left_val>0.5438212752342224</left_val>
-            <right_val>0.1319826990365982</right_val></_></_></trees>
-      <stage_threshold>9.4985427856445313</stage_threshold>
-      <parent>1</parent>
-      <next>-1</next></_>
-    <_>
-      <!-- stage 3 -->
-      <trees>
-        <_>
-          <!-- tree 0 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>5 7 3 4 -1.</_>
-                <_>5 9 3 2 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>1.9212230108678341e-003</threshold>
-            <left_val>0.1415266990661621</left_val>
-            <right_val>0.6199870705604553</right_val></_></_>
-        <_>
-          <!-- tree 1 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>9 3 2 16 -1.</_>
-                <_>9 11 2 8 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-1.2748669541906565e-004</threshold>
-            <left_val>0.6191074252128601</left_val>
-            <right_val>0.1884928941726685</right_val></_></_>
-        <_>
-          <!-- tree 2 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>3 6 13 8 -1.</_>
-                <_>3 10 13 4 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>5.1409931620582938e-004</threshold>
-            <left_val>0.1487396955490112</left_val>
-            <right_val>0.5857927799224854</right_val></_></_>
-        <_>
-          <!-- tree 3 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>12 3 8 2 -1.</_>
-                <_>12 3 4 2 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>4.1878609918057919e-003</threshold>
-            <left_val>0.2746909856796265</left_val>
-            <right_val>0.6359239816665649</right_val></_></_>
-        <_>
-          <!-- tree 4 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>8 8 4 12 -1.</_>
-                <_>8 12 4 4 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>5.1015717908740044e-003</threshold>
-            <left_val>0.5870851278305054</left_val>
-            <right_val>0.2175628989934921</right_val></_></_>
-        <_>
-          <!-- tree 5 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>11 3 8 6 -1.</_>
-                <_>15 3 4 3 2.</_>
-                <_>11 6 4 3 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-2.1448440384119749e-003</threshold>
-            <left_val>0.5880944728851318</left_val>
-            <right_val>0.2979590892791748</right_val></_></_>
-        <_>
-          <!-- tree 6 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>7 1 6 19 -1.</_>
-                <_>9 1 2 19 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-2.8977119363844395e-003</threshold>
-            <left_val>0.2373327016830444</left_val>
-            <right_val>0.5876647233963013</right_val></_></_>
-        <_>
-          <!-- tree 7 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>9 0 6 4 -1.</_>
-                <_>11 0 2 4 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-0.0216106791049242</threshold>
-            <left_val>0.1220654994249344</left_val>
-            <right_val>0.5194202065467835</right_val></_></_>
-        <_>
-          <!-- tree 8 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>3 1 9 3 -1.</_>
-                <_>6 1 3 3 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-4.6299318782985210e-003</threshold>
-            <left_val>0.2631230950355530</left_val>
-            <right_val>0.5817409157752991</right_val></_></_>
-        <_>
-          <!-- tree 9 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>8 15 10 4 -1.</_>
-                <_>13 15 5 2 2.</_>
-                <_>8 17 5 2 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>5.9393711853772402e-004</threshold>
-            <left_val>0.3638620078563690</left_val>
-            <right_val>0.5698544979095459</right_val></_></_>
-        <_>
-          <!-- tree 10 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>0 3 6 10 -1.</_>
-                <_>3 3 3 10 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>0.0538786612451077</threshold>
-            <left_val>0.4303531050682068</left_val>
-            <right_val>0.7559366226196289</right_val></_></_>
-        <_>
-          <!-- tree 11 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>3 4 15 15 -1.</_>
-                <_>3 9 15 5 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>1.8887349870055914e-003</threshold>
-            <left_val>0.2122603058815002</left_val>
-            <right_val>0.5613427162170410</right_val></_></_>
-        <_>
-          <!-- tree 12 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>6 5 8 6 -1.</_>
-                <_>6 7 8 2 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-2.3635339457541704e-003</threshold>
-            <left_val>0.5631849169731140</left_val>
-            <right_val>0.2642767131328583</right_val></_></_>
-        <_>
-          <!-- tree 13 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>4 4 12 10 -1.</_>
-                <_>10 4 6 5 2.</_>
-                <_>4 9 6 5 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>0.0240177996456623</threshold>
-            <left_val>0.5797107815742493</left_val>
-            <right_val>0.2751705944538117</right_val></_></_>
-        <_>
-          <!-- tree 14 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>6 4 4 4 -1.</_>
-                <_>8 4 2 4 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>2.0543030404951423e-004</threshold>
-            <left_val>0.2705242037773132</left_val>
-            <right_val>0.5752568840980530</right_val></_></_>
-        <_>
-          <!-- tree 15 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>15 11 1 2 -1.</_>
-                <_>15 12 1 1 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>8.4790197433903813e-004</threshold>
-            <left_val>0.5435624718666077</left_val>
-            <right_val>0.2334876954555512</right_val></_></_>
-        <_>
-          <!-- tree 16 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>3 11 2 2 -1.</_>
-                <_>3 12 2 1 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>1.4091329649090767e-003</threshold>
-            <left_val>0.5319424867630005</left_val>
-            <right_val>0.2063155025243759</right_val></_></_>
-        <_>
-          <!-- tree 17 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>16 11 1 3 -1.</_>
-                <_>16 12 1 1 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>1.4642629539594054e-003</threshold>
-            <left_val>0.5418980717658997</left_val>
-            <right_val>0.3068861067295075</right_val></_></_>
-        <_>
-          <!-- tree 18 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>3 15 6 4 -1.</_>
-                <_>3 15 3 2 2.</_>
-                <_>6 17 3 2 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>1.6352549428120255e-003</threshold>
-            <left_val>0.3695372939109802</left_val>
-            <right_val>0.6112868189811707</right_val></_></_>
-        <_>
-          <!-- tree 19 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>6 7 8 2 -1.</_>
-                <_>6 8 8 1 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>8.3172752056270838e-004</threshold>
-            <left_val>0.3565036952495575</left_val>
-            <right_val>0.6025236248970032</right_val></_></_>
-        <_>
-          <!-- tree 20 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>3 11 1 3 -1.</_>
-                <_>3 12 1 1 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-2.0998890977352858e-003</threshold>
-            <left_val>0.1913982033729553</left_val>
-            <right_val>0.5362827181816101</right_val></_></_>
-        <_>
-          <!-- tree 21 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>6 0 12 2 -1.</_>
-                <_>6 1 12 1 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-7.4213981861248612e-004</threshold>
-            <left_val>0.3835555016994476</left_val>
-            <right_val>0.5529310107231140</right_val></_></_>
-        <_>
-          <!-- tree 22 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>9 14 2 3 -1.</_>
-                <_>9 15 2 1 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>3.2655049581080675e-003</threshold>
-            <left_val>0.4312896132469177</left_val>
-            <right_val>0.7101895809173584</right_val></_></_>
-        <_>
-          <!-- tree 23 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>7 15 6 2 -1.</_>
-                <_>7 16 6 1 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>8.9134991867467761e-004</threshold>
-            <left_val>0.3984830975532532</left_val>
-            <right_val>0.6391963958740234</right_val></_></_>
-        <_>
-          <!-- tree 24 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>0 5 4 6 -1.</_>
-                <_>0 7 4 2 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-0.0152841797098517</threshold>
-            <left_val>0.2366732954978943</left_val>
-            <right_val>0.5433713793754578</right_val></_></_>
-        <_>
-          <!-- tree 25 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>4 12 12 2 -1.</_>
-                <_>8 12 4 2 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>4.8381411470472813e-003</threshold>
-            <left_val>0.5817500948905945</left_val>
-            <right_val>0.3239189088344574</right_val></_></_>
-        <_>
-          <!-- tree 26 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>6 3 1 9 -1.</_>
-                <_>6 6 1 3 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-9.1093179071322083e-004</threshold>
-            <left_val>0.5540593862533569</left_val>
-            <right_val>0.2911868989467621</right_val></_></_>
-        <_>
-          <!-- tree 27 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>10 17 3 2 -1.</_>
-                <_>11 17 1 2 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-6.1275060288608074e-003</threshold>
-            <left_val>0.1775255054235458</left_val>
-            <right_val>0.5196629166603088</right_val></_></_>
-        <_>
-          <!-- tree 28 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>9 9 2 2 -1.</_>
-                <_>9 10 2 1 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-4.4576259097084403e-004</threshold>
-            <left_val>0.3024170100688934</left_val>
-            <right_val>0.5533593893051148</right_val></_></_>
-        <_>
-          <!-- tree 29 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>7 6 6 4 -1.</_>
-                <_>9 6 2 4 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>0.0226465407758951</threshold>
-            <left_val>0.4414930939674377</left_val>
-            <right_val>0.6975377202033997</right_val></_></_>
-        <_>
-          <!-- tree 30 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>7 17 3 2 -1.</_>
-                <_>8 17 1 2 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-1.8804960418492556e-003</threshold>
-            <left_val>0.2791394889354706</left_val>
-            <right_val>0.5497952103614807</right_val></_></_>
-        <_>
-          <!-- tree 31 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>10 17 3 3 -1.</_>
-                <_>11 17 1 3 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>7.0889107882976532e-003</threshold>
-            <left_val>0.5263199210166931</left_val>
-            <right_val>0.2385547012090683</right_val></_></_>
-        <_>
-          <!-- tree 32 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>8 12 3 2 -1.</_>
-                <_>8 13 3 1 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>1.7318050377070904e-003</threshold>
-            <left_val>0.4319379031658173</left_val>
-            <right_val>0.6983600854873657</right_val></_></_>
-        <_>
-          <!-- tree 33 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>9 3 6 2 -1.</_>
-                <_>11 3 2 2 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-6.8482700735330582e-003</threshold>
-            <left_val>0.3082042932510376</left_val>
-            <right_val>0.5390920042991638</right_val></_></_>
-        <_>
-          <!-- tree 34 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>3 11 14 4 -1.</_>
-                <_>3 13 14 2 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-1.5062530110299122e-005</threshold>
-            <left_val>0.5521922111511231</left_val>
-            <right_val>0.3120366036891937</right_val></_></_>
-        <_>
-          <!-- tree 35 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>1 10 18 4 -1.</_>
-                <_>10 10 9 2 2.</_>
-                <_>1 12 9 2 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>0.0294755697250366</threshold>
-            <left_val>0.5401322841644287</left_val>
-            <right_val>0.1770603060722351</right_val></_></_>
-        <_>
-          <!-- tree 36 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>0 10 3 3 -1.</_>
-                <_>0 11 3 1 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>8.1387329846620560e-003</threshold>
-            <left_val>0.5178617835044861</left_val>
-            <right_val>0.1211019009351730</right_val></_></_>
-        <_>
-          <!-- tree 37 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>9 1 6 6 -1.</_>
-                <_>11 1 2 6 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>0.0209429506212473</threshold>
-            <left_val>0.5290294289588928</left_val>
-            <right_val>0.3311221897602081</right_val></_></_>
-        <_>
-          <!-- tree 38 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>8 7 3 6 -1.</_>
-                <_>9 7 1 6 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-9.5665529370307922e-003</threshold>
-            <left_val>0.7471994161605835</left_val>
-            <right_val>0.4451968967914581</right_val></_></_></trees>
-      <stage_threshold>18.4129695892333980</stage_threshold>
-      <parent>2</parent>
-      <next>-1</next></_>
-    <_>
-      <!-- stage 4 -->
-      <trees>
-        <_>
-          <!-- tree 0 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>1 0 18 9 -1.</_>
-                <_>1 3 18 3 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-2.8206960996612906e-004</threshold>
-            <left_val>0.2064086049795151</left_val>
-            <right_val>0.6076732277870178</right_val></_></_>
-        <_>
-          <!-- tree 1 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>12 10 2 6 -1.</_>
-                <_>12 13 2 3 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>1.6790600493550301e-003</threshold>
-            <left_val>0.5851997137069702</left_val>
-            <right_val>0.1255383938550949</right_val></_></_>
-        <_>
-          <!-- tree 2 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>0 5 19 8 -1.</_>
-                <_>0 9 19 4 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>6.9827912375330925e-004</threshold>
-            <left_val>0.0940184295177460</left_val>
-            <right_val>0.5728961229324341</right_val></_></_>
-        <_>
-          <!-- tree 3 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>7 0 6 9 -1.</_>
-                <_>9 0 2 9 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>7.8959012171253562e-004</threshold>
-            <left_val>0.1781987994909287</left_val>
-            <right_val>0.5694308876991272</right_val></_></_>
-        <_>
-          <!-- tree 4 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>5 3 6 1 -1.</_>
-                <_>7 3 2 1 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-2.8560499195009470e-003</threshold>
-            <left_val>0.1638399064540863</left_val>
-            <right_val>0.5788664817810059</right_val></_></_>
-        <_>
-          <!-- tree 5 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>11 3 6 1 -1.</_>
-                <_>13 3 2 1 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-3.8122469559311867e-003</threshold>
-            <left_val>0.2085440009832382</left_val>
-            <right_val>0.5508564710617065</right_val></_></_>
-        <_>
-          <!-- tree 6 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>5 10 4 6 -1.</_>
-                <_>5 13 4 3 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>1.5896620461717248e-003</threshold>
-            <left_val>0.5702760815620422</left_val>
-            <right_val>0.1857215017080307</right_val></_></_>
-        <_>
-          <!-- tree 7 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>11 3 6 1 -1.</_>
-                <_>13 3 2 1 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>0.0100783398374915</threshold>
-            <left_val>0.5116943120956421</left_val>
-            <right_val>0.2189770042896271</right_val></_></_>
-        <_>
-          <!-- tree 8 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>4 4 12 6 -1.</_>
-                <_>4 6 12 2 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-0.0635263025760651</threshold>
-            <left_val>0.7131379842758179</left_val>
-            <right_val>0.4043813049793243</right_val></_></_>
-        <_>
-          <!-- tree 9 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>15 12 2 6 -1.</_>
-                <_>15 14 2 2 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-9.1031491756439209e-003</threshold>
-            <left_val>0.2567181885242462</left_val>
-            <right_val>0.5463973283767700</right_val></_></_>
-        <_>
-          <!-- tree 10 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>9 3 2 2 -1.</_>
-                <_>10 3 1 2 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-2.4035000242292881e-003</threshold>
-            <left_val>0.1700665950775147</left_val>
-            <right_val>0.5590974092483521</right_val></_></_>
-        <_>
-          <!-- tree 11 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>9 3 3 1 -1.</_>
-                <_>10 3 1 1 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>1.5226360410451889e-003</threshold>
-            <left_val>0.5410556793212891</left_val>
-            <right_val>0.2619054019451141</right_val></_></_>
-        <_>
-          <!-- tree 12 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>1 1 4 14 -1.</_>
-                <_>3 1 2 14 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>0.0179974399507046</threshold>
-            <left_val>0.3732436895370483</left_val>
-            <right_val>0.6535220742225647</right_val></_></_>
-        <_>
-          <!-- tree 13 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>9 0 4 4 -1.</_>
-                <_>11 0 2 2 2.</_>
-                <_>9 2 2 2 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-6.4538191072642803e-003</threshold>
-            <left_val>0.2626481950283051</left_val>
-            <right_val>0.5537446141242981</right_val></_></_>
-        <_>
-          <!-- tree 14 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>7 5 1 14 -1.</_>
-                <_>7 12 1 7 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-0.0118807600811124</threshold>
-            <left_val>0.2003753930330277</left_val>
-            <right_val>0.5544745922088623</right_val></_></_>
-        <_>
-          <!-- tree 15 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>19 0 1 4 -1.</_>
-                <_>19 2 1 2 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>1.2713660253211856e-003</threshold>
-            <left_val>0.5591902732849121</left_val>
-            <right_val>0.3031975924968720</right_val></_></_>
-        <_>
-          <!-- tree 16 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>5 5 6 4 -1.</_>
-                <_>8 5 3 4 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>1.1376109905540943e-003</threshold>
-            <left_val>0.2730407118797302</left_val>
-            <right_val>0.5646508932113648</right_val></_></_>
-        <_>
-          <!-- tree 17 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>9 18 3 2 -1.</_>
-                <_>10 18 1 2 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-4.2651998810470104e-003</threshold>
-            <left_val>0.1405909061431885</left_val>
-            <right_val>0.5461820960044861</right_val></_></_>
-        <_>
-          <!-- tree 18 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>8 18 3 2 -1.</_>
-                <_>9 18 1 2 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-2.9602861031889915e-003</threshold>
-            <left_val>0.1795035004615784</left_val>
-            <right_val>0.5459290146827698</right_val></_></_>
-        <_>
-          <!-- tree 19 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>4 5 12 6 -1.</_>
-                <_>4 7 12 2 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-8.8448226451873779e-003</threshold>
-            <left_val>0.5736783146858215</left_val>
-            <right_val>0.2809219956398010</right_val></_></_>
-        <_>
-          <!-- tree 20 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>3 12 2 6 -1.</_>
-                <_>3 14 2 2 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-6.6430689767003059e-003</threshold>
-            <left_val>0.2370675951242447</left_val>
-            <right_val>0.5503826141357422</right_val></_></_>
-        <_>
-          <!-- tree 21 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>10 8 2 12 -1.</_>
-                <_>10 12 2 4 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>3.9997808635234833e-003</threshold>
-            <left_val>0.5608199834823608</left_val>
-            <right_val>0.3304282128810883</right_val></_></_>
-        <_>
-          <!-- tree 22 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>7 18 3 2 -1.</_>
-                <_>8 18 1 2 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-4.1221720166504383e-003</threshold>
-            <left_val>0.1640105992555618</left_val>
-            <right_val>0.5378993153572083</right_val></_></_>
-        <_>
-          <!-- tree 23 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>9 0 6 2 -1.</_>
-                <_>11 0 2 2 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>0.0156249096617103</threshold>
-            <left_val>0.5227649211883545</left_val>
-            <right_val>0.2288603931665421</right_val></_></_>
-        <_>
-          <!-- tree 24 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>5 11 9 3 -1.</_>
-                <_>5 12 9 1 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-0.0103564197197557</threshold>
-            <left_val>0.7016193866729736</left_val>
-            <right_val>0.4252927899360657</right_val></_></_>
-        <_>
-          <!-- tree 25 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>9 0 6 2 -1.</_>
-                <_>11 0 2 2 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-8.7960809469223022e-003</threshold>
-            <left_val>0.2767347097396851</left_val>
-            <right_val>0.5355830192565918</right_val></_></_>
-        <_>
-          <!-- tree 26 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>1 1 18 5 -1.</_>
-                <_>7 1 6 5 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>0.1622693985700607</threshold>
-            <left_val>0.4342240095138550</left_val>
-            <right_val>0.7442579269409180</right_val></_></_>
-        <_>
-          <!-- tree 27 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>8 0 4 4 -1.</_>
-                <_>10 0 2 2 2.</_>
-                <_>8 2 2 2 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>4.5542530715465546e-003</threshold>
-            <left_val>0.5726485848426819</left_val>
-            <right_val>0.2582125067710877</right_val></_></_>
-        <_>
-          <!-- tree 28 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>3 12 1 3 -1.</_>
-                <_>3 13 1 1 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-2.1309209987521172e-003</threshold>
-            <left_val>0.2106848061084747</left_val>
-            <right_val>0.5361018776893616</right_val></_></_>
-        <_>
-          <!-- tree 29 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>8 14 5 3 -1.</_>
-                <_>8 15 5 1 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-0.0132084200158715</threshold>
-            <left_val>0.7593790888786316</left_val>
-            <right_val>0.4552468061447144</right_val></_></_>
-        <_>
-          <!-- tree 30 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>5 4 10 12 -1.</_>
-                <_>5 4 5 6 2.</_>
-                <_>10 10 5 6 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-0.0659966766834259</threshold>
-            <left_val>0.1252475976943970</left_val>
-            <right_val>0.5344039797782898</right_val></_></_>
-        <_>
-          <!-- tree 31 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>9 6 9 12 -1.</_>
-                <_>9 10 9 4 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>7.9142656177282333e-003</threshold>
-            <left_val>0.3315384089946747</left_val>
-            <right_val>0.5601043105125427</right_val></_></_>
-        <_>
-          <!-- tree 32 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>2 2 12 14 -1.</_>
-                <_>2 2 6 7 2.</_>
-                <_>8 9 6 7 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>0.0208942797034979</threshold>
-            <left_val>0.5506049990653992</left_val>
-            <right_val>0.2768838107585907</right_val></_></_></trees>
-      <stage_threshold>15.3241395950317380</stage_threshold>
-      <parent>3</parent>
-      <next>-1</next></_>
-    <_>
-      <!-- stage 5 -->
-      <trees>
-        <_>
-          <!-- tree 0 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>4 7 12 2 -1.</_>
-                <_>8 7 4 2 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>1.1961159761995077e-003</threshold>
-            <left_val>0.1762690991163254</left_val>
-            <right_val>0.6156241297721863</right_val></_></_>
-        <_>
-          <!-- tree 1 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>7 4 6 4 -1.</_>
-                <_>7 6 6 2 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-1.8679830245673656e-003</threshold>
-            <left_val>0.6118106842041016</left_val>
-            <right_val>0.1832399964332581</right_val></_></_>
-        <_>
-          <!-- tree 2 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>4 5 11 8 -1.</_>
-                <_>4 9 11 4 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-1.9579799845814705e-004</threshold>
-            <left_val>0.0990442633628845</left_val>
-            <right_val>0.5723816156387329</right_val></_></_>
-        <_>
-          <!-- tree 3 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>3 10 16 4 -1.</_>
-                <_>3 12 16 2 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-8.0255657667294145e-004</threshold>
-            <left_val>0.5579879879951477</left_val>
-            <right_val>0.2377282977104187</right_val></_></_>
-        <_>
-          <!-- tree 4 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>0 0 16 2 -1.</_>
-                <_>0 1 16 1 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-2.4510810617357492e-003</threshold>
-            <left_val>0.2231457978487015</left_val>
-            <right_val>0.5858935117721558</right_val></_></_>
-        <_>
-          <!-- tree 5 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>7 5 6 2 -1.</_>
-                <_>9 5 2 2 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>5.0361850298941135e-004</threshold>
-            <left_val>0.2653993964195252</left_val>
-            <right_val>0.5794103741645813</right_val></_></_>
-        <_>
-          <!-- tree 6 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>3 2 6 10 -1.</_>
-                <_>3 2 3 5 2.</_>
-                <_>6 7 3 5 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>4.0293349884450436e-003</threshold>
-            <left_val>0.5803827047348023</left_val>
-            <right_val>0.2484865039587021</right_val></_></_>
-        <_>
-          <!-- tree 7 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>10 5 8 15 -1.</_>
-                <_>10 10 8 5 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-0.0144517095759511</threshold>
-            <left_val>0.1830351948738098</left_val>
-            <right_val>0.5484204888343811</right_val></_></_>
-        <_>
-          <!-- tree 8 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>3 14 8 6 -1.</_>
-                <_>3 14 4 3 2.</_>
-                <_>7 17 4 3 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>2.0380979403853416e-003</threshold>
-            <left_val>0.3363558948040009</left_val>
-            <right_val>0.6051092743873596</right_val></_></_>
-        <_>
-          <!-- tree 9 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>14 2 2 2 -1.</_>
-                <_>14 3 2 1 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-1.6155190533027053e-003</threshold>
-            <left_val>0.2286642044782639</left_val>
-            <right_val>0.5441246032714844</right_val></_></_>
-        <_>
-          <!-- tree 10 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>1 10 7 6 -1.</_>
-                <_>1 13 7 3 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>3.3458340913057327e-003</threshold>
-            <left_val>0.5625913143157959</left_val>
-            <right_val>0.2392338067293167</right_val></_></_>
-        <_>
-          <!-- tree 11 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>15 4 4 3 -1.</_>
-                <_>15 4 2 3 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>1.6379579901695251e-003</threshold>
-            <left_val>0.3906993865966797</left_val>
-            <right_val>0.5964621901512146</right_val></_></_>
-        <_>
-          <!-- tree 12 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>2 9 14 6 -1.</_>
-                <_>2 9 7 3 2.</_>
-                <_>9 12 7 3 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>0.0302512105554342</threshold>
-            <left_val>0.5248482227325440</left_val>
-            <right_val>0.1575746983289719</right_val></_></_>
-        <_>
-          <!-- tree 13 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>5 7 10 4 -1.</_>
-                <_>5 9 10 2 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>0.0372519902884960</threshold>
-            <left_val>0.4194310903549194</left_val>
-            <right_val>0.6748418807983398</right_val></_></_>
-        <_>
-          <!-- tree 14 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>6 9 8 8 -1.</_>
-                <_>6 9 4 4 2.</_>
-                <_>10 13 4 4 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-0.0251097902655602</threshold>
-            <left_val>0.1882549971342087</left_val>
-            <right_val>0.5473451018333435</right_val></_></_>
-        <_>
-          <!-- tree 15 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>14 1 3 2 -1.</_>
-                <_>14 2 3 1 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-5.3099058568477631e-003</threshold>
-            <left_val>0.1339973062276840</left_val>
-            <right_val>0.5227110981941223</right_val></_></_>
-        <_>
-          <!-- tree 16 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>1 4 4 2 -1.</_>
-                <_>3 4 2 2 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>1.2086479691788554e-003</threshold>
-            <left_val>0.3762088119983673</left_val>
-            <right_val>0.6109635829925537</right_val></_></_>
-        <_>
-          <!-- tree 17 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>11 10 2 8 -1.</_>
-                <_>11 14 2 4 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-0.0219076797366142</threshold>
-            <left_val>0.2663142979145050</left_val>
-            <right_val>0.5404006838798523</right_val></_></_>
-        <_>
-          <!-- tree 18 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>0 0 5 3 -1.</_>
-                <_>0 1 5 1 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>5.4116579703986645e-003</threshold>
-            <left_val>0.5363578796386719</left_val>
-            <right_val>0.2232273072004318</right_val></_></_>
-        <_>
-          <!-- tree 19 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>2 5 18 8 -1.</_>
-                <_>11 5 9 4 2.</_>
-                <_>2 9 9 4 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>0.0699463263154030</threshold>
-            <left_val>0.5358232855796814</left_val>
-            <right_val>0.2453698068857193</right_val></_></_>
-        <_>
-          <!-- tree 20 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>6 6 1 6 -1.</_>
-                <_>6 9 1 3 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>3.4520021290518343e-004</threshold>
-            <left_val>0.2409671992063522</left_val>
-            <right_val>0.5376930236816406</right_val></_></_>
-        <_>
-          <!-- tree 21 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>19 1 1 3 -1.</_>
-                <_>19 2 1 1 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>1.2627709656953812e-003</threshold>
-            <left_val>0.5425856709480286</left_val>
-            <right_val>0.3155693113803864</right_val></_></_>
-        <_>
-          <!-- tree 22 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>7 6 6 6 -1.</_>
-                <_>9 6 2 6 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>0.0227195098996162</threshold>
-            <left_val>0.4158405959606171</left_val>
-            <right_val>0.6597865223884583</right_val></_></_>
-        <_>
-          <!-- tree 23 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>19 1 1 3 -1.</_>
-                <_>19 2 1 1 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-1.8111000536009669e-003</threshold>
-            <left_val>0.2811253070831299</left_val>
-            <right_val>0.5505244731903076</right_val></_></_>
-        <_>
-          <!-- tree 24 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>3 13 2 3 -1.</_>
-                <_>3 14 2 1 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>3.3469670452177525e-003</threshold>
-            <left_val>0.5260028243064880</left_val>
-            <right_val>0.1891465038061142</right_val></_></_>
-        <_>
-          <!-- tree 25 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>8 4 8 12 -1.</_>
-                <_>12 4 4 6 2.</_>
-                <_>8 10 4 6 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>4.0791751234792173e-004</threshold>
-            <left_val>0.5673509240150452</left_val>
-            <right_val>0.3344210088253021</right_val></_></_>
-        <_>
-          <!-- tree 26 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>5 2 6 3 -1.</_>
-                <_>7 2 2 3 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>0.0127347996458411</threshold>
-            <left_val>0.5343592166900635</left_val>
-            <right_val>0.2395612001419067</right_val></_></_>
-        <_>
-          <!-- tree 27 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>6 1 9 10 -1.</_>
-                <_>6 6 9 5 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-7.3119727894663811e-003</threshold>
-            <left_val>0.6010890007019043</left_val>
-            <right_val>0.4022207856178284</right_val></_></_>
-        <_>
-          <!-- tree 28 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>0 4 6 12 -1.</_>
-                <_>2 4 2 12 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-0.0569487512111664</threshold>
-            <left_val>0.8199151158332825</left_val>
-            <right_val>0.4543190896511078</right_val></_></_>
-        <_>
-          <!-- tree 29 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>15 13 2 3 -1.</_>
-                <_>15 14 2 1 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-5.0116591155529022e-003</threshold>
-            <left_val>0.2200281023979187</left_val>
-            <right_val>0.5357710719108582</right_val></_></_>
-        <_>
-          <!-- tree 30 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>7 14 5 3 -1.</_>
-                <_>7 15 5 1 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>6.0334368608891964e-003</threshold>
-            <left_val>0.4413081109523773</left_val>
-            <right_val>0.7181751132011414</right_val></_></_>
-        <_>
-          <!-- tree 31 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>15 13 3 3 -1.</_>
-                <_>15 14 3 1 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>3.9437441155314445e-003</threshold>
-            <left_val>0.5478860735893250</left_val>
-            <right_val>0.2791733145713806</right_val></_></_>
-        <_>
-          <!-- tree 32 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>6 14 8 3 -1.</_>
-                <_>6 15 8 1 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-3.6591119132936001e-003</threshold>
-            <left_val>0.6357867717742920</left_val>
-            <right_val>0.3989723920822144</right_val></_></_>
-        <_>
-          <!-- tree 33 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>15 13 3 3 -1.</_>
-                <_>15 14 3 1 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-3.8456181064248085e-003</threshold>
-            <left_val>0.3493686020374298</left_val>
-            <right_val>0.5300664901733398</right_val></_></_>
-        <_>
-          <!-- tree 34 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>2 13 3 3 -1.</_>
-                <_>2 14 3 1 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-7.1926261298358440e-003</threshold>
-            <left_val>0.1119614988565445</left_val>
-            <right_val>0.5229672789573669</right_val></_></_>
-        <_>
-          <!-- tree 35 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>4 7 12 12 -1.</_>
-                <_>10 7 6 6 2.</_>
-                <_>4 13 6 6 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-0.0527989417314529</threshold>
-            <left_val>0.2387102991342545</left_val>
-            <right_val>0.5453451275825501</right_val></_></_>
-        <_>
-          <!-- tree 36 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>9 7 2 6 -1.</_>
-                <_>10 7 1 6 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-7.9537667334079742e-003</threshold>
-            <left_val>0.7586917877197266</left_val>
-            <right_val>0.4439376890659332</right_val></_></_>
-        <_>
-          <!-- tree 37 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>8 9 5 2 -1.</_>
-                <_>8 10 5 1 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-2.7344180271029472e-003</threshold>
-            <left_val>0.2565476894378662</left_val>
-            <right_val>0.5489321947097778</right_val></_></_>
-        <_>
-          <!-- tree 38 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>8 6 3 4 -1.</_>
-                <_>9 6 1 4 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-1.8507939530536532e-003</threshold>
-            <left_val>0.6734347939491272</left_val>
-            <right_val>0.4252474904060364</right_val></_></_>
-        <_>
-          <!-- tree 39 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>9 6 2 8 -1.</_>
-                <_>9 10 2 4 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>0.0159189198166132</threshold>
-            <left_val>0.5488352775573731</left_val>
-            <right_val>0.2292661964893341</right_val></_></_>
-        <_>
-          <!-- tree 40 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>7 7 3 6 -1.</_>
-                <_>8 7 1 6 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-1.2687679845839739e-003</threshold>
-            <left_val>0.6104331016540527</left_val>
-            <right_val>0.4022389948368073</right_val></_></_>
-        <_>
-          <!-- tree 41 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>11 3 3 3 -1.</_>
-                <_>12 3 1 3 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>6.2883910723030567e-003</threshold>
-            <left_val>0.5310853123664856</left_val>
-            <right_val>0.1536193042993546</right_val></_></_>
-        <_>
-          <!-- tree 42 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>5 4 6 1 -1.</_>
-                <_>7 4 2 1 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-6.2259892001748085e-003</threshold>
-            <left_val>0.1729111969470978</left_val>
-            <right_val>0.5241606235504150</right_val></_></_>
-        <_>
-          <!-- tree 43 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>5 6 10 3 -1.</_>
-                <_>5 7 10 1 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-0.0121325999498367</threshold>
-            <left_val>0.6597759723663330</left_val>
-            <right_val>0.4325182139873505</right_val></_></_></trees>
-      <stage_threshold>21.0106391906738280</stage_threshold>
-      <parent>4</parent>
-      <next>-1</next></_>
-    <_>
-      <!-- stage 6 -->
-      <trees>
-        <_>
-          <!-- tree 0 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>7 3 6 9 -1.</_>
-                <_>7 6 6 3 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-3.9184908382594585e-003</threshold>
-            <left_val>0.6103435158729553</left_val>
-            <right_val>0.1469330936670303</right_val></_></_>
-        <_>
-          <!-- tree 1 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>6 7 9 1 -1.</_>
-                <_>9 7 3 1 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>1.5971299726516008e-003</threshold>
-            <left_val>0.2632363140583038</left_val>
-            <right_val>0.5896466970443726</right_val></_></_>
-        <_>
-          <!-- tree 2 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>2 8 16 8 -1.</_>
-                <_>2 12 16 4 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>0.0177801102399826</threshold>
-            <left_val>0.5872874259948731</left_val>
-            <right_val>0.1760361939668655</right_val></_></_>
-        <_>
-          <!-- tree 3 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>14 6 2 6 -1.</_>
-                <_>14 9 2 3 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>6.5334769897162914e-004</threshold>
-            <left_val>0.1567801982164383</left_val>
-            <right_val>0.5596066117286682</right_val></_></_>
-        <_>
-          <!-- tree 4 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>1 5 6 15 -1.</_>
-                <_>1 10 6 5 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-2.8353091329336166e-004</threshold>
-            <left_val>0.1913153976202011</left_val>
-            <right_val>0.5732036232948303</right_val></_></_>
-        <_>
-          <!-- tree 5 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>10 0 6 9 -1.</_>
-                <_>10 3 6 3 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>1.6104689566418529e-003</threshold>
-            <left_val>0.2914913892745972</left_val>
-            <right_val>0.5623080730438232</right_val></_></_>
-        <_>
-          <!-- tree 6 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>6 6 7 14 -1.</_>
-                <_>6 13 7 7 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-0.0977506190538406</threshold>
-            <left_val>0.1943476945161820</left_val>
-            <right_val>0.5648233294487000</right_val></_></_>
-        <_>
-          <!-- tree 7 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>13 7 3 6 -1.</_>
-                <_>13 9 3 2 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>5.5182358482852578e-004</threshold>
-            <left_val>0.3134616911411285</left_val>
-            <right_val>0.5504639744758606</right_val></_></_>
-        <_>
-          <!-- tree 8 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>1 8 15 4 -1.</_>
-                <_>6 8 5 4 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-0.0128582203760743</threshold>
-            <left_val>0.2536481916904450</left_val>
-            <right_val>0.5760142803192139</right_val></_></_>
-        <_>
-          <!-- tree 9 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>11 2 3 10 -1.</_>
-                <_>11 7 3 5 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>4.1530239395797253e-003</threshold>
-            <left_val>0.5767722129821777</left_val>
-            <right_val>0.3659774065017700</right_val></_></_>
-        <_>
-          <!-- tree 10 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>3 7 4 6 -1.</_>
-                <_>3 9 4 2 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>1.7092459602281451e-003</threshold>
-            <left_val>0.2843191027641296</left_val>
-            <right_val>0.5918939113616943</right_val></_></_>
-        <_>
-          <!-- tree 11 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>13 3 6 10 -1.</_>
-                <_>15 3 2 10 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>7.5217359699308872e-003</threshold>
-            <left_val>0.4052427113056183</left_val>
-            <right_val>0.6183109283447266</right_val></_></_>
-        <_>
-          <!-- tree 12 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>5 7 8 10 -1.</_>
-                <_>5 7 4 5 2.</_>
-                <_>9 12 4 5 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>2.2479810286313295e-003</threshold>
-            <left_val>0.5783755183219910</left_val>
-            <right_val>0.3135401010513306</right_val></_></_>
-        <_>
-          <!-- tree 13 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>4 4 12 12 -1.</_>
-                <_>10 4 6 6 2.</_>
-                <_>4 10 6 6 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>0.0520062111318111</threshold>
-            <left_val>0.5541312098503113</left_val>
-            <right_val>0.1916636973619461</right_val></_></_>
-        <_>
-          <!-- tree 14 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>1 4 6 9 -1.</_>
-                <_>3 4 2 9 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>0.0120855299755931</threshold>
-            <left_val>0.4032655954360962</left_val>
-            <right_val>0.6644591093063355</right_val></_></_>
-        <_>
-          <!-- tree 15 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>11 3 2 5 -1.</_>
-                <_>11 3 1 5 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>1.4687820112158079e-005</threshold>
-            <left_val>0.3535977900028229</left_val>
-            <right_val>0.5709382891654968</right_val></_></_>
-        <_>
-          <!-- tree 16 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>7 3 2 5 -1.</_>
-                <_>8 3 1 5 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>7.1395188570022583e-006</threshold>
-            <left_val>0.3037444949150085</left_val>
-            <right_val>0.5610269904136658</right_val></_></_>
-        <_>
-          <!-- tree 17 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>10 14 2 3 -1.</_>
-                <_>10 15 2 1 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-4.6001640148460865e-003</threshold>
-            <left_val>0.7181087136268616</left_val>
-            <right_val>0.4580326080322266</right_val></_></_>
-        <_>
-          <!-- tree 18 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>5 12 6 2 -1.</_>
-                <_>8 12 3 2 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>2.0058949012309313e-003</threshold>
-            <left_val>0.5621951818466187</left_val>
-            <right_val>0.2953684031963348</right_val></_></_>
-        <_>
-          <!-- tree 19 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>9 14 2 3 -1.</_>
-                <_>9 15 2 1 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>4.5050270855426788e-003</threshold>
-            <left_val>0.4615387916564941</left_val>
-            <right_val>0.7619017958641052</right_val></_></_>
-        <_>
-          <!-- tree 20 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>4 11 12 6 -1.</_>
-                <_>4 14 12 3 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>0.0117468303069472</threshold>
-            <left_val>0.5343837141990662</left_val>
-            <right_val>0.1772529035806656</right_val></_></_>
-        <_>
-          <!-- tree 21 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>11 11 5 9 -1.</_>
-                <_>11 14 5 3 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-0.0583163388073444</threshold>
-            <left_val>0.1686245948076248</left_val>
-            <right_val>0.5340772271156311</right_val></_></_>
-        <_>
-          <!-- tree 22 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>6 15 3 2 -1.</_>
-                <_>6 16 3 1 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>2.3629379575140774e-004</threshold>
-            <left_val>0.3792056143283844</left_val>
-            <right_val>0.6026803851127625</right_val></_></_>
-        <_>
-          <!-- tree 23 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>11 0 3 5 -1.</_>
-                <_>12 0 1 5 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-7.8156180679798126e-003</threshold>
-            <left_val>0.1512867063283920</left_val>
-            <right_val>0.5324323773384094</right_val></_></_>
-        <_>
-          <!-- tree 24 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>5 5 6 7 -1.</_>
-                <_>8 5 3 7 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-0.0108761601150036</threshold>
-            <left_val>0.2081822007894516</left_val>
-            <right_val>0.5319945216178894</right_val></_></_>
-        <_>
-          <!-- tree 25 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>13 0 1 9 -1.</_>
-                <_>13 3 1 3 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-2.7745519764721394e-003</threshold>
-            <left_val>0.4098246991634369</left_val>
-            <right_val>0.5210328102111816</right_val></_></_>
-        <_>
-          <!-- tree 26 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>3 2 4 8 -1.</_>
-                <_>3 2 2 4 2.</_>
-                <_>5 6 2 4 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-7.8276381827890873e-004</threshold>
-            <left_val>0.5693274140357971</left_val>
-            <right_val>0.3478842079639435</right_val></_></_>
-        <_>
-          <!-- tree 27 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>13 12 4 6 -1.</_>
-                <_>13 14 4 2 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>0.0138704096898437</threshold>
-            <left_val>0.5326750874519348</left_val>
-            <right_val>0.2257698029279709</right_val></_></_>
-        <_>
-          <!-- tree 28 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>3 12 4 6 -1.</_>
-                <_>3 14 4 2 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-0.0236749108880758</threshold>
-            <left_val>0.1551305055618286</left_val>
-            <right_val>0.5200707912445068</right_val></_></_>
-        <_>
-          <!-- tree 29 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>13 11 3 4 -1.</_>
-                <_>13 13 3 2 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-1.4879409718560055e-005</threshold>
-            <left_val>0.5500566959381104</left_val>
-            <right_val>0.3820176124572754</right_val></_></_>
-        <_>
-          <!-- tree 30 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>4 4 4 3 -1.</_>
-                <_>4 5 4 1 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>3.6190641112625599e-003</threshold>
-            <left_val>0.4238683879375458</left_val>
-            <right_val>0.6639748215675354</right_val></_></_>
-        <_>
-          <!-- tree 31 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>7 5 11 8 -1.</_>
-                <_>7 9 11 4 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-0.0198171101510525</threshold>
-            <left_val>0.2150038033723831</left_val>
-            <right_val>0.5382357835769653</right_val></_></_>
-        <_>
-          <!-- tree 32 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>7 8 3 4 -1.</_>
-                <_>8 8 1 4 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-3.8154039066284895e-003</threshold>
-            <left_val>0.6675711274147034</left_val>
-            <right_val>0.4215297102928162</right_val></_></_>
-        <_>
-          <!-- tree 33 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>9 1 6 1 -1.</_>
-                <_>11 1 2 1 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-4.9775829538702965e-003</threshold>
-            <left_val>0.2267289012670517</left_val>
-            <right_val>0.5386328101158142</right_val></_></_>
-        <_>
-          <!-- tree 34 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>5 5 3 3 -1.</_>
-                <_>5 6 3 1 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>2.2441020701080561e-003</threshold>
-            <left_val>0.4308691024780273</left_val>
-            <right_val>0.6855735778808594</right_val></_></_>
-        <_>
-          <!-- tree 35 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>0 9 20 6 -1.</_>
-                <_>10 9 10 3 2.</_>
-                <_>0 12 10 3 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>0.0122824599966407</threshold>
-            <left_val>0.5836614966392517</left_val>
-            <right_val>0.3467479050159454</right_val></_></_>
-        <_>
-          <!-- tree 36 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>8 6 3 5 -1.</_>
-                <_>9 6 1 5 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-2.8548699337989092e-003</threshold>
-            <left_val>0.7016944885253906</left_val>
-            <right_val>0.4311453998088837</right_val></_></_>
-        <_>
-          <!-- tree 37 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>11 0 1 3 -1.</_>
-                <_>11 1 1 1 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-3.7875669077038765e-003</threshold>
-            <left_val>0.2895345091819763</left_val>
-            <right_val>0.5224946141242981</right_val></_></_>
-        <_>
-          <!-- tree 38 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>4 2 4 2 -1.</_>
-                <_>4 3 4 1 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-1.2201230274513364e-003</threshold>
-            <left_val>0.2975570857524872</left_val>
-            <right_val>0.5481644868850708</right_val></_></_>
-        <_>
-          <!-- tree 39 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>12 6 4 3 -1.</_>
-                <_>12 7 4 1 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>0.0101605998352170</threshold>
-            <left_val>0.4888817965984345</left_val>
-            <right_val>0.8182697892189026</right_val></_></_>
-        <_>
-          <!-- tree 40 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>5 0 6 4 -1.</_>
-                <_>7 0 2 4 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-0.0161745697259903</threshold>
-            <left_val>0.1481492966413498</left_val>
-            <right_val>0.5239992737770081</right_val></_></_>
-        <_>
-          <!-- tree 41 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>9 7 3 8 -1.</_>
-                <_>10 7 1 8 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>0.0192924607545137</threshold>
-            <left_val>0.4786309897899628</left_val>
-            <right_val>0.7378190755844116</right_val></_></_>
-        <_>
-          <!-- tree 42 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>9 7 2 2 -1.</_>
-                <_>10 7 1 2 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-3.2479539513587952e-003</threshold>
-            <left_val>0.7374222874641419</left_val>
-            <right_val>0.4470643997192383</right_val></_></_>
-        <_>
-          <!-- tree 43 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>6 7 14 4 -1.</_>
-                <_>13 7 7 2 2.</_>
-                <_>6 9 7 2 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-9.3803480267524719e-003</threshold>
-            <left_val>0.3489154875278473</left_val>
-            <right_val>0.5537996292114258</right_val></_></_>
-        <_>
-          <!-- tree 44 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>0 5 3 6 -1.</_>
-                <_>0 7 3 2 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-0.0126061299815774</threshold>
-            <left_val>0.2379686981439591</left_val>
-            <right_val>0.5315443277359009</right_val></_></_>
-        <_>
-          <!-- tree 45 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>13 11 3 4 -1.</_>
-                <_>13 13 3 2 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-0.0256219301372766</threshold>
-            <left_val>0.1964688003063202</left_val>
-            <right_val>0.5138769745826721</right_val></_></_>
-        <_>
-          <!-- tree 46 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>4 11 3 4 -1.</_>
-                <_>4 13 3 2 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-7.5741496402770281e-005</threshold>
-            <left_val>0.5590522885322571</left_val>
-            <right_val>0.3365853130817413</right_val></_></_>
-        <_>
-          <!-- tree 47 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>5 9 12 8 -1.</_>
-                <_>11 9 6 4 2.</_>
-                <_>5 13 6 4 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-0.0892108827829361</threshold>
-            <left_val>0.0634046569466591</left_val>
-            <right_val>0.5162634849548340</right_val></_></_>
-        <_>
-          <!-- tree 48 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>9 12 1 3 -1.</_>
-                <_>9 13 1 1 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-2.7670480776578188e-003</threshold>
-            <left_val>0.7323467731475830</left_val>
-            <right_val>0.4490706026554108</right_val></_></_>
-        <_>
-          <!-- tree 49 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>10 15 2 4 -1.</_>
-                <_>10 17 2 2 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>2.7152578695677221e-004</threshold>
-            <left_val>0.4114834964275360</left_val>
-            <right_val>0.5985518097877502</right_val></_></_></trees>
-      <stage_threshold>23.9187908172607420</stage_threshold>
-      <parent>5</parent>
-      <next>-1</next></_>
-    <_>
-      <!-- stage 7 -->
-      <trees>
-        <_>
-          <!-- tree 0 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>7 7 6 1 -1.</_>
-                <_>9 7 2 1 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>1.4786219689995050e-003</threshold>
-            <left_val>0.2663545012474060</left_val>
-            <right_val>0.6643316745758057</right_val></_></_>
-        <_>
-          <!-- tree 1 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>12 3 6 6 -1.</_>
-                <_>15 3 3 3 2.</_>
-                <_>12 6 3 3 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-1.8741659587249160e-003</threshold>
-            <left_val>0.6143848896026611</left_val>
-            <right_val>0.2518512904644013</right_val></_></_>
-        <_>
-          <!-- tree 2 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>0 4 10 6 -1.</_>
-                <_>0 6 10 2 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-1.7151009524241090e-003</threshold>
-            <left_val>0.5766341090202332</left_val>
-            <right_val>0.2397463023662567</right_val></_></_>
-        <_>
-          <!-- tree 3 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>8 3 8 14 -1.</_>
-                <_>12 3 4 7 2.</_>
-                <_>8 10 4 7 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-1.8939269939437509e-003</threshold>
-            <left_val>0.5682045817375183</left_val>
-            <right_val>0.2529144883155823</right_val></_></_>
-        <_>
-          <!-- tree 4 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>4 4 7 15 -1.</_>
-                <_>4 9 7 5 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-5.3006052039563656e-003</threshold>
-            <left_val>0.1640675961971283</left_val>
-            <right_val>0.5556079745292664</right_val></_></_>
-        <_>
-          <!-- tree 5 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>12 2 6 8 -1.</_>
-                <_>15 2 3 4 2.</_>
-                <_>12 6 3 4 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-0.0466625317931175</threshold>
-            <left_val>0.6123154163360596</left_val>
-            <right_val>0.4762830138206482</right_val></_></_>
-        <_>
-          <!-- tree 6 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>2 2 6 8 -1.</_>
-                <_>2 2 3 4 2.</_>
-                <_>5 6 3 4 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-7.9431332414969802e-004</threshold>
-            <left_val>0.5707858800888062</left_val>
-            <right_val>0.2839404046535492</right_val></_></_>
-        <_>
-          <!-- tree 7 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>2 13 18 7 -1.</_>
-                <_>8 13 6 7 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>0.0148916700854898</threshold>
-            <left_val>0.4089672863483429</left_val>
-            <right_val>0.6006367206573486</right_val></_></_>
-        <_>
-          <!-- tree 8 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>4 3 8 14 -1.</_>
-                <_>4 3 4 7 2.</_>
-                <_>8 10 4 7 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-1.2046529445797205e-003</threshold>
-            <left_val>0.5712450742721558</left_val>
-            <right_val>0.2705289125442505</right_val></_></_>
-        <_>
-          <!-- tree 9 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>18 1 2 6 -1.</_>
-                <_>18 3 2 2 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>6.0619381256401539e-003</threshold>
-            <left_val>0.5262504220008850</left_val>
-            <right_val>0.3262225985527039</right_val></_></_>
-        <_>
-          <!-- tree 10 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>9 11 2 3 -1.</_>
-                <_>9 12 2 1 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-2.5286648888140917e-003</threshold>
-            <left_val>0.6853830814361572</left_val>
-            <right_val>0.4199256896972656</right_val></_></_>
-        <_>
-          <!-- tree 11 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>18 1 2 6 -1.</_>
-                <_>18 3 2 2 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-5.9010218828916550e-003</threshold>
-            <left_val>0.3266282081604004</left_val>
-            <right_val>0.5434812903404236</right_val></_></_>
-        <_>
-          <!-- tree 12 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>0 1 2 6 -1.</_>
-                <_>0 3 2 2 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>5.6702760048210621e-003</threshold>
-            <left_val>0.5468410849571228</left_val>
-            <right_val>0.2319003939628601</right_val></_></_>
-        <_>
-          <!-- tree 13 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>1 5 18 6 -1.</_>
-                <_>1 7 18 2 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-3.0304100364446640e-003</threshold>
-            <left_val>0.5570667982101440</left_val>
-            <right_val>0.2708238065242767</right_val></_></_>
-        <_>
-          <!-- tree 14 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>0 2 6 7 -1.</_>
-                <_>3 2 3 7 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>2.9803649522364140e-003</threshold>
-            <left_val>0.3700568974018097</left_val>
-            <right_val>0.5890625715255737</right_val></_></_>
-        <_>
-          <!-- tree 15 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>7 3 6 14 -1.</_>
-                <_>7 10 6 7 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-0.0758405104279518</threshold>
-            <left_val>0.2140070050954819</left_val>
-            <right_val>0.5419948101043701</right_val></_></_>
-        <_>
-          <!-- tree 16 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>3 7 13 10 -1.</_>
-                <_>3 12 13 5 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>0.0192625392228365</threshold>
-            <left_val>0.5526772141456604</left_val>
-            <right_val>0.2726590037345886</right_val></_></_>
-        <_>
-          <!-- tree 17 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>11 15 2 2 -1.</_>
-                <_>11 16 2 1 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>1.8888259364757687e-004</threshold>
-            <left_val>0.3958011865615845</left_val>
-            <right_val>0.6017209887504578</right_val></_></_>
-        <_>
-          <!-- tree 18 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>2 11 16 4 -1.</_>
-                <_>2 11 8 2 2.</_>
-                <_>10 13 8 2 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>0.0293695498257875</threshold>
-            <left_val>0.5241373777389526</left_val>
-            <right_val>0.1435758024454117</right_val></_></_>
-        <_>
-          <!-- tree 19 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>13 7 6 4 -1.</_>
-                <_>16 7 3 2 2.</_>
-                <_>13 9 3 2 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>1.0417619487270713e-003</threshold>
-            <left_val>0.3385409116744995</left_val>
-            <right_val>0.5929983258247376</right_val></_></_>
-        <_>
-          <!-- tree 20 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>6 10 3 9 -1.</_>
-                <_>6 13 3 3 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>2.6125640142709017e-003</threshold>
-            <left_val>0.5485377907752991</left_val>
-            <right_val>0.3021597862243652</right_val></_></_>
-        <_>
-          <!-- tree 21 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>14 6 1 6 -1.</_>
-                <_>14 9 1 3 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>9.6977467183023691e-004</threshold>
-            <left_val>0.3375276029109955</left_val>
-            <right_val>0.5532032847404480</right_val></_></_>
-        <_>
-          <!-- tree 22 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>5 10 4 1 -1.</_>
-                <_>7 10 2 1 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>5.9512659208849072e-004</threshold>
-            <left_val>0.5631743073463440</left_val>
-            <right_val>0.3359399139881134</right_val></_></_>
-        <_>
-          <!-- tree 23 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>3 8 15 5 -1.</_>
-                <_>8 8 5 5 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-0.1015655994415283</threshold>
-            <left_val>0.0637350380420685</left_val>
-            <right_val>0.5230425000190735</right_val></_></_>
-        <_>
-          <!-- tree 24 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>1 6 5 4 -1.</_>
-                <_>1 8 5 2 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>0.0361566990613937</threshold>
-            <left_val>0.5136963129043579</left_val>
-            <right_val>0.1029528975486755</right_val></_></_>
-        <_>
-          <!-- tree 25 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>3 1 17 6 -1.</_>
-                <_>3 3 17 2 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>3.4624140243977308e-003</threshold>
-            <left_val>0.3879320025444031</left_val>
-            <right_val>0.5558289289474487</right_val></_></_>
-        <_>
-          <!-- tree 26 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>6 7 8 2 -1.</_>
-                <_>10 7 4 2 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>0.0195549800992012</threshold>
-            <left_val>0.5250086784362793</left_val>
-            <right_val>0.1875859946012497</right_val></_></_>
-        <_>
-          <!-- tree 27 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>9 7 3 2 -1.</_>
-                <_>10 7 1 2 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-2.3121440317481756e-003</threshold>
-            <left_val>0.6672028899192810</left_val>
-            <right_val>0.4679641127586365</right_val></_></_>
-        <_>
-          <!-- tree 28 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>8 7 3 2 -1.</_>
-                <_>9 7 1 2 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-1.8605289515107870e-003</threshold>
-            <left_val>0.7163379192352295</left_val>
-            <right_val>0.4334670901298523</right_val></_></_>
-        <_>
-          <!-- tree 29 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>8 9 4 2 -1.</_>
-                <_>8 10 4 1 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-9.4026362057775259e-004</threshold>
-            <left_val>0.3021360933780670</left_val>
-            <right_val>0.5650203227996826</right_val></_></_>
-        <_>
-          <!-- tree 30 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>8 8 4 3 -1.</_>
-                <_>8 9 4 1 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-5.2418331615626812e-003</threshold>
-            <left_val>0.1820009052753449</left_val>
-            <right_val>0.5250256061553955</right_val></_></_>
-        <_>
-          <!-- tree 31 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>9 5 6 4 -1.</_>
-                <_>9 5 3 4 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>1.1729019752237946e-004</threshold>
-            <left_val>0.3389188051223755</left_val>
-            <right_val>0.5445973277091980</right_val></_></_>
-        <_>
-          <!-- tree 32 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>8 13 4 3 -1.</_>
-                <_>8 14 4 1 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>1.1878840159624815e-003</threshold>
-            <left_val>0.4085349142551422</left_val>
-            <right_val>0.6253563165664673</right_val></_></_>
-        <_>
-          <!-- tree 33 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>4 7 12 6 -1.</_>
-                <_>10 7 6 3 2.</_>
-                <_>4 10 6 3 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-0.0108813596889377</threshold>
-            <left_val>0.3378399014472961</left_val>
-            <right_val>0.5700082778930664</right_val></_></_>
-        <_>
-          <!-- tree 34 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>8 14 4 3 -1.</_>
-                <_>8 15 4 1 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>1.7354859737679362e-003</threshold>
-            <left_val>0.4204635918140411</left_val>
-            <right_val>0.6523038744926453</right_val></_></_>
-        <_>
-          <!-- tree 35 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>9 7 3 3 -1.</_>
-                <_>9 8 3 1 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-6.5119052305817604e-003</threshold>
-            <left_val>0.2595216035842896</left_val>
-            <right_val>0.5428143739700317</right_val></_></_>
-        <_>
-          <!-- tree 36 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>7 4 3 8 -1.</_>
-                <_>8 4 1 8 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-1.2136430013924837e-003</threshold>
-            <left_val>0.6165143847465515</left_val>
-            <right_val>0.3977893888950348</right_val></_></_>
-        <_>
-          <!-- tree 37 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>10 0 3 6 -1.</_>
-                <_>11 0 1 6 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-0.0103542404249310</threshold>
-            <left_val>0.1628028005361557</left_val>
-            <right_val>0.5219504833221436</right_val></_></_>
-        <_>
-          <!-- tree 38 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>6 3 4 8 -1.</_>
-                <_>8 3 2 8 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>5.5858830455690622e-004</threshold>
-            <left_val>0.3199650943279266</left_val>
-            <right_val>0.5503574013710022</right_val></_></_>
-        <_>
-          <!-- tree 39 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>14 3 6 13 -1.</_>
-                <_>14 3 3 13 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>0.0152996499091387</threshold>
-            <left_val>0.4103994071483612</left_val>
-            <right_val>0.6122388243675232</right_val></_></_>
-        <_>
-          <!-- tree 40 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>8 13 3 6 -1.</_>
-                <_>8 16 3 3 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-0.0215882100164890</threshold>
-            <left_val>0.1034912988543510</left_val>
-            <right_val>0.5197384953498840</right_val></_></_>
-        <_>
-          <!-- tree 41 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>14 3 6 13 -1.</_>
-                <_>14 3 3 13 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-0.1283462941646576</threshold>
-            <left_val>0.8493865132331848</left_val>
-            <right_val>0.4893102943897247</right_val></_></_>
-        <_>
-          <!-- tree 42 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>0 7 10 4 -1.</_>
-                <_>0 7 5 2 2.</_>
-                <_>5 9 5 2 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-2.2927189711481333e-003</threshold>
-            <left_val>0.3130157887935638</left_val>
-            <right_val>0.5471575260162354</right_val></_></_>
-        <_>
-          <!-- tree 43 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>14 3 6 13 -1.</_>
-                <_>14 3 3 13 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>0.0799151062965393</threshold>
-            <left_val>0.4856320917606354</left_val>
-            <right_val>0.6073989272117615</right_val></_></_>
-        <_>
-          <!-- tree 44 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>0 3 6 13 -1.</_>
-                <_>3 3 3 13 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-0.0794410929083824</threshold>
-            <left_val>0.8394674062728882</left_val>
-            <right_val>0.4624533057212830</right_val></_></_>
-        <_>
-          <!-- tree 45 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>9 1 4 1 -1.</_>
-                <_>9 1 2 1 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-5.2800010889768600e-003</threshold>
-            <left_val>0.1881695985794067</left_val>
-            <right_val>0.5306698083877564</right_val></_></_>
-        <_>
-          <!-- tree 46 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>8 0 2 1 -1.</_>
-                <_>9 0 1 1 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>1.0463109938427806e-003</threshold>
-            <left_val>0.5271229147911072</left_val>
-            <right_val>0.2583065927028656</right_val></_></_>
-        <_>
-          <!-- tree 47 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>10 16 4 4 -1.</_>
-                <_>12 16 2 2 2.</_>
-                <_>10 18 2 2 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>2.6317298761568964e-004</threshold>
-            <left_val>0.4235304892063141</left_val>
-            <right_val>0.5735440850257874</right_val></_></_>
-        <_>
-          <!-- tree 48 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>9 6 2 3 -1.</_>
-                <_>10 6 1 3 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-3.6173160187900066e-003</threshold>
-            <left_val>0.6934396028518677</left_val>
-            <right_val>0.4495444893836975</right_val></_></_>
-        <_>
-          <!-- tree 49 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>4 5 12 2 -1.</_>
-                <_>8 5 4 2 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>0.0114218797534704</threshold>
-            <left_val>0.5900921225547791</left_val>
-            <right_val>0.4138193130493164</right_val></_></_>
-        <_>
-          <!-- tree 50 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>8 7 3 5 -1.</_>
-                <_>9 7 1 5 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-1.9963278900831938e-003</threshold>
-            <left_val>0.6466382741928101</left_val>
-            <right_val>0.4327239990234375</right_val></_></_></trees>
-      <stage_threshold>24.5278797149658200</stage_threshold>
-      <parent>6</parent>
-      <next>-1</next></_>
-    <_>
-      <!-- stage 8 -->
-      <trees>
-        <_>
-          <!-- tree 0 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>6 4 8 6 -1.</_>
-                <_>6 6 8 2 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-9.9691245704889297e-003</threshold>
-            <left_val>0.6142324209213257</left_val>
-            <right_val>0.2482212036848068</right_val></_></_>
-        <_>
-          <!-- tree 1 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>9 5 2 12 -1.</_>
-                <_>9 11 2 6 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>7.3073059320449829e-004</threshold>
-            <left_val>0.5704951882362366</left_val>
-            <right_val>0.2321965992450714</right_val></_></_>
-        <_>
-          <!-- tree 2 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>4 6 6 8 -1.</_>
-                <_>4 10 6 4 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>6.4045301405712962e-004</threshold>
-            <left_val>0.2112251967191696</left_val>
-            <right_val>0.5814933180809021</right_val></_></_>
-        <_>
-          <!-- tree 3 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>12 2 8 5 -1.</_>
-                <_>12 2 4 5 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>4.5424019917845726e-003</threshold>
-            <left_val>0.2950482070446014</left_val>
-            <right_val>0.5866311788558960</right_val></_></_>
-        <_>
-          <!-- tree 4 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>0 8 18 3 -1.</_>
-                <_>0 9 18 1 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>9.2477443104144186e-005</threshold>
-            <left_val>0.2990990877151489</left_val>
-            <right_val>0.5791326761245728</right_val></_></_>
-        <_>
-          <!-- tree 5 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>8 12 4 8 -1.</_>
-                <_>8 16 4 4 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-8.6603146046400070e-003</threshold>
-            <left_val>0.2813029885292053</left_val>
-            <right_val>0.5635542273521423</right_val></_></_>
-        <_>
-          <!-- tree 6 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>0 2 8 5 -1.</_>
-                <_>4 2 4 5 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>8.0515816807746887e-003</threshold>
-            <left_val>0.3535369038581848</left_val>
-            <right_val>0.6054757237434387</right_val></_></_>
-        <_>
-          <!-- tree 7 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>13 11 3 4 -1.</_>
-                <_>13 13 3 2 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>4.3835240649059415e-004</threshold>
-            <left_val>0.5596532225608826</left_val>
-            <right_val>0.2731510996818543</right_val></_></_>
-        <_>
-          <!-- tree 8 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>5 11 6 1 -1.</_>
-                <_>7 11 2 1 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-9.8168973636347800e-005</threshold>
-            <left_val>0.5978031754493713</left_val>
-            <right_val>0.3638561069965363</right_val></_></_>
-        <_>
-          <!-- tree 9 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>11 3 3 1 -1.</_>
-                <_>12 3 1 1 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-1.1298790341243148e-003</threshold>
-            <left_val>0.2755252122879028</left_val>
-            <right_val>0.5432729125022888</right_val></_></_>
-        <_>
-          <!-- tree 10 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>7 13 5 3 -1.</_>
-                <_>7 14 5 1 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>6.4356150105595589e-003</threshold>
-            <left_val>0.4305641949176788</left_val>
-            <right_val>0.7069833278656006</right_val></_></_>
-        <_>
-          <!-- tree 11 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>11 11 7 6 -1.</_>
-                <_>11 14 7 3 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-0.0568293295800686</threshold>
-            <left_val>0.2495242953300476</left_val>
-            <right_val>0.5294997096061707</right_val></_></_>
-        <_>
-          <!-- tree 12 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>2 11 7 6 -1.</_>
-                <_>2 14 7 3 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>4.0668169967830181e-003</threshold>
-            <left_val>0.5478553175926209</left_val>
-            <right_val>0.2497723996639252</right_val></_></_>
-        <_>
-          <!-- tree 13 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>12 14 2 6 -1.</_>
-                <_>12 16 2 2 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>4.8164798499783501e-005</threshold>
-            <left_val>0.3938601016998291</left_val>
-            <right_val>0.5706356167793274</right_val></_></_>
-        <_>
-          <!-- tree 14 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>8 14 3 3 -1.</_>
-                <_>8 15 3 1 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>6.1795017682015896e-003</threshold>
-            <left_val>0.4407606124877930</left_val>
-            <right_val>0.7394766807556152</right_val></_></_>
-        <_>
-          <!-- tree 15 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>11 0 3 5 -1.</_>
-                <_>12 0 1 5 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>6.4985752105712891e-003</threshold>
-            <left_val>0.5445243120193481</left_val>
-            <right_val>0.2479152977466583</right_val></_></_>
-        <_>
-          <!-- tree 16 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>6 1 4 9 -1.</_>
-                <_>8 1 2 9 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-1.0211090557277203e-003</threshold>
-            <left_val>0.2544766962528229</left_val>
-            <right_val>0.5338971018791199</right_val></_></_>
-        <_>
-          <!-- tree 17 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>10 3 6 1 -1.</_>
-                <_>12 3 2 1 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-5.4247528314590454e-003</threshold>
-            <left_val>0.2718858122825623</left_val>
-            <right_val>0.5324069261550903</right_val></_></_>
-        <_>
-          <!-- tree 18 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>8 8 3 4 -1.</_>
-                <_>8 10 3 2 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-1.0559899965301156e-003</threshold>
-            <left_val>0.3178288042545319</left_val>
-            <right_val>0.5534508824348450</right_val></_></_>
-        <_>
-          <!-- tree 19 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>8 12 4 2 -1.</_>
-                <_>8 13 4 1 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>6.6465808777138591e-004</threshold>
-            <left_val>0.4284219145774841</left_val>
-            <right_val>0.6558194160461426</right_val></_></_>
-        <_>
-          <!-- tree 20 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>5 18 4 2 -1.</_>
-                <_>5 19 4 1 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-2.7524109464138746e-004</threshold>
-            <left_val>0.5902860760688782</left_val>
-            <right_val>0.3810262978076935</right_val></_></_>
-        <_>
-          <!-- tree 21 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>2 1 18 6 -1.</_>
-                <_>2 3 18 2 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>4.2293202131986618e-003</threshold>
-            <left_val>0.3816489875316620</left_val>
-            <right_val>0.5709385871887207</right_val></_></_>
-        <_>
-          <!-- tree 22 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>6 0 3 2 -1.</_>
-                <_>7 0 1 2 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-3.2868210691958666e-003</threshold>
-            <left_val>0.1747743934392929</left_val>
-            <right_val>0.5259544253349304</right_val></_></_>
-        <_>
-          <!-- tree 23 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>13 8 6 2 -1.</_>
-                <_>16 8 3 1 2.</_>
-                <_>13 9 3 1 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>1.5611879643984139e-004</threshold>
-            <left_val>0.3601722121238709</left_val>
-            <right_val>0.5725612044334412</right_val></_></_>
-        <_>
-          <!-- tree 24 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>6 10 3 6 -1.</_>
-                <_>6 13 3 3 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-7.3621381488919724e-006</threshold>
-            <left_val>0.5401858091354370</left_val>
-            <right_val>0.3044497072696686</right_val></_></_>
-        <_>
-          <!-- tree 25 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>0 13 20 4 -1.</_>
-                <_>10 13 10 2 2.</_>
-                <_>0 15 10 2 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-0.0147672500461340</threshold>
-            <left_val>0.3220770061016083</left_val>
-            <right_val>0.5573434829711914</right_val></_></_>
-        <_>
-          <!-- tree 26 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>7 7 6 5 -1.</_>
-                <_>9 7 2 5 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>0.0244895908981562</threshold>
-            <left_val>0.4301528036594391</left_val>
-            <right_val>0.6518812775611877</right_val></_></_>
-        <_>
-          <!-- tree 27 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>11 0 2 2 -1.</_>
-                <_>11 1 2 1 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-3.7652091123163700e-004</threshold>
-            <left_val>0.3564583063125610</left_val>
-            <right_val>0.5598236918449402</right_val></_></_>
-        <_>
-          <!-- tree 28 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>1 8 6 2 -1.</_>
-                <_>1 8 3 1 2.</_>
-                <_>4 9 3 1 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>7.3657688517414499e-006</threshold>
-            <left_val>0.3490782976150513</left_val>
-            <right_val>0.5561897754669190</right_val></_></_>
-        <_>
-          <!-- tree 29 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>0 2 20 2 -1.</_>
-                <_>10 2 10 1 2.</_>
-                <_>0 3 10 1 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-0.0150999398902059</threshold>
-            <left_val>0.1776272058486939</left_val>
-            <right_val>0.5335299968719482</right_val></_></_>
-        <_>
-          <!-- tree 30 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>7 14 5 3 -1.</_>
-                <_>7 15 5 1 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-3.8316650316119194e-003</threshold>
-            <left_val>0.6149687767028809</left_val>
-            <right_val>0.4221394062042236</right_val></_></_>
-        <_>
-          <!-- tree 31 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>7 13 6 6 -1.</_>
-                <_>10 13 3 3 2.</_>
-                <_>7 16 3 3 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>0.0169254001230001</threshold>
-            <left_val>0.5413014888763428</left_val>
-            <right_val>0.2166585028171539</right_val></_></_>
-        <_>
-          <!-- tree 32 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>9 12 2 3 -1.</_>
-                <_>9 13 2 1 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-3.0477850232273340e-003</threshold>
-            <left_val>0.6449490785598755</left_val>
-            <right_val>0.4354617893695831</right_val></_></_>
-        <_>
-          <!-- tree 33 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>16 11 1 6 -1.</_>
-                <_>16 13 1 2 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>3.2140589319169521e-003</threshold>
-            <left_val>0.5400155186653137</left_val>
-            <right_val>0.3523217141628265</right_val></_></_>
-        <_>
-          <!-- tree 34 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>3 11 1 6 -1.</_>
-                <_>3 13 1 2 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-4.0023201145231724e-003</threshold>
-            <left_val>0.2774524092674255</left_val>
-            <right_val>0.5338417291641235</right_val></_></_>
-        <_>
-          <!-- tree 35 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>4 4 14 12 -1.</_>
-                <_>11 4 7 6 2.</_>
-                <_>4 10 7 6 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>7.4182129465043545e-003</threshold>
-            <left_val>0.5676739215850830</left_val>
-            <right_val>0.3702817857265472</right_val></_></_>
-        <_>
-          <!-- tree 36 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>5 4 3 3 -1.</_>
-                <_>5 5 3 1 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-8.8764587417244911e-003</threshold>
-            <left_val>0.7749221920967102</left_val>
-            <right_val>0.4583688974380493</right_val></_></_>
-        <_>
-          <!-- tree 37 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>12 3 3 3 -1.</_>
-                <_>13 3 1 3 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>2.7311739977449179e-003</threshold>
-            <left_val>0.5338721871376038</left_val>
-            <right_val>0.3996661007404327</right_val></_></_>
-        <_>
-          <!-- tree 38 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>6 6 8 3 -1.</_>
-                <_>6 7 8 1 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-2.5082379579544067e-003</threshold>
-            <left_val>0.5611963272094727</left_val>
-            <right_val>0.3777498900890350</right_val></_></_>
-        <_>
-          <!-- tree 39 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>12 3 3 3 -1.</_>
-                <_>13 3 1 3 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-8.0541074275970459e-003</threshold>
-            <left_val>0.2915228903293610</left_val>
-            <right_val>0.5179182887077332</right_val></_></_>
-        <_>
-          <!-- tree 40 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>3 1 4 10 -1.</_>
-                <_>3 1 2 5 2.</_>
-                <_>5 6 2 5 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-9.7938813269138336e-004</threshold>
-            <left_val>0.5536432862281799</left_val>
-            <right_val>0.3700192868709564</right_val></_></_>
-        <_>
-          <!-- tree 41 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>5 7 10 2 -1.</_>
-                <_>5 7 5 2 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-5.8745909482240677e-003</threshold>
-            <left_val>0.3754391074180603</left_val>
-            <right_val>0.5679376125335693</right_val></_></_>
-        <_>
-          <!-- tree 42 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>8 7 3 3 -1.</_>
-                <_>9 7 1 3 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-4.4936719350516796e-003</threshold>
-            <left_val>0.7019699215888977</left_val>
-            <right_val>0.4480949938297272</right_val></_></_>
-        <_>
-          <!-- tree 43 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>15 12 2 3 -1.</_>
-                <_>15 13 2 1 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-5.4389229044318199e-003</threshold>
-            <left_val>0.2310364991426468</left_val>
-            <right_val>0.5313386917114258</right_val></_></_>
-        <_>
-          <!-- tree 44 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>7 8 3 4 -1.</_>
-                <_>8 8 1 4 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-7.5094640487805009e-004</threshold>
-            <left_val>0.5864868760108948</left_val>
-            <right_val>0.4129343032836914</right_val></_></_>
-        <_>
-          <!-- tree 45 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>13 4 1 12 -1.</_>
-                <_>13 10 1 6 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>1.4528800420521293e-005</threshold>
-            <left_val>0.3732407093048096</left_val>
-            <right_val>0.5619621276855469</right_val></_></_>
-        <_>
-          <!-- tree 46 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>4 5 12 12 -1.</_>
-                <_>4 5 6 6 2.</_>
-                <_>10 11 6 6 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>0.0407580696046352</threshold>
-            <left_val>0.5312091112136841</left_val>
-            <right_val>0.2720521986484528</right_val></_></_>
-        <_>
-          <!-- tree 47 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>7 14 7 3 -1.</_>
-                <_>7 15 7 1 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>6.6505931317806244e-003</threshold>
-            <left_val>0.4710015952587128</left_val>
-            <right_val>0.6693493723869324</right_val></_></_>
-        <_>
-          <!-- tree 48 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>3 12 2 3 -1.</_>
-                <_>3 13 2 1 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>4.5759351924061775e-003</threshold>
-            <left_val>0.5167819261550903</left_val>
-            <right_val>0.1637275964021683</right_val></_></_>
-        <_>
-          <!-- tree 49 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>3 2 14 2 -1.</_>
-                <_>10 2 7 1 2.</_>
-                <_>3 3 7 1 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>6.5269311890006065e-003</threshold>
-            <left_val>0.5397608876228333</left_val>
-            <right_val>0.2938531935214996</right_val></_></_>
-        <_>
-          <!-- tree 50 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>0 1 3 10 -1.</_>
-                <_>1 1 1 10 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-0.0136603796854615</threshold>
-            <left_val>0.7086488008499146</left_val>
-            <right_val>0.4532200098037720</right_val></_></_>
-        <_>
-          <!-- tree 51 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>9 0 6 5 -1.</_>
-                <_>11 0 2 5 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>0.0273588690906763</threshold>
-            <left_val>0.5206481218338013</left_val>
-            <right_val>0.3589231967926025</right_val></_></_>
-        <_>
-          <!-- tree 52 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>5 7 6 2 -1.</_>
-                <_>8 7 3 2 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>6.2197551596909761e-004</threshold>
-            <left_val>0.3507075905799866</left_val>
-            <right_val>0.5441123247146606</right_val></_></_>
-        <_>
-          <!-- tree 53 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>7 1 6 10 -1.</_>
-                <_>7 6 6 5 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-3.3077080734074116e-003</threshold>
-            <left_val>0.5859522819519043</left_val>
-            <right_val>0.4024891853332520</right_val></_></_>
-        <_>
-          <!-- tree 54 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>1 1 18 3 -1.</_>
-                <_>7 1 6 3 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-0.0106311095878482</threshold>
-            <left_val>0.6743267178535461</left_val>
-            <right_val>0.4422602951526642</right_val></_></_>
-        <_>
-          <!-- tree 55 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>16 3 3 6 -1.</_>
-                <_>16 5 3 2 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>0.0194416493177414</threshold>
-            <left_val>0.5282716155052185</left_val>
-            <right_val>0.1797904968261719</right_val></_></_></trees>
-      <stage_threshold>27.1533508300781250</stage_threshold>
-      <parent>7</parent>
-      <next>-1</next></_>
-    <_>
-      <!-- stage 9 -->
-      <trees>
-        <_>
-          <!-- tree 0 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>6 3 7 6 -1.</_>
-                <_>6 6 7 3 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-5.5052167735993862e-003</threshold>
-            <left_val>0.5914731025695801</left_val>
-            <right_val>0.2626559138298035</right_val></_></_>
-        <_>
-          <!-- tree 1 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>4 7 12 2 -1.</_>
-                <_>8 7 4 2 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>1.9562279339879751e-003</threshold>
-            <left_val>0.2312581986188889</left_val>
-            <right_val>0.5741627216339111</right_val></_></_>
-        <_>
-          <!-- tree 2 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>0 4 17 10 -1.</_>
-                <_>0 9 17 5 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-8.8924784213304520e-003</threshold>
-            <left_val>0.1656530052423477</left_val>
-            <right_val>0.5626654028892517</right_val></_></_>
-        <_>
-          <!-- tree 3 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>3 4 15 16 -1.</_>
-                <_>3 12 15 8 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>0.0836383774876595</threshold>
-            <left_val>0.5423449873924255</left_val>
-            <right_val>0.1957294940948486</right_val></_></_>
-        <_>
-          <!-- tree 4 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>7 15 6 4 -1.</_>
-                <_>7 17 6 2 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>1.2282270472496748e-003</threshold>
-            <left_val>0.3417904078960419</left_val>
-            <right_val>0.5992503762245178</right_val></_></_>
-        <_>
-          <!-- tree 5 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>15 2 4 9 -1.</_>
-                <_>15 2 2 9 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>5.7629169896245003e-003</threshold>
-            <left_val>0.3719581961631775</left_val>
-            <right_val>0.6079903841018677</right_val></_></_>
-        <_>
-          <!-- tree 6 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>2 3 3 2 -1.</_>
-                <_>2 4 3 1 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-1.6417410224676132e-003</threshold>
-            <left_val>0.2577486038208008</left_val>
-            <right_val>0.5576915740966797</right_val></_></_>
-        <_>
-          <!-- tree 7 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>13 6 7 9 -1.</_>
-                <_>13 9 7 3 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>3.4113149158656597e-003</threshold>
-            <left_val>0.2950749099254608</left_val>
-            <right_val>0.5514171719551086</right_val></_></_>
-        <_>
-          <!-- tree 8 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>8 11 4 3 -1.</_>
-                <_>8 12 4 1 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-0.0110693201422691</threshold>
-            <left_val>0.7569358944892883</left_val>
-            <right_val>0.4477078914642334</right_val></_></_>
-        <_>
-          <!-- tree 9 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>0 2 20 6 -1.</_>
-                <_>10 2 10 3 2.</_>
-                <_>0 5 10 3 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>0.0348659716546535</threshold>
-            <left_val>0.5583708882331848</left_val>
-            <right_val>0.2669621109962463</right_val></_></_>
-        <_>
-          <!-- tree 10 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>3 2 6 10 -1.</_>
-                <_>3 2 3 5 2.</_>
-                <_>6 7 3 5 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>6.5701099811121821e-004</threshold>
-            <left_val>0.5627313256263733</left_val>
-            <right_val>0.2988890111446381</right_val></_></_>
-        <_>
-          <!-- tree 11 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>13 10 3 4 -1.</_>
-                <_>13 12 3 2 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-0.0243391301482916</threshold>
-            <left_val>0.2771185040473938</left_val>
-            <right_val>0.5108863115310669</right_val></_></_>
-        <_>
-          <!-- tree 12 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>4 10 3 4 -1.</_>
-                <_>4 12 3 2 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>5.9435202274471521e-004</threshold>
-            <left_val>0.5580651760101318</left_val>
-            <right_val>0.3120341897010803</right_val></_></_>
-        <_>
-          <!-- tree 13 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>7 5 6 3 -1.</_>
-                <_>9 5 2 3 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>2.2971509024500847e-003</threshold>
-            <left_val>0.3330250084400177</left_val>
-            <right_val>0.5679075717926025</right_val></_></_>
-        <_>
-          <!-- tree 14 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>7 6 6 8 -1.</_>
-                <_>7 10 6 4 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-3.7801829166710377e-003</threshold>
-            <left_val>0.2990534901618958</left_val>
-            <right_val>0.5344808101654053</right_val></_></_>
-        <_>
-          <!-- tree 15 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>0 11 20 6 -1.</_>
-                <_>0 14 20 3 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-0.1342066973447800</threshold>
-            <left_val>0.1463858932256699</left_val>
-            <right_val>0.5392568111419678</right_val></_></_>
-        <_>
-          <!-- tree 16 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>4 13 4 6 -1.</_>
-                <_>4 13 2 3 2.</_>
-                <_>6 16 2 3 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>7.5224548345431685e-004</threshold>
-            <left_val>0.3746953904628754</left_val>
-            <right_val>0.5692734718322754</right_val></_></_>
-        <_>
-          <!-- tree 17 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>6 0 8 12 -1.</_>
-                <_>10 0 4 6 2.</_>
-                <_>6 6 4 6 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-0.0405455417931080</threshold>
-            <left_val>0.2754747867584229</left_val>
-            <right_val>0.5484297871589661</right_val></_></_>
-        <_>
-          <!-- tree 18 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>2 0 15 2 -1.</_>
-                <_>2 1 15 1 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>1.2572970008477569e-003</threshold>
-            <left_val>0.3744584023952484</left_val>
-            <right_val>0.5756075978279114</right_val></_></_>
-        <_>
-          <!-- tree 19 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>9 12 2 3 -1.</_>
-                <_>9 13 2 1 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-7.4249948374927044e-003</threshold>
-            <left_val>0.7513859272003174</left_val>
-            <right_val>0.4728231132030487</right_val></_></_>
-        <_>
-          <!-- tree 20 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>3 12 1 2 -1.</_>
-                <_>3 13 1 1 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>5.0908129196614027e-004</threshold>
-            <left_val>0.5404896736145020</left_val>
-            <right_val>0.2932321131229401</right_val></_></_>
-        <_>
-          <!-- tree 21 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>9 11 2 3 -1.</_>
-                <_>9 12 2 1 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-1.2808450264856219e-003</threshold>
-            <left_val>0.6169779896736145</left_val>
-            <right_val>0.4273349046707153</right_val></_></_>
-        <_>
-          <!-- tree 22 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>7 3 3 1 -1.</_>
-                <_>8 3 1 1 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-1.8348860321566463e-003</threshold>
-            <left_val>0.2048496007919312</left_val>
-            <right_val>0.5206472277641296</right_val></_></_>
-        <_>
-          <!-- tree 23 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>17 7 3 6 -1.</_>
-                <_>17 9 3 2 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>0.0274848695844412</threshold>
-            <left_val>0.5252984762191773</left_val>
-            <right_val>0.1675522029399872</right_val></_></_>
-        <_>
-          <!-- tree 24 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>7 2 3 2 -1.</_>
-                <_>8 2 1 2 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>2.2372419480234385e-003</threshold>
-            <left_val>0.5267782807350159</left_val>
-            <right_val>0.2777658104896545</right_val></_></_>
-        <_>
-          <!-- tree 25 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>11 4 5 3 -1.</_>
-                <_>11 5 5 1 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-8.8635291904211044e-003</threshold>
-            <left_val>0.6954557895660400</left_val>
-            <right_val>0.4812048971652985</right_val></_></_>
-        <_>
-          <!-- tree 26 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>4 4 5 3 -1.</_>
-                <_>4 5 5 1 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>4.1753971017897129e-003</threshold>
-            <left_val>0.4291887879371643</left_val>
-            <right_val>0.6349195837974548</right_val></_></_>
-        <_>
-          <!-- tree 27 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>19 3 1 2 -1.</_>
-                <_>19 4 1 1 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-1.7098189564421773e-003</threshold>
-            <left_val>0.2930536866188049</left_val>
-            <right_val>0.5361248850822449</right_val></_></_>
-        <_>
-          <!-- tree 28 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>5 5 4 3 -1.</_>
-                <_>5 6 4 1 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>6.5328548662364483e-003</threshold>
-            <left_val>0.4495325088500977</left_val>
-            <right_val>0.7409694194793701</right_val></_></_>
-        <_>
-          <!-- tree 29 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>17 7 3 6 -1.</_>
-                <_>17 9 3 2 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-9.5372907817363739e-003</threshold>
-            <left_val>0.3149119913578033</left_val>
-            <right_val>0.5416501760482788</right_val></_></_>
-        <_>
-          <!-- tree 30 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>0 7 3 6 -1.</_>
-                <_>0 9 3 2 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>0.0253109894692898</threshold>
-            <left_val>0.5121892094612122</left_val>
-            <right_val>0.1311707943677902</right_val></_></_>
-        <_>
-          <!-- tree 31 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>14 2 6 9 -1.</_>
-                <_>14 5 6 3 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>0.0364609695971012</threshold>
-            <left_val>0.5175911784172058</left_val>
-            <right_val>0.2591339945793152</right_val></_></_>
-        <_>
-          <!-- tree 32 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>0 4 5 6 -1.</_>
-                <_>0 6 5 2 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>0.0208543296903372</threshold>
-            <left_val>0.5137140154838562</left_val>
-            <right_val>0.1582316011190414</right_val></_></_>
-        <_>
-          <!-- tree 33 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>10 5 6 2 -1.</_>
-                <_>12 5 2 2 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-8.7207747856155038e-004</threshold>
-            <left_val>0.5574309825897217</left_val>
-            <right_val>0.4398978948593140</right_val></_></_>
-        <_>
-          <!-- tree 34 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>4 5 6 2 -1.</_>
-                <_>6 5 2 2 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-1.5227000403683633e-005</threshold>
-            <left_val>0.5548940896987915</left_val>
-            <right_val>0.3708069920539856</right_val></_></_>
-        <_>
-          <!-- tree 35 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>8 1 4 6 -1.</_>
-                <_>8 3 4 2 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-8.4316509310156107e-004</threshold>
-            <left_val>0.3387419879436493</left_val>
-            <right_val>0.5554211139678955</right_val></_></_>
-        <_>
-          <!-- tree 36 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>0 2 3 6 -1.</_>
-                <_>0 4 3 2 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>3.6037859972566366e-003</threshold>
-            <left_val>0.5358061790466309</left_val>
-            <right_val>0.3411171138286591</right_val></_></_>
-        <_>
-          <!-- tree 37 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>6 6 8 3 -1.</_>
-                <_>6 7 8 1 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-6.8057891912758350e-003</threshold>
-            <left_val>0.6125202775001526</left_val>
-            <right_val>0.4345862865447998</right_val></_></_>
-        <_>
-          <!-- tree 38 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>0 1 5 9 -1.</_>
-                <_>0 4 5 3 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-0.0470216609537601</threshold>
-            <left_val>0.2358165979385376</left_val>
-            <right_val>0.5193738937377930</right_val></_></_>
-        <_>
-          <!-- tree 39 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>16 0 4 15 -1.</_>
-                <_>16 0 2 15 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-0.0369541086256504</threshold>
-            <left_val>0.7323111295700073</left_val>
-            <right_val>0.4760943949222565</right_val></_></_>
-        <_>
-          <!-- tree 40 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>1 10 3 2 -1.</_>
-                <_>1 11 3 1 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>1.0439479956403375e-003</threshold>
-            <left_val>0.5419455170631409</left_val>
-            <right_val>0.3411330878734589</right_val></_></_>
-        <_>
-          <!-- tree 41 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>14 4 1 10 -1.</_>
-                <_>14 9 1 5 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-2.1050689974799752e-004</threshold>
-            <left_val>0.2821694016456604</left_val>
-            <right_val>0.5554947257041931</right_val></_></_>
-        <_>
-          <!-- tree 42 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>0 1 4 12 -1.</_>
-                <_>2 1 2 12 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-0.0808315873146057</threshold>
-            <left_val>0.9129930138587952</left_val>
-            <right_val>0.4697434902191162</right_val></_></_>
-        <_>
-          <!-- tree 43 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>11 11 4 2 -1.</_>
-                <_>11 11 2 2 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-3.6579059087671340e-004</threshold>
-            <left_val>0.6022670269012451</left_val>
-            <right_val>0.3978292942047119</right_val></_></_>
-        <_>
-          <!-- tree 44 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>5 11 4 2 -1.</_>
-                <_>7 11 2 2 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-1.2545920617412776e-004</threshold>
-            <left_val>0.5613213181495667</left_val>
-            <right_val>0.3845539987087250</right_val></_></_>
-        <_>
-          <!-- tree 45 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>3 8 15 5 -1.</_>
-                <_>8 8 5 5 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-0.0687864869832993</threshold>
-            <left_val>0.2261611968278885</left_val>
-            <right_val>0.5300496816635132</right_val></_></_>
-        <_>
-          <!-- tree 46 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>0 0 6 10 -1.</_>
-                <_>3 0 3 10 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>0.0124157899990678</threshold>
-            <left_val>0.4075691998004913</left_val>
-            <right_val>0.5828812122344971</right_val></_></_>
-        <_>
-          <!-- tree 47 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>11 4 3 2 -1.</_>
-                <_>12 4 1 2 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-4.7174817882478237e-003</threshold>
-            <left_val>0.2827253937721252</left_val>
-            <right_val>0.5267757773399353</right_val></_></_>
-        <_>
-          <!-- tree 48 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>8 12 3 8 -1.</_>
-                <_>8 16 3 4 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>0.0381368584930897</threshold>
-            <left_val>0.5074741244316101</left_val>
-            <right_val>0.1023615971207619</right_val></_></_>
-        <_>
-          <!-- tree 49 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>8 14 5 3 -1.</_>
-                <_>8 15 5 1 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-2.8168049175292253e-003</threshold>
-            <left_val>0.6169006824493408</left_val>
-            <right_val>0.4359692931175232</right_val></_></_>
-        <_>
-          <!-- tree 50 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>7 14 4 3 -1.</_>
-                <_>7 15 4 1 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>8.1303603947162628e-003</threshold>
-            <left_val>0.4524433016777039</left_val>
-            <right_val>0.7606095075607300</right_val></_></_>
-        <_>
-          <!-- tree 51 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>11 4 3 2 -1.</_>
-                <_>12 4 1 2 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>6.0056019574403763e-003</threshold>
-            <left_val>0.5240408778190613</left_val>
-            <right_val>0.1859712004661560</right_val></_></_>
-        <_>
-          <!-- tree 52 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>3 15 14 4 -1.</_>
-                <_>3 15 7 2 2.</_>
-                <_>10 17 7 2 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>0.0191393196582794</threshold>
-            <left_val>0.5209379196166992</left_val>
-            <right_val>0.2332071959972382</right_val></_></_>
-        <_>
-          <!-- tree 53 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>2 2 16 4 -1.</_>
-                <_>10 2 8 2 2.</_>
-                <_>2 4 8 2 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>0.0164457596838474</threshold>
-            <left_val>0.5450702905654907</left_val>
-            <right_val>0.3264234960079193</right_val></_></_>
-        <_>
-          <!-- tree 54 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>0 8 6 12 -1.</_>
-                <_>3 8 3 12 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-0.0373568907380104</threshold>
-            <left_val>0.6999046802520752</left_val>
-            <right_val>0.4533241987228394</right_val></_></_>
-        <_>
-          <!-- tree 55 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>5 7 10 2 -1.</_>
-                <_>5 7 5 2 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-0.0197279006242752</threshold>
-            <left_val>0.2653664946556091</left_val>
-            <right_val>0.5412809848785400</right_val></_></_>
-        <_>
-          <!-- tree 56 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>9 7 2 5 -1.</_>
-                <_>10 7 1 5 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>6.6972579807043076e-003</threshold>
-            <left_val>0.4480566084384918</left_val>
-            <right_val>0.7138652205467224</right_val></_></_>
-        <_>
-          <!-- tree 57 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>13 7 6 4 -1.</_>
-                <_>16 7 3 2 2.</_>
-                <_>13 9 3 2 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>7.4457528535276651e-004</threshold>
-            <left_val>0.4231350123882294</left_val>
-            <right_val>0.5471320152282715</right_val></_></_>
-        <_>
-          <!-- tree 58 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>0 13 8 2 -1.</_>
-                <_>0 14 8 1 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>1.1790640419349074e-003</threshold>
-            <left_val>0.5341702103614807</left_val>
-            <right_val>0.3130455017089844</right_val></_></_>
-        <_>
-          <!-- tree 59 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>13 7 6 4 -1.</_>
-                <_>16 7 3 2 2.</_>
-                <_>13 9 3 2 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>0.0349806100130081</threshold>
-            <left_val>0.5118659734725952</left_val>
-            <right_val>0.3430530130863190</right_val></_></_>
-        <_>
-          <!-- tree 60 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>1 7 6 4 -1.</_>
-                <_>1 7 3 2 2.</_>
-                <_>4 9 3 2 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>5.6859792675822973e-004</threshold>
-            <left_val>0.3532187044620514</left_val>
-            <right_val>0.5468639731407166</right_val></_></_>
-        <_>
-          <!-- tree 61 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>12 6 1 12 -1.</_>
-                <_>12 12 1 6 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-0.0113406497985125</threshold>
-            <left_val>0.2842353880405426</left_val>
-            <right_val>0.5348700881004334</right_val></_></_>
-        <_>
-          <!-- tree 62 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>9 5 2 6 -1.</_>
-                <_>10 5 1 6 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-6.6228108480572701e-003</threshold>
-            <left_val>0.6883640289306641</left_val>
-            <right_val>0.4492664933204651</right_val></_></_>
-        <_>
-          <!-- tree 63 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>14 12 2 3 -1.</_>
-                <_>14 13 2 1 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-8.0160330981016159e-003</threshold>
-            <left_val>0.1709893941879273</left_val>
-            <right_val>0.5224308967590332</right_val></_></_>
-        <_>
-          <!-- tree 64 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>4 12 2 3 -1.</_>
-                <_>4 13 2 1 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>1.4206819469109178e-003</threshold>
-            <left_val>0.5290846228599548</left_val>
-            <right_val>0.2993383109569550</right_val></_></_>
-        <_>
-          <!-- tree 65 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>8 12 4 3 -1.</_>
-                <_>8 13 4 1 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-2.7801711112260818e-003</threshold>
-            <left_val>0.6498854160308838</left_val>
-            <right_val>0.4460499882698059</right_val></_></_>
-        <_>
-          <!-- tree 66 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>5 2 2 4 -1.</_>
-                <_>5 2 1 2 2.</_>
-                <_>6 4 1 2 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-1.4747589593753219e-003</threshold>
-            <left_val>0.3260438144207001</left_val>
-            <right_val>0.5388113260269165</right_val></_></_>
-        <_>
-          <!-- tree 67 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>5 5 11 3 -1.</_>
-                <_>5 6 11 1 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-0.0238303393125534</threshold>
-            <left_val>0.7528941035270691</left_val>
-            <right_val>0.4801219999790192</right_val></_></_>
-        <_>
-          <!-- tree 68 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>7 6 4 12 -1.</_>
-                <_>7 12 4 6 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>6.9369790144264698e-003</threshold>
-            <left_val>0.5335165858268738</left_val>
-            <right_val>0.3261427879333496</right_val></_></_>
-        <_>
-          <!-- tree 69 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>12 13 8 5 -1.</_>
-                <_>12 13 4 5 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>8.2806255668401718e-003</threshold>
-            <left_val>0.4580394029617310</left_val>
-            <right_val>0.5737829804420471</right_val></_></_>
-        <_>
-          <!-- tree 70 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>7 6 1 12 -1.</_>
-                <_>7 12 1 6 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-0.0104395002126694</threshold>
-            <left_val>0.2592320144176483</left_val>
-            <right_val>0.5233827829360962</right_val></_></_></trees>
-      <stage_threshold>34.5541114807128910</stage_threshold>
-      <parent>8</parent>
-      <next>-1</next></_>
-    <_>
-      <!-- stage 10 -->
-      <trees>
-        <_>
-          <!-- tree 0 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>1 2 6 3 -1.</_>
-                <_>4 2 3 3 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>7.2006587870419025e-003</threshold>
-            <left_val>0.3258886039257050</left_val>
-            <right_val>0.6849808096885681</right_val></_></_>
-        <_>
-          <!-- tree 1 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>9 5 6 10 -1.</_>
-                <_>12 5 3 5 2.</_>
-                <_>9 10 3 5 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-2.8593589086085558e-003</threshold>
-            <left_val>0.5838881134986877</left_val>
-            <right_val>0.2537829875946045</right_val></_></_>
-        <_>
-          <!-- tree 2 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>5 5 8 12 -1.</_>
-                <_>5 5 4 6 2.</_>
-                <_>9 11 4 6 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>6.8580528022721410e-004</threshold>
-            <left_val>0.5708081722259522</left_val>
-            <right_val>0.2812424004077911</right_val></_></_>
-        <_>
-          <!-- tree 3 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>0 7 20 6 -1.</_>
-                <_>0 9 20 2 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>7.9580191522836685e-003</threshold>
-            <left_val>0.2501051127910614</left_val>
-            <right_val>0.5544260740280151</right_val></_></_>
-        <_>
-          <!-- tree 4 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>4 2 2 2 -1.</_>
-                <_>4 3 2 1 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-1.2124150525778532e-003</threshold>
-            <left_val>0.2385368049144745</left_val>
-            <right_val>0.5433350205421448</right_val></_></_>
-        <_>
-          <!-- tree 5 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>4 18 12 2 -1.</_>
-                <_>8 18 4 2 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>7.9426132142543793e-003</threshold>
-            <left_val>0.3955070972442627</left_val>
-            <right_val>0.6220757961273193</right_val></_></_>
-        <_>
-          <!-- tree 6 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>7 4 4 16 -1.</_>
-                <_>7 12 4 8 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>2.4630590341985226e-003</threshold>
-            <left_val>0.5639708042144775</left_val>
-            <right_val>0.2992357909679413</right_val></_></_>
-        <_>
-          <!-- tree 7 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>7 6 7 8 -1.</_>
-                <_>7 10 7 4 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-6.0396599583327770e-003</threshold>
-            <left_val>0.2186512947082520</left_val>
-            <right_val>0.5411676764488220</right_val></_></_>
-        <_>
-          <!-- tree 8 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>6 3 3 1 -1.</_>
-                <_>7 3 1 1 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-1.2988339876756072e-003</threshold>
-            <left_val>0.2350706011056900</left_val>
-            <right_val>0.5364584922790527</right_val></_></_>
-        <_>
-          <!-- tree 9 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>11 15 2 4 -1.</_>
-                <_>11 17 2 2 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>2.2299369447864592e-004</threshold>
-            <left_val>0.3804112970829010</left_val>
-            <right_val>0.5729606151580811</right_val></_></_>
-        <_>
-          <!-- tree 10 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>3 5 4 8 -1.</_>
-                <_>3 9 4 4 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>1.4654280385002494e-003</threshold>
-            <left_val>0.2510167956352234</left_val>
-            <right_val>0.5258268713951111</right_val></_></_>
-        <_>
-          <!-- tree 11 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>7 1 6 12 -1.</_>
-                <_>7 7 6 6 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-8.1210042117163539e-004</threshold>
-            <left_val>0.5992823839187622</left_val>
-            <right_val>0.3851158916950226</right_val></_></_>
-        <_>
-          <!-- tree 12 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>4 6 6 2 -1.</_>
-                <_>6 6 2 2 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-1.3836020370945334e-003</threshold>
-            <left_val>0.5681396126747131</left_val>
-            <right_val>0.3636586964130402</right_val></_></_>
-        <_>
-          <!-- tree 13 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>16 4 4 6 -1.</_>
-                <_>16 6 4 2 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-0.0279364492744207</threshold>
-            <left_val>0.1491317003965378</left_val>
-            <right_val>0.5377560257911682</right_val></_></_>
-        <_>
-          <!-- tree 14 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>3 3 5 2 -1.</_>
-                <_>3 4 5 1 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-4.6919551095925272e-004</threshold>
-            <left_val>0.3692429959774017</left_val>
-            <right_val>0.5572484731674194</right_val></_></_>
-        <_>
-          <!-- tree 15 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>9 11 2 3 -1.</_>
-                <_>9 12 2 1 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-4.9829659983515739e-003</threshold>
-            <left_val>0.6758509278297424</left_val>
-            <right_val>0.4532504081726074</right_val></_></_>
-        <_>
-          <!-- tree 16 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>2 16 4 2 -1.</_>
-                <_>2 17 4 1 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>1.8815309740602970e-003</threshold>
-            <left_val>0.5368022918701172</left_val>
-            <right_val>0.2932539880275726</right_val></_></_>
-        <_>
-          <!-- tree 17 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>7 13 6 6 -1.</_>
-                <_>10 13 3 3 2.</_>
-                <_>7 16 3 3 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-0.0190675500780344</threshold>
-            <left_val>0.1649377048015595</left_val>
-            <right_val>0.5330067276954651</right_val></_></_>
-        <_>
-          <!-- tree 18 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>7 0 3 4 -1.</_>
-                <_>8 0 1 4 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-4.6906559728085995e-003</threshold>
-            <left_val>0.1963925957679749</left_val>
-            <right_val>0.5119361877441406</right_val></_></_>
-        <_>
-          <!-- tree 19 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>8 15 4 3 -1.</_>
-                <_>8 16 4 1 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>5.9777139686048031e-003</threshold>
-            <left_val>0.4671171903610230</left_val>
-            <right_val>0.7008398175239563</right_val></_></_>
-        <_>
-          <!-- tree 20 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>0 4 4 6 -1.</_>
-                <_>0 6 4 2 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-0.0333031304180622</threshold>
-            <left_val>0.1155416965484619</left_val>
-            <right_val>0.5104162096977234</right_val></_></_>
-        <_>
-          <!-- tree 21 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>5 6 12 3 -1.</_>
-                <_>9 6 4 3 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>0.0907441079616547</threshold>
-            <left_val>0.5149660110473633</left_val>
-            <right_val>0.1306173056364059</right_val></_></_>
-        <_>
-          <!-- tree 22 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>7 6 6 14 -1.</_>
-                <_>9 6 2 14 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>9.3555898638442159e-004</threshold>
-            <left_val>0.3605481088161469</left_val>
-            <right_val>0.5439859032630920</right_val></_></_>
-        <_>
-          <!-- tree 23 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>9 7 3 3 -1.</_>
-                <_>10 7 1 3 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>0.0149016501381993</threshold>
-            <left_val>0.4886212050914764</left_val>
-            <right_val>0.7687569856643677</right_val></_></_>
-        <_>
-          <!-- tree 24 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>6 12 2 4 -1.</_>
-                <_>6 14 2 2 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>6.1594118596985936e-004</threshold>
-            <left_val>0.5356813073158264</left_val>
-            <right_val>0.3240939080715179</right_val></_></_>
-        <_>
-          <!-- tree 25 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>10 12 7 6 -1.</_>
-                <_>10 14 7 2 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-0.0506709888577461</threshold>
-            <left_val>0.1848621964454651</left_val>
-            <right_val>0.5230404138565064</right_val></_></_>
-        <_>
-          <!-- tree 26 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>1 0 15 2 -1.</_>
-                <_>1 1 15 1 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>6.8665749859064817e-004</threshold>
-            <left_val>0.3840579986572266</left_val>
-            <right_val>0.5517945885658264</right_val></_></_>
-        <_>
-          <!-- tree 27 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>14 0 6 6 -1.</_>
-                <_>14 0 3 6 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>8.3712432533502579e-003</threshold>
-            <left_val>0.4288564026355743</left_val>
-            <right_val>0.6131753921508789</right_val></_></_>
-        <_>
-          <!-- tree 28 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>5 3 3 1 -1.</_>
-                <_>6 3 1 1 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-1.2953069526702166e-003</threshold>
-            <left_val>0.2913674116134644</left_val>
-            <right_val>0.5280737876892090</right_val></_></_>
-        <_>
-          <!-- tree 29 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>14 0 6 6 -1.</_>
-                <_>14 0 3 6 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-0.0419416800141335</threshold>
-            <left_val>0.7554799914360046</left_val>
-            <right_val>0.4856030941009522</right_val></_></_>
-        <_>
-          <!-- tree 30 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>0 3 20 10 -1.</_>
-                <_>0 8 20 5 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-0.0235293805599213</threshold>
-            <left_val>0.2838279902935028</left_val>
-            <right_val>0.5256081223487854</right_val></_></_>
-        <_>
-          <!-- tree 31 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>14 0 6 6 -1.</_>
-                <_>14 0 3 6 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>0.0408574491739273</threshold>
-            <left_val>0.4870935082435608</left_val>
-            <right_val>0.6277297139167786</right_val></_></_>
-        <_>
-          <!-- tree 32 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>0 0 6 6 -1.</_>
-                <_>3 0 3 6 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-0.0254068691283464</threshold>
-            <left_val>0.7099707722663879</left_val>
-            <right_val>0.4575029015541077</right_val></_></_>
-        <_>
-          <!-- tree 33 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>19 15 1 2 -1.</_>
-                <_>19 16 1 1 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-4.1415440500713885e-004</threshold>
-            <left_val>0.4030886888504028</left_val>
-            <right_val>0.5469412207603455</right_val></_></_>
-        <_>
-          <!-- tree 34 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>0 2 4 8 -1.</_>
-                <_>2 2 2 8 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>0.0218241196125746</threshold>
-            <left_val>0.4502024054527283</left_val>
-            <right_val>0.6768701076507568</right_val></_></_>
-        <_>
-          <!-- tree 35 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>2 1 18 4 -1.</_>
-                <_>11 1 9 2 2.</_>
-                <_>2 3 9 2 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>0.0141140399500728</threshold>
-            <left_val>0.5442860722541809</left_val>
-            <right_val>0.3791700005531311</right_val></_></_>
-        <_>
-          <!-- tree 36 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>8 12 1 2 -1.</_>
-                <_>8 13 1 1 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>6.7214590671937913e-005</threshold>
-            <left_val>0.4200463891029358</left_val>
-            <right_val>0.5873476266860962</right_val></_></_>
-        <_>
-          <!-- tree 37 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>5 2 10 6 -1.</_>
-                <_>10 2 5 3 2.</_>
-                <_>5 5 5 3 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-7.9417638480663300e-003</threshold>
-            <left_val>0.3792561888694763</left_val>
-            <right_val>0.5585265755653381</right_val></_></_>
-        <_>
-          <!-- tree 38 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>9 7 2 4 -1.</_>
-                <_>10 7 1 4 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-7.2144409641623497e-003</threshold>
-            <left_val>0.7253103852272034</left_val>
-            <right_val>0.4603548943996429</right_val></_></_>
-        <_>
-          <!-- tree 39 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>9 7 3 3 -1.</_>
-                <_>10 7 1 3 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>2.5817339774221182e-003</threshold>
-            <left_val>0.4693301916122437</left_val>
-            <right_val>0.5900238752365112</right_val></_></_>
-        <_>
-          <!-- tree 40 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>4 5 12 8 -1.</_>
-                <_>8 5 4 8 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>0.1340931951999664</threshold>
-            <left_val>0.5149213075637817</left_val>
-            <right_val>0.1808844953775406</right_val></_></_>
-        <_>
-          <!-- tree 41 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>15 15 4 3 -1.</_>
-                <_>15 16 4 1 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>2.2962710354477167e-003</threshold>
-            <left_val>0.5399743914604187</left_val>
-            <right_val>0.3717867136001587</right_val></_></_>
-        <_>
-          <!-- tree 42 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>8 18 3 1 -1.</_>
-                <_>9 18 1 1 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-2.1575849968940020e-003</threshold>
-            <left_val>0.2408495992422104</left_val>
-            <right_val>0.5148863792419434</right_val></_></_>
-        <_>
-          <!-- tree 43 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>9 13 4 3 -1.</_>
-                <_>9 14 4 1 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-4.9196188338100910e-003</threshold>
-            <left_val>0.6573588252067566</left_val>
-            <right_val>0.4738740026950836</right_val></_></_>
-        <_>
-          <!-- tree 44 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>7 13 4 3 -1.</_>
-                <_>7 14 4 1 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>1.6267469618469477e-003</threshold>
-            <left_val>0.4192821979522705</left_val>
-            <right_val>0.6303114295005798</right_val></_></_>
-        <_>
-          <!-- tree 45 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>19 15 1 2 -1.</_>
-                <_>19 16 1 1 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>3.3413388882763684e-004</threshold>
-            <left_val>0.5540298223495483</left_val>
-            <right_val>0.3702101111412048</right_val></_></_>
-        <_>
-          <!-- tree 46 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>0 15 8 4 -1.</_>
-                <_>0 17 8 2 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-0.0266980808228254</threshold>
-            <left_val>0.1710917949676514</left_val>
-            <right_val>0.5101410746574402</right_val></_></_>
-        <_>
-          <!-- tree 47 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>9 3 6 4 -1.</_>
-                <_>11 3 2 4 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-0.0305618792772293</threshold>
-            <left_val>0.1904218047857285</left_val>
-            <right_val>0.5168793797492981</right_val></_></_>
-        <_>
-          <!-- tree 48 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>8 14 4 3 -1.</_>
-                <_>8 15 4 1 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>2.8511548880487680e-003</threshold>
-            <left_val>0.4447506964206696</left_val>
-            <right_val>0.6313853859901428</right_val></_></_>
-        <_>
-          <!-- tree 49 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>3 14 14 6 -1.</_>
-                <_>3 16 14 2 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-0.0362114794552326</threshold>
-            <left_val>0.2490727007389069</left_val>
-            <right_val>0.5377349257469177</right_val></_></_>
-        <_>
-          <!-- tree 50 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>6 3 6 6 -1.</_>
-                <_>6 6 6 3 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-2.4115189444273710e-003</threshold>
-            <left_val>0.5381243228912354</left_val>
-            <right_val>0.3664236962795258</right_val></_></_>
-        <_>
-          <!-- tree 51 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>5 11 10 6 -1.</_>
-                <_>5 14 10 3 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-7.7253201743587852e-004</threshold>
-            <left_val>0.5530232191085815</left_val>
-            <right_val>0.3541550040245056</right_val></_></_>
-        <_>
-          <!-- tree 52 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>3 10 3 4 -1.</_>
-                <_>4 10 1 4 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>2.9481729143299162e-004</threshold>
-            <left_val>0.4132699072360992</left_val>
-            <right_val>0.5667243003845215</right_val></_></_>
-        <_>
-          <!-- tree 53 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>13 9 2 2 -1.</_>
-                <_>13 9 1 2 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-6.2334560789167881e-003</threshold>
-            <left_val>0.0987872332334518</left_val>
-            <right_val>0.5198668837547302</right_val></_></_>
-        <_>
-          <!-- tree 54 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>5 3 6 4 -1.</_>
-                <_>7 3 2 4 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-0.0262747295200825</threshold>
-            <left_val>0.0911274924874306</left_val>
-            <right_val>0.5028107166290283</right_val></_></_>
-        <_>
-          <!-- tree 55 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>9 7 3 3 -1.</_>
-                <_>10 7 1 3 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>5.3212260827422142e-003</threshold>
-            <left_val>0.4726648926734924</left_val>
-            <right_val>0.6222720742225647</right_val></_></_>
-        <_>
-          <!-- tree 56 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>2 12 2 3 -1.</_>
-                <_>2 13 2 1 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-4.1129058226943016e-003</threshold>
-            <left_val>0.2157457023859024</left_val>
-            <right_val>0.5137804746627808</right_val></_></_>
-        <_>
-          <!-- tree 57 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>9 8 3 12 -1.</_>
-                <_>9 12 3 4 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>3.2457809429615736e-003</threshold>
-            <left_val>0.5410770773887634</left_val>
-            <right_val>0.3721776902675629</right_val></_></_>
-        <_>
-          <!-- tree 58 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>3 14 4 6 -1.</_>
-                <_>3 14 2 3 2.</_>
-                <_>5 17 2 3 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-0.0163597092032433</threshold>
-            <left_val>0.7787874937057495</left_val>
-            <right_val>0.4685291945934296</right_val></_></_>
-        <_>
-          <!-- tree 59 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>16 15 2 2 -1.</_>
-                <_>16 16 2 1 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>3.2166109303943813e-004</threshold>
-            <left_val>0.5478987097740173</left_val>
-            <right_val>0.4240373969078064</right_val></_></_>
-        <_>
-          <!-- tree 60 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>2 15 2 2 -1.</_>
-                <_>2 16 2 1 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>6.4452440710738301e-004</threshold>
-            <left_val>0.5330560803413391</left_val>
-            <right_val>0.3501324951648712</right_val></_></_>
-        <_>
-          <!-- tree 61 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>8 12 4 3 -1.</_>
-                <_>8 13 4 1 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-7.8909732401371002e-003</threshold>
-            <left_val>0.6923521161079407</left_val>
-            <right_val>0.4726569056510925</right_val></_></_>
-        <_>
-          <!-- tree 62 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>0 7 20 1 -1.</_>
-                <_>10 7 10 1 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>0.0483362115919590</threshold>
-            <left_val>0.5055900216102600</left_val>
-            <right_val>0.0757492035627365</right_val></_></_>
-        <_>
-          <!-- tree 63 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>7 6 8 3 -1.</_>
-                <_>7 6 4 3 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-7.5178127735853195e-004</threshold>
-            <left_val>0.3783741891384125</left_val>
-            <right_val>0.5538573861122131</right_val></_></_>
-        <_>
-          <!-- tree 64 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>5 7 8 2 -1.</_>
-                <_>9 7 4 2 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-2.4953910615295172e-003</threshold>
-            <left_val>0.3081651031970978</left_val>
-            <right_val>0.5359612107276917</right_val></_></_>
-        <_>
-          <!-- tree 65 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>9 7 3 5 -1.</_>
-                <_>10 7 1 5 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-2.2385010961443186e-003</threshold>
-            <left_val>0.6633958816528320</left_val>
-            <right_val>0.4649342894554138</right_val></_></_>
-        <_>
-          <!-- tree 66 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>8 7 3 5 -1.</_>
-                <_>9 7 1 5 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-1.7988430336117744e-003</threshold>
-            <left_val>0.6596844792366028</left_val>
-            <right_val>0.4347187876701355</right_val></_></_>
-        <_>
-          <!-- tree 67 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>11 1 3 5 -1.</_>
-                <_>12 1 1 5 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>8.7860915809869766e-003</threshold>
-            <left_val>0.5231832861900330</left_val>
-            <right_val>0.2315579950809479</right_val></_></_>
-        <_>
-          <!-- tree 68 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>6 2 3 6 -1.</_>
-                <_>7 2 1 6 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>3.6715380847454071e-003</threshold>
-            <left_val>0.5204250216484070</left_val>
-            <right_val>0.2977376878261566</right_val></_></_>
-        <_>
-          <!-- tree 69 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>14 14 6 5 -1.</_>
-                <_>14 14 3 5 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-0.0353364497423172</threshold>
-            <left_val>0.7238878011703491</left_val>
-            <right_val>0.4861505031585693</right_val></_></_>
-        <_>
-          <!-- tree 70 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>9 8 2 2 -1.</_>
-                <_>9 9 2 1 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-6.9189240457490087e-004</threshold>
-            <left_val>0.3105022013187408</left_val>
-            <right_val>0.5229824781417847</right_val></_></_>
-        <_>
-          <!-- tree 71 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>10 7 1 3 -1.</_>
-                <_>10 8 1 1 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-3.3946109469980001e-003</threshold>
-            <left_val>0.3138968050479889</left_val>
-            <right_val>0.5210173726081848</right_val></_></_>
-        <_>
-          <!-- tree 72 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>6 6 2 2 -1.</_>
-                <_>6 6 1 1 2.</_>
-                <_>7 7 1 1 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>9.8569283727556467e-004</threshold>
-            <left_val>0.4536580145359039</left_val>
-            <right_val>0.6585097908973694</right_val></_></_>
-        <_>
-          <!-- tree 73 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>2 11 18 4 -1.</_>
-                <_>11 11 9 2 2.</_>
-                <_>2 13 9 2 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-0.0501631014049053</threshold>
-            <left_val>0.1804454028606415</left_val>
-            <right_val>0.5198916792869568</right_val></_></_>
-        <_>
-          <!-- tree 74 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>6 6 2 2 -1.</_>
-                <_>6 6 1 1 2.</_>
-                <_>7 7 1 1 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-2.2367259953171015e-003</threshold>
-            <left_val>0.7255702018737793</left_val>
-            <right_val>0.4651359021663666</right_val></_></_>
-        <_>
-          <!-- tree 75 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>0 15 20 2 -1.</_>
-                <_>0 16 20 1 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>7.4326287722215056e-004</threshold>
-            <left_val>0.4412921071052551</left_val>
-            <right_val>0.5898545980453491</right_val></_></_>
-        <_>
-          <!-- tree 76 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>4 14 2 3 -1.</_>
-                <_>4 15 2 1 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-9.3485182151198387e-004</threshold>
-            <left_val>0.3500052988529205</left_val>
-            <right_val>0.5366017818450928</right_val></_></_>
-        <_>
-          <!-- tree 77 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>8 14 4 3 -1.</_>
-                <_>8 15 4 1 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>0.0174979399889708</threshold>
-            <left_val>0.4912194907665253</left_val>
-            <right_val>0.8315284848213196</right_val></_></_>
-        <_>
-          <!-- tree 78 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>8 7 2 3 -1.</_>
-                <_>8 8 2 1 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-1.5200000489130616e-003</threshold>
-            <left_val>0.3570275902748108</left_val>
-            <right_val>0.5370560288429260</right_val></_></_>
-        <_>
-          <!-- tree 79 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>9 10 2 3 -1.</_>
-                <_>9 11 2 1 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>7.8003940870985389e-004</threshold>
-            <left_val>0.4353772103786469</left_val>
-            <right_val>0.5967335104942322</right_val></_></_></trees>
-      <stage_threshold>39.1072883605957030</stage_threshold>
-      <parent>9</parent>
-      <next>-1</next></_>
-    <_>
-      <!-- stage 11 -->
-      <trees>
-        <_>
-          <!-- tree 0 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>5 4 10 4 -1.</_>
-                <_>5 6 10 2 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-9.9945552647113800e-003</threshold>
-            <left_val>0.6162583231925964</left_val>
-            <right_val>0.3054533004760742</right_val></_></_>
-        <_>
-          <!-- tree 1 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>9 7 6 4 -1.</_>
-                <_>12 7 3 2 2.</_>
-                <_>9 9 3 2 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-1.1085229925811291e-003</threshold>
-            <left_val>0.5818294882774353</left_val>
-            <right_val>0.3155578076839447</right_val></_></_>
-        <_>
-          <!-- tree 2 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>4 7 3 6 -1.</_>
-                <_>4 9 3 2 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>1.0364380432292819e-003</threshold>
-            <left_val>0.2552052140235901</left_val>
-            <right_val>0.5692911744117737</right_val></_></_>
-        <_>
-          <!-- tree 3 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>11 15 4 4 -1.</_>
-                <_>13 15 2 2 2.</_>
-                <_>11 17 2 2 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>6.8211311008781195e-004</threshold>
-            <left_val>0.3685089945793152</left_val>
-            <right_val>0.5934931039810181</right_val></_></_>
-        <_>
-          <!-- tree 4 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>7 8 4 2 -1.</_>
-                <_>7 9 4 1 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-6.8057340104132891e-004</threshold>
-            <left_val>0.2332392036914825</left_val>
-            <right_val>0.5474792122840881</right_val></_></_>
-        <_>
-          <!-- tree 5 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>13 1 4 3 -1.</_>
-                <_>13 1 2 3 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>2.6068789884448051e-004</threshold>
-            <left_val>0.3257457017898560</left_val>
-            <right_val>0.5667545795440674</right_val></_></_>
-        <_>
-          <!-- tree 6 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>5 15 4 4 -1.</_>
-                <_>5 15 2 2 2.</_>
-                <_>7 17 2 2 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>5.1607372006401420e-004</threshold>
-            <left_val>0.3744716942310333</left_val>
-            <right_val>0.5845472812652588</right_val></_></_>
-        <_>
-          <!-- tree 7 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>9 5 4 7 -1.</_>
-                <_>9 5 2 7 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>8.5007521556690335e-004</threshold>
-            <left_val>0.3420371115207672</left_val>
-            <right_val>0.5522807240486145</right_val></_></_>
-        <_>
-          <!-- tree 8 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>5 6 8 3 -1.</_>
-                <_>9 6 4 3 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-1.8607829697430134e-003</threshold>
-            <left_val>0.2804419994354248</left_val>
-            <right_val>0.5375424027442932</right_val></_></_>
-        <_>
-          <!-- tree 9 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>9 9 2 2 -1.</_>
-                <_>9 10 2 1 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-1.5033970121294260e-003</threshold>
-            <left_val>0.2579050958156586</left_val>
-            <right_val>0.5498952269554138</right_val></_></_>
-        <_>
-          <!-- tree 10 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>7 15 5 3 -1.</_>
-                <_>7 16 5 1 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>2.3478909861296415e-003</threshold>
-            <left_val>0.4175156056880951</left_val>
-            <right_val>0.6313710808753967</right_val></_></_>
-        <_>
-          <!-- tree 11 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>11 10 4 3 -1.</_>
-                <_>11 10 2 3 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-2.8880240279249847e-004</threshold>
-            <left_val>0.5865169763565064</left_val>
-            <right_val>0.4052666127681732</right_val></_></_>
-        <_>
-          <!-- tree 12 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>6 9 8 10 -1.</_>
-                <_>6 14 8 5 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>8.9405477046966553e-003</threshold>
-            <left_val>0.5211141109466553</left_val>
-            <right_val>0.2318654060363770</right_val></_></_>
-        <_>
-          <!-- tree 13 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>10 11 6 2 -1.</_>
-                <_>10 11 3 2 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-0.0193277392536402</threshold>
-            <left_val>0.2753432989120483</left_val>
-            <right_val>0.5241525769233704</right_val></_></_>
-        <_>
-          <!-- tree 14 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>4 11 6 2 -1.</_>
-                <_>7 11 3 2 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-2.0202060113660991e-004</threshold>
-            <left_val>0.5722978711128235</left_val>
-            <right_val>0.3677195906639099</right_val></_></_>
-        <_>
-          <!-- tree 15 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>11 3 8 1 -1.</_>
-                <_>11 3 4 1 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>2.1179069299250841e-003</threshold>
-            <left_val>0.4466108083724976</left_val>
-            <right_val>0.5542430877685547</right_val></_></_>
-        <_>
-          <!-- tree 16 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>6 3 3 2 -1.</_>
-                <_>7 3 1 2 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-1.7743760254234076e-003</threshold>
-            <left_val>0.2813253104686737</left_val>
-            <right_val>0.5300959944725037</right_val></_></_>
-        <_>
-          <!-- tree 17 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>14 5 6 5 -1.</_>
-                <_>14 5 3 5 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>4.2234458960592747e-003</threshold>
-            <left_val>0.4399709999561310</left_val>
-            <right_val>0.5795428156852722</right_val></_></_>
-        <_>
-          <!-- tree 18 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>7 5 2 12 -1.</_>
-                <_>7 11 2 6 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-0.0143752200528979</threshold>
-            <left_val>0.2981117963790894</left_val>
-            <right_val>0.5292059183120728</right_val></_></_>
-        <_>
-          <!-- tree 19 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>8 11 4 3 -1.</_>
-                <_>8 12 4 1 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-0.0153491804376245</threshold>
-            <left_val>0.7705215215682983</left_val>
-            <right_val>0.4748171865940094</right_val></_></_>
-        <_>
-          <!-- tree 20 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>4 1 2 3 -1.</_>
-                <_>5 1 1 3 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>1.5152279956964776e-005</threshold>
-            <left_val>0.3718844056129456</left_val>
-            <right_val>0.5576897263526917</right_val></_></_>
-        <_>
-          <!-- tree 21 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>18 3 2 6 -1.</_>
-                <_>18 5 2 2 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-9.1293919831514359e-003</threshold>
-            <left_val>0.3615196049213409</left_val>
-            <right_val>0.5286766886711121</right_val></_></_>
-        <_>
-          <!-- tree 22 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>0 3 2 6 -1.</_>
-                <_>0 5 2 2 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>2.2512159775942564e-003</threshold>
-            <left_val>0.5364704728126526</left_val>
-            <right_val>0.3486298024654388</right_val></_></_>
-        <_>
-          <!-- tree 23 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>9 12 2 3 -1.</_>
-                <_>9 13 2 1 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-4.9696918576955795e-003</threshold>
-            <left_val>0.6927651762962341</left_val>
-            <right_val>0.4676836133003235</right_val></_></_>
-        <_>
-          <!-- tree 24 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>7 13 4 3 -1.</_>
-                <_>7 14 4 1 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-0.0128290103748441</threshold>
-            <left_val>0.7712153792381287</left_val>
-            <right_val>0.4660735130310059</right_val></_></_>
-        <_>
-          <!-- tree 25 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>18 0 2 6 -1.</_>
-                <_>18 2 2 2 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-9.3660065904259682e-003</threshold>
-            <left_val>0.3374983966350555</left_val>
-            <right_val>0.5351287722587585</right_val></_></_>
-        <_>
-          <!-- tree 26 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>0 0 2 6 -1.</_>
-                <_>0 2 2 2 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>3.2452319283038378e-003</threshold>
-            <left_val>0.5325189828872681</left_val>
-            <right_val>0.3289610147476196</right_val></_></_>
-        <_>
-          <!-- tree 27 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>8 14 6 3 -1.</_>
-                <_>8 15 6 1 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-0.0117235602810979</threshold>
-            <left_val>0.6837652921676636</left_val>
-            <right_val>0.4754300117492676</right_val></_></_>
-        <_>
-          <!-- tree 28 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>7 4 2 4 -1.</_>
-                <_>8 4 1 4 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>2.9257940695970319e-005</threshold>
-            <left_val>0.3572087883949280</left_val>
-            <right_val>0.5360502004623413</right_val></_></_>
-        <_>
-          <!-- tree 29 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>8 5 4 6 -1.</_>
-                <_>8 7 4 2 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-2.2244219508138485e-005</threshold>
-            <left_val>0.5541427135467529</left_val>
-            <right_val>0.3552064001560211</right_val></_></_>
-        <_>
-          <!-- tree 30 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>6 4 2 2 -1.</_>
-                <_>7 4 1 2 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>5.0881509669125080e-003</threshold>
-            <left_val>0.5070844292640686</left_val>
-            <right_val>0.1256462037563324</right_val></_></_>
-        <_>
-          <!-- tree 31 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>3 14 14 4 -1.</_>
-                <_>10 14 7 2 2.</_>
-                <_>3 16 7 2 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>0.0274296794086695</threshold>
-            <left_val>0.5269560217857361</left_val>
-            <right_val>0.1625818014144898</right_val></_></_>
-        <_>
-          <!-- tree 32 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>6 15 6 2 -1.</_>
-                <_>6 15 3 1 2.</_>
-                <_>9 16 3 1 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-6.4142867922782898e-003</threshold>
-            <left_val>0.7145588994026184</left_val>
-            <right_val>0.4584197103977203</right_val></_></_>
-        <_>
-          <!-- tree 33 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>14 15 6 2 -1.</_>
-                <_>14 16 6 1 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>3.3479959238320589e-003</threshold>
-            <left_val>0.5398612022399902</left_val>
-            <right_val>0.3494696915149689</right_val></_></_>
-        <_>
-          <!-- tree 34 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>2 12 12 8 -1.</_>
-                <_>2 16 12 4 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-0.0826354920864105</threshold>
-            <left_val>0.2439192980527878</left_val>
-            <right_val>0.5160226225852966</right_val></_></_>
-        <_>
-          <!-- tree 35 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>7 7 7 2 -1.</_>
-                <_>7 8 7 1 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>1.0261740535497665e-003</threshold>
-            <left_val>0.3886891901493073</left_val>
-            <right_val>0.5767908096313477</right_val></_></_>
-        <_>
-          <!-- tree 36 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>0 2 18 2 -1.</_>
-                <_>0 3 18 1 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-1.6307090409100056e-003</threshold>
-            <left_val>0.3389458060264587</left_val>
-            <right_val>0.5347700715065002</right_val></_></_>
-        <_>
-          <!-- tree 37 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>9 6 2 5 -1.</_>
-                <_>9 6 1 5 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>2.4546680506318808e-003</threshold>
-            <left_val>0.4601413905620575</left_val>
-            <right_val>0.6387246847152710</right_val></_></_>
-        <_>
-          <!-- tree 38 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>7 5 3 8 -1.</_>
-                <_>8 5 1 8 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-9.9476519972085953e-004</threshold>
-            <left_val>0.5769879221916199</left_val>
-            <right_val>0.4120396077632904</right_val></_></_>
-        <_>
-          <!-- tree 39 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>9 6 3 4 -1.</_>
-                <_>10 6 1 4 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>0.0154091902077198</threshold>
-            <left_val>0.4878709018230438</left_val>
-            <right_val>0.7089822292327881</right_val></_></_>
-        <_>
-          <!-- tree 40 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>4 13 3 2 -1.</_>
-                <_>4 14 3 1 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>1.1784400558099151e-003</threshold>
-            <left_val>0.5263553261756897</left_val>
-            <right_val>0.2895244956016541</right_val></_></_>
-        <_>
-          <!-- tree 41 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>9 4 6 3 -1.</_>
-                <_>11 4 2 3 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-0.0277019198983908</threshold>
-            <left_val>0.1498828977346420</left_val>
-            <right_val>0.5219606757164002</right_val></_></_>
-        <_>
-          <!-- tree 42 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>5 4 6 3 -1.</_>
-                <_>7 4 2 3 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-0.0295053999871016</threshold>
-            <left_val>0.0248933192342520</left_val>
-            <right_val>0.4999816119670868</right_val></_></_>
-        <_>
-          <!-- tree 43 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>14 11 5 2 -1.</_>
-                <_>14 12 5 1 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>4.5159430010244250e-004</threshold>
-            <left_val>0.5464622974395752</left_val>
-            <right_val>0.4029662907123566</right_val></_></_>
-        <_>
-          <!-- tree 44 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>1 2 6 9 -1.</_>
-                <_>3 2 2 9 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>7.1772639639675617e-003</threshold>
-            <left_val>0.4271056950092316</left_val>
-            <right_val>0.5866296887397766</right_val></_></_>
-        <_>
-          <!-- tree 45 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>14 6 6 13 -1.</_>
-                <_>14 6 3 13 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-0.0741820484399796</threshold>
-            <left_val>0.6874179244041443</left_val>
-            <right_val>0.4919027984142304</right_val></_></_>
-        <_>
-          <!-- tree 46 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>3 6 14 8 -1.</_>
-                <_>3 6 7 4 2.</_>
-                <_>10 10 7 4 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-0.0172541607171297</threshold>
-            <left_val>0.3370676040649414</left_val>
-            <right_val>0.5348739027976990</right_val></_></_>
-        <_>
-          <!-- tree 47 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>16 0 4 11 -1.</_>
-                <_>16 0 2 11 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>0.0148515598848462</threshold>
-            <left_val>0.4626792967319489</left_val>
-            <right_val>0.6129904985427856</right_val></_></_>
-        <_>
-          <!-- tree 48 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>3 4 12 12 -1.</_>
-                <_>3 4 6 6 2.</_>
-                <_>9 10 6 6 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>0.0100020002573729</threshold>
-            <left_val>0.5346122980117798</left_val>
-            <right_val>0.3423453867435455</right_val></_></_>
-        <_>
-          <!-- tree 49 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>11 4 5 3 -1.</_>
-                <_>11 5 5 1 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>2.0138120744377375e-003</threshold>
-            <left_val>0.4643830060958862</left_val>
-            <right_val>0.5824304223060608</right_val></_></_>
-        <_>
-          <!-- tree 50 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>4 11 4 2 -1.</_>
-                <_>4 12 4 1 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>1.5135470312088728e-003</threshold>
-            <left_val>0.5196396112442017</left_val>
-            <right_val>0.2856149971485138</right_val></_></_>
-        <_>
-          <!-- tree 51 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>10 7 2 2 -1.</_>
-                <_>10 7 1 2 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>3.1381431035697460e-003</threshold>
-            <left_val>0.4838162958621979</left_val>
-            <right_val>0.5958529710769653</right_val></_></_>
-        <_>
-          <!-- tree 52 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>8 7 2 2 -1.</_>
-                <_>9 7 1 2 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-5.1450440660119057e-003</threshold>
-            <left_val>0.8920302987098694</left_val>
-            <right_val>0.4741412103176117</right_val></_></_>
-        <_>
-          <!-- tree 53 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>9 17 3 2 -1.</_>
-                <_>10 17 1 2 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-4.4736708514392376e-003</threshold>
-            <left_val>0.2033942937850952</left_val>
-            <right_val>0.5337278842926025</right_val></_></_>
-        <_>
-          <!-- tree 54 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>5 6 3 3 -1.</_>
-                <_>5 7 3 1 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>1.9628470763564110e-003</threshold>
-            <left_val>0.4571633934974670</left_val>
-            <right_val>0.6725863218307495</right_val></_></_>
-        <_>
-          <!-- tree 55 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>10 0 3 3 -1.</_>
-                <_>11 0 1 3 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>5.4260450415313244e-003</threshold>
-            <left_val>0.5271108150482178</left_val>
-            <right_val>0.2845670878887177</right_val></_></_>
-        <_>
-          <!-- tree 56 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>5 6 6 2 -1.</_>
-                <_>5 6 3 1 2.</_>
-                <_>8 7 3 1 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>4.9611460417509079e-004</threshold>
-            <left_val>0.4138312935829163</left_val>
-            <right_val>0.5718597769737244</right_val></_></_>
-        <_>
-          <!-- tree 57 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>12 16 4 3 -1.</_>
-                <_>12 17 4 1 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>9.3728788197040558e-003</threshold>
-            <left_val>0.5225151181221008</left_val>
-            <right_val>0.2804847061634064</right_val></_></_>
-        <_>
-          <!-- tree 58 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>3 12 3 2 -1.</_>
-                <_>3 13 3 1 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>6.0500897234305739e-004</threshold>
-            <left_val>0.5236768722534180</left_val>
-            <right_val>0.3314523994922638</right_val></_></_>
-        <_>
-          <!-- tree 59 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>9 12 3 2 -1.</_>
-                <_>9 13 3 1 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>5.6792551185935736e-004</threshold>
-            <left_val>0.4531059861183167</left_val>
-            <right_val>0.6276971101760864</right_val></_></_>
-        <_>
-          <!-- tree 60 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>1 11 16 4 -1.</_>
-                <_>1 11 8 2 2.</_>
-                <_>9 13 8 2 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>0.0246443394571543</threshold>
-            <left_val>0.5130851864814758</left_val>
-            <right_val>0.2017143964767456</right_val></_></_>
-        <_>
-          <!-- tree 61 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>12 4 3 3 -1.</_>
-                <_>12 5 3 1 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-0.0102904504165053</threshold>
-            <left_val>0.7786595225334168</left_val>
-            <right_val>0.4876641035079956</right_val></_></_>
-        <_>
-          <!-- tree 62 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>4 4 5 3 -1.</_>
-                <_>4 5 5 1 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>2.0629419013857841e-003</threshold>
-            <left_val>0.4288598895072937</left_val>
-            <right_val>0.5881264209747315</right_val></_></_>
-        <_>
-          <!-- tree 63 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>12 16 4 3 -1.</_>
-                <_>12 17 4 1 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-5.0519481301307678e-003</threshold>
-            <left_val>0.3523977994918823</left_val>
-            <right_val>0.5286008715629578</right_val></_></_>
-        <_>
-          <!-- tree 64 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>5 4 3 3 -1.</_>
-                <_>5 5 3 1 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-5.7692620903253555e-003</threshold>
-            <left_val>0.6841086149215698</left_val>
-            <right_val>0.4588094055652618</right_val></_></_>
-        <_>
-          <!-- tree 65 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>9 0 2 2 -1.</_>
-                <_>9 1 2 1 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-4.5789941214025021e-004</threshold>
-            <left_val>0.3565520048141480</left_val>
-            <right_val>0.5485978126525879</right_val></_></_>
-        <_>
-          <!-- tree 66 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>8 9 4 2 -1.</_>
-                <_>8 10 4 1 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-7.5918837683275342e-004</threshold>
-            <left_val>0.3368793129920960</left_val>
-            <right_val>0.5254197120666504</right_val></_></_>
-        <_>
-          <!-- tree 67 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>8 8 4 3 -1.</_>
-                <_>8 9 4 1 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-1.7737259622663260e-003</threshold>
-            <left_val>0.3422161042690277</left_val>
-            <right_val>0.5454015135765076</right_val></_></_>
-        <_>
-          <!-- tree 68 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>0 13 6 3 -1.</_>
-                <_>2 13 2 3 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-8.5610467940568924e-003</threshold>
-            <left_val>0.6533612012863159</left_val>
-            <right_val>0.4485856890678406</right_val></_></_>
-        <_>
-          <!-- tree 69 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>16 14 3 2 -1.</_>
-                <_>16 15 3 1 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>1.7277270089834929e-003</threshold>
-            <left_val>0.5307580232620239</left_val>
-            <right_val>0.3925352990627289</right_val></_></_>
-        <_>
-          <!-- tree 70 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>1 18 18 2 -1.</_>
-                <_>7 18 6 2 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-0.0281996093690395</threshold>
-            <left_val>0.6857458949089050</left_val>
-            <right_val>0.4588584005832672</right_val></_></_>
-        <_>
-          <!-- tree 71 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>16 14 3 2 -1.</_>
-                <_>16 15 3 1 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-1.7781109781935811e-003</threshold>
-            <left_val>0.4037851095199585</left_val>
-            <right_val>0.5369856953620911</right_val></_></_>
-        <_>
-          <!-- tree 72 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>1 14 3 2 -1.</_>
-                <_>1 15 3 1 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>3.3177141449414194e-004</threshold>
-            <left_val>0.5399798750877380</left_val>
-            <right_val>0.3705750107765198</right_val></_></_>
-        <_>
-          <!-- tree 73 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>7 14 6 3 -1.</_>
-                <_>7 15 6 1 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>2.6385399978607893e-003</threshold>
-            <left_val>0.4665437042713165</left_val>
-            <right_val>0.6452730894088745</right_val></_></_>
-        <_>
-          <!-- tree 74 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>5 14 8 3 -1.</_>
-                <_>5 15 8 1 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-2.1183069329708815e-003</threshold>
-            <left_val>0.5914781093597412</left_val>
-            <right_val>0.4064677059650421</right_val></_></_>
-        <_>
-          <!-- tree 75 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>10 6 4 14 -1.</_>
-                <_>10 6 2 14 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-0.0147732896730304</threshold>
-            <left_val>0.3642038106918335</left_val>
-            <right_val>0.5294762849807739</right_val></_></_>
-        <_>
-          <!-- tree 76 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>6 6 4 14 -1.</_>
-                <_>8 6 2 14 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-0.0168154407292604</threshold>
-            <left_val>0.2664231956005096</left_val>
-            <right_val>0.5144972801208496</right_val></_></_>
-        <_>
-          <!-- tree 77 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>13 5 2 3 -1.</_>
-                <_>13 6 2 1 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-6.3370140269398689e-003</threshold>
-            <left_val>0.6779531240463257</left_val>
-            <right_val>0.4852097928524017</right_val></_></_>
-        <_>
-          <!-- tree 78 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>7 16 6 1 -1.</_>
-                <_>9 16 2 1 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-4.4560048991115764e-005</threshold>
-            <left_val>0.5613964796066284</left_val>
-            <right_val>0.4153054058551788</right_val></_></_>
-        <_>
-          <!-- tree 79 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>9 12 3 3 -1.</_>
-                <_>9 13 3 1 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-1.0240620467811823e-003</threshold>
-            <left_val>0.5964478254318237</left_val>
-            <right_val>0.4566304087638855</right_val></_></_>
-        <_>
-          <!-- tree 80 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>7 0 3 3 -1.</_>
-                <_>8 0 1 3 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-2.3161689750850201e-003</threshold>
-            <left_val>0.2976115047931671</left_val>
-            <right_val>0.5188159942626953</right_val></_></_>
-        <_>
-          <!-- tree 81 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>4 0 16 18 -1.</_>
-                <_>4 9 16 9 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>0.5321757197380066</threshold>
-            <left_val>0.5187839269638062</left_val>
-            <right_val>0.2202631980180740</right_val></_></_>
-        <_>
-          <!-- tree 82 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>1 1 16 14 -1.</_>
-                <_>1 8 16 7 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-0.1664305031299591</threshold>
-            <left_val>0.1866022944450378</left_val>
-            <right_val>0.5060343146324158</right_val></_></_>
-        <_>
-          <!-- tree 83 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>3 9 15 4 -1.</_>
-                <_>8 9 5 4 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>0.1125352978706360</threshold>
-            <left_val>0.5212125182151794</left_val>
-            <right_val>0.1185022965073586</right_val></_></_>
-        <_>
-          <!-- tree 84 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>6 12 7 3 -1.</_>
-                <_>6 13 7 1 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>9.3046864494681358e-003</threshold>
-            <left_val>0.4589937031269074</left_val>
-            <right_val>0.6826149225234985</right_val></_></_>
-        <_>
-          <!-- tree 85 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>14 15 2 3 -1.</_>
-                <_>14 16 2 1 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-4.6255099587142467e-003</threshold>
-            <left_val>0.3079940974712372</left_val>
-            <right_val>0.5225008726119995</right_val></_></_>
-        <_>
-          <!-- tree 86 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>2 3 16 14 -1.</_>
-                <_>2 3 8 7 2.</_>
-                <_>10 10 8 7 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-0.1111646965146065</threshold>
-            <left_val>0.2101044058799744</left_val>
-            <right_val>0.5080801844596863</right_val></_></_>
-        <_>
-          <!-- tree 87 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>16 2 4 18 -1.</_>
-                <_>18 2 2 9 2.</_>
-                <_>16 11 2 9 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-0.0108884396031499</threshold>
-            <left_val>0.5765355229377747</left_val>
-            <right_val>0.4790464043617249</right_val></_></_>
-        <_>
-          <!-- tree 88 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>4 15 2 3 -1.</_>
-                <_>4 16 2 1 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>5.8564301580190659e-003</threshold>
-            <left_val>0.5065100193023682</left_val>
-            <right_val>0.1563598960638046</right_val></_></_>
-        <_>
-          <!-- tree 89 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>16 2 4 18 -1.</_>
-                <_>18 2 2 9 2.</_>
-                <_>16 11 2 9 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>0.0548543892800808</threshold>
-            <left_val>0.4966914951801300</left_val>
-            <right_val>0.7230510711669922</right_val></_></_>
-        <_>
-          <!-- tree 90 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>1 1 8 3 -1.</_>
-                <_>1 2 8 1 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-0.0111973397433758</threshold>
-            <left_val>0.2194979041814804</left_val>
-            <right_val>0.5098798274993897</right_val></_></_>
-        <_>
-          <!-- tree 91 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>8 11 4 3 -1.</_>
-                <_>8 12 4 1 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>4.4069071300327778e-003</threshold>
-            <left_val>0.4778401851654053</left_val>
-            <right_val>0.6770902872085571</right_val></_></_>
-        <_>
-          <!-- tree 92 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>5 11 5 9 -1.</_>
-                <_>5 14 5 3 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-0.0636652931571007</threshold>
-            <left_val>0.1936362981796265</left_val>
-            <right_val>0.5081024169921875</right_val></_></_>
-        <_>
-          <!-- tree 93 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>16 0 4 11 -1.</_>
-                <_>16 0 2 11 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-9.8081491887569427e-003</threshold>
-            <left_val>0.5999063253402710</left_val>
-            <right_val>0.4810341000556946</right_val></_></_>
-        <_>
-          <!-- tree 94 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>7 0 6 1 -1.</_>
-                <_>9 0 2 1 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-2.1717099007219076e-003</threshold>
-            <left_val>0.3338333964347839</left_val>
-            <right_val>0.5235472917556763</right_val></_></_>
-        <_>
-          <!-- tree 95 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>16 3 3 7 -1.</_>
-                <_>17 3 1 7 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-0.0133155202493072</threshold>
-            <left_val>0.6617069840431213</left_val>
-            <right_val>0.4919213056564331</right_val></_></_>
-        <_>
-          <!-- tree 96 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>1 3 3 7 -1.</_>
-                <_>2 3 1 7 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>2.5442079640924931e-003</threshold>
-            <left_val>0.4488744139671326</left_val>
-            <right_val>0.6082184910774231</right_val></_></_>
-        <_>
-          <!-- tree 97 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>7 8 6 12 -1.</_>
-                <_>7 12 6 4 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>0.0120378397405148</threshold>
-            <left_val>0.5409392118453980</left_val>
-            <right_val>0.3292432129383087</right_val></_></_>
-        <_>
-          <!-- tree 98 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>0 0 4 11 -1.</_>
-                <_>2 0 2 11 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-0.0207010507583618</threshold>
-            <left_val>0.6819120049476624</left_val>
-            <right_val>0.4594995975494385</right_val></_></_>
-        <_>
-          <!-- tree 99 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>14 0 6 20 -1.</_>
-                <_>14 0 3 20 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>0.0276082791388035</threshold>
-            <left_val>0.4630792140960693</left_val>
-            <right_val>0.5767282843589783</right_val></_></_>
-        <_>
-          <!-- tree 100 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>0 3 1 2 -1.</_>
-                <_>0 4 1 1 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>1.2370620388537645e-003</threshold>
-            <left_val>0.5165379047393799</left_val>
-            <right_val>0.2635016143321991</right_val></_></_>
-        <_>
-          <!-- tree 101 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>5 5 10 8 -1.</_>
-                <_>10 5 5 4 2.</_>
-                <_>5 9 5 4 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-0.0376693382859230</threshold>
-            <left_val>0.2536393105983734</left_val>
-            <right_val>0.5278980135917664</right_val></_></_>
-        <_>
-          <!-- tree 102 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>4 7 12 4 -1.</_>
-                <_>4 7 6 2 2.</_>
-                <_>10 9 6 2 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-1.8057259730994701e-003</threshold>
-            <left_val>0.3985156118869782</left_val>
-            <right_val>0.5517500042915344</right_val></_></_></trees>
-      <stage_threshold>50.6104812622070310</stage_threshold>
-      <parent>10</parent>
-      <next>-1</next></_>
-    <_>
-      <!-- stage 12 -->
-      <trees>
-        <_>
-          <!-- tree 0 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>2 1 6 4 -1.</_>
-                <_>5 1 3 4 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>4.4299028813838959e-003</threshold>
-            <left_val>0.2891018092632294</left_val>
-            <right_val>0.6335226297378540</right_val></_></_>
-        <_>
-          <!-- tree 1 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>9 7 6 4 -1.</_>
-                <_>12 7 3 2 2.</_>
-                <_>9 9 3 2 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-2.3813319858163595e-003</threshold>
-            <left_val>0.6211789250373840</left_val>
-            <right_val>0.3477487862110138</right_val></_></_>
-        <_>
-          <!-- tree 2 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>5 6 2 6 -1.</_>
-                <_>5 9 2 3 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>2.2915711160749197e-003</threshold>
-            <left_val>0.2254412025213242</left_val>
-            <right_val>0.5582118034362793</right_val></_></_>
-        <_>
-          <!-- tree 3 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>9 16 6 4 -1.</_>
-                <_>12 16 3 2 2.</_>
-                <_>9 18 3 2 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>9.9457940086722374e-004</threshold>
-            <left_val>0.3711710870265961</left_val>
-            <right_val>0.5930070877075195</right_val></_></_>
-        <_>
-          <!-- tree 4 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>9 4 2 12 -1.</_>
-                <_>9 10 2 6 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>7.7164667891338468e-004</threshold>
-            <left_val>0.5651720166206360</left_val>
-            <right_val>0.3347995877265930</right_val></_></_>
-        <_>
-          <!-- tree 5 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>7 1 6 18 -1.</_>
-                <_>9 1 2 18 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-1.1386410333216190e-003</threshold>
-            <left_val>0.3069126009941101</left_val>
-            <right_val>0.5508630871772766</right_val></_></_>
-        <_>
-          <!-- tree 6 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>4 12 12 2 -1.</_>
-                <_>8 12 4 2 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-1.6403039626311511e-004</threshold>
-            <left_val>0.5762827992439270</left_val>
-            <right_val>0.3699047863483429</right_val></_></_>
-        <_>
-          <!-- tree 7 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>8 8 6 2 -1.</_>
-                <_>8 9 6 1 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>2.9793529392918572e-005</threshold>
-            <left_val>0.2644244134426117</left_val>
-            <right_val>0.5437911152839661</right_val></_></_>
-        <_>
-          <!-- tree 8 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>8 0 3 6 -1.</_>
-                <_>9 0 1 6 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>8.5774902254343033e-003</threshold>
-            <left_val>0.5051138997077942</left_val>
-            <right_val>0.1795724928379059</right_val></_></_>
-        <_>
-          <!-- tree 9 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>11 18 3 2 -1.</_>
-                <_>11 19 3 1 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-2.6032689493149519e-004</threshold>
-            <left_val>0.5826969146728516</left_val>
-            <right_val>0.4446826875209808</right_val></_></_>
-        <_>
-          <!-- tree 10 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>1 1 17 4 -1.</_>
-                <_>1 3 17 2 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-6.1404630541801453e-003</threshold>
-            <left_val>0.3113852143287659</left_val>
-            <right_val>0.5346971750259399</right_val></_></_>
-        <_>
-          <!-- tree 11 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>11 8 4 12 -1.</_>
-                <_>11 8 2 12 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-0.0230869501829147</threshold>
-            <left_val>0.3277946114540100</left_val>
-            <right_val>0.5331197977066040</right_val></_></_>
-        <_>
-          <!-- tree 12 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>8 14 4 3 -1.</_>
-                <_>8 15 4 1 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-0.0142436502501369</threshold>
-            <left_val>0.7381709814071655</left_val>
-            <right_val>0.4588063061237335</right_val></_></_>
-        <_>
-          <!-- tree 13 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>12 3 2 17 -1.</_>
-                <_>12 3 1 17 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>0.0194871295243502</threshold>
-            <left_val>0.5256630778312683</left_val>
-            <right_val>0.2274471968412399</right_val></_></_>
-        <_>
-          <!-- tree 14 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>4 7 6 1 -1.</_>
-                <_>6 7 2 1 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-9.6681108698248863e-004</threshold>
-            <left_val>0.5511230826377869</left_val>
-            <right_val>0.3815006911754608</right_val></_></_>
-        <_>
-          <!-- tree 15 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>18 3 2 3 -1.</_>
-                <_>18 4 2 1 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>3.1474709976464510e-003</threshold>
-            <left_val>0.5425636768341065</left_val>
-            <right_val>0.2543726861476898</right_val></_></_>
-        <_>
-          <!-- tree 16 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>8 4 3 4 -1.</_>
-                <_>8 6 3 2 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-1.8026070029009134e-004</threshold>
-            <left_val>0.5380191802978516</left_val>
-            <right_val>0.3406304121017456</right_val></_></_>
-        <_>
-          <!-- tree 17 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>4 5 12 10 -1.</_>
-                <_>4 10 12 5 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-6.0266260989010334e-003</threshold>
-            <left_val>0.3035801947116852</left_val>
-            <right_val>0.5420572161674500</right_val></_></_>
-        <_>
-          <!-- tree 18 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>5 18 4 2 -1.</_>
-                <_>7 18 2 2 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>4.4462960795499384e-004</threshold>
-            <left_val>0.3990997076034546</left_val>
-            <right_val>0.5660110116004944</right_val></_></_>
-        <_>
-          <!-- tree 19 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>17 2 3 6 -1.</_>
-                <_>17 4 3 2 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>2.2609760053455830e-003</threshold>
-            <left_val>0.5562806725502014</left_val>
-            <right_val>0.3940688073635101</right_val></_></_>
-        <_>
-          <!-- tree 20 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>7 7 6 6 -1.</_>
-                <_>9 7 2 6 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>0.0511330589652061</threshold>
-            <left_val>0.4609653949737549</left_val>
-            <right_val>0.7118561863899231</right_val></_></_>
-        <_>
-          <!-- tree 21 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>17 2 3 6 -1.</_>
-                <_>17 4 3 2 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-0.0177863091230392</threshold>
-            <left_val>0.2316166013479233</left_val>
-            <right_val>0.5322144031524658</right_val></_></_>
-        <_>
-          <!-- tree 22 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>8 0 3 4 -1.</_>
-                <_>9 0 1 4 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-4.9679628573358059e-003</threshold>
-            <left_val>0.2330771982669830</left_val>
-            <right_val>0.5122029185295105</right_val></_></_>
-        <_>
-          <!-- tree 23 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>9 14 2 3 -1.</_>
-                <_>9 15 2 1 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>2.0667689386755228e-003</threshold>
-            <left_val>0.4657444059848785</left_val>
-            <right_val>0.6455488204956055</right_val></_></_>
-        <_>
-          <!-- tree 24 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>0 12 6 3 -1.</_>
-                <_>0 13 6 1 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>7.4413768015801907e-003</threshold>
-            <left_val>0.5154392123222351</left_val>
-            <right_val>0.2361633926630020</right_val></_></_>
-        <_>
-          <!-- tree 25 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>8 14 4 3 -1.</_>
-                <_>8 15 4 1 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-3.6277279723435640e-003</threshold>
-            <left_val>0.6219773292541504</left_val>
-            <right_val>0.4476661086082459</right_val></_></_>
-        <_>
-          <!-- tree 26 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>3 12 2 3 -1.</_>
-                <_>3 13 2 1 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-5.3530759178102016e-003</threshold>
-            <left_val>0.1837355047464371</left_val>
-            <right_val>0.5102208256721497</right_val></_></_>
-        <_>
-          <!-- tree 27 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>5 6 12 7 -1.</_>
-                <_>9 6 4 7 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>0.1453091949224472</threshold>
-            <left_val>0.5145987272262573</left_val>
-            <right_val>0.1535930931568146</right_val></_></_>
-        <_>
-          <!-- tree 28 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>0 2 3 6 -1.</_>
-                <_>0 4 3 2 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>2.4394490756094456e-003</threshold>
-            <left_val>0.5343660116195679</left_val>
-            <right_val>0.3624661862850189</right_val></_></_>
-        <_>
-          <!-- tree 29 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>14 6 1 3 -1.</_>
-                <_>14 7 1 1 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-3.1283390708267689e-003</threshold>
-            <left_val>0.6215007901191711</left_val>
-            <right_val>0.4845592081546783</right_val></_></_>
-        <_>
-          <!-- tree 30 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>2 0 3 14 -1.</_>
-                <_>3 0 1 14 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>1.7940260004252195e-003</threshold>
-            <left_val>0.4299261868000031</left_val>
-            <right_val>0.5824198126792908</right_val></_></_>
-        <_>
-          <!-- tree 31 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>12 14 5 6 -1.</_>
-                <_>12 16 5 2 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>0.0362538211047649</threshold>
-            <left_val>0.5260334014892578</left_val>
-            <right_val>0.1439467966556549</right_val></_></_>
-        <_>
-          <!-- tree 32 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>4 14 5 6 -1.</_>
-                <_>4 16 5 2 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-5.1746722310781479e-003</threshold>
-            <left_val>0.3506538867950440</left_val>
-            <right_val>0.5287045240402222</right_val></_></_>
-        <_>
-          <!-- tree 33 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>11 10 2 2 -1.</_>
-                <_>12 10 1 1 2.</_>
-                <_>11 11 1 1 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>6.5383297624066472e-004</threshold>
-            <left_val>0.4809640944004059</left_val>
-            <right_val>0.6122040152549744</right_val></_></_>
-        <_>
-          <!-- tree 34 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>5 0 3 14 -1.</_>
-                <_>6 0 1 14 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-0.0264802295714617</threshold>
-            <left_val>0.1139362007379532</left_val>
-            <right_val>0.5045586228370667</right_val></_></_>
-        <_>
-          <!-- tree 35 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>10 15 2 3 -1.</_>
-                <_>10 16 2 1 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-3.0440660193562508e-003</threshold>
-            <left_val>0.6352095007896423</left_val>
-            <right_val>0.4794734120368958</right_val></_></_>
-        <_>
-          <!-- tree 36 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>0 2 2 3 -1.</_>
-                <_>0 3 2 1 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>3.6993520334362984e-003</threshold>
-            <left_val>0.5131118297576904</left_val>
-            <right_val>0.2498510926961899</right_val></_></_>
-        <_>
-          <!-- tree 37 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>5 11 12 6 -1.</_>
-                <_>5 14 12 3 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-3.6762931267730892e-004</threshold>
-            <left_val>0.5421394705772400</left_val>
-            <right_val>0.3709532022476196</right_val></_></_>
-        <_>
-          <!-- tree 38 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>6 11 3 9 -1.</_>
-                <_>6 14 3 3 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-0.0413822606205940</threshold>
-            <left_val>0.1894959956407547</left_val>
-            <right_val>0.5081691741943359</right_val></_></_>
-        <_>
-          <!-- tree 39 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>11 10 2 2 -1.</_>
-                <_>12 10 1 1 2.</_>
-                <_>11 11 1 1 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-1.0532729793339968e-003</threshold>
-            <left_val>0.6454367041587830</left_val>
-            <right_val>0.4783608913421631</right_val></_></_>
-        <_>
-          <!-- tree 40 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>5 6 1 3 -1.</_>
-                <_>5 7 1 1 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-2.1648600231856108e-003</threshold>
-            <left_val>0.6215031147003174</left_val>
-            <right_val>0.4499826133251190</right_val></_></_>
-        <_>
-          <!-- tree 41 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>4 9 13 3 -1.</_>
-                <_>4 10 13 1 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-5.6747748749330640e-004</threshold>
-            <left_val>0.3712610900402069</left_val>
-            <right_val>0.5419334769248962</right_val></_></_>
-        <_>
-          <!-- tree 42 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>1 7 15 6 -1.</_>
-                <_>6 7 5 6 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>0.1737584024667740</threshold>
-            <left_val>0.5023643970489502</left_val>
-            <right_val>0.1215742006897926</right_val></_></_>
-        <_>
-          <!-- tree 43 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>4 5 12 6 -1.</_>
-                <_>8 5 4 6 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-2.9049699660390615e-003</threshold>
-            <left_val>0.3240267932415009</left_val>
-            <right_val>0.5381883978843689</right_val></_></_>
-        <_>
-          <!-- tree 44 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>8 10 4 3 -1.</_>
-                <_>8 11 4 1 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>1.2299539521336555e-003</threshold>
-            <left_val>0.4165507853031158</left_val>
-            <right_val>0.5703486204147339</right_val></_></_>
-        <_>
-          <!-- tree 45 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>15 14 1 3 -1.</_>
-                <_>15 15 1 1 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-5.4329237900674343e-004</threshold>
-            <left_val>0.3854042887687683</left_val>
-            <right_val>0.5547549128532410</right_val></_></_>
-        <_>
-          <!-- tree 46 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>1 11 5 3 -1.</_>
-                <_>1 12 5 1 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-8.3297258242964745e-003</threshold>
-            <left_val>0.2204494029283524</left_val>
-            <right_val>0.5097082853317261</right_val></_></_>
-        <_>
-          <!-- tree 47 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>7 1 7 12 -1.</_>
-                <_>7 7 7 6 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-1.0417630255687982e-004</threshold>
-            <left_val>0.5607066154479981</left_val>
-            <right_val>0.4303036034107208</right_val></_></_>
-        <_>
-          <!-- tree 48 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>0 1 6 10 -1.</_>
-                <_>0 1 3 5 2.</_>
-                <_>3 6 3 5 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>0.0312047004699707</threshold>
-            <left_val>0.4621657133102417</left_val>
-            <right_val>0.6982004046440125</right_val></_></_>
-        <_>
-          <!-- tree 49 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>16 1 4 3 -1.</_>
-                <_>16 2 4 1 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>7.8943502157926559e-003</threshold>
-            <left_val>0.5269594192504883</left_val>
-            <right_val>0.2269068062305450</right_val></_></_>
-        <_>
-          <!-- tree 50 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>5 5 2 3 -1.</_>
-                <_>5 6 2 1 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-4.3645310215651989e-003</threshold>
-            <left_val>0.6359223127365112</left_val>
-            <right_val>0.4537956118583679</right_val></_></_>
-        <_>
-          <!-- tree 51 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>12 2 3 5 -1.</_>
-                <_>13 2 1 5 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>7.6793059706687927e-003</threshold>
-            <left_val>0.5274767875671387</left_val>
-            <right_val>0.2740483880043030</right_val></_></_>
-        <_>
-          <!-- tree 52 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>0 3 4 6 -1.</_>
-                <_>0 5 4 2 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-0.0254311393946409</threshold>
-            <left_val>0.2038519978523254</left_val>
-            <right_val>0.5071732997894287</right_val></_></_>
-        <_>
-          <!-- tree 53 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>8 12 4 2 -1.</_>
-                <_>8 13 4 1 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>8.2000601105391979e-004</threshold>
-            <left_val>0.4587455093860626</left_val>
-            <right_val>0.6119868159294128</right_val></_></_>
-        <_>
-          <!-- tree 54 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>8 18 3 1 -1.</_>
-                <_>9 18 1 1 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>2.9284600168466568e-003</threshold>
-            <left_val>0.5071274042129517</left_val>
-            <right_val>0.2028204947710037</right_val></_></_>
-        <_>
-          <!-- tree 55 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>11 10 2 2 -1.</_>
-                <_>12 10 1 1 2.</_>
-                <_>11 11 1 1 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>4.5256470912136137e-005</threshold>
-            <left_val>0.4812104105949402</left_val>
-            <right_val>0.5430821776390076</right_val></_></_>
-        <_>
-          <!-- tree 56 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>7 10 2 2 -1.</_>
-                <_>7 10 1 1 2.</_>
-                <_>8 11 1 1 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>1.3158309739083052e-003</threshold>
-            <left_val>0.4625813961029053</left_val>
-            <right_val>0.6779323220252991</right_val></_></_>
-        <_>
-          <!-- tree 57 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>11 11 4 4 -1.</_>
-                <_>11 13 4 2 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>1.5870389761403203e-003</threshold>
-            <left_val>0.5386291742324829</left_val>
-            <right_val>0.3431465029716492</right_val></_></_>
-        <_>
-          <!-- tree 58 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>8 12 3 8 -1.</_>
-                <_>9 12 1 8 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-0.0215396601706743</threshold>
-            <left_val>0.0259425006806850</left_val>
-            <right_val>0.5003222823143005</right_val></_></_>
-        <_>
-          <!-- tree 59 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>13 0 6 3 -1.</_>
-                <_>13 1 6 1 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>0.0143344802781940</threshold>
-            <left_val>0.5202844738960266</left_val>
-            <right_val>0.1590632945299149</right_val></_></_>
-        <_>
-          <!-- tree 60 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>8 8 3 4 -1.</_>
-                <_>9 8 1 4 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-8.3881383761763573e-003</threshold>
-            <left_val>0.7282481193542481</left_val>
-            <right_val>0.4648044109344482</right_val></_></_>
-        <_>
-          <!-- tree 61 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>5 7 10 10 -1.</_>
-                <_>10 7 5 5 2.</_>
-                <_>5 12 5 5 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>9.1906841844320297e-003</threshold>
-            <left_val>0.5562356710433960</left_val>
-            <right_val>0.3923191130161285</right_val></_></_>
-        <_>
-          <!-- tree 62 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>3 18 8 2 -1.</_>
-                <_>3 18 4 1 2.</_>
-                <_>7 19 4 1 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-5.8453059755265713e-003</threshold>
-            <left_val>0.6803392767906189</left_val>
-            <right_val>0.4629127979278565</right_val></_></_>
-        <_>
-          <!-- tree 63 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>10 2 6 8 -1.</_>
-                <_>12 2 2 8 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-0.0547077991068363</threshold>
-            <left_val>0.2561671137809753</left_val>
-            <right_val>0.5206125974655151</right_val></_></_>
-        <_>
-          <!-- tree 64 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>4 2 6 8 -1.</_>
-                <_>6 2 2 8 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>9.1142775490880013e-003</threshold>
-            <left_val>0.5189620256423950</left_val>
-            <right_val>0.3053877055644989</right_val></_></_>
-        <_>
-          <!-- tree 65 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>11 0 3 7 -1.</_>
-                <_>12 0 1 7 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-0.0155750000849366</threshold>
-            <left_val>0.1295074969530106</left_val>
-            <right_val>0.5169094800949097</right_val></_></_>
-        <_>
-          <!-- tree 66 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>7 11 2 1 -1.</_>
-                <_>8 11 1 1 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-1.2050600344082341e-004</threshold>
-            <left_val>0.5735098123550415</left_val>
-            <right_val>0.4230825006961823</right_val></_></_>
-        <_>
-          <!-- tree 67 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>15 14 1 3 -1.</_>
-                <_>15 15 1 1 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>1.2273970060050488e-003</threshold>
-            <left_val>0.5289878249168396</left_val>
-            <right_val>0.4079791903495789</right_val></_></_>
-        <_>
-          <!-- tree 68 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>7 15 2 2 -1.</_>
-                <_>7 15 1 1 2.</_>
-                <_>8 16 1 1 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-1.2186600361019373e-003</threshold>
-            <left_val>0.6575639843940735</left_val>
-            <right_val>0.4574409127235413</right_val></_></_>
-        <_>
-          <!-- tree 69 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>15 14 1 3 -1.</_>
-                <_>15 15 1 1 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-3.3256649039685726e-003</threshold>
-            <left_val>0.3628047108650208</left_val>
-            <right_val>0.5195019841194153</right_val></_></_>
-        <_>
-          <!-- tree 70 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>6 0 3 7 -1.</_>
-                <_>7 0 1 7 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-0.0132883097976446</threshold>
-            <left_val>0.1284265965223312</left_val>
-            <right_val>0.5043488740921021</right_val></_></_>
-        <_>
-          <!-- tree 71 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>18 1 2 7 -1.</_>
-                <_>18 1 1 7 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-3.3839771058410406e-003</threshold>
-            <left_val>0.6292240023612976</left_val>
-            <right_val>0.4757505953311920</right_val></_></_>
-        <_>
-          <!-- tree 72 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>2 0 8 20 -1.</_>
-                <_>2 10 8 10 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-0.2195422053337097</threshold>
-            <left_val>0.1487731933593750</left_val>
-            <right_val>0.5065013766288757</right_val></_></_>
-        <_>
-          <!-- tree 73 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>3 0 15 6 -1.</_>
-                <_>3 2 15 2 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>4.9111708067357540e-003</threshold>
-            <left_val>0.4256102144718170</left_val>
-            <right_val>0.5665838718414307</right_val></_></_>
-        <_>
-          <!-- tree 74 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>4 3 12 2 -1.</_>
-                <_>4 4 12 1 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-1.8744950648397207e-004</threshold>
-            <left_val>0.4004144072532654</left_val>
-            <right_val>0.5586857199668884</right_val></_></_>
-        <_>
-          <!-- tree 75 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>16 0 4 5 -1.</_>
-                <_>16 0 2 5 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-5.2178641781210899e-003</threshold>
-            <left_val>0.6009116172790527</left_val>
-            <right_val>0.4812706112861633</right_val></_></_>
-        <_>
-          <!-- tree 76 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>7 0 3 4 -1.</_>
-                <_>8 0 1 4 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-1.1111519997939467e-003</threshold>
-            <left_val>0.3514933884143829</left_val>
-            <right_val>0.5287089943885803</right_val></_></_>
-        <_>
-          <!-- tree 77 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>16 0 4 5 -1.</_>
-                <_>16 0 2 5 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>4.4036400504410267e-003</threshold>
-            <left_val>0.4642275869846344</left_val>
-            <right_val>0.5924085974693298</right_val></_></_>
-        <_>
-          <!-- tree 78 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>1 7 6 13 -1.</_>
-                <_>3 7 2 13 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>0.1229949966073036</threshold>
-            <left_val>0.5025529265403748</left_val>
-            <right_val>0.0691524818539619</right_val></_></_>
-        <_>
-          <!-- tree 79 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>16 0 4 5 -1.</_>
-                <_>16 0 2 5 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-0.0123135102912784</threshold>
-            <left_val>0.5884591937065125</left_val>
-            <right_val>0.4934012889862061</right_val></_></_>
-        <_>
-          <!-- tree 80 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>0 0 4 5 -1.</_>
-                <_>2 0 2 5 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>4.1471039876341820e-003</threshold>
-            <left_val>0.4372239112854004</left_val>
-            <right_val>0.5893477797508240</right_val></_></_>
-        <_>
-          <!-- tree 81 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>14 12 3 6 -1.</_>
-                <_>14 14 3 2 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-3.5502649843692780e-003</threshold>
-            <left_val>0.4327551126480103</left_val>
-            <right_val>0.5396270155906677</right_val></_></_>
-        <_>
-          <!-- tree 82 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>3 12 3 6 -1.</_>
-                <_>3 14 3 2 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-0.0192242693156004</threshold>
-            <left_val>0.1913134008646011</left_val>
-            <right_val>0.5068330764770508</right_val></_></_>
-        <_>
-          <!-- tree 83 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>16 1 4 3 -1.</_>
-                <_>16 2 4 1 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>1.4395059552043676e-003</threshold>
-            <left_val>0.5308178067207336</left_val>
-            <right_val>0.4243533015251160</right_val></_></_>
-        <_>
-          <!-- tree 84 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>8 7 2 10 -1.</_>
-                <_>8 7 1 5 2.</_>
-                <_>9 12 1 5 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-6.7751999013125896e-003</threshold>
-            <left_val>0.6365395784378052</left_val>
-            <right_val>0.4540086090564728</right_val></_></_>
-        <_>
-          <!-- tree 85 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>11 11 4 4 -1.</_>
-                <_>11 13 4 2 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>7.0119630545377731e-003</threshold>
-            <left_val>0.5189834237098694</left_val>
-            <right_val>0.3026199936866760</right_val></_></_>
-        <_>
-          <!-- tree 86 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>0 1 4 3 -1.</_>
-                <_>0 2 4 1 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>5.4014651104807854e-003</threshold>
-            <left_val>0.5105062127113342</left_val>
-            <right_val>0.2557682991027832</right_val></_></_>
-        <_>
-          <!-- tree 87 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>13 4 1 3 -1.</_>
-                <_>13 5 1 1 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>9.0274988906458020e-004</threshold>
-            <left_val>0.4696914851665497</left_val>
-            <right_val>0.5861827731132507</right_val></_></_>
-        <_>
-          <!-- tree 88 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>7 15 3 5 -1.</_>
-                <_>8 15 1 5 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>0.0114744501188397</threshold>
-            <left_val>0.5053645968437195</left_val>
-            <right_val>0.1527177989482880</right_val></_></_>
-        <_>
-          <!-- tree 89 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>9 7 3 5 -1.</_>
-                <_>10 7 1 5 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-6.7023430019617081e-003</threshold>
-            <left_val>0.6508980989456177</left_val>
-            <right_val>0.4890604019165039</right_val></_></_>
-        <_>
-          <!-- tree 90 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>8 7 3 5 -1.</_>
-                <_>9 7 1 5 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-2.0462959073483944e-003</threshold>
-            <left_val>0.6241816878318787</left_val>
-            <right_val>0.4514600038528442</right_val></_></_>
-        <_>
-          <!-- tree 91 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>10 6 4 14 -1.</_>
-                <_>10 6 2 14 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-9.9951568990945816e-003</threshold>
-            <left_val>0.3432781100273132</left_val>
-            <right_val>0.5400953888893127</right_val></_></_>
-        <_>
-          <!-- tree 92 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>0 5 5 6 -1.</_>
-                <_>0 7 5 2 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-0.0357007086277008</threshold>
-            <left_val>0.1878059059381485</left_val>
-            <right_val>0.5074077844619751</right_val></_></_>
-        <_>
-          <!-- tree 93 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>9 5 6 4 -1.</_>
-                <_>9 5 3 4 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>4.5584561303257942e-004</threshold>
-            <left_val>0.3805277049541473</left_val>
-            <right_val>0.5402569770812988</right_val></_></_>
-        <_>
-          <!-- tree 94 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>0 0 18 10 -1.</_>
-                <_>6 0 6 10 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-0.0542606003582478</threshold>
-            <left_val>0.6843714714050293</left_val>
-            <right_val>0.4595097005367279</right_val></_></_>
-        <_>
-          <!-- tree 95 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>10 6 4 14 -1.</_>
-                <_>10 6 2 14 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>6.0600461438298225e-003</threshold>
-            <left_val>0.5502905249595642</left_val>
-            <right_val>0.4500527977943420</right_val></_></_>
-        <_>
-          <!-- tree 96 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>6 6 4 14 -1.</_>
-                <_>8 6 2 14 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-6.4791832119226456e-003</threshold>
-            <left_val>0.3368858098983765</left_val>
-            <right_val>0.5310757160186768</right_val></_></_>
-        <_>
-          <!-- tree 97 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>13 4 1 3 -1.</_>
-                <_>13 5 1 1 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-1.4939469983801246e-003</threshold>
-            <left_val>0.6487640142440796</left_val>
-            <right_val>0.4756175875663757</right_val></_></_>
-        <_>
-          <!-- tree 98 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>5 1 2 3 -1.</_>
-                <_>6 1 1 3 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>1.4610530342906713e-005</threshold>
-            <left_val>0.4034579098224640</left_val>
-            <right_val>0.5451064109802246</right_val></_></_>
-        <_>
-          <!-- tree 99 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>18 1 2 18 -1.</_>
-                <_>19 1 1 9 2.</_>
-                <_>18 10 1 9 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-7.2321938350796700e-003</threshold>
-            <left_val>0.6386873722076416</left_val>
-            <right_val>0.4824739992618561</right_val></_></_>
-        <_>
-          <!-- tree 100 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>2 1 4 3 -1.</_>
-                <_>2 2 4 1 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-4.0645818226039410e-003</threshold>
-            <left_val>0.2986421883106232</left_val>
-            <right_val>0.5157335996627808</right_val></_></_>
-        <_>
-          <!-- tree 101 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>18 1 2 18 -1.</_>
-                <_>19 1 1 9 2.</_>
-                <_>18 10 1 9 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>0.0304630808532238</threshold>
-            <left_val>0.5022199749946594</left_val>
-            <right_val>0.7159956097602844</right_val></_></_>
-        <_>
-          <!-- tree 102 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>1 14 4 6 -1.</_>
-                <_>1 14 2 3 2.</_>
-                <_>3 17 2 3 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-8.0544911324977875e-003</threshold>
-            <left_val>0.6492452025413513</left_val>
-            <right_val>0.4619275033473969</right_val></_></_>
-        <_>
-          <!-- tree 103 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>10 11 7 6 -1.</_>
-                <_>10 13 7 2 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>0.0395051389932632</threshold>
-            <left_val>0.5150570869445801</left_val>
-            <right_val>0.2450613975524902</right_val></_></_>
-        <_>
-          <!-- tree 104 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>0 10 6 10 -1.</_>
-                <_>0 10 3 5 2.</_>
-                <_>3 15 3 5 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>8.4530208259820938e-003</threshold>
-            <left_val>0.4573669135570526</left_val>
-            <right_val>0.6394037008285523</right_val></_></_>
-        <_>
-          <!-- tree 105 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>11 0 3 4 -1.</_>
-                <_>12 0 1 4 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-1.1688120430335402e-003</threshold>
-            <left_val>0.3865512013435364</left_val>
-            <right_val>0.5483661293983460</right_val></_></_>
-        <_>
-          <!-- tree 106 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>5 10 5 6 -1.</_>
-                <_>5 13 5 3 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>2.8070670086890459e-003</threshold>
-            <left_val>0.5128579139709473</left_val>
-            <right_val>0.2701480090618134</right_val></_></_>
-        <_>
-          <!-- tree 107 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>14 6 1 8 -1.</_>
-                <_>14 10 1 4 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>4.7365209320560098e-004</threshold>
-            <left_val>0.4051581919193268</left_val>
-            <right_val>0.5387461185455322</right_val></_></_>
-        <_>
-          <!-- tree 108 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>1 7 18 6 -1.</_>
-                <_>1 7 9 3 2.</_>
-                <_>10 10 9 3 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>0.0117410803213716</threshold>
-            <left_val>0.5295950174331665</left_val>
-            <right_val>0.3719413876533508</right_val></_></_>
-        <_>
-          <!-- tree 109 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>9 7 2 2 -1.</_>
-                <_>9 7 1 2 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>3.1833238899707794e-003</threshold>
-            <left_val>0.4789406955242157</left_val>
-            <right_val>0.6895126104354858</right_val></_></_>
-        <_>
-          <!-- tree 110 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>5 9 4 5 -1.</_>
-                <_>7 9 2 5 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>7.0241501089185476e-004</threshold>
-            <left_val>0.5384489297866821</left_val>
-            <right_val>0.3918080925941467</right_val></_></_></trees>
-      <stage_threshold>54.6200714111328130</stage_threshold>
-      <parent>11</parent>
-      <next>-1</next></_>
-    <_>
-      <!-- stage 13 -->
-      <trees>
-        <_>
-          <!-- tree 0 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>7 6 6 3 -1.</_>
-                <_>9 6 2 3 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>0.0170599296689034</threshold>
-            <left_val>0.3948527872562408</left_val>
-            <right_val>0.7142534852027893</right_val></_></_>
-        <_>
-          <!-- tree 1 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>1 0 18 4 -1.</_>
-                <_>7 0 6 4 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>0.0218408405780792</threshold>
-            <left_val>0.3370316028594971</left_val>
-            <right_val>0.6090016961097717</right_val></_></_>
-        <_>
-          <!-- tree 2 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>7 15 2 4 -1.</_>
-                <_>7 17 2 2 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>2.4520049919374287e-004</threshold>
-            <left_val>0.3500576019287109</left_val>
-            <right_val>0.5987902283668518</right_val></_></_>
-        <_>
-          <!-- tree 3 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>1 0 19 9 -1.</_>
-                <_>1 3 19 3 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>8.3272606134414673e-003</threshold>
-            <left_val>0.3267528116703033</left_val>
-            <right_val>0.5697240829467773</right_val></_></_>
-        <_>
-          <!-- tree 4 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>3 7 3 6 -1.</_>
-                <_>3 9 3 2 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>5.7148298947140574e-004</threshold>
-            <left_val>0.3044599890708923</left_val>
-            <right_val>0.5531656742095947</right_val></_></_>
-        <_>
-          <!-- tree 5 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>13 7 4 4 -1.</_>
-                <_>15 7 2 2 2.</_>
-                <_>13 9 2 2 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>6.7373987985774875e-004</threshold>
-            <left_val>0.3650012016296387</left_val>
-            <right_val>0.5672631263732910</right_val></_></_>
-        <_>
-          <!-- tree 6 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>3 7 4 4 -1.</_>
-                <_>3 7 2 2 2.</_>
-                <_>5 9 2 2 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>3.4681590477703139e-005</threshold>
-            <left_val>0.3313541114330292</left_val>
-            <right_val>0.5388727188110352</right_val></_></_>
-        <_>
-          <!-- tree 7 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>9 6 10 8 -1.</_>
-                <_>9 10 10 4 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-5.8563398197293282e-003</threshold>
-            <left_val>0.2697942852973938</left_val>
-            <right_val>0.5498778820037842</right_val></_></_>
-        <_>
-          <!-- tree 8 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>3 8 14 12 -1.</_>
-                <_>3 14 14 6 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>8.5102273151278496e-003</threshold>
-            <left_val>0.5269358158111572</left_val>
-            <right_val>0.2762879133224487</right_val></_></_>
-        <_>
-          <!-- tree 9 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>6 5 10 12 -1.</_>
-                <_>11 5 5 6 2.</_>
-                <_>6 11 5 6 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-0.0698172077536583</threshold>
-            <left_val>0.2909603118896484</left_val>
-            <right_val>0.5259246826171875</right_val></_></_>
-        <_>
-          <!-- tree 10 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>9 11 2 3 -1.</_>
-                <_>9 12 2 1 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-8.6113670840859413e-004</threshold>
-            <left_val>0.5892577171325684</left_val>
-            <right_val>0.4073697924613953</right_val></_></_>
-        <_>
-          <!-- tree 11 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>9 5 6 5 -1.</_>
-                <_>9 5 3 5 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>9.7149249631911516e-004</threshold>
-            <left_val>0.3523564040660858</left_val>
-            <right_val>0.5415862202644348</right_val></_></_>
-        <_>
-          <!-- tree 12 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>9 4 2 4 -1.</_>
-                <_>9 6 2 2 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-1.4727490452060010e-005</threshold>
-            <left_val>0.5423017740249634</left_val>
-            <right_val>0.3503156006336212</right_val></_></_>
-        <_>
-          <!-- tree 13 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>9 5 6 5 -1.</_>
-                <_>9 5 3 5 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>0.0484202913939953</threshold>
-            <left_val>0.5193945765495300</left_val>
-            <right_val>0.3411195874214172</right_val></_></_>
-        <_>
-          <!-- tree 14 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>5 5 6 5 -1.</_>
-                <_>8 5 3 5 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>1.3257140526548028e-003</threshold>
-            <left_val>0.3157769143581390</left_val>
-            <right_val>0.5335376262664795</right_val></_></_>
-        <_>
-          <!-- tree 15 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>11 2 6 1 -1.</_>
-                <_>13 2 2 1 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>1.4922149603080470e-005</threshold>
-            <left_val>0.4451299905776978</left_val>
-            <right_val>0.5536553859710693</right_val></_></_>
-        <_>
-          <!-- tree 16 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>3 2 6 1 -1.</_>
-                <_>5 2 2 1 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-2.7173398993909359e-003</threshold>
-            <left_val>0.3031741976737976</left_val>
-            <right_val>0.5248088836669922</right_val></_></_>
-        <_>
-          <!-- tree 17 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>13 5 2 3 -1.</_>
-                <_>13 6 2 1 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>2.9219500720500946e-003</threshold>
-            <left_val>0.4781453013420105</left_val>
-            <right_val>0.6606041789054871</right_val></_></_>
-        <_>
-          <!-- tree 18 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>0 10 1 4 -1.</_>
-                <_>0 12 1 2 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-1.9804988987743855e-003</threshold>
-            <left_val>0.3186308145523071</left_val>
-            <right_val>0.5287625193595886</right_val></_></_>
-        <_>
-          <!-- tree 19 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>13 5 2 3 -1.</_>
-                <_>13 6 2 1 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-4.0012109093368053e-003</threshold>
-            <left_val>0.6413596868515015</left_val>
-            <right_val>0.4749928116798401</right_val></_></_>
-        <_>
-          <!-- tree 20 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>8 18 3 2 -1.</_>
-                <_>9 18 1 2 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-4.3491991236805916e-003</threshold>
-            <left_val>0.1507498025894165</left_val>
-            <right_val>0.5098996758460999</right_val></_></_>
-        <_>
-          <!-- tree 21 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>6 15 9 2 -1.</_>
-                <_>6 16 9 1 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>1.3490889687091112e-003</threshold>
-            <left_val>0.4316158890724182</left_val>
-            <right_val>0.5881167054176331</right_val></_></_>
-        <_>
-          <!-- tree 22 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>8 14 4 3 -1.</_>
-                <_>8 15 4 1 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>0.0185970701277256</threshold>
-            <left_val>0.4735553860664368</left_val>
-            <right_val>0.9089794158935547</right_val></_></_>
-        <_>
-          <!-- tree 23 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>18 4 2 4 -1.</_>
-                <_>18 6 2 2 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-1.8562379991635680e-003</threshold>
-            <left_val>0.3553189039230347</left_val>
-            <right_val>0.5577837228775024</right_val></_></_>
-        <_>
-          <!-- tree 24 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>5 5 2 3 -1.</_>
-                <_>5 6 2 1 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>2.2940430790185928e-003</threshold>
-            <left_val>0.4500094950199127</left_val>
-            <right_val>0.6580877900123596</right_val></_></_>
-        <_>
-          <!-- tree 25 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>15 16 3 2 -1.</_>
-                <_>15 17 3 1 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>2.9982850537635386e-004</threshold>
-            <left_val>0.5629242062568665</left_val>
-            <right_val>0.3975878953933716</right_val></_></_>
-        <_>
-          <!-- tree 26 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>0 0 3 9 -1.</_>
-                <_>0 3 3 3 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>3.5455459728837013e-003</threshold>
-            <left_val>0.5381547212600708</left_val>
-            <right_val>0.3605485856533051</right_val></_></_>
-        <_>
-          <!-- tree 27 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>9 7 3 3 -1.</_>
-                <_>9 8 3 1 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>9.6104722470045090e-003</threshold>
-            <left_val>0.5255997180938721</left_val>
-            <right_val>0.1796745955944061</right_val></_></_>
-        <_>
-          <!-- tree 28 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>8 7 3 3 -1.</_>
-                <_>8 8 3 1 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-6.2783220782876015e-003</threshold>
-            <left_val>0.2272856980562210</left_val>
-            <right_val>0.5114030241966248</right_val></_></_>
-        <_>
-          <!-- tree 29 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>9 5 2 6 -1.</_>
-                <_>9 5 1 6 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>3.4598479978740215e-003</threshold>
-            <left_val>0.4626308083534241</left_val>
-            <right_val>0.6608219146728516</right_val></_></_>
-        <_>
-          <!-- tree 30 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>8 6 3 4 -1.</_>
-                <_>9 6 1 4 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-1.3112019514665008e-003</threshold>
-            <left_val>0.6317539811134338</left_val>
-            <right_val>0.4436857998371124</right_val></_></_>
-        <_>
-          <!-- tree 31 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>7 6 8 12 -1.</_>
-                <_>11 6 4 6 2.</_>
-                <_>7 12 4 6 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>2.6876179035753012e-003</threshold>
-            <left_val>0.5421109795570374</left_val>
-            <right_val>0.4054022133350372</right_val></_></_>
-        <_>
-          <!-- tree 32 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>5 6 8 12 -1.</_>
-                <_>5 6 4 6 2.</_>
-                <_>9 12 4 6 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>3.9118169806897640e-003</threshold>
-            <left_val>0.5358477830886841</left_val>
-            <right_val>0.3273454904556274</right_val></_></_>
-        <_>
-          <!-- tree 33 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>12 4 3 3 -1.</_>
-                <_>12 5 3 1 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-0.0142064504325390</threshold>
-            <left_val>0.7793576717376709</left_val>
-            <right_val>0.4975781142711639</right_val></_></_>
-        <_>
-          <!-- tree 34 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>2 16 3 2 -1.</_>
-                <_>2 17 3 1 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>7.1705528534948826e-004</threshold>
-            <left_val>0.5297319889068604</left_val>
-            <right_val>0.3560903966426849</right_val></_></_>
-        <_>
-          <!-- tree 35 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>12 4 3 3 -1.</_>
-                <_>12 5 3 1 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>1.6635019565001130e-003</threshold>
-            <left_val>0.4678094089031220</left_val>
-            <right_val>0.5816481709480286</right_val></_></_>
-        <_>
-          <!-- tree 36 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>2 12 6 6 -1.</_>
-                <_>2 14 6 2 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>3.3686188980937004e-003</threshold>
-            <left_val>0.5276734232902527</left_val>
-            <right_val>0.3446420133113861</right_val></_></_>
-        <_>
-          <!-- tree 37 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>7 13 6 3 -1.</_>
-                <_>7 14 6 1 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>0.0127995302900672</threshold>
-            <left_val>0.4834679961204529</left_val>
-            <right_val>0.7472159266471863</right_val></_></_>
-        <_>
-          <!-- tree 38 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>6 14 6 3 -1.</_>
-                <_>6 15 6 1 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>3.3901201095432043e-003</threshold>
-            <left_val>0.4511859118938446</left_val>
-            <right_val>0.6401721239089966</right_val></_></_>
-        <_>
-          <!-- tree 39 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>14 15 5 3 -1.</_>
-                <_>14 16 5 1 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>4.7070779837667942e-003</threshold>
-            <left_val>0.5335658788681030</left_val>
-            <right_val>0.3555220961570740</right_val></_></_>
-        <_>
-          <!-- tree 40 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>5 4 3 3 -1.</_>
-                <_>5 5 3 1 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>1.4819339849054813e-003</threshold>
-            <left_val>0.4250707030296326</left_val>
-            <right_val>0.5772724151611328</right_val></_></_>
-        <_>
-          <!-- tree 41 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>14 15 5 3 -1.</_>
-                <_>14 16 5 1 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-6.9995759986341000e-003</threshold>
-            <left_val>0.3003320097923279</left_val>
-            <right_val>0.5292900204658508</right_val></_></_>
-        <_>
-          <!-- tree 42 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>5 3 6 2 -1.</_>
-                <_>7 3 2 2 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>0.0159390103071928</threshold>
-            <left_val>0.5067319273948669</left_val>
-            <right_val>0.1675581932067871</right_val></_></_>
-        <_>
-          <!-- tree 43 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>8 15 4 3 -1.</_>
-                <_>8 16 4 1 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>7.6377349905669689e-003</threshold>
-            <left_val>0.4795069992542267</left_val>
-            <right_val>0.7085601091384888</right_val></_></_>
-        <_>
-          <!-- tree 44 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>1 15 5 3 -1.</_>
-                <_>1 16 5 1 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>6.7334040068089962e-003</threshold>
-            <left_val>0.5133113265037537</left_val>
-            <right_val>0.2162470072507858</right_val></_></_>
-        <_>
-          <!-- tree 45 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>8 13 4 6 -1.</_>
-                <_>10 13 2 3 2.</_>
-                <_>8 16 2 3 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-0.0128588099032640</threshold>
-            <left_val>0.1938841938972473</left_val>
-            <right_val>0.5251371860504150</right_val></_></_>
-        <_>
-          <!-- tree 46 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>7 8 3 3 -1.</_>
-                <_>8 8 1 3 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-6.2270800117403269e-004</threshold>
-            <left_val>0.5686538219451904</left_val>
-            <right_val>0.4197868108749390</right_val></_></_>
-        <_>
-          <!-- tree 47 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>12 0 5 4 -1.</_>
-                <_>12 2 5 2 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-5.2651681471616030e-004</threshold>
-            <left_val>0.4224168956279755</left_val>
-            <right_val>0.5429695844650269</right_val></_></_>
-        <_>
-          <!-- tree 48 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>0 2 20 2 -1.</_>
-                <_>0 2 10 1 2.</_>
-                <_>10 3 10 1 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>0.0110750999301672</threshold>
-            <left_val>0.5113775134086609</left_val>
-            <right_val>0.2514517903327942</right_val></_></_>
-        <_>
-          <!-- tree 49 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>1 0 18 4 -1.</_>
-                <_>7 0 6 4 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-0.0367282517254353</threshold>
-            <left_val>0.7194662094116211</left_val>
-            <right_val>0.4849618971347809</right_val></_></_>
-        <_>
-          <!-- tree 50 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>4 3 6 1 -1.</_>
-                <_>6 3 2 1 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-2.8207109426148236e-004</threshold>
-            <left_val>0.3840261995792389</left_val>
-            <right_val>0.5394446253776550</right_val></_></_>
-        <_>
-          <!-- tree 51 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>4 18 13 2 -1.</_>
-                <_>4 19 13 1 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-2.7489690110087395e-003</threshold>
-            <left_val>0.5937088727951050</left_val>
-            <right_val>0.4569182097911835</right_val></_></_>
-        <_>
-          <!-- tree 52 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>2 10 3 6 -1.</_>
-                <_>2 12 3 2 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>0.0100475195795298</threshold>
-            <left_val>0.5138576030731201</left_val>
-            <right_val>0.2802298069000244</right_val></_></_>
-        <_>
-          <!-- tree 53 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>14 12 6 8 -1.</_>
-                <_>17 12 3 4 2.</_>
-                <_>14 16 3 4 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-8.1497840583324432e-003</threshold>
-            <left_val>0.6090037226676941</left_val>
-            <right_val>0.4636121094226837</right_val></_></_>
-        <_>
-          <!-- tree 54 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>4 13 10 6 -1.</_>
-                <_>4 13 5 3 2.</_>
-                <_>9 16 5 3 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-6.8833888508379459e-003</threshold>
-            <left_val>0.3458611071109772</left_val>
-            <right_val>0.5254660248756409</right_val></_></_>
-        <_>
-          <!-- tree 55 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>14 12 1 2 -1.</_>
-                <_>14 13 1 1 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-1.4039360394235700e-005</threshold>
-            <left_val>0.5693104267120361</left_val>
-            <right_val>0.4082083106040955</right_val></_></_>
-        <_>
-          <!-- tree 56 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>8 13 4 3 -1.</_>
-                <_>8 14 4 1 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>1.5498419525101781e-003</threshold>
-            <left_val>0.4350537061691284</left_val>
-            <right_val>0.5806517004966736</right_val></_></_>
-        <_>
-          <!-- tree 57 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>14 12 2 2 -1.</_>
-                <_>14 13 2 1 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-6.7841499112546444e-003</threshold>
-            <left_val>0.1468873023986816</left_val>
-            <right_val>0.5182775259017944</right_val></_></_>
-        <_>
-          <!-- tree 58 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>4 12 2 2 -1.</_>
-                <_>4 13 2 1 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>2.1705629478674382e-004</threshold>
-            <left_val>0.5293524265289307</left_val>
-            <right_val>0.3456174135208130</right_val></_></_>
-        <_>
-          <!-- tree 59 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>8 12 9 2 -1.</_>
-                <_>8 13 9 1 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>3.1198898795992136e-004</threshold>
-            <left_val>0.4652450978755951</left_val>
-            <right_val>0.5942413806915283</right_val></_></_>
-        <_>
-          <!-- tree 60 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>9 14 2 3 -1.</_>
-                <_>9 15 2 1 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>5.4507530294358730e-003</threshold>
-            <left_val>0.4653508961200714</left_val>
-            <right_val>0.7024846076965332</right_val></_></_>
-        <_>
-          <!-- tree 61 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>11 10 3 6 -1.</_>
-                <_>11 13 3 3 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-2.5818689027801156e-004</threshold>
-            <left_val>0.5497295260429382</left_val>
-            <right_val>0.3768967092037201</right_val></_></_>
-        <_>
-          <!-- tree 62 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>5 6 9 12 -1.</_>
-                <_>5 12 9 6 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-0.0174425393342972</threshold>
-            <left_val>0.3919087946414948</left_val>
-            <right_val>0.5457497835159302</right_val></_></_>
-        <_>
-          <!-- tree 63 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>11 10 3 6 -1.</_>
-                <_>11 13 3 3 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-0.0453435294330120</threshold>
-            <left_val>0.1631357073783875</left_val>
-            <right_val>0.5154908895492554</right_val></_></_>
-        <_>
-          <!-- tree 64 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>6 10 3 6 -1.</_>
-                <_>6 13 3 3 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>1.9190689781680703e-003</threshold>
-            <left_val>0.5145897865295410</left_val>
-            <right_val>0.2791895866394043</right_val></_></_>
-        <_>
-          <!-- tree 65 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>5 4 11 3 -1.</_>
-                <_>5 5 11 1 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-6.0177869163453579e-003</threshold>
-            <left_val>0.6517636179924011</left_val>
-            <right_val>0.4756332933902741</right_val></_></_>
-        <_>
-          <!-- tree 66 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>7 1 5 10 -1.</_>
-                <_>7 6 5 5 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-4.0720738470554352e-003</threshold>
-            <left_val>0.5514652729034424</left_val>
-            <right_val>0.4092685878276825</right_val></_></_>
-        <_>
-          <!-- tree 67 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>2 8 18 2 -1.</_>
-                <_>2 9 18 1 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>3.9855059003457427e-004</threshold>
-            <left_val>0.3165240883827210</left_val>
-            <right_val>0.5285550951957703</right_val></_></_>
-        <_>
-          <!-- tree 68 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>7 17 5 3 -1.</_>
-                <_>7 18 5 1 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-6.5418570302426815e-003</threshold>
-            <left_val>0.6853377819061279</left_val>
-            <right_val>0.4652808904647827</right_val></_></_>
-        <_>
-          <!-- tree 69 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>5 9 12 1 -1.</_>
-                <_>9 9 4 1 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>3.4845089539885521e-003</threshold>
-            <left_val>0.5484588146209717</left_val>
-            <right_val>0.4502759873867035</right_val></_></_>
-        <_>
-          <!-- tree 70 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>0 14 6 6 -1.</_>
-                <_>0 14 3 3 2.</_>
-                <_>3 17 3 3 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-0.0136967804282904</threshold>
-            <left_val>0.6395779848098755</left_val>
-            <right_val>0.4572555124759674</right_val></_></_>
-        <_>
-          <!-- tree 71 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>5 9 12 1 -1.</_>
-                <_>9 9 4 1 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-0.0173471402376890</threshold>
-            <left_val>0.2751072943210602</left_val>
-            <right_val>0.5181614756584168</right_val></_></_>
-        <_>
-          <!-- tree 72 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>3 9 12 1 -1.</_>
-                <_>7 9 4 1 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-4.0885428898036480e-003</threshold>
-            <left_val>0.3325636088848114</left_val>
-            <right_val>0.5194984078407288</right_val></_></_>
-        <_>
-          <!-- tree 73 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>14 10 6 7 -1.</_>
-                <_>14 10 3 7 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-9.4687901437282562e-003</threshold>
-            <left_val>0.5942280888557434</left_val>
-            <right_val>0.4851819872856140</right_val></_></_>
-        <_>
-          <!-- tree 74 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>1 0 16 2 -1.</_>
-                <_>1 1 16 1 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>1.7084840219467878e-003</threshold>
-            <left_val>0.4167110919952393</left_val>
-            <right_val>0.5519806146621704</right_val></_></_>
-        <_>
-          <!-- tree 75 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>10 9 10 9 -1.</_>
-                <_>10 12 10 3 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>9.4809094443917274e-003</threshold>
-            <left_val>0.5433894991874695</left_val>
-            <right_val>0.4208514988422394</right_val></_></_>
-        <_>
-          <!-- tree 76 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>0 1 10 2 -1.</_>
-                <_>5 1 5 2 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-4.7389650717377663e-003</threshold>
-            <left_val>0.6407189965248108</left_val>
-            <right_val>0.4560655057430267</right_val></_></_>
-        <_>
-          <!-- tree 77 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>17 3 2 3 -1.</_>
-                <_>17 4 2 1 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>6.5761050209403038e-003</threshold>
-            <left_val>0.5214555263519287</left_val>
-            <right_val>0.2258227020502091</right_val></_></_>
-        <_>
-          <!-- tree 78 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>1 3 2 3 -1.</_>
-                <_>1 4 2 1 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-2.1690549328923225e-003</threshold>
-            <left_val>0.3151527941226959</left_val>
-            <right_val>0.5156704783439636</right_val></_></_>
-        <_>
-          <!-- tree 79 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>9 7 3 6 -1.</_>
-                <_>10 7 1 6 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>0.0146601703017950</threshold>
-            <left_val>0.4870837032794952</left_val>
-            <right_val>0.6689941287040710</right_val></_></_>
-        <_>
-          <!-- tree 80 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>6 5 4 3 -1.</_>
-                <_>8 5 2 3 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>1.7231999663636088e-004</threshold>
-            <left_val>0.3569748997688294</left_val>
-            <right_val>0.5251078009605408</right_val></_></_>
-        <_>
-          <!-- tree 81 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>7 5 6 6 -1.</_>
-                <_>9 5 2 6 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-0.0218037609010935</threshold>
-            <left_val>0.8825920820236206</left_val>
-            <right_val>0.4966329932212830</right_val></_></_>
-        <_>
-          <!-- tree 82 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>3 4 12 12 -1.</_>
-                <_>3 4 6 6 2.</_>
-                <_>9 10 6 6 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-0.0947361066937447</threshold>
-            <left_val>0.1446162015199661</left_val>
-            <right_val>0.5061113834381104</right_val></_></_>
-        <_>
-          <!-- tree 83 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>9 2 6 15 -1.</_>
-                <_>11 2 2 15 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>5.5825551971793175e-003</threshold>
-            <left_val>0.5396478772163391</left_val>
-            <right_val>0.4238066077232361</right_val></_></_>
-        <_>
-          <!-- tree 84 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>2 2 6 17 -1.</_>
-                <_>4 2 2 17 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>1.9517090404406190e-003</threshold>
-            <left_val>0.4170410931110382</left_val>
-            <right_val>0.5497786998748779</right_val></_></_>
-        <_>
-          <!-- tree 85 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>14 10 6 7 -1.</_>
-                <_>14 10 3 7 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>0.0121499001979828</threshold>
-            <left_val>0.4698367118835449</left_val>
-            <right_val>0.5664274096488953</right_val></_></_>
-        <_>
-          <!-- tree 86 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>0 10 6 7 -1.</_>
-                <_>3 10 3 7 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-7.5169620104134083e-003</threshold>
-            <left_val>0.6267772912979126</left_val>
-            <right_val>0.4463135898113251</right_val></_></_>
-        <_>
-          <!-- tree 87 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>9 2 6 15 -1.</_>
-                <_>11 2 2 15 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-0.0716679096221924</threshold>
-            <left_val>0.3097011148929596</left_val>
-            <right_val>0.5221003293991089</right_val></_></_>
-        <_>
-          <!-- tree 88 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>5 2 6 15 -1.</_>
-                <_>7 2 2 15 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-0.0882924199104309</threshold>
-            <left_val>0.0811238884925842</left_val>
-            <right_val>0.5006365180015564</right_val></_></_>
-        <_>
-          <!-- tree 89 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>17 9 3 6 -1.</_>
-                <_>17 11 3 2 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>0.0310630798339844</threshold>
-            <left_val>0.5155503749847412</left_val>
-            <right_val>0.1282255947589874</right_val></_></_>
-        <_>
-          <!-- tree 90 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>6 7 6 6 -1.</_>
-                <_>8 7 2 6 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>0.0466218404471874</threshold>
-            <left_val>0.4699777960777283</left_val>
-            <right_val>0.7363960742950440</right_val></_></_>
-        <_>
-          <!-- tree 91 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>1 10 18 6 -1.</_>
-                <_>10 10 9 3 2.</_>
-                <_>1 13 9 3 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-0.0121894897893071</threshold>
-            <left_val>0.3920530080795288</left_val>
-            <right_val>0.5518996715545654</right_val></_></_>
-        <_>
-          <!-- tree 92 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>0 9 10 9 -1.</_>
-                <_>0 12 10 3 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>0.0130161102861166</threshold>
-            <left_val>0.5260658264160156</left_val>
-            <right_val>0.3685136139392853</right_val></_></_>
-        <_>
-          <!-- tree 93 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>8 15 4 3 -1.</_>
-                <_>8 16 4 1 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-3.4952899441123009e-003</threshold>
-            <left_val>0.6339294910430908</left_val>
-            <right_val>0.4716280996799469</right_val></_></_>
-        <_>
-          <!-- tree 94 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>5 12 3 4 -1.</_>
-                <_>5 14 3 2 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-4.4015039748046547e-005</threshold>
-            <left_val>0.5333027243614197</left_val>
-            <right_val>0.3776184916496277</right_val></_></_>
-        <_>
-          <!-- tree 95 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>3 3 16 12 -1.</_>
-                <_>3 9 16 6 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-0.1096649020910263</threshold>
-            <left_val>0.1765342056751251</left_val>
-            <right_val>0.5198346972465515</right_val></_></_>
-        <_>
-          <!-- tree 96 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>1 1 12 12 -1.</_>
-                <_>1 1 6 6 2.</_>
-                <_>7 7 6 6 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-9.0279558207839727e-004</threshold>
-            <left_val>0.5324159860610962</left_val>
-            <right_val>0.3838908076286316</right_val></_></_>
-        <_>
-          <!-- tree 97 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>10 4 2 4 -1.</_>
-                <_>11 4 1 2 2.</_>
-                <_>10 6 1 2 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>7.1126641705632210e-004</threshold>
-            <left_val>0.4647929966449738</left_val>
-            <right_val>0.5755224227905273</right_val></_></_>
-        <_>
-          <!-- tree 98 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>0 9 10 2 -1.</_>
-                <_>0 9 5 1 2.</_>
-                <_>5 10 5 1 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-3.1250279862433672e-003</threshold>
-            <left_val>0.3236708939075470</left_val>
-            <right_val>0.5166770815849304</right_val></_></_>
-        <_>
-          <!-- tree 99 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>9 11 3 3 -1.</_>
-                <_>9 12 3 1 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>2.4144679773598909e-003</threshold>
-            <left_val>0.4787439107894898</left_val>
-            <right_val>0.6459717750549316</right_val></_></_>
-        <_>
-          <!-- tree 100 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>3 12 9 2 -1.</_>
-                <_>3 13 9 1 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>4.4391240226104856e-004</threshold>
-            <left_val>0.4409308135509491</left_val>
-            <right_val>0.6010255813598633</right_val></_></_>
-        <_>
-          <!-- tree 101 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>9 9 2 2 -1.</_>
-                <_>9 10 2 1 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-2.2611189342569560e-004</threshold>
-            <left_val>0.4038113951683044</left_val>
-            <right_val>0.5493255853652954</right_val></_></_></trees>
-      <stage_threshold>50.1697311401367190</stage_threshold>
-      <parent>12</parent>
-      <next>-1</next></_>
-    <_>
-      <!-- stage 14 -->
-      <trees>
-        <_>
-          <!-- tree 0 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>3 4 13 6 -1.</_>
-                <_>3 6 13 2 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-0.0469012893736362</threshold>
-            <left_val>0.6600171923637390</left_val>
-            <right_val>0.3743801116943359</right_val></_></_>
-        <_>
-          <!-- tree 1 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>9 7 6 4 -1.</_>
-                <_>12 7 3 2 2.</_>
-                <_>9 9 3 2 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-1.4568349579349160e-003</threshold>
-            <left_val>0.5783991217613220</left_val>
-            <right_val>0.3437797129154205</right_val></_></_>
-        <_>
-          <!-- tree 2 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>1 0 6 8 -1.</_>
-                <_>4 0 3 8 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>5.5598369799554348e-003</threshold>
-            <left_val>0.3622266948223114</left_val>
-            <right_val>0.5908216238021851</right_val></_></_>
-        <_>
-          <!-- tree 3 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>9 5 2 12 -1.</_>
-                <_>9 11 2 6 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>7.3170487303286791e-004</threshold>
-            <left_val>0.5500419139862061</left_val>
-            <right_val>0.2873558104038239</right_val></_></_>
-        <_>
-          <!-- tree 4 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>4 4 3 10 -1.</_>
-                <_>4 9 3 5 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>1.3318009441718459e-003</threshold>
-            <left_val>0.2673169970512390</left_val>
-            <right_val>0.5431019067764282</right_val></_></_>
-        <_>
-          <!-- tree 5 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>6 17 8 3 -1.</_>
-                <_>6 18 8 1 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>2.4347059661522508e-004</threshold>
-            <left_val>0.3855027854442596</left_val>
-            <right_val>0.5741388797760010</right_val></_></_>
-        <_>
-          <!-- tree 6 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>0 5 10 6 -1.</_>
-                <_>0 7 10 2 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-3.0512469820678234e-003</threshold>
-            <left_val>0.5503209829330444</left_val>
-            <right_val>0.3462845087051392</right_val></_></_>
-        <_>
-          <!-- tree 7 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>13 2 3 2 -1.</_>
-                <_>13 3 3 1 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-6.8657199153676629e-004</threshold>
-            <left_val>0.3291221857070923</left_val>
-            <right_val>0.5429509282112122</right_val></_></_>
-        <_>
-          <!-- tree 8 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>7 5 4 5 -1.</_>
-                <_>9 5 2 5 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>1.4668200165033340e-003</threshold>
-            <left_val>0.3588382005691528</left_val>
-            <right_val>0.5351811051368713</right_val></_></_>
-        <_>
-          <!-- tree 9 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>12 14 3 6 -1.</_>
-                <_>12 16 3 2 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>3.2021870720200241e-004</threshold>
-            <left_val>0.4296841919422150</left_val>
-            <right_val>0.5700234174728394</right_val></_></_>
-        <_>
-          <!-- tree 10 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>1 11 8 2 -1.</_>
-                <_>1 12 8 1 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>7.4122188379988074e-004</threshold>
-            <left_val>0.5282164812088013</left_val>
-            <right_val>0.3366870880126953</right_val></_></_>
-        <_>
-          <!-- tree 11 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>7 13 6 3 -1.</_>
-                <_>7 14 6 1 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>3.8330298848450184e-003</threshold>
-            <left_val>0.4559567868709564</left_val>
-            <right_val>0.6257336139678955</right_val></_></_>
-        <_>
-          <!-- tree 12 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>0 5 3 6 -1.</_>
-                <_>0 7 3 2 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-0.0154564399272203</threshold>
-            <left_val>0.2350116968154907</left_val>
-            <right_val>0.5129452943801880</right_val></_></_>
-        <_>
-          <!-- tree 13 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>13 2 3 2 -1.</_>
-                <_>13 3 3 1 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>2.6796779129654169e-003</threshold>
-            <left_val>0.5329415202140808</left_val>
-            <right_val>0.4155062139034271</right_val></_></_>
-        <_>
-          <!-- tree 14 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>4 14 4 6 -1.</_>
-                <_>4 14 2 3 2.</_>
-                <_>6 17 2 3 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>2.8296569362282753e-003</threshold>
-            <left_val>0.4273087978363037</left_val>
-            <right_val>0.5804538130760193</right_val></_></_>
-        <_>
-          <!-- tree 15 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>13 2 3 2 -1.</_>
-                <_>13 3 3 1 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-3.9444249123334885e-003</threshold>
-            <left_val>0.2912611961364746</left_val>
-            <right_val>0.5202686190605164</right_val></_></_>
-        <_>
-          <!-- tree 16 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>8 2 4 12 -1.</_>
-                <_>8 6 4 4 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>2.7179559692740440e-003</threshold>
-            <left_val>0.5307688117027283</left_val>
-            <right_val>0.3585677146911621</right_val></_></_>
-        <_>
-          <!-- tree 17 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>14 0 6 8 -1.</_>
-                <_>17 0 3 4 2.</_>
-                <_>14 4 3 4 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>5.9077627956867218e-003</threshold>
-            <left_val>0.4703775048255920</left_val>
-            <right_val>0.5941585898399353</right_val></_></_>
-        <_>
-          <!-- tree 18 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>7 17 3 2 -1.</_>
-                <_>8 17 1 2 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-4.2240349575877190e-003</threshold>
-            <left_val>0.2141567021608353</left_val>
-            <right_val>0.5088796019554138</right_val></_></_>
-        <_>
-          <!-- tree 19 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>8 12 4 2 -1.</_>
-                <_>8 13 4 1 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>4.0725888684391975e-003</threshold>
-            <left_val>0.4766413867473602</left_val>
-            <right_val>0.6841061115264893</right_val></_></_>
-        <_>
-          <!-- tree 20 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>6 0 8 12 -1.</_>
-                <_>6 0 4 6 2.</_>
-                <_>10 6 4 6 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>0.0101495301350951</threshold>
-            <left_val>0.5360798835754395</left_val>
-            <right_val>0.3748497068881989</right_val></_></_>
-        <_>
-          <!-- tree 21 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>14 0 2 10 -1.</_>
-                <_>15 0 1 5 2.</_>
-                <_>14 5 1 5 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-1.8864999583456665e-004</threshold>
-            <left_val>0.5720130205154419</left_val>
-            <right_val>0.3853805065155029</right_val></_></_>
-        <_>
-          <!-- tree 22 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>5 3 8 6 -1.</_>
-                <_>5 3 4 3 2.</_>
-                <_>9 6 4 3 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-4.8864358104765415e-003</threshold>
-            <left_val>0.3693122863769531</left_val>
-            <right_val>0.5340958833694458</right_val></_></_>
-        <_>
-          <!-- tree 23 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>14 0 6 10 -1.</_>
-                <_>17 0 3 5 2.</_>
-                <_>14 5 3 5 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>0.0261584799736738</threshold>
-            <left_val>0.4962374866008759</left_val>
-            <right_val>0.6059989929199219</right_val></_></_>
-        <_>
-          <!-- tree 24 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>9 14 1 2 -1.</_>
-                <_>9 15 1 1 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>4.8560759751126170e-004</threshold>
-            <left_val>0.4438945949077606</left_val>
-            <right_val>0.6012468934059143</right_val></_></_>
-        <_>
-          <!-- tree 25 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>15 10 4 3 -1.</_>
-                <_>15 11 4 1 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>0.0112687097862363</threshold>
-            <left_val>0.5244250297546387</left_val>
-            <right_val>0.1840388029813767</right_val></_></_>
-        <_>
-          <!-- tree 26 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>8 14 2 3 -1.</_>
-                <_>8 15 2 1 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-2.8114619199186563e-003</threshold>
-            <left_val>0.6060283780097961</left_val>
-            <right_val>0.4409897029399872</right_val></_></_>
-        <_>
-          <!-- tree 27 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>3 13 14 4 -1.</_>
-                <_>10 13 7 2 2.</_>
-                <_>3 15 7 2 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-5.6112729944288731e-003</threshold>
-            <left_val>0.3891170918941498</left_val>
-            <right_val>0.5589237213134766</right_val></_></_>
-        <_>
-          <!-- tree 28 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>1 10 4 3 -1.</_>
-                <_>1 11 4 1 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>8.5680093616247177e-003</threshold>
-            <left_val>0.5069345831871033</left_val>
-            <right_val>0.2062619030475617</right_val></_></_>
-        <_>
-          <!-- tree 29 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>9 11 6 1 -1.</_>
-                <_>11 11 2 1 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-3.8172779022715986e-004</threshold>
-            <left_val>0.5882201790809631</left_val>
-            <right_val>0.4192610979080200</right_val></_></_>
-        <_>
-          <!-- tree 30 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>5 11 6 1 -1.</_>
-                <_>7 11 2 1 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-1.7680290329735726e-004</threshold>
-            <left_val>0.5533605813980103</left_val>
-            <right_val>0.4003368914127350</right_val></_></_>
-        <_>
-          <!-- tree 31 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>3 5 16 15 -1.</_>
-                <_>3 10 16 5 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>6.5112537704408169e-003</threshold>
-            <left_val>0.3310146927833557</left_val>
-            <right_val>0.5444191098213196</right_val></_></_>
-        <_>
-          <!-- tree 32 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>6 12 4 2 -1.</_>
-                <_>8 12 2 2 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-6.5948683186434209e-005</threshold>
-            <left_val>0.5433831810951233</left_val>
-            <right_val>0.3944905996322632</right_val></_></_>
-        <_>
-          <!-- tree 33 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>4 4 12 10 -1.</_>
-                <_>10 4 6 5 2.</_>
-                <_>4 9 6 5 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>6.9939051754772663e-003</threshold>
-            <left_val>0.5600358247756958</left_val>
-            <right_val>0.4192714095115662</right_val></_></_>
-        <_>
-          <!-- tree 34 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>8 6 3 4 -1.</_>
-                <_>9 6 1 4 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-4.6744439750909805e-003</threshold>
-            <left_val>0.6685466766357422</left_val>
-            <right_val>0.4604960978031158</right_val></_></_>
-        <_>
-          <!-- tree 35 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>8 12 4 8 -1.</_>
-                <_>10 12 2 4 2.</_>
-                <_>8 16 2 4 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>0.0115898502990603</threshold>
-            <left_val>0.5357121229171753</left_val>
-            <right_val>0.2926830053329468</right_val></_></_>
-        <_>
-          <!-- tree 36 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>8 14 4 3 -1.</_>
-                <_>8 15 4 1 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>0.0130078401416540</threshold>
-            <left_val>0.4679817855358124</left_val>
-            <right_val>0.7307463288307190</right_val></_></_>
-        <_>
-          <!-- tree 37 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>12 2 3 2 -1.</_>
-                <_>13 2 1 2 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-1.1008579749614000e-003</threshold>
-            <left_val>0.3937501013278961</left_val>
-            <right_val>0.5415065288543701</right_val></_></_>
-        <_>
-          <!-- tree 38 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>8 15 3 2 -1.</_>
-                <_>8 16 3 1 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>6.0472649056464434e-004</threshold>
-            <left_val>0.4242376089096069</left_val>
-            <right_val>0.5604041218757629</right_val></_></_>
-        <_>
-          <!-- tree 39 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>6 0 9 14 -1.</_>
-                <_>9 0 3 14 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-0.0144948400557041</threshold>
-            <left_val>0.3631210029125214</left_val>
-            <right_val>0.5293182730674744</right_val></_></_>
-        <_>
-          <!-- tree 40 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>9 6 2 3 -1.</_>
-                <_>10 6 1 3 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-5.3056948818266392e-003</threshold>
-            <left_val>0.6860452294349670</left_val>
-            <right_val>0.4621821045875549</right_val></_></_>
-        <_>
-          <!-- tree 41 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>10 8 2 3 -1.</_>
-                <_>10 9 2 1 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-8.1829127157106996e-004</threshold>
-            <left_val>0.3944096863269806</left_val>
-            <right_val>0.5420439243316650</right_val></_></_>
-        <_>
-          <!-- tree 42 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>0 9 4 6 -1.</_>
-                <_>0 11 4 2 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-0.0190775208175182</threshold>
-            <left_val>0.1962621957063675</left_val>
-            <right_val>0.5037891864776611</right_val></_></_>
-        <_>
-          <!-- tree 43 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>6 0 8 2 -1.</_>
-                <_>6 1 8 1 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>3.5549470339901745e-004</threshold>
-            <left_val>0.4086259007453919</left_val>
-            <right_val>0.5613973140716553</right_val></_></_>
-        <_>
-          <!-- tree 44 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>6 14 7 3 -1.</_>
-                <_>6 15 7 1 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>1.9679730758070946e-003</threshold>
-            <left_val>0.4489121139049530</left_val>
-            <right_val>0.5926123261451721</right_val></_></_>
-        <_>
-          <!-- tree 45 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>8 10 8 9 -1.</_>
-                <_>8 13 8 3 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>6.9189141504466534e-003</threshold>
-            <left_val>0.5335925817489624</left_val>
-            <right_val>0.3728385865688324</right_val></_></_>
-        <_>
-          <!-- tree 46 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>5 2 3 2 -1.</_>
-                <_>6 2 1 2 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>2.9872779268771410e-003</threshold>
-            <left_val>0.5111321210861206</left_val>
-            <right_val>0.2975643873214722</right_val></_></_>
-        <_>
-          <!-- tree 47 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>14 1 6 8 -1.</_>
-                <_>17 1 3 4 2.</_>
-                <_>14 5 3 4 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-6.2264618463814259e-003</threshold>
-            <left_val>0.5541489720344544</left_val>
-            <right_val>0.4824537932872772</right_val></_></_>
-        <_>
-          <!-- tree 48 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>0 1 6 8 -1.</_>
-                <_>0 1 3 4 2.</_>
-                <_>3 5 3 4 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>0.0133533002808690</threshold>
-            <left_val>0.4586423933506012</left_val>
-            <right_val>0.6414797902107239</right_val></_></_>
-        <_>
-          <!-- tree 49 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>1 2 18 6 -1.</_>
-                <_>10 2 9 3 2.</_>
-                <_>1 5 9 3 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>0.0335052385926247</threshold>
-            <left_val>0.5392425060272217</left_val>
-            <right_val>0.3429994881153107</right_val></_></_>
-        <_>
-          <!-- tree 50 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>9 3 2 1 -1.</_>
-                <_>10 3 1 1 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-2.5294460356235504e-003</threshold>
-            <left_val>0.1703713983297348</left_val>
-            <right_val>0.5013315081596375</right_val></_></_>
-        <_>
-          <!-- tree 51 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>13 2 4 6 -1.</_>
-                <_>15 2 2 3 2.</_>
-                <_>13 5 2 3 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-1.2801629491150379e-003</threshold>
-            <left_val>0.5305461883544922</left_val>
-            <right_val>0.4697405099868774</right_val></_></_>
-        <_>
-          <!-- tree 52 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>5 4 3 3 -1.</_>
-                <_>5 5 3 1 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>7.0687388069927692e-003</threshold>
-            <left_val>0.4615545868873596</left_val>
-            <right_val>0.6436504721641541</right_val></_></_>
-        <_>
-          <!-- tree 53 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>13 5 1 3 -1.</_>
-                <_>13 6 1 1 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>9.6880499040707946e-004</threshold>
-            <left_val>0.4833599030971527</left_val>
-            <right_val>0.6043894290924072</right_val></_></_>
-        <_>
-          <!-- tree 54 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>2 16 5 3 -1.</_>
-                <_>2 17 5 1 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>3.9647659286856651e-003</threshold>
-            <left_val>0.5187637209892273</left_val>
-            <right_val>0.3231816887855530</right_val></_></_>
-        <_>
-          <!-- tree 55 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>13 2 4 6 -1.</_>
-                <_>15 2 2 3 2.</_>
-                <_>13 5 2 3 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-0.0220577307045460</threshold>
-            <left_val>0.4079256951808929</left_val>
-            <right_val>0.5200980901718140</right_val></_></_>
-        <_>
-          <!-- tree 56 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>3 2 4 6 -1.</_>
-                <_>3 2 2 3 2.</_>
-                <_>5 5 2 3 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-6.6906312713399529e-004</threshold>
-            <left_val>0.5331609249114990</left_val>
-            <right_val>0.3815600872039795</right_val></_></_>
-        <_>
-          <!-- tree 57 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>13 5 1 2 -1.</_>
-                <_>13 6 1 1 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-6.7009328631684184e-004</threshold>
-            <left_val>0.5655422210693359</left_val>
-            <right_val>0.4688901901245117</right_val></_></_>
-        <_>
-          <!-- tree 58 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>5 5 2 2 -1.</_>
-                <_>5 6 2 1 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>7.4284552829340100e-004</threshold>
-            <left_val>0.4534381031990051</left_val>
-            <right_val>0.6287400126457214</right_val></_></_>
-        <_>
-          <!-- tree 59 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>13 9 2 2 -1.</_>
-                <_>13 9 1 2 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>2.2227810695767403e-003</threshold>
-            <left_val>0.5350633263587952</left_val>
-            <right_val>0.3303655982017517</right_val></_></_>
-        <_>
-          <!-- tree 60 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>5 9 2 2 -1.</_>
-                <_>6 9 1 2 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-5.4130521602928638e-003</threshold>
-            <left_val>0.1113687008619309</left_val>
-            <right_val>0.5005434751510620</right_val></_></_>
-        <_>
-          <!-- tree 61 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>13 17 3 2 -1.</_>
-                <_>13 18 3 1 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-1.4520040167553816e-005</threshold>
-            <left_val>0.5628737807273865</left_val>
-            <right_val>0.4325133860111237</right_val></_></_>
-        <_>
-          <!-- tree 62 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>6 16 4 4 -1.</_>
-                <_>6 16 2 2 2.</_>
-                <_>8 18 2 2 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>2.3369169502984732e-004</threshold>
-            <left_val>0.4165835082530975</left_val>
-            <right_val>0.5447791218757629</right_val></_></_>
-        <_>
-          <!-- tree 63 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>9 16 2 3 -1.</_>
-                <_>9 17 2 1 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>4.2894547805190086e-003</threshold>
-            <left_val>0.4860391020774841</left_val>
-            <right_val>0.6778649091720581</right_val></_></_>
-        <_>
-          <!-- tree 64 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>0 13 9 6 -1.</_>
-                <_>0 15 9 2 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>5.9103150852024555e-003</threshold>
-            <left_val>0.5262305140495300</left_val>
-            <right_val>0.3612113893032074</right_val></_></_>
-        <_>
-          <!-- tree 65 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>9 14 2 6 -1.</_>
-                <_>9 17 2 3 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>0.0129005396738648</threshold>
-            <left_val>0.5319377183914185</left_val>
-            <right_val>0.3250288069248200</right_val></_></_>
-        <_>
-          <!-- tree 66 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>9 15 2 3 -1.</_>
-                <_>9 16 2 1 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>4.6982979401946068e-003</threshold>
-            <left_val>0.4618245065212250</left_val>
-            <right_val>0.6665925979614258</right_val></_></_>
-        <_>
-          <!-- tree 67 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>1 10 18 6 -1.</_>
-                <_>1 12 18 2 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>0.0104398597031832</threshold>
-            <left_val>0.5505670905113220</left_val>
-            <right_val>0.3883604109287262</right_val></_></_>
-        <_>
-          <!-- tree 68 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>8 11 4 2 -1.</_>
-                <_>8 12 4 1 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>3.0443191062659025e-003</threshold>
-            <left_val>0.4697853028774262</left_val>
-            <right_val>0.7301844954490662</right_val></_></_>
-        <_>
-          <!-- tree 69 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>7 9 6 2 -1.</_>
-                <_>7 10 6 1 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-6.1593751888722181e-004</threshold>
-            <left_val>0.3830839097499847</left_val>
-            <right_val>0.5464984178543091</right_val></_></_>
-        <_>
-          <!-- tree 70 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>8 8 2 3 -1.</_>
-                <_>8 9 2 1 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-3.4247159492224455e-003</threshold>
-            <left_val>0.2566300034523010</left_val>
-            <right_val>0.5089530944824219</right_val></_></_>
-        <_>
-          <!-- tree 71 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>17 5 3 4 -1.</_>
-                <_>18 5 1 4 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-9.3538565561175346e-003</threshold>
-            <left_val>0.6469966173171997</left_val>
-            <right_val>0.4940795898437500</right_val></_></_>
-        <_>
-          <!-- tree 72 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>1 19 18 1 -1.</_>
-                <_>7 19 6 1 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>0.0523389987647533</threshold>
-            <left_val>0.4745982885360718</left_val>
-            <right_val>0.7878770828247070</right_val></_></_>
-        <_>
-          <!-- tree 73 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>9 0 3 2 -1.</_>
-                <_>10 0 1 2 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>3.5765620414167643e-003</threshold>
-            <left_val>0.5306664705276489</left_val>
-            <right_val>0.2748498022556305</right_val></_></_>
-        <_>
-          <!-- tree 74 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>1 8 1 6 -1.</_>
-                <_>1 10 1 2 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>7.1555317845195532e-004</threshold>
-            <left_val>0.5413125753402710</left_val>
-            <right_val>0.4041908979415894</right_val></_></_>
-        <_>
-          <!-- tree 75 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>12 17 8 3 -1.</_>
-                <_>12 17 4 3 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-0.0105166798457503</threshold>
-            <left_val>0.6158512234687805</left_val>
-            <right_val>0.4815283119678497</right_val></_></_>
-        <_>
-          <!-- tree 76 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>0 5 3 4 -1.</_>
-                <_>1 5 1 4 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>7.7347927726805210e-003</threshold>
-            <left_val>0.4695805907249451</left_val>
-            <right_val>0.7028980851173401</right_val></_></_>
-        <_>
-          <!-- tree 77 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>9 7 2 3 -1.</_>
-                <_>9 8 2 1 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-4.3226778507232666e-003</threshold>
-            <left_val>0.2849566042423248</left_val>
-            <right_val>0.5304684042930603</right_val></_></_>
-        <_>
-          <!-- tree 78 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>7 11 2 2 -1.</_>
-                <_>7 11 1 1 2.</_>
-                <_>8 12 1 1 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-2.5534399319440126e-003</threshold>
-            <left_val>0.7056984901428223</left_val>
-            <right_val>0.4688892066478729</right_val></_></_>
-        <_>
-          <!-- tree 79 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>11 3 2 5 -1.</_>
-                <_>11 3 1 5 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>1.0268510231981054e-004</threshold>
-            <left_val>0.3902932107448578</left_val>
-            <right_val>0.5573464035987854</right_val></_></_>
-        <_>
-          <!-- tree 80 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>7 3 2 5 -1.</_>
-                <_>8 3 1 5 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>7.1395188570022583e-006</threshold>
-            <left_val>0.3684231936931610</left_val>
-            <right_val>0.5263987779617310</right_val></_></_>
-        <_>
-          <!-- tree 81 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>15 13 2 3 -1.</_>
-                <_>15 14 2 1 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-1.6711989883333445e-003</threshold>
-            <left_val>0.3849175870418549</left_val>
-            <right_val>0.5387271046638489</right_val></_></_>
-        <_>
-          <!-- tree 82 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>5 6 2 3 -1.</_>
-                <_>5 7 2 1 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>4.9260449595749378e-003</threshold>
-            <left_val>0.4729771912097931</left_val>
-            <right_val>0.7447251081466675</right_val></_></_>
-        <_>
-          <!-- tree 83 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>4 19 15 1 -1.</_>
-                <_>9 19 5 1 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>4.3908702209591866e-003</threshold>
-            <left_val>0.4809181094169617</left_val>
-            <right_val>0.5591921806335449</right_val></_></_>
-        <_>
-          <!-- tree 84 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>1 19 15 1 -1.</_>
-                <_>6 19 5 1 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-0.0177936293184757</threshold>
-            <left_val>0.6903678178787231</left_val>
-            <right_val>0.4676927030086517</right_val></_></_>
-        <_>
-          <!-- tree 85 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>15 13 2 3 -1.</_>
-                <_>15 14 2 1 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>2.0469669252634048e-003</threshold>
-            <left_val>0.5370690226554871</left_val>
-            <right_val>0.3308162093162537</right_val></_></_>
-        <_>
-          <!-- tree 86 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>5 0 4 15 -1.</_>
-                <_>7 0 2 15 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>0.0298914890736341</threshold>
-            <left_val>0.5139865279197693</left_val>
-            <right_val>0.3309059143066406</right_val></_></_>
-        <_>
-          <!-- tree 87 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>9 6 2 5 -1.</_>
-                <_>9 6 1 5 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>1.5494900289922953e-003</threshold>
-            <left_val>0.4660237133502960</left_val>
-            <right_val>0.6078342795372009</right_val></_></_>
-        <_>
-          <!-- tree 88 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>9 5 2 7 -1.</_>
-                <_>10 5 1 7 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>1.4956969534978271e-003</threshold>
-            <left_val>0.4404835999011993</left_val>
-            <right_val>0.5863919854164124</right_val></_></_>
-        <_>
-          <!-- tree 89 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>16 11 3 3 -1.</_>
-                <_>16 12 3 1 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>9.5885928021743894e-004</threshold>
-            <left_val>0.5435971021652222</left_val>
-            <right_val>0.4208523035049439</right_val></_></_>
-        <_>
-          <!-- tree 90 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>1 11 3 3 -1.</_>
-                <_>1 12 3 1 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>4.9643701640889049e-004</threshold>
-            <left_val>0.5370578169822693</left_val>
-            <right_val>0.4000622034072876</right_val></_></_>
-        <_>
-          <!-- tree 91 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>6 6 8 3 -1.</_>
-                <_>6 7 8 1 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-2.7280810754746199e-003</threshold>
-            <left_val>0.5659412741661072</left_val>
-            <right_val>0.4259642958641052</right_val></_></_>
-        <_>
-          <!-- tree 92 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>0 15 6 2 -1.</_>
-                <_>0 16 6 1 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>2.3026480339467525e-003</threshold>
-            <left_val>0.5161657929420471</left_val>
-            <right_val>0.3350869119167328</right_val></_></_>
-        <_>
-          <!-- tree 93 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>1 0 18 6 -1.</_>
-                <_>7 0 6 6 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>0.2515163123607636</threshold>
-            <left_val>0.4869661927223206</left_val>
-            <right_val>0.7147309780120850</right_val></_></_>
-        <_>
-          <!-- tree 94 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>6 0 3 4 -1.</_>
-                <_>7 0 1 4 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-4.6328022144734859e-003</threshold>
-            <left_val>0.2727448940277100</left_val>
-            <right_val>0.5083789825439453</right_val></_></_>
-        <_>
-          <!-- tree 95 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>14 10 4 10 -1.</_>
-                <_>16 10 2 5 2.</_>
-                <_>14 15 2 5 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-0.0404344908893108</threshold>
-            <left_val>0.6851438879966736</left_val>
-            <right_val>0.5021767020225525</right_val></_></_>
-        <_>
-          <!-- tree 96 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>3 2 3 2 -1.</_>
-                <_>4 2 1 2 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>1.4972220014897175e-005</threshold>
-            <left_val>0.4284465014934540</left_val>
-            <right_val>0.5522555112838745</right_val></_></_>
-        <_>
-          <!-- tree 97 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>11 2 2 2 -1.</_>
-                <_>11 3 2 1 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-2.4050309730228037e-004</threshold>
-            <left_val>0.4226118922233582</left_val>
-            <right_val>0.5390074849128723</right_val></_></_>
-        <_>
-          <!-- tree 98 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>2 10 4 10 -1.</_>
-                <_>2 10 2 5 2.</_>
-                <_>4 15 2 5 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>0.0236578397452831</threshold>
-            <left_val>0.4744631946086884</left_val>
-            <right_val>0.7504366040229797</right_val></_></_>
-        <_>
-          <!-- tree 99 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>0 13 20 6 -1.</_>
-                <_>10 13 10 3 2.</_>
-                <_>0 16 10 3 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-8.1449104472994804e-003</threshold>
-            <left_val>0.4245058894157410</left_val>
-            <right_val>0.5538362860679627</right_val></_></_>
-        <_>
-          <!-- tree 100 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>0 5 2 15 -1.</_>
-                <_>1 5 1 15 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-3.6992130335420370e-003</threshold>
-            <left_val>0.5952357053756714</left_val>
-            <right_val>0.4529713094234467</right_val></_></_>
-        <_>
-          <!-- tree 101 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>1 7 18 4 -1.</_>
-                <_>10 7 9 2 2.</_>
-                <_>1 9 9 2 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-6.7718601785600185e-003</threshold>
-            <left_val>0.4137794077396393</left_val>
-            <right_val>0.5473399758338928</right_val></_></_>
-        <_>
-          <!-- tree 102 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>0 0 2 17 -1.</_>
-                <_>1 0 1 17 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>4.2669530957937241e-003</threshold>
-            <left_val>0.4484114944934845</left_val>
-            <right_val>0.5797994136810303</right_val></_></_>
-        <_>
-          <!-- tree 103 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>2 6 16 6 -1.</_>
-                <_>10 6 8 3 2.</_>
-                <_>2 9 8 3 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>1.7791989957913756e-003</threshold>
-            <left_val>0.5624858736991882</left_val>
-            <right_val>0.4432444870471954</right_val></_></_>
-        <_>
-          <!-- tree 104 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>8 14 1 3 -1.</_>
-                <_>8 15 1 1 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>1.6774770338088274e-003</threshold>
-            <left_val>0.4637751877307892</left_val>
-            <right_val>0.6364241838455200</right_val></_></_>
-        <_>
-          <!-- tree 105 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>8 15 4 2 -1.</_>
-                <_>8 16 4 1 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>1.1732629500329494e-003</threshold>
-            <left_val>0.4544503092765808</left_val>
-            <right_val>0.5914415717124939</right_val></_></_>
-        <_>
-          <!-- tree 106 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>5 2 8 2 -1.</_>
-                <_>5 2 4 1 2.</_>
-                <_>9 3 4 1 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>8.6998171173036098e-004</threshold>
-            <left_val>0.5334752798080444</left_val>
-            <right_val>0.3885917961597443</right_val></_></_>
-        <_>
-          <!-- tree 107 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>6 11 8 6 -1.</_>
-                <_>6 14 8 3 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>7.6378340600058436e-004</threshold>
-            <left_val>0.5398585200309753</left_val>
-            <right_val>0.3744941949844360</right_val></_></_>
-        <_>
-          <!-- tree 108 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>9 13 2 2 -1.</_>
-                <_>9 14 2 1 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>1.5684569370932877e-004</threshold>
-            <left_val>0.4317873120307922</left_val>
-            <right_val>0.5614616274833679</right_val></_></_>
-        <_>
-          <!-- tree 109 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>18 4 2 6 -1.</_>
-                <_>18 6 2 2 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-0.0215113703161478</threshold>
-            <left_val>0.1785925030708313</left_val>
-            <right_val>0.5185542702674866</right_val></_></_>
-        <_>
-          <!-- tree 110 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>9 12 2 2 -1.</_>
-                <_>9 13 2 1 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>1.3081369979772717e-004</threshold>
-            <left_val>0.4342499077320099</left_val>
-            <right_val>0.5682849884033203</right_val></_></_>
-        <_>
-          <!-- tree 111 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>18 4 2 6 -1.</_>
-                <_>18 6 2 2 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>0.0219920407980680</threshold>
-            <left_val>0.5161716938018799</left_val>
-            <right_val>0.2379394024610519</right_val></_></_>
-        <_>
-          <!-- tree 112 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>9 13 1 3 -1.</_>
-                <_>9 14 1 1 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-8.0136500764638186e-004</threshold>
-            <left_val>0.5986763238906860</left_val>
-            <right_val>0.4466426968574524</right_val></_></_>
-        <_>
-          <!-- tree 113 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>18 4 2 6 -1.</_>
-                <_>18 6 2 2 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-8.2736099138855934e-003</threshold>
-            <left_val>0.4108217954635620</left_val>
-            <right_val>0.5251057147979736</right_val></_></_>
-        <_>
-          <!-- tree 114 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>0 4 2 6 -1.</_>
-                <_>0 6 2 2 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>3.6831789184361696e-003</threshold>
-            <left_val>0.5173814296722412</left_val>
-            <right_val>0.3397518098354340</right_val></_></_>
-        <_>
-          <!-- tree 115 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>9 12 3 3 -1.</_>
-                <_>9 13 3 1 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-7.9525681212544441e-003</threshold>
-            <left_val>0.6888983249664307</left_val>
-            <right_val>0.4845924079418182</right_val></_></_>
-        <_>
-          <!-- tree 116 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>3 13 2 3 -1.</_>
-                <_>3 14 2 1 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>1.5382299898192286e-003</threshold>
-            <left_val>0.5178567171096802</left_val>
-            <right_val>0.3454113900661469</right_val></_></_>
-        <_>
-          <!-- tree 117 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>13 13 4 3 -1.</_>
-                <_>13 14 4 1 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-0.0140435304492712</threshold>
-            <left_val>0.1678421050310135</left_val>
-            <right_val>0.5188667774200440</right_val></_></_>
-        <_>
-          <!-- tree 118 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>5 4 3 3 -1.</_>
-                <_>5 5 3 1 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>1.4315890148282051e-003</threshold>
-            <left_val>0.4368256926536560</left_val>
-            <right_val>0.5655773878097534</right_val></_></_>
-        <_>
-          <!-- tree 119 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>5 2 10 6 -1.</_>
-                <_>5 4 10 2 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-0.0340142287313938</threshold>
-            <left_val>0.7802296280860901</left_val>
-            <right_val>0.4959217011928558</right_val></_></_>
-        <_>
-          <!-- tree 120 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>3 13 4 3 -1.</_>
-                <_>3 14 4 1 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-0.0120272999629378</threshold>
-            <left_val>0.1585101038217545</left_val>
-            <right_val>0.5032231807708740</right_val></_></_>
-        <_>
-          <!-- tree 121 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>3 7 15 5 -1.</_>
-                <_>8 7 5 5 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>0.1331661939620972</threshold>
-            <left_val>0.5163304805755615</left_val>
-            <right_val>0.2755128145217896</right_val></_></_>
-        <_>
-          <!-- tree 122 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>3 7 12 2 -1.</_>
-                <_>7 7 4 2 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-1.5221949433907866e-003</threshold>
-            <left_val>0.3728317916393280</left_val>
-            <right_val>0.5214552283287048</right_val></_></_>
-        <_>
-          <!-- tree 123 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>10 3 3 9 -1.</_>
-                <_>11 3 1 9 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-9.3929271679371595e-004</threshold>
-            <left_val>0.5838379263877869</left_val>
-            <right_val>0.4511165022850037</right_val></_></_>
-        <_>
-          <!-- tree 124 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>8 6 4 6 -1.</_>
-                <_>10 6 2 6 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>0.0277197398245335</threshold>
-            <left_val>0.4728286862373352</left_val>
-            <right_val>0.7331544756889343</right_val></_></_>
-        <_>
-          <!-- tree 125 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>9 7 4 3 -1.</_>
-                <_>9 8 4 1 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>3.1030150130391121e-003</threshold>
-            <left_val>0.5302202105522156</left_val>
-            <right_val>0.4101563096046448</right_val></_></_>
-        <_>
-          <!-- tree 126 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>0 9 4 9 -1.</_>
-                <_>2 9 2 9 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>0.0778612196445465</threshold>
-            <left_val>0.4998334050178528</left_val>
-            <right_val>0.1272961944341660</right_val></_></_>
-        <_>
-          <!-- tree 127 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>9 13 3 5 -1.</_>
-                <_>10 13 1 5 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-0.0158549398183823</threshold>
-            <left_val>0.0508333593606949</left_val>
-            <right_val>0.5165656208992004</right_val></_></_>
-        <_>
-          <!-- tree 128 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>7 7 6 3 -1.</_>
-                <_>9 7 2 3 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-4.9725300632417202e-003</threshold>
-            <left_val>0.6798133850097656</left_val>
-            <right_val>0.4684231877326965</right_val></_></_>
-        <_>
-          <!-- tree 129 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>9 7 3 5 -1.</_>
-                <_>10 7 1 5 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-9.7676506265997887e-004</threshold>
-            <left_val>0.6010771989822388</left_val>
-            <right_val>0.4788931906223297</right_val></_></_>
-        <_>
-          <!-- tree 130 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>5 7 8 2 -1.</_>
-                <_>9 7 4 2 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-2.4647710379213095e-003</threshold>
-            <left_val>0.3393397927284241</left_val>
-            <right_val>0.5220503807067871</right_val></_></_>
-        <_>
-          <!-- tree 131 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>5 9 12 2 -1.</_>
-                <_>9 9 4 2 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-6.7937700077891350e-003</threshold>
-            <left_val>0.4365136921405792</left_val>
-            <right_val>0.5239663124084473</right_val></_></_>
-        <_>
-          <!-- tree 132 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>5 6 10 3 -1.</_>
-                <_>10 6 5 3 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>0.0326080210506916</threshold>
-            <left_val>0.5052723884582520</left_val>
-            <right_val>0.2425214946269989</right_val></_></_>
-        <_>
-          <!-- tree 133 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>10 12 3 1 -1.</_>
-                <_>11 12 1 1 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-5.8514421107247472e-004</threshold>
-            <left_val>0.5733973979949951</left_val>
-            <right_val>0.4758574068546295</right_val></_></_>
-        <_>
-          <!-- tree 134 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>0 1 11 15 -1.</_>
-                <_>0 6 11 5 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-0.0296326000243425</threshold>
-            <left_val>0.3892289102077484</left_val>
-            <right_val>0.5263597965240479</right_val></_></_></trees>
-      <stage_threshold>66.6691207885742190</stage_threshold>
-      <parent>13</parent>
-      <next>-1</next></_>
-    <_>
-      <!-- stage 15 -->
-      <trees>
-        <_>
-          <!-- tree 0 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>1 0 18 6 -1.</_>
-                <_>7 0 6 6 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>0.0465508513152599</threshold>
-            <left_val>0.3276950120925903</left_val>
-            <right_val>0.6240522861480713</right_val></_></_>
-        <_>
-          <!-- tree 1 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>7 7 6 1 -1.</_>
-                <_>9 7 2 1 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>7.9537127166986465e-003</threshold>
-            <left_val>0.4256485104560852</left_val>
-            <right_val>0.6942939162254334</right_val></_></_>
-        <_>
-          <!-- tree 2 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>5 16 6 4 -1.</_>
-                <_>5 16 3 2 2.</_>
-                <_>8 18 3 2 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>6.8221561377868056e-004</threshold>
-            <left_val>0.3711487054824829</left_val>
-            <right_val>0.5900732874870300</right_val></_></_>
-        <_>
-          <!-- tree 3 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>6 5 9 8 -1.</_>
-                <_>6 9 9 4 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-1.9348249770700932e-004</threshold>
-            <left_val>0.2041133940219879</left_val>
-            <right_val>0.5300545096397400</right_val></_></_>
-        <_>
-          <!-- tree 4 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>5 10 2 6 -1.</_>
-                <_>5 13 2 3 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-2.6710508973337710e-004</threshold>
-            <left_val>0.5416126251220703</left_val>
-            <right_val>0.3103179037570953</right_val></_></_>
-        <_>
-          <!-- tree 5 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>7 6 8 10 -1.</_>
-                <_>11 6 4 5 2.</_>
-                <_>7 11 4 5 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>2.7818060480058193e-003</threshold>
-            <left_val>0.5277832746505737</left_val>
-            <right_val>0.3467069864273071</right_val></_></_>
-        <_>
-          <!-- tree 6 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>5 6 8 10 -1.</_>
-                <_>5 6 4 5 2.</_>
-                <_>9 11 4 5 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-4.6779078547842801e-004</threshold>
-            <left_val>0.5308231115341187</left_val>
-            <right_val>0.3294492065906525</right_val></_></_>
-        <_>
-          <!-- tree 7 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>9 5 2 2 -1.</_>
-                <_>9 6 2 1 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-3.0335160772665404e-005</threshold>
-            <left_val>0.5773872733116150</left_val>
-            <right_val>0.3852097094058991</right_val></_></_>
-        <_>
-          <!-- tree 8 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>5 12 8 2 -1.</_>
-                <_>5 13 8 1 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>7.8038009814918041e-004</threshold>
-            <left_val>0.4317438900470734</left_val>
-            <right_val>0.6150057911872864</right_val></_></_>
-        <_>
-          <!-- tree 9 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>10 2 8 2 -1.</_>
-                <_>10 3 8 1 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-4.2553851380944252e-003</threshold>
-            <left_val>0.2933903932571411</left_val>
-            <right_val>0.5324292778968811</right_val></_></_>
-        <_>
-          <!-- tree 10 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>4 0 2 10 -1.</_>
-                <_>4 0 1 5 2.</_>
-                <_>5 5 1 5 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-2.4735610350035131e-004</threshold>
-            <left_val>0.5468844771385193</left_val>
-            <right_val>0.3843030035495758</right_val></_></_>
-        <_>
-          <!-- tree 11 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>9 10 2 2 -1.</_>
-                <_>9 11 2 1 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-1.4724259381182492e-004</threshold>
-            <left_val>0.4281542897224426</left_val>
-            <right_val>0.5755587220191956</right_val></_></_>
-        <_>
-          <!-- tree 12 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>2 8 15 3 -1.</_>
-                <_>2 9 15 1 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>1.1864770203828812e-003</threshold>
-            <left_val>0.3747301101684570</left_val>
-            <right_val>0.5471466183662415</right_val></_></_>
-        <_>
-          <!-- tree 13 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>8 13 4 3 -1.</_>
-                <_>8 14 4 1 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>2.3936580400913954e-003</threshold>
-            <left_val>0.4537783861160278</left_val>
-            <right_val>0.6111528873443604</right_val></_></_>
-        <_>
-          <!-- tree 14 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>7 2 3 2 -1.</_>
-                <_>8 2 1 2 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-1.5390539774671197e-003</threshold>
-            <left_val>0.2971341907978058</left_val>
-            <right_val>0.5189538002014160</right_val></_></_>
-        <_>
-          <!-- tree 15 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>7 13 6 3 -1.</_>
-                <_>7 14 6 1 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-7.1968790143728256e-003</threshold>
-            <left_val>0.6699066758155823</left_val>
-            <right_val>0.4726476967334747</right_val></_></_>
-        <_>
-          <!-- tree 16 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>9 9 2 2 -1.</_>
-                <_>9 10 2 1 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-4.1499789222143590e-004</threshold>
-            <left_val>0.3384954035282135</left_val>
-            <right_val>0.5260317921638489</right_val></_></_>
-        <_>
-          <!-- tree 17 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>17 2 3 6 -1.</_>
-                <_>17 4 3 2 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>4.4359830208122730e-003</threshold>
-            <left_val>0.5399122238159180</left_val>
-            <right_val>0.3920140862464905</right_val></_></_>
-        <_>
-          <!-- tree 18 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>1 5 3 4 -1.</_>
-                <_>2 5 1 4 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>2.6606200262904167e-003</threshold>
-            <left_val>0.4482578039169312</left_val>
-            <right_val>0.6119617819786072</right_val></_></_>
-        <_>
-          <!-- tree 19 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>14 8 4 6 -1.</_>
-                <_>14 10 4 2 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-1.5287200221791863e-003</threshold>
-            <left_val>0.3711237907409668</left_val>
-            <right_val>0.5340266227722168</right_val></_></_>
-        <_>
-          <!-- tree 20 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>1 4 3 8 -1.</_>
-                <_>2 4 1 8 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-4.7397250309586525e-003</threshold>
-            <left_val>0.6031088232994080</left_val>
-            <right_val>0.4455145001411438</right_val></_></_>
-        <_>
-          <!-- tree 21 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>8 13 4 6 -1.</_>
-                <_>8 16 4 3 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-0.0148291299119592</threshold>
-            <left_val>0.2838754057884216</left_val>
-            <right_val>0.5341861844062805</right_val></_></_>
-        <_>
-          <!-- tree 22 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>3 14 2 2 -1.</_>
-                <_>3 15 2 1 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>9.2275557108223438e-004</threshold>
-            <left_val>0.5209547281265259</left_val>
-            <right_val>0.3361653983592987</right_val></_></_>
-        <_>
-          <!-- tree 23 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>14 8 4 6 -1.</_>
-                <_>14 10 4 2 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>0.0835298076272011</threshold>
-            <left_val>0.5119969844818115</left_val>
-            <right_val>0.0811644494533539</right_val></_></_>
-        <_>
-          <!-- tree 24 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>2 8 4 6 -1.</_>
-                <_>2 10 4 2 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-7.5633148662745953e-004</threshold>
-            <left_val>0.3317120075225830</left_val>
-            <right_val>0.5189831256866455</right_val></_></_>
-        <_>
-          <!-- tree 25 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>10 14 1 6 -1.</_>
-                <_>10 17 1 3 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>9.8403859883546829e-003</threshold>
-            <left_val>0.5247598290443420</left_val>
-            <right_val>0.2334959059953690</right_val></_></_>
-        <_>
-          <!-- tree 26 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>7 5 3 6 -1.</_>
-                <_>8 5 1 6 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-1.5953830443322659e-003</threshold>
-            <left_val>0.5750094056129456</left_val>
-            <right_val>0.4295622110366821</right_val></_></_>
-        <_>
-          <!-- tree 27 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>11 2 2 6 -1.</_>
-                <_>12 2 1 3 2.</_>
-                <_>11 5 1 3 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>3.4766020689858124e-005</threshold>
-            <left_val>0.4342445135116577</left_val>
-            <right_val>0.5564029216766357</right_val></_></_>
-        <_>
-          <!-- tree 28 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>6 6 6 5 -1.</_>
-                <_>8 6 2 5 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>0.0298629105091095</threshold>
-            <left_val>0.4579147100448608</left_val>
-            <right_val>0.6579188108444214</right_val></_></_>
-        <_>
-          <!-- tree 29 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>17 1 3 6 -1.</_>
-                <_>17 3 3 2 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>0.0113255903124809</threshold>
-            <left_val>0.5274311900138855</left_val>
-            <right_val>0.3673888146877289</right_val></_></_>
-        <_>
-          <!-- tree 30 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>8 7 3 5 -1.</_>
-                <_>9 7 1 5 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-8.7828645482659340e-003</threshold>
-            <left_val>0.7100368738174439</left_val>
-            <right_val>0.4642167091369629</right_val></_></_>
-        <_>
-          <!-- tree 31 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>9 18 3 2 -1.</_>
-                <_>10 18 1 2 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>4.3639959767460823e-003</threshold>
-            <left_val>0.5279216170310974</left_val>
-            <right_val>0.2705877125263214</right_val></_></_>
-        <_>
-          <!-- tree 32 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>8 18 3 2 -1.</_>
-                <_>9 18 1 2 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>4.1804728098213673e-003</threshold>
-            <left_val>0.5072525143623352</left_val>
-            <right_val>0.2449083030223846</right_val></_></_>
-        <_>
-          <!-- tree 33 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>12 3 5 2 -1.</_>
-                <_>12 4 5 1 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-4.5668511302210391e-004</threshold>
-            <left_val>0.4283105134963989</left_val>
-            <right_val>0.5548691153526306</right_val></_></_>
-        <_>
-          <!-- tree 34 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>7 1 5 12 -1.</_>
-                <_>7 7 5 6 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-3.7140368949621916e-003</threshold>
-            <left_val>0.5519387722015381</left_val>
-            <right_val>0.4103653132915497</right_val></_></_>
-        <_>
-          <!-- tree 35 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>1 0 18 4 -1.</_>
-                <_>7 0 6 4 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-0.0253042895346880</threshold>
-            <left_val>0.6867002248764038</left_val>
-            <right_val>0.4869889020919800</right_val></_></_>
-        <_>
-          <!-- tree 36 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>4 2 2 2 -1.</_>
-                <_>4 3 2 1 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-3.4454080741852522e-004</threshold>
-            <left_val>0.3728874027729034</left_val>
-            <right_val>0.5287693142890930</right_val></_></_>
-        <_>
-          <!-- tree 37 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>11 14 4 2 -1.</_>
-                <_>13 14 2 1 2.</_>
-                <_>11 15 2 1 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-8.3935231668874621e-004</threshold>
-            <left_val>0.6060152053833008</left_val>
-            <right_val>0.4616062045097351</right_val></_></_>
-        <_>
-          <!-- tree 38 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>0 2 3 6 -1.</_>
-                <_>0 4 3 2 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>0.0172800496220589</threshold>
-            <left_val>0.5049635767936707</left_val>
-            <right_val>0.1819823980331421</right_val></_></_>
-        <_>
-          <!-- tree 39 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>9 7 2 3 -1.</_>
-                <_>9 8 2 1 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-6.3595077954232693e-003</threshold>
-            <left_val>0.1631239950656891</left_val>
-            <right_val>0.5232778787612915</right_val></_></_>
-        <_>
-          <!-- tree 40 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>5 5 1 3 -1.</_>
-                <_>5 6 1 1 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>1.0298109846189618e-003</threshold>
-            <left_val>0.4463278055191040</left_val>
-            <right_val>0.6176549196243286</right_val></_></_>
-        <_>
-          <!-- tree 41 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>10 10 6 1 -1.</_>
-                <_>10 10 3 1 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>1.0117109632119536e-003</threshold>
-            <left_val>0.5473384857177734</left_val>
-            <right_val>0.4300698935985565</right_val></_></_>
-        <_>
-          <!-- tree 42 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>4 10 6 1 -1.</_>
-                <_>7 10 3 1 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-0.0103088002651930</threshold>
-            <left_val>0.1166985034942627</left_val>
-            <right_val>0.5000867247581482</right_val></_></_>
-        <_>
-          <!-- tree 43 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>9 17 3 3 -1.</_>
-                <_>9 18 3 1 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>5.4682018235325813e-003</threshold>
-            <left_val>0.4769287109375000</left_val>
-            <right_val>0.6719213724136353</right_val></_></_>
-        <_>
-          <!-- tree 44 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>4 14 1 3 -1.</_>
-                <_>4 15 1 1 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-9.1696460731327534e-004</threshold>
-            <left_val>0.3471089899539948</left_val>
-            <right_val>0.5178164839744568</right_val></_></_>
-        <_>
-          <!-- tree 45 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>12 5 3 3 -1.</_>
-                <_>12 6 3 1 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>2.3922820109874010e-003</threshold>
-            <left_val>0.4785236120223999</left_val>
-            <right_val>0.6216310858726502</right_val></_></_>
-        <_>
-          <!-- tree 46 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>4 5 12 3 -1.</_>
-                <_>4 6 12 1 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-7.5573818758130074e-003</threshold>
-            <left_val>0.5814796090126038</left_val>
-            <right_val>0.4410085082054138</right_val></_></_>
-        <_>
-          <!-- tree 47 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>9 8 2 3 -1.</_>
-                <_>9 9 2 1 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-7.7024032361805439e-004</threshold>
-            <left_val>0.3878000080585480</left_val>
-            <right_val>0.5465722084045410</right_val></_></_>
-        <_>
-          <!-- tree 48 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>4 9 3 3 -1.</_>
-                <_>5 9 1 3 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-8.7125990539789200e-003</threshold>
-            <left_val>0.1660051047801971</left_val>
-            <right_val>0.4995836019515991</right_val></_></_>
-        <_>
-          <!-- tree 49 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>6 0 9 17 -1.</_>
-                <_>9 0 3 17 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-0.0103063201531768</threshold>
-            <left_val>0.4093391001224518</left_val>
-            <right_val>0.5274233818054199</right_val></_></_>
-        <_>
-          <!-- tree 50 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>9 12 1 3 -1.</_>
-                <_>9 13 1 1 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-2.0940979011356831e-003</threshold>
-            <left_val>0.6206194758415222</left_val>
-            <right_val>0.4572280049324036</right_val></_></_>
-        <_>
-          <!-- tree 51 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>9 5 2 15 -1.</_>
-                <_>9 10 2 5 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>6.8099051713943481e-003</threshold>
-            <left_val>0.5567759275436401</left_val>
-            <right_val>0.4155600070953369</right_val></_></_>
-        <_>
-          <!-- tree 52 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>8 14 2 3 -1.</_>
-                <_>8 15 2 1 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-1.0746059706434608e-003</threshold>
-            <left_val>0.5638927817344666</left_val>
-            <right_val>0.4353024959564209</right_val></_></_>
-        <_>
-          <!-- tree 53 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>10 14 1 3 -1.</_>
-                <_>10 15 1 1 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>2.1550289820879698e-003</threshold>
-            <left_val>0.4826265871524811</left_val>
-            <right_val>0.6749758124351502</right_val></_></_>
-        <_>
-          <!-- tree 54 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>7 1 6 5 -1.</_>
-                <_>9 1 2 5 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>0.0317423194646835</threshold>
-            <left_val>0.5048379898071289</left_val>
-            <right_val>0.1883248984813690</right_val></_></_>
-        <_>
-          <!-- tree 55 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>0 0 20 2 -1.</_>
-                <_>0 0 10 2 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-0.0783827230334282</threshold>
-            <left_val>0.2369548976421356</left_val>
-            <right_val>0.5260158181190491</right_val></_></_>
-        <_>
-          <!-- tree 56 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>2 13 5 3 -1.</_>
-                <_>2 14 5 1 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>5.7415119372308254e-003</threshold>
-            <left_val>0.5048828721046448</left_val>
-            <right_val>0.2776469886302948</right_val></_></_>
-        <_>
-          <!-- tree 57 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>9 11 2 3 -1.</_>
-                <_>9 12 2 1 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-2.9014600440859795e-003</threshold>
-            <left_val>0.6238604784011841</left_val>
-            <right_val>0.4693317115306854</right_val></_></_>
-        <_>
-          <!-- tree 58 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>2 5 9 15 -1.</_>
-                <_>2 10 9 5 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-2.6427931152284145e-003</threshold>
-            <left_val>0.3314141929149628</left_val>
-            <right_val>0.5169777274131775</right_val></_></_>
-        <_>
-          <!-- tree 59 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>5 0 12 10 -1.</_>
-                <_>11 0 6 5 2.</_>
-                <_>5 5 6 5 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-0.1094966009259224</threshold>
-            <left_val>0.2380045056343079</left_val>
-            <right_val>0.5183441042900085</right_val></_></_>
-        <_>
-          <!-- tree 60 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>5 1 2 3 -1.</_>
-                <_>6 1 1 3 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>7.4075913289561868e-005</threshold>
-            <left_val>0.4069635868072510</left_val>
-            <right_val>0.5362150073051453</right_val></_></_>
-        <_>
-          <!-- tree 61 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>10 7 6 1 -1.</_>
-                <_>12 7 2 1 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-5.0593802006915212e-004</threshold>
-            <left_val>0.5506706237792969</left_val>
-            <right_val>0.4374594092369080</right_val></_></_>
-        <_>
-          <!-- tree 62 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>3 1 2 10 -1.</_>
-                <_>3 1 1 5 2.</_>
-                <_>4 6 1 5 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-8.2131777890026569e-004</threshold>
-            <left_val>0.5525709986686707</left_val>
-            <right_val>0.4209375977516174</right_val></_></_>
-        <_>
-          <!-- tree 63 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>13 7 2 1 -1.</_>
-                <_>13 7 1 1 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-6.0276539443293586e-005</threshold>
-            <left_val>0.5455474853515625</left_val>
-            <right_val>0.4748266041278839</right_val></_></_>
-        <_>
-          <!-- tree 64 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>4 13 4 6 -1.</_>
-                <_>4 15 4 2 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>6.8065142259001732e-003</threshold>
-            <left_val>0.5157995820045471</left_val>
-            <right_val>0.3424577116966248</right_val></_></_>
-        <_>
-          <!-- tree 65 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>13 7 2 1 -1.</_>
-                <_>13 7 1 1 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>1.7202789895236492e-003</threshold>
-            <left_val>0.5013207793235779</left_val>
-            <right_val>0.6331263780593872</right_val></_></_>
-        <_>
-          <!-- tree 66 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>5 7 2 1 -1.</_>
-                <_>6 7 1 1 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-1.3016929733566940e-004</threshold>
-            <left_val>0.5539718270301819</left_val>
-            <right_val>0.4226869940757752</right_val></_></_>
-        <_>
-          <!-- tree 67 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>2 12 18 4 -1.</_>
-                <_>11 12 9 2 2.</_>
-                <_>2 14 9 2 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-4.8016388900578022e-003</threshold>
-            <left_val>0.4425095021724701</left_val>
-            <right_val>0.5430780053138733</right_val></_></_>
-        <_>
-          <!-- tree 68 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>5 7 2 2 -1.</_>
-                <_>5 7 1 1 2.</_>
-                <_>6 8 1 1 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-2.5399310979992151e-003</threshold>
-            <left_val>0.7145782113075256</left_val>
-            <right_val>0.4697605073451996</right_val></_></_>
-        <_>
-          <!-- tree 69 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>16 3 4 2 -1.</_>
-                <_>16 4 4 1 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-1.4278929447755218e-003</threshold>
-            <left_val>0.4070445001125336</left_val>
-            <right_val>0.5399605035781860</right_val></_></_>
-        <_>
-          <!-- tree 70 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>0 2 2 18 -1.</_>
-                <_>0 2 1 9 2.</_>
-                <_>1 11 1 9 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-0.0251425504684448</threshold>
-            <left_val>0.7884690761566162</left_val>
-            <right_val>0.4747352004051209</right_val></_></_>
-        <_>
-          <!-- tree 71 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>1 2 18 4 -1.</_>
-                <_>10 2 9 2 2.</_>
-                <_>1 4 9 2 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-3.8899609353393316e-003</threshold>
-            <left_val>0.4296191930770874</left_val>
-            <right_val>0.5577110052108765</right_val></_></_>
-        <_>
-          <!-- tree 72 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>9 14 1 3 -1.</_>
-                <_>9 15 1 1 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>4.3947459198534489e-003</threshold>
-            <left_val>0.4693162143230438</left_val>
-            <right_val>0.7023944258689880</right_val></_></_>
-        <_>
-          <!-- tree 73 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>2 12 18 4 -1.</_>
-                <_>11 12 9 2 2.</_>
-                <_>2 14 9 2 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>0.0246784202754498</threshold>
-            <left_val>0.5242322087287903</left_val>
-            <right_val>0.3812510073184967</right_val></_></_>
-        <_>
-          <!-- tree 74 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>0 12 18 4 -1.</_>
-                <_>0 12 9 2 2.</_>
-                <_>9 14 9 2 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>0.0380476787686348</threshold>
-            <left_val>0.5011739730834961</left_val>
-            <right_val>0.1687828004360199</right_val></_></_>
-        <_>
-          <!-- tree 75 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>11 4 5 3 -1.</_>
-                <_>11 5 5 1 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>7.9424865543842316e-003</threshold>
-            <left_val>0.4828582108020783</left_val>
-            <right_val>0.6369568109512329</right_val></_></_>
-        <_>
-          <!-- tree 76 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>6 4 7 3 -1.</_>
-                <_>6 5 7 1 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-1.5110049862414598e-003</threshold>
-            <left_val>0.5906485915184021</left_val>
-            <right_val>0.4487667977809906</right_val></_></_>
-        <_>
-          <!-- tree 77 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>13 17 3 3 -1.</_>
-                <_>13 18 3 1 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>6.4201741479337215e-003</threshold>
-            <left_val>0.5241097807884216</left_val>
-            <right_val>0.2990570068359375</right_val></_></_>
-        <_>
-          <!-- tree 78 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>8 1 3 4 -1.</_>
-                <_>9 1 1 4 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-2.9802159406244755e-003</threshold>
-            <left_val>0.3041465878486633</left_val>
-            <right_val>0.5078489780426025</right_val></_></_>
-        <_>
-          <!-- tree 79 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>11 4 2 4 -1.</_>
-                <_>11 4 1 4 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-7.4580078944563866e-004</threshold>
-            <left_val>0.4128139019012451</left_val>
-            <right_val>0.5256826281547546</right_val></_></_>
-        <_>
-          <!-- tree 80 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>0 17 9 3 -1.</_>
-                <_>3 17 3 3 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-0.0104709500446916</threshold>
-            <left_val>0.5808395147323608</left_val>
-            <right_val>0.4494296014308929</right_val></_></_>
-        <_>
-          <!-- tree 81 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>11 0 2 8 -1.</_>
-                <_>12 0 1 4 2.</_>
-                <_>11 4 1 4 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>9.3369204550981522e-003</threshold>
-            <left_val>0.5246552824974060</left_val>
-            <right_val>0.2658948898315430</right_val></_></_>
-        <_>
-          <!-- tree 82 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>0 8 6 12 -1.</_>
-                <_>0 8 3 6 2.</_>
-                <_>3 14 3 6 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>0.0279369000345469</threshold>
-            <left_val>0.4674955010414124</left_val>
-            <right_val>0.7087256908416748</right_val></_></_>
-        <_>
-          <!-- tree 83 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>10 7 4 12 -1.</_>
-                <_>10 13 4 6 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>7.4277678504586220e-003</threshold>
-            <left_val>0.5409486889839172</left_val>
-            <right_val>0.3758518099784851</right_val></_></_>
-        <_>
-          <!-- tree 84 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>5 3 8 14 -1.</_>
-                <_>5 10 8 7 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-0.0235845092684031</threshold>
-            <left_val>0.3758639991283417</left_val>
-            <right_val>0.5238550901412964</right_val></_></_>
-        <_>
-          <!-- tree 85 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>14 10 6 1 -1.</_>
-                <_>14 10 3 1 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>1.1452640173956752e-003</threshold>
-            <left_val>0.4329578876495361</left_val>
-            <right_val>0.5804247260093689</right_val></_></_>
-        <_>
-          <!-- tree 86 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>0 4 10 4 -1.</_>
-                <_>0 6 10 2 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-4.3468660442158580e-004</threshold>
-            <left_val>0.5280618071556091</left_val>
-            <right_val>0.3873069882392883</right_val></_></_>
-        <_>
-          <!-- tree 87 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>10 0 5 8 -1.</_>
-                <_>10 4 5 4 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>0.0106485402211547</threshold>
-            <left_val>0.4902113080024719</left_val>
-            <right_val>0.5681251883506775</right_val></_></_>
-        <_>
-          <!-- tree 88 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>8 1 4 8 -1.</_>
-                <_>8 1 2 4 2.</_>
-                <_>10 5 2 4 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-3.9418050437234342e-004</threshold>
-            <left_val>0.5570880174636841</left_val>
-            <right_val>0.4318251013755798</right_val></_></_>
-        <_>
-          <!-- tree 89 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>9 11 6 1 -1.</_>
-                <_>11 11 2 1 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-1.3270479394122958e-004</threshold>
-            <left_val>0.5658439993858337</left_val>
-            <right_val>0.4343554973602295</right_val></_></_>
-        <_>
-          <!-- tree 90 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>8 9 3 4 -1.</_>
-                <_>9 9 1 4 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-2.0125510636717081e-003</threshold>
-            <left_val>0.6056739091873169</left_val>
-            <right_val>0.4537523984909058</right_val></_></_>
-        <_>
-          <!-- tree 91 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>18 4 2 6 -1.</_>
-                <_>18 6 2 2 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>2.4854319635778666e-003</threshold>
-            <left_val>0.5390477180480957</left_val>
-            <right_val>0.4138010144233704</right_val></_></_>
-        <_>
-          <!-- tree 92 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>8 8 3 4 -1.</_>
-                <_>9 8 1 4 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>1.8237880431115627e-003</threshold>
-            <left_val>0.4354828894138336</left_val>
-            <right_val>0.5717188715934753</right_val></_></_>
-        <_>
-          <!-- tree 93 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>7 1 13 3 -1.</_>
-                <_>7 2 13 1 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-0.0166566595435143</threshold>
-            <left_val>0.3010913133621216</left_val>
-            <right_val>0.5216122865676880</right_val></_></_>
-        <_>
-          <!-- tree 94 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>7 13 6 1 -1.</_>
-                <_>9 13 2 1 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>8.0349558265879750e-004</threshold>
-            <left_val>0.5300151109695435</left_val>
-            <right_val>0.3818396925926209</right_val></_></_>
-        <_>
-          <!-- tree 95 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>12 11 3 6 -1.</_>
-                <_>12 13 3 2 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>3.4170378930866718e-003</threshold>
-            <left_val>0.5328028798103333</left_val>
-            <right_val>0.4241400063037872</right_val></_></_>
-        <_>
-          <!-- tree 96 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>5 11 6 1 -1.</_>
-                <_>7 11 2 1 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-3.6222729249857366e-004</threshold>
-            <left_val>0.5491728186607361</left_val>
-            <right_val>0.4186977148056030</right_val></_></_>
-        <_>
-          <!-- tree 97 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>1 4 18 10 -1.</_>
-                <_>10 4 9 5 2.</_>
-                <_>1 9 9 5 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-0.1163002029061317</threshold>
-            <left_val>0.1440722048282623</left_val>
-            <right_val>0.5226451158523560</right_val></_></_>
-        <_>
-          <!-- tree 98 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>8 6 4 9 -1.</_>
-                <_>8 9 4 3 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-0.0146950101479888</threshold>
-            <left_val>0.7747725248336792</left_val>
-            <right_val>0.4715717136859894</right_val></_></_>
-        <_>
-          <!-- tree 99 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>8 6 4 3 -1.</_>
-                <_>8 7 4 1 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>2.1972130052745342e-003</threshold>
-            <left_val>0.5355433821678162</left_val>
-            <right_val>0.3315644860267639</right_val></_></_>
-        <_>
-          <!-- tree 100 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>8 7 3 3 -1.</_>
-                <_>9 7 1 3 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-4.6965209185145795e-004</threshold>
-            <left_val>0.5767235159873962</left_val>
-            <right_val>0.4458136856555939</right_val></_></_>
-        <_>
-          <!-- tree 101 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>14 15 4 3 -1.</_>
-                <_>14 16 4 1 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>6.5144998952746391e-003</threshold>
-            <left_val>0.5215674042701721</left_val>
-            <right_val>0.3647888898849487</right_val></_></_>
-        <_>
-          <!-- tree 102 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>5 10 3 10 -1.</_>
-                <_>6 10 1 10 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>0.0213000606745481</threshold>
-            <left_val>0.4994204938411713</left_val>
-            <right_val>0.1567950993776321</right_val></_></_>
-        <_>
-          <!-- tree 103 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>8 15 4 3 -1.</_>
-                <_>8 16 4 1 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>3.1881409231573343e-003</threshold>
-            <left_val>0.4742200076580048</left_val>
-            <right_val>0.6287270188331604</right_val></_></_>
-        <_>
-          <!-- tree 104 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>0 8 1 6 -1.</_>
-                <_>0 10 1 2 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>9.0019777417182922e-004</threshold>
-            <left_val>0.5347954034805298</left_val>
-            <right_val>0.3943752050399780</right_val></_></_>
-        <_>
-          <!-- tree 105 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>10 15 1 3 -1.</_>
-                <_>10 16 1 1 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-5.1772277802228928e-003</threshold>
-            <left_val>0.6727191805839539</left_val>
-            <right_val>0.5013138055801392</right_val></_></_>
-        <_>
-          <!-- tree 106 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>2 15 4 3 -1.</_>
-                <_>2 16 4 1 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-4.3764649890363216e-003</threshold>
-            <left_val>0.3106675148010254</left_val>
-            <right_val>0.5128793120384216</right_val></_></_>
-        <_>
-          <!-- tree 107 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>18 3 2 8 -1.</_>
-                <_>19 3 1 4 2.</_>
-                <_>18 7 1 4 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>2.6299960445612669e-003</threshold>
-            <left_val>0.4886310100555420</left_val>
-            <right_val>0.5755215883255005</right_val></_></_>
-        <_>
-          <!-- tree 108 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>0 3 2 8 -1.</_>
-                <_>0 3 1 4 2.</_>
-                <_>1 7 1 4 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-2.0458688959479332e-003</threshold>
-            <left_val>0.6025794148445129</left_val>
-            <right_val>0.4558076858520508</right_val></_></_>
-        <_>
-          <!-- tree 109 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>3 7 14 10 -1.</_>
-                <_>10 7 7 5 2.</_>
-                <_>3 12 7 5 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>0.0694827064871788</threshold>
-            <left_val>0.5240747928619385</left_val>
-            <right_val>0.2185259014368057</right_val></_></_>
-        <_>
-          <!-- tree 110 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>0 7 19 3 -1.</_>
-                <_>0 8 19 1 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>0.0240489393472672</threshold>
-            <left_val>0.5011867284774780</left_val>
-            <right_val>0.2090622037649155</right_val></_></_>
-        <_>
-          <!-- tree 111 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>12 6 3 3 -1.</_>
-                <_>12 7 3 1 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>3.1095340382307768e-003</threshold>
-            <left_val>0.4866712093353272</left_val>
-            <right_val>0.7108548283576965</right_val></_></_>
-        <_>
-          <!-- tree 112 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>0 6 1 3 -1.</_>
-                <_>0 7 1 1 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-1.2503260513767600e-003</threshold>
-            <left_val>0.3407891094684601</left_val>
-            <right_val>0.5156195163726807</right_val></_></_>
-        <_>
-          <!-- tree 113 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>12 6 3 3 -1.</_>
-                <_>12 7 3 1 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-1.0281190043315291e-003</threshold>
-            <left_val>0.5575572252273560</left_val>
-            <right_val>0.4439432024955750</right_val></_></_>
-        <_>
-          <!-- tree 114 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>5 6 3 3 -1.</_>
-                <_>5 7 3 1 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-8.8893622159957886e-003</threshold>
-            <left_val>0.6402000784873962</left_val>
-            <right_val>0.4620442092418671</right_val></_></_>
-        <_>
-          <!-- tree 115 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>8 2 4 2 -1.</_>
-                <_>8 3 4 1 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-6.1094801640138030e-004</threshold>
-            <left_val>0.3766441941261292</left_val>
-            <right_val>0.5448899865150452</right_val></_></_>
-        <_>
-          <!-- tree 116 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>6 3 4 12 -1.</_>
-                <_>8 3 2 12 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-5.7686357758939266e-003</threshold>
-            <left_val>0.3318648934364319</left_val>
-            <right_val>0.5133677124977112</right_val></_></_>
-        <_>
-          <!-- tree 117 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>13 6 2 3 -1.</_>
-                <_>13 7 2 1 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>1.8506490159779787e-003</threshold>
-            <left_val>0.4903570115566254</left_val>
-            <right_val>0.6406934857368469</right_val></_></_>
-        <_>
-          <!-- tree 118 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>0 10 20 4 -1.</_>
-                <_>0 12 20 2 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-0.0997994691133499</threshold>
-            <left_val>0.1536051034927368</left_val>
-            <right_val>0.5015562176704407</right_val></_></_>
-        <_>
-          <!-- tree 119 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>2 0 17 14 -1.</_>
-                <_>2 7 17 7 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-0.3512834906578064</threshold>
-            <left_val>0.0588231310248375</left_val>
-            <right_val>0.5174378752708435</right_val></_></_>
-        <_>
-          <!-- tree 120 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>0 0 6 10 -1.</_>
-                <_>0 0 3 5 2.</_>
-                <_>3 5 3 5 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-0.0452445708215237</threshold>
-            <left_val>0.6961488723754883</left_val>
-            <right_val>0.4677872955799103</right_val></_></_>
-        <_>
-          <!-- tree 121 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>14 6 6 4 -1.</_>
-                <_>14 6 3 4 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>0.0714815780520439</threshold>
-            <left_val>0.5167986154556274</left_val>
-            <right_val>0.1038092970848084</right_val></_></_>
-        <_>
-          <!-- tree 122 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>0 6 6 4 -1.</_>
-                <_>3 6 3 4 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>2.1895780228078365e-003</threshold>
-            <left_val>0.4273078143596649</left_val>
-            <right_val>0.5532060861587524</right_val></_></_>
-        <_>
-          <!-- tree 123 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>13 2 7 2 -1.</_>
-                <_>13 3 7 1 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-5.9242651332169771e-004</threshold>
-            <left_val>0.4638943970203400</left_val>
-            <right_val>0.5276389122009277</right_val></_></_>
-        <_>
-          <!-- tree 124 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>0 2 7 2 -1.</_>
-                <_>0 3 7 1 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>1.6788389766588807e-003</threshold>
-            <left_val>0.5301648974418640</left_val>
-            <right_val>0.3932034969329834</right_val></_></_>
-        <_>
-          <!-- tree 125 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>6 11 14 2 -1.</_>
-                <_>13 11 7 1 2.</_>
-                <_>6 12 7 1 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-2.2163488902151585e-003</threshold>
-            <left_val>0.5630694031715393</left_val>
-            <right_val>0.4757033884525299</right_val></_></_>
-        <_>
-          <!-- tree 126 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>8 5 2 2 -1.</_>
-                <_>8 5 1 1 2.</_>
-                <_>9 6 1 1 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>1.1568699846975505e-004</threshold>
-            <left_val>0.4307535886764526</left_val>
-            <right_val>0.5535702705383301</right_val></_></_>
-        <_>
-          <!-- tree 127 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>13 9 2 3 -1.</_>
-                <_>13 9 1 3 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-7.2017288766801357e-003</threshold>
-            <left_val>0.1444882005453110</left_val>
-            <right_val>0.5193064212799072</right_val></_></_>
-        <_>
-          <!-- tree 128 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>1 1 3 12 -1.</_>
-                <_>2 1 1 12 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>8.9081272017210722e-004</threshold>
-            <left_val>0.4384432137012482</left_val>
-            <right_val>0.5593621134757996</right_val></_></_>
-        <_>
-          <!-- tree 129 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>17 4 1 3 -1.</_>
-                <_>17 5 1 1 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>1.9605009583756328e-004</threshold>
-            <left_val>0.5340415835380554</left_val>
-            <right_val>0.4705956876277924</right_val></_></_>
-        <_>
-          <!-- tree 130 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>2 4 1 3 -1.</_>
-                <_>2 5 1 1 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>5.2022142335772514e-004</threshold>
-            <left_val>0.5213856101036072</left_val>
-            <right_val>0.3810079097747803</right_val></_></_>
-        <_>
-          <!-- tree 131 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>14 5 1 3 -1.</_>
-                <_>14 6 1 1 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>9.4588572392240167e-004</threshold>
-            <left_val>0.4769414961338043</left_val>
-            <right_val>0.6130738854408264</right_val></_></_>
-        <_>
-          <!-- tree 132 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>7 16 2 3 -1.</_>
-                <_>7 17 2 1 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>9.1698471806012094e-005</threshold>
-            <left_val>0.4245009124279022</left_val>
-            <right_val>0.5429363250732422</right_val></_></_>
-        <_>
-          <!-- tree 133 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>8 13 4 6 -1.</_>
-                <_>10 13 2 3 2.</_>
-                <_>8 16 2 3 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>2.1833200007677078e-003</threshold>
-            <left_val>0.5457730889320374</left_val>
-            <right_val>0.4191075861454010</right_val></_></_>
-        <_>
-          <!-- tree 134 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>5 5 1 3 -1.</_>
-                <_>5 6 1 1 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-8.6039671441540122e-004</threshold>
-            <left_val>0.5764588713645935</left_val>
-            <right_val>0.4471659958362579</right_val></_></_>
-        <_>
-          <!-- tree 135 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>16 0 4 20 -1.</_>
-                <_>16 0 2 20 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-0.0132362395524979</threshold>
-            <left_val>0.6372823119163513</left_val>
-            <right_val>0.4695009887218475</right_val></_></_>
-        <_>
-          <!-- tree 136 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>5 1 2 6 -1.</_>
-                <_>5 1 1 3 2.</_>
-                <_>6 4 1 3 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>4.3376701069064438e-004</threshold>
-            <left_val>0.5317873954772949</left_val>
-            <right_val>0.3945829868316650</right_val></_></_></trees>
-      <stage_threshold>67.6989212036132810</stage_threshold>
-      <parent>14</parent>
-      <next>-1</next></_>
-    <_>
-      <!-- stage 16 -->
-      <trees>
-        <_>
-          <!-- tree 0 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>5 4 10 4 -1.</_>
-                <_>5 6 10 2 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-0.0248471498489380</threshold>
-            <left_val>0.6555516719818115</left_val>
-            <right_val>0.3873311877250671</right_val></_></_>
-        <_>
-          <!-- tree 1 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>15 2 4 12 -1.</_>
-                <_>15 2 2 12 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>6.1348611488938332e-003</threshold>
-            <left_val>0.3748072087764740</left_val>
-            <right_val>0.5973997712135315</right_val></_></_>
-        <_>
-          <!-- tree 2 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>7 6 4 12 -1.</_>
-                <_>7 12 4 6 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>6.4498498104512691e-003</threshold>
-            <left_val>0.5425491929054260</left_val>
-            <right_val>0.2548811137676239</right_val></_></_>
-        <_>
-          <!-- tree 3 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>14 5 1 8 -1.</_>
-                <_>14 9 1 4 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>6.3491211039945483e-004</threshold>
-            <left_val>0.2462442070245743</left_val>
-            <right_val>0.5387253761291504</right_val></_></_>
-        <_>
-          <!-- tree 4 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>1 4 14 10 -1.</_>
-                <_>1 4 7 5 2.</_>
-                <_>8 9 7 5 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>1.4023890253156424e-003</threshold>
-            <left_val>0.5594322085380554</left_val>
-            <right_val>0.3528657853603363</right_val></_></_>
-        <_>
-          <!-- tree 5 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>11 6 6 14 -1.</_>
-                <_>14 6 3 7 2.</_>
-                <_>11 13 3 7 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>3.0044000595808029e-004</threshold>
-            <left_val>0.3958503901958466</left_val>
-            <right_val>0.5765938162803650</right_val></_></_>
-        <_>
-          <!-- tree 6 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>3 6 6 14 -1.</_>
-                <_>3 6 3 7 2.</_>
-                <_>6 13 3 7 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>1.0042409849120304e-004</threshold>
-            <left_val>0.3698996901512146</left_val>
-            <right_val>0.5534998178482056</right_val></_></_>
-        <_>
-          <!-- tree 7 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>4 9 15 2 -1.</_>
-                <_>9 9 5 2 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-5.0841490738093853e-003</threshold>
-            <left_val>0.3711090981960297</left_val>
-            <right_val>0.5547800064086914</right_val></_></_>
-        <_>
-          <!-- tree 8 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>7 14 6 3 -1.</_>
-                <_>7 15 6 1 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-0.0195372607558966</threshold>
-            <left_val>0.7492755055427551</left_val>
-            <right_val>0.4579297006130219</right_val></_></_>
-        <_>
-          <!-- tree 9 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>6 3 14 4 -1.</_>
-                <_>13 3 7 2 2.</_>
-                <_>6 5 7 2 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-7.4532740654831287e-006</threshold>
-            <left_val>0.5649787187576294</left_val>
-            <right_val>0.3904069960117340</right_val></_></_>
-        <_>
-          <!-- tree 10 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>1 9 15 2 -1.</_>
-                <_>6 9 5 2 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-3.6079459823668003e-003</threshold>
-            <left_val>0.3381088078022003</left_val>
-            <right_val>0.5267801284790039</right_val></_></_>
-        <_>
-          <!-- tree 11 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>6 11 8 9 -1.</_>
-                <_>6 14 8 3 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>2.0697501022368670e-003</threshold>
-            <left_val>0.5519291162490845</left_val>
-            <right_val>0.3714388906955719</right_val></_></_>
-        <_>
-          <!-- tree 12 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>7 4 3 8 -1.</_>
-                <_>8 4 1 8 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-4.6463840408250690e-004</threshold>
-            <left_val>0.5608214735984802</left_val>
-            <right_val>0.4113566875457764</right_val></_></_>
-        <_>
-          <!-- tree 13 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>14 6 2 6 -1.</_>
-                <_>14 9 2 3 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>7.5490452582016587e-004</threshold>
-            <left_val>0.3559206128120422</left_val>
-            <right_val>0.5329356193542481</right_val></_></_>
-        <_>
-          <!-- tree 14 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>5 7 6 4 -1.</_>
-                <_>5 7 3 2 2.</_>
-                <_>8 9 3 2 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-9.8322238773107529e-004</threshold>
-            <left_val>0.5414795875549316</left_val>
-            <right_val>0.3763205111026764</right_val></_></_>
-        <_>
-          <!-- tree 15 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>1 1 18 19 -1.</_>
-                <_>7 1 6 19 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-0.0199406407773495</threshold>
-            <left_val>0.6347903013229370</left_val>
-            <right_val>0.4705299139022827</right_val></_></_>
-        <_>
-          <!-- tree 16 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>1 2 6 5 -1.</_>
-                <_>4 2 3 5 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>3.7680300883948803e-003</threshold>
-            <left_val>0.3913489878177643</left_val>
-            <right_val>0.5563716292381287</right_val></_></_>
-        <_>
-          <!-- tree 17 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>12 17 6 2 -1.</_>
-                <_>12 18 6 1 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-9.4528505578637123e-003</threshold>
-            <left_val>0.2554892897605896</left_val>
-            <right_val>0.5215116739273071</right_val></_></_>
-        <_>
-          <!-- tree 18 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>2 17 6 2 -1.</_>
-                <_>2 18 6 1 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>2.9560849070549011e-003</threshold>
-            <left_val>0.5174679160118103</left_val>
-            <right_val>0.3063920140266419</right_val></_></_>
-        <_>
-          <!-- tree 19 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>17 3 3 6 -1.</_>
-                <_>17 5 3 2 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>9.1078737750649452e-003</threshold>
-            <left_val>0.5388448238372803</left_val>
-            <right_val>0.2885963022708893</right_val></_></_>
-        <_>
-          <!-- tree 20 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>8 17 3 3 -1.</_>
-                <_>8 18 3 1 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>1.8219229532405734e-003</threshold>
-            <left_val>0.4336043000221252</left_val>
-            <right_val>0.5852196812629700</right_val></_></_>
-        <_>
-          <!-- tree 21 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>10 13 2 6 -1.</_>
-                <_>10 16 2 3 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>0.0146887395530939</threshold>
-            <left_val>0.5287361741065979</left_val>
-            <right_val>0.2870005965232849</right_val></_></_>
-        <_>
-          <!-- tree 22 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>7 13 6 3 -1.</_>
-                <_>7 14 6 1 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-0.0143879903480411</threshold>
-            <left_val>0.7019448876380920</left_val>
-            <right_val>0.4647370874881744</right_val></_></_>
-        <_>
-          <!-- tree 23 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>17 3 3 6 -1.</_>
-                <_>17 5 3 2 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-0.0189866498112679</threshold>
-            <left_val>0.2986552119255066</left_val>
-            <right_val>0.5247011780738831</right_val></_></_>
-        <_>
-          <!-- tree 24 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>8 13 2 3 -1.</_>
-                <_>8 14 2 1 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>1.1527639580890536e-003</threshold>
-            <left_val>0.4323473870754242</left_val>
-            <right_val>0.5931661725044251</right_val></_></_>
-        <_>
-          <!-- tree 25 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>9 3 6 2 -1.</_>
-                <_>11 3 2 2 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>0.0109336702153087</threshold>
-            <left_val>0.5286864042282105</left_val>
-            <right_val>0.3130319118499756</right_val></_></_>
-        <_>
-          <!-- tree 26 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>0 3 3 6 -1.</_>
-                <_>0 5 3 2 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-0.0149327302351594</threshold>
-            <left_val>0.2658419013023377</left_val>
-            <right_val>0.5084077119827271</right_val></_></_>
-        <_>
-          <!-- tree 27 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>8 5 4 6 -1.</_>
-                <_>8 7 4 2 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-2.9970539617352188e-004</threshold>
-            <left_val>0.5463526844978333</left_val>
-            <right_val>0.3740724027156830</right_val></_></_>
-        <_>
-          <!-- tree 28 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>5 5 3 2 -1.</_>
-                <_>5 6 3 1 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>4.1677621193230152e-003</threshold>
-            <left_val>0.4703496992588043</left_val>
-            <right_val>0.7435721755027771</right_val></_></_>
-        <_>
-          <!-- tree 29 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>10 1 3 4 -1.</_>
-                <_>11 1 1 4 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-6.3905320130288601e-003</threshold>
-            <left_val>0.2069258987903595</left_val>
-            <right_val>0.5280538201332092</right_val></_></_>
-        <_>
-          <!-- tree 30 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>1 2 5 9 -1.</_>
-                <_>1 5 5 3 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>4.5029609464108944e-003</threshold>
-            <left_val>0.5182648897171021</left_val>
-            <right_val>0.3483543097972870</right_val></_></_>
-        <_>
-          <!-- tree 31 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>13 6 2 3 -1.</_>
-                <_>13 7 2 1 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-9.2040365561842918e-003</threshold>
-            <left_val>0.6803777217864990</left_val>
-            <right_val>0.4932360053062439</right_val></_></_>
-        <_>
-          <!-- tree 32 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>0 6 14 3 -1.</_>
-                <_>7 6 7 3 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>0.0813272595405579</threshold>
-            <left_val>0.5058398842811585</left_val>
-            <right_val>0.2253051996231079</right_val></_></_>
-        <_>
-          <!-- tree 33 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>2 11 18 8 -1.</_>
-                <_>2 15 18 4 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-0.1507928073406220</threshold>
-            <left_val>0.2963424921035767</left_val>
-            <right_val>0.5264679789543152</right_val></_></_>
-        <_>
-          <!-- tree 34 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>5 6 2 3 -1.</_>
-                <_>5 7 2 1 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>3.3179009333252907e-003</threshold>
-            <left_val>0.4655495882034302</left_val>
-            <right_val>0.7072932124137878</right_val></_></_>
-        <_>
-          <!-- tree 35 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>10 6 4 2 -1.</_>
-                <_>12 6 2 1 2.</_>
-                <_>10 7 2 1 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>7.7402801252901554e-004</threshold>
-            <left_val>0.4780347943305969</left_val>
-            <right_val>0.5668237805366516</right_val></_></_>
-        <_>
-          <!-- tree 36 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>6 6 4 2 -1.</_>
-                <_>6 6 2 1 2.</_>
-                <_>8 7 2 1 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>6.8199541419744492e-004</threshold>
-            <left_val>0.4286996126174927</left_val>
-            <right_val>0.5722156763076782</right_val></_></_>
-        <_>
-          <!-- tree 37 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>10 1 3 4 -1.</_>
-                <_>11 1 1 4 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>5.3671570494771004e-003</threshold>
-            <left_val>0.5299307107925415</left_val>
-            <right_val>0.3114621937274933</right_val></_></_>
-        <_>
-          <!-- tree 38 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>7 1 2 7 -1.</_>
-                <_>8 1 1 7 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>9.7018666565418243e-005</threshold>
-            <left_val>0.3674638867378235</left_val>
-            <right_val>0.5269461870193481</right_val></_></_>
-        <_>
-          <!-- tree 39 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>4 2 15 14 -1.</_>
-                <_>4 9 15 7 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-0.1253408938646317</threshold>
-            <left_val>0.2351492047309876</left_val>
-            <right_val>0.5245791077613831</right_val></_></_>
-        <_>
-          <!-- tree 40 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>8 7 3 2 -1.</_>
-                <_>9 7 1 2 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-5.2516269497573376e-003</threshold>
-            <left_val>0.7115936875343323</left_val>
-            <right_val>0.4693767130374908</right_val></_></_>
-        <_>
-          <!-- tree 41 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>2 3 18 4 -1.</_>
-                <_>11 3 9 2 2.</_>
-                <_>2 5 9 2 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-7.8342109918594360e-003</threshold>
-            <left_val>0.4462651014328003</left_val>
-            <right_val>0.5409085750579834</right_val></_></_>
-        <_>
-          <!-- tree 42 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>9 7 2 2 -1.</_>
-                <_>10 7 1 2 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-1.1310069821774960e-003</threshold>
-            <left_val>0.5945618748664856</left_val>
-            <right_val>0.4417662024497986</right_val></_></_>
-        <_>
-          <!-- tree 43 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>13 9 2 3 -1.</_>
-                <_>13 9 1 3 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>1.7601120052859187e-003</threshold>
-            <left_val>0.5353249907493591</left_val>
-            <right_val>0.3973453044891357</right_val></_></_>
-        <_>
-          <!-- tree 44 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>5 2 6 2 -1.</_>
-                <_>7 2 2 2 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-8.1581249833106995e-004</threshold>
-            <left_val>0.3760268092155457</left_val>
-            <right_val>0.5264726877212524</right_val></_></_>
-        <_>
-          <!-- tree 45 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>9 5 2 7 -1.</_>
-                <_>9 5 1 7 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-3.8687589112669230e-003</threshold>
-            <left_val>0.6309912800788879</left_val>
-            <right_val>0.4749819934368134</right_val></_></_>
-        <_>
-          <!-- tree 46 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>5 9 2 3 -1.</_>
-                <_>6 9 1 3 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>1.5207129763439298e-003</threshold>
-            <left_val>0.5230181813240051</left_val>
-            <right_val>0.3361223936080933</right_val></_></_>
-        <_>
-          <!-- tree 47 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>6 0 14 18 -1.</_>
-                <_>6 9 14 9 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>0.5458673834800720</threshold>
-            <left_val>0.5167139768600464</left_val>
-            <right_val>0.1172635033726692</right_val></_></_>
-        <_>
-          <!-- tree 48 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>2 16 6 3 -1.</_>
-                <_>2 17 6 1 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>0.0156501904129982</threshold>
-            <left_val>0.4979439079761505</left_val>
-            <right_val>0.1393294930458069</right_val></_></_>
-        <_>
-          <!-- tree 49 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>9 7 3 6 -1.</_>
-                <_>10 7 1 6 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-0.0117318602278829</threshold>
-            <left_val>0.7129650712013245</left_val>
-            <right_val>0.4921196103096008</right_val></_></_>
-        <_>
-          <!-- tree 50 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>7 8 4 3 -1.</_>
-                <_>7 9 4 1 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-6.1765122227370739e-003</threshold>
-            <left_val>0.2288102954626083</left_val>
-            <right_val>0.5049701929092407</right_val></_></_>
-        <_>
-          <!-- tree 51 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>7 12 6 3 -1.</_>
-                <_>7 13 6 1 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>2.2457661107182503e-003</threshold>
-            <left_val>0.4632433950901032</left_val>
-            <right_val>0.6048725843429565</right_val></_></_>
-        <_>
-          <!-- tree 52 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>9 12 2 3 -1.</_>
-                <_>9 13 2 1 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-5.1915869116783142e-003</threshold>
-            <left_val>0.6467421054840088</left_val>
-            <right_val>0.4602192938327789</right_val></_></_>
-        <_>
-          <!-- tree 53 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>7 12 6 2 -1.</_>
-                <_>9 12 2 2 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-0.0238278806209564</threshold>
-            <left_val>0.1482000946998596</left_val>
-            <right_val>0.5226079225540161</right_val></_></_>
-        <_>
-          <!-- tree 54 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>5 11 4 6 -1.</_>
-                <_>5 14 4 3 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>1.0284580057486892e-003</threshold>
-            <left_val>0.5135489106178284</left_val>
-            <right_val>0.3375957012176514</right_val></_></_>
-        <_>
-          <!-- tree 55 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>11 12 7 2 -1.</_>
-                <_>11 13 7 1 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-0.0100788502022624</threshold>
-            <left_val>0.2740561068058014</left_val>
-            <right_val>0.5303567051887512</right_val></_></_>
-        <_>
-          <!-- tree 56 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>6 10 8 6 -1.</_>
-                <_>6 10 4 3 2.</_>
-                <_>10 13 4 3 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>2.6168930344283581e-003</threshold>
-            <left_val>0.5332670807838440</left_val>
-            <right_val>0.3972454071044922</right_val></_></_>
-        <_>
-          <!-- tree 57 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>11 10 3 4 -1.</_>
-                <_>11 12 3 2 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>5.4385367548093200e-004</threshold>
-            <left_val>0.5365604162216187</left_val>
-            <right_val>0.4063411951065064</right_val></_></_>
-        <_>
-          <!-- tree 58 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>9 16 2 3 -1.</_>
-                <_>9 17 2 1 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>5.3510512225329876e-003</threshold>
-            <left_val>0.4653759002685547</left_val>
-            <right_val>0.6889045834541321</right_val></_></_>
-        <_>
-          <!-- tree 59 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>13 3 1 9 -1.</_>
-                <_>13 6 1 3 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-1.5274790348485112e-003</threshold>
-            <left_val>0.5449501276016235</left_val>
-            <right_val>0.3624723851680756</right_val></_></_>
-        <_>
-          <!-- tree 60 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>1 13 14 6 -1.</_>
-                <_>1 15 14 2 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-0.0806244164705276</threshold>
-            <left_val>0.1656087040901184</left_val>
-            <right_val>0.5000287294387817</right_val></_></_>
-        <_>
-          <!-- tree 61 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>13 6 1 6 -1.</_>
-                <_>13 9 1 3 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>0.0221920292824507</threshold>
-            <left_val>0.5132731199264526</left_val>
-            <right_val>0.2002808004617691</right_val></_></_>
-        <_>
-          <!-- tree 62 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>0 4 3 8 -1.</_>
-                <_>1 4 1 8 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>7.3100631125271320e-003</threshold>
-            <left_val>0.4617947936058044</left_val>
-            <right_val>0.6366536021232605</right_val></_></_>
-        <_>
-          <!-- tree 63 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>18 0 2 18 -1.</_>
-                <_>18 0 1 18 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-6.4063072204589844e-003</threshold>
-            <left_val>0.5916250944137573</left_val>
-            <right_val>0.4867860972881317</right_val></_></_>
-        <_>
-          <!-- tree 64 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>2 3 6 2 -1.</_>
-                <_>2 4 6 1 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-7.6415040530264378e-004</threshold>
-            <left_val>0.3888409137725830</left_val>
-            <right_val>0.5315797924995422</right_val></_></_>
-        <_>
-          <!-- tree 65 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>9 0 8 6 -1.</_>
-                <_>9 2 8 2 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>7.6734489994123578e-004</threshold>
-            <left_val>0.4159064888954163</left_val>
-            <right_val>0.5605279803276062</right_val></_></_>
-        <_>
-          <!-- tree 66 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>6 6 1 6 -1.</_>
-                <_>6 9 1 3 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>6.1474501853808761e-004</threshold>
-            <left_val>0.3089022040367127</left_val>
-            <right_val>0.5120148062705994</right_val></_></_>
-        <_>
-          <!-- tree 67 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>14 8 6 3 -1.</_>
-                <_>14 9 6 1 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-5.0105270929634571e-003</threshold>
-            <left_val>0.3972199857234955</left_val>
-            <right_val>0.5207306146621704</right_val></_></_>
-        <_>
-          <!-- tree 68 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>0 0 2 18 -1.</_>
-                <_>1 0 1 18 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-8.6909132078289986e-003</threshold>
-            <left_val>0.6257408261299133</left_val>
-            <right_val>0.4608575999736786</right_val></_></_>
-        <_>
-          <!-- tree 69 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>1 18 18 2 -1.</_>
-                <_>10 18 9 1 2.</_>
-                <_>1 19 9 1 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-0.0163914598524570</threshold>
-            <left_val>0.2085209935903549</left_val>
-            <right_val>0.5242266058921814</right_val></_></_>
-        <_>
-          <!-- tree 70 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>3 15 2 2 -1.</_>
-                <_>3 16 2 1 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>4.0973909199237823e-004</threshold>
-            <left_val>0.5222427248954773</left_val>
-            <right_val>0.3780320882797241</right_val></_></_>
-        <_>
-          <!-- tree 71 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>8 14 5 3 -1.</_>
-                <_>8 15 5 1 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-2.5242289993911982e-003</threshold>
-            <left_val>0.5803927183151245</left_val>
-            <right_val>0.4611890017986298</right_val></_></_>
-        <_>
-          <!-- tree 72 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>8 14 2 3 -1.</_>
-                <_>8 15 2 1 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>5.0945312250405550e-004</threshold>
-            <left_val>0.4401271939277649</left_val>
-            <right_val>0.5846015810966492</right_val></_></_>
-        <_>
-          <!-- tree 73 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>12 3 3 3 -1.</_>
-                <_>13 3 1 3 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>1.9656419754028320e-003</threshold>
-            <left_val>0.5322325229644775</left_val>
-            <right_val>0.4184590876102448</right_val></_></_>
-        <_>
-          <!-- tree 74 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>7 5 6 2 -1.</_>
-                <_>9 5 2 2 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>5.6298897834494710e-004</threshold>
-            <left_val>0.3741844892501831</left_val>
-            <right_val>0.5234565734863281</right_val></_></_>
-        <_>
-          <!-- tree 75 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>15 5 5 2 -1.</_>
-                <_>15 6 5 1 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-6.7946797935292125e-004</threshold>
-            <left_val>0.4631041884422302</left_val>
-            <right_val>0.5356478095054627</right_val></_></_>
-        <_>
-          <!-- tree 76 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>0 5 5 2 -1.</_>
-                <_>0 6 5 1 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>7.2856349870562553e-003</threshold>
-            <left_val>0.5044670104980469</left_val>
-            <right_val>0.2377564013004303</right_val></_></_>
-        <_>
-          <!-- tree 77 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>17 14 1 6 -1.</_>
-                <_>17 17 1 3 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-0.0174594894051552</threshold>
-            <left_val>0.7289121150970459</left_val>
-            <right_val>0.5050435066223145</right_val></_></_>
-        <_>
-          <!-- tree 78 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>2 9 9 3 -1.</_>
-                <_>5 9 3 3 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-0.0254217498004436</threshold>
-            <left_val>0.6667134761810303</left_val>
-            <right_val>0.4678100049495697</right_val></_></_>
-        <_>
-          <!-- tree 79 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>12 3 3 3 -1.</_>
-                <_>13 3 1 3 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-1.5647639520466328e-003</threshold>
-            <left_val>0.4391759037971497</left_val>
-            <right_val>0.5323626995086670</right_val></_></_>
-        <_>
-          <!-- tree 80 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>0 0 4 18 -1.</_>
-                <_>2 0 2 18 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>0.0114443600177765</threshold>
-            <left_val>0.4346440136432648</left_val>
-            <right_val>0.5680012106895447</right_val></_></_>
-        <_>
-          <!-- tree 81 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>17 6 1 3 -1.</_>
-                <_>17 7 1 1 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-6.7352550104260445e-004</threshold>
-            <left_val>0.4477140903472900</left_val>
-            <right_val>0.5296812057495117</right_val></_></_>
-        <_>
-          <!-- tree 82 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>2 14 1 6 -1.</_>
-                <_>2 17 1 3 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>9.3194209039211273e-003</threshold>
-            <left_val>0.4740200042724609</left_val>
-            <right_val>0.7462607026100159</right_val></_></_>
-        <_>
-          <!-- tree 83 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>19 8 1 2 -1.</_>
-                <_>19 9 1 1 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>1.3328490604180843e-004</threshold>
-            <left_val>0.5365061759948731</left_val>
-            <right_val>0.4752134978771210</right_val></_></_>
-        <_>
-          <!-- tree 84 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>5 3 3 3 -1.</_>
-                <_>6 3 1 3 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-7.8815799206495285e-003</threshold>
-            <left_val>0.1752219051122665</left_val>
-            <right_val>0.5015255212783814</right_val></_></_>
-        <_>
-          <!-- tree 85 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>9 16 2 3 -1.</_>
-                <_>9 17 2 1 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-5.7985680177807808e-003</threshold>
-            <left_val>0.7271236777305603</left_val>
-            <right_val>0.4896200895309448</right_val></_></_>
-        <_>
-          <!-- tree 86 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>2 6 1 3 -1.</_>
-                <_>2 7 1 1 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-3.8922499516047537e-004</threshold>
-            <left_val>0.4003908932209015</left_val>
-            <right_val>0.5344941020011902</right_val></_></_>
-        <_>
-          <!-- tree 87 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>12 4 8 2 -1.</_>
-                <_>16 4 4 1 2.</_>
-                <_>12 5 4 1 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-1.9288610201328993e-003</threshold>
-            <left_val>0.5605612993240356</left_val>
-            <right_val>0.4803955852985382</right_val></_></_>
-        <_>
-          <!-- tree 88 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>0 4 8 2 -1.</_>
-                <_>0 4 4 1 2.</_>
-                <_>4 5 4 1 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>8.4214154630899429e-003</threshold>
-            <left_val>0.4753246903419495</left_val>
-            <right_val>0.7623608708381653</right_val></_></_>
-        <_>
-          <!-- tree 89 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>2 16 18 4 -1.</_>
-                <_>2 18 18 2 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>8.1655876711010933e-003</threshold>
-            <left_val>0.5393261909484863</left_val>
-            <right_val>0.4191643893718720</right_val></_></_>
-        <_>
-          <!-- tree 90 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>7 15 2 4 -1.</_>
-                <_>7 17 2 2 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>4.8280550981871784e-004</threshold>
-            <left_val>0.4240800142288208</left_val>
-            <right_val>0.5399821996688843</right_val></_></_>
-        <_>
-          <!-- tree 91 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>4 0 14 3 -1.</_>
-                <_>4 1 14 1 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-2.7186630759388208e-003</threshold>
-            <left_val>0.4244599938392639</left_val>
-            <right_val>0.5424923896789551</right_val></_></_>
-        <_>
-          <!-- tree 92 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>0 0 4 20 -1.</_>
-                <_>2 0 2 20 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-0.0125072300434113</threshold>
-            <left_val>0.5895841717720032</left_val>
-            <right_val>0.4550411105155945</right_val></_></_>
-        <_>
-          <!-- tree 93 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>12 4 4 8 -1.</_>
-                <_>14 4 2 4 2.</_>
-                <_>12 8 2 4 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-0.0242865197360516</threshold>
-            <left_val>0.2647134959697723</left_val>
-            <right_val>0.5189179778099060</right_val></_></_>
-        <_>
-          <!-- tree 94 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>6 7 2 2 -1.</_>
-                <_>6 7 1 1 2.</_>
-                <_>7 8 1 1 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-2.9676330741494894e-003</threshold>
-            <left_val>0.7347682714462280</left_val>
-            <right_val>0.4749749898910523</right_val></_></_>
-        <_>
-          <!-- tree 95 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>10 6 2 3 -1.</_>
-                <_>10 7 2 1 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-0.0125289997085929</threshold>
-            <left_val>0.2756049931049347</left_val>
-            <right_val>0.5177599787712097</right_val></_></_>
-        <_>
-          <!-- tree 96 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>8 7 3 2 -1.</_>
-                <_>8 8 3 1 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-1.0104000102728605e-003</threshold>
-            <left_val>0.3510560989379883</left_val>
-            <right_val>0.5144724249839783</right_val></_></_>
-        <_>
-          <!-- tree 97 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>8 2 6 12 -1.</_>
-                <_>8 8 6 6 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-2.1348530426621437e-003</threshold>
-            <left_val>0.5637925863265991</left_val>
-            <right_val>0.4667319953441620</right_val></_></_>
-        <_>
-          <!-- tree 98 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>4 0 11 12 -1.</_>
-                <_>4 4 11 4 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>0.0195642597973347</threshold>
-            <left_val>0.4614573121070862</left_val>
-            <right_val>0.6137639880180359</right_val></_></_>
-        <_>
-          <!-- tree 99 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>14 9 6 11 -1.</_>
-                <_>16 9 2 11 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-0.0971463471651077</threshold>
-            <left_val>0.2998378872871399</left_val>
-            <right_val>0.5193555951118469</right_val></_></_>
-        <_>
-          <!-- tree 100 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>0 14 4 3 -1.</_>
-                <_>0 15 4 1 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>4.5014568604528904e-003</threshold>
-            <left_val>0.5077884793281555</left_val>
-            <right_val>0.3045755922794342</right_val></_></_>
-        <_>
-          <!-- tree 101 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>9 10 2 3 -1.</_>
-                <_>9 11 2 1 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>6.3706971704959869e-003</threshold>
-            <left_val>0.4861018955707550</left_val>
-            <right_val>0.6887500882148743</right_val></_></_>
-        <_>
-          <!-- tree 102 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>5 11 3 2 -1.</_>
-                <_>5 12 3 1 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-9.0721528977155685e-003</threshold>
-            <left_val>0.1673395931720734</left_val>
-            <right_val>0.5017563104629517</right_val></_></_>
-        <_>
-          <!-- tree 103 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>9 15 3 3 -1.</_>
-                <_>10 15 1 3 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-5.3537208586931229e-003</threshold>
-            <left_val>0.2692756950855255</left_val>
-            <right_val>0.5242633223533630</right_val></_></_>
-        <_>
-          <!-- tree 104 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>8 8 3 4 -1.</_>
-                <_>9 8 1 4 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-0.0109328404068947</threshold>
-            <left_val>0.7183864116668701</left_val>
-            <right_val>0.4736028909683228</right_val></_></_>
-        <_>
-          <!-- tree 105 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>9 15 3 3 -1.</_>
-                <_>10 15 1 3 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>8.2356072962284088e-003</threshold>
-            <left_val>0.5223966836929321</left_val>
-            <right_val>0.2389862984418869</right_val></_></_>
-        <_>
-          <!-- tree 106 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>7 7 3 2 -1.</_>
-                <_>8 7 1 2 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-1.0038160253316164e-003</threshold>
-            <left_val>0.5719355940818787</left_val>
-            <right_val>0.4433943033218384</right_val></_></_>
-        <_>
-          <!-- tree 107 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>2 10 16 4 -1.</_>
-                <_>10 10 8 2 2.</_>
-                <_>2 12 8 2 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>4.0859128348529339e-003</threshold>
-            <left_val>0.5472841858863831</left_val>
-            <right_val>0.4148836135864258</right_val></_></_>
-        <_>
-          <!-- tree 108 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>2 3 4 17 -1.</_>
-                <_>4 3 2 17 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>0.1548541933298111</threshold>
-            <left_val>0.4973812103271484</left_val>
-            <right_val>0.0610615983605385</right_val></_></_>
-        <_>
-          <!-- tree 109 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>15 13 2 7 -1.</_>
-                <_>15 13 1 7 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>2.0897459762636572e-004</threshold>
-            <left_val>0.4709174036979675</left_val>
-            <right_val>0.5423889160156250</right_val></_></_>
-        <_>
-          <!-- tree 110 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>2 2 6 1 -1.</_>
-                <_>5 2 3 1 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>3.3316991175524890e-004</threshold>
-            <left_val>0.4089626967906952</left_val>
-            <right_val>0.5300992131233215</right_val></_></_>
-        <_>
-          <!-- tree 111 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>5 2 12 4 -1.</_>
-                <_>9 2 4 4 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-0.0108134001493454</threshold>
-            <left_val>0.6104369759559631</left_val>
-            <right_val>0.4957334101200104</right_val></_></_>
-        <_>
-          <!-- tree 112 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>6 0 8 12 -1.</_>
-                <_>6 0 4 6 2.</_>
-                <_>10 6 4 6 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>0.0456560105085373</threshold>
-            <left_val>0.5069689154624939</left_val>
-            <right_val>0.2866660058498383</right_val></_></_>
-        <_>
-          <!-- tree 113 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>13 7 2 2 -1.</_>
-                <_>14 7 1 1 2.</_>
-                <_>13 8 1 1 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>1.2569549726322293e-003</threshold>
-            <left_val>0.4846917092800140</left_val>
-            <right_val>0.6318171024322510</right_val></_></_>
-        <_>
-          <!-- tree 114 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>0 12 20 6 -1.</_>
-                <_>0 14 20 2 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-0.1201507002115250</threshold>
-            <left_val>0.0605261400341988</left_val>
-            <right_val>0.4980959892272949</right_val></_></_>
-        <_>
-          <!-- tree 115 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>14 7 2 3 -1.</_>
-                <_>14 7 1 3 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-1.0533799650147557e-004</threshold>
-            <left_val>0.5363109707832336</left_val>
-            <right_val>0.4708042144775391</right_val></_></_>
-        <_>
-          <!-- tree 116 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>0 8 9 12 -1.</_>
-                <_>3 8 3 12 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-0.2070319056510925</threshold>
-            <left_val>0.0596603304147720</left_val>
-            <right_val>0.4979098141193390</right_val></_></_>
-        <_>
-          <!-- tree 117 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>3 0 16 2 -1.</_>
-                <_>3 0 8 2 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>1.2909180077258497e-004</threshold>
-            <left_val>0.4712977111339569</left_val>
-            <right_val>0.5377997756004334</right_val></_></_>
-        <_>
-          <!-- tree 118 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>6 15 3 3 -1.</_>
-                <_>6 16 3 1 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>3.8818528992123902e-004</threshold>
-            <left_val>0.4363538026809692</left_val>
-            <right_val>0.5534191131591797</right_val></_></_>
-        <_>
-          <!-- tree 119 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>8 15 6 3 -1.</_>
-                <_>8 16 6 1 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-2.9243610333651304e-003</threshold>
-            <left_val>0.5811185836791992</left_val>
-            <right_val>0.4825215935707092</right_val></_></_>
-        <_>
-          <!-- tree 120 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>0 10 1 6 -1.</_>
-                <_>0 12 1 2 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>8.3882332546636462e-004</threshold>
-            <left_val>0.5311700105667114</left_val>
-            <right_val>0.4038138985633850</right_val></_></_>
-        <_>
-          <!-- tree 121 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>10 9 4 3 -1.</_>
-                <_>10 10 4 1 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-1.9061550265178084e-003</threshold>
-            <left_val>0.3770701885223389</left_val>
-            <right_val>0.5260015130043030</right_val></_></_>
-        <_>
-          <!-- tree 122 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>9 15 2 3 -1.</_>
-                <_>9 16 2 1 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>8.9514348655939102e-003</threshold>
-            <left_val>0.4766167998313904</left_val>
-            <right_val>0.7682183980941773</right_val></_></_>
-        <_>
-          <!-- tree 123 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>5 7 10 1 -1.</_>
-                <_>5 7 5 1 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>0.0130834598094225</threshold>
-            <left_val>0.5264462828636169</left_val>
-            <right_val>0.3062222003936768</right_val></_></_>
-        <_>
-          <!-- tree 124 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>4 0 12 19 -1.</_>
-                <_>10 0 6 19 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-0.2115933001041412</threshold>
-            <left_val>0.6737198233604431</left_val>
-            <right_val>0.4695810079574585</right_val></_></_>
-        <_>
-          <!-- tree 125 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>0 6 20 6 -1.</_>
-                <_>10 6 10 3 2.</_>
-                <_>0 9 10 3 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>3.1493250280618668e-003</threshold>
-            <left_val>0.5644835233688355</left_val>
-            <right_val>0.4386953115463257</right_val></_></_>
-        <_>
-          <!-- tree 126 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>3 6 2 2 -1.</_>
-                <_>3 6 1 1 2.</_>
-                <_>4 7 1 1 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>3.9754100725986063e-004</threshold>
-            <left_val>0.4526061117649078</left_val>
-            <right_val>0.5895630121231079</right_val></_></_>
-        <_>
-          <!-- tree 127 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>15 6 2 2 -1.</_>
-                <_>16 6 1 1 2.</_>
-                <_>15 7 1 1 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-1.3814480043947697e-003</threshold>
-            <left_val>0.6070582270622253</left_val>
-            <right_val>0.4942413866519928</right_val></_></_>
-        <_>
-          <!-- tree 128 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>3 6 2 2 -1.</_>
-                <_>3 6 1 1 2.</_>
-                <_>4 7 1 1 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-5.8122188784182072e-004</threshold>
-            <left_val>0.5998213291168213</left_val>
-            <right_val>0.4508252143859863</right_val></_></_>
-        <_>
-          <!-- tree 129 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>14 4 1 12 -1.</_>
-                <_>14 10 1 6 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-2.3905329871922731e-003</threshold>
-            <left_val>0.4205588996410370</left_val>
-            <right_val>0.5223848223686218</right_val></_></_>
-        <_>
-          <!-- tree 130 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>2 5 16 10 -1.</_>
-                <_>2 5 8 5 2.</_>
-                <_>10 10 8 5 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>0.0272689294070005</threshold>
-            <left_val>0.5206447243690491</left_val>
-            <right_val>0.3563301861286163</right_val></_></_>
-        <_>
-          <!-- tree 131 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>9 17 3 2 -1.</_>
-                <_>10 17 1 2 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-3.7658358924090862e-003</threshold>
-            <left_val>0.3144704103469849</left_val>
-            <right_val>0.5218814015388489</right_val></_></_>
-        <_>
-          <!-- tree 132 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>1 4 2 2 -1.</_>
-                <_>1 5 2 1 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-1.4903489500284195e-003</threshold>
-            <left_val>0.3380196094512940</left_val>
-            <right_val>0.5124437212944031</right_val></_></_>
-        <_>
-          <!-- tree 133 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>5 0 15 5 -1.</_>
-                <_>10 0 5 5 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-0.0174282304942608</threshold>
-            <left_val>0.5829960703849793</left_val>
-            <right_val>0.4919725954532623</right_val></_></_>
-        <_>
-          <!-- tree 134 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>0 0 15 5 -1.</_>
-                <_>5 0 5 5 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-0.0152780301868916</threshold>
-            <left_val>0.6163144707679749</left_val>
-            <right_val>0.4617887139320374</right_val></_></_>
-        <_>
-          <!-- tree 135 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>11 2 2 17 -1.</_>
-                <_>11 2 1 17 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>0.0319956094026566</threshold>
-            <left_val>0.5166357159614563</left_val>
-            <right_val>0.1712764054536820</right_val></_></_>
-        <_>
-          <!-- tree 136 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>7 2 2 17 -1.</_>
-                <_>8 2 1 17 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-3.8256710395216942e-003</threshold>
-            <left_val>0.3408012092113495</left_val>
-            <right_val>0.5131387710571289</right_val></_></_>
-        <_>
-          <!-- tree 137 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>15 11 2 9 -1.</_>
-                <_>15 11 1 9 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-8.5186436772346497e-003</threshold>
-            <left_val>0.6105518937110901</left_val>
-            <right_val>0.4997941851615906</right_val></_></_>
-        <_>
-          <!-- tree 138 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>3 11 2 9 -1.</_>
-                <_>4 11 1 9 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>9.0641621500253677e-004</threshold>
-            <left_val>0.4327270984649658</left_val>
-            <right_val>0.5582311153411865</right_val></_></_>
-        <_>
-          <!-- tree 139 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>5 16 14 4 -1.</_>
-                <_>5 16 7 4 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>0.0103448498994112</threshold>
-            <left_val>0.4855653047561646</left_val>
-            <right_val>0.5452420115470886</right_val></_></_></trees>
-      <stage_threshold>69.2298736572265630</stage_threshold>
-      <parent>15</parent>
-      <next>-1</next></_>
-    <_>
-      <!-- stage 17 -->
-      <trees>
-        <_>
-          <!-- tree 0 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>1 4 18 1 -1.</_>
-                <_>7 4 6 1 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>7.8981826081871986e-003</threshold>
-            <left_val>0.3332524895668030</left_val>
-            <right_val>0.5946462154388428</right_val></_></_>
-        <_>
-          <!-- tree 1 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>13 7 6 4 -1.</_>
-                <_>16 7 3 2 2.</_>
-                <_>13 9 3 2 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>1.6170160379260778e-003</threshold>
-            <left_val>0.3490641117095947</left_val>
-            <right_val>0.5577868819236755</right_val></_></_>
-        <_>
-          <!-- tree 2 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>9 8 2 12 -1.</_>
-                <_>9 12 2 4 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-5.5449741194024682e-004</threshold>
-            <left_val>0.5542566180229187</left_val>
-            <right_val>0.3291530013084412</right_val></_></_>
-        <_>
-          <!-- tree 3 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>12 1 6 6 -1.</_>
-                <_>12 3 6 2 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>1.5428980113938451e-003</threshold>
-            <left_val>0.3612579107284546</left_val>
-            <right_val>0.5545979142189026</right_val></_></_>
-        <_>
-          <!-- tree 4 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>5 2 6 6 -1.</_>
-                <_>5 2 3 3 2.</_>
-                <_>8 5 3 3 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-1.0329450014978647e-003</threshold>
-            <left_val>0.3530139029026032</left_val>
-            <right_val>0.5576140284538269</right_val></_></_>
-        <_>
-          <!-- tree 5 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>9 16 6 4 -1.</_>
-                <_>12 16 3 2 2.</_>
-                <_>9 18 3 2 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>7.7698158565908670e-004</threshold>
-            <left_val>0.3916778862476349</left_val>
-            <right_val>0.5645321011543274</right_val></_></_>
-        <_>
-          <!-- tree 6 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>1 2 18 3 -1.</_>
-                <_>7 2 6 3 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>0.1432030051946640</threshold>
-            <left_val>0.4667482078075409</left_val>
-            <right_val>0.7023633122444153</right_val></_></_>
-        <_>
-          <!-- tree 7 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>7 4 9 10 -1.</_>
-                <_>7 9 9 5 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-7.3866490274667740e-003</threshold>
-            <left_val>0.3073684871196747</left_val>
-            <right_val>0.5289257764816284</right_val></_></_>
-        <_>
-          <!-- tree 8 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>5 9 4 4 -1.</_>
-                <_>7 9 2 4 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-6.2936742324382067e-004</threshold>
-            <left_val>0.5622118115425110</left_val>
-            <right_val>0.4037049114704132</right_val></_></_>
-        <_>
-          <!-- tree 9 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>11 10 3 6 -1.</_>
-                <_>11 13 3 3 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>7.8893528552725911e-004</threshold>
-            <left_val>0.5267661213874817</left_val>
-            <right_val>0.3557874858379364</right_val></_></_>
-        <_>
-          <!-- tree 10 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>7 11 5 3 -1.</_>
-                <_>7 12 5 1 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-0.0122280502691865</threshold>
-            <left_val>0.6668320894241333</left_val>
-            <right_val>0.4625549912452698</right_val></_></_>
-        <_>
-          <!-- tree 11 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>7 11 6 6 -1.</_>
-                <_>10 11 3 3 2.</_>
-                <_>7 14 3 3 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>3.5420239437371492e-003</threshold>
-            <left_val>0.5521438121795654</left_val>
-            <right_val>0.3869673013687134</right_val></_></_>
-        <_>
-          <!-- tree 12 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>0 0 10 9 -1.</_>
-                <_>0 3 10 3 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-1.0585320414975286e-003</threshold>
-            <left_val>0.3628678023815155</left_val>
-            <right_val>0.5320926904678345</right_val></_></_>
-        <_>
-          <!-- tree 13 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>13 14 1 6 -1.</_>
-                <_>13 16 1 2 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>1.4935660146875307e-005</threshold>
-            <left_val>0.4632444977760315</left_val>
-            <right_val>0.5363323092460632</right_val></_></_>
-        <_>
-          <!-- tree 14 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>0 2 3 6 -1.</_>
-                <_>0 4 3 2 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>5.2537708543241024e-003</threshold>
-            <left_val>0.5132231712341309</left_val>
-            <right_val>0.3265708982944489</right_val></_></_>
-        <_>
-          <!-- tree 15 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>8 14 4 3 -1.</_>
-                <_>8 15 4 1 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-8.2338023930788040e-003</threshold>
-            <left_val>0.6693689823150635</left_val>
-            <right_val>0.4774140119552612</right_val></_></_>
-        <_>
-          <!-- tree 16 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>6 14 1 6 -1.</_>
-                <_>6 16 1 2 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>2.1866810129722580e-005</threshold>
-            <left_val>0.4053862094879150</left_val>
-            <right_val>0.5457931160926819</right_val></_></_>
-        <_>
-          <!-- tree 17 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>9 15 2 3 -1.</_>
-                <_>9 16 2 1 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-3.8150229956954718e-003</threshold>
-            <left_val>0.6454995870590210</left_val>
-            <right_val>0.4793178141117096</right_val></_></_>
-        <_>
-          <!-- tree 18 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>6 4 3 3 -1.</_>
-                <_>7 4 1 3 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>1.1105879675596952e-003</threshold>
-            <left_val>0.5270407199859619</left_val>
-            <right_val>0.3529678881168366</right_val></_></_>
-        <_>
-          <!-- tree 19 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>9 0 11 3 -1.</_>
-                <_>9 1 11 1 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-5.7707689702510834e-003</threshold>
-            <left_val>0.3803547024726868</left_val>
-            <right_val>0.5352957844734192</right_val></_></_>
-        <_>
-          <!-- tree 20 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>0 6 20 3 -1.</_>
-                <_>0 7 20 1 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-3.0158339068293571e-003</threshold>
-            <left_val>0.5339403152465820</left_val>
-            <right_val>0.3887133002281189</right_val></_></_>
-        <_>
-          <!-- tree 21 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>10 1 1 2 -1.</_>
-                <_>10 2 1 1 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-8.5453689098358154e-004</threshold>
-            <left_val>0.3564616143703461</left_val>
-            <right_val>0.5273603796958923</right_val></_></_>
-        <_>
-          <!-- tree 22 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>9 6 2 6 -1.</_>
-                <_>10 6 1 6 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>0.0110505102202296</threshold>
-            <left_val>0.4671907126903534</left_val>
-            <right_val>0.6849737763404846</right_val></_></_>
-        <_>
-          <!-- tree 23 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>5 8 12 1 -1.</_>
-                <_>9 8 4 1 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>0.0426058396697044</threshold>
-            <left_val>0.5151473283767700</left_val>
-            <right_val>0.0702200904488564</right_val></_></_>
-        <_>
-          <!-- tree 24 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>3 8 12 1 -1.</_>
-                <_>7 8 4 1 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-3.0781750101596117e-003</threshold>
-            <left_val>0.3041661083698273</left_val>
-            <right_val>0.5152602195739746</right_val></_></_>
-        <_>
-          <!-- tree 25 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>9 7 3 5 -1.</_>
-                <_>10 7 1 5 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-5.4815728217363358e-003</threshold>
-            <left_val>0.6430295705795288</left_val>
-            <right_val>0.4897229969501495</right_val></_></_>
-        <_>
-          <!-- tree 26 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>3 9 6 2 -1.</_>
-                <_>6 9 3 2 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>3.1881860923022032e-003</threshold>
-            <left_val>0.5307493209838867</left_val>
-            <right_val>0.3826209902763367</right_val></_></_>
-        <_>
-          <!-- tree 27 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>12 9 3 3 -1.</_>
-                <_>12 10 3 1 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>3.5947180003859103e-004</threshold>
-            <left_val>0.4650047123432159</left_val>
-            <right_val>0.5421904921531677</right_val></_></_>
-        <_>
-          <!-- tree 28 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>7 0 6 1 -1.</_>
-                <_>9 0 2 1 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-4.0705031715333462e-003</threshold>
-            <left_val>0.2849679887294769</left_val>
-            <right_val>0.5079116225242615</right_val></_></_>
-        <_>
-          <!-- tree 29 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>12 9 3 3 -1.</_>
-                <_>12 10 3 1 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-0.0145941702648997</threshold>
-            <left_val>0.2971645891666412</left_val>
-            <right_val>0.5128461718559265</right_val></_></_>
-        <_>
-          <!-- tree 30 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>7 10 2 1 -1.</_>
-                <_>8 10 1 1 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-1.1947689927183092e-004</threshold>
-            <left_val>0.5631098151206970</left_val>
-            <right_val>0.4343082010746002</right_val></_></_>
-        <_>
-          <!-- tree 31 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>6 4 9 13 -1.</_>
-                <_>9 4 3 13 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-6.9344649091362953e-004</threshold>
-            <left_val>0.4403578042984009</left_val>
-            <right_val>0.5359959006309509</right_val></_></_>
-        <_>
-          <!-- tree 32 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>6 8 4 2 -1.</_>
-                <_>6 9 4 1 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>1.4834799912932795e-005</threshold>
-            <left_val>0.3421008884906769</left_val>
-            <right_val>0.5164697766304016</right_val></_></_>
-        <_>
-          <!-- tree 33 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>16 2 4 6 -1.</_>
-                <_>16 2 2 6 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>9.0296985581517220e-003</threshold>
-            <left_val>0.4639343023300171</left_val>
-            <right_val>0.6114075183868408</right_val></_></_>
-        <_>
-          <!-- tree 34 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>0 17 6 3 -1.</_>
-                <_>0 18 6 1 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-8.0640818923711777e-003</threshold>
-            <left_val>0.2820158898830414</left_val>
-            <right_val>0.5075494050979614</right_val></_></_>
-        <_>
-          <!-- tree 35 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>10 10 3 10 -1.</_>
-                <_>10 15 3 5 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>0.0260621197521687</threshold>
-            <left_val>0.5208905935287476</left_val>
-            <right_val>0.2688778042793274</right_val></_></_>
-        <_>
-          <!-- tree 36 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>8 7 3 5 -1.</_>
-                <_>9 7 1 5 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>0.0173146594315767</threshold>
-            <left_val>0.4663713872432709</left_val>
-            <right_val>0.6738539934158325</right_val></_></_>
-        <_>
-          <!-- tree 37 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>10 4 4 3 -1.</_>
-                <_>10 4 2 3 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>0.0226666405797005</threshold>
-            <left_val>0.5209349989891052</left_val>
-            <right_val>0.2212723940610886</right_val></_></_>
-        <_>
-          <!-- tree 38 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>8 4 3 8 -1.</_>
-                <_>9 4 1 8 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-2.1965929772704840e-003</threshold>
-            <left_val>0.6063101291656494</left_val>
-            <right_val>0.4538190066814423</right_val></_></_>
-        <_>
-          <!-- tree 39 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>6 6 9 13 -1.</_>
-                <_>9 6 3 13 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-9.5282476395368576e-003</threshold>
-            <left_val>0.4635204970836639</left_val>
-            <right_val>0.5247430801391602</right_val></_></_>
-        <_>
-          <!-- tree 40 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>6 0 8 12 -1.</_>
-                <_>6 0 4 6 2.</_>
-                <_>10 6 4 6 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>8.0943619832396507e-003</threshold>
-            <left_val>0.5289440155029297</left_val>
-            <right_val>0.3913882076740265</right_val></_></_>
-        <_>
-          <!-- tree 41 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>14 2 6 8 -1.</_>
-                <_>16 2 2 8 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-0.0728773325681686</threshold>
-            <left_val>0.7752001881599426</left_val>
-            <right_val>0.4990234971046448</right_val></_></_>
-        <_>
-          <!-- tree 42 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>6 0 3 6 -1.</_>
-                <_>7 0 1 6 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-6.9009521976113319e-003</threshold>
-            <left_val>0.2428039014339447</left_val>
-            <right_val>0.5048090219497681</right_val></_></_>
-        <_>
-          <!-- tree 43 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>14 2 6 8 -1.</_>
-                <_>16 2 2 8 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-0.0113082397729158</threshold>
-            <left_val>0.5734364986419678</left_val>
-            <right_val>0.4842376112937927</right_val></_></_>
-        <_>
-          <!-- tree 44 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>0 5 6 6 -1.</_>
-                <_>0 8 6 3 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>0.0596132017672062</threshold>
-            <left_val>0.5029836297035217</left_val>
-            <right_val>0.2524977028369904</right_val></_></_>
-        <_>
-          <!-- tree 45 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>9 12 6 2 -1.</_>
-                <_>12 12 3 1 2.</_>
-                <_>9 13 3 1 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-2.8624620754271746e-003</threshold>
-            <left_val>0.6073045134544373</left_val>
-            <right_val>0.4898459911346436</right_val></_></_>
-        <_>
-          <!-- tree 46 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>8 17 3 2 -1.</_>
-                <_>9 17 1 2 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>4.4781449250876904e-003</threshold>
-            <left_val>0.5015289187431335</left_val>
-            <right_val>0.2220316976308823</right_val></_></_>
-        <_>
-          <!-- tree 47 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>11 6 2 2 -1.</_>
-                <_>12 6 1 1 2.</_>
-                <_>11 7 1 1 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-1.7513240454718471e-003</threshold>
-            <left_val>0.6614428758621216</left_val>
-            <right_val>0.4933868944644928</right_val></_></_>
-        <_>
-          <!-- tree 48 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>1 9 18 2 -1.</_>
-                <_>7 9 6 2 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>0.0401634201407433</threshold>
-            <left_val>0.5180878043174744</left_val>
-            <right_val>0.3741044998168945</right_val></_></_>
-        <_>
-          <!-- tree 49 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>11 6 2 2 -1.</_>
-                <_>12 6 1 1 2.</_>
-                <_>11 7 1 1 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>3.4768949262797832e-004</threshold>
-            <left_val>0.4720416963100433</left_val>
-            <right_val>0.5818032026290894</right_val></_></_>
-        <_>
-          <!-- tree 50 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>3 4 12 8 -1.</_>
-                <_>7 4 4 8 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>2.6551650371402502e-003</threshold>
-            <left_val>0.3805010914802551</left_val>
-            <right_val>0.5221335887908936</right_val></_></_>
-        <_>
-          <!-- tree 51 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>13 11 5 3 -1.</_>
-                <_>13 12 5 1 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-8.7706279009580612e-003</threshold>
-            <left_val>0.2944166064262390</left_val>
-            <right_val>0.5231295228004456</right_val></_></_>
-        <_>
-          <!-- tree 52 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>9 10 2 3 -1.</_>
-                <_>9 11 2 1 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-5.5122091434895992e-003</threshold>
-            <left_val>0.7346177101135254</left_val>
-            <right_val>0.4722816944122315</right_val></_></_>
-        <_>
-          <!-- tree 53 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>14 7 2 3 -1.</_>
-                <_>14 7 1 3 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>6.8672042107209563e-004</threshold>
-            <left_val>0.5452876091003418</left_val>
-            <right_val>0.4242413043975830</right_val></_></_>
-        <_>
-          <!-- tree 54 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>5 4 1 3 -1.</_>
-                <_>5 5 1 1 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>5.6019669864326715e-004</threshold>
-            <left_val>0.4398862123489380</left_val>
-            <right_val>0.5601285099983215</right_val></_></_>
-        <_>
-          <!-- tree 55 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>13 4 2 3 -1.</_>
-                <_>13 5 2 1 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>2.4143769405782223e-003</threshold>
-            <left_val>0.4741686880588532</left_val>
-            <right_val>0.6136621832847595</right_val></_></_>
-        <_>
-          <!-- tree 56 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>5 4 2 3 -1.</_>
-                <_>5 5 2 1 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-1.5680900542065501e-003</threshold>
-            <left_val>0.6044552922248840</left_val>
-            <right_val>0.4516409933567047</right_val></_></_>
-        <_>
-          <!-- tree 57 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>9 8 2 3 -1.</_>
-                <_>9 9 2 1 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-3.6827491130679846e-003</threshold>
-            <left_val>0.2452459037303925</left_val>
-            <right_val>0.5294982194900513</right_val></_></_>
-        <_>
-          <!-- tree 58 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>8 9 2 2 -1.</_>
-                <_>8 10 2 1 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-2.9409190756268799e-004</threshold>
-            <left_val>0.3732838034629822</left_val>
-            <right_val>0.5251451134681702</right_val></_></_>
-        <_>
-          <!-- tree 59 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>15 14 1 4 -1.</_>
-                <_>15 16 1 2 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>4.2847759323194623e-004</threshold>
-            <left_val>0.5498809814453125</left_val>
-            <right_val>0.4065535068511963</right_val></_></_>
-        <_>
-          <!-- tree 60 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>3 12 2 2 -1.</_>
-                <_>3 13 2 1 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-4.8817070201039314e-003</threshold>
-            <left_val>0.2139908969402313</left_val>
-            <right_val>0.4999957084655762</right_val></_></_>
-        <_>
-          <!-- tree 61 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>12 15 2 2 -1.</_>
-                <_>13 15 1 1 2.</_>
-                <_>12 16 1 1 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>2.7272020815871656e-004</threshold>
-            <left_val>0.4650287032127380</left_val>
-            <right_val>0.5813428759574890</right_val></_></_>
-        <_>
-          <!-- tree 62 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>9 13 2 2 -1.</_>
-                <_>9 14 2 1 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>2.0947199664078653e-004</threshold>
-            <left_val>0.4387486875057221</left_val>
-            <right_val>0.5572792887687683</right_val></_></_>
-        <_>
-          <!-- tree 63 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>4 11 14 9 -1.</_>
-                <_>4 14 14 3 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>0.0485011897981167</threshold>
-            <left_val>0.5244972705841065</left_val>
-            <right_val>0.3212889134883881</right_val></_></_>
-        <_>
-          <!-- tree 64 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>7 13 4 3 -1.</_>
-                <_>7 14 4 1 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-4.5166411437094212e-003</threshold>
-            <left_val>0.6056813001632690</left_val>
-            <right_val>0.4545882046222687</right_val></_></_>
-        <_>
-          <!-- tree 65 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>15 14 1 4 -1.</_>
-                <_>15 16 1 2 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-0.0122916800901294</threshold>
-            <left_val>0.2040929049253464</left_val>
-            <right_val>0.5152214169502258</right_val></_></_>
-        <_>
-          <!-- tree 66 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>4 14 1 4 -1.</_>
-                <_>4 16 1 2 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>4.8549679922871292e-004</threshold>
-            <left_val>0.5237604975700378</left_val>
-            <right_val>0.3739503026008606</right_val></_></_>
-        <_>
-          <!-- tree 67 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>14 0 6 13 -1.</_>
-                <_>16 0 2 13 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>0.0305560491979122</threshold>
-            <left_val>0.4960533976554871</left_val>
-            <right_val>0.5938246250152588</right_val></_></_>
-        <_>
-          <!-- tree 68 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>4 1 2 12 -1.</_>
-                <_>4 1 1 6 2.</_>
-                <_>5 7 1 6 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-1.5105320198927075e-004</threshold>
-            <left_val>0.5351303815841675</left_val>
-            <right_val>0.4145204126834869</right_val></_></_>
-        <_>
-          <!-- tree 69 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>11 14 6 6 -1.</_>
-                <_>14 14 3 3 2.</_>
-                <_>11 17 3 3 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>2.4937440175563097e-003</threshold>
-            <left_val>0.4693366885185242</left_val>
-            <right_val>0.5514941215515137</right_val></_></_>
-        <_>
-          <!-- tree 70 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>3 14 6 6 -1.</_>
-                <_>3 14 3 3 2.</_>
-                <_>6 17 3 3 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-0.0123821301385760</threshold>
-            <left_val>0.6791396737098694</left_val>
-            <right_val>0.4681667983531952</right_val></_></_>
-        <_>
-          <!-- tree 71 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>14 17 3 2 -1.</_>
-                <_>14 18 3 1 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-5.1333461888134480e-003</threshold>
-            <left_val>0.3608739078044891</left_val>
-            <right_val>0.5229160189628601</right_val></_></_>
-        <_>
-          <!-- tree 72 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>3 17 3 2 -1.</_>
-                <_>3 18 3 1 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>5.1919277757406235e-004</threshold>
-            <left_val>0.5300073027610779</left_val>
-            <right_val>0.3633613884449005</right_val></_></_>
-        <_>
-          <!-- tree 73 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>14 0 6 13 -1.</_>
-                <_>16 0 2 13 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>0.1506042033433914</threshold>
-            <left_val>0.5157316923141480</left_val>
-            <right_val>0.2211782038211823</right_val></_></_>
-        <_>
-          <!-- tree 74 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>0 0 6 13 -1.</_>
-                <_>2 0 2 13 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>7.7144149690866470e-003</threshold>
-            <left_val>0.4410496950149536</left_val>
-            <right_val>0.5776609182357788</right_val></_></_>
-        <_>
-          <!-- tree 75 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>10 10 7 6 -1.</_>
-                <_>10 12 7 2 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>9.4443522393703461e-003</threshold>
-            <left_val>0.5401855111122131</left_val>
-            <right_val>0.3756650090217590</right_val></_></_>
-        <_>
-          <!-- tree 76 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>6 15 2 2 -1.</_>
-                <_>6 15 1 1 2.</_>
-                <_>7 16 1 1 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>2.5006249779835343e-004</threshold>
-            <left_val>0.4368270933628082</left_val>
-            <right_val>0.5607374906539917</right_val></_></_>
-        <_>
-          <!-- tree 77 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>6 11 8 6 -1.</_>
-                <_>10 11 4 3 2.</_>
-                <_>6 14 4 3 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-3.3077150583267212e-003</threshold>
-            <left_val>0.4244799017906189</left_val>
-            <right_val>0.5518230795860291</right_val></_></_>
-        <_>
-          <!-- tree 78 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>7 6 2 2 -1.</_>
-                <_>7 6 1 1 2.</_>
-                <_>8 7 1 1 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>7.4048910755664110e-004</threshold>
-            <left_val>0.4496962130069733</left_val>
-            <right_val>0.5900576710700989</right_val></_></_>
-        <_>
-          <!-- tree 79 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>2 2 16 6 -1.</_>
-                <_>10 2 8 3 2.</_>
-                <_>2 5 8 3 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>0.0440920516848564</threshold>
-            <left_val>0.5293493270874023</left_val>
-            <right_val>0.3156355023384094</right_val></_></_>
-        <_>
-          <!-- tree 80 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>5 4 3 3 -1.</_>
-                <_>5 5 3 1 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>3.3639909233897924e-003</threshold>
-            <left_val>0.4483296871185303</left_val>
-            <right_val>0.5848662257194519</right_val></_></_>
-        <_>
-          <!-- tree 81 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>11 7 3 10 -1.</_>
-                <_>11 12 3 5 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-3.9760079234838486e-003</threshold>
-            <left_val>0.4559507071971893</left_val>
-            <right_val>0.5483639240264893</right_val></_></_>
-        <_>
-          <!-- tree 82 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>6 7 3 10 -1.</_>
-                <_>6 12 3 5 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>2.7716930489987135e-003</threshold>
-            <left_val>0.5341786146163940</left_val>
-            <right_val>0.3792484104633331</right_val></_></_>
-        <_>
-          <!-- tree 83 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>10 7 3 2 -1.</_>
-                <_>11 7 1 2 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-2.4123019829858094e-004</threshold>
-            <left_val>0.5667188763618469</left_val>
-            <right_val>0.4576973021030426</right_val></_></_>
-        <_>
-          <!-- tree 84 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>8 12 4 2 -1.</_>
-                <_>8 13 4 1 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>4.9425667384639382e-004</threshold>
-            <left_val>0.4421244859695435</left_val>
-            <right_val>0.5628787279129028</right_val></_></_>
-        <_>
-          <!-- tree 85 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>10 1 1 3 -1.</_>
-                <_>10 2 1 1 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-3.8876468897797167e-004</threshold>
-            <left_val>0.4288370907306671</left_val>
-            <right_val>0.5391063094139099</right_val></_></_>
-        <_>
-          <!-- tree 86 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>1 2 4 18 -1.</_>
-                <_>1 2 2 9 2.</_>
-                <_>3 11 2 9 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-0.0500488989055157</threshold>
-            <left_val>0.6899513006210327</left_val>
-            <right_val>0.4703742861747742</right_val></_></_>
-        <_>
-          <!-- tree 87 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>12 4 4 12 -1.</_>
-                <_>12 10 4 6 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-0.0366354808211327</threshold>
-            <left_val>0.2217779010534287</left_val>
-            <right_val>0.5191826224327087</right_val></_></_>
-        <_>
-          <!-- tree 88 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>0 0 1 6 -1.</_>
-                <_>0 2 1 2 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>2.4273579474538565e-003</threshold>
-            <left_val>0.5136224031448364</left_val>
-            <right_val>0.3497397899627686</right_val></_></_>
-        <_>
-          <!-- tree 89 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>9 11 2 3 -1.</_>
-                <_>9 12 2 1 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>1.9558030180633068e-003</threshold>
-            <left_val>0.4826192855834961</left_val>
-            <right_val>0.6408380866050720</right_val></_></_>
-        <_>
-          <!-- tree 90 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>8 7 4 3 -1.</_>
-                <_>8 8 4 1 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-1.7494610510766506e-003</threshold>
-            <left_val>0.3922835886478424</left_val>
-            <right_val>0.5272685289382935</right_val></_></_>
-        <_>
-          <!-- tree 91 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>10 7 3 2 -1.</_>
-                <_>11 7 1 2 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>0.0139550799503922</threshold>
-            <left_val>0.5078201889991760</left_val>
-            <right_val>0.8416504859924316</right_val></_></_>
-        <_>
-          <!-- tree 92 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>7 7 3 2 -1.</_>
-                <_>8 7 1 2 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-2.1896739781368524e-004</threshold>
-            <left_val>0.5520489811897278</left_val>
-            <right_val>0.4314234852790833</right_val></_></_>
-        <_>
-          <!-- tree 93 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>9 4 6 1 -1.</_>
-                <_>11 4 2 1 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-1.5131309628486633e-003</threshold>
-            <left_val>0.3934605121612549</left_val>
-            <right_val>0.5382571220397949</right_val></_></_>
-        <_>
-          <!-- tree 94 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>8 7 2 3 -1.</_>
-                <_>9 7 1 3 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-4.3622800149023533e-003</threshold>
-            <left_val>0.7370628714561462</left_val>
-            <right_val>0.4736475944519043</right_val></_></_>
-        <_>
-          <!-- tree 95 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>12 7 8 6 -1.</_>
-                <_>16 7 4 3 2.</_>
-                <_>12 10 4 3 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>0.0651605874300003</threshold>
-            <left_val>0.5159279704093933</left_val>
-            <right_val>0.3281595110893250</right_val></_></_>
-        <_>
-          <!-- tree 96 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>0 7 8 6 -1.</_>
-                <_>0 7 4 3 2.</_>
-                <_>4 10 4 3 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-2.3567399475723505e-003</threshold>
-            <left_val>0.3672826886177063</left_val>
-            <right_val>0.5172886252403259</right_val></_></_>
-        <_>
-          <!-- tree 97 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>18 2 2 10 -1.</_>
-                <_>19 2 1 5 2.</_>
-                <_>18 7 1 5 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>0.0151466596871614</threshold>
-            <left_val>0.5031493902206421</left_val>
-            <right_val>0.6687604188919067</right_val></_></_>
-        <_>
-          <!-- tree 98 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>0 2 6 4 -1.</_>
-                <_>3 2 3 4 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-0.0228509604930878</threshold>
-            <left_val>0.6767519712448120</left_val>
-            <right_val>0.4709596931934357</right_val></_></_>
-        <_>
-          <!-- tree 99 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>9 4 6 1 -1.</_>
-                <_>11 4 2 1 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>4.8867650330066681e-003</threshold>
-            <left_val>0.5257998108863831</left_val>
-            <right_val>0.4059878885746002</right_val></_></_>
-        <_>
-          <!-- tree 100 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>7 15 2 2 -1.</_>
-                <_>7 15 1 1 2.</_>
-                <_>8 16 1 1 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>1.7619599821045995e-003</threshold>
-            <left_val>0.4696272909641266</left_val>
-            <right_val>0.6688278913497925</right_val></_></_>
-        <_>
-          <!-- tree 101 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>11 13 1 6 -1.</_>
-                <_>11 16 1 3 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-1.2942519970238209e-003</threshold>
-            <left_val>0.4320712983608246</left_val>
-            <right_val>0.5344281792640686</right_val></_></_>
-        <_>
-          <!-- tree 102 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>8 13 1 6 -1.</_>
-                <_>8 16 1 3 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>0.0109299495816231</threshold>
-            <left_val>0.4997706115245819</left_val>
-            <right_val>0.1637486070394516</right_val></_></_>
-        <_>
-          <!-- tree 103 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>14 3 2 1 -1.</_>
-                <_>14 3 1 1 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>2.9958489903947338e-005</threshold>
-            <left_val>0.4282417893409729</left_val>
-            <right_val>0.5633224248886108</right_val></_></_>
-        <_>
-          <!-- tree 104 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>8 15 2 3 -1.</_>
-                <_>8 16 2 1 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-6.5884361974895000e-003</threshold>
-            <left_val>0.6772121191024780</left_val>
-            <right_val>0.4700526893138886</right_val></_></_>
-        <_>
-          <!-- tree 105 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>12 15 7 4 -1.</_>
-                <_>12 17 7 2 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>3.2527779694646597e-003</threshold>
-            <left_val>0.5313397049903870</left_val>
-            <right_val>0.4536148905754089</right_val></_></_>
-        <_>
-          <!-- tree 106 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>4 14 12 3 -1.</_>
-                <_>4 15 12 1 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-4.0435739792883396e-003</threshold>
-            <left_val>0.5660061836242676</left_val>
-            <right_val>0.4413388967514038</right_val></_></_>
-        <_>
-          <!-- tree 107 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>10 3 3 2 -1.</_>
-                <_>11 3 1 2 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-1.2523540062829852e-003</threshold>
-            <left_val>0.3731913864612579</left_val>
-            <right_val>0.5356451869010925</right_val></_></_>
-        <_>
-          <!-- tree 108 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>4 12 2 2 -1.</_>
-                <_>4 13 2 1 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>1.9246719602961093e-004</threshold>
-            <left_val>0.5189986228942871</left_val>
-            <right_val>0.3738811016082764</right_val></_></_>
-        <_>
-          <!-- tree 109 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>10 11 4 6 -1.</_>
-                <_>10 14 4 3 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-0.0385896712541580</threshold>
-            <left_val>0.2956373989582062</left_val>
-            <right_val>0.5188810825347900</right_val></_></_>
-        <_>
-          <!-- tree 110 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>7 13 2 2 -1.</_>
-                <_>7 13 1 1 2.</_>
-                <_>8 14 1 1 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>1.5489870565943420e-004</threshold>
-            <left_val>0.4347135126590729</left_val>
-            <right_val>0.5509533286094666</right_val></_></_>
-        <_>
-          <!-- tree 111 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>4 11 14 4 -1.</_>
-                <_>11 11 7 2 2.</_>
-                <_>4 13 7 2 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-0.0337638482451439</threshold>
-            <left_val>0.3230330049991608</left_val>
-            <right_val>0.5195475816726685</right_val></_></_>
-        <_>
-          <!-- tree 112 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>1 18 18 2 -1.</_>
-                <_>7 18 6 2 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-8.2657067105174065e-003</threshold>
-            <left_val>0.5975489020347595</left_val>
-            <right_val>0.4552114009857178</right_val></_></_>
-        <_>
-          <!-- tree 113 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>11 18 2 2 -1.</_>
-                <_>12 18 1 1 2.</_>
-                <_>11 19 1 1 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>1.4481440302915871e-005</threshold>
-            <left_val>0.4745678007602692</left_val>
-            <right_val>0.5497426986694336</right_val></_></_>
-        <_>
-          <!-- tree 114 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>7 18 2 2 -1.</_>
-                <_>7 18 1 1 2.</_>
-                <_>8 19 1 1 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>1.4951299817766994e-005</threshold>
-            <left_val>0.4324473142623901</left_val>
-            <right_val>0.5480644106864929</right_val></_></_>
-        <_>
-          <!-- tree 115 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>12 18 8 2 -1.</_>
-                <_>12 19 8 1 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-0.0187417995184660</threshold>
-            <left_val>0.1580052971839905</left_val>
-            <right_val>0.5178533196449280</right_val></_></_>
-        <_>
-          <!-- tree 116 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>7 14 6 2 -1.</_>
-                <_>7 15 6 1 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>1.7572239739820361e-003</threshold>
-            <left_val>0.4517636895179749</left_val>
-            <right_val>0.5773764252662659</right_val></_></_>
-        <_>
-          <!-- tree 117 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>8 12 4 8 -1.</_>
-                <_>10 12 2 4 2.</_>
-                <_>8 16 2 4 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-3.1391119118779898e-003</threshold>
-            <left_val>0.4149647951126099</left_val>
-            <right_val>0.5460842251777649</right_val></_></_>
-        <_>
-          <!-- tree 118 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>4 9 3 3 -1.</_>
-                <_>4 10 3 1 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>6.6656779381446540e-005</threshold>
-            <left_val>0.4039090871810913</left_val>
-            <right_val>0.5293084979057312</right_val></_></_>
-        <_>
-          <!-- tree 119 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>7 10 6 2 -1.</_>
-                <_>9 10 2 2 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>6.7743421532213688e-003</threshold>
-            <left_val>0.4767651855945587</left_val>
-            <right_val>0.6121956110000610</right_val></_></_>
-        <_>
-          <!-- tree 120 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>5 0 4 15 -1.</_>
-                <_>7 0 2 15 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-7.3868161998689175e-003</threshold>
-            <left_val>0.3586258888244629</left_val>
-            <right_val>0.5187280774116516</right_val></_></_>
-        <_>
-          <!-- tree 121 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>8 6 12 14 -1.</_>
-                <_>12 6 4 14 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>0.0140409301966429</threshold>
-            <left_val>0.4712139964103699</left_val>
-            <right_val>0.5576155781745911</right_val></_></_>
-        <_>
-          <!-- tree 122 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>5 16 3 3 -1.</_>
-                <_>5 17 3 1 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-5.5258329957723618e-003</threshold>
-            <left_val>0.2661027014255524</left_val>
-            <right_val>0.5039281249046326</right_val></_></_>
-        <_>
-          <!-- tree 123 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>8 1 12 19 -1.</_>
-                <_>12 1 4 19 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>0.3868423998355866</threshold>
-            <left_val>0.5144339799880981</left_val>
-            <right_val>0.2525899112224579</right_val></_></_>
-        <_>
-          <!-- tree 124 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>3 0 3 2 -1.</_>
-                <_>3 1 3 1 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>1.1459240340627730e-004</threshold>
-            <left_val>0.4284994900226593</left_val>
-            <right_val>0.5423371195793152</right_val></_></_>
-        <_>
-          <!-- tree 125 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>10 12 4 5 -1.</_>
-                <_>10 12 2 5 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-0.0184675697237253</threshold>
-            <left_val>0.3885835111141205</left_val>
-            <right_val>0.5213062167167664</right_val></_></_>
-        <_>
-          <!-- tree 126 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>6 12 4 5 -1.</_>
-                <_>8 12 2 5 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-4.5907011372037232e-004</threshold>
-            <left_val>0.5412563085556030</left_val>
-            <right_val>0.4235909879207611</right_val></_></_>
-        <_>
-          <!-- tree 127 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>11 11 2 2 -1.</_>
-                <_>12 11 1 1 2.</_>
-                <_>11 12 1 1 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>1.2527540093287826e-003</threshold>
-            <left_val>0.4899305105209351</left_val>
-            <right_val>0.6624091267585754</right_val></_></_>
-        <_>
-          <!-- tree 128 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>0 2 3 6 -1.</_>
-                <_>0 4 3 2 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>1.4910609461367130e-003</threshold>
-            <left_val>0.5286778211593628</left_val>
-            <right_val>0.4040051996707916</right_val></_></_>
-        <_>
-          <!-- tree 129 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>11 11 2 2 -1.</_>
-                <_>12 11 1 1 2.</_>
-                <_>11 12 1 1 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-7.5435562757775187e-004</threshold>
-            <left_val>0.6032990217208862</left_val>
-            <right_val>0.4795120060443878</right_val></_></_>
-        <_>
-          <!-- tree 130 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>7 6 4 10 -1.</_>
-                <_>7 11 4 5 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-6.9478838704526424e-003</threshold>
-            <left_val>0.4084401130676270</left_val>
-            <right_val>0.5373504161834717</right_val></_></_>
-        <_>
-          <!-- tree 131 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>11 11 2 2 -1.</_>
-                <_>12 11 1 1 2.</_>
-                <_>11 12 1 1 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>2.8092920547351241e-004</threshold>
-            <left_val>0.4846062958240509</left_val>
-            <right_val>0.5759382247924805</right_val></_></_>
-        <_>
-          <!-- tree 132 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>2 13 5 2 -1.</_>
-                <_>2 14 5 1 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>9.6073717577382922e-004</threshold>
-            <left_val>0.5164741277694702</left_val>
-            <right_val>0.3554979860782623</right_val></_></_>
-        <_>
-          <!-- tree 133 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>11 11 2 2 -1.</_>
-                <_>12 11 1 1 2.</_>
-                <_>11 12 1 1 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-2.6883929967880249e-004</threshold>
-            <left_val>0.5677582025527954</left_val>
-            <right_val>0.4731765985488892</right_val></_></_>
-        <_>
-          <!-- tree 134 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>7 11 2 2 -1.</_>
-                <_>7 11 1 1 2.</_>
-                <_>8 12 1 1 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>2.1599370520561934e-003</threshold>
-            <left_val>0.4731487035751343</left_val>
-            <right_val>0.7070567011833191</right_val></_></_>
-        <_>
-          <!-- tree 135 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>14 13 3 3 -1.</_>
-                <_>14 14 3 1 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>5.6235301308333874e-003</threshold>
-            <left_val>0.5240243077278137</left_val>
-            <right_val>0.2781791985034943</right_val></_></_>
-        <_>
-          <!-- tree 136 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>3 13 3 3 -1.</_>
-                <_>3 14 3 1 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-5.0243991427123547e-003</threshold>
-            <left_val>0.2837013900279999</left_val>
-            <right_val>0.5062304139137268</right_val></_></_>
-        <_>
-          <!-- tree 137 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>9 14 2 3 -1.</_>
-                <_>9 15 2 1 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-9.7611639648675919e-003</threshold>
-            <left_val>0.7400717735290527</left_val>
-            <right_val>0.4934569001197815</right_val></_></_>
-        <_>
-          <!-- tree 138 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>8 7 3 3 -1.</_>
-                <_>8 8 3 1 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>4.1515100747346878e-003</threshold>
-            <left_val>0.5119131207466126</left_val>
-            <right_val>0.3407008051872253</right_val></_></_>
-        <_>
-          <!-- tree 139 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>13 5 3 3 -1.</_>
-                <_>13 6 3 1 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>6.2465080991387367e-003</threshold>
-            <left_val>0.4923788011074066</left_val>
-            <right_val>0.6579058766365051</right_val></_></_>
-        <_>
-          <!-- tree 140 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>0 9 5 3 -1.</_>
-                <_>0 10 5 1 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-7.0597478188574314e-003</threshold>
-            <left_val>0.2434711009263992</left_val>
-            <right_val>0.5032842159271240</right_val></_></_>
-        <_>
-          <!-- tree 141 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>13 5 3 3 -1.</_>
-                <_>13 6 3 1 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-2.0587709732353687e-003</threshold>
-            <left_val>0.5900310873985291</left_val>
-            <right_val>0.4695087075233460</right_val></_></_>
-        <_>
-          <!-- tree 142 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>9 12 2 8 -1.</_>
-                <_>9 12 1 4 2.</_>
-                <_>10 16 1 4 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-2.4146060459315777e-003</threshold>
-            <left_val>0.3647317886352539</left_val>
-            <right_val>0.5189201831817627</right_val></_></_>
-        <_>
-          <!-- tree 143 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>11 7 2 2 -1.</_>
-                <_>12 7 1 1 2.</_>
-                <_>11 8 1 1 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-1.4817609917372465e-003</threshold>
-            <left_val>0.6034948229789734</left_val>
-            <right_val>0.4940128028392792</right_val></_></_>
-        <_>
-          <!-- tree 144 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>0 16 6 4 -1.</_>
-                <_>3 16 3 4 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-6.3016400672495365e-003</threshold>
-            <left_val>0.5818989872932434</left_val>
-            <right_val>0.4560427963733673</right_val></_></_>
-        <_>
-          <!-- tree 145 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>10 6 2 3 -1.</_>
-                <_>10 7 2 1 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>3.4763428848236799e-003</threshold>
-            <left_val>0.5217475891113281</left_val>
-            <right_val>0.3483993113040924</right_val></_></_>
-        <_>
-          <!-- tree 146 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>9 5 2 6 -1.</_>
-                <_>9 7 2 2 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-0.0222508702427149</threshold>
-            <left_val>0.2360700070858002</left_val>
-            <right_val>0.5032082796096802</right_val></_></_>
-        <_>
-          <!-- tree 147 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>12 15 8 4 -1.</_>
-                <_>12 15 4 4 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-0.0306125506758690</threshold>
-            <left_val>0.6499186754226685</left_val>
-            <right_val>0.4914919137954712</right_val></_></_>
-        <_>
-          <!-- tree 148 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>0 14 8 6 -1.</_>
-                <_>4 14 4 6 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>0.0130574796348810</threshold>
-            <left_val>0.4413323104381561</left_val>
-            <right_val>0.5683764219284058</right_val></_></_>
-        <_>
-          <!-- tree 149 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>9 0 3 2 -1.</_>
-                <_>10 0 1 2 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-6.0095742810517550e-004</threshold>
-            <left_val>0.4359731078147888</left_val>
-            <right_val>0.5333483219146729</right_val></_></_>
-        <_>
-          <!-- tree 150 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>4 15 4 2 -1.</_>
-                <_>6 15 2 2 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-4.1514250915497541e-004</threshold>
-            <left_val>0.5504062771797180</left_val>
-            <right_val>0.4326060116291046</right_val></_></_>
-        <_>
-          <!-- tree 151 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>12 7 3 13 -1.</_>
-                <_>13 7 1 13 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-0.0137762902304530</threshold>
-            <left_val>0.4064112901687622</left_val>
-            <right_val>0.5201548933982849</right_val></_></_>
-        <_>
-          <!-- tree 152 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>5 7 3 13 -1.</_>
-                <_>6 7 1 13 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-0.0322965085506439</threshold>
-            <left_val>0.0473519712686539</left_val>
-            <right_val>0.4977194964885712</right_val></_></_>
-        <_>
-          <!-- tree 153 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>9 6 3 9 -1.</_>
-                <_>9 9 3 3 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>0.0535569787025452</threshold>
-            <left_val>0.4881733059883118</left_val>
-            <right_val>0.6666939258575440</right_val></_></_>
-        <_>
-          <!-- tree 154 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>4 4 7 12 -1.</_>
-                <_>4 10 7 6 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>8.1889545544981956e-003</threshold>
-            <left_val>0.5400037169456482</left_val>
-            <right_val>0.4240820109844208</right_val></_></_>
-        <_>
-          <!-- tree 155 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>12 12 2 2 -1.</_>
-                <_>13 12 1 1 2.</_>
-                <_>12 13 1 1 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>2.1055320394225419e-004</threshold>
-            <left_val>0.4802047908306122</left_val>
-            <right_val>0.5563852787017822</right_val></_></_>
-        <_>
-          <!-- tree 156 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>6 12 2 2 -1.</_>
-                <_>6 12 1 1 2.</_>
-                <_>7 13 1 1 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-2.4382730480283499e-003</threshold>
-            <left_val>0.7387793064117432</left_val>
-            <right_val>0.4773685038089752</right_val></_></_>
-        <_>
-          <!-- tree 157 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>8 9 4 2 -1.</_>
-                <_>10 9 2 1 2.</_>
-                <_>8 10 2 1 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>3.2835570164024830e-003</threshold>
-            <left_val>0.5288546085357666</left_val>
-            <right_val>0.3171291947364807</right_val></_></_>
-        <_>
-          <!-- tree 158 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>3 6 2 2 -1.</_>
-                <_>3 6 1 1 2.</_>
-                <_>4 7 1 1 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>2.3729570675641298e-003</threshold>
-            <left_val>0.4750812947750092</left_val>
-            <right_val>0.7060170769691467</right_val></_></_>
-        <_>
-          <!-- tree 159 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>16 6 3 2 -1.</_>
-                <_>16 7 3 1 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-1.4541699783876538e-003</threshold>
-            <left_val>0.3811730146408081</left_val>
-            <right_val>0.5330739021301270</right_val></_></_></trees>
-      <stage_threshold>79.2490768432617190</stage_threshold>
-      <parent>16</parent>
-      <next>-1</next></_>
-    <_>
-      <!-- stage 18 -->
-      <trees>
-        <_>
-          <!-- tree 0 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>0 7 19 4 -1.</_>
-                <_>0 9 19 2 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>0.0557552389800549</threshold>
-            <left_val>0.4019156992435455</left_val>
-            <right_val>0.6806036829948425</right_val></_></_>
-        <_>
-          <!-- tree 1 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>10 2 10 1 -1.</_>
-                <_>10 2 5 1 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>2.4730248842388391e-003</threshold>
-            <left_val>0.3351148962974548</left_val>
-            <right_val>0.5965719819068909</right_val></_></_>
-        <_>
-          <!-- tree 2 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>9 4 2 12 -1.</_>
-                <_>9 10 2 6 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-3.5031698644161224e-004</threshold>
-            <left_val>0.5557708144187927</left_val>
-            <right_val>0.3482286930084229</right_val></_></_>
-        <_>
-          <!-- tree 3 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>12 18 4 1 -1.</_>
-                <_>12 18 2 1 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>5.4167630150914192e-004</threshold>
-            <left_val>0.4260858893394470</left_val>
-            <right_val>0.5693380832672119</right_val></_></_>
-        <_>
-          <!-- tree 4 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>1 7 6 4 -1.</_>
-                <_>1 7 3 2 2.</_>
-                <_>4 9 3 2 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>7.7193678589537740e-004</threshold>
-            <left_val>0.3494240045547485</left_val>
-            <right_val>0.5433688759803772</right_val></_></_>
-        <_>
-          <!-- tree 5 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>12 0 6 13 -1.</_>
-                <_>14 0 2 13 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-1.5999219613149762e-003</threshold>
-            <left_val>0.4028499126434326</left_val>
-            <right_val>0.5484359264373779</right_val></_></_>
-        <_>
-          <!-- tree 6 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>2 0 6 13 -1.</_>
-                <_>4 0 2 13 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-1.1832080053864047e-004</threshold>
-            <left_val>0.3806901872158051</left_val>
-            <right_val>0.5425465106964111</right_val></_></_>
-        <_>
-          <!-- tree 7 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>10 5 8 8 -1.</_>
-                <_>10 9 8 4 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>3.2909031142480671e-004</threshold>
-            <left_val>0.2620100080966950</left_val>
-            <right_val>0.5429521799087524</right_val></_></_>
-        <_>
-          <!-- tree 8 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>8 3 2 5 -1.</_>
-                <_>9 3 1 5 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>2.9518108931370080e-004</threshold>
-            <left_val>0.3799768984317780</left_val>
-            <right_val>0.5399264097213745</right_val></_></_>
-        <_>
-          <!-- tree 9 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>8 4 9 1 -1.</_>
-                <_>11 4 3 1 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>9.0466710389591753e-005</threshold>
-            <left_val>0.4433645009994507</left_val>
-            <right_val>0.5440226197242737</right_val></_></_>
-        <_>
-          <!-- tree 10 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>3 4 9 1 -1.</_>
-                <_>6 4 3 1 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>1.5007190086180344e-005</threshold>
-            <left_val>0.3719654977321625</left_val>
-            <right_val>0.5409119725227356</right_val></_></_>
-        <_>
-          <!-- tree 11 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>1 0 18 10 -1.</_>
-                <_>7 0 6 10 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>0.1393561065196991</threshold>
-            <left_val>0.5525395870208740</left_val>
-            <right_val>0.4479042887687683</right_val></_></_>
-        <_>
-          <!-- tree 12 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>7 17 5 3 -1.</_>
-                <_>7 18 5 1 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>1.6461990308016539e-003</threshold>
-            <left_val>0.4264501035213471</left_val>
-            <right_val>0.5772169828414917</right_val></_></_>
-        <_>
-          <!-- tree 13 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>7 11 6 1 -1.</_>
-                <_>9 11 2 1 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>4.9984431825578213e-004</threshold>
-            <left_val>0.4359526038169861</left_val>
-            <right_val>0.5685871243476868</right_val></_></_>
-        <_>
-          <!-- tree 14 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>2 2 3 2 -1.</_>
-                <_>2 3 3 1 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-1.0971280280500650e-003</threshold>
-            <left_val>0.3390136957168579</left_val>
-            <right_val>0.5205408930778503</right_val></_></_>
-        <_>
-          <!-- tree 15 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>8 12 4 2 -1.</_>
-                <_>8 13 4 1 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>6.6919892560690641e-004</threshold>
-            <left_val>0.4557456076145172</left_val>
-            <right_val>0.5980659723281860</right_val></_></_>
-        <_>
-          <!-- tree 16 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>6 10 3 6 -1.</_>
-                <_>6 13 3 3 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>8.6471042595803738e-004</threshold>
-            <left_val>0.5134841203689575</left_val>
-            <right_val>0.2944033145904541</right_val></_></_>
-        <_>
-          <!-- tree 17 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>11 4 2 4 -1.</_>
-                <_>11 4 1 4 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-2.7182599296793342e-004</threshold>
-            <left_val>0.3906578123569489</left_val>
-            <right_val>0.5377181172370911</right_val></_></_>
-        <_>
-          <!-- tree 18 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>7 4 2 4 -1.</_>
-                <_>8 4 1 4 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>3.0249499104684219e-005</threshold>
-            <left_val>0.3679609894752502</left_val>
-            <right_val>0.5225688815116882</right_val></_></_>
-        <_>
-          <!-- tree 19 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>9 6 2 4 -1.</_>
-                <_>9 6 1 4 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-8.5225896909832954e-003</threshold>
-            <left_val>0.7293102145195007</left_val>
-            <right_val>0.4892365038394928</right_val></_></_>
-        <_>
-          <!-- tree 20 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>6 13 8 3 -1.</_>
-                <_>6 14 8 1 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>1.6705560265108943e-003</threshold>
-            <left_val>0.4345324933528900</left_val>
-            <right_val>0.5696138143539429</right_val></_></_>
-        <_>
-          <!-- tree 21 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>9 15 3 4 -1.</_>
-                <_>10 15 1 4 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-7.1433838456869125e-003</threshold>
-            <left_val>0.2591280043125153</left_val>
-            <right_val>0.5225623846054077</right_val></_></_>
-        <_>
-          <!-- tree 22 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>9 2 2 17 -1.</_>
-                <_>10 2 1 17 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-0.0163193698972464</threshold>
-            <left_val>0.6922279000282288</left_val>
-            <right_val>0.4651575982570648</right_val></_></_>
-        <_>
-          <!-- tree 23 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>7 0 6 1 -1.</_>
-                <_>9 0 2 1 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>4.8034260980784893e-003</threshold>
-            <left_val>0.5352262854576111</left_val>
-            <right_val>0.3286302983760834</right_val></_></_>
-        <_>
-          <!-- tree 24 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>8 15 3 4 -1.</_>
-                <_>9 15 1 4 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-7.5421929359436035e-003</threshold>
-            <left_val>0.2040544003248215</left_val>
-            <right_val>0.5034546256065369</right_val></_></_>
-        <_>
-          <!-- tree 25 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>7 13 7 3 -1.</_>
-                <_>7 14 7 1 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-0.0143631100654602</threshold>
-            <left_val>0.6804888844490051</left_val>
-            <right_val>0.4889059066772461</right_val></_></_>
-        <_>
-          <!-- tree 26 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>8 16 3 3 -1.</_>
-                <_>9 16 1 3 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>8.9063588529825211e-004</threshold>
-            <left_val>0.5310695767402649</left_val>
-            <right_val>0.3895480930805206</right_val></_></_>
-        <_>
-          <!-- tree 27 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>6 2 8 10 -1.</_>
-                <_>6 7 8 5 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-4.4060191139578819e-003</threshold>
-            <left_val>0.5741562843322754</left_val>
-            <right_val>0.4372426867485046</right_val></_></_>
-        <_>
-          <!-- tree 28 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>2 5 8 8 -1.</_>
-                <_>2 9 8 4 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-1.8862540309783071e-004</threshold>
-            <left_val>0.2831785976886749</left_val>
-            <right_val>0.5098205208778381</right_val></_></_>
-        <_>
-          <!-- tree 29 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>14 16 2 2 -1.</_>
-                <_>14 17 2 1 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-3.7979281041771173e-003</threshold>
-            <left_val>0.3372507989406586</left_val>
-            <right_val>0.5246580243110657</right_val></_></_>
-        <_>
-          <!-- tree 30 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>4 16 2 2 -1.</_>
-                <_>4 17 2 1 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>1.4627049677073956e-004</threshold>
-            <left_val>0.5306674242019653</left_val>
-            <right_val>0.3911710083484650</right_val></_></_>
-        <_>
-          <!-- tree 31 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>10 11 4 6 -1.</_>
-                <_>10 14 4 3 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-4.9164638767251745e-005</threshold>
-            <left_val>0.5462496280670166</left_val>
-            <right_val>0.3942720890045166</right_val></_></_>
-        <_>
-          <!-- tree 32 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>6 11 4 6 -1.</_>
-                <_>6 14 4 3 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-0.0335825011134148</threshold>
-            <left_val>0.2157824039459229</left_val>
-            <right_val>0.5048211812973023</right_val></_></_>
-        <_>
-          <!-- tree 33 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>10 14 1 3 -1.</_>
-                <_>10 15 1 1 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-3.5339309833943844e-003</threshold>
-            <left_val>0.6465312242507935</left_val>
-            <right_val>0.4872696995735169</right_val></_></_>
-        <_>
-          <!-- tree 34 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>8 14 4 3 -1.</_>
-                <_>8 15 4 1 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>5.0144111737608910e-003</threshold>
-            <left_val>0.4617668092250824</left_val>
-            <right_val>0.6248074769973755</right_val></_></_>
-        <_>
-          <!-- tree 35 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>10 0 4 6 -1.</_>
-                <_>12 0 2 3 2.</_>
-                <_>10 3 2 3 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>0.0188173707574606</threshold>
-            <left_val>0.5220689177513123</left_val>
-            <right_val>0.2000052034854889</right_val></_></_>
-        <_>
-          <!-- tree 36 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>0 3 20 2 -1.</_>
-                <_>0 4 20 1 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-1.3434339780360460e-003</threshold>
-            <left_val>0.4014537930488586</left_val>
-            <right_val>0.5301619768142700</right_val></_></_>
-        <_>
-          <!-- tree 37 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>12 0 8 2 -1.</_>
-                <_>16 0 4 1 2.</_>
-                <_>12 1 4 1 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>1.7557960236445069e-003</threshold>
-            <left_val>0.4794039130210877</left_val>
-            <right_val>0.5653169751167297</right_val></_></_>
-        <_>
-          <!-- tree 38 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>2 12 10 8 -1.</_>
-                <_>2 16 10 4 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-0.0956374630331993</threshold>
-            <left_val>0.2034195065498352</left_val>
-            <right_val>0.5006706714630127</right_val></_></_>
-        <_>
-          <!-- tree 39 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>17 7 2 10 -1.</_>
-                <_>18 7 1 5 2.</_>
-                <_>17 12 1 5 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-0.0222412291914225</threshold>
-            <left_val>0.7672473192214966</left_val>
-            <right_val>0.5046340227127075</right_val></_></_>
-        <_>
-          <!-- tree 40 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>1 7 2 10 -1.</_>
-                <_>1 7 1 5 2.</_>
-                <_>2 12 1 5 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-0.0155758196488023</threshold>
-            <left_val>0.7490342259407044</left_val>
-            <right_val>0.4755851030349731</right_val></_></_>
-        <_>
-          <!-- tree 41 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>15 10 3 6 -1.</_>
-                <_>15 12 3 2 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>5.3599118255078793e-003</threshold>
-            <left_val>0.5365303754806519</left_val>
-            <right_val>0.4004670977592468</right_val></_></_>
-        <_>
-          <!-- tree 42 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>4 4 6 2 -1.</_>
-                <_>6 4 2 2 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-0.0217634998261929</threshold>
-            <left_val>0.0740154981613159</left_val>
-            <right_val>0.4964174926280975</right_val></_></_>
-        <_>
-          <!-- tree 43 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>0 5 20 6 -1.</_>
-                <_>0 7 20 2 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-0.1656159013509750</threshold>
-            <left_val>0.2859103083610535</left_val>
-            <right_val>0.5218086242675781</right_val></_></_>
-        <_>
-          <!-- tree 44 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>0 0 8 2 -1.</_>
-                <_>0 0 4 1 2.</_>
-                <_>4 1 4 1 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>1.6461320046801120e-004</threshold>
-            <left_val>0.4191615879535675</left_val>
-            <right_val>0.5380793213844299</right_val></_></_>
-        <_>
-          <!-- tree 45 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>1 0 18 4 -1.</_>
-                <_>7 0 6 4 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-8.9077502489089966e-003</threshold>
-            <left_val>0.6273192763328552</left_val>
-            <right_val>0.4877404868602753</right_val></_></_>
-        <_>
-          <!-- tree 46 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>1 13 6 2 -1.</_>
-                <_>1 14 6 1 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>8.6346449097618461e-004</threshold>
-            <left_val>0.5159940719604492</left_val>
-            <right_val>0.3671025931835175</right_val></_></_>
-        <_>
-          <!-- tree 47 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>10 8 3 4 -1.</_>
-                <_>11 8 1 4 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-1.3751760125160217e-003</threshold>
-            <left_val>0.5884376764297485</left_val>
-            <right_val>0.4579083919525147</right_val></_></_>
-        <_>
-          <!-- tree 48 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>6 1 6 1 -1.</_>
-                <_>8 1 2 1 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-1.4081239933148026e-003</threshold>
-            <left_val>0.3560509979724884</left_val>
-            <right_val>0.5139945149421692</right_val></_></_>
-        <_>
-          <!-- tree 49 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>8 14 4 3 -1.</_>
-                <_>8 15 4 1 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-3.9342888630926609e-003</threshold>
-            <left_val>0.5994288921356201</left_val>
-            <right_val>0.4664272069931030</right_val></_></_>
-        <_>
-          <!-- tree 50 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>1 6 18 2 -1.</_>
-                <_>10 6 9 2 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-0.0319669283926487</threshold>
-            <left_val>0.3345462083816528</left_val>
-            <right_val>0.5144183039665222</right_val></_></_>
-        <_>
-          <!-- tree 51 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>15 11 1 2 -1.</_>
-                <_>15 12 1 1 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-1.5089280168467667e-005</threshold>
-            <left_val>0.5582656264305115</left_val>
-            <right_val>0.4414057135581970</right_val></_></_>
-        <_>
-          <!-- tree 52 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>6 5 1 2 -1.</_>
-                <_>6 6 1 1 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>5.1994470413774252e-004</threshold>
-            <left_val>0.4623680114746094</left_val>
-            <right_val>0.6168993711471558</right_val></_></_>
-        <_>
-          <!-- tree 53 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>13 4 1 3 -1.</_>
-                <_>13 5 1 1 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-3.4220460802316666e-003</threshold>
-            <left_val>0.6557074785232544</left_val>
-            <right_val>0.4974805116653442</right_val></_></_>
-        <_>
-          <!-- tree 54 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>2 15 1 2 -1.</_>
-                <_>2 16 1 1 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>1.7723299970384687e-004</threshold>
-            <left_val>0.5269501805305481</left_val>
-            <right_val>0.3901908099651337</right_val></_></_>
-        <_>
-          <!-- tree 55 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>12 4 4 3 -1.</_>
-                <_>12 5 4 1 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>1.5716759953647852e-003</threshold>
-            <left_val>0.4633373022079468</left_val>
-            <right_val>0.5790457725524902</right_val></_></_>
-        <_>
-          <!-- tree 56 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>0 0 7 3 -1.</_>
-                <_>0 1 7 1 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-8.9041329920291901e-003</threshold>
-            <left_val>0.2689608037471771</left_val>
-            <right_val>0.5053591132164002</right_val></_></_>
-        <_>
-          <!-- tree 57 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>9 12 6 2 -1.</_>
-                <_>9 12 3 2 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>4.0677518700249493e-004</threshold>
-            <left_val>0.5456603169441223</left_val>
-            <right_val>0.4329898953437805</right_val></_></_>
-        <_>
-          <!-- tree 58 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>5 4 2 3 -1.</_>
-                <_>5 5 2 1 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>6.7604780197143555e-003</threshold>
-            <left_val>0.4648993909358978</left_val>
-            <right_val>0.6689761877059937</right_val></_></_>
-        <_>
-          <!-- tree 59 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>18 4 2 3 -1.</_>
-                <_>18 5 2 1 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>2.9100088868290186e-003</threshold>
-            <left_val>0.5309703946113586</left_val>
-            <right_val>0.3377839922904968</right_val></_></_>
-        <_>
-          <!-- tree 60 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>3 0 8 6 -1.</_>
-                <_>3 2 8 2 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>1.3885459629818797e-003</threshold>
-            <left_val>0.4074738919734955</left_val>
-            <right_val>0.5349133014678955</right_val></_></_>
-        <_>
-          <!-- tree 61 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>0 2 20 6 -1.</_>
-                <_>10 2 10 3 2.</_>
-                <_>0 5 10 3 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-0.0767642632126808</threshold>
-            <left_val>0.1992176026105881</left_val>
-            <right_val>0.5228242278099060</right_val></_></_>
-        <_>
-          <!-- tree 62 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>4 7 2 4 -1.</_>
-                <_>5 7 1 4 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-2.2688310127705336e-004</threshold>
-            <left_val>0.5438501834869385</left_val>
-            <right_val>0.4253072142601013</right_val></_></_>
-        <_>
-          <!-- tree 63 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>3 10 15 2 -1.</_>
-                <_>8 10 5 2 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-6.3094152137637138e-003</threshold>
-            <left_val>0.4259178936481476</left_val>
-            <right_val>0.5378909707069397</right_val></_></_>
-        <_>
-          <!-- tree 64 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>3 0 12 11 -1.</_>
-                <_>9 0 6 11 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-0.1100727990269661</threshold>
-            <left_val>0.6904156804084778</left_val>
-            <right_val>0.4721749126911163</right_val></_></_>
-        <_>
-          <!-- tree 65 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>13 0 2 6 -1.</_>
-                <_>13 0 1 6 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>2.8619659133255482e-004</threshold>
-            <left_val>0.4524914920330048</left_val>
-            <right_val>0.5548306107521057</right_val></_></_>
-        <_>
-          <!-- tree 66 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>0 19 2 1 -1.</_>
-                <_>1 19 1 1 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>2.9425329557852820e-005</threshold>
-            <left_val>0.5370373725891113</left_val>
-            <right_val>0.4236463904380798</right_val></_></_>
-        <_>
-          <!-- tree 67 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>16 10 4 10 -1.</_>
-                <_>18 10 2 5 2.</_>
-                <_>16 15 2 5 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-0.0248865708708763</threshold>
-            <left_val>0.6423557996749878</left_val>
-            <right_val>0.4969303905963898</right_val></_></_>
-        <_>
-          <!-- tree 68 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>4 8 10 3 -1.</_>
-                <_>4 9 10 1 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>0.0331488512456417</threshold>
-            <left_val>0.4988475143909454</left_val>
-            <right_val>0.1613811999559403</right_val></_></_>
-        <_>
-          <!-- tree 69 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>14 12 3 3 -1.</_>
-                <_>14 13 3 1 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>7.8491691965609789e-004</threshold>
-            <left_val>0.5416026115417481</left_val>
-            <right_val>0.4223009049892426</right_val></_></_>
-        <_>
-          <!-- tree 70 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>0 10 4 10 -1.</_>
-                <_>0 10 2 5 2.</_>
-                <_>2 15 2 5 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>4.7087189741432667e-003</threshold>
-            <left_val>0.4576328992843628</left_val>
-            <right_val>0.6027557849884033</right_val></_></_>
-        <_>
-          <!-- tree 71 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>18 3 2 6 -1.</_>
-                <_>18 5 2 2 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>2.4144479539245367e-003</threshold>
-            <left_val>0.5308973193168640</left_val>
-            <right_val>0.4422498941421509</right_val></_></_>
-        <_>
-          <!-- tree 72 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>6 6 1 3 -1.</_>
-                <_>6 7 1 1 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>1.9523180089890957e-003</threshold>
-            <left_val>0.4705634117126465</left_val>
-            <right_val>0.6663324832916260</right_val></_></_>
-        <_>
-          <!-- tree 73 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>7 7 7 2 -1.</_>
-                <_>7 8 7 1 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>1.3031980488449335e-003</threshold>
-            <left_val>0.4406126141548157</left_val>
-            <right_val>0.5526962280273438</right_val></_></_>
-        <_>
-          <!-- tree 74 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>0 3 2 6 -1.</_>
-                <_>0 5 2 2 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>4.4735497795045376e-003</threshold>
-            <left_val>0.5129023790359497</left_val>
-            <right_val>0.3301498889923096</right_val></_></_>
-        <_>
-          <!-- tree 75 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>11 1 3 1 -1.</_>
-                <_>12 1 1 1 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-2.6652868837118149e-003</threshold>
-            <left_val>0.3135471045970917</left_val>
-            <right_val>0.5175036191940308</right_val></_></_>
-        <_>
-          <!-- tree 76 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>5 0 2 6 -1.</_>
-                <_>6 0 1 6 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>1.3666770246345550e-004</threshold>
-            <left_val>0.4119370877742767</left_val>
-            <right_val>0.5306876897811890</right_val></_></_>
-        <_>
-          <!-- tree 77 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>1 1 18 14 -1.</_>
-                <_>7 1 6 14 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-0.0171264503151178</threshold>
-            <left_val>0.6177806258201599</left_val>
-            <right_val>0.4836578965187073</right_val></_></_>
-        <_>
-          <!-- tree 78 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>4 6 8 3 -1.</_>
-                <_>8 6 4 3 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-2.6601430727168918e-004</threshold>
-            <left_val>0.3654330968856812</left_val>
-            <right_val>0.5169736742973328</right_val></_></_>
-        <_>
-          <!-- tree 79 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>9 12 6 2 -1.</_>
-                <_>9 12 3 2 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-0.0229323804378510</threshold>
-            <left_val>0.3490915000438690</left_val>
-            <right_val>0.5163992047309876</right_val></_></_>
-        <_>
-          <!-- tree 80 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>5 12 6 2 -1.</_>
-                <_>8 12 3 2 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>2.3316550068557262e-003</threshold>
-            <left_val>0.5166299939155579</left_val>
-            <right_val>0.3709389865398407</right_val></_></_>
-        <_>
-          <!-- tree 81 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>10 7 3 5 -1.</_>
-                <_>11 7 1 5 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>0.0169256608933210</threshold>
-            <left_val>0.5014736056327820</left_val>
-            <right_val>0.8053988218307495</right_val></_></_>
-        <_>
-          <!-- tree 82 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>7 7 3 5 -1.</_>
-                <_>8 7 1 5 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-8.9858826249837875e-003</threshold>
-            <left_val>0.6470788717269898</left_val>
-            <right_val>0.4657020866870880</right_val></_></_>
-        <_>
-          <!-- tree 83 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>13 0 3 10 -1.</_>
-                <_>14 0 1 10 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-0.0118746999651194</threshold>
-            <left_val>0.3246378898620606</left_val>
-            <right_val>0.5258755087852478</right_val></_></_>
-        <_>
-          <!-- tree 84 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>4 11 3 2 -1.</_>
-                <_>4 12 3 1 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>1.9350569345988333e-004</threshold>
-            <left_val>0.5191941857337952</left_val>
-            <right_val>0.3839643895626068</right_val></_></_>
-        <_>
-          <!-- tree 85 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>17 3 3 6 -1.</_>
-                <_>18 3 1 6 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>5.8713490143418312e-003</threshold>
-            <left_val>0.4918133914470673</left_val>
-            <right_val>0.6187043190002441</right_val></_></_>
-        <_>
-          <!-- tree 86 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>1 8 18 10 -1.</_>
-                <_>1 13 18 5 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-0.2483879029750824</threshold>
-            <left_val>0.1836802959442139</left_val>
-            <right_val>0.4988150000572205</right_val></_></_>
-        <_>
-          <!-- tree 87 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>13 0 3 10 -1.</_>
-                <_>14 0 1 10 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>0.0122560001909733</threshold>
-            <left_val>0.5227053761482239</left_val>
-            <right_val>0.3632029891014099</right_val></_></_>
-        <_>
-          <!-- tree 88 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>9 14 2 3 -1.</_>
-                <_>9 15 2 1 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>8.3990179700776935e-004</threshold>
-            <left_val>0.4490250051021576</left_val>
-            <right_val>0.5774148106575012</right_val></_></_>
-        <_>
-          <!-- tree 89 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>16 3 3 7 -1.</_>
-                <_>17 3 1 7 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>2.5407369248569012e-003</threshold>
-            <left_val>0.4804787039756775</left_val>
-            <right_val>0.5858299136161804</right_val></_></_>
-        <_>
-          <!-- tree 90 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>4 0 3 10 -1.</_>
-                <_>5 0 1 10 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-0.0148224299773574</threshold>
-            <left_val>0.2521049976348877</left_val>
-            <right_val>0.5023537278175354</right_val></_></_>
-        <_>
-          <!-- tree 91 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>16 3 3 7 -1.</_>
-                <_>17 3 1 7 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-5.7973959483206272e-003</threshold>
-            <left_val>0.5996695756912231</left_val>
-            <right_val>0.4853715002536774</right_val></_></_>
-        <_>
-          <!-- tree 92 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>0 9 1 2 -1.</_>
-                <_>0 10 1 1 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>7.2662148158997297e-004</threshold>
-            <left_val>0.5153716802597046</left_val>
-            <right_val>0.3671779930591583</right_val></_></_>
-        <_>
-          <!-- tree 93 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>18 1 2 10 -1.</_>
-                <_>18 1 1 10 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-0.0172325801104307</threshold>
-            <left_val>0.6621719002723694</left_val>
-            <right_val>0.4994656145572662</right_val></_></_>
-        <_>
-          <!-- tree 94 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>0 1 2 10 -1.</_>
-                <_>1 1 1 10 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>7.8624086454510689e-003</threshold>
-            <left_val>0.4633395075798035</left_val>
-            <right_val>0.6256101727485657</right_val></_></_>
-        <_>
-          <!-- tree 95 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>10 16 3 4 -1.</_>
-                <_>11 16 1 4 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-4.7343620099127293e-003</threshold>
-            <left_val>0.3615573048591614</left_val>
-            <right_val>0.5281885266304016</right_val></_></_>
-        <_>
-          <!-- tree 96 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>2 8 3 3 -1.</_>
-                <_>3 8 1 3 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>8.3048478700220585e-004</threshold>
-            <left_val>0.4442889094352722</left_val>
-            <right_val>0.5550957918167114</right_val></_></_>
-        <_>
-          <!-- tree 97 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>11 0 2 6 -1.</_>
-                <_>12 0 1 3 2.</_>
-                <_>11 3 1 3 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>7.6602199114859104e-003</threshold>
-            <left_val>0.5162935256958008</left_val>
-            <right_val>0.2613354921340942</right_val></_></_>
-        <_>
-          <!-- tree 98 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>7 0 2 6 -1.</_>
-                <_>7 0 1 3 2.</_>
-                <_>8 3 1 3 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-4.1048377752304077e-003</threshold>
-            <left_val>0.2789632081985474</left_val>
-            <right_val>0.5019031763076782</right_val></_></_>
-        <_>
-          <!-- tree 99 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>16 3 3 7 -1.</_>
-                <_>17 3 1 7 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>4.8512578941881657e-003</threshold>
-            <left_val>0.4968984127044678</left_val>
-            <right_val>0.5661668181419373</right_val></_></_>
-        <_>
-          <!-- tree 100 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>1 3 3 7 -1.</_>
-                <_>2 3 1 7 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>9.9896453320980072e-004</threshold>
-            <left_val>0.4445607960224152</left_val>
-            <right_val>0.5551813244819641</right_val></_></_>
-        <_>
-          <!-- tree 101 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>14 1 6 16 -1.</_>
-                <_>16 1 2 16 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-0.2702363133430481</threshold>
-            <left_val>0.0293882098048925</left_val>
-            <right_val>0.5151314139366150</right_val></_></_>
-        <_>
-          <!-- tree 102 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>0 1 6 16 -1.</_>
-                <_>2 1 2 16 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-0.0130906803533435</threshold>
-            <left_val>0.5699399709701538</left_val>
-            <right_val>0.4447459876537323</right_val></_></_>
-        <_>
-          <!-- tree 103 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>2 0 16 8 -1.</_>
-                <_>10 0 8 4 2.</_>
-                <_>2 4 8 4 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-9.4342790544033051e-003</threshold>
-            <left_val>0.4305466115474701</left_val>
-            <right_val>0.5487895011901856</right_val></_></_>
-        <_>
-          <!-- tree 104 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>6 8 5 3 -1.</_>
-                <_>6 9 5 1 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-1.5482039889320731e-003</threshold>
-            <left_val>0.3680317103862763</left_val>
-            <right_val>0.5128080844879150</right_val></_></_>
-        <_>
-          <!-- tree 105 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>9 7 3 3 -1.</_>
-                <_>10 7 1 3 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>5.3746132180094719e-003</threshold>
-            <left_val>0.4838916957378388</left_val>
-            <right_val>0.6101555824279785</right_val></_></_>
-        <_>
-          <!-- tree 106 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>8 8 4 3 -1.</_>
-                <_>8 9 4 1 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>1.5786769799888134e-003</threshold>
-            <left_val>0.5325223207473755</left_val>
-            <right_val>0.4118548035621643</right_val></_></_>
-        <_>
-          <!-- tree 107 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>9 6 2 4 -1.</_>
-                <_>9 6 1 4 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>3.6856050137430429e-003</threshold>
-            <left_val>0.4810948073863983</left_val>
-            <right_val>0.6252303123474121</right_val></_></_>
-        <_>
-          <!-- tree 108 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>0 7 15 1 -1.</_>
-                <_>5 7 5 1 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>9.3887019902467728e-003</threshold>
-            <left_val>0.5200229883193970</left_val>
-            <right_val>0.3629410862922669</right_val></_></_>
-        <_>
-          <!-- tree 109 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>8 2 7 9 -1.</_>
-                <_>8 5 7 3 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>0.0127926301211119</threshold>
-            <left_val>0.4961709976196289</left_val>
-            <right_val>0.6738016009330750</right_val></_></_>
-        <_>
-          <!-- tree 110 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>1 7 16 4 -1.</_>
-                <_>1 7 8 2 2.</_>
-                <_>9 9 8 2 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-3.3661040943115950e-003</threshold>
-            <left_val>0.4060279130935669</left_val>
-            <right_val>0.5283598899841309</right_val></_></_>
-        <_>
-          <!-- tree 111 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>6 12 8 2 -1.</_>
-                <_>6 13 8 1 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>3.9771420415490866e-004</threshold>
-            <left_val>0.4674113988876343</left_val>
-            <right_val>0.5900775194168091</right_val></_></_>
-        <_>
-          <!-- tree 112 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>8 11 3 3 -1.</_>
-                <_>8 12 3 1 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>1.4868030557408929e-003</threshold>
-            <left_val>0.4519116878509522</left_val>
-            <right_val>0.6082053780555725</right_val></_></_>
-        <_>
-          <!-- tree 113 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>4 5 14 10 -1.</_>
-                <_>11 5 7 5 2.</_>
-                <_>4 10 7 5 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-0.0886867493391037</threshold>
-            <left_val>0.2807899117469788</left_val>
-            <right_val>0.5180991888046265</right_val></_></_>
-        <_>
-          <!-- tree 114 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>4 12 3 2 -1.</_>
-                <_>4 13 3 1 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-7.4296112870797515e-005</threshold>
-            <left_val>0.5295584201812744</left_val>
-            <right_val>0.4087625145912170</right_val></_></_>
-        <_>
-          <!-- tree 115 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>9 11 6 1 -1.</_>
-                <_>11 11 2 1 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-1.4932939848222304e-005</threshold>
-            <left_val>0.5461400151252747</left_val>
-            <right_val>0.4538542926311493</right_val></_></_>
-        <_>
-          <!-- tree 116 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>4 9 7 6 -1.</_>
-                <_>4 11 7 2 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>5.9162238612771034e-003</threshold>
-            <left_val>0.5329161286354065</left_val>
-            <right_val>0.4192134141921997</right_val></_></_>
-        <_>
-          <!-- tree 117 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>7 10 6 3 -1.</_>
-                <_>7 11 6 1 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>1.1141640134155750e-003</threshold>
-            <left_val>0.4512017965316773</left_val>
-            <right_val>0.5706217288970947</right_val></_></_>
-        <_>
-          <!-- tree 118 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>9 11 2 2 -1.</_>
-                <_>9 12 2 1 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>8.9249362645205110e-005</threshold>
-            <left_val>0.4577805995941162</left_val>
-            <right_val>0.5897638201713562</right_val></_></_>
-        <_>
-          <!-- tree 119 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>0 5 20 6 -1.</_>
-                <_>0 7 20 2 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>2.5319510605186224e-003</threshold>
-            <left_val>0.5299603939056397</left_val>
-            <right_val>0.3357639014720917</right_val></_></_>
-        <_>
-          <!-- tree 120 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>6 4 6 1 -1.</_>
-                <_>8 4 2 1 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>0.0124262003228068</threshold>
-            <left_val>0.4959059059619904</left_val>
-            <right_val>0.1346601992845535</right_val></_></_>
-        <_>
-          <!-- tree 121 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>9 11 6 1 -1.</_>
-                <_>11 11 2 1 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>0.0283357501029968</threshold>
-            <left_val>0.5117079019546509</left_val>
-            <right_val>6.1043637106195092e-004</right_val></_></_>
-        <_>
-          <!-- tree 122 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>5 11 6 1 -1.</_>
-                <_>7 11 2 1 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>6.6165882162749767e-003</threshold>
-            <left_val>0.4736349880695343</left_val>
-            <right_val>0.7011628150939941</right_val></_></_>
-        <_>
-          <!-- tree 123 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>10 16 3 4 -1.</_>
-                <_>11 16 1 4 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>8.0468766391277313e-003</threshold>
-            <left_val>0.5216417908668518</left_val>
-            <right_val>0.3282819986343384</right_val></_></_>
-        <_>
-          <!-- tree 124 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>8 7 3 3 -1.</_>
-                <_>9 7 1 3 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-1.1193980462849140e-003</threshold>
-            <left_val>0.5809860825538635</left_val>
-            <right_val>0.4563739001750946</right_val></_></_>
-        <_>
-          <!-- tree 125 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>2 12 16 8 -1.</_>
-                <_>2 16 16 4 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>0.0132775902748108</threshold>
-            <left_val>0.5398362278938294</left_val>
-            <right_val>0.4103901088237763</right_val></_></_>
-        <_>
-          <!-- tree 126 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>0 15 15 2 -1.</_>
-                <_>0 16 15 1 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>4.8794739996083081e-004</threshold>
-            <left_val>0.4249286055564880</left_val>
-            <right_val>0.5410590767860413</right_val></_></_>
-        <_>
-          <!-- tree 127 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>15 4 5 6 -1.</_>
-                <_>15 6 5 2 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>0.0112431701272726</threshold>
-            <left_val>0.5269963741302490</left_val>
-            <right_val>0.3438215851783752</right_val></_></_>
-        <_>
-          <!-- tree 128 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>9 5 2 4 -1.</_>
-                <_>10 5 1 4 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-8.9896668214350939e-004</threshold>
-            <left_val>0.5633075833320618</left_val>
-            <right_val>0.4456613063812256</right_val></_></_>
-        <_>
-          <!-- tree 129 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>8 10 9 6 -1.</_>
-                <_>8 12 9 2 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>6.6677159629762173e-003</threshold>
-            <left_val>0.5312889218330383</left_val>
-            <right_val>0.4362679123878479</right_val></_></_>
-        <_>
-          <!-- tree 130 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>2 19 15 1 -1.</_>
-                <_>7 19 5 1 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>0.0289472993463278</threshold>
-            <left_val>0.4701794981956482</left_val>
-            <right_val>0.6575797796249390</right_val></_></_>
-        <_>
-          <!-- tree 131 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>10 16 3 4 -1.</_>
-                <_>11 16 1 4 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-0.0234000496566296</threshold>
-            <left_val>0.</left_val>
-            <right_val>0.5137398838996887</right_val></_></_>
-        <_>
-          <!-- tree 132 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>0 15 20 4 -1.</_>
-                <_>0 17 20 2 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-0.0891170501708984</threshold>
-            <left_val>0.0237452797591686</left_val>
-            <right_val>0.4942430853843689</right_val></_></_>
-        <_>
-          <!-- tree 133 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>10 16 3 4 -1.</_>
-                <_>11 16 1 4 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-0.0140546001493931</threshold>
-            <left_val>0.3127323091030121</left_val>
-            <right_val>0.5117511153221130</right_val></_></_>
-        <_>
-          <!-- tree 134 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>7 16 3 4 -1.</_>
-                <_>8 16 1 4 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>8.1239398568868637e-003</threshold>
-            <left_val>0.5009049177169800</left_val>
-            <right_val>0.2520025968551636</right_val></_></_>
-        <_>
-          <!-- tree 135 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>9 16 3 3 -1.</_>
-                <_>9 17 3 1 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-4.9964650534093380e-003</threshold>
-            <left_val>0.6387143731117249</left_val>
-            <right_val>0.4927811920642853</right_val></_></_>
-        <_>
-          <!-- tree 136 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>8 11 4 6 -1.</_>
-                <_>8 14 4 3 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>3.1253970228135586e-003</threshold>
-            <left_val>0.5136849880218506</left_val>
-            <right_val>0.3680452108383179</right_val></_></_>
-        <_>
-          <!-- tree 137 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>9 6 2 12 -1.</_>
-                <_>9 10 2 4 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>6.7669642157852650e-003</threshold>
-            <left_val>0.5509843826293945</left_val>
-            <right_val>0.4363631904125214</right_val></_></_>
-        <_>
-          <!-- tree 138 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>8 17 4 3 -1.</_>
-                <_>8 18 4 1 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-2.3711440153419971e-003</threshold>
-            <left_val>0.6162335276603699</left_val>
-            <right_val>0.4586946964263916</right_val></_></_>
-        <_>
-          <!-- tree 139 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>9 18 8 2 -1.</_>
-                <_>13 18 4 1 2.</_>
-                <_>9 19 4 1 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-5.3522791713476181e-003</threshold>
-            <left_val>0.6185457706451416</left_val>
-            <right_val>0.4920490980148315</right_val></_></_>
-        <_>
-          <!-- tree 140 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>1 18 8 2 -1.</_>
-                <_>1 19 8 1 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-0.0159688591957092</threshold>
-            <left_val>0.1382617950439453</left_val>
-            <right_val>0.4983252882957459</right_val></_></_>
-        <_>
-          <!-- tree 141 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>13 5 6 15 -1.</_>
-                <_>15 5 2 15 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>4.7676060348749161e-003</threshold>
-            <left_val>0.4688057899475098</left_val>
-            <right_val>0.5490046143531799</right_val></_></_>
-        <_>
-          <!-- tree 142 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>9 8 2 2 -1.</_>
-                <_>9 9 2 1 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-2.4714691098779440e-003</threshold>
-            <left_val>0.2368514984846115</left_val>
-            <right_val>0.5003952980041504</right_val></_></_>
-        <_>
-          <!-- tree 143 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>9 5 2 3 -1.</_>
-                <_>9 5 1 3 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-7.1033788844943047e-004</threshold>
-            <left_val>0.5856394171714783</left_val>
-            <right_val>0.4721533060073853</right_val></_></_>
-        <_>
-          <!-- tree 144 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>1 5 6 15 -1.</_>
-                <_>3 5 2 15 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-0.1411755979061127</threshold>
-            <left_val>0.0869000628590584</left_val>
-            <right_val>0.4961591064929962</right_val></_></_>
-        <_>
-          <!-- tree 145 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>4 1 14 8 -1.</_>
-                <_>11 1 7 4 2.</_>
-                <_>4 5 7 4 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>0.1065180972218514</threshold>
-            <left_val>0.5138837099075317</left_val>
-            <right_val>0.1741005033254623</right_val></_></_>
-        <_>
-          <!-- tree 146 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>2 4 4 16 -1.</_>
-                <_>2 4 2 8 2.</_>
-                <_>4 12 2 8 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-0.0527447499334812</threshold>
-            <left_val>0.7353636026382446</left_val>
-            <right_val>0.4772881865501404</right_val></_></_>
-        <_>
-          <!-- tree 147 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>12 4 3 12 -1.</_>
-                <_>12 10 3 6 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-4.7431760467588902e-003</threshold>
-            <left_val>0.3884406089782715</left_val>
-            <right_val>0.5292701721191406</right_val></_></_>
-        <_>
-          <!-- tree 148 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>4 5 10 12 -1.</_>
-                <_>4 5 5 6 2.</_>
-                <_>9 11 5 6 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>9.9676765967160463e-004</threshold>
-            <left_val>0.5223492980003357</left_val>
-            <right_val>0.4003424048423767</right_val></_></_>
-        <_>
-          <!-- tree 149 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>9 14 2 3 -1.</_>
-                <_>9 15 2 1 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>8.0284131690859795e-003</threshold>
-            <left_val>0.4959106147289276</left_val>
-            <right_val>0.7212964296340942</right_val></_></_>
-        <_>
-          <!-- tree 150 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>5 4 2 3 -1.</_>
-                <_>5 5 2 1 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>8.6025858763605356e-004</threshold>
-            <left_val>0.4444884061813355</left_val>
-            <right_val>0.5538476109504700</right_val></_></_>
-        <_>
-          <!-- tree 151 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>12 2 4 10 -1.</_>
-                <_>14 2 2 5 2.</_>
-                <_>12 7 2 5 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>9.3191501218825579e-004</threshold>
-            <left_val>0.5398371219635010</left_val>
-            <right_val>0.4163244068622589</right_val></_></_>
-        <_>
-          <!-- tree 152 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>6 4 7 3 -1.</_>
-                <_>6 5 7 1 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-2.5082060601562262e-003</threshold>
-            <left_val>0.5854265093803406</left_val>
-            <right_val>0.4562500119209290</right_val></_></_>
-        <_>
-          <!-- tree 153 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>2 0 18 2 -1.</_>
-                <_>11 0 9 1 2.</_>
-                <_>2 1 9 1 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-2.1378761157393456e-003</threshold>
-            <left_val>0.4608069062232971</left_val>
-            <right_val>0.5280259251594544</right_val></_></_>
-        <_>
-          <!-- tree 154 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>0 0 18 2 -1.</_>
-                <_>0 0 9 1 2.</_>
-                <_>9 1 9 1 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-2.1546049974858761e-003</threshold>
-            <left_val>0.3791126906871796</left_val>
-            <right_val>0.5255997180938721</right_val></_></_>
-        <_>
-          <!-- tree 155 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>13 13 4 6 -1.</_>
-                <_>15 13 2 3 2.</_>
-                <_>13 16 2 3 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-7.6214009895920753e-003</threshold>
-            <left_val>0.5998609066009522</left_val>
-            <right_val>0.4952073991298676</right_val></_></_>
-        <_>
-          <!-- tree 156 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>3 13 4 6 -1.</_>
-                <_>3 13 2 3 2.</_>
-                <_>5 16 2 3 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>2.2055360022932291e-003</threshold>
-            <left_val>0.4484206140041351</left_val>
-            <right_val>0.5588530898094177</right_val></_></_>
-        <_>
-          <!-- tree 157 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>10 12 2 6 -1.</_>
-                <_>10 15 2 3 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>1.2586950324475765e-003</threshold>
-            <left_val>0.5450747013092041</left_val>
-            <right_val>0.4423840939998627</right_val></_></_>
-        <_>
-          <!-- tree 158 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>5 9 10 10 -1.</_>
-                <_>5 9 5 5 2.</_>
-                <_>10 14 5 5 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-5.0926720723509789e-003</threshold>
-            <left_val>0.4118275046348572</left_val>
-            <right_val>0.5263035893440247</right_val></_></_>
-        <_>
-          <!-- tree 159 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>11 4 4 2 -1.</_>
-                <_>13 4 2 1 2.</_>
-                <_>11 5 2 1 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-2.5095739401876926e-003</threshold>
-            <left_val>0.5787907838821411</left_val>
-            <right_val>0.4998494982719421</right_val></_></_>
-        <_>
-          <!-- tree 160 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>7 12 6 8 -1.</_>
-                <_>10 12 3 8 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-0.0773275569081306</threshold>
-            <left_val>0.8397865891456604</left_val>
-            <right_val>0.4811120033264160</right_val></_></_>
-        <_>
-          <!-- tree 161 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>12 2 4 10 -1.</_>
-                <_>14 2 2 5 2.</_>
-                <_>12 7 2 5 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-0.0414858199656010</threshold>
-            <left_val>0.2408611029386520</left_val>
-            <right_val>0.5176993012428284</right_val></_></_>
-        <_>
-          <!-- tree 162 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>8 11 2 1 -1.</_>
-                <_>9 11 1 1 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>1.0355669655837119e-004</threshold>
-            <left_val>0.4355360865592957</left_val>
-            <right_val>0.5417054295539856</right_val></_></_>
-        <_>
-          <!-- tree 163 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>10 5 1 12 -1.</_>
-                <_>10 9 1 4 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>1.3255809899419546e-003</threshold>
-            <left_val>0.5453971028327942</left_val>
-            <right_val>0.4894095063209534</right_val></_></_>
-        <_>
-          <!-- tree 164 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>0 11 6 9 -1.</_>
-                <_>3 11 3 9 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-8.0598732456564903e-003</threshold>
-            <left_val>0.5771024227142334</left_val>
-            <right_val>0.4577918946743012</right_val></_></_>
-        <_>
-          <!-- tree 165 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>12 2 4 10 -1.</_>
-                <_>14 2 2 5 2.</_>
-                <_>12 7 2 5 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>0.0190586205571890</threshold>
-            <left_val>0.5169867873191834</left_val>
-            <right_val>0.3400475084781647</right_val></_></_>
-        <_>
-          <!-- tree 166 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>4 2 4 10 -1.</_>
-                <_>4 2 2 5 2.</_>
-                <_>6 7 2 5 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-0.0350578911602497</threshold>
-            <left_val>0.2203243970870972</left_val>
-            <right_val>0.5000503063201904</right_val></_></_>
-        <_>
-          <!-- tree 167 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>11 4 4 2 -1.</_>
-                <_>13 4 2 1 2.</_>
-                <_>11 5 2 1 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>5.7296059094369411e-003</threshold>
-            <left_val>0.5043408274650574</left_val>
-            <right_val>0.6597570776939392</right_val></_></_>
-        <_>
-          <!-- tree 168 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>0 14 6 3 -1.</_>
-                <_>0 15 6 1 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-0.0116483299061656</threshold>
-            <left_val>0.2186284959316254</left_val>
-            <right_val>0.4996652901172638</right_val></_></_>
-        <_>
-          <!-- tree 169 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>11 4 4 2 -1.</_>
-                <_>13 4 2 1 2.</_>
-                <_>11 5 2 1 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>1.4544479781761765e-003</threshold>
-            <left_val>0.5007681846618652</left_val>
-            <right_val>0.5503727793693543</right_val></_></_>
-        <_>
-          <!-- tree 170 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>6 1 3 2 -1.</_>
-                <_>7 1 1 2 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-2.5030909455381334e-004</threshold>
-            <left_val>0.4129841029644013</left_val>
-            <right_val>0.5241670012474060</right_val></_></_>
-        <_>
-          <!-- tree 171 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>11 4 4 2 -1.</_>
-                <_>13 4 2 1 2.</_>
-                <_>11 5 2 1 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-8.2907272735610604e-004</threshold>
-            <left_val>0.5412868261337280</left_val>
-            <right_val>0.4974496066570282</right_val></_></_>
-        <_>
-          <!-- tree 172 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>5 4 4 2 -1.</_>
-                <_>5 4 2 1 2.</_>
-                <_>7 5 2 1 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>1.0862209601327777e-003</threshold>
-            <left_val>0.4605529904365540</left_val>
-            <right_val>0.5879228711128235</right_val></_></_>
-        <_>
-          <!-- tree 173 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>13 0 2 12 -1.</_>
-                <_>14 0 1 6 2.</_>
-                <_>13 6 1 6 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>2.0000500080641359e-004</threshold>
-            <left_val>0.5278854966163635</left_val>
-            <right_val>0.4705209136009216</right_val></_></_>
-        <_>
-          <!-- tree 174 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>6 0 3 10 -1.</_>
-                <_>7 0 1 10 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>2.9212920926511288e-003</threshold>
-            <left_val>0.5129609704017639</left_val>
-            <right_val>0.3755536973476410</right_val></_></_>
-        <_>
-          <!-- tree 175 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>3 0 17 8 -1.</_>
-                <_>3 4 17 4 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>0.0253874007612467</threshold>
-            <left_val>0.4822691977024078</left_val>
-            <right_val>0.5790768265724182</right_val></_></_>
-        <_>
-          <!-- tree 176 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>0 4 20 4 -1.</_>
-                <_>0 6 20 2 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-3.1968469265848398e-003</threshold>
-            <left_val>0.5248395204544067</left_val>
-            <right_val>0.3962840139865875</right_val></_></_></trees>
-      <stage_threshold>87.6960296630859380</stage_threshold>
-      <parent>17</parent>
-      <next>-1</next></_>
-    <_>
-      <!-- stage 19 -->
-      <trees>
-        <_>
-          <!-- tree 0 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>0 3 8 2 -1.</_>
-                <_>4 3 4 2 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>5.8031738735735416e-003</threshold>
-            <left_val>0.3498983979225159</left_val>
-            <right_val>0.5961983203887940</right_val></_></_>
-        <_>
-          <!-- tree 1 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>8 11 4 3 -1.</_>
-                <_>8 12 4 1 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-9.0003069490194321e-003</threshold>
-            <left_val>0.6816636919975281</left_val>
-            <right_val>0.4478552043437958</right_val></_></_>
-        <_>
-          <!-- tree 2 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>5 7 6 4 -1.</_>
-                <_>5 7 3 2 2.</_>
-                <_>8 9 3 2 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-1.1549659539014101e-003</threshold>
-            <left_val>0.5585706233978272</left_val>
-            <right_val>0.3578251004219055</right_val></_></_>
-        <_>
-          <!-- tree 3 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>8 3 4 9 -1.</_>
-                <_>8 6 4 3 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-1.1069850297644734e-003</threshold>
-            <left_val>0.5365036129951477</left_val>
-            <right_val>0.3050428032875061</right_val></_></_>
-        <_>
-          <!-- tree 4 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>8 15 1 4 -1.</_>
-                <_>8 17 1 2 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>1.0308309720130637e-004</threshold>
-            <left_val>0.3639095127582550</left_val>
-            <right_val>0.5344635844230652</right_val></_></_>
-        <_>
-          <!-- tree 5 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>4 5 12 7 -1.</_>
-                <_>8 5 4 7 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-5.0984839908778667e-003</threshold>
-            <left_val>0.2859157025814056</left_val>
-            <right_val>0.5504264831542969</right_val></_></_>
-        <_>
-          <!-- tree 6 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>4 2 4 10 -1.</_>
-                <_>4 2 2 5 2.</_>
-                <_>6 7 2 5 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>8.2572200335562229e-004</threshold>
-            <left_val>0.5236523747444153</left_val>
-            <right_val>0.3476041853427887</right_val></_></_>
-        <_>
-          <!-- tree 7 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>3 0 17 2 -1.</_>
-                <_>3 1 17 1 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>9.9783325567841530e-003</threshold>
-            <left_val>0.4750322103500366</left_val>
-            <right_val>0.6219646930694580</right_val></_></_>
-        <_>
-          <!-- tree 8 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>2 2 16 15 -1.</_>
-                <_>2 7 16 5 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-0.0374025292694569</threshold>
-            <left_val>0.3343375921249390</left_val>
-            <right_val>0.5278062820434570</right_val></_></_>
-        <_>
-          <!-- tree 9 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>15 2 5 2 -1.</_>
-                <_>15 3 5 1 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>4.8548257909715176e-003</threshold>
-            <left_val>0.5192180871963501</left_val>
-            <right_val>0.3700444102287293</right_val></_></_>
-        <_>
-          <!-- tree 10 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>9 3 2 2 -1.</_>
-                <_>10 3 1 2 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-1.8664470408111811e-003</threshold>
-            <left_val>0.2929843962192535</left_val>
-            <right_val>0.5091944932937622</right_val></_></_>
-        <_>
-          <!-- tree 11 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>4 5 16 15 -1.</_>
-                <_>4 10 16 5 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>0.0168888904154301</threshold>
-            <left_val>0.3686845898628235</left_val>
-            <right_val>0.5431225895881653</right_val></_></_>
-        <_>
-          <!-- tree 12 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>7 13 5 6 -1.</_>
-                <_>7 16 5 3 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-5.8372621424496174e-003</threshold>
-            <left_val>0.3632183969020844</left_val>
-            <right_val>0.5221335887908936</right_val></_></_>
-        <_>
-          <!-- tree 13 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>10 7 3 2 -1.</_>
-                <_>11 7 1 2 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-1.4713739510625601e-003</threshold>
-            <left_val>0.5870683789253235</left_val>
-            <right_val>0.4700650870800018</right_val></_></_>
-        <_>
-          <!-- tree 14 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>8 3 3 1 -1.</_>
-                <_>9 3 1 1 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-1.1522950371727347e-003</threshold>
-            <left_val>0.3195894956588745</left_val>
-            <right_val>0.5140954256057739</right_val></_></_>
-        <_>
-          <!-- tree 15 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>9 16 3 3 -1.</_>
-                <_>9 17 3 1 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-4.2560300789773464e-003</threshold>
-            <left_val>0.6301859021186829</left_val>
-            <right_val>0.4814921021461487</right_val></_></_>
-        <_>
-          <!-- tree 16 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>0 2 5 2 -1.</_>
-                <_>0 3 5 1 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-6.7378291860222816e-003</threshold>
-            <left_val>0.1977048069238663</left_val>
-            <right_val>0.5025808215141296</right_val></_></_>
-        <_>
-          <!-- tree 17 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>12 5 4 3 -1.</_>
-                <_>12 6 4 1 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>0.0113826701417565</threshold>
-            <left_val>0.4954132139682770</left_val>
-            <right_val>0.6867045760154724</right_val></_></_>
-        <_>
-          <!-- tree 18 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>1 7 12 1 -1.</_>
-                <_>5 7 4 1 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>5.1794708706438541e-003</threshold>
-            <left_val>0.5164427757263184</left_val>
-            <right_val>0.3350647985935211</right_val></_></_>
-        <_>
-          <!-- tree 19 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>7 5 6 14 -1.</_>
-                <_>7 12 6 7 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-0.1174378991127014</threshold>
-            <left_val>0.2315246015787125</left_val>
-            <right_val>0.5234413743019104</right_val></_></_>
-        <_>
-          <!-- tree 20 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>0 0 8 10 -1.</_>
-                <_>0 0 4 5 2.</_>
-                <_>4 5 4 5 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>0.0287034492939711</threshold>
-            <left_val>0.4664297103881836</left_val>
-            <right_val>0.6722521185874939</right_val></_></_>
-        <_>
-          <!-- tree 21 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>9 1 3 2 -1.</_>
-                <_>10 1 1 2 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>4.8231030814349651e-003</threshold>
-            <left_val>0.5220875144004822</left_val>
-            <right_val>0.2723532915115356</right_val></_></_>
-        <_>
-          <!-- tree 22 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>8 1 3 2 -1.</_>
-                <_>9 1 1 2 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>2.6798530016094446e-003</threshold>
-            <left_val>0.5079277157783508</left_val>
-            <right_val>0.2906948924064636</right_val></_></_>
-        <_>
-          <!-- tree 23 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>12 4 3 3 -1.</_>
-                <_>12 5 3 1 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>8.0504082143306732e-003</threshold>
-            <left_val>0.4885950982570648</left_val>
-            <right_val>0.6395021080970764</right_val></_></_>
-        <_>
-          <!-- tree 24 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>7 4 6 16 -1.</_>
-                <_>7 12 6 8 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>4.8054959625005722e-003</threshold>
-            <left_val>0.5197256803512573</left_val>
-            <right_val>0.3656663894653320</right_val></_></_>
-        <_>
-          <!-- tree 25 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>12 4 3 3 -1.</_>
-                <_>12 5 3 1 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-2.2420159075409174e-003</threshold>
-            <left_val>0.6153467893600464</left_val>
-            <right_val>0.4763701856136322</right_val></_></_>
-        <_>
-          <!-- tree 26 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>2 3 2 6 -1.</_>
-                <_>2 5 2 2 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-0.0137577103450894</threshold>
-            <left_val>0.2637344896793366</left_val>
-            <right_val>0.5030903220176697</right_val></_></_>
-        <_>
-          <!-- tree 27 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>14 2 6 9 -1.</_>
-                <_>14 5 6 3 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-0.1033829972147942</threshold>
-            <left_val>0.2287521958351135</left_val>
-            <right_val>0.5182461142539978</right_val></_></_>
-        <_>
-          <!-- tree 28 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>5 4 3 3 -1.</_>
-                <_>5 5 3 1 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-9.4432085752487183e-003</threshold>
-            <left_val>0.6953303813934326</left_val>
-            <right_val>0.4694949090480804</right_val></_></_>
-        <_>
-          <!-- tree 29 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>9 17 3 2 -1.</_>
-                <_>10 17 1 2 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>8.0271181650459766e-004</threshold>
-            <left_val>0.5450655221939087</left_val>
-            <right_val>0.4268783926963806</right_val></_></_>
-        <_>
-          <!-- tree 30 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>5 5 2 3 -1.</_>
-                <_>5 6 2 1 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-4.1945669800043106e-003</threshold>
-            <left_val>0.6091387867927551</left_val>
-            <right_val>0.4571642875671387</right_val></_></_>
-        <_>
-          <!-- tree 31 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>13 11 3 6 -1.</_>
-                <_>13 13 3 2 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>0.0109422104433179</threshold>
-            <left_val>0.5241063237190247</left_val>
-            <right_val>0.3284547030925751</right_val></_></_>
-        <_>
-          <!-- tree 32 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>3 14 2 6 -1.</_>
-                <_>3 17 2 3 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-5.7841069065034389e-004</threshold>
-            <left_val>0.5387929081916809</left_val>
-            <right_val>0.4179368913173676</right_val></_></_>
-        <_>
-          <!-- tree 33 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>14 3 6 2 -1.</_>
-                <_>14 4 6 1 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-2.0888620056211948e-003</threshold>
-            <left_val>0.4292691051959992</left_val>
-            <right_val>0.5301715731620789</right_val></_></_>
-        <_>
-          <!-- tree 34 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>0 8 16 2 -1.</_>
-                <_>0 9 16 1 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>3.2383969519287348e-003</threshold>
-            <left_val>0.3792347908020020</left_val>
-            <right_val>0.5220744013786316</right_val></_></_>
-        <_>
-          <!-- tree 35 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>14 3 6 2 -1.</_>
-                <_>14 4 6 1 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>4.9075027927756310e-003</threshold>
-            <left_val>0.5237283110618591</left_val>
-            <right_val>0.4126757979393005</right_val></_></_>
-        <_>
-          <!-- tree 36 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>0 0 5 6 -1.</_>
-                <_>0 2 5 2 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-0.0322779417037964</threshold>
-            <left_val>0.1947655975818634</left_val>
-            <right_val>0.4994502067565918</right_val></_></_>
-        <_>
-          <!-- tree 37 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>12 5 4 3 -1.</_>
-                <_>12 6 4 1 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-8.9711230248212814e-003</threshold>
-            <left_val>0.6011285185813904</left_val>
-            <right_val>0.4929032027721405</right_val></_></_>
-        <_>
-          <!-- tree 38 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>4 11 3 6 -1.</_>
-                <_>4 13 3 2 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>0.0153210898861289</threshold>
-            <left_val>0.5009753704071045</left_val>
-            <right_val>0.2039822041988373</right_val></_></_>
-        <_>
-          <!-- tree 39 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>12 5 4 3 -1.</_>
-                <_>12 6 4 1 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>2.0855569746345282e-003</threshold>
-            <left_val>0.4862189888954163</left_val>
-            <right_val>0.5721694827079773</right_val></_></_>
-        <_>
-          <!-- tree 40 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>9 5 1 3 -1.</_>
-                <_>9 6 1 1 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>5.0615021027624607e-003</threshold>
-            <left_val>0.5000218749046326</left_val>
-            <right_val>0.1801805943250656</right_val></_></_>
-        <_>
-          <!-- tree 41 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>12 5 4 3 -1.</_>
-                <_>12 6 4 1 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-3.7174751050770283e-003</threshold>
-            <left_val>0.5530117154121399</left_val>
-            <right_val>0.4897592961788178</right_val></_></_>
-        <_>
-          <!-- tree 42 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>6 6 8 12 -1.</_>
-                <_>6 12 8 6 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-0.0121705001220107</threshold>
-            <left_val>0.4178605973720551</left_val>
-            <right_val>0.5383723974227905</right_val></_></_>
-        <_>
-          <!-- tree 43 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>12 5 4 3 -1.</_>
-                <_>12 6 4 1 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>4.6248398721218109e-003</threshold>
-            <left_val>0.4997169971466065</left_val>
-            <right_val>0.5761327147483826</right_val></_></_>
-        <_>
-          <!-- tree 44 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>5 12 9 2 -1.</_>
-                <_>8 12 3 2 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-2.1040429419372231e-004</threshold>
-            <left_val>0.5331807136535645</left_val>
-            <right_val>0.4097681045532227</right_val></_></_>
-        <_>
-          <!-- tree 45 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>12 5 4 3 -1.</_>
-                <_>12 6 4 1 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-0.0146417804062366</threshold>
-            <left_val>0.5755925178527832</left_val>
-            <right_val>0.5051776170730591</right_val></_></_>
-        <_>
-          <!-- tree 46 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>4 5 4 3 -1.</_>
-                <_>4 6 4 1 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>3.3199489116668701e-003</threshold>
-            <left_val>0.4576976895332336</left_val>
-            <right_val>0.6031805872917175</right_val></_></_>
-        <_>
-          <!-- tree 47 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>6 6 9 2 -1.</_>
-                <_>9 6 3 2 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>3.7236879579722881e-003</threshold>
-            <left_val>0.4380396902561188</left_val>
-            <right_val>0.5415883064270020</right_val></_></_>
-        <_>
-          <!-- tree 48 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>4 11 1 3 -1.</_>
-                <_>4 12 1 1 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>8.2951161311939359e-004</threshold>
-            <left_val>0.5163031816482544</left_val>
-            <right_val>0.3702219128608704</right_val></_></_>
-        <_>
-          <!-- tree 49 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>14 12 6 6 -1.</_>
-                <_>14 12 3 6 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-0.0114084901288152</threshold>
-            <left_val>0.6072946786880493</left_val>
-            <right_val>0.4862565100193024</right_val></_></_>
-        <_>
-          <!-- tree 50 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>7 0 3 7 -1.</_>
-                <_>8 0 1 7 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-4.5320121571421623e-003</threshold>
-            <left_val>0.3292475938796997</left_val>
-            <right_val>0.5088962912559509</right_val></_></_>
-        <_>
-          <!-- tree 51 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>9 8 3 3 -1.</_>
-                <_>10 8 1 3 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>5.1276017911732197e-003</threshold>
-            <left_val>0.4829767942428589</left_val>
-            <right_val>0.6122708916664124</right_val></_></_>
-        <_>
-          <!-- tree 52 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>8 8 3 3 -1.</_>
-                <_>9 8 1 3 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>9.8583158105611801e-003</threshold>
-            <left_val>0.4660679996013641</left_val>
-            <right_val>0.6556177139282227</right_val></_></_>
-        <_>
-          <!-- tree 53 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>5 10 11 3 -1.</_>
-                <_>5 11 11 1 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>0.0369859188795090</threshold>
-            <left_val>0.5204849243164063</left_val>
-            <right_val>0.1690472066402435</right_val></_></_>
-        <_>
-          <!-- tree 54 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>5 7 10 1 -1.</_>
-                <_>10 7 5 1 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>4.6491161920130253e-003</threshold>
-            <left_val>0.5167322158813477</left_val>
-            <right_val>0.3725225031375885</right_val></_></_>
-        <_>
-          <!-- tree 55 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>9 7 3 2 -1.</_>
-                <_>10 7 1 2 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-4.2664702050387859e-003</threshold>
-            <left_val>0.6406493186950684</left_val>
-            <right_val>0.4987342953681946</right_val></_></_>
-        <_>
-          <!-- tree 56 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>8 7 3 2 -1.</_>
-                <_>9 7 1 2 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-4.7956590424291790e-004</threshold>
-            <left_val>0.5897293090820313</left_val>
-            <right_val>0.4464873969554901</right_val></_></_>
-        <_>
-          <!-- tree 57 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>11 9 4 2 -1.</_>
-                <_>11 9 2 2 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>3.6827160511165857e-003</threshold>
-            <left_val>0.5441560745239258</left_val>
-            <right_val>0.3472662866115570</right_val></_></_>
-        <_>
-          <!-- tree 58 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>5 9 4 2 -1.</_>
-                <_>7 9 2 2 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-0.0100598800927401</threshold>
-            <left_val>0.2143162935972214</left_val>
-            <right_val>0.5004829764366150</right_val></_></_>
-        <_>
-          <!-- tree 59 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>14 10 2 4 -1.</_>
-                <_>14 12 2 2 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-3.0361840617842972e-004</threshold>
-            <left_val>0.5386424064636231</left_val>
-            <right_val>0.4590323865413666</right_val></_></_>
-        <_>
-          <!-- tree 60 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>7 7 3 2 -1.</_>
-                <_>8 7 1 2 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-1.4545479789376259e-003</threshold>
-            <left_val>0.5751184225082398</left_val>
-            <right_val>0.4497095048427582</right_val></_></_>
-        <_>
-          <!-- tree 61 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>14 17 6 3 -1.</_>
-                <_>14 18 6 1 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>1.6515209572389722e-003</threshold>
-            <left_val>0.5421937704086304</left_val>
-            <right_val>0.4238520860671997</right_val></_></_>
-        <_>
-          <!-- tree 62 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>4 5 12 12 -1.</_>
-                <_>4 5 6 6 2.</_>
-                <_>10 11 6 6 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-7.8468639403581619e-003</threshold>
-            <left_val>0.4077920913696289</left_val>
-            <right_val>0.5258157253265381</right_val></_></_>
-        <_>
-          <!-- tree 63 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>6 9 8 8 -1.</_>
-                <_>10 9 4 4 2.</_>
-                <_>6 13 4 4 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-5.1259850151836872e-003</threshold>
-            <left_val>0.4229275882244110</left_val>
-            <right_val>0.5479453206062317</right_val></_></_>
-        <_>
-          <!-- tree 64 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>0 4 15 4 -1.</_>
-                <_>5 4 5 4 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-0.0368909612298012</threshold>
-            <left_val>0.6596375703811646</left_val>
-            <right_val>0.4674678146839142</right_val></_></_>
-        <_>
-          <!-- tree 65 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>13 2 4 1 -1.</_>
-                <_>13 2 2 1 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>2.4035639944486320e-004</threshold>
-            <left_val>0.4251135885715485</left_val>
-            <right_val>0.5573202967643738</right_val></_></_>
-        <_>
-          <!-- tree 66 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>4 12 2 2 -1.</_>
-                <_>4 13 2 1 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-1.5150169929256663e-005</threshold>
-            <left_val>0.5259246826171875</left_val>
-            <right_val>0.4074114859104157</right_val></_></_>
-        <_>
-          <!-- tree 67 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>8 13 4 3 -1.</_>
-                <_>8 14 4 1 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>2.2108471021056175e-003</threshold>
-            <left_val>0.4671722948551178</left_val>
-            <right_val>0.5886352062225342</right_val></_></_>
-        <_>
-          <!-- tree 68 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>9 13 2 3 -1.</_>
-                <_>9 14 2 1 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-1.1568620102480054e-003</threshold>
-            <left_val>0.5711066126823425</left_val>
-            <right_val>0.4487161934375763</right_val></_></_>
-        <_>
-          <!-- tree 69 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>13 11 2 3 -1.</_>
-                <_>13 12 2 1 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>4.9996292218565941e-003</threshold>
-            <left_val>0.5264198184013367</left_val>
-            <right_val>0.2898327112197876</right_val></_></_>
-        <_>
-          <!-- tree 70 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>7 12 4 4 -1.</_>
-                <_>7 12 2 2 2.</_>
-                <_>9 14 2 2 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-1.4656189596280456e-003</threshold>
-            <left_val>0.3891738057136536</left_val>
-            <right_val>0.5197871923446655</right_val></_></_>
-        <_>
-          <!-- tree 71 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>10 11 2 2 -1.</_>
-                <_>11 11 1 1 2.</_>
-                <_>10 12 1 1 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-1.1975039960816503e-003</threshold>
-            <left_val>0.5795872807502747</left_val>
-            <right_val>0.4927955865859985</right_val></_></_>
-        <_>
-          <!-- tree 72 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>8 17 3 2 -1.</_>
-                <_>9 17 1 2 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-4.4954330660402775e-003</threshold>
-            <left_val>0.2377603054046631</left_val>
-            <right_val>0.5012555122375488</right_val></_></_>
-        <_>
-          <!-- tree 73 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>10 11 2 2 -1.</_>
-                <_>11 11 1 1 2.</_>
-                <_>10 12 1 1 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>1.4997160178609192e-004</threshold>
-            <left_val>0.4876626133918762</left_val>
-            <right_val>0.5617607831954956</right_val></_></_>
-        <_>
-          <!-- tree 74 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>0 17 6 3 -1.</_>
-                <_>0 18 6 1 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>2.6391509454697371e-003</threshold>
-            <left_val>0.5168088078498840</left_val>
-            <right_val>0.3765509128570557</right_val></_></_>
-        <_>
-          <!-- tree 75 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>10 11 2 2 -1.</_>
-                <_>11 11 1 1 2.</_>
-                <_>10 12 1 1 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-2.9368131072260439e-004</threshold>
-            <left_val>0.5446649193763733</left_val>
-            <right_val>0.4874630868434906</right_val></_></_>
-        <_>
-          <!-- tree 76 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>8 11 2 2 -1.</_>
-                <_>8 11 1 1 2.</_>
-                <_>9 12 1 1 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>1.4211760135367513e-003</threshold>
-            <left_val>0.4687897861003876</left_val>
-            <right_val>0.6691331863403320</right_val></_></_>
-        <_>
-          <!-- tree 77 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>12 5 8 4 -1.</_>
-                <_>12 5 4 4 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>0.0794276371598244</threshold>
-            <left_val>0.5193443894386292</left_val>
-            <right_val>0.2732945978641510</right_val></_></_>
-        <_>
-          <!-- tree 78 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>0 5 8 4 -1.</_>
-                <_>4 5 4 4 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>0.0799375027418137</threshold>
-            <left_val>0.4971731007099152</left_val>
-            <right_val>0.1782083958387375</right_val></_></_>
-        <_>
-          <!-- tree 79 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>13 2 4 1 -1.</_>
-                <_>13 2 2 1 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>0.0110892597585917</threshold>
-            <left_val>0.5165994763374329</left_val>
-            <right_val>0.3209475874900818</right_val></_></_>
-        <_>
-          <!-- tree 80 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>3 2 4 1 -1.</_>
-                <_>5 2 2 1 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>1.6560709627810866e-004</threshold>
-            <left_val>0.4058471918106079</left_val>
-            <right_val>0.5307276248931885</right_val></_></_>
-        <_>
-          <!-- tree 81 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>10 0 4 2 -1.</_>
-                <_>12 0 2 1 2.</_>
-                <_>10 1 2 1 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-5.3354292176663876e-003</threshold>
-            <left_val>0.3445056974887848</left_val>
-            <right_val>0.5158129930496216</right_val></_></_>
-        <_>
-          <!-- tree 82 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>7 12 3 1 -1.</_>
-                <_>8 12 1 1 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>1.1287260567769408e-003</threshold>
-            <left_val>0.4594863057136536</left_val>
-            <right_val>0.6075533032417297</right_val></_></_>
-        <_>
-          <!-- tree 83 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>8 11 4 8 -1.</_>
-                <_>10 11 2 4 2.</_>
-                <_>8 15 2 4 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-0.0219692196696997</threshold>
-            <left_val>0.1680400967597961</left_val>
-            <right_val>0.5228595733642578</right_val></_></_>
-        <_>
-          <!-- tree 84 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>9 9 2 2 -1.</_>
-                <_>9 10 2 1 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-2.1775320055894554e-004</threshold>
-            <left_val>0.3861596882343292</left_val>
-            <right_val>0.5215672850608826</right_val></_></_>
-        <_>
-          <!-- tree 85 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>3 18 15 2 -1.</_>
-                <_>3 19 15 1 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>2.0200149447191507e-004</threshold>
-            <left_val>0.5517979264259338</left_val>
-            <right_val>0.4363039135932922</right_val></_></_>
-        <_>
-          <!-- tree 86 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>2 6 2 12 -1.</_>
-                <_>2 6 1 6 2.</_>
-                <_>3 12 1 6 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-0.0217331498861313</threshold>
-            <left_val>0.7999460101127625</left_val>
-            <right_val>0.4789851009845734</right_val></_></_>
-        <_>
-          <!-- tree 87 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>9 8 2 3 -1.</_>
-                <_>9 9 2 1 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-8.4399932529777288e-004</threshold>
-            <left_val>0.4085975885391235</left_val>
-            <right_val>0.5374773144721985</right_val></_></_>
-        <_>
-          <!-- tree 88 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>7 10 3 2 -1.</_>
-                <_>8 10 1 2 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-4.3895249837078154e-004</threshold>
-            <left_val>0.5470405220985413</left_val>
-            <right_val>0.4366143047809601</right_val></_></_>
-        <_>
-          <!-- tree 89 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>11 11 3 1 -1.</_>
-                <_>12 11 1 1 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>1.5092400135472417e-003</threshold>
-            <left_val>0.4988996982574463</left_val>
-            <right_val>0.5842149257659912</right_val></_></_>
-        <_>
-          <!-- tree 90 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>6 11 3 1 -1.</_>
-                <_>7 11 1 1 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-3.5547839943319559e-003</threshold>
-            <left_val>0.6753690242767334</left_val>
-            <right_val>0.4721005856990814</right_val></_></_>
-        <_>
-          <!-- tree 91 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>9 2 4 2 -1.</_>
-                <_>11 2 2 1 2.</_>
-                <_>9 3 2 1 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>4.8191400128416717e-004</threshold>
-            <left_val>0.5415853857994080</left_val>
-            <right_val>0.4357109069824219</right_val></_></_>
-        <_>
-          <!-- tree 92 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>4 12 2 3 -1.</_>
-                <_>4 13 2 1 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-6.0264398343861103e-003</threshold>
-            <left_val>0.2258509993553162</left_val>
-            <right_val>0.4991880953311920</right_val></_></_>
-        <_>
-          <!-- tree 93 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>2 1 18 3 -1.</_>
-                <_>8 1 6 3 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-0.0116681400686502</threshold>
-            <left_val>0.6256554722785950</left_val>
-            <right_val>0.4927498996257782</right_val></_></_>
-        <_>
-          <!-- tree 94 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>5 1 4 14 -1.</_>
-                <_>7 1 2 14 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-2.8718370012938976e-003</threshold>
-            <left_val>0.3947784900665283</left_val>
-            <right_val>0.5245801806449890</right_val></_></_>
-        <_>
-          <!-- tree 95 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>8 16 12 3 -1.</_>
-                <_>8 16 6 3 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>0.0170511696487665</threshold>
-            <left_val>0.4752511084079742</left_val>
-            <right_val>0.5794224143028259</right_val></_></_>
-        <_>
-          <!-- tree 96 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>1 17 18 3 -1.</_>
-                <_>7 17 6 3 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-0.0133520802482963</threshold>
-            <left_val>0.6041104793548584</left_val>
-            <right_val>0.4544535875320435</right_val></_></_>
-        <_>
-          <!-- tree 97 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>9 14 2 6 -1.</_>
-                <_>9 17 2 3 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-3.9301801007241011e-004</threshold>
-            <left_val>0.4258275926113129</left_val>
-            <right_val>0.5544905066490173</right_val></_></_>
-        <_>
-          <!-- tree 98 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>9 12 1 8 -1.</_>
-                <_>9 16 1 4 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>3.0483349692076445e-003</threshold>
-            <left_val>0.5233420133590698</left_val>
-            <right_val>0.3780272901058197</right_val></_></_>
-        <_>
-          <!-- tree 99 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>9 14 2 3 -1.</_>
-                <_>9 15 2 1 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-4.3579288758337498e-003</threshold>
-            <left_val>0.6371889114379883</left_val>
-            <right_val>0.4838674068450928</right_val></_></_>
-        <_>
-          <!-- tree 100 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>9 6 2 12 -1.</_>
-                <_>9 10 2 4 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>5.6661018170416355e-003</threshold>
-            <left_val>0.5374705791473389</left_val>
-            <right_val>0.4163666069507599</right_val></_></_>
-        <_>
-          <!-- tree 101 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>12 9 3 3 -1.</_>
-                <_>12 10 3 1 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>6.0677339206449687e-005</threshold>
-            <left_val>0.4638795852661133</left_val>
-            <right_val>0.5311625003814697</right_val></_></_>
-        <_>
-          <!-- tree 102 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>0 1 4 8 -1.</_>
-                <_>2 1 2 8 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>0.0367381609976292</threshold>
-            <left_val>0.4688656032085419</left_val>
-            <right_val>0.6466524004936218</right_val></_></_>
-        <_>
-          <!-- tree 103 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>9 1 6 2 -1.</_>
-                <_>12 1 3 1 2.</_>
-                <_>9 2 3 1 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>8.6528137326240540e-003</threshold>
-            <left_val>0.5204318761825562</left_val>
-            <right_val>0.2188657969236374</right_val></_></_>
-        <_>
-          <!-- tree 104 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>1 3 12 14 -1.</_>
-                <_>1 10 12 7 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-0.1537135988473892</threshold>
-            <left_val>0.1630371958017349</left_val>
-            <right_val>0.4958840012550354</right_val></_></_>
-        <_>
-          <!-- tree 105 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>8 12 4 2 -1.</_>
-                <_>10 12 2 1 2.</_>
-                <_>8 13 2 1 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-4.1560421232134104e-004</threshold>
-            <left_val>0.5774459242820740</left_val>
-            <right_val>0.4696458876132965</right_val></_></_>
-        <_>
-          <!-- tree 106 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>1 9 10 2 -1.</_>
-                <_>1 9 5 1 2.</_>
-                <_>6 10 5 1 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-1.2640169588848948e-003</threshold>
-            <left_val>0.3977175951004028</left_val>
-            <right_val>0.5217198133468628</right_val></_></_>
-        <_>
-          <!-- tree 107 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>8 15 4 3 -1.</_>
-                <_>8 16 4 1 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-3.5473341122269630e-003</threshold>
-            <left_val>0.6046528220176697</left_val>
-            <right_val>0.4808315038681030</right_val></_></_>
-        <_>
-          <!-- tree 108 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>6 8 8 3 -1.</_>
-                <_>6 9 8 1 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>3.0019069527043030e-005</threshold>
-            <left_val>0.3996723890304565</left_val>
-            <right_val>0.5228201150894165</right_val></_></_>
-        <_>
-          <!-- tree 109 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>9 15 5 3 -1.</_>
-                <_>9 16 5 1 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>1.3113019522279501e-003</threshold>
-            <left_val>0.4712158143520355</left_val>
-            <right_val>0.5765997767448425</right_val></_></_>
-        <_>
-          <!-- tree 110 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>8 7 4 3 -1.</_>
-                <_>8 8 4 1 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-1.3374709524214268e-003</threshold>
-            <left_val>0.4109584987163544</left_val>
-            <right_val>0.5253170132637024</right_val></_></_>
-        <_>
-          <!-- tree 111 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>7 7 6 2 -1.</_>
-                <_>7 8 6 1 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>0.0208767093718052</threshold>
-            <left_val>0.5202993750572205</left_val>
-            <right_val>0.1757981926202774</right_val></_></_>
-        <_>
-          <!-- tree 112 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>5 7 8 2 -1.</_>
-                <_>5 7 4 1 2.</_>
-                <_>9 8 4 1 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-7.5497948564589024e-003</threshold>
-            <left_val>0.6566609740257263</left_val>
-            <right_val>0.4694975018501282</right_val></_></_>
-        <_>
-          <!-- tree 113 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>12 9 3 3 -1.</_>
-                <_>12 10 3 1 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>0.0241885501891375</threshold>
-            <left_val>0.5128673911094666</left_val>
-            <right_val>0.3370220959186554</right_val></_></_>
-        <_>
-          <!-- tree 114 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>4 7 4 2 -1.</_>
-                <_>4 8 4 1 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-2.9358828905969858e-003</threshold>
-            <left_val>0.6580786705017090</left_val>
-            <right_val>0.4694541096687317</right_val></_></_>
-        <_>
-          <!-- tree 115 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>14 2 6 9 -1.</_>
-                <_>14 5 6 3 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>0.0575579293072224</threshold>
-            <left_val>0.5146445035934448</left_val>
-            <right_val>0.2775259912014008</right_val></_></_>
-        <_>
-          <!-- tree 116 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>4 9 3 3 -1.</_>
-                <_>5 9 1 3 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-1.1343370424583554e-003</threshold>
-            <left_val>0.3836601972579956</left_val>
-            <right_val>0.5192667245864868</right_val></_></_>
-        <_>
-          <!-- tree 117 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>12 9 3 3 -1.</_>
-                <_>12 10 3 1 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>0.0168169997632504</threshold>
-            <left_val>0.5085592865943909</left_val>
-            <right_val>0.6177260875701904</right_val></_></_>
-        <_>
-          <!-- tree 118 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>0 2 6 9 -1.</_>
-                <_>0 5 6 3 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>5.0535178743302822e-003</threshold>
-            <left_val>0.5138763189315796</left_val>
-            <right_val>0.3684791922569275</right_val></_></_>
-        <_>
-          <!-- tree 119 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>17 3 3 6 -1.</_>
-                <_>18 3 1 6 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-4.5874710194766521e-003</threshold>
-            <left_val>0.5989655256271362</left_val>
-            <right_val>0.4835202097892761</right_val></_></_>
-        <_>
-          <!-- tree 120 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>0 3 3 6 -1.</_>
-                <_>1 3 1 6 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>1.6882460331544280e-003</threshold>
-            <left_val>0.4509486854076386</left_val>
-            <right_val>0.5723056793212891</right_val></_></_>
-        <_>
-          <!-- tree 121 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>17 14 1 2 -1.</_>
-                <_>17 15 1 1 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-1.6554000321775675e-003</threshold>
-            <left_val>0.3496770858764648</left_val>
-            <right_val>0.5243319272994995</right_val></_></_>
-        <_>
-          <!-- tree 122 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>4 9 4 3 -1.</_>
-                <_>6 9 2 3 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-0.0193738006055355</threshold>
-            <left_val>0.1120536997914314</left_val>
-            <right_val>0.4968712925910950</right_val></_></_>
-        <_>
-          <!-- tree 123 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>12 9 3 3 -1.</_>
-                <_>12 10 3 1 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>0.0103744501248002</threshold>
-            <left_val>0.5148196816444397</left_val>
-            <right_val>0.4395213127136231</right_val></_></_>
-        <_>
-          <!-- tree 124 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>5 9 3 3 -1.</_>
-                <_>5 10 3 1 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>1.4973050565458834e-004</threshold>
-            <left_val>0.4084999859333038</left_val>
-            <right_val>0.5269886851310730</right_val></_></_>
-        <_>
-          <!-- tree 125 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>9 5 6 8 -1.</_>
-                <_>12 5 3 4 2.</_>
-                <_>9 9 3 4 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-0.0429819300770760</threshold>
-            <left_val>0.6394104957580566</left_val>
-            <right_val>0.5018504261970520</right_val></_></_>
-        <_>
-          <!-- tree 126 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>5 5 6 8 -1.</_>
-                <_>5 5 3 4 2.</_>
-                <_>8 9 3 4 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>8.3065936341881752e-003</threshold>
-            <left_val>0.4707553982734680</left_val>
-            <right_val>0.6698353290557861</right_val></_></_>
-        <_>
-          <!-- tree 127 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>16 1 4 6 -1.</_>
-                <_>16 4 4 3 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-4.1285790503025055e-003</threshold>
-            <left_val>0.4541369080543518</left_val>
-            <right_val>0.5323647260665894</right_val></_></_>
-        <_>
-          <!-- tree 128 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>1 0 6 20 -1.</_>
-                <_>3 0 2 20 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>1.7399420030415058e-003</threshold>
-            <left_val>0.4333961904048920</left_val>
-            <right_val>0.5439866185188294</right_val></_></_>
-        <_>
-          <!-- tree 129 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>12 11 3 2 -1.</_>
-                <_>13 11 1 2 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>1.1739750334527344e-004</threshold>
-            <left_val>0.4579687118530273</left_val>
-            <right_val>0.5543426275253296</right_val></_></_>
-        <_>
-          <!-- tree 130 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>5 11 3 2 -1.</_>
-                <_>6 11 1 2 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>1.8585780344437808e-004</threshold>
-            <left_val>0.4324643909931183</left_val>
-            <right_val>0.5426754951477051</right_val></_></_>
-        <_>
-          <!-- tree 131 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>9 4 6 1 -1.</_>
-                <_>11 4 2 1 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>5.5587692186236382e-003</threshold>
-            <left_val>0.5257220864295960</left_val>
-            <right_val>0.3550611138343811</right_val></_></_>
-        <_>
-          <!-- tree 132 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>0 0 8 3 -1.</_>
-                <_>4 0 4 3 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-7.9851560294628143e-003</threshold>
-            <left_val>0.6043018102645874</left_val>
-            <right_val>0.4630635976791382</right_val></_></_>
-        <_>
-          <!-- tree 133 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>15 0 2 5 -1.</_>
-                <_>15 0 1 5 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>6.0594122624024749e-004</threshold>
-            <left_val>0.4598254859447479</left_val>
-            <right_val>0.5533195137977600</right_val></_></_>
-        <_>
-          <!-- tree 134 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>4 1 3 2 -1.</_>
-                <_>5 1 1 2 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-2.2983040253166109e-004</threshold>
-            <left_val>0.4130752086639404</left_val>
-            <right_val>0.5322461128234863</right_val></_></_>
-        <_>
-          <!-- tree 135 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>7 0 6 15 -1.</_>
-                <_>9 0 2 15 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>4.3740210821852088e-004</threshold>
-            <left_val>0.4043039977550507</left_val>
-            <right_val>0.5409289002418518</right_val></_></_>
-        <_>
-          <!-- tree 136 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>6 11 3 1 -1.</_>
-                <_>7 11 1 1 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>2.9482020181603730e-004</threshold>
-            <left_val>0.4494963884353638</left_val>
-            <right_val>0.5628852248191834</right_val></_></_>
-        <_>
-          <!-- tree 137 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>12 0 3 4 -1.</_>
-                <_>13 0 1 4 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>0.0103126596659422</threshold>
-            <left_val>0.5177510976791382</left_val>
-            <right_val>0.2704316973686218</right_val></_></_>
-        <_>
-          <!-- tree 138 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>5 4 6 1 -1.</_>
-                <_>7 4 2 1 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-7.7241109684109688e-003</threshold>
-            <left_val>0.1988019049167633</left_val>
-            <right_val>0.4980553984642029</right_val></_></_>
-        <_>
-          <!-- tree 139 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>12 7 3 2 -1.</_>
-                <_>12 8 3 1 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-4.6797208487987518e-003</threshold>
-            <left_val>0.6644750237464905</left_val>
-            <right_val>0.5018296241760254</right_val></_></_>
-        <_>
-          <!-- tree 140 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>0 1 4 6 -1.</_>
-                <_>0 4 4 3 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-5.0755459815263748e-003</threshold>
-            <left_val>0.3898304998874664</left_val>
-            <right_val>0.5185269117355347</right_val></_></_>
-        <_>
-          <!-- tree 141 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>12 7 3 2 -1.</_>
-                <_>12 8 3 1 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>2.2479740437120199e-003</threshold>
-            <left_val>0.4801808893680573</left_val>
-            <right_val>0.5660336017608643</right_val></_></_>
-        <_>
-          <!-- tree 142 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>2 16 3 3 -1.</_>
-                <_>2 17 3 1 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>8.3327008178457618e-004</threshold>
-            <left_val>0.5210919976234436</left_val>
-            <right_val>0.3957188129425049</right_val></_></_>
-        <_>
-          <!-- tree 143 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>13 8 6 10 -1.</_>
-                <_>16 8 3 5 2.</_>
-                <_>13 13 3 5 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-0.0412793308496475</threshold>
-            <left_val>0.6154541969299316</left_val>
-            <right_val>0.5007054209709168</right_val></_></_>
-        <_>
-          <!-- tree 144 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>0 9 5 2 -1.</_>
-                <_>0 10 5 1 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-5.0930189900100231e-004</threshold>
-            <left_val>0.3975942134857178</left_val>
-            <right_val>0.5228403806686401</right_val></_></_>
-        <_>
-          <!-- tree 145 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>12 11 2 2 -1.</_>
-                <_>13 11 1 1 2.</_>
-                <_>12 12 1 1 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>1.2568780221045017e-003</threshold>
-            <left_val>0.4979138076305389</left_val>
-            <right_val>0.5939183235168457</right_val></_></_>
-        <_>
-          <!-- tree 146 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>3 15 3 3 -1.</_>
-                <_>3 16 3 1 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>8.0048497766256332e-003</threshold>
-            <left_val>0.4984497129917145</left_val>
-            <right_val>0.1633366048336029</right_val></_></_>
-        <_>
-          <!-- tree 147 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>12 7 3 2 -1.</_>
-                <_>12 8 3 1 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-1.1879300000146031e-003</threshold>
-            <left_val>0.5904964804649353</left_val>
-            <right_val>0.4942624866962433</right_val></_></_>
-        <_>
-          <!-- tree 148 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>5 7 3 2 -1.</_>
-                <_>5 8 3 1 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>6.1948952497914433e-004</threshold>
-            <left_val>0.4199557900428772</left_val>
-            <right_val>0.5328726172447205</right_val></_></_>
-        <_>
-          <!-- tree 149 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>9 5 9 9 -1.</_>
-                <_>9 8 9 3 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>6.6829859279096127e-003</threshold>
-            <left_val>0.5418602824211121</left_val>
-            <right_val>0.4905889034271240</right_val></_></_>
-        <_>
-          <!-- tree 150 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>5 0 3 7 -1.</_>
-                <_>6 0 1 7 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-3.7062340416014194e-003</threshold>
-            <left_val>0.3725939095020294</left_val>
-            <right_val>0.5138000249862671</right_val></_></_>
-        <_>
-          <!-- tree 151 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>5 2 12 5 -1.</_>
-                <_>9 2 4 5 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-0.0397394113242626</threshold>
-            <left_val>0.6478961110115051</left_val>
-            <right_val>0.5050346851348877</right_val></_></_>
-        <_>
-          <!-- tree 152 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>6 11 2 2 -1.</_>
-                <_>6 11 1 1 2.</_>
-                <_>7 12 1 1 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>1.4085009461268783e-003</threshold>
-            <left_val>0.4682339131832123</left_val>
-            <right_val>0.6377884149551392</right_val></_></_>
-        <_>
-          <!-- tree 153 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>15 15 3 2 -1.</_>
-                <_>15 16 3 1 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>3.9322688826359808e-004</threshold>
-            <left_val>0.5458530187606812</left_val>
-            <right_val>0.4150482118129730</right_val></_></_>
-        <_>
-          <!-- tree 154 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>2 15 3 2 -1.</_>
-                <_>2 16 3 1 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-1.8979819724336267e-003</threshold>
-            <left_val>0.3690159916877747</left_val>
-            <right_val>0.5149704217910767</right_val></_></_>
-        <_>
-          <!-- tree 155 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>14 12 6 8 -1.</_>
-                <_>17 12 3 4 2.</_>
-                <_>14 16 3 4 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-0.0139704402536154</threshold>
-            <left_val>0.6050562858581543</left_val>
-            <right_val>0.4811357855796814</right_val></_></_>
-        <_>
-          <!-- tree 156 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>2 8 15 6 -1.</_>
-                <_>7 8 5 6 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-0.1010081991553307</threshold>
-            <left_val>0.2017080038785934</left_val>
-            <right_val>0.4992361962795258</right_val></_></_>
-        <_>
-          <!-- tree 157 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>2 2 18 17 -1.</_>
-                <_>8 2 6 17 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-0.0173469204455614</threshold>
-            <left_val>0.5713148713111877</left_val>
-            <right_val>0.4899486005306244</right_val></_></_>
-        <_>
-          <!-- tree 158 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>5 1 4 1 -1.</_>
-                <_>7 1 2 1 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>1.5619759506080300e-004</threshold>
-            <left_val>0.4215388894081116</left_val>
-            <right_val>0.5392642021179199</right_val></_></_>
-        <_>
-          <!-- tree 159 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>5 2 12 5 -1.</_>
-                <_>9 2 4 5 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>0.1343892961740494</threshold>
-            <left_val>0.5136151909828186</left_val>
-            <right_val>0.3767612874507904</right_val></_></_>
-        <_>
-          <!-- tree 160 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>3 2 12 5 -1.</_>
-                <_>7 2 4 5 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-0.0245822407305241</threshold>
-            <left_val>0.7027357816696167</left_val>
-            <right_val>0.4747906923294067</right_val></_></_>
-        <_>
-          <!-- tree 161 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>4 9 12 4 -1.</_>
-                <_>10 9 6 2 2.</_>
-                <_>4 11 6 2 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-3.8553720805794001e-003</threshold>
-            <left_val>0.4317409098148346</left_val>
-            <right_val>0.5427716970443726</right_val></_></_>
-        <_>
-          <!-- tree 162 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>5 15 6 2 -1.</_>
-                <_>5 15 3 1 2.</_>
-                <_>8 16 3 1 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-2.3165249731391668e-003</threshold>
-            <left_val>0.5942698717117310</left_val>
-            <right_val>0.4618647992610931</right_val></_></_>
-        <_>
-          <!-- tree 163 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>10 14 2 3 -1.</_>
-                <_>10 15 2 1 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-4.8518120311200619e-003</threshold>
-            <left_val>0.6191568970680237</left_val>
-            <right_val>0.4884895086288452</right_val></_></_>
-        <_>
-          <!-- tree 164 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>0 13 20 2 -1.</_>
-                <_>0 13 10 1 2.</_>
-                <_>10 14 10 1 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>2.4699938949197531e-003</threshold>
-            <left_val>0.5256664752960205</left_val>
-            <right_val>0.4017199873924255</right_val></_></_>
-        <_>
-          <!-- tree 165 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>4 9 12 8 -1.</_>
-                <_>10 9 6 4 2.</_>
-                <_>4 13 6 4 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>0.0454969592392445</threshold>
-            <left_val>0.5237867832183838</left_val>
-            <right_val>0.2685773968696594</right_val></_></_>
-        <_>
-          <!-- tree 166 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>8 13 3 6 -1.</_>
-                <_>8 16 3 3 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-0.0203195996582508</threshold>
-            <left_val>0.2130445986986160</left_val>
-            <right_val>0.4979738891124725</right_val></_></_>
-        <_>
-          <!-- tree 167 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>10 12 2 2 -1.</_>
-                <_>10 13 2 1 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>2.6994998916052282e-004</threshold>
-            <left_val>0.4814041852951050</left_val>
-            <right_val>0.5543122291564941</right_val></_></_>
-        <_>
-          <!-- tree 168 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>9 12 2 2 -1.</_>
-                <_>9 12 1 1 2.</_>
-                <_>10 13 1 1 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-1.8232699949294329e-003</threshold>
-            <left_val>0.6482579708099365</left_val>
-            <right_val>0.4709989130496979</right_val></_></_>
-        <_>
-          <!-- tree 169 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>4 11 14 4 -1.</_>
-                <_>11 11 7 2 2.</_>
-                <_>4 13 7 2 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-6.3015790656208992e-003</threshold>
-            <left_val>0.4581927955150604</left_val>
-            <right_val>0.5306236147880554</right_val></_></_>
-        <_>
-          <!-- tree 170 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>8 5 4 2 -1.</_>
-                <_>8 6 4 1 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-2.4139499873854220e-004</threshold>
-            <left_val>0.5232086777687073</left_val>
-            <right_val>0.4051763117313385</right_val></_></_>
-        <_>
-          <!-- tree 171 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>10 10 6 3 -1.</_>
-                <_>12 10 2 3 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-1.0330369696021080e-003</threshold>
-            <left_val>0.5556201934814453</left_val>
-            <right_val>0.4789193868637085</right_val></_></_>
-        <_>
-          <!-- tree 172 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>2 14 1 2 -1.</_>
-                <_>2 15 1 1 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>1.8041160365100950e-004</threshold>
-            <left_val>0.5229442715644836</left_val>
-            <right_val>0.4011810123920441</right_val></_></_>
-        <_>
-          <!-- tree 173 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>13 8 6 12 -1.</_>
-                <_>16 8 3 6 2.</_>
-                <_>13 14 3 6 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-0.0614078603684902</threshold>
-            <left_val>0.6298682093620300</left_val>
-            <right_val>0.5010703206062317</right_val></_></_>
-        <_>
-          <!-- tree 174 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>1 8 6 12 -1.</_>
-                <_>1 8 3 6 2.</_>
-                <_>4 14 3 6 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-0.0695439130067825</threshold>
-            <left_val>0.7228280901908875</left_val>
-            <right_val>0.4773184061050415</right_val></_></_>
-        <_>
-          <!-- tree 175 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>10 0 6 10 -1.</_>
-                <_>12 0 2 10 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-0.0705426633358002</threshold>
-            <left_val>0.2269513010978699</left_val>
-            <right_val>0.5182529091835022</right_val></_></_>
-        <_>
-          <!-- tree 176 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>5 11 8 4 -1.</_>
-                <_>5 11 4 2 2.</_>
-                <_>9 13 4 2 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>2.4423799477517605e-003</threshold>
-            <left_val>0.5237097144126892</left_val>
-            <right_val>0.4098151028156281</right_val></_></_>
-        <_>
-          <!-- tree 177 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>10 16 8 4 -1.</_>
-                <_>14 16 4 2 2.</_>
-                <_>10 18 4 2 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>1.5494349645450711e-003</threshold>
-            <left_val>0.4773750901222229</left_val>
-            <right_val>0.5468043088912964</right_val></_></_>
-        <_>
-          <!-- tree 178 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>7 7 6 6 -1.</_>
-                <_>9 7 2 6 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-0.0239142198115587</threshold>
-            <left_val>0.7146975994110107</left_val>
-            <right_val>0.4783824980258942</right_val></_></_>
-        <_>
-          <!-- tree 179 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>10 2 4 10 -1.</_>
-                <_>10 2 2 10 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-0.0124536901712418</threshold>
-            <left_val>0.2635296881198883</left_val>
-            <right_val>0.5241122841835022</right_val></_></_>
-        <_>
-          <!-- tree 180 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>6 1 4 9 -1.</_>
-                <_>8 1 2 9 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-2.0760179904755205e-004</threshold>
-            <left_val>0.3623757064342499</left_val>
-            <right_val>0.5113608837127686</right_val></_></_>
-        <_>
-          <!-- tree 181 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>12 19 2 1 -1.</_>
-                <_>12 19 1 1 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>2.9781080229440704e-005</threshold>
-            <left_val>0.4705932140350342</left_val>
-            <right_val>0.5432801842689514</right_val></_></_></trees>
-      <stage_threshold>90.2533493041992190</stage_threshold>
-      <parent>18</parent>
-      <next>-1</next></_>
-    <_>
-      <!-- stage 20 -->
-      <trees>
-        <_>
-          <!-- tree 0 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>1 2 4 9 -1.</_>
-                <_>3 2 2 9 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>0.0117727499455214</threshold>
-            <left_val>0.3860518932342529</left_val>
-            <right_val>0.6421167254447937</right_val></_></_>
-        <_>
-          <!-- tree 1 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>7 5 6 4 -1.</_>
-                <_>9 5 2 4 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>0.0270375702530146</threshold>
-            <left_val>0.4385654926300049</left_val>
-            <right_val>0.6754038929939270</right_val></_></_>
-        <_>
-          <!-- tree 2 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>9 4 2 4 -1.</_>
-                <_>9 6 2 2 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-3.6419500247575343e-005</threshold>
-            <left_val>0.5487101078033447</left_val>
-            <right_val>0.3423315882682800</right_val></_></_>
-        <_>
-          <!-- tree 3 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>14 5 2 8 -1.</_>
-                <_>14 9 2 4 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>1.9995409529656172e-003</threshold>
-            <left_val>0.3230532109737396</left_val>
-            <right_val>0.5400317907333374</right_val></_></_>
-        <_>
-          <!-- tree 4 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>7 6 5 12 -1.</_>
-                <_>7 12 5 6 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>4.5278300531208515e-003</threshold>
-            <left_val>0.5091639757156372</left_val>
-            <right_val>0.2935043871402741</right_val></_></_>
-        <_>
-          <!-- tree 5 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>14 6 2 6 -1.</_>
-                <_>14 9 2 3 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>4.7890920541249216e-004</threshold>
-            <left_val>0.4178153872489929</left_val>
-            <right_val>0.5344064235687256</right_val></_></_>
-        <_>
-          <!-- tree 6 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>4 6 2 6 -1.</_>
-                <_>4 9 2 3 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>1.1720920447260141e-003</threshold>
-            <left_val>0.2899182140827179</left_val>
-            <right_val>0.5132070779800415</right_val></_></_>
-        <_>
-          <!-- tree 7 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>8 15 10 4 -1.</_>
-                <_>13 15 5 2 2.</_>
-                <_>8 17 5 2 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>9.5305702416226268e-004</threshold>
-            <left_val>0.4280124902725220</left_val>
-            <right_val>0.5560845136642456</right_val></_></_>
-        <_>
-          <!-- tree 8 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>6 18 2 2 -1.</_>
-                <_>7 18 1 2 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>1.5099150004971307e-005</threshold>
-            <left_val>0.4044871926307678</left_val>
-            <right_val>0.5404760241508484</right_val></_></_>
-        <_>
-          <!-- tree 9 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>11 3 6 2 -1.</_>
-                <_>11 4 6 1 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-6.0817901976406574e-004</threshold>
-            <left_val>0.4271768927574158</left_val>
-            <right_val>0.5503466129302979</right_val></_></_>
-        <_>
-          <!-- tree 10 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>2 0 16 6 -1.</_>
-                <_>2 2 16 2 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>3.3224520739167929e-003</threshold>
-            <left_val>0.3962723910808563</left_val>
-            <right_val>0.5369734764099121</right_val></_></_>
-        <_>
-          <!-- tree 11 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>11 3 6 2 -1.</_>
-                <_>11 4 6 1 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-1.1037490330636501e-003</threshold>
-            <left_val>0.4727177917957306</left_val>
-            <right_val>0.5237749814987183</right_val></_></_>
-        <_>
-          <!-- tree 12 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>4 11 10 3 -1.</_>
-                <_>4 12 10 1 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-1.4350269921123981e-003</threshold>
-            <left_val>0.5603008270263672</left_val>
-            <right_val>0.4223509132862091</right_val></_></_>
-        <_>
-          <!-- tree 13 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>11 3 6 2 -1.</_>
-                <_>11 4 6 1 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>2.0767399109899998e-003</threshold>
-            <left_val>0.5225917100906372</left_val>
-            <right_val>0.4732725918292999</right_val></_></_>
-        <_>
-          <!-- tree 14 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>3 3 6 2 -1.</_>
-                <_>3 4 6 1 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-1.6412809782195836e-004</threshold>
-            <left_val>0.3999075889587402</left_val>
-            <right_val>0.5432739853858948</right_val></_></_>
-        <_>
-          <!-- tree 15 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>16 0 4 7 -1.</_>
-                <_>16 0 2 7 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>8.8302437216043472e-003</threshold>
-            <left_val>0.4678385853767395</left_val>
-            <right_val>0.6027327179908752</right_val></_></_>
-        <_>
-          <!-- tree 16 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>0 14 9 6 -1.</_>
-                <_>0 16 9 2 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-0.0105520701035857</threshold>
-            <left_val>0.3493967056274414</left_val>
-            <right_val>0.5213974714279175</right_val></_></_>
-        <_>
-          <!-- tree 17 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>9 16 3 3 -1.</_>
-                <_>9 17 3 1 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-2.2731600329279900e-003</threshold>
-            <left_val>0.6185818910598755</left_val>
-            <right_val>0.4749062955379486</right_val></_></_>
-        <_>
-          <!-- tree 18 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>4 6 6 2 -1.</_>
-                <_>6 6 2 2 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-8.4786332445219159e-004</threshold>
-            <left_val>0.5285341143608093</left_val>
-            <right_val>0.3843482136726379</right_val></_></_>
-        <_>
-          <!-- tree 19 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>15 11 1 3 -1.</_>
-                <_>15 12 1 1 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>1.2081359745934606e-003</threshold>
-            <left_val>0.5360640883445740</left_val>
-            <right_val>0.3447335958480835</right_val></_></_>
-        <_>
-          <!-- tree 20 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>5 5 2 3 -1.</_>
-                <_>5 6 2 1 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>2.6512730401009321e-003</threshold>
-            <left_val>0.4558292031288147</left_val>
-            <right_val>0.6193962097167969</right_val></_></_>
-        <_>
-          <!-- tree 21 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>10 9 2 2 -1.</_>
-                <_>10 10 2 1 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-1.1012479662895203e-003</threshold>
-            <left_val>0.3680230081081390</left_val>
-            <right_val>0.5327628254890442</right_val></_></_>
-        <_>
-          <!-- tree 22 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>3 1 4 3 -1.</_>
-                <_>5 1 2 3 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>4.9561518244445324e-004</threshold>
-            <left_val>0.3960595130920410</left_val>
-            <right_val>0.5274940729141235</right_val></_></_>
-        <_>
-          <!-- tree 23 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>16 0 4 7 -1.</_>
-                <_>16 0 2 7 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-0.0439017713069916</threshold>
-            <left_val>0.7020444869995117</left_val>
-            <right_val>0.4992839097976685</right_val></_></_>
-        <_>
-          <!-- tree 24 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>0 0 20 1 -1.</_>
-                <_>10 0 10 1 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>0.0346903502941132</threshold>
-            <left_val>0.5049164295196533</left_val>
-            <right_val>0.2766602933406830</right_val></_></_>
-        <_>
-          <!-- tree 25 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>15 11 1 3 -1.</_>
-                <_>15 12 1 1 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-2.7442190330475569e-003</threshold>
-            <left_val>0.2672632932662964</left_val>
-            <right_val>0.5274971127510071</right_val></_></_>
-        <_>
-          <!-- tree 26 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>0 4 3 4 -1.</_>
-                <_>1 4 1 4 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>3.3316588960587978e-003</threshold>
-            <left_val>0.4579482972621918</left_val>
-            <right_val>0.6001101732254028</right_val></_></_>
-        <_>
-          <!-- tree 27 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>16 3 3 6 -1.</_>
-                <_>16 5 3 2 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-0.0200445707887411</threshold>
-            <left_val>0.3171594142913818</left_val>
-            <right_val>0.5235717892646790</right_val></_></_>
-        <_>
-          <!-- tree 28 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>1 3 3 6 -1.</_>
-                <_>1 5 3 2 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>1.3492030557245016e-003</threshold>
-            <left_val>0.5265362858772278</left_val>
-            <right_val>0.4034324884414673</right_val></_></_>
-        <_>
-          <!-- tree 29 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>6 2 12 6 -1.</_>
-                <_>12 2 6 3 2.</_>
-                <_>6 5 6 3 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>2.9702018946409225e-003</threshold>
-            <left_val>0.5332456827163696</left_val>
-            <right_val>0.4571984112262726</right_val></_></_>
-        <_>
-          <!-- tree 30 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>8 10 4 3 -1.</_>
-                <_>8 11 4 1 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>6.3039981760084629e-003</threshold>
-            <left_val>0.4593310952186585</left_val>
-            <right_val>0.6034635901451111</right_val></_></_>
-        <_>
-          <!-- tree 31 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>4 2 14 6 -1.</_>
-                <_>11 2 7 3 2.</_>
-                <_>4 5 7 3 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-0.0129365902394056</threshold>
-            <left_val>0.4437963962554932</left_val>
-            <right_val>0.5372971296310425</right_val></_></_>
-        <_>
-          <!-- tree 32 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>9 11 2 3 -1.</_>
-                <_>9 12 2 1 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>4.0148729458451271e-003</threshold>
-            <left_val>0.4680323898792267</left_val>
-            <right_val>0.6437833905220032</right_val></_></_>
-        <_>
-          <!-- tree 33 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>15 13 2 3 -1.</_>
-                <_>15 14 2 1 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-2.6401679497212172e-003</threshold>
-            <left_val>0.3709631860256195</left_val>
-            <right_val>0.5314332842826843</right_val></_></_>
-        <_>
-          <!-- tree 34 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>8 12 4 3 -1.</_>
-                <_>8 13 4 1 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>0.0139184398576617</threshold>
-            <left_val>0.4723555147647858</left_val>
-            <right_val>0.7130808830261231</right_val></_></_>
-        <_>
-          <!-- tree 35 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>15 11 1 3 -1.</_>
-                <_>15 12 1 1 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-4.5087869511917233e-004</threshold>
-            <left_val>0.4492394030094147</left_val>
-            <right_val>0.5370404124259949</right_val></_></_>
-        <_>
-          <!-- tree 36 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>7 13 5 2 -1.</_>
-                <_>7 14 5 1 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>2.5384349282830954e-004</threshold>
-            <left_val>0.4406864047050476</left_val>
-            <right_val>0.5514402985572815</right_val></_></_>
-        <_>
-          <!-- tree 37 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>7 12 6 3 -1.</_>
-                <_>7 13 6 1 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>2.2710000630468130e-003</threshold>
-            <left_val>0.4682416915893555</left_val>
-            <right_val>0.5967984199523926</right_val></_></_>
-        <_>
-          <!-- tree 38 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>5 11 4 4 -1.</_>
-                <_>5 13 4 2 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>2.4120779708027840e-003</threshold>
-            <left_val>0.5079392194747925</left_val>
-            <right_val>0.3018598854541779</right_val></_></_>
-        <_>
-          <!-- tree 39 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>11 4 3 3 -1.</_>
-                <_>12 4 1 3 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-3.6025670851813629e-005</threshold>
-            <left_val>0.5601037144660950</left_val>
-            <right_val>0.4471096992492676</right_val></_></_>
-        <_>
-          <!-- tree 40 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>6 4 3 3 -1.</_>
-                <_>7 4 1 3 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-7.4905529618263245e-003</threshold>
-            <left_val>0.2207535058259964</left_val>
-            <right_val>0.4989944100379944</right_val></_></_>
-        <_>
-          <!-- tree 41 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>16 5 3 6 -1.</_>
-                <_>17 5 1 6 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-0.0175131205469370</threshold>
-            <left_val>0.6531215906143189</left_val>
-            <right_val>0.5017648935317993</right_val></_></_>
-        <_>
-          <!-- tree 42 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>3 6 12 7 -1.</_>
-                <_>7 6 4 7 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>0.1428163051605225</threshold>
-            <left_val>0.4967963099479675</left_val>
-            <right_val>0.1482062041759491</right_val></_></_>
-        <_>
-          <!-- tree 43 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>16 5 3 6 -1.</_>
-                <_>17 5 1 6 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>5.5345268920063972e-003</threshold>
-            <left_val>0.4898946881294251</left_val>
-            <right_val>0.5954223871231079</right_val></_></_>
-        <_>
-          <!-- tree 44 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>3 13 2 3 -1.</_>
-                <_>3 14 2 1 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-9.6323591424152255e-004</threshold>
-            <left_val>0.3927116990089417</left_val>
-            <right_val>0.5196074247360230</right_val></_></_>
-        <_>
-          <!-- tree 45 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>16 5 3 6 -1.</_>
-                <_>17 5 1 6 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-2.0370010752230883e-003</threshold>
-            <left_val>0.5613325238227844</left_val>
-            <right_val>0.4884858131408691</right_val></_></_>
-        <_>
-          <!-- tree 46 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>1 5 3 6 -1.</_>
-                <_>2 5 1 6 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>1.6614829655736685e-003</threshold>
-            <left_val>0.4472880065441132</left_val>
-            <right_val>0.5578880906105042</right_val></_></_>
-        <_>
-          <!-- tree 47 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>1 9 18 1 -1.</_>
-                <_>7 9 6 1 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-3.1188090797513723e-003</threshold>
-            <left_val>0.3840532898902893</left_val>
-            <right_val>0.5397477746009827</right_val></_></_>
-        <_>
-          <!-- tree 48 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>0 9 8 7 -1.</_>
-                <_>4 9 4 7 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-6.4000617712736130e-003</threshold>
-            <left_val>0.5843983888626099</left_val>
-            <right_val>0.4533218145370483</right_val></_></_>
-        <_>
-          <!-- tree 49 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>12 11 8 2 -1.</_>
-                <_>12 12 8 1 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>3.1319601112045348e-004</threshold>
-            <left_val>0.5439221858978272</left_val>
-            <right_val>0.4234727919101715</right_val></_></_>
-        <_>
-          <!-- tree 50 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>0 11 8 2 -1.</_>
-                <_>0 12 8 1 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-0.0182220991700888</threshold>
-            <left_val>0.1288464963436127</left_val>
-            <right_val>0.4958404898643494</right_val></_></_>
-        <_>
-          <!-- tree 51 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>9 13 2 3 -1.</_>
-                <_>9 14 2 1 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>8.7969247251749039e-003</threshold>
-            <left_val>0.4951297938823700</left_val>
-            <right_val>0.7153480052947998</right_val></_></_>
-        <_>
-          <!-- tree 52 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>4 10 12 4 -1.</_>
-                <_>4 10 6 2 2.</_>
-                <_>10 12 6 2 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-4.2395070195198059e-003</threshold>
-            <left_val>0.3946599960327148</left_val>
-            <right_val>0.5194936990737915</right_val></_></_>
-        <_>
-          <!-- tree 53 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>9 3 3 7 -1.</_>
-                <_>10 3 1 7 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>9.7086271271109581e-003</threshold>
-            <left_val>0.4897503852844238</left_val>
-            <right_val>0.6064900159835815</right_val></_></_>
-        <_>
-          <!-- tree 54 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>7 2 3 5 -1.</_>
-                <_>8 2 1 5 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-3.9934171363711357e-003</threshold>
-            <left_val>0.3245440125465393</left_val>
-            <right_val>0.5060828924179077</right_val></_></_>
-        <_>
-          <!-- tree 55 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>9 12 4 6 -1.</_>
-                <_>11 12 2 3 2.</_>
-                <_>9 15 2 3 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-0.0167850591242313</threshold>
-            <left_val>0.1581953018903732</left_val>
-            <right_val>0.5203778743743897</right_val></_></_>
-        <_>
-          <!-- tree 56 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>8 7 3 6 -1.</_>
-                <_>9 7 1 6 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>0.0182720907032490</threshold>
-            <left_val>0.4680935144424439</left_val>
-            <right_val>0.6626979112625122</right_val></_></_>
-        <_>
-          <!-- tree 57 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>15 4 4 2 -1.</_>
-                <_>15 5 4 1 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>5.6872838176786900e-003</threshold>
-            <left_val>0.5211697816848755</left_val>
-            <right_val>0.3512184917926788</right_val></_></_>
-        <_>
-          <!-- tree 58 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>8 7 3 3 -1.</_>
-                <_>9 7 1 3 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-1.0739039862528443e-003</threshold>
-            <left_val>0.5768386125564575</left_val>
-            <right_val>0.4529845118522644</right_val></_></_>
-        <_>
-          <!-- tree 59 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>14 2 6 4 -1.</_>
-                <_>14 4 6 2 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-3.7093870341777802e-003</threshold>
-            <left_val>0.4507763087749481</left_val>
-            <right_val>0.5313581228256226</right_val></_></_>
-        <_>
-          <!-- tree 60 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>7 16 6 1 -1.</_>
-                <_>9 16 2 1 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-2.1110709349159151e-004</threshold>
-            <left_val>0.5460820198059082</left_val>
-            <right_val>0.4333376884460449</right_val></_></_>
-        <_>
-          <!-- tree 61 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>15 13 2 3 -1.</_>
-                <_>15 14 2 1 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>1.0670139454305172e-003</threshold>
-            <left_val>0.5371856093406677</left_val>
-            <right_val>0.4078390896320343</right_val></_></_>
-        <_>
-          <!-- tree 62 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>8 7 3 10 -1.</_>
-                <_>9 7 1 10 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>3.5943021066486835e-003</threshold>
-            <left_val>0.4471287131309509</left_val>
-            <right_val>0.5643836259841919</right_val></_></_>
-        <_>
-          <!-- tree 63 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>11 10 2 6 -1.</_>
-                <_>11 12 2 2 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-5.1776031032204628e-003</threshold>
-            <left_val>0.4499393105506897</left_val>
-            <right_val>0.5280330181121826</right_val></_></_>
-        <_>
-          <!-- tree 64 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>6 10 4 1 -1.</_>
-                <_>8 10 2 1 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-2.5414369883947074e-004</threshold>
-            <left_val>0.5516173243522644</left_val>
-            <right_val>0.4407708048820496</right_val></_></_>
-        <_>
-          <!-- tree 65 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>10 9 2 2 -1.</_>
-                <_>10 10 2 1 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>6.3522560521960258e-003</threshold>
-            <left_val>0.5194190144538879</left_val>
-            <right_val>0.2465227991342545</right_val></_></_>
-        <_>
-          <!-- tree 66 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>8 9 2 2 -1.</_>
-                <_>8 10 2 1 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-4.4205080484971404e-004</threshold>
-            <left_val>0.3830705881118774</left_val>
-            <right_val>0.5139682292938232</right_val></_></_>
-        <_>
-          <!-- tree 67 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>12 7 2 2 -1.</_>
-                <_>13 7 1 1 2.</_>
-                <_>12 8 1 1 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>7.4488727841526270e-004</threshold>
-            <left_val>0.4891090989112854</left_val>
-            <right_val>0.5974786877632141</right_val></_></_>
-        <_>
-          <!-- tree 68 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>5 7 2 2 -1.</_>
-                <_>5 7 1 1 2.</_>
-                <_>6 8 1 1 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-3.5116379149258137e-003</threshold>
-            <left_val>0.7413681745529175</left_val>
-            <right_val>0.4768764972686768</right_val></_></_>
-        <_>
-          <!-- tree 69 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>13 0 3 14 -1.</_>
-                <_>14 0 1 14 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-0.0125409103929996</threshold>
-            <left_val>0.3648819029331207</left_val>
-            <right_val>0.5252826809883118</right_val></_></_>
-        <_>
-          <!-- tree 70 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>4 0 3 14 -1.</_>
-                <_>5 0 1 14 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>9.4931852072477341e-003</threshold>
-            <left_val>0.5100492835044861</left_val>
-            <right_val>0.3629586994647980</right_val></_></_>
-        <_>
-          <!-- tree 71 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>13 4 3 14 -1.</_>
-                <_>14 4 1 14 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>0.0129611501470208</threshold>
-            <left_val>0.5232442021369934</left_val>
-            <right_val>0.4333561062812805</right_val></_></_>
-        <_>
-          <!-- tree 72 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>9 14 2 3 -1.</_>
-                <_>9 15 2 1 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>4.7209449112415314e-003</threshold>
-            <left_val>0.4648149013519287</left_val>
-            <right_val>0.6331052780151367</right_val></_></_>
-        <_>
-          <!-- tree 73 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>8 14 4 3 -1.</_>
-                <_>8 15 4 1 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-2.3119079414755106e-003</threshold>
-            <left_val>0.5930309891700745</left_val>
-            <right_val>0.4531058073043823</right_val></_></_>
-        <_>
-          <!-- tree 74 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>4 2 3 16 -1.</_>
-                <_>5 2 1 16 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-2.8262299019843340e-003</threshold>
-            <left_val>0.3870477974414825</left_val>
-            <right_val>0.5257101058959961</right_val></_></_>
-        <_>
-          <!-- tree 75 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>7 2 8 10 -1.</_>
-                <_>7 7 8 5 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-1.4311339473351836e-003</threshold>
-            <left_val>0.5522503256797791</left_val>
-            <right_val>0.4561854898929596</right_val></_></_>
-        <_>
-          <!-- tree 76 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>6 14 7 3 -1.</_>
-                <_>6 15 7 1 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>1.9378310535103083e-003</threshold>
-            <left_val>0.4546220898628235</left_val>
-            <right_val>0.5736966729164124</right_val></_></_>
-        <_>
-          <!-- tree 77 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>9 2 10 12 -1.</_>
-                <_>14 2 5 6 2.</_>
-                <_>9 8 5 6 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>2.6343559147790074e-004</threshold>
-            <left_val>0.5345739126205444</left_val>
-            <right_val>0.4571875035762787</right_val></_></_>
-        <_>
-          <!-- tree 78 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>6 7 8 2 -1.</_>
-                <_>6 8 8 1 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>7.8257522545754910e-004</threshold>
-            <left_val>0.3967815935611725</left_val>
-            <right_val>0.5220187902450562</right_val></_></_>
-        <_>
-          <!-- tree 79 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>8 13 4 6 -1.</_>
-                <_>8 16 4 3 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-0.0195504408329725</threshold>
-            <left_val>0.2829642891883850</left_val>
-            <right_val>0.5243508219718933</right_val></_></_>
-        <_>
-          <!-- tree 80 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>6 6 1 3 -1.</_>
-                <_>6 7 1 1 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>4.3914958951063454e-004</threshold>
-            <left_val>0.4590066969394684</left_val>
-            <right_val>0.5899090170860291</right_val></_></_>
-        <_>
-          <!-- tree 81 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>16 2 4 6 -1.</_>
-                <_>16 4 4 2 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>0.0214520003646612</threshold>
-            <left_val>0.5231410861015320</left_val>
-            <right_val>0.2855378985404968</right_val></_></_>
-        <_>
-          <!-- tree 82 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>6 6 4 2 -1.</_>
-                <_>6 6 2 1 2.</_>
-                <_>8 7 2 1 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>5.8973580598831177e-004</threshold>
-            <left_val>0.4397256970405579</left_val>
-            <right_val>0.5506421923637390</right_val></_></_>
-        <_>
-          <!-- tree 83 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>16 2 4 6 -1.</_>
-                <_>16 4 4 2 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-0.0261576101183891</threshold>
-            <left_val>0.3135079145431519</left_val>
-            <right_val>0.5189175009727478</right_val></_></_>
-        <_>
-          <!-- tree 84 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>0 2 4 6 -1.</_>
-                <_>0 4 4 2 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-0.0139598604291677</threshold>
-            <left_val>0.3213272988796234</left_val>
-            <right_val>0.5040717720985413</right_val></_></_>
-        <_>
-          <!-- tree 85 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>9 6 2 6 -1.</_>
-                <_>9 6 1 6 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-6.3699018210172653e-003</threshold>
-            <left_val>0.6387544870376587</left_val>
-            <right_val>0.4849506914615631</right_val></_></_>
-        <_>
-          <!-- tree 86 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>3 4 6 10 -1.</_>
-                <_>3 9 6 5 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-8.5613820701837540e-003</threshold>
-            <left_val>0.2759132087230682</left_val>
-            <right_val>0.5032019019126892</right_val></_></_>
-        <_>
-          <!-- tree 87 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>9 5 2 6 -1.</_>
-                <_>9 5 1 6 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>9.6622901037335396e-004</threshold>
-            <left_val>0.4685640931129456</left_val>
-            <right_val>0.5834879279136658</right_val></_></_>
-        <_>
-          <!-- tree 88 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>3 13 2 3 -1.</_>
-                <_>3 14 2 1 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>7.6550268568098545e-004</threshold>
-            <left_val>0.5175207257270813</left_val>
-            <right_val>0.3896422088146210</right_val></_></_>
-        <_>
-          <!-- tree 89 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>13 13 3 2 -1.</_>
-                <_>13 14 3 1 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-8.1833340227603912e-003</threshold>
-            <left_val>0.2069136947393417</left_val>
-            <right_val>0.5208122134208679</right_val></_></_>
-        <_>
-          <!-- tree 90 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>2 16 10 4 -1.</_>
-                <_>2 16 5 2 2.</_>
-                <_>7 18 5 2 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-9.3976939097046852e-003</threshold>
-            <left_val>0.6134091019630432</left_val>
-            <right_val>0.4641222953796387</right_val></_></_>
-        <_>
-          <!-- tree 91 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>5 6 10 6 -1.</_>
-                <_>10 6 5 3 2.</_>
-                <_>5 9 5 3 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>4.8028980381786823e-003</threshold>
-            <left_val>0.5454108119010925</left_val>
-            <right_val>0.4395219981670380</right_val></_></_>
-        <_>
-          <!-- tree 92 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>7 14 1 3 -1.</_>
-                <_>7 15 1 1 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-3.5680569708347321e-003</threshold>
-            <left_val>0.6344485282897949</left_val>
-            <right_val>0.4681093990802765</right_val></_></_>
-        <_>
-          <!-- tree 93 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>14 16 6 3 -1.</_>
-                <_>14 17 6 1 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>4.0733120404183865e-003</threshold>
-            <left_val>0.5292683243751526</left_val>
-            <right_val>0.4015620052814484</right_val></_></_>
-        <_>
-          <!-- tree 94 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>5 4 3 3 -1.</_>
-                <_>5 5 3 1 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>1.2568129459396005e-003</threshold>
-            <left_val>0.4392988085746765</left_val>
-            <right_val>0.5452824831008911</right_val></_></_>
-        <_>
-          <!-- tree 95 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>7 4 10 3 -1.</_>
-                <_>7 5 10 1 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-2.9065010603517294e-003</threshold>
-            <left_val>0.5898832082748413</left_val>
-            <right_val>0.4863379895687103</right_val></_></_>
-        <_>
-          <!-- tree 96 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>0 4 5 4 -1.</_>
-                <_>0 6 5 2 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-2.4409340694546700e-003</threshold>
-            <left_val>0.4069364964962006</left_val>
-            <right_val>0.5247421860694885</right_val></_></_>
-        <_>
-          <!-- tree 97 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>13 11 3 9 -1.</_>
-                <_>13 14 3 3 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>0.0248307008296251</threshold>
-            <left_val>0.5182725787162781</left_val>
-            <right_val>0.3682524859905243</right_val></_></_>
-        <_>
-          <!-- tree 98 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>4 11 3 9 -1.</_>
-                <_>4 14 3 3 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-0.0488540083169937</threshold>
-            <left_val>0.1307577937841415</left_val>
-            <right_val>0.4961281120777130</right_val></_></_>
-        <_>
-          <!-- tree 99 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>9 7 2 1 -1.</_>
-                <_>9 7 1 1 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-1.6110379947349429e-003</threshold>
-            <left_val>0.6421005725860596</left_val>
-            <right_val>0.4872662127017975</right_val></_></_>
-        <_>
-          <!-- tree 100 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>5 0 6 17 -1.</_>
-                <_>7 0 2 17 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-0.0970094799995422</threshold>
-            <left_val>0.0477693490684032</left_val>
-            <right_val>0.4950988888740540</right_val></_></_>
-        <_>
-          <!-- tree 101 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>10 3 6 3 -1.</_>
-                <_>10 3 3 3 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>1.1209240183234215e-003</threshold>
-            <left_val>0.4616267085075378</left_val>
-            <right_val>0.5354745984077454</right_val></_></_>
-        <_>
-          <!-- tree 102 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>2 2 15 4 -1.</_>
-                <_>7 2 5 4 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-1.3064090162515640e-003</threshold>
-            <left_val>0.6261854171752930</left_val>
-            <right_val>0.4638805985450745</right_val></_></_>
-        <_>
-          <!-- tree 103 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>8 2 8 2 -1.</_>
-                <_>12 2 4 1 2.</_>
-                <_>8 3 4 1 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>4.5771620352752507e-004</threshold>
-            <left_val>0.5384417772293091</left_val>
-            <right_val>0.4646640121936798</right_val></_></_>
-        <_>
-          <!-- tree 104 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>8 1 3 6 -1.</_>
-                <_>8 3 3 2 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-6.3149951165542006e-004</threshold>
-            <left_val>0.3804047107696533</left_val>
-            <right_val>0.5130257010459900</right_val></_></_>
-        <_>
-          <!-- tree 105 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>9 17 2 2 -1.</_>
-                <_>9 18 2 1 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>1.4505970466416329e-004</threshold>
-            <left_val>0.4554310142993927</left_val>
-            <right_val>0.5664461851119995</right_val></_></_>
-        <_>
-          <!-- tree 106 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>0 0 2 14 -1.</_>
-                <_>1 0 1 14 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-0.0164745505899191</threshold>
-            <left_val>0.6596958041191101</left_val>
-            <right_val>0.4715859889984131</right_val></_></_>
-        <_>
-          <!-- tree 107 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>12 0 7 3 -1.</_>
-                <_>12 1 7 1 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>0.0133695797994733</threshold>
-            <left_val>0.5195466279983521</left_val>
-            <right_val>0.3035964965820313</right_val></_></_>
-        <_>
-          <!-- tree 108 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>1 14 1 2 -1.</_>
-                <_>1 15 1 1 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>1.0271780047332868e-004</threshold>
-            <left_val>0.5229176282882690</left_val>
-            <right_val>0.4107066094875336</right_val></_></_>
-        <_>
-          <!-- tree 109 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>14 12 2 8 -1.</_>
-                <_>15 12 1 4 2.</_>
-                <_>14 16 1 4 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-5.5311559699475765e-003</threshold>
-            <left_val>0.6352887749671936</left_val>
-            <right_val>0.4960907101631165</right_val></_></_>
-        <_>
-          <!-- tree 110 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>1 0 7 3 -1.</_>
-                <_>1 1 7 1 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-2.6187049224972725e-003</threshold>
-            <left_val>0.3824546039104462</left_val>
-            <right_val>0.5140984058380127</right_val></_></_>
-        <_>
-          <!-- tree 111 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>14 12 2 8 -1.</_>
-                <_>15 12 1 4 2.</_>
-                <_>14 16 1 4 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>5.0834268331527710e-003</threshold>
-            <left_val>0.4950439929962158</left_val>
-            <right_val>0.6220818758010864</right_val></_></_>
-        <_>
-          <!-- tree 112 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>6 0 8 12 -1.</_>
-                <_>6 0 4 6 2.</_>
-                <_>10 6 4 6 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>0.0798181593418121</threshold>
-            <left_val>0.4952335953712463</left_val>
-            <right_val>0.1322475969791412</right_val></_></_>
-        <_>
-          <!-- tree 113 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>6 1 8 9 -1.</_>
-                <_>6 4 8 3 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-0.0992265865206718</threshold>
-            <left_val>0.7542728781700134</left_val>
-            <right_val>0.5008416771888733</right_val></_></_>
-        <_>
-          <!-- tree 114 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>5 2 2 2 -1.</_>
-                <_>5 3 2 1 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-6.5174017800018191e-004</threshold>
-            <left_val>0.3699302971363068</left_val>
-            <right_val>0.5130121111869812</right_val></_></_>
-        <_>
-          <!-- tree 115 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>13 14 6 6 -1.</_>
-                <_>16 14 3 3 2.</_>
-                <_>13 17 3 3 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-0.0189968496561050</threshold>
-            <left_val>0.6689178943634033</left_val>
-            <right_val>0.4921202957630158</right_val></_></_>
-        <_>
-          <!-- tree 116 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>0 17 20 2 -1.</_>
-                <_>0 17 10 1 2.</_>
-                <_>10 18 10 1 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>0.0173468999564648</threshold>
-            <left_val>0.4983300864696503</left_val>
-            <right_val>0.1859198063611984</right_val></_></_>
-        <_>
-          <!-- tree 117 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>10 3 2 6 -1.</_>
-                <_>11 3 1 3 2.</_>
-                <_>10 6 1 3 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>5.5082101607695222e-004</threshold>
-            <left_val>0.4574424028396606</left_val>
-            <right_val>0.5522121787071228</right_val></_></_>
-        <_>
-          <!-- tree 118 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>5 12 6 2 -1.</_>
-                <_>8 12 3 2 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>2.0056050270795822e-003</threshold>
-            <left_val>0.5131744742393494</left_val>
-            <right_val>0.3856469988822937</right_val></_></_>
-        <_>
-          <!-- tree 119 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>10 7 6 13 -1.</_>
-                <_>10 7 3 13 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-7.7688191086053848e-003</threshold>
-            <left_val>0.4361700117588043</left_val>
-            <right_val>0.5434309244155884</right_val></_></_>
-        <_>
-          <!-- tree 120 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>5 15 10 5 -1.</_>
-                <_>10 15 5 5 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>0.0508782789111137</threshold>
-            <left_val>0.4682720899581909</left_val>
-            <right_val>0.6840639710426331</right_val></_></_>
-        <_>
-          <!-- tree 121 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>10 4 4 10 -1.</_>
-                <_>10 4 2 10 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-2.2901780903339386e-003</threshold>
-            <left_val>0.4329245090484619</left_val>
-            <right_val>0.5306099057197571</right_val></_></_>
-        <_>
-          <!-- tree 122 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>5 7 2 1 -1.</_>
-                <_>6 7 1 1 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-1.5715380141045898e-004</threshold>
-            <left_val>0.5370057225227356</left_val>
-            <right_val>0.4378164112567902</right_val></_></_>
-        <_>
-          <!-- tree 123 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>10 3 6 7 -1.</_>
-                <_>10 3 3 7 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>0.1051924005150795</threshold>
-            <left_val>0.5137274265289307</left_val>
-            <right_val>0.0673614665865898</right_val></_></_>
-        <_>
-          <!-- tree 124 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>4 3 6 7 -1.</_>
-                <_>7 3 3 7 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>2.7198919560760260e-003</threshold>
-            <left_val>0.4112060964107513</left_val>
-            <right_val>0.5255665183067322</right_val></_></_>
-        <_>
-          <!-- tree 125 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>1 7 18 5 -1.</_>
-                <_>7 7 6 5 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>0.0483377799391747</threshold>
-            <left_val>0.5404623746871948</left_val>
-            <right_val>0.4438967108726502</right_val></_></_>
-        <_>
-          <!-- tree 126 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>3 17 4 3 -1.</_>
-                <_>5 17 2 3 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>9.5703761326149106e-004</threshold>
-            <left_val>0.4355969130992889</left_val>
-            <right_val>0.5399510860443115</right_val></_></_>
-        <_>
-          <!-- tree 127 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>8 14 12 6 -1.</_>
-                <_>14 14 6 3 2.</_>
-                <_>8 17 6 3 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-0.0253712590783834</threshold>
-            <left_val>0.5995175242424011</left_val>
-            <right_val>0.5031024813652039</right_val></_></_>
-        <_>
-          <!-- tree 128 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>0 13 20 4 -1.</_>
-                <_>0 13 10 2 2.</_>
-                <_>10 15 10 2 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>0.0524579510092735</threshold>
-            <left_val>0.4950287938117981</left_val>
-            <right_val>0.1398351043462753</right_val></_></_>
-        <_>
-          <!-- tree 129 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>4 5 14 2 -1.</_>
-                <_>11 5 7 1 2.</_>
-                <_>4 6 7 1 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-0.0123656298965216</threshold>
-            <left_val>0.6397299170494080</left_val>
-            <right_val>0.4964106082916260</right_val></_></_>
-        <_>
-          <!-- tree 130 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>1 2 10 12 -1.</_>
-                <_>1 2 5 6 2.</_>
-                <_>6 8 5 6 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-0.1458971947431564</threshold>
-            <left_val>0.1001669988036156</left_val>
-            <right_val>0.4946322143077850</right_val></_></_>
-        <_>
-          <!-- tree 131 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>6 1 14 3 -1.</_>
-                <_>6 2 14 1 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-0.0159086007624865</threshold>
-            <left_val>0.3312329947948456</left_val>
-            <right_val>0.5208340883255005</right_val></_></_>
-        <_>
-          <!-- tree 132 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>8 16 2 3 -1.</_>
-                <_>8 17 2 1 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>3.9486068999394774e-004</threshold>
-            <left_val>0.4406363964080811</left_val>
-            <right_val>0.5426102876663208</right_val></_></_>
-        <_>
-          <!-- tree 133 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>9 17 3 2 -1.</_>
-                <_>10 17 1 2 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-5.2454001270234585e-003</threshold>
-            <left_val>0.2799589931964874</left_val>
-            <right_val>0.5189967155456543</right_val></_></_>
-        <_>
-          <!-- tree 134 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>5 15 4 2 -1.</_>
-                <_>5 15 2 1 2.</_>
-                <_>7 16 2 1 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-5.0421799533069134e-003</threshold>
-            <left_val>0.6987580060958862</left_val>
-            <right_val>0.4752142131328583</right_val></_></_>
-        <_>
-          <!-- tree 135 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>10 15 1 3 -1.</_>
-                <_>10 16 1 1 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>2.9812189750373363e-003</threshold>
-            <left_val>0.4983288943767548</left_val>
-            <right_val>0.6307479739189148</right_val></_></_>
-        <_>
-          <!-- tree 136 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>8 16 4 4 -1.</_>
-                <_>8 16 2 2 2.</_>
-                <_>10 18 2 2 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-7.2884308174252510e-003</threshold>
-            <left_val>0.2982333004474640</left_val>
-            <right_val>0.5026869773864746</right_val></_></_>
-        <_>
-          <!-- tree 137 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>6 11 8 6 -1.</_>
-                <_>6 14 8 3 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>1.5094350092113018e-003</threshold>
-            <left_val>0.5308442115783691</left_val>
-            <right_val>0.3832970857620239</right_val></_></_>
-        <_>
-          <!-- tree 138 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>2 13 5 2 -1.</_>
-                <_>2 14 5 1 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-9.3340799212455750e-003</threshold>
-            <left_val>0.2037964016199112</left_val>
-            <right_val>0.4969817101955414</right_val></_></_>
-        <_>
-          <!-- tree 139 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>13 14 6 6 -1.</_>
-                <_>16 14 3 3 2.</_>
-                <_>13 17 3 3 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>0.0286671407520771</threshold>
-            <left_val>0.5025696754455566</left_val>
-            <right_val>0.6928027272224426</right_val></_></_>
-        <_>
-          <!-- tree 140 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>1 9 18 4 -1.</_>
-                <_>7 9 6 4 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>0.1701968014240265</threshold>
-            <left_val>0.4960052967071533</left_val>
-            <right_val>0.1476442962884903</right_val></_></_>
-        <_>
-          <!-- tree 141 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>13 14 6 6 -1.</_>
-                <_>16 14 3 3 2.</_>
-                <_>13 17 3 3 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-3.2614478841423988e-003</threshold>
-            <left_val>0.5603063702583313</left_val>
-            <right_val>0.4826056063175201</right_val></_></_>
-        <_>
-          <!-- tree 142 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>0 2 1 6 -1.</_>
-                <_>0 4 1 2 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>5.5769277969375253e-004</threshold>
-            <left_val>0.5205562114715576</left_val>
-            <right_val>0.4129633009433746</right_val></_></_>
-        <_>
-          <!-- tree 143 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>5 0 15 20 -1.</_>
-                <_>5 10 15 10 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>0.3625833988189697</threshold>
-            <left_val>0.5221652984619141</left_val>
-            <right_val>0.3768612146377564</right_val></_></_>
-        <_>
-          <!-- tree 144 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>1 14 6 6 -1.</_>
-                <_>1 14 3 3 2.</_>
-                <_>4 17 3 3 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-0.0116151301190257</threshold>
-            <left_val>0.6022682785987854</left_val>
-            <right_val>0.4637489914894104</right_val></_></_>
-        <_>
-          <!-- tree 145 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>8 14 4 6 -1.</_>
-                <_>10 14 2 3 2.</_>
-                <_>8 17 2 3 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-4.0795197710394859e-003</threshold>
-            <left_val>0.4070447087287903</left_val>
-            <right_val>0.5337479114532471</right_val></_></_>
-        <_>
-          <!-- tree 146 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>7 11 2 1 -1.</_>
-                <_>8 11 1 1 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>5.7204300537705421e-004</threshold>
-            <left_val>0.4601835012435913</left_val>
-            <right_val>0.5900393128395081</right_val></_></_>
-        <_>
-          <!-- tree 147 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>9 17 3 2 -1.</_>
-                <_>10 17 1 2 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>6.7543348995968699e-004</threshold>
-            <left_val>0.5398252010345459</left_val>
-            <right_val>0.4345428943634033</right_val></_></_>
-        <_>
-          <!-- tree 148 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>8 17 3 2 -1.</_>
-                <_>9 17 1 2 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>6.3295697327703238e-004</threshold>
-            <left_val>0.5201563239097595</left_val>
-            <right_val>0.4051358997821808</right_val></_></_>
-        <_>
-          <!-- tree 149 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>12 14 4 6 -1.</_>
-                <_>14 14 2 3 2.</_>
-                <_>12 17 2 3 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>1.2435320531949401e-003</threshold>
-            <left_val>0.4642387926578522</left_val>
-            <right_val>0.5547441244125366</right_val></_></_>
-        <_>
-          <!-- tree 150 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>4 14 4 6 -1.</_>
-                <_>4 14 2 3 2.</_>
-                <_>6 17 2 3 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-4.7363857738673687e-003</threshold>
-            <left_val>0.6198567152023315</left_val>
-            <right_val>0.4672552049160004</right_val></_></_>
-        <_>
-          <!-- tree 151 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>13 14 2 6 -1.</_>
-                <_>14 14 1 3 2.</_>
-                <_>13 17 1 3 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-6.4658462069928646e-003</threshold>
-            <left_val>0.6837332844734192</left_val>
-            <right_val>0.5019000768661499</right_val></_></_>
-        <_>
-          <!-- tree 152 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>5 14 2 6 -1.</_>
-                <_>5 14 1 3 2.</_>
-                <_>6 17 1 3 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>3.5017321351915598e-004</threshold>
-            <left_val>0.4344803094863892</left_val>
-            <right_val>0.5363622903823853</right_val></_></_>
-        <_>
-          <!-- tree 153 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>7 0 6 12 -1.</_>
-                <_>7 4 6 4 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>1.5754920605104417e-004</threshold>
-            <left_val>0.4760079085826874</left_val>
-            <right_val>0.5732020735740662</right_val></_></_>
-        <_>
-          <!-- tree 154 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>0 7 12 2 -1.</_>
-                <_>4 7 4 2 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>9.9774366244673729e-003</threshold>
-            <left_val>0.5090985894203186</left_val>
-            <right_val>0.3635039925575256</right_val></_></_>
-        <_>
-          <!-- tree 155 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>10 3 3 13 -1.</_>
-                <_>11 3 1 13 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-4.1464529931545258e-004</threshold>
-            <left_val>0.5570064783096314</left_val>
-            <right_val>0.4593802094459534</right_val></_></_>
-        <_>
-          <!-- tree 156 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>7 3 3 13 -1.</_>
-                <_>8 3 1 13 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-3.5888899583369493e-004</threshold>
-            <left_val>0.5356845855712891</left_val>
-            <right_val>0.4339134991168976</right_val></_></_>
-        <_>
-          <!-- tree 157 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>10 8 6 3 -1.</_>
-                <_>10 9 6 1 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>4.0463250479660928e-004</threshold>
-            <left_val>0.4439803063869476</left_val>
-            <right_val>0.5436776876449585</right_val></_></_>
-        <_>
-          <!-- tree 158 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>3 11 3 2 -1.</_>
-                <_>4 11 1 2 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-8.2184787606820464e-004</threshold>
-            <left_val>0.4042294919490814</left_val>
-            <right_val>0.5176299214363098</right_val></_></_>
-        <_>
-          <!-- tree 159 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>13 12 6 8 -1.</_>
-                <_>16 12 3 4 2.</_>
-                <_>13 16 3 4 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>5.9467419050633907e-003</threshold>
-            <left_val>0.4927651882171631</left_val>
-            <right_val>0.5633779764175415</right_val></_></_>
-        <_>
-          <!-- tree 160 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>7 6 6 5 -1.</_>
-                <_>9 6 2 5 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-0.0217533893883228</threshold>
-            <left_val>0.8006293773651123</left_val>
-            <right_val>0.4800840914249420</right_val></_></_>
-        <_>
-          <!-- tree 161 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>17 11 2 7 -1.</_>
-                <_>17 11 1 7 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-0.0145403798669577</threshold>
-            <left_val>0.3946054875850678</left_val>
-            <right_val>0.5182222723960877</right_val></_></_>
-        <_>
-          <!-- tree 162 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>3 13 8 2 -1.</_>
-                <_>7 13 4 2 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-0.0405107699334621</threshold>
-            <left_val>0.0213249903172255</left_val>
-            <right_val>0.4935792982578278</right_val></_></_>
-        <_>
-          <!-- tree 163 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>6 9 8 3 -1.</_>
-                <_>6 10 8 1 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-5.8458268176764250e-004</threshold>
-            <left_val>0.4012795984745026</left_val>
-            <right_val>0.5314025282859802</right_val></_></_>
-        <_>
-          <!-- tree 164 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>4 3 4 3 -1.</_>
-                <_>4 4 4 1 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>5.5151800625026226e-003</threshold>
-            <left_val>0.4642418920993805</left_val>
-            <right_val>0.5896260738372803</right_val></_></_>
-        <_>
-          <!-- tree 165 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>11 3 4 3 -1.</_>
-                <_>11 4 4 1 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-6.0626221820712090e-003</threshold>
-            <left_val>0.6502159237861633</left_val>
-            <right_val>0.5016477704048157</right_val></_></_>
-        <_>
-          <!-- tree 166 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>1 4 17 12 -1.</_>
-                <_>1 8 17 4 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>0.0945358425378799</threshold>
-            <left_val>0.5264708995819092</left_val>
-            <right_val>0.4126827120780945</right_val></_></_>
-        <_>
-          <!-- tree 167 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>11 3 4 3 -1.</_>
-                <_>11 4 4 1 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>4.7315051779150963e-003</threshold>
-            <left_val>0.4879199862480164</left_val>
-            <right_val>0.5892447829246521</right_val></_></_>
-        <_>
-          <!-- tree 168 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>4 8 6 3 -1.</_>
-                <_>4 9 6 1 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-5.2571471314877272e-004</threshold>
-            <left_val>0.3917280137538910</left_val>
-            <right_val>0.5189412832260132</right_val></_></_>
-        <_>
-          <!-- tree 169 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>12 3 5 3 -1.</_>
-                <_>12 4 5 1 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-2.5464049540460110e-003</threshold>
-            <left_val>0.5837599039077759</left_val>
-            <right_val>0.4985705912113190</right_val></_></_>
-        <_>
-          <!-- tree 170 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>1 11 2 7 -1.</_>
-                <_>2 11 1 7 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-0.0260756891220808</threshold>
-            <left_val>0.1261983960866928</left_val>
-            <right_val>0.4955821931362152</right_val></_></_>
-        <_>
-          <!-- tree 171 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>15 12 2 8 -1.</_>
-                <_>16 12 1 4 2.</_>
-                <_>15 16 1 4 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-5.4779709316790104e-003</threshold>
-            <left_val>0.5722513794898987</left_val>
-            <right_val>0.5010265707969666</right_val></_></_>
-        <_>
-          <!-- tree 172 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>4 8 11 3 -1.</_>
-                <_>4 9 11 1 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>5.1337741315364838e-003</threshold>
-            <left_val>0.5273262262344360</left_val>
-            <right_val>0.4226376116275787</right_val></_></_>
-        <_>
-          <!-- tree 173 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>9 13 6 2 -1.</_>
-                <_>12 13 3 1 2.</_>
-                <_>9 14 3 1 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>4.7944980906322598e-004</threshold>
-            <left_val>0.4450066983699799</left_val>
-            <right_val>0.5819587111473084</right_val></_></_>
-        <_>
-          <!-- tree 174 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>6 13 4 3 -1.</_>
-                <_>6 14 4 1 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-2.1114079281687737e-003</threshold>
-            <left_val>0.5757653117179871</left_val>
-            <right_val>0.4511714875698090</right_val></_></_>
-        <_>
-          <!-- tree 175 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>9 12 3 3 -1.</_>
-                <_>10 12 1 3 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-0.0131799904629588</threshold>
-            <left_val>0.1884381026029587</left_val>
-            <right_val>0.5160734057426453</right_val></_></_>
-        <_>
-          <!-- tree 176 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>5 3 3 3 -1.</_>
-                <_>5 4 3 1 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-4.7968099825084209e-003</threshold>
-            <left_val>0.6589789986610413</left_val>
-            <right_val>0.4736118912696838</right_val></_></_>
-        <_>
-          <!-- tree 177 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>9 4 2 3 -1.</_>
-                <_>9 5 2 1 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>6.7483168095350266e-003</threshold>
-            <left_val>0.5259429812431335</left_val>
-            <right_val>0.3356395065784454</right_val></_></_>
-        <_>
-          <!-- tree 178 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>0 2 16 3 -1.</_>
-                <_>0 3 16 1 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>1.4623369788751006e-003</threshold>
-            <left_val>0.5355271100997925</left_val>
-            <right_val>0.4264092147350311</right_val></_></_>
-        <_>
-          <!-- tree 179 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>15 12 2 8 -1.</_>
-                <_>16 12 1 4 2.</_>
-                <_>15 16 1 4 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>4.7645159065723419e-003</threshold>
-            <left_val>0.5034406781196594</left_val>
-            <right_val>0.5786827802658081</right_val></_></_>
-        <_>
-          <!-- tree 180 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>3 12 2 8 -1.</_>
-                <_>3 12 1 4 2.</_>
-                <_>4 16 1 4 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>6.8066660314798355e-003</threshold>
-            <left_val>0.4756605029106140</left_val>
-            <right_val>0.6677829027175903</right_val></_></_>
-        <_>
-          <!-- tree 181 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>14 13 3 6 -1.</_>
-                <_>14 15 3 2 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>3.6608621012419462e-003</threshold>
-            <left_val>0.5369611978530884</left_val>
-            <right_val>0.4311546981334686</right_val></_></_>
-        <_>
-          <!-- tree 182 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>3 13 3 6 -1.</_>
-                <_>3 15 3 2 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>0.0214496403932571</threshold>
-            <left_val>0.4968641996383667</left_val>
-            <right_val>0.1888816058635712</right_val></_></_>
-        <_>
-          <!-- tree 183 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>6 5 10 2 -1.</_>
-                <_>11 5 5 1 2.</_>
-                <_>6 6 5 1 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>4.1678901761770248e-003</threshold>
-            <left_val>0.4930733144283295</left_val>
-            <right_val>0.5815368890762329</right_val></_></_>
-        <_>
-          <!-- tree 184 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>2 14 14 6 -1.</_>
-                <_>2 17 14 3 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>8.6467564105987549e-003</threshold>
-            <left_val>0.5205205082893372</left_val>
-            <right_val>0.4132595062255859</right_val></_></_>
-        <_>
-          <!-- tree 185 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>10 14 1 3 -1.</_>
-                <_>10 15 1 1 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-3.6114078829996288e-004</threshold>
-            <left_val>0.5483555197715759</left_val>
-            <right_val>0.4800927937030792</right_val></_></_>
-        <_>
-          <!-- tree 186 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>4 16 2 2 -1.</_>
-                <_>4 16 1 1 2.</_>
-                <_>5 17 1 1 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>1.0808729566633701e-003</threshold>
-            <left_val>0.4689902067184448</left_val>
-            <right_val>0.6041421294212341</right_val></_></_>
-        <_>
-          <!-- tree 187 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>10 6 2 3 -1.</_>
-                <_>10 7 2 1 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>5.7719959877431393e-003</threshold>
-            <left_val>0.5171142220497131</left_val>
-            <right_val>0.3053277134895325</right_val></_></_>
-        <_>
-          <!-- tree 188 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>0 17 20 2 -1.</_>
-                <_>0 17 10 1 2.</_>
-                <_>10 18 10 1 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>1.5720770461484790e-003</threshold>
-            <left_val>0.5219978094100952</left_val>
-            <right_val>0.4178803861141205</right_val></_></_>
-        <_>
-          <!-- tree 189 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>13 6 1 3 -1.</_>
-                <_>13 7 1 1 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-1.9307859474793077e-003</threshold>
-            <left_val>0.5860369801521301</left_val>
-            <right_val>0.4812920093536377</right_val></_></_>
-        <_>
-          <!-- tree 190 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>8 13 3 2 -1.</_>
-                <_>9 13 1 2 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-7.8926272690296173e-003</threshold>
-            <left_val>0.1749276965856552</left_val>
-            <right_val>0.4971733987331390</right_val></_></_>
-        <_>
-          <!-- tree 191 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>12 2 3 3 -1.</_>
-                <_>13 2 1 3 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-2.2224679123610258e-003</threshold>
-            <left_val>0.4342589080333710</left_val>
-            <right_val>0.5212848186492920</right_val></_></_>
-        <_>
-          <!-- tree 192 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>3 18 2 2 -1.</_>
-                <_>3 18 1 1 2.</_>
-                <_>4 19 1 1 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>1.9011989934369922e-003</threshold>
-            <left_val>0.4765186905860901</left_val>
-            <right_val>0.6892055273056030</right_val></_></_>
-        <_>
-          <!-- tree 193 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>9 16 3 4 -1.</_>
-                <_>10 16 1 4 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>2.7576119173318148e-003</threshold>
-            <left_val>0.5262191295623779</left_val>
-            <right_val>0.4337486028671265</right_val></_></_>
-        <_>
-          <!-- tree 194 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>6 6 1 3 -1.</_>
-                <_>6 7 1 1 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>5.1787449046969414e-003</threshold>
-            <left_val>0.4804069101810455</left_val>
-            <right_val>0.7843729257583618</right_val></_></_>
-        <_>
-          <!-- tree 195 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>13 1 5 2 -1.</_>
-                <_>13 2 5 1 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-9.0273341629654169e-004</threshold>
-            <left_val>0.4120846986770630</left_val>
-            <right_val>0.5353423953056335</right_val></_></_>
-        <_>
-          <!-- tree 196 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>7 14 6 2 -1.</_>
-                <_>7 14 3 1 2.</_>
-                <_>10 15 3 1 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>5.1797959022223949e-003</threshold>
-            <left_val>0.4740372896194458</left_val>
-            <right_val>0.6425960063934326</right_val></_></_>
-        <_>
-          <!-- tree 197 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>11 3 3 4 -1.</_>
-                <_>12 3 1 4 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-0.0101140001788735</threshold>
-            <left_val>0.2468792051076889</left_val>
-            <right_val>0.5175017714500427</right_val></_></_>
-        <_>
-          <!-- tree 198 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>1 13 12 6 -1.</_>
-                <_>5 13 4 6 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-0.0186170600354671</threshold>
-            <left_val>0.5756294131278992</left_val>
-            <right_val>0.4628978967666626</right_val></_></_>
-        <_>
-          <!-- tree 199 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>14 11 5 2 -1.</_>
-                <_>14 12 5 1 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>5.9225959703326225e-003</threshold>
-            <left_val>0.5169625878334045</left_val>
-            <right_val>0.3214271068572998</right_val></_></_>
-        <_>
-          <!-- tree 200 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>2 15 14 4 -1.</_>
-                <_>2 15 7 2 2.</_>
-                <_>9 17 7 2 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-6.2945079989731312e-003</threshold>
-            <left_val>0.3872014880180359</left_val>
-            <right_val>0.5141636729240418</right_val></_></_>
-        <_>
-          <!-- tree 201 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>3 7 14 2 -1.</_>
-                <_>10 7 7 1 2.</_>
-                <_>3 8 7 1 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>6.5353019163012505e-003</threshold>
-            <left_val>0.4853048920631409</left_val>
-            <right_val>0.6310489773750305</right_val></_></_>
-        <_>
-          <!-- tree 202 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>1 11 4 2 -1.</_>
-                <_>1 12 4 1 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>1.0878399480134249e-003</threshold>
-            <left_val>0.5117315053939819</left_val>
-            <right_val>0.3723258972167969</right_val></_></_>
-        <_>
-          <!-- tree 203 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>14 0 6 14 -1.</_>
-                <_>16 0 2 14 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-0.0225422400981188</threshold>
-            <left_val>0.5692740082740784</left_val>
-            <right_val>0.4887112975120544</right_val></_></_>
-        <_>
-          <!-- tree 204 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>4 11 1 3 -1.</_>
-                <_>4 12 1 1 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-3.0065660830587149e-003</threshold>
-            <left_val>0.2556012868881226</left_val>
-            <right_val>0.5003992915153503</right_val></_></_>
-        <_>
-          <!-- tree 205 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>14 0 6 14 -1.</_>
-                <_>16 0 2 14 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>7.4741272255778313e-003</threshold>
-            <left_val>0.4810872972011566</left_val>
-            <right_val>0.5675926804542542</right_val></_></_>
-        <_>
-          <!-- tree 206 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>1 10 3 7 -1.</_>
-                <_>2 10 1 7 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>0.0261623207479715</threshold>
-            <left_val>0.4971194863319397</left_val>
-            <right_val>0.1777237057685852</right_val></_></_>
-        <_>
-          <!-- tree 207 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>8 12 9 2 -1.</_>
-                <_>8 13 9 1 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>9.4352738233283162e-004</threshold>
-            <left_val>0.4940010905265808</left_val>
-            <right_val>0.5491250753402710</right_val></_></_>
-        <_>
-          <!-- tree 208 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>0 6 20 1 -1.</_>
-                <_>10 6 10 1 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>0.0333632417023182</threshold>
-            <left_val>0.5007612109184265</left_val>
-            <right_val>0.2790724039077759</right_val></_></_>
-        <_>
-          <!-- tree 209 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>8 4 4 4 -1.</_>
-                <_>8 4 2 4 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-0.0151186501607299</threshold>
-            <left_val>0.7059578895568848</left_val>
-            <right_val>0.4973031878471375</right_val></_></_>
-        <_>
-          <!-- tree 210 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>0 0 2 2 -1.</_>
-                <_>0 1 2 1 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>9.8648946732282639e-004</threshold>
-            <left_val>0.5128620266914368</left_val>
-            <right_val>0.3776761889457703</right_val></_></_></trees>
-      <stage_threshold>104.7491989135742200</stage_threshold>
-      <parent>19</parent>
-      <next>-1</next></_>
-    <_>
-      <!-- stage 21 -->
-      <trees>
-        <_>
-          <!-- tree 0 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>5 3 10 9 -1.</_>
-                <_>5 6 10 3 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-0.0951507985591888</threshold>
-            <left_val>0.6470757126808167</left_val>
-            <right_val>0.4017286896705627</right_val></_></_>
-        <_>
-          <!-- tree 1 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>15 2 4 10 -1.</_>
-                <_>15 2 2 10 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>6.2702340073883533e-003</threshold>
-            <left_val>0.3999822139739990</left_val>
-            <right_val>0.5746449232101440</right_val></_></_>
-        <_>
-          <!-- tree 2 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>8 2 2 7 -1.</_>
-                <_>9 2 1 7 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>3.0018089455552399e-004</threshold>
-            <left_val>0.3558770120143890</left_val>
-            <right_val>0.5538809895515442</right_val></_></_>
-        <_>
-          <!-- tree 3 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>7 4 12 1 -1.</_>
-                <_>11 4 4 1 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>1.1757409665733576e-003</threshold>
-            <left_val>0.4256534874439240</left_val>
-            <right_val>0.5382617712020874</right_val></_></_>
-        <_>
-          <!-- tree 4 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>3 4 9 1 -1.</_>
-                <_>6 4 3 1 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>4.4235268433112651e-005</threshold>
-            <left_val>0.3682908117771149</left_val>
-            <right_val>0.5589926838874817</right_val></_></_>
-        <_>
-          <!-- tree 5 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>15 10 1 4 -1.</_>
-                <_>15 12 1 2 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-2.9936920327600092e-005</threshold>
-            <left_val>0.5452470183372498</left_val>
-            <right_val>0.4020367860794067</right_val></_></_>
-        <_>
-          <!-- tree 6 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>4 10 6 4 -1.</_>
-                <_>7 10 3 4 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>3.0073199886828661e-003</threshold>
-            <left_val>0.5239058136940002</left_val>
-            <right_val>0.3317843973636627</right_val></_></_>
-        <_>
-          <!-- tree 7 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>15 9 1 6 -1.</_>
-                <_>15 12 1 3 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-0.0105138896033168</threshold>
-            <left_val>0.4320689141750336</left_val>
-            <right_val>0.5307983756065369</right_val></_></_>
-        <_>
-          <!-- tree 8 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>7 17 6 3 -1.</_>
-                <_>7 18 6 1 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>8.3476826548576355e-003</threshold>
-            <left_val>0.4504637122154236</left_val>
-            <right_val>0.6453298926353455</right_val></_></_>
-        <_>
-          <!-- tree 9 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>14 3 2 16 -1.</_>
-                <_>15 3 1 8 2.</_>
-                <_>14 11 1 8 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-3.1492270063608885e-003</threshold>
-            <left_val>0.4313425123691559</left_val>
-            <right_val>0.5370525121688843</right_val></_></_>
-        <_>
-          <!-- tree 10 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>4 9 1 6 -1.</_>
-                <_>4 12 1 3 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-1.4435649973165710e-005</threshold>
-            <left_val>0.5326603055000305</left_val>
-            <right_val>0.3817971944808960</right_val></_></_>
-        <_>
-          <!-- tree 11 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>12 1 5 2 -1.</_>
-                <_>12 2 5 1 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-4.2855090578086674e-004</threshold>
-            <left_val>0.4305163919925690</left_val>
-            <right_val>0.5382009744644165</right_val></_></_>
-        <_>
-          <!-- tree 12 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>6 18 4 2 -1.</_>
-                <_>6 18 2 1 2.</_>
-                <_>8 19 2 1 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>1.5062429883982986e-004</threshold>
-            <left_val>0.4235970973968506</left_val>
-            <right_val>0.5544965267181397</right_val></_></_>
-        <_>
-          <!-- tree 13 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>2 4 16 10 -1.</_>
-                <_>10 4 8 5 2.</_>
-                <_>2 9 8 5 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>0.0715598315000534</threshold>
-            <left_val>0.5303059816360474</left_val>
-            <right_val>0.2678802907466888</right_val></_></_>
-        <_>
-          <!-- tree 14 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>6 5 1 10 -1.</_>
-                <_>6 10 1 5 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>8.4095180500298738e-004</threshold>
-            <left_val>0.3557108938694000</left_val>
-            <right_val>0.5205433964729309</right_val></_></_>
-        <_>
-          <!-- tree 15 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>4 8 15 2 -1.</_>
-                <_>9 8 5 2 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>0.0629865005612373</threshold>
-            <left_val>0.5225362777709961</left_val>
-            <right_val>0.2861376106739044</right_val></_></_>
-        <_>
-          <!-- tree 16 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>1 8 15 2 -1.</_>
-                <_>6 8 5 2 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-3.3798629883676767e-003</threshold>
-            <left_val>0.3624185919761658</left_val>
-            <right_val>0.5201697945594788</right_val></_></_>
-        <_>
-          <!-- tree 17 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>9 5 3 6 -1.</_>
-                <_>9 7 3 2 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-1.1810739670181647e-004</threshold>
-            <left_val>0.5474476814270020</left_val>
-            <right_val>0.3959893882274628</right_val></_></_>
-        <_>
-          <!-- tree 18 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>5 7 8 2 -1.</_>
-                <_>9 7 4 2 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-5.4505601292476058e-004</threshold>
-            <left_val>0.3740422129631043</left_val>
-            <right_val>0.5215715765953064</right_val></_></_>
-        <_>
-          <!-- tree 19 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>9 11 2 3 -1.</_>
-                <_>9 12 2 1 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-1.8454910023137927e-003</threshold>
-            <left_val>0.5893052220344544</left_val>
-            <right_val>0.4584448933601379</right_val></_></_>
-        <_>
-          <!-- tree 20 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>1 0 16 3 -1.</_>
-                <_>1 1 16 1 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-4.3832371011376381e-004</threshold>
-            <left_val>0.4084582030773163</left_val>
-            <right_val>0.5385351181030273</right_val></_></_>
-        <_>
-          <!-- tree 21 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>11 2 7 2 -1.</_>
-                <_>11 3 7 1 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-2.4000830017030239e-003</threshold>
-            <left_val>0.3777455091476440</left_val>
-            <right_val>0.5293580293655396</right_val></_></_>
-        <_>
-          <!-- tree 22 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>5 1 10 18 -1.</_>
-                <_>5 7 10 6 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-0.0987957417964935</threshold>
-            <left_val>0.2963612079620361</left_val>
-            <right_val>0.5070089101791382</right_val></_></_>
-        <_>
-          <!-- tree 23 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>17 4 3 2 -1.</_>
-                <_>18 4 1 2 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>3.1798239797353745e-003</threshold>
-            <left_val>0.4877632856369019</left_val>
-            <right_val>0.6726443767547607</right_val></_></_>
-        <_>
-          <!-- tree 24 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>8 13 1 3 -1.</_>
-                <_>8 14 1 1 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>3.2406419632025063e-004</threshold>
-            <left_val>0.4366911053657532</left_val>
-            <right_val>0.5561109781265259</right_val></_></_>
-        <_>
-          <!-- tree 25 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>3 14 14 6 -1.</_>
-                <_>3 16 14 2 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-0.0325472503900528</threshold>
-            <left_val>0.3128157854080200</left_val>
-            <right_val>0.5308616161346436</right_val></_></_>
-        <_>
-          <!-- tree 26 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>0 2 3 4 -1.</_>
-                <_>1 2 1 4 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-7.7561130747199059e-003</threshold>
-            <left_val>0.6560224890708923</left_val>
-            <right_val>0.4639872014522553</right_val></_></_>
-        <_>
-          <!-- tree 27 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>12 1 5 2 -1.</_>
-                <_>12 2 5 1 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>0.0160272493958473</threshold>
-            <left_val>0.5172680020332336</left_val>
-            <right_val>0.3141897916793823</right_val></_></_>
-        <_>
-          <!-- tree 28 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>3 1 5 2 -1.</_>
-                <_>3 2 5 1 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>7.1002350523485802e-006</threshold>
-            <left_val>0.4084446132183075</left_val>
-            <right_val>0.5336294770240784</right_val></_></_>
-        <_>
-          <!-- tree 29 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>10 13 2 3 -1.</_>
-                <_>10 14 2 1 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>7.3422808200120926e-003</threshold>
-            <left_val>0.4966922104358673</left_val>
-            <right_val>0.6603465080261231</right_val></_></_>
-        <_>
-          <!-- tree 30 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>8 13 2 3 -1.</_>
-                <_>8 14 2 1 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-1.6970280557870865e-003</threshold>
-            <left_val>0.5908237099647522</left_val>
-            <right_val>0.4500182867050171</right_val></_></_>
-        <_>
-          <!-- tree 31 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>14 12 2 3 -1.</_>
-                <_>14 13 2 1 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>2.4118260480463505e-003</threshold>
-            <left_val>0.5315160751342773</left_val>
-            <right_val>0.3599720895290375</right_val></_></_>
-        <_>
-          <!-- tree 32 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>7 2 2 3 -1.</_>
-                <_>7 3 2 1 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-5.5300937965512276e-003</threshold>
-            <left_val>0.2334040999412537</left_val>
-            <right_val>0.4996814131736755</right_val></_></_>
-        <_>
-          <!-- tree 33 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>5 6 10 4 -1.</_>
-                <_>10 6 5 2 2.</_>
-                <_>5 8 5 2 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-2.6478730142116547e-003</threshold>
-            <left_val>0.5880935788154602</left_val>
-            <right_val>0.4684734046459198</right_val></_></_>
-        <_>
-          <!-- tree 34 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>9 13 1 6 -1.</_>
-                <_>9 16 1 3 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>0.0112956296652555</threshold>
-            <left_val>0.4983777105808258</left_val>
-            <right_val>0.1884590983390808</right_val></_></_>
-        <_>
-          <!-- tree 35 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>10 12 2 2 -1.</_>
-                <_>11 12 1 1 2.</_>
-                <_>10 13 1 1 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-6.6952878842130303e-004</threshold>
-            <left_val>0.5872138142585754</left_val>
-            <right_val>0.4799019992351532</right_val></_></_>
-        <_>
-          <!-- tree 36 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>4 12 2 3 -1.</_>
-                <_>4 13 2 1 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>1.4410680159926414e-003</threshold>
-            <left_val>0.5131189227104187</left_val>
-            <right_val>0.3501011133193970</right_val></_></_>
-        <_>
-          <!-- tree 37 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>14 4 6 6 -1.</_>
-                <_>14 6 6 2 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>2.4637870956212282e-003</threshold>
-            <left_val>0.5339372158050537</left_val>
-            <right_val>0.4117639064788818</right_val></_></_>
-        <_>
-          <!-- tree 38 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>8 17 2 3 -1.</_>
-                <_>8 18 2 1 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>3.3114518737420440e-004</threshold>
-            <left_val>0.4313383102416992</left_val>
-            <right_val>0.5398246049880981</right_val></_></_>
-        <_>
-          <!-- tree 39 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>16 4 4 6 -1.</_>
-                <_>16 6 4 2 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-0.0335572697222233</threshold>
-            <left_val>0.2675336897373200</left_val>
-            <right_val>0.5179154872894287</right_val></_></_>
-        <_>
-          <!-- tree 40 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>0 4 4 6 -1.</_>
-                <_>0 6 4 2 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>0.0185394193977118</threshold>
-            <left_val>0.4973869919776917</left_val>
-            <right_val>0.2317177057266235</right_val></_></_>
-        <_>
-          <!-- tree 41 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>14 6 2 3 -1.</_>
-                <_>14 6 1 3 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-2.9698139405809343e-004</threshold>
-            <left_val>0.5529708266258240</left_val>
-            <right_val>0.4643664062023163</right_val></_></_>
-        <_>
-          <!-- tree 42 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>4 9 8 1 -1.</_>
-                <_>8 9 4 1 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-4.5577259152196348e-004</threshold>
-            <left_val>0.5629584193229675</left_val>
-            <right_val>0.4469191133975983</right_val></_></_>
-        <_>
-          <!-- tree 43 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>8 12 4 3 -1.</_>
-                <_>8 13 4 1 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-0.0101589802652597</threshold>
-            <left_val>0.6706212759017944</left_val>
-            <right_val>0.4925918877124786</right_val></_></_>
-        <_>
-          <!-- tree 44 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>5 12 10 6 -1.</_>
-                <_>5 14 10 2 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-2.2413829356082715e-005</threshold>
-            <left_val>0.5239421725273132</left_val>
-            <right_val>0.3912901878356934</right_val></_></_>
-        <_>
-          <!-- tree 45 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>11 12 1 2 -1.</_>
-                <_>11 13 1 1 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>7.2034963523037732e-005</threshold>
-            <left_val>0.4799438118934631</left_val>
-            <right_val>0.5501788854598999</right_val></_></_>
-        <_>
-          <!-- tree 46 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>8 15 4 2 -1.</_>
-                <_>8 16 4 1 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-6.9267209619283676e-003</threshold>
-            <left_val>0.6930009722709656</left_val>
-            <right_val>0.4698084890842438</right_val></_></_>
-        <_>
-          <!-- tree 47 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>6 9 8 8 -1.</_>
-                <_>10 9 4 4 2.</_>
-                <_>6 13 4 4 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-7.6997838914394379e-003</threshold>
-            <left_val>0.4099623858928680</left_val>
-            <right_val>0.5480883121490479</right_val></_></_>
-        <_>
-          <!-- tree 48 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>7 12 4 6 -1.</_>
-                <_>7 12 2 3 2.</_>
-                <_>9 15 2 3 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-7.3130549862980843e-003</threshold>
-            <left_val>0.3283475935459137</left_val>
-            <right_val>0.5057886242866516</right_val></_></_>
-        <_>
-          <!-- tree 49 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>10 11 3 1 -1.</_>
-                <_>11 11 1 1 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>1.9650589674711227e-003</threshold>
-            <left_val>0.4978047013282776</left_val>
-            <right_val>0.6398249864578247</right_val></_></_>
-        <_>
-          <!-- tree 50 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>9 7 2 10 -1.</_>
-                <_>9 7 1 5 2.</_>
-                <_>10 12 1 5 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>7.1647600270807743e-003</threshold>
-            <left_val>0.4661160111427307</left_val>
-            <right_val>0.6222137212753296</right_val></_></_>
-        <_>
-          <!-- tree 51 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>8 0 6 6 -1.</_>
-                <_>10 0 2 6 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-0.0240786392241716</threshold>
-            <left_val>0.2334644943475723</left_val>
-            <right_val>0.5222162008285523</right_val></_></_>
-        <_>
-          <!-- tree 52 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>3 11 2 6 -1.</_>
-                <_>3 13 2 2 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-0.0210279691964388</threshold>
-            <left_val>0.1183653995394707</left_val>
-            <right_val>0.4938226044178009</right_val></_></_>
-        <_>
-          <!-- tree 53 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>16 12 1 2 -1.</_>
-                <_>16 13 1 1 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>3.6017020465806127e-004</threshold>
-            <left_val>0.5325019955635071</left_val>
-            <right_val>0.4116711020469666</right_val></_></_>
-        <_>
-          <!-- tree 54 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>1 14 6 6 -1.</_>
-                <_>1 14 3 3 2.</_>
-                <_>4 17 3 3 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-0.0172197297215462</threshold>
-            <left_val>0.6278762221336365</left_val>
-            <right_val>0.4664269089698792</right_val></_></_>
-        <_>
-          <!-- tree 55 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>13 1 3 6 -1.</_>
-                <_>14 1 1 6 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-7.8672142699360847e-003</threshold>
-            <left_val>0.3403415083885193</left_val>
-            <right_val>0.5249736905097961</right_val></_></_>
-        <_>
-          <!-- tree 56 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>8 8 2 2 -1.</_>
-                <_>8 9 2 1 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-4.4777389848604798e-004</threshold>
-            <left_val>0.3610411882400513</left_val>
-            <right_val>0.5086259245872498</right_val></_></_>
-        <_>
-          <!-- tree 57 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>9 9 3 3 -1.</_>
-                <_>10 9 1 3 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>5.5486010387539864e-003</threshold>
-            <left_val>0.4884265959262848</left_val>
-            <right_val>0.6203498244285584</right_val></_></_>
-        <_>
-          <!-- tree 58 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>8 7 3 3 -1.</_>
-                <_>8 8 3 1 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-6.9461148232221603e-003</threshold>
-            <left_val>0.2625930011272430</left_val>
-            <right_val>0.5011097192764282</right_val></_></_>
-        <_>
-          <!-- tree 59 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>14 0 2 3 -1.</_>
-                <_>14 0 1 3 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>1.3569870498031378e-004</threshold>
-            <left_val>0.4340794980525971</left_val>
-            <right_val>0.5628312230110169</right_val></_></_>
-        <_>
-          <!-- tree 60 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>1 0 18 9 -1.</_>
-                <_>7 0 6 9 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-0.0458802506327629</threshold>
-            <left_val>0.6507998704910278</left_val>
-            <right_val>0.4696274995803833</right_val></_></_>
-        <_>
-          <!-- tree 61 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>11 5 4 15 -1.</_>
-                <_>11 5 2 15 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-0.0215825606137514</threshold>
-            <left_val>0.3826502859592438</left_val>
-            <right_val>0.5287616848945618</right_val></_></_>
-        <_>
-          <!-- tree 62 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>5 5 4 15 -1.</_>
-                <_>7 5 2 15 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-0.0202095396816731</threshold>
-            <left_val>0.3233368098735809</left_val>
-            <right_val>0.5074477195739746</right_val></_></_>
-        <_>
-          <!-- tree 63 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>14 0 2 3 -1.</_>
-                <_>14 0 1 3 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>5.8496710844337940e-003</threshold>
-            <left_val>0.5177603960037231</left_val>
-            <right_val>0.4489670991897583</right_val></_></_>
-        <_>
-          <!-- tree 64 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>4 0 2 3 -1.</_>
-                <_>5 0 1 3 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-5.7476379879517481e-005</threshold>
-            <left_val>0.4020850956439972</left_val>
-            <right_val>0.5246363878250122</right_val></_></_>
-        <_>
-          <!-- tree 65 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>11 12 2 2 -1.</_>
-                <_>12 12 1 1 2.</_>
-                <_>11 13 1 1 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-1.1513100471347570e-003</threshold>
-            <left_val>0.6315072178840637</left_val>
-            <right_val>0.4905154109001160</right_val></_></_>
-        <_>
-          <!-- tree 66 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>7 12 2 2 -1.</_>
-                <_>7 12 1 1 2.</_>
-                <_>8 13 1 1 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>1.9862831104546785e-003</threshold>
-            <left_val>0.4702459871768951</left_val>
-            <right_val>0.6497151255607605</right_val></_></_>
-        <_>
-          <!-- tree 67 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>12 0 3 4 -1.</_>
-                <_>13 0 1 4 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-5.2719512023031712e-003</threshold>
-            <left_val>0.3650383949279785</left_val>
-            <right_val>0.5227652788162231</right_val></_></_>
-        <_>
-          <!-- tree 68 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>4 11 3 3 -1.</_>
-                <_>4 12 3 1 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>1.2662699446082115e-003</threshold>
-            <left_val>0.5166100859642029</left_val>
-            <right_val>0.3877618014812470</right_val></_></_>
-        <_>
-          <!-- tree 69 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>12 7 4 2 -1.</_>
-                <_>12 8 4 1 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-6.2919440679252148e-003</threshold>
-            <left_val>0.7375894188880920</left_val>
-            <right_val>0.5023847818374634</right_val></_></_>
-        <_>
-          <!-- tree 70 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>8 10 3 2 -1.</_>
-                <_>9 10 1 2 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>6.7360111279413104e-004</threshold>
-            <left_val>0.4423226118087769</left_val>
-            <right_val>0.5495585799217224</right_val></_></_>
-        <_>
-          <!-- tree 71 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>9 9 3 2 -1.</_>
-                <_>10 9 1 2 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-1.0523450328037143e-003</threshold>
-            <left_val>0.5976396203041077</left_val>
-            <right_val>0.4859583079814911</right_val></_></_>
-        <_>
-          <!-- tree 72 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>8 9 3 2 -1.</_>
-                <_>9 9 1 2 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-4.4216238893568516e-004</threshold>
-            <left_val>0.5955939292907715</left_val>
-            <right_val>0.4398930966854096</right_val></_></_>
-        <_>
-          <!-- tree 73 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>12 0 3 4 -1.</_>
-                <_>13 0 1 4 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>1.1747940443456173e-003</threshold>
-            <left_val>0.5349888205528259</left_val>
-            <right_val>0.4605058133602142</right_val></_></_>
-        <_>
-          <!-- tree 74 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>5 0 3 4 -1.</_>
-                <_>6 0 1 4 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>5.2457437850534916e-003</threshold>
-            <left_val>0.5049191117286682</left_val>
-            <right_val>0.2941577136516571</right_val></_></_>
-        <_>
-          <!-- tree 75 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>4 14 12 4 -1.</_>
-                <_>10 14 6 2 2.</_>
-                <_>4 16 6 2 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-0.0245397202670574</threshold>
-            <left_val>0.2550177872180939</left_val>
-            <right_val>0.5218586921691895</right_val></_></_>
-        <_>
-          <!-- tree 76 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>8 13 2 3 -1.</_>
-                <_>8 14 2 1 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>7.3793041519820690e-004</threshold>
-            <left_val>0.4424861073493958</left_val>
-            <right_val>0.5490816235542297</right_val></_></_>
-        <_>
-          <!-- tree 77 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>10 10 3 8 -1.</_>
-                <_>10 14 3 4 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>1.4233799884095788e-003</threshold>
-            <left_val>0.5319514274597168</left_val>
-            <right_val>0.4081355929374695</right_val></_></_>
-        <_>
-          <!-- tree 78 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>8 10 4 8 -1.</_>
-                <_>8 10 2 4 2.</_>
-                <_>10 14 2 4 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-2.4149110540747643e-003</threshold>
-            <left_val>0.4087659120559692</left_val>
-            <right_val>0.5238950252532959</right_val></_></_>
-        <_>
-          <!-- tree 79 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>10 8 3 1 -1.</_>
-                <_>11 8 1 1 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-1.2165299849584699e-003</threshold>
-            <left_val>0.5674579143524170</left_val>
-            <right_val>0.4908052980899811</right_val></_></_>
-        <_>
-          <!-- tree 80 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>9 12 1 6 -1.</_>
-                <_>9 15 1 3 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-1.2438809499144554e-003</threshold>
-            <left_val>0.4129425883293152</left_val>
-            <right_val>0.5256118178367615</right_val></_></_>
-        <_>
-          <!-- tree 81 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>10 8 3 1 -1.</_>
-                <_>11 8 1 1 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>6.1942739412188530e-003</threshold>
-            <left_val>0.5060194134712219</left_val>
-            <right_val>0.7313653230667114</right_val></_></_>
-        <_>
-          <!-- tree 82 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>7 8 3 1 -1.</_>
-                <_>8 8 1 1 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-1.6607169527560472e-003</threshold>
-            <left_val>0.5979632139205933</left_val>
-            <right_val>0.4596369862556458</right_val></_></_>
-        <_>
-          <!-- tree 83 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>5 2 15 14 -1.</_>
-                <_>5 9 15 7 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-0.0273162592202425</threshold>
-            <left_val>0.4174365103244782</left_val>
-            <right_val>0.5308842062950134</right_val></_></_>
-        <_>
-          <!-- tree 84 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>2 1 2 10 -1.</_>
-                <_>2 1 1 5 2.</_>
-                <_>3 6 1 5 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-1.5845570014789701e-003</threshold>
-            <left_val>0.5615804791450501</left_val>
-            <right_val>0.4519486129283905</right_val></_></_>
-        <_>
-          <!-- tree 85 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>14 14 2 3 -1.</_>
-                <_>14 15 2 1 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-1.5514739789068699e-003</threshold>
-            <left_val>0.4076187014579773</left_val>
-            <right_val>0.5360785126686096</right_val></_></_>
-        <_>
-          <!-- tree 86 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>2 7 3 3 -1.</_>
-                <_>3 7 1 3 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>3.8446558755822480e-004</threshold>
-            <left_val>0.4347293972969055</left_val>
-            <right_val>0.5430442094802856</right_val></_></_>
-        <_>
-          <!-- tree 87 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>17 4 3 3 -1.</_>
-                <_>17 5 3 1 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-0.0146722598001361</threshold>
-            <left_val>0.1659304946660996</left_val>
-            <right_val>0.5146093964576721</right_val></_></_>
-        <_>
-          <!-- tree 88 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>0 4 3 3 -1.</_>
-                <_>0 5 3 1 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>8.1608882173895836e-003</threshold>
-            <left_val>0.4961819052696228</left_val>
-            <right_val>0.1884745955467224</right_val></_></_>
-        <_>
-          <!-- tree 89 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>13 5 6 2 -1.</_>
-                <_>16 5 3 1 2.</_>
-                <_>13 6 3 1 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>1.1121659772470593e-003</threshold>
-            <left_val>0.4868263900279999</left_val>
-            <right_val>0.6093816161155701</right_val></_></_>
-        <_>
-          <!-- tree 90 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>4 19 12 1 -1.</_>
-                <_>8 19 4 1 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-7.2603770531713963e-003</threshold>
-            <left_val>0.6284325122833252</left_val>
-            <right_val>0.4690375924110413</right_val></_></_>
-        <_>
-          <!-- tree 91 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>12 12 2 4 -1.</_>
-                <_>12 14 2 2 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-2.4046430189628154e-004</threshold>
-            <left_val>0.5575000047683716</left_val>
-            <right_val>0.4046044051647186</right_val></_></_>
-        <_>
-          <!-- tree 92 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>3 15 1 3 -1.</_>
-                <_>3 16 1 1 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-2.3348190006799996e-004</threshold>
-            <left_val>0.4115762114524841</left_val>
-            <right_val>0.5252848267555237</right_val></_></_>
-        <_>
-          <!-- tree 93 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>11 16 6 4 -1.</_>
-                <_>11 16 3 4 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>5.5736480280756950e-003</threshold>
-            <left_val>0.4730072915554047</left_val>
-            <right_val>0.5690100789070129</right_val></_></_>
-        <_>
-          <!-- tree 94 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>2 10 3 10 -1.</_>
-                <_>3 10 1 10 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>0.0306237693876028</threshold>
-            <left_val>0.4971886873245239</left_val>
-            <right_val>0.1740095019340515</right_val></_></_>
-        <_>
-          <!-- tree 95 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>12 8 2 4 -1.</_>
-                <_>12 8 1 4 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>9.2074798885732889e-004</threshold>
-            <left_val>0.5372117757797241</left_val>
-            <right_val>0.4354872107505798</right_val></_></_>
-        <_>
-          <!-- tree 96 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>6 8 2 4 -1.</_>
-                <_>7 8 1 4 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-4.3550739064812660e-005</threshold>
-            <left_val>0.5366883873939514</left_val>
-            <right_val>0.4347316920757294</right_val></_></_>
-        <_>
-          <!-- tree 97 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>10 14 2 3 -1.</_>
-                <_>10 14 1 3 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-6.6452710889279842e-003</threshold>
-            <left_val>0.3435518145561218</left_val>
-            <right_val>0.5160533189773560</right_val></_></_>
-        <_>
-          <!-- tree 98 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>5 1 10 3 -1.</_>
-                <_>10 1 5 3 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>0.0432219989597797</threshold>
-            <left_val>0.4766792058944702</left_val>
-            <right_val>0.7293652892112732</right_val></_></_>
-        <_>
-          <!-- tree 99 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>10 7 3 2 -1.</_>
-                <_>11 7 1 2 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>2.2331769578158855e-003</threshold>
-            <left_val>0.5029315948486328</left_val>
-            <right_val>0.5633171200752258</right_val></_></_>
-        <_>
-          <!-- tree 100 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>5 6 9 2 -1.</_>
-                <_>8 6 3 2 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>3.1829739455133677e-003</threshold>
-            <left_val>0.4016092121601105</left_val>
-            <right_val>0.5192136764526367</right_val></_></_>
-        <_>
-          <!-- tree 101 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>9 8 2 2 -1.</_>
-                <_>9 9 2 1 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-1.8027749320026487e-004</threshold>
-            <left_val>0.4088315963745117</left_val>
-            <right_val>0.5417919754981995</right_val></_></_>
-        <_>
-          <!-- tree 102 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>2 11 16 6 -1.</_>
-                <_>2 11 8 3 2.</_>
-                <_>10 14 8 3 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-5.2934689447283745e-003</threshold>
-            <left_val>0.4075677096843720</left_val>
-            <right_val>0.5243561863899231</right_val></_></_>
-        <_>
-          <!-- tree 103 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>12 7 2 2 -1.</_>
-                <_>13 7 1 1 2.</_>
-                <_>12 8 1 1 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>1.2750959722325206e-003</threshold>
-            <left_val>0.4913282990455627</left_val>
-            <right_val>0.6387010812759399</right_val></_></_>
-        <_>
-          <!-- tree 104 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>9 5 2 3 -1.</_>
-                <_>9 6 2 1 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>4.3385322205722332e-003</threshold>
-            <left_val>0.5031672120094299</left_val>
-            <right_val>0.2947346866130829</right_val></_></_>
-        <_>
-          <!-- tree 105 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>9 7 3 2 -1.</_>
-                <_>10 7 1 2 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>8.5250744596123695e-003</threshold>
-            <left_val>0.4949789047241211</left_val>
-            <right_val>0.6308869123458862</right_val></_></_>
-        <_>
-          <!-- tree 106 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>5 1 8 12 -1.</_>
-                <_>5 7 8 6 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-9.4266352243721485e-004</threshold>
-            <left_val>0.5328366756439209</left_val>
-            <right_val>0.4285649955272675</right_val></_></_>
-        <_>
-          <!-- tree 107 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>13 5 2 2 -1.</_>
-                <_>13 6 2 1 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>1.3609660090878606e-003</threshold>
-            <left_val>0.4991525113582611</left_val>
-            <right_val>0.5941501259803772</right_val></_></_>
-        <_>
-          <!-- tree 108 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>5 5 2 2 -1.</_>
-                <_>5 6 2 1 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>4.4782509212382138e-004</threshold>
-            <left_val>0.4573504030704498</left_val>
-            <right_val>0.5854480862617493</right_val></_></_>
-        <_>
-          <!-- tree 109 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>12 4 3 3 -1.</_>
-                <_>12 5 3 1 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>1.3360050506889820e-003</threshold>
-            <left_val>0.4604358971118927</left_val>
-            <right_val>0.5849052071571350</right_val></_></_>
-        <_>
-          <!-- tree 110 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>4 14 2 3 -1.</_>
-                <_>4 15 2 1 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-6.0967548051849008e-004</threshold>
-            <left_val>0.3969388902187347</left_val>
-            <right_val>0.5229423046112061</right_val></_></_>
-        <_>
-          <!-- tree 111 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>12 4 3 3 -1.</_>
-                <_>12 5 3 1 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-2.3656780831515789e-003</threshold>
-            <left_val>0.5808320045471191</left_val>
-            <right_val>0.4898357093334198</right_val></_></_>
-        <_>
-          <!-- tree 112 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>5 4 3 3 -1.</_>
-                <_>5 5 3 1 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>1.0734340175986290e-003</threshold>
-            <left_val>0.4351210892200470</left_val>
-            <right_val>0.5470039248466492</right_val></_></_>
-        <_>
-          <!-- tree 113 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>9 14 2 6 -1.</_>
-                <_>10 14 1 3 2.</_>
-                <_>9 17 1 3 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>2.1923359017819166e-003</threshold>
-            <left_val>0.5355060100555420</left_val>
-            <right_val>0.3842903971672058</right_val></_></_>
-        <_>
-          <!-- tree 114 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>8 14 3 2 -1.</_>
-                <_>9 14 1 2 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>5.4968618787825108e-003</threshold>
-            <left_val>0.5018138885498047</left_val>
-            <right_val>0.2827191948890686</right_val></_></_>
-        <_>
-          <!-- tree 115 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>9 5 6 6 -1.</_>
-                <_>11 5 2 6 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-0.0753688216209412</threshold>
-            <left_val>0.1225076019763947</left_val>
-            <right_val>0.5148826837539673</right_val></_></_>
-        <_>
-          <!-- tree 116 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>5 5 6 6 -1.</_>
-                <_>7 5 2 6 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>0.0251344703137875</threshold>
-            <left_val>0.4731766879558563</left_val>
-            <right_val>0.7025446295738220</right_val></_></_>
-        <_>
-          <!-- tree 117 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>13 13 1 2 -1.</_>
-                <_>13 14 1 1 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-2.9358599931583740e-005</threshold>
-            <left_val>0.5430532097816467</left_val>
-            <right_val>0.4656086862087250</right_val></_></_>
-        <_>
-          <!-- tree 118 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>0 2 10 2 -1.</_>
-                <_>0 3 10 1 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-5.8355910005047917e-004</threshold>
-            <left_val>0.4031040072441101</left_val>
-            <right_val>0.5190119743347168</right_val></_></_>
-        <_>
-          <!-- tree 119 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>13 13 1 2 -1.</_>
-                <_>13 14 1 1 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-2.6639450807124376e-003</threshold>
-            <left_val>0.4308126866817474</left_val>
-            <right_val>0.5161771178245544</right_val></_></_>
-        <_>
-          <!-- tree 120 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>5 7 2 2 -1.</_>
-                <_>5 7 1 1 2.</_>
-                <_>6 8 1 1 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-1.3804089976474643e-003</threshold>
-            <left_val>0.6219829916954041</left_val>
-            <right_val>0.4695515930652618</right_val></_></_>
-        <_>
-          <!-- tree 121 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>13 5 2 7 -1.</_>
-                <_>13 5 1 7 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>1.2313219485804439e-003</threshold>
-            <left_val>0.5379363894462585</left_val>
-            <right_val>0.4425831139087677</right_val></_></_>
-        <_>
-          <!-- tree 122 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>6 13 1 2 -1.</_>
-                <_>6 14 1 1 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-1.4644179827882908e-005</threshold>
-            <left_val>0.5281640291213989</left_val>
-            <right_val>0.4222503006458283</right_val></_></_>
-        <_>
-          <!-- tree 123 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>11 0 3 7 -1.</_>
-                <_>12 0 1 7 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-0.0128188095986843</threshold>
-            <left_val>0.2582092881202698</left_val>
-            <right_val>0.5179932713508606</right_val></_></_>
-        <_>
-          <!-- tree 124 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>0 3 2 16 -1.</_>
-                <_>0 3 1 8 2.</_>
-                <_>1 11 1 8 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>0.0228521898388863</threshold>
-            <left_val>0.4778693020343781</left_val>
-            <right_val>0.7609264254570007</right_val></_></_>
-        <_>
-          <!-- tree 125 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>11 0 3 7 -1.</_>
-                <_>12 0 1 7 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>8.2305970136076212e-004</threshold>
-            <left_val>0.5340992212295532</left_val>
-            <right_val>0.4671724140644074</right_val></_></_>
-        <_>
-          <!-- tree 126 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>6 0 3 7 -1.</_>
-                <_>7 0 1 7 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>0.0127701200544834</threshold>
-            <left_val>0.4965761005878449</left_val>
-            <right_val>0.1472366005182266</right_val></_></_>
-        <_>
-          <!-- tree 127 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>11 16 8 4 -1.</_>
-                <_>11 16 4 4 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-0.0500515103340149</threshold>
-            <left_val>0.6414994001388550</left_val>
-            <right_val>0.5016592144966126</right_val></_></_>
-        <_>
-          <!-- tree 128 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>1 16 8 4 -1.</_>
-                <_>5 16 4 4 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>0.0157752707600594</threshold>
-            <left_val>0.4522320032119751</left_val>
-            <right_val>0.5685362219810486</right_val></_></_>
-        <_>
-          <!-- tree 129 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>13 5 2 7 -1.</_>
-                <_>13 5 1 7 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-0.0185016207396984</threshold>
-            <left_val>0.2764748930931091</left_val>
-            <right_val>0.5137959122657776</right_val></_></_>
-        <_>
-          <!-- tree 130 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>5 5 2 7 -1.</_>
-                <_>6 5 1 7 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>2.4626250378787518e-003</threshold>
-            <left_val>0.5141941905021668</left_val>
-            <right_val>0.3795408010482788</right_val></_></_>
-        <_>
-          <!-- tree 131 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>18 6 2 14 -1.</_>
-                <_>18 13 2 7 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>0.0629161670804024</threshold>
-            <left_val>0.5060648918151856</left_val>
-            <right_val>0.6580433845520020</right_val></_></_>
-        <_>
-          <!-- tree 132 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>6 10 3 4 -1.</_>
-                <_>6 12 3 2 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-2.1648500478477217e-005</threshold>
-            <left_val>0.5195388197898865</left_val>
-            <right_val>0.4019886851310730</right_val></_></_>
-        <_>
-          <!-- tree 133 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>14 7 1 2 -1.</_>
-                <_>14 8 1 1 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>2.1180990152060986e-003</threshold>
-            <left_val>0.4962365031242371</left_val>
-            <right_val>0.5954458713531494</right_val></_></_>
-        <_>
-          <!-- tree 134 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>0 1 18 6 -1.</_>
-                <_>0 1 9 3 2.</_>
-                <_>9 4 9 3 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-0.0166348908096552</threshold>
-            <left_val>0.3757933080196381</left_val>
-            <right_val>0.5175446867942810</right_val></_></_>
-        <_>
-          <!-- tree 135 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>14 7 1 2 -1.</_>
-                <_>14 8 1 1 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-2.8899470344185829e-003</threshold>
-            <left_val>0.6624013781547546</left_val>
-            <right_val>0.5057178735733032</right_val></_></_>
-        <_>
-          <!-- tree 136 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>0 6 2 14 -1.</_>
-                <_>0 13 2 7 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>0.0767832621932030</threshold>
-            <left_val>0.4795796871185303</left_val>
-            <right_val>0.8047714829444885</right_val></_></_>
-        <_>
-          <!-- tree 137 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>17 0 3 12 -1.</_>
-                <_>18 0 1 12 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>3.9170677773654461e-003</threshold>
-            <left_val>0.4937882125377655</left_val>
-            <right_val>0.5719941854476929</right_val></_></_>
-        <_>
-          <!-- tree 138 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>0 6 18 3 -1.</_>
-                <_>0 7 18 1 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-0.0726706013083458</threshold>
-            <left_val>0.0538945607841015</left_val>
-            <right_val>0.4943903982639313</right_val></_></_>
-        <_>
-          <!-- tree 139 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>6 0 14 16 -1.</_>
-                <_>6 8 14 8 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>0.5403950214385986</threshold>
-            <left_val>0.5129774212837219</left_val>
-            <right_val>0.1143338978290558</right_val></_></_>
-        <_>
-          <!-- tree 140 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>0 0 3 12 -1.</_>
-                <_>1 0 1 12 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>2.9510019812732935e-003</threshold>
-            <left_val>0.4528343975543976</left_val>
-            <right_val>0.5698574185371399</right_val></_></_>
-        <_>
-          <!-- tree 141 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>13 0 3 7 -1.</_>
-                <_>14 0 1 7 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>3.4508369863033295e-003</threshold>
-            <left_val>0.5357726812362671</left_val>
-            <right_val>0.4218730926513672</right_val></_></_>
-        <_>
-          <!-- tree 142 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>5 7 1 2 -1.</_>
-                <_>5 8 1 1 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-4.2077939724549651e-004</threshold>
-            <left_val>0.5916172862052918</left_val>
-            <right_val>0.4637925922870636</right_val></_></_>
-        <_>
-          <!-- tree 143 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>14 4 6 6 -1.</_>
-                <_>14 6 6 2 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>3.3051050268113613e-003</threshold>
-            <left_val>0.5273385047912598</left_val>
-            <right_val>0.4382042884826660</right_val></_></_>
-        <_>
-          <!-- tree 144 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>5 7 7 2 -1.</_>
-                <_>5 8 7 1 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>4.7735060798004270e-004</threshold>
-            <left_val>0.4046528041362763</left_val>
-            <right_val>0.5181884765625000</right_val></_></_>
-        <_>
-          <!-- tree 145 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>8 6 6 9 -1.</_>
-                <_>8 9 6 3 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-0.0259285103529692</threshold>
-            <left_val>0.7452235817909241</left_val>
-            <right_val>0.5089386105537415</right_val></_></_>
-        <_>
-          <!-- tree 146 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>5 4 6 1 -1.</_>
-                <_>7 4 2 1 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-2.9729790985584259e-003</threshold>
-            <left_val>0.3295435905456543</left_val>
-            <right_val>0.5058795213699341</right_val></_></_>
-        <_>
-          <!-- tree 147 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>13 0 6 4 -1.</_>
-                <_>16 0 3 2 2.</_>
-                <_>13 2 3 2 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>5.8508329093456268e-003</threshold>
-            <left_val>0.4857144057750702</left_val>
-            <right_val>0.5793024897575378</right_val></_></_>
-        <_>
-          <!-- tree 148 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>1 2 18 12 -1.</_>
-                <_>1 6 18 4 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-0.0459675192832947</threshold>
-            <left_val>0.4312731027603149</left_val>
-            <right_val>0.5380653142929077</right_val></_></_>
-        <_>
-          <!-- tree 149 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>3 2 17 12 -1.</_>
-                <_>3 6 17 4 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>0.1558596044778824</threshold>
-            <left_val>0.5196170210838318</left_val>
-            <right_val>0.1684713959693909</right_val></_></_>
-        <_>
-          <!-- tree 150 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>5 14 7 3 -1.</_>
-                <_>5 15 7 1 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>0.0151648297905922</threshold>
-            <left_val>0.4735757112503052</left_val>
-            <right_val>0.6735026836395264</right_val></_></_>
-        <_>
-          <!-- tree 151 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>10 14 1 3 -1.</_>
-                <_>10 15 1 1 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-1.0604249546304345e-003</threshold>
-            <left_val>0.5822926759719849</left_val>
-            <right_val>0.4775702953338623</right_val></_></_>
-        <_>
-          <!-- tree 152 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>3 14 3 3 -1.</_>
-                <_>3 15 3 1 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>6.6476291976869106e-003</threshold>
-            <left_val>0.4999198913574219</left_val>
-            <right_val>0.2319535017013550</right_val></_></_>
-        <_>
-          <!-- tree 153 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>14 4 6 6 -1.</_>
-                <_>14 6 6 2 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-0.0122311301529408</threshold>
-            <left_val>0.4750893115997315</left_val>
-            <right_val>0.5262982249259949</right_val></_></_>
-        <_>
-          <!-- tree 154 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>0 4 6 6 -1.</_>
-                <_>0 6 6 2 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>5.6528882123529911e-003</threshold>
-            <left_val>0.5069767832756043</left_val>
-            <right_val>0.3561818897724152</right_val></_></_>
-        <_>
-          <!-- tree 155 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>12 5 4 3 -1.</_>
-                <_>12 6 4 1 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>1.2977829901501536e-003</threshold>
-            <left_val>0.4875693917274475</left_val>
-            <right_val>0.5619062781333923</right_val></_></_>
-        <_>
-          <!-- tree 156 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>4 5 4 3 -1.</_>
-                <_>4 6 4 1 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>0.0107815898954868</threshold>
-            <left_val>0.4750770032405853</left_val>
-            <right_val>0.6782308220863342</right_val></_></_>
-        <_>
-          <!-- tree 157 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>18 0 2 6 -1.</_>
-                <_>18 2 2 2 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>2.8654779307544231e-003</threshold>
-            <left_val>0.5305461883544922</left_val>
-            <right_val>0.4290736019611359</right_val></_></_>
-        <_>
-          <!-- tree 158 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>8 1 4 9 -1.</_>
-                <_>10 1 2 9 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>2.8663428965955973e-003</threshold>
-            <left_val>0.4518479108810425</left_val>
-            <right_val>0.5539351105690002</right_val></_></_>
-        <_>
-          <!-- tree 159 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>6 6 8 2 -1.</_>
-                <_>6 6 4 2 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-5.1983320154249668e-003</threshold>
-            <left_val>0.4149119853973389</left_val>
-            <right_val>0.5434188842773438</right_val></_></_>
-        <_>
-          <!-- tree 160 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>6 5 4 2 -1.</_>
-                <_>6 5 2 1 2.</_>
-                <_>8 6 2 1 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>5.3739990107715130e-003</threshold>
-            <left_val>0.4717896878719330</left_val>
-            <right_val>0.6507657170295715</right_val></_></_>
-        <_>
-          <!-- tree 161 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>10 5 2 3 -1.</_>
-                <_>10 6 2 1 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-0.0146415298804641</threshold>
-            <left_val>0.2172164022922516</left_val>
-            <right_val>0.5161777138710022</right_val></_></_>
-        <_>
-          <!-- tree 162 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>9 5 1 3 -1.</_>
-                <_>9 6 1 1 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-1.5042580344015732e-005</threshold>
-            <left_val>0.5337383747100830</left_val>
-            <right_val>0.4298836886882782</right_val></_></_>
-        <_>
-          <!-- tree 163 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>9 10 2 2 -1.</_>
-                <_>9 11 2 1 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-1.1875660129589960e-004</threshold>
-            <left_val>0.4604594111442566</left_val>
-            <right_val>0.5582447052001953</right_val></_></_>
-        <_>
-          <!-- tree 164 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>0 8 4 3 -1.</_>
-                <_>0 9 4 1 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>0.0169955305755138</threshold>
-            <left_val>0.4945895075798035</left_val>
-            <right_val>0.0738800764083862</right_val></_></_>
-        <_>
-          <!-- tree 165 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>6 0 8 6 -1.</_>
-                <_>6 3 8 3 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-0.0350959412753582</threshold>
-            <left_val>0.7005509138107300</left_val>
-            <right_val>0.4977591037750244</right_val></_></_>
-        <_>
-          <!-- tree 166 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>1 0 6 4 -1.</_>
-                <_>1 0 3 2 2.</_>
-                <_>4 2 3 2 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>2.4217350874096155e-003</threshold>
-            <left_val>0.4466265141963959</left_val>
-            <right_val>0.5477694272994995</right_val></_></_>
-        <_>
-          <!-- tree 167 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>13 0 3 7 -1.</_>
-                <_>14 0 1 7 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-9.6340337768197060e-004</threshold>
-            <left_val>0.4714098870754242</left_val>
-            <right_val>0.5313338041305542</right_val></_></_>
-        <_>
-          <!-- tree 168 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>9 16 2 2 -1.</_>
-                <_>9 17 2 1 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>1.6391130338888615e-004</threshold>
-            <left_val>0.4331546127796173</left_val>
-            <right_val>0.5342242121696472</right_val></_></_>
-        <_>
-          <!-- tree 169 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>11 4 6 10 -1.</_>
-                <_>11 9 6 5 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-0.0211414601653814</threshold>
-            <left_val>0.2644700109958649</left_val>
-            <right_val>0.5204498767852783</right_val></_></_>
-        <_>
-          <!-- tree 170 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>0 10 19 2 -1.</_>
-                <_>0 11 19 1 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>8.7775202700868249e-004</threshold>
-            <left_val>0.5208349823951721</left_val>
-            <right_val>0.4152742922306061</right_val></_></_>
-        <_>
-          <!-- tree 171 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>9 5 8 9 -1.</_>
-                <_>9 8 8 3 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-0.0279439203441143</threshold>
-            <left_val>0.6344125270843506</left_val>
-            <right_val>0.5018811821937561</right_val></_></_>
-        <_>
-          <!-- tree 172 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>4 0 3 7 -1.</_>
-                <_>5 0 1 7 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>6.7297378554940224e-003</threshold>
-            <left_val>0.5050438046455383</left_val>
-            <right_val>0.3500863909721375</right_val></_></_>
-        <_>
-          <!-- tree 173 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>8 6 4 12 -1.</_>
-                <_>10 6 2 6 2.</_>
-                <_>8 12 2 6 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>0.0232810396701097</threshold>
-            <left_val>0.4966318011283875</left_val>
-            <right_val>0.6968677043914795</right_val></_></_>
-        <_>
-          <!-- tree 174 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>0 2 6 4 -1.</_>
-                <_>0 4 6 2 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-0.0116449799388647</threshold>
-            <left_val>0.3300260007381439</left_val>
-            <right_val>0.5049629807472229</right_val></_></_>
-        <_>
-          <!-- tree 175 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>8 15 4 3 -1.</_>
-                <_>8 16 4 1 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>0.0157643090933561</threshold>
-            <left_val>0.4991598129272461</left_val>
-            <right_val>0.7321153879165649</right_val></_></_>
-        <_>
-          <!-- tree 176 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>8 0 3 7 -1.</_>
-                <_>9 0 1 7 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-1.3611479662358761e-003</threshold>
-            <left_val>0.3911735117435455</left_val>
-            <right_val>0.5160670876502991</right_val></_></_>
-        <_>
-          <!-- tree 177 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>9 5 3 4 -1.</_>
-                <_>10 5 1 4 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-8.1522337859496474e-004</threshold>
-            <left_val>0.5628911256790161</left_val>
-            <right_val>0.4949719011783600</right_val></_></_>
-        <_>
-          <!-- tree 178 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>8 5 3 4 -1.</_>
-                <_>9 5 1 4 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-6.0066272271797061e-004</threshold>
-            <left_val>0.5853595137596130</left_val>
-            <right_val>0.4550595879554749</right_val></_></_>
-        <_>
-          <!-- tree 179 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>7 6 6 1 -1.</_>
-                <_>9 6 2 1 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>4.9715518252924085e-004</threshold>
-            <left_val>0.4271470010280609</left_val>
-            <right_val>0.5443599224090576</right_val></_></_>
-        <_>
-          <!-- tree 180 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>7 14 4 4 -1.</_>
-                <_>7 14 2 2 2.</_>
-                <_>9 16 2 2 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>2.3475370835512877e-003</threshold>
-            <left_val>0.5143110752105713</left_val>
-            <right_val>0.3887656927108765</right_val></_></_>
-        <_>
-          <!-- tree 181 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>13 14 4 6 -1.</_>
-                <_>15 14 2 3 2.</_>
-                <_>13 17 2 3 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-8.9261569082736969e-003</threshold>
-            <left_val>0.6044502258300781</left_val>
-            <right_val>0.4971720874309540</right_val></_></_>
-        <_>
-          <!-- tree 182 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>7 8 1 8 -1.</_>
-                <_>7 12 1 4 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-0.0139199104160070</threshold>
-            <left_val>0.2583160996437073</left_val>
-            <right_val>0.5000367760658264</right_val></_></_>
-        <_>
-          <!-- tree 183 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>16 0 2 8 -1.</_>
-                <_>17 0 1 4 2.</_>
-                <_>16 4 1 4 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>1.0209949687123299e-003</threshold>
-            <left_val>0.4857374131679535</left_val>
-            <right_val>0.5560358166694641</right_val></_></_>
-        <_>
-          <!-- tree 184 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>2 0 2 8 -1.</_>
-                <_>2 0 1 4 2.</_>
-                <_>3 4 1 4 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-2.7441629208624363e-003</threshold>
-            <left_val>0.5936884880065918</left_val>
-            <right_val>0.4645777046680450</right_val></_></_>
-        <_>
-          <!-- tree 185 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>6 1 14 3 -1.</_>
-                <_>6 2 14 1 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-0.0162001308053732</threshold>
-            <left_val>0.3163014948368073</left_val>
-            <right_val>0.5193495154380798</right_val></_></_>
-        <_>
-          <!-- tree 186 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>7 9 3 10 -1.</_>
-                <_>7 14 3 5 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>4.3331980705261230e-003</threshold>
-            <left_val>0.5061224102973938</left_val>
-            <right_val>0.3458878993988037</right_val></_></_>
-        <_>
-          <!-- tree 187 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>9 14 2 2 -1.</_>
-                <_>9 15 2 1 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>5.8497930876910686e-004</threshold>
-            <left_val>0.4779017865657806</left_val>
-            <right_val>0.5870177745819092</right_val></_></_>
-        <_>
-          <!-- tree 188 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>7 7 6 8 -1.</_>
-                <_>7 11 6 4 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-2.2466450463980436e-003</threshold>
-            <left_val>0.4297851026058197</left_val>
-            <right_val>0.5374773144721985</right_val></_></_>
-        <_>
-          <!-- tree 189 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>9 7 3 6 -1.</_>
-                <_>9 10 3 3 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>2.3146099410951138e-003</threshold>
-            <left_val>0.5438671708106995</left_val>
-            <right_val>0.4640969932079315</right_val></_></_>
-        <_>
-          <!-- tree 190 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>7 13 3 3 -1.</_>
-                <_>7 14 3 1 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>8.7679121643304825e-003</threshold>
-            <left_val>0.4726893007755280</left_val>
-            <right_val>0.6771789789199829</right_val></_></_>
-        <_>
-          <!-- tree 191 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>9 9 2 2 -1.</_>
-                <_>9 10 2 1 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-2.2448020172305405e-004</threshold>
-            <left_val>0.4229173064231873</left_val>
-            <right_val>0.5428048968315125</right_val></_></_>
-        <_>
-          <!-- tree 192 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>0 1 18 2 -1.</_>
-                <_>6 1 6 2 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-7.4336021207273006e-003</threshold>
-            <left_val>0.6098880767822266</left_val>
-            <right_val>0.4683673977851868</right_val></_></_>
-        <_>
-          <!-- tree 193 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>7 1 6 14 -1.</_>
-                <_>7 8 6 7 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-2.3189240600913763e-003</threshold>
-            <left_val>0.5689436793327332</left_val>
-            <right_val>0.4424242079257965</right_val></_></_>
-        <_>
-          <!-- tree 194 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>1 9 18 1 -1.</_>
-                <_>7 9 6 1 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-2.1042178850620985e-003</threshold>
-            <left_val>0.3762221038341522</left_val>
-            <right_val>0.5187087059020996</right_val></_></_>
-        <_>
-          <!-- tree 195 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>9 7 2 2 -1.</_>
-                <_>9 7 1 2 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>4.6034841216169298e-004</threshold>
-            <left_val>0.4699405133724213</left_val>
-            <right_val>0.5771207213401794</right_val></_></_>
-        <_>
-          <!-- tree 196 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>9 3 2 9 -1.</_>
-                <_>10 3 1 9 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>1.0547629790380597e-003</threshold>
-            <left_val>0.4465216994285584</left_val>
-            <right_val>0.5601701736450195</right_val></_></_>
-        <_>
-          <!-- tree 197 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>18 14 2 3 -1.</_>
-                <_>18 15 2 1 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>8.7148818420246243e-004</threshold>
-            <left_val>0.5449805259704590</left_val>
-            <right_val>0.3914709091186523</right_val></_></_>
-        <_>
-          <!-- tree 198 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>7 11 3 1 -1.</_>
-                <_>8 11 1 1 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>3.3364820410497487e-004</threshold>
-            <left_val>0.4564009010791779</left_val>
-            <right_val>0.5645738840103149</right_val></_></_>
-        <_>
-          <!-- tree 199 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>10 8 3 4 -1.</_>
-                <_>11 8 1 4 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-1.4853250468149781e-003</threshold>
-            <left_val>0.5747377872467041</left_val>
-            <right_val>0.4692778885364533</right_val></_></_>
-        <_>
-          <!-- tree 200 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>7 14 3 6 -1.</_>
-                <_>8 14 1 6 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>3.0251620337367058e-003</threshold>
-            <left_val>0.5166196823120117</left_val>
-            <right_val>0.3762814104557037</right_val></_></_>
-        <_>
-          <!-- tree 201 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>10 8 3 4 -1.</_>
-                <_>11 8 1 4 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>5.0280741415917873e-003</threshold>
-            <left_val>0.5002111792564392</left_val>
-            <right_val>0.6151527166366577</right_val></_></_>
-        <_>
-          <!-- tree 202 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>7 8 3 4 -1.</_>
-                <_>8 8 1 4 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-5.8164511574432254e-004</threshold>
-            <left_val>0.5394598245620728</left_val>
-            <right_val>0.4390751123428345</right_val></_></_>
-        <_>
-          <!-- tree 203 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>7 9 6 9 -1.</_>
-                <_>7 12 6 3 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>0.0451415292918682</threshold>
-            <left_val>0.5188326835632324</left_val>
-            <right_val>0.2063035964965820</right_val></_></_>
-        <_>
-          <!-- tree 204 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>0 14 2 3 -1.</_>
-                <_>0 15 2 1 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-1.0795620037242770e-003</threshold>
-            <left_val>0.3904685080051422</left_val>
-            <right_val>0.5137907266616821</right_val></_></_>
-        <_>
-          <!-- tree 205 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>11 12 1 2 -1.</_>
-                <_>11 13 1 1 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>1.5995999274309725e-004</threshold>
-            <left_val>0.4895322918891907</left_val>
-            <right_val>0.5427504181861877</right_val></_></_>
-        <_>
-          <!-- tree 206 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>4 3 8 3 -1.</_>
-                <_>8 3 4 3 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-0.0193592701107264</threshold>
-            <left_val>0.6975228786468506</left_val>
-            <right_val>0.4773507118225098</right_val></_></_>
-        <_>
-          <!-- tree 207 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>0 4 20 6 -1.</_>
-                <_>0 4 10 6 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>0.2072550952434540</threshold>
-            <left_val>0.5233635902404785</left_val>
-            <right_val>0.3034991919994354</right_val></_></_>
-        <_>
-          <!-- tree 208 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>9 14 1 3 -1.</_>
-                <_>9 15 1 1 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-4.1953290929086506e-004</threshold>
-            <left_val>0.5419396758079529</left_val>
-            <right_val>0.4460186064243317</right_val></_></_>
-        <_>
-          <!-- tree 209 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>8 14 4 3 -1.</_>
-                <_>8 15 4 1 3.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>2.2582069505006075e-003</threshold>
-            <left_val>0.4815764129161835</left_val>
-            <right_val>0.6027408838272095</right_val></_></_>
-        <_>
-          <!-- tree 210 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>0 15 14 4 -1.</_>
-                <_>0 17 14 2 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>-6.7811207845807076e-003</threshold>
-            <left_val>0.3980278968811035</left_val>
-            <right_val>0.5183305740356445</right_val></_></_>
-        <_>
-          <!-- tree 211 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>1 14 18 6 -1.</_>
-                <_>1 17 18 3 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>0.0111543098464608</threshold>
-            <left_val>0.5431231856346130</left_val>
-            <right_val>0.4188759922981262</right_val></_></_>
-        <_>
-          <!-- tree 212 -->
-          <_>
-            <!-- root node -->
-            <feature>
-              <rects>
-                <_>0 0 10 6 -1.</_>
-                <_>0 0 5 3 2.</_>
-                <_>5 3 5 3 2.</_></rects>
-              <tilted>0</tilted></feature>
-            <threshold>0.0431624315679073</threshold>
-            <left_val>0.4738228023052216</left_val>
-            <right_val>0.6522961258888245</right_val></_></_></trees>
-      <stage_threshold>105.7611007690429700</stage_threshold>
-      <parent>20</parent>
-      <next>-1</next></_></stages></haarcascade_frontalface_alt>
-</opencv_storage>
diff --git a/AssB/include/AppLogger.h b/AssB/include/AppLogger.h
deleted file mode 100644
index 325cdf8..0000000
--- a/AssB/include/AppLogger.h
+++ /dev/null
@@ -1,79 +0,0 @@
-// AppLogger.h
-
-#ifndef APP_LOGGER_H
-#define APP_LOGGER_H
-
-#include <string>
-#include <sstream>
-#include <vector>
-
-#include "Poco/Message.h"
-
-// Forward decalrations (instant including h files)
-namespace Poco{class Logger;};
-class CMyLogger;
-
-// Application logger: class that handles all application logging.
-// It is implemented as a singleton
-// Singleton is a design pattern that is used to restrict instantiation of a class to one object.
-// This is useful when exactly one object is needed to coordinate actions across the system - for example only one logger.
-// Sometimes it is generalized to systems that operate more efficiently when only one or a few objects exist.
-
-class CAppLogger
-{
-private:
-        enum ELogger
-        {
-                ELoggerFile             = 0,
-                   ELoggerConsole,
-
-                ELoggersCount
-            };
-
-        CAppLogger(
-             		const std::string& logFileName,
-        		Poco::Message::Priority minFilePriority,
-        		Poco::Message::Priority minConsolePriority);
-
-public:
-        ~CAppLogger(void);
-
-        // The one and only application logger is accessible through this method
-        //first call initializes
-        static CAppLogger& Instance(
-        		const std::string& logFileName = "log.log",
-        		Poco::Message::Priority minFilePriority 	= Poco::Message::PRIO_INFORMATION,
-        		Poco::Message::Priority minConsolePriority	= Poco::Message::PRIO_INFORMATION
-        	)
-        {
-                // This is the instance.
-                static CAppLogger instance(logFileName, minFilePriority, minConsolePriority);
-
-                static bool firstCall = true;
-                if (firstCall)
-                {
-                        firstCall = false;
-                        //instance.Log("Message","Starting new log session.", Poco::Message::PRIO_DEBUG);
-                }
-
-
-                // Return a reference to the instance.
-                return instance;
-        }
-
-        static void Init(const std::string& logFileName, Poco::Message::Priority minFilePriority, Poco::Message::Priority minConsolePriority)
-        {
-
-        }
-        // Write to log a STL string.
-        void Log(const std::string& inLogString, Poco::Message::Priority inPriority/* = Poco::Message::PRIO_INFORMATION*/);
-        // Write to log a STL string stream.
-        void Log(const std::ostringstream& inLogString, Poco::Message::Priority inPriority/* = Poco::Message::PRIO_INFORMATION*/);
-
-private:
-        // Holds pointers to all loggers
-        std::vector<Poco::Logger*> mLoggers;
-};
-
-#endif // APP_LOGGER_H
-
diff --git a/AssB/include/CoffeeManager.h b/AssB/include/CoffeeManager.h
deleted file mode 100644
index ad144ea..0000000
--- a/AssB/include/CoffeeManager.h
+++ /dev/null
@@ -1,66 +0,0 @@
-/*
- * CoffeeManager.h
- *
- *  Created on: Nov 17, 2013
- *      Author: amio
- */
-
-#ifndef COFFEEMANAGER_H_
-#define COFFEEMANAGER_H_
-
-
-
-//#include "Log.h"
-#include "AppLogger.h"
-#include "Customers.h"
-#include "UniCoffeeShop.h"
-
-/*
- * a class that manages the coffeeshop events and provides it with the data it needs
- *
- */
-class CoffeeManager {
-private:
-	CoffeeManager(const CoffeeManager& other);
-	CoffeeManager& operator=(const CoffeeManager& other);
-
-	double _revenue;	//total income
-	double _profit;		//total income minus expenses
-	UniCoffeeShop* _shop;
-	Customers _customers;	//registered customers
-
-	//splits a string to a string vector according to delimiter
-	void splitString(const string& str,char delimiter, vector<string>& output);
-
-	//reads a file into a string matrix
-	void readFromFile(const string&  filename,vector< vector<string> >& table, char delimiter);
-
-	//reads events and handles them
-	void eventHandler(const string& eventFileName);
-
-	//handles register event
-	void registerEvent(const string& name, const string& product_name, const string& is_VIP);
-
-	//handles purchase event
-	void purchaseEvent(const string& customer_image);
-
-	//handles event of a supplier updating a price of an ingredient
-	void updateSupplierIngredientEvent(const string& supplier_name, const string& ingredient_name, const string& price);
-
-	//tries to make a purchase for a single customer
-	void singleBuy(Customer& buyer);
-
-	//logs current revenue and profit
-	void logRevenueAndProfit() const;
-
-
-public:
-	CoffeeManager();
-	virtual ~CoffeeManager();
-
-	//start the CoffeeManager's operation
-	void start(const string& confFileName, const string& productsFileName,const string& suppliersFileName,const string& eventFileName);
-
-};
-
-#endif /* COFFEEMANAGER_H_ */
diff --git a/AssB/include/Customer.h b/AssB/include/Customer.h
deleted file mode 100644
index 306478f..0000000
--- a/AssB/include/Customer.h
+++ /dev/null
@@ -1,43 +0,0 @@
-/*
- * Customer.h
- *
- *  Created on: Nov 17, 2013
- *      Author: amio
- */
-
-#ifndef CUSTOMER_H_
-#define CUSTOMER_H_
-#include "ImgTools.h"
-#include "UniCoffeeShop.h"
-#include "imageloader.h"
-
-#include <string>
-
-/*
- * a class that represents a customer of the coffeeshop
- */
-class Customer {
-protected:
-	const std::string _customer_name;
-	const std::string _favoriteProduct;	//the customer's favorite product
-	ImgTools _photo;	//the face image of the customer
-
-public:
-
-	Customer(const string& customer_name,const string& favoriteProduct);
-	virtual ~Customer();
-
-	//returns a product price customer - takes into account store fee and type of customer
-	virtual double computeProductPrice(double originalPrice)=0;
-
-	std::string getFavoriteProduct() const;
-
-	ImgTools& getPhoto();
-
-	const std::string getCustomerName() const {
-		return _customer_name;
-	}
-
-};
-
-#endif /* CUSTOMER_H_ */
diff --git a/AssB/include/Customers.h b/AssB/include/Customers.h
deleted file mode 100644
index 15d13b2..0000000
--- a/AssB/include/Customers.h
+++ /dev/null
@@ -1,37 +0,0 @@
-/*
- * Customers.h
- *
- *  Created on: Nov 17, 2013
- *      Author: amio
- */
-
-#ifndef CUSTOMERS_H_
-#define CUSTOMERS_H_
-#include <vector>
-
-#include "RegularCustomer.h"
-#include "VipCustomer.h"
-#include "ImgTools.h"
-#include "AppLogger.h"
-
-/*
- * a class that represents all the customers of the coffeeshop
- */
-class Customers {
-private:
-	std::vector<Customer *> m_customers;
-public:
-	Customers();
-	virtual ~Customers();
-
-	//fills the vector with the customers found on the photo
-	void detectCustomers(ImgTools& image,std::vector<Customer*>& foundCustomers);
-
-	// register a new customer to the system
-	void registerCustomer(const std::string& customer_name, const std::string& favorite_product,const std::string& isVIP);
-
-	//produce a collage of from all the customers' images and save it to a file
-	void saveCustomersCollage();
-};
-
-#endif /* CUSTOMERS_H_ */
diff --git a/AssB/include/ImgTools.h b/AssB/include/ImgTools.h
deleted file mode 100644
index 49b5dbb..0000000
--- a/AssB/include/ImgTools.h
+++ /dev/null
@@ -1,36 +0,0 @@
-/*
- * ImgTools.h
- *
- *  Created on: Nov 17, 2013
- *      Author: amio
- */
-
-#ifndef IMGTOOLS_H_
-#define IMGTOOLS_H_
-
-#include "imageloader.h"
-#include "imageoperations.h"
-
-/*
- * this class represents a photo and gives utils for face recognition
- */
-class ImgTools {
-public:
-	//gets an image
-	ImgTools(const std::string& imageFileName);
-	virtual ~ImgTools();
-
-	//show the image on screen
-	void show() const;
-
-	//get image in greyscale or in color
-	cv::Mat& getImage(bool isColor);
-
-	//gets a face and a rectangle and checks if the face is in the rectangle in this image
-	bool compareAFace(const cv::Rect& rect, const ImgTools& face) const;
-private:
-	ImageLoader _loader;	//the original color image
-	cv::Mat _greyScaleImage;	//a greyscale version for faster detection
-};
-
-#endif /* IMGTOOLS_H_ */
diff --git a/AssB/include/Ingredient.h b/AssB/include/Ingredient.h
deleted file mode 100644
index 24ad3a6..0000000
--- a/AssB/include/Ingredient.h
+++ /dev/null
@@ -1,61 +0,0 @@
-/*
- * Ingredient.h
- *
- *  Created on: Nov 22, 2013
- *      Author: arielbar
- */
-
-#ifndef INGREDIENT_H_
-#define INGREDIENT_H_
-
-#include "AppLogger.h"
-#include "Supplier.h"
-#include "MenuItem.h"
-#include <string>
-#include <vector>
-
-//for looping - solves circular references
-class Supplier;
-class MenuItem;
-
-using namespace std;
-
-/*
- * this class represents an ingredient that is used to make menuitems and provided by a supplier
- */
-class Ingredient {
-private:
-	Ingredient(const Ingredient& other);
-	Ingredient& operator=(const Ingredient& other);
-
-	string _name;
-	Supplier* _chosenSupplier;	//the cheapest supplier for this ingredient
-	vector< Supplier* > _availableSuppliers;
-	vector< MenuItem* > _usedInTheseMenuItems;	//menu items that use this ingredient
-public:
-	Ingredient(const string& ingname);
-	virtual ~Ingredient();
-	bool operator==(const Ingredient& other) const;
-
-	//adds a supplier that provides this ingredient
-	void addSupplier(Supplier* supplier);
-
-	//adds MenuItem that uses this ingredient
-	void addMenuItem(MenuItem* menuItem);
-
-	//update this instance to know who its best supplier is
-	void pickBestSupplier();
-
-	//get price from the cheapest supplier
-	double getPrice() const;
-
-	string getName() const;
-
-	void print() const;
-
-	//updates the prices of all the menu items that use this ingredient
-	//and return the number of menuitems on the menu that changed their price but stayed on the menu
-	int updateMyMenuItems();
-};
-
-#endif /* INGREDIENT_H_ */
diff --git a/AssB/include/Ingredients.h b/AssB/include/Ingredients.h
deleted file mode 100644
index 82210f9..0000000
--- a/AssB/include/Ingredients.h
+++ /dev/null
@@ -1,28 +0,0 @@
-/*
- * Ingredients.h
- *
- *  Created on: Nov 22, 2013
- *      Author: arielbar
- */
-
-#ifndef INGREDIENTS_H_
-#define INGREDIENTS_H_
-#include "Ingredient.h"
-#include <vector>
-
-/*
- * this class holds all the ingredients that are known by the coffeeshop
- */
-class Ingredients {
-private:
-	vector < Ingredient* > m_ingredients;
-public:
-	Ingredients();
-	virtual ~Ingredients();
-
-	Ingredient* getIngredient(const string& ingredient_name);
-	void update();
-	void print() const;
-};
-
-#endif /* INGREDIENTS_H_ */
diff --git a/AssB/include/MenuItem.h b/AssB/include/MenuItem.h
deleted file mode 100644
index 9797df1..0000000
--- a/AssB/include/MenuItem.h
+++ /dev/null
@@ -1,44 +0,0 @@
-/*
- * MenuItem.h
- *
- *  Created on: Nov 22, 2013
- *      Author: arielbar
- */
-
-#ifndef MenuItem_H_
-#define MenuItem_H_
-#include "Ingredient.h"
-#include <vector>
-#include "AppLogger.h"
-
-using namespace std;
-
-/*
- * a potential item that can be inside the menu that is provided for the coffee shop's customers
- */
-class MenuItem {
-private:
-	string _name;
-	vector < Ingredient* > _itemIngredients;
-	double _brutoPrice;
-	double _netoPrice;
-	bool _onMenu;
-public:
-	MenuItem(const string& name);
-	virtual ~MenuItem();
-	double getBrutoPrice() const;
-	double getNetoPrice() const;
-	bool isOnMenu() const;
-	int calculatePrice();
-	void addIngridient(Ingredient* ingridient);
-
-	//log of any menuitem that was added/removed from the menu
-	//and return the number of menuitems on the menu that changed their price but stayed on the menu
-	int logChange(double brutoPrice) const;
-
-	void print() const;
-	string getName() const;
-};
-
-
-#endif /* MenuItem_H_ */
diff --git a/AssB/include/MenuItems.h b/AssB/include/MenuItems.h
deleted file mode 100644
index cd45fca..0000000
--- a/AssB/include/MenuItems.h
+++ /dev/null
@@ -1,33 +0,0 @@
-/*
- * MenuItems.h
- *
- *  Created on: Nov 22, 2013
- *      Author: arielbar
- */
-
-#ifndef MenuItemS_H_
-#define MenuItemS_H_
-#include "MenuItem.h"
-#include <vector>
-
-/*
- * all the menu items that are known to the coffeeshop
- */
-class MenuItems {
-private:
-	vector < MenuItem* > m_menuItems;
-public:
-	MenuItems();
-	virtual ~MenuItems();
-
-	//searches for a menu item and returns it. creates it if it doesnt exist
-	MenuItem* getMenuItem(const string& name);
-
-	//initial update for calculating prices for menuitems for the first time
-	void update();
-
-	void print() const;
-	void printMenu() const;
-};
-
-#endif /* MenuItemS_H_ */
diff --git a/AssB/include/RegularCustomer.h b/AssB/include/RegularCustomer.h
deleted file mode 100644
index 9cd3c8d..0000000
--- a/AssB/include/RegularCustomer.h
+++ /dev/null
@@ -1,24 +0,0 @@
-/*
- * RegularCustomer.h
- *
- *  Created on: Nov 17, 2013
- *      Author: amio
- */
-
-#ifndef REGULARCUSTOMER_H_
-#define REGULARCUSTOMER_H_
-
-#include "Customer.h"
-
-/*
- * a type of customer
- */
-class RegularCustomer: public Customer {
-public:
-
-	RegularCustomer(const string& customer_name,const string& favorite_product);
-	virtual ~RegularCustomer();
-	double computeProductPrice(double originalPrice);
-};
-
-#endif /* REGULARCUSTOMER_H_ */
diff --git a/AssB/include/SellingIngredient.h b/AssB/include/SellingIngredient.h
deleted file mode 100644
index 802012c..0000000
--- a/AssB/include/SellingIngredient.h
+++ /dev/null
@@ -1,35 +0,0 @@
-/*
- * SellingIngredient.h
- *
- *  Created on: Nov 22, 2013
- *      Author: arielbar
- */
-
-#ifndef SELLINGINGREDIENT_H_
-#define SELLINGINGREDIENT_H_
-#include <string>
-
-#include "Ingredient.h"
-#include "MenuItem.h"
-using namespace std;
-
-/*
- * binds an ingrediant to its price at the seller's
- */
-class SellingIngredient {
-private:
-	SellingIngredient(const SellingIngredient& other);
-	SellingIngredient& operator=(const SellingIngredient& other);
-
-	Ingredient* _ingredient;	//the ingredient reffered to
-	double _price;	//the price of the ingredient of a specific supplier
-public:
-	SellingIngredient(Ingredient* ingridient);
-	virtual ~SellingIngredient();
-
-	string getName();
-	double getPrice() const;
-	void setPrice(double price);
-};
-
-#endif /* SELLINGINGREDIENT_H_ */
diff --git a/AssB/include/Supplier.h b/AssB/include/Supplier.h
deleted file mode 100644
index 8d84abb..0000000
--- a/AssB/include/Supplier.h
+++ /dev/null
@@ -1,50 +0,0 @@
-/*
- * Supplier.h
- *
- *  Created on: Nov 22, 2013
- *      Author: arielbar
- */
-
-#ifndef SUPPLIER_H_
-#define SUPPLIER_H_
-class Ingredient;
-class SellingIngredient;
-
-#include "SellingIngredient.h"
-#include "Ingredient.h"
-#include "AppLogger.h"
-
-#include <string>
-#include <vector>
-
-
-using namespace std;
-
-/*
- * represents a suuplier that proivedes ingredients to the coffeeshop
- */
-class Supplier {
-private:
-
-	string _name;
-
-	vector< SellingIngredient* > _supplierIngredients;
-
-public:
-	Supplier(const string& supname);
-	virtual ~Supplier();
-	bool operator == (const Supplier& other) const;
-
-	//creates a "selling ingredient" from the ingredeint and pushes it to list
-	//return true if succeeds
-	bool addIngredient(Ingredient* ingredient,double price);
-
-	//updates the matching "selling ingredient" and updates it price
-	void updateIngredient(const string& ingredient_name,double price);
-
-	void print() const;
-	string getName() const;
-	double getIngridientPrice(const string& ingridient_name) const;
-};
-
-#endif /* SUPPLIER_H_ */
diff --git a/AssB/include/Suppliers.h b/AssB/include/Suppliers.h
deleted file mode 100644
index f9db3ba..0000000
--- a/AssB/include/Suppliers.h
+++ /dev/null
@@ -1,30 +0,0 @@
-/*
- * Suppliers.h
- *
- *  Created on: Nov 22, 2013
- *      Author: arielbar
- */
-
-#ifndef SUPPLIERS_H_
-#define SUPPLIERS_H_
-#include "Supplier.h"
-#include "AppLogger.h"
-#include <vector>
-
-/*
- * represents all the suppliers known to the coffeeshop
- */
-class Suppliers {
-private:
-	vector< Supplier* > m_suppliers;
-public:
-	Suppliers();
-	virtual ~Suppliers();
-
-	//returns the matching supplier. creates it if it doesnt exist
-	Supplier* getSupplier(const string& name);
-
-	void print() const;
-};
-
-#endif /* SUPPLIERS_H_ */
diff --git a/AssB/include/UniCoffeeShop.h b/AssB/include/UniCoffeeShop.h
deleted file mode 100644
index 4239739..0000000
--- a/AssB/include/UniCoffeeShop.h
+++ /dev/null
@@ -1,50 +0,0 @@
-/*
- * UniCoffeeShop.h
- *
- *  Created on: Nov 12, 2013
- *      Author: Ami Oren && Ariel Baruch
- */
-
-#ifndef UNICOFFEESHOP_H_
-#define UNICOFFEESHOP_H_
-#include <vector>
-#include <string>
-#include <fstream>
-#include <stdlib.h>
-
-#include "Suppliers.h"
-#include "MenuItems.h"
-#include "Ingredients.h"
-
-const double LABOR_COST = 0.25;
-
-using namespace std;
-
-/*
- * the coffeeshop itself
- */
-class UniCoffeeShop {
-private:
-	MenuItems _menuItems;
-	Suppliers _suppliers;
-	Ingredients _ingredients;
-
-	//process the data from the input files
-	void processProducts(const vector< vector<string> >& productsInput);
-	void processSuppliers(const vector< vector<string> >& suppliersInput);
-
-
-public:
-	UniCoffeeShop();
-	virtual ~UniCoffeeShop();
-
-	//initializes the coffeeshop and its services
-	void start(vector< vector<string> >& productsInput,vector< vector<string> >& suppliersInput);
-
-	//updates the coffeeshop of a change in an ingredient's price
-	int updateSupplierIngredient(const string& supplier_name,const string& ingredient_name,const string& price);
-
-	MenuItem* getProductPrice(const string& product_name);
-};
-
-#endif /* UNICOFFEESHOP_H_ */
diff --git a/AssB/include/VipCustomer.h b/AssB/include/VipCustomer.h
deleted file mode 100644
index 2da6630..0000000
--- a/AssB/include/VipCustomer.h
+++ /dev/null
@@ -1,23 +0,0 @@
-/*
- * VipCustomer.h
- *
- *  Created on: Nov 17, 2013
- *      Author: amio
- */
-
-#ifndef VIPCUSTOMER_H_
-#define VIPCUSTOMER_H_
-
-#include "Customer.h"
-
-/*
- * a type of customer
- */
-class VipCustomer: public Customer {
-public:
-	VipCustomer(const string& customer_name,const string& favorite_product);
-	virtual ~VipCustomer();
-	double computeProductPrice(double originalPrice);
-};
-
-#endif /* VIPCUSTOMER_H_ */
diff --git a/AssB/include/imageloader.h b/AssB/include/imageloader.h
deleted file mode 100644
index 93428d4..0000000
--- a/AssB/include/imageloader.h
+++ /dev/null
@@ -1,29 +0,0 @@
-#ifndef IMAGE_LOADER_H
-#define IMAGE_LOADER_H
-
-#include <opencv2/highgui/highgui.hpp>
-#include <opencv2/core/core.hpp>
-#include <opencv2/imgproc/imgproc.hpp>
-#include <string>
-#include "AppLogger.h"
-
-class ImageLoader
-{
-public:
-    /** create a new image with the size=width*height */
-    ImageLoader(int width, int height);
-    /** import an image from a file location */
-    ImageLoader(const std::string& fileName);
-    /** display an image on screen */
-    void displayImage();
-    /** matrix getter */
-    cv::Mat& getImage();
-    /** save image to filename */
-    void saveImage(const std::string& filename);
-
-    virtual ~ImageLoader();
-
-private:
-    cv::Mat m_image;
-};
-#endif
diff --git a/AssB/include/imageoperations.h b/AssB/include/imageoperations.h
deleted file mode 100644
index 10a8af9..0000000
--- a/AssB/include/imageoperations.h
+++ /dev/null
@@ -1,22 +0,0 @@
-#ifndef IMAGE_OPERATIONS_H
-#define IMAGE_OPERATIONS_H
-
-#include <opencv2/highgui/highgui.hpp>
-#include <opencv2/core/core.hpp>
-#include <opencv2/imgproc/imgproc.hpp>
-
-#include "opencv2/objdetect/objdetect.hpp"
-
-class ImageOperations
-{
-public:
-    /** Convert src from a color rgb picture to a greyscales picture. The result is stored inside dst */
-    void rgb_to_greyscale(const cv::Mat& src, cv::Mat& dst);
-    /** Copy image src and paste it inside image dst at location (xLocation,0) */
-    void copy_paste_image(const cv::Mat& src, cv::Mat& dst, int xLocation);
-    /** Resize original picture into the dimension of image destination */
-    void resize(const cv::Mat& src, cv::Mat& dst);
-
-};
-
-#endif
diff --git a/AssB/m_events.conf b/AssB/m_events.conf
deleted file mode 100644
index 764141a..0000000
--- a/AssB/m_events.conf
+++ /dev/null
@@ -1,13 +0,0 @@
-register,Andrei,fanta,0
-register,Jesse,omelet,0
-register,Meni,orange juice,1
-register,Walter,omelet,1
-supplier_change,coca cola,fanta,0.6
-supplier_change,tnuva,vanilla,1.4
-supplier_change,tnuva,cocoa beans,1.1
-supplier_change,tnuva,milk,5.5
-supplier_change,tara,milk,5.6
-register,Achiya,fanta,1
-
-purchase,1.tiff
-
diff --git a/AssB/makefile b/AssB/makefile
deleted file mode 100644
index 64e2d27..0000000
--- a/AssB/makefile
+++ /dev/null
@@ -1,99 +0,0 @@
-# All Targets
-all: SimUniCoffeeShop
-
-# Tool invocations
-#	AppLogger.o      imageoperations.o  MenuItem.o           Suppliers.o
-#	CoffeeManager.o  ImgTools.o         MenuItems.o          UniCoffeeShop.o
-#	Customer.o       Ingredient.o       RegularCustomer.o    VipCustomer.o
-#	Customers.o      Ingredients.o      SellingIngredient.o
-#	imageloader.o    Main.o             Supplier.o
-
-
-SimUniCoffeeShop: bin/Main.o bin/AppLogger.o bin/imageoperations.o bin/MenuItem.o bin/Suppliers.o bin/CoffeeManager.o bin/ImgTools.o bin/MenuItems.o bin/UniCoffeeShop.o bin/Customer.o bin/Ingredient.o bin/RegularCustomer.o bin/VipCustomer.o bin/Customers.o bin/Ingredients.o bin/SellingIngredient.o bin/imageloader.o bin/Supplier.o
-
-	@echo 'Building target: SimUniCoffeeShop...'
-	@echo 'Invoking: C++ Linker...'
-	
-	g++ -o "bin/sim_coffee_shop" bin/MenuItems.o bin/UniCoffeeShop.o bin/Customer.o  bin/Ingredient.o bin/RegularCustomer.o bin/VipCustomer.o bin/Customers.o bin/Ingredients.o bin/SellingIngredient.o bin/Suppliers.o bin/Supplier.o bin/MenuItem.o bin/CoffeeManager.o bin/Main.o	bin/ImgTools.o bin/imageoperations.o bin/imageloader.o bin/AppLogger.o -L/usr/local/lib -L/usr/lib -lPocoFoundation -lPocoUtil -lopencv_objdetect -lopencv_core -lopencv_imgproc -lopencv_highgui
-	
-	@echo 'Finished building target: SimUniCoffeeShop'
-	@echo ' '
-	
-
-# Depends on the source and header files
-bin/AppLogger.o: src/AppLogger.cpp
-	g++ -g -Wall -Weffc++ -c -I/usr/local/include -Iinclude -o bin/AppLogger.o src/AppLogger.cpp
-
-# Depends on the source and header files
-bin/CoffeeManager.o: src/CoffeeManager.cpp
-	g++ -g -Wall -Weffc++ -c -I/usr/local/include -Iinclude -o bin/CoffeeManager.o src/CoffeeManager.cpp
-	
-# Depends on the source and header files
-bin/Customer.o: src/Customer.cpp
-	g++ -g -Wall -Weffc++ -c -I/usr/local/include -Iinclude -o bin/Customer.o src/Customer.cpp
-
-# Depends on the source and header files 
-bin/Customers.o: src/Customers.cpp
-	g++ -g -Wall -Weffc++ -c -I/usr/local/include -Iinclude -o bin/Customers.o src/Customers.cpp
-
-# Depends on the source and header files
-bin/imageloader.o: src/imageloader.cpp
-	g++ -g -Wall -Weffc++ -c -I/usr/local/include -Iinclude -o bin/imageloader.o src/imageloader.cpp
-	
-# Depends on the source and header files
-bin/imageoperations.o: src/imageoperations.cpp
-	g++ -g -Wall -Weffc++ -c -I/usr/local/include -Iinclude -o bin/imageoperations.o src/imageoperations.cpp
-
-# Depends on the source and header files
-bin/ImgTools.o: src/ImgTools.cpp
-	g++ -g -Wall -Weffc++ -c -I/usr/local/include -Iinclude -o bin/ImgTools.o src/ImgTools.cpp
-
-# Depends on the source and header files
-bin/Ingredient.o: src/Ingredient.cpp
-	g++ -g -Wall -Weffc++ -c -I/usr/local/include -Iinclude -o bin/Ingredient.o src/Ingredient.cpp
-	
-# Depends on the source and header files
-bin/Ingredients.o: src/Ingredients.cpp
-	g++ -g -Wall -Weffc++ -c -I/usr/local/include -Iinclude -o bin/Ingredients.o src/Ingredients.cpp
-	
-# Depends on the source and header files
-bin/Main.o: src/Main.cpp
-	g++ -g -Wall -Weffc++ -c -I/usr/local/include -Iinclude -o bin/Main.o src/Main.cpp
-	
-# Depends on the source and header files
-bin/MenuItem.o: src/MenuItem.cpp
-	g++ -g -Wall -Weffc++ -c -I/usr/local/include -Iinclude -o bin/MenuItem.o src/MenuItem.cpp
-	
-# Depends on the source and header files
-bin/MenuItems.o: src/MenuItems.cpp
-	g++ -g -Wall -Weffc++ -c -I/usr/local/include -Iinclude -o bin/MenuItems.o src/MenuItems.cpp
-	
-# Depends on the source and header files
-bin/RegularCustomer.o: src/RegularCustomer.cpp
-	g++ -g -Wall -Weffc++ -c -I/usr/local/include -Iinclude -o bin/RegularCustomer.o src/RegularCustomer.cpp
-	
-# Depends on the source and header files
-bin/SellingIngredient.o: src/SellingIngredient.cpp
-	g++ -g -Wall -Weffc++ -c -I/usr/local/include -Iinclude -o bin/SellingIngredient.o src/SellingIngredient.cpp
-		
-# Depends on the source and header files
-bin/Supplier.o: src/Supplier.cpp
-	g++ -g -Wall -Weffc++ -c -I/usr/local/include -Iinclude -o bin/Supplier.o src/Supplier.cpp
-		
-# Depends on the source and header files
-bin/Suppliers.o: src/Suppliers.cpp
-	g++ -g -Wall -Weffc++ -c -I/usr/local/include -Iinclude -o bin/Suppliers.o src/Suppliers.cpp
-		
-# Depends on the source and header files
-bin/UniCoffeeShop.o: src/UniCoffeeShop.cpp
-	g++ -g -Wall -Weffc++ -c -I/usr/local/include -Iinclude -o bin/UniCoffeeShop.o src/UniCoffeeShop.cpp
-		
-# Depends on the source and header files
-bin/VipCustomer.o: src/VipCustomer.cpp
-	g++ -g -Wall -Weffc++ -c -I/usr/local/include -Iinclude -o bin/VipCustomer.o src/VipCustomer.cpp
-		
-
-#Clean the build directory
-clean: 
-	@echo 'Cleaning Project Files...'
-	rm -f bin/*
\ No newline at end of file
diff --git a/AssB/src/AppLogger.cpp b/AssB/src/AppLogger.cpp
deleted file mode 100644
index 51c6a7e..0000000
--- a/AssB/src/AppLogger.cpp
+++ /dev/null
@@ -1,83 +0,0 @@
-// AppLogger.cpp
-
-#include "Poco/LoggingFactory.h"
-#include "Poco/Logger.h"
-#include "Poco/ConsoleChannel.h"
-#include "Poco/FileChannel.h"
-
-#include "AppLogger.h"
-
-using namespace Poco;
-using namespace std;
-
-CAppLogger::CAppLogger(
-		const std::string& logFileName 				/*= "log.log"*/,
-		Poco::Message::Priority minFilePriority 	/*= Poco::Message::PRIO_INFORMATION*/,
-		Poco::Message::Priority minConsolePriority	/*= Poco::Message::PRIO_INFORMATION*/):mLoggers()
-{
-	// We tell the vector how much elements we it'll have - its more efficient.
-	mLoggers.resize(ELoggersCount);
-	// Build the loggers
-	mLoggers[ELoggerConsole] =
-		&Logger::create("Log.Console", LoggingFactory::defaultFactory().createChannel("ConsoleChannel"), minConsolePriority);
-	mLoggers[ELoggerFile] =
-		&Logger::create("Log.File", LoggingFactory::defaultFactory().createChannel("FileChannel"), minFilePriority);
-	//note that the priorty level set different. the file logger will have more masseges then the console logger
-
-
-	// Set file channel path property (file & directory).
-	mLoggers[ELoggerFile]->getChannel()->setProperty("path", logFileName);
-
-	// Open all loggers.
-	vector<Logger*>::iterator iterator;
-	for(iterator = mLoggers.begin();
-		iterator != mLoggers.end();
-		iterator++)
-	{
-		if (*iterator != NULL)
-		{
-			(*iterator)->getChannel()->open();
-		}
-	}
-}
-
-CAppLogger::~CAppLogger(void)
-{
-	// Close all loggers
-	vector<Logger*>::iterator iterator;
-	for(iterator = mLoggers.begin();
-		iterator != mLoggers.end();
-		iterator++)
-	{
-		if (*iterator != NULL)
-		{
-			(*iterator)->getChannel()->close();
-			(*iterator)->getChannel()->release();
-		}
-	}
-}
-
-void CAppLogger::Log(const std::string& inLogString, Poco::Message::Priority inPriority/* = Poco::Message::PRIO_INFORMATION*/)
-{
-	Message msg;
-	msg.setPriority(inPriority);
-
-	msg.setText(inLogString);
-
-	vector<Logger*>::iterator iterator;
-	for(iterator = mLoggers.begin();
-		iterator != mLoggers.end();
-		iterator++)
-	{
-		if (*iterator != NULL)
-		{
-			(*iterator)->log(msg);
-		}
-	}
-}
-
-void CAppLogger::Log(const std::ostringstream& inLogString, Poco::Message::Priority inPriority/* = Poco::Message::PRIO_INFORMATION*/)
-{
-	Log(inLogString.str(), inPriority);
-}
-
diff --git a/AssB/src/CoffeeManager.cpp b/AssB/src/CoffeeManager.cpp
deleted file mode 100644
index 55a19bc..0000000
--- a/AssB/src/CoffeeManager.cpp
+++ /dev/null
@@ -1,204 +0,0 @@
-/*
- * CoffeeManager.cpp
- *
- *  Created on: Nov 17, 2013
- *      Author: amio
- */
-
-#include "CoffeeManager.h"
-
-CoffeeManager::CoffeeManager():_revenue(0), _profit(0), _shop(NULL), _customers() {
-
-}
-
-CoffeeManager::CoffeeManager(const CoffeeManager& other):_revenue(0), _profit(0), _shop(NULL), _customers() {
-	//unreachble
-}
-
-CoffeeManager& CoffeeManager::operator =(const CoffeeManager& other) {
-	//unreachble
-	return *this;
-}
-
-void CoffeeManager::splitString(const string& str,char delimiter, vector<string>& output){
-	string tmp="";
-
-	for(unsigned int i=0;i<str.length();i++){
-		if(str[i] != delimiter){
-			tmp = tmp+str[i];
-		}
-		else{
-			output.push_back(tmp);
-			tmp="";
-		}
-	}
-	output.push_back(tmp);
-}
-
-void CoffeeManager::readFromFile(const string&  filename,vector< vector<string> >& table, char delimiter) {
-	string line;
-
-	//Splitting lines by ',' and saving to vector of strings
-	ifstream myfile(filename.c_str());
-	if (myfile.is_open()) {
-		while (getline(myfile, line)) {
-			vector<string> splitLine;
-			splitString(line, delimiter, splitLine);
-			table.push_back( splitLine );
-		}
-		myfile.close();
-	}
-	else{
-		//"Unable to open file";
-		CAppLogger::Instance().Log(filename+" not found.",Poco::Message::PRIO_CRITICAL);
-	}
-}
-
-void CoffeeManager::registerEvent(const string& name, const string& product_name, const string& is_VIP) {
-	_customers.registerCustomer(name,product_name,is_VIP);
-
-	std::string isVIPstr = "regular";
-	if(is_VIP == "1"){
-		isVIPstr= "VIP";
-	}
-	CAppLogger::Instance().Log("New "+isVIPstr+" Customer registered - "+name+", Favorite product - "+product_name+".",Poco::Message::PRIO_NOTICE);
-
-}
-
-void CoffeeManager::purchaseEvent(const string& customer_image) {
-	CAppLogger::Instance().Log("purchasing: "+customer_image,Poco::Message::PRIO_TRACE);
-
-	ImgTools image("customers/"+ customer_image);
-
-	vector<Customer*> customersContainer;
-	_customers.detectCustomers(image, customersContainer);
-
-	ostringstream debugStr;
-	debugStr << "detected " << customersContainer.size() << " customers in photo";
-	CAppLogger::Instance().Log(debugStr, Poco::Message::PRIO_DEBUG);
-
-	//iterates over customers found in picture and tries to make a purchase for any single one of them
-	for (unsigned int i = 0; i < customersContainer.size(); ++i) {
-		singleBuy(*(customersContainer[i]));
-	}
-}
-
-void CoffeeManager::updateSupplierIngredientEvent(const string& supplier_name, const string& ingredient_name, const string& price) {
-	int numOfChangedProducts = _shop->updateSupplierIngredient(supplier_name,ingredient_name,price);
-
-	std::ostringstream debugStr;
-	debugStr << "Supplier " << supplier_name <<
-				" changed the price of " << ingredient_name << endl <<
-				"Products updated: " << numOfChangedProducts;
-	CAppLogger::Instance().Log(debugStr, Poco::Message::PRIO_NOTICE);
-}
-
-void CoffeeManager::singleBuy(Customer& buyer) {
-	MenuItem* favoriteItem = _shop->getProductPrice( buyer.getFavoriteProduct() );
-	if(favoriteItem->isOnMenu()){ //found
-		double total = buyer.computeProductPrice( favoriteItem->getBrutoPrice() );
-		double neto = favoriteItem->getNetoPrice();
-		CAppLogger::Instance().Log("Customer "+buyer.getCustomerName()+" purchased "+favoriteItem->getName(),Poco::Message::PRIO_WARNING);
-
-		_revenue += total;
-		_profit += (total-neto);
-	}
-	else{ //not found
-		CAppLogger::Instance().Log("Customer "+buyer.getCustomerName()+" failed to purchase "+favoriteItem->getName(),Poco::Message::PRIO_WARNING);
-	}
-}
-
-
-CoffeeManager::~CoffeeManager() {
-	
-}
-
-void CoffeeManager::eventHandler(const string& eventFileName) {
-	//0. read from file
-	vector< vector<string> > eventsList;
-	readFromFile(eventFileName,eventsList,',');
-
-	//going through each line
-	for (unsigned int i = 0; i < eventsList.size(); ++i) {
-		std::string event = eventsList[i][0];
-		if(event == "register"){
-			registerEvent(eventsList[i][1], eventsList[i][2], eventsList[i][3]);
-		}
-		else if(event == "purchase"){
-			purchaseEvent(eventsList[i][1]);
-		}
-		else if(event == "supplier_change"){
-			updateSupplierIngredientEvent(eventsList[i][1], eventsList[i][2], eventsList[i][3]);
-		}
-
-	}
-
-	_customers.saveCustomersCollage();
-
-}
-
-void CoffeeManager::logRevenueAndProfit() const {
-	char c_revenue[10];
-	char c_profit[10];
-	sprintf(c_revenue,"%.2f",_revenue);
-	sprintf(c_profit,"%.2f",_profit);
-
-	CAppLogger::Instance().Log("The total revenue is "+std::string(c_revenue)+", while the total profit is "+std::string(c_profit),Poco::Message::PRIO_WARNING);
-}
-
-
-
-void CoffeeManager::start(const string& confFileName, const string& productsFileName,const string& suppliersFileName,const string& eventFileName) {
-
-
-	vector< vector<string> > confInput;
-	readFromFile(confFileName, confInput, '=');
-
-	//////// Init Logger //////////////////////////
-
-	std::string LOG_FILE_NAME = "app.log";
-	Poco::Message::Priority LOGGER_FILE_PRIORITY = Poco::Message::PRIO_INFORMATION;
-	Poco::Message::Priority LOGGER_CONSOLE_PRIORITY= Poco::Message::PRIO_DEBUG;
-
-	for (unsigned int i = 0; i < confInput.size(); ++i) {
-		if( confInput[i][0] == "LOG_FILE_NAME"){
-			LOG_FILE_NAME = confInput[i][1];
-		}
-		else if(confInput[i][0] == "LOGGER_FILE_PRIORITY"){
-			LOGGER_FILE_PRIORITY = (Poco::Message::Priority)atoi(confInput[i][1].c_str());
-		}
-		else if(confInput[i][0] == "LOGGER_CONSOLE_PRIORITY"){
-			LOGGER_CONSOLE_PRIORITY = (Poco::Message::Priority)atoi(confInput[i][1].c_str());
-		}
-	}
-
-	CAppLogger::Instance( LOG_FILE_NAME,LOGGER_FILE_PRIORITY,LOGGER_CONSOLE_PRIORITY );
-
-	//////// Init Logger end //////////////////////////
-
-
-	vector< vector<string> > productsInput;
-	vector< vector<string> > suppliersInput;
-
-	readFromFile(productsFileName,productsInput,',');
-	readFromFile(suppliersFileName,suppliersInput,',');
-
-	_shop = new UniCoffeeShop();
-
-	_shop->start(productsInput,suppliersInput);
-
-	//read through the file events and run them realtime
-	eventHandler(eventFileName);
-
-	_customers.saveCustomersCollage();
-
-	logRevenueAndProfit();
-
-	delete _shop;
-}
-
-
-
-
-
-
diff --git a/AssB/src/Customer.cpp b/AssB/src/Customer.cpp
deleted file mode 100644
index bf30316..0000000
--- a/AssB/src/Customer.cpp
+++ /dev/null
@@ -1,30 +0,0 @@
-/*
- * Customer.cpp
- *
- *  Created on: Nov 17, 2013
- *      Author: amio
- */
-
-#include "Customer.h"
-
-
-
-Customer::Customer(const string& customer_name,const string& favoriteProduct):
-		_customer_name(customer_name),_favoriteProduct(favoriteProduct), _photo("faces/"+customer_name+"/"+customer_name+".tiff") {
-}
-
-Customer::~Customer() {
-	
-}
-
-std::string Customer::getFavoriteProduct() const {
-	return _favoriteProduct;
-}
-
-ImgTools& Customer::getPhoto() {
-	return _photo;
-}
-
-
-
-
diff --git a/AssB/src/Customers.cpp b/AssB/src/Customers.cpp
deleted file mode 100644
index 322b759..0000000
--- a/AssB/src/Customers.cpp
+++ /dev/null
@@ -1,105 +0,0 @@
-/*
- * Customers.cpp
- *
- *  Created on: Nov 17, 2013
- *      Author: amio
- */
-#include "Customers.h"
-
-using Poco::Logger;
-
-
-Customers::Customers():m_customers() {
-}
-
-Customers::~Customers() {
-	for (std::vector<Customer*>::iterator it = m_customers.begin(); it != m_customers.end(); ++it){
-		delete * it;
-	}
-	m_customers.clear();
-}
-
-void Customers::detectCustomers(ImgTools& image,std::vector<Customer*>& foundCustomers) {
-
-	//load face detection preferences from a file
-
-	//cv::CascadeClassifier face_cascade("/usr/local/share/OpenCV/haarcascades/haarcascade_frontalface_alt.xml");
-	//cv::CascadeClassifier face_cascade("/usr/share/OpenCV/haarcascades/haarcascade_frontalface_alt.xml");
-	cv::CascadeClassifier face_cascade("haarcascade_frontalface_alt.xml");
-	std::vector<cv::Rect> faces;
-	face_cascade.detectMultiScale( image.getImage(false), faces, 1.1, 2, 0|CV_HAAR_SCALE_IMAGE );
-
-	//cross detected faces with the customers' faces and push the matching faces to the vector
-	for (unsigned int i = 0; i < faces.size(); ++i) {
-		bool customerFound = false;
-
-		for (unsigned int j = 0; !customerFound && j < m_customers.size(); ++j) {
-			if( image.compareAFace(faces[i] , m_customers[j]->getPhoto()) ){
-				foundCustomers.push_back(m_customers[j]);
-				customerFound = true;
-			}
-		}
-	}
-
-}
-
-
-
-
-void Customers::registerCustomer(const std::string& customer_name, const std::string& favorite_product,const std::string& isVIP) {
-	Customer* customer;
-	if(isVIP == "1"){
-		customer = new VipCustomer(customer_name,favorite_product);
-	}
-	else{
-		customer = new RegularCustomer(customer_name,favorite_product);
-	}
-
-	m_customers.push_back(customer);
-}
-
-void Customers::saveCustomersCollage() {
-	ImageOperations photoshop;
-
-	int lowestHeight 	=-1;
-	int photo_height 	= 0;
-
-	//getting lowest height for collage dimentions
-	for (unsigned int i = 0; i < m_customers.size(); ++i) {
-		photo_height = m_customers[i]->getPhoto().getImage(true).rows;
-		if( (lowestHeight == -1) || photo_height < lowestHeight){
-			lowestHeight = photo_height;
-		}
-	}
-
-	//get desired canvas width
-	int canvas_width =0;
-	for (unsigned int i = 0; i < m_customers.size(); ++i) {
-		cv::Mat img = m_customers[i]->getPhoto().getImage(false);
-		canvas_width += ((int)( ( (double)lowestHeight) * ( ( (double)img.cols)/( (double)img.rows) ) ));
-	}
-
-	//1.create a blank image
-	cv::Mat collage(lowestHeight,canvas_width,CV_8UC3,cv::Scalar(255,255,255));
-
-	int xPosition =0;
-
-	//2. paste each customer image to it
-	for (unsigned int i = 0; i < m_customers.size(); ++i) {
-		cv::Mat photo = m_customers[i]->getPhoto().getImage(true);
-		int proportionalWidth = lowestHeight*(photo.cols/photo.rows);
-
-		cv::Mat resizedImg(lowestHeight,proportionalWidth,CV_8UC3,cv::Scalar(255,255,255));
-
-		photoshop.resize( m_customers[i]->getPhoto().getImage(true),resizedImg );
-		photoshop.copy_paste_image(resizedImg,collage,xPosition);
-		xPosition += proportionalWidth;
-	}
-
-	//3. write to file 'collage.tiff'
-    imwrite("collage.tiff", collage);
-
-}
-
-
-
diff --git a/AssB/src/ImgTools.cpp b/AssB/src/ImgTools.cpp
deleted file mode 100644
index c2ddfac..0000000
--- a/AssB/src/ImgTools.cpp
+++ /dev/null
@@ -1,50 +0,0 @@
-/*
- * ImgTools.cpp
- *
- *  Created on: Nov 17, 2013
- *      Author: amio
- */
-
-#include "ImgTools.h"
-#include <iostream>
-ImgTools::ImgTools(const std::string& imageFileName):_loader(imageFileName),_greyScaleImage(){
-	
-	ImageOperations oper;
-	//make & save a greyscale version of the image
-	oper.rgb_to_greyscale(_loader.getImage(), _greyScaleImage);
-}
-
-ImgTools::~ImgTools() {
-	
-
-}
-
-void ImgTools::show() const{
-    cv::imshow("My image", _greyScaleImage);
-    cv::waitKey(5000);
-}
-
-cv::Mat& ImgTools::getImage(bool isColor)
-{
-	if (isColor)	return _loader.getImage();
-	return _greyScaleImage;
-}
-
-bool ImgTools::compareAFace(const cv::Rect& rect, const ImgTools& face) const {
-
-	//if the sizes dont match then we can return false immediatly
-	if( (rect.height != face._greyScaleImage.rows) || (rect.width != face._greyScaleImage.cols)){
-		return false;
-	}
-
-	//iterate pixel by pixel - if all match return true
-	for (int i = 0; i < rect.width; ++i) {
-		for (int j = 0; j < rect.height; ++j) {
-			if( face._greyScaleImage.ptr<cv::Point_<uchar> >(j,i)->x != _greyScaleImage.ptr<cv::Point_<uchar> >(j+rect.y,i+rect.x)->x ){
-				return false;	//one pixel doesnt match - no match
-			}
-		}
-	}
-    return true;
-}
-
diff --git a/AssB/src/Ingredient.cpp b/AssB/src/Ingredient.cpp
deleted file mode 100644
index c7ca168..0000000
--- a/AssB/src/Ingredient.cpp
+++ /dev/null
@@ -1,95 +0,0 @@
-/*
- * Ingredient.cpp
- *
- *  Created on: Nov 22, 2013
- *      Author: arielbar
- */
-
-#include "Ingredient.h"
-
-#include <iostream>
-
-Ingredient::Ingredient(const string& ingname):
-		_name(ingname), _chosenSupplier(NULL), _availableSuppliers(), _usedInTheseMenuItems() {
-}
-
-Ingredient::Ingredient(const Ingredient& other):
-		_name(other._name), _chosenSupplier(NULL), _availableSuppliers(), _usedInTheseMenuItems(){
-	//unreachable
-	Ingredient(other._name);
-}
-
-Ingredient& Ingredient::operator =(const Ingredient& other) {
-	//unreachable
-	return *this;
-}
-
-Ingredient::~Ingredient() {
-	
-}
-
-void Ingredient::pickBestSupplier() {
-	Supplier* bestSupplier = NULL;
-	if(_availableSuppliers.size() ==0){
-		//matandro said on the forum it cannot happen
-		CAppLogger::Instance().Log("pickBestSupplier: ingredient not found", Poco::Message::PRIO_DEBUG );
-		return;
-	}
-	bestSupplier = _availableSuppliers[0];
-
-	//iterate over all of this ingredient's suppliers and save the cheapest one
-	for (unsigned int i = 1; i < _availableSuppliers.size(); ++i) {
-		if(_availableSuppliers[i]->getIngridientPrice(this->_name) < bestSupplier->getIngridientPrice(this->_name)){
-			bestSupplier = _availableSuppliers[i];
-		}
-	}
-	this->_chosenSupplier = bestSupplier;
-
-}
-
-bool Ingredient::operator ==(const Ingredient& other) const {
-	return (this->_name == other._name);
-}
-
-double Ingredient::getPrice() const {
-	return _chosenSupplier->getIngridientPrice(this->_name);
-}
-
-void Ingredient::addSupplier(Supplier* supplier) {
-	_availableSuppliers.push_back(supplier);
-}
-
-void Ingredient::addMenuItem(MenuItem* menuItem) {
-	_usedInTheseMenuItems.push_back(menuItem);
-}
-
-string Ingredient::getName() const{
-	return _name;
-}
-
-
-void Ingredient::print() const {
-
-	std::ostringstream debugStr;
-	debugStr << this->_name <<std::endl;
-	for (unsigned int i = 0; i < this->_usedInTheseMenuItems.size(); ++i) {
-		debugStr << "\t";
-		this->_usedInTheseMenuItems[i]->print();
-	}
-	CAppLogger::Instance().Log(debugStr, Poco::Message::PRIO_TRACE);
-}
-
-int Ingredient::updateMyMenuItems() {
-	int itemchanges= 0;
-	//iterate over this ingredient's menu items and update them
-	for (unsigned int i = 0; i < _usedInTheseMenuItems.size(); ++i) {
-		itemchanges+=_usedInTheseMenuItems[i]->calculatePrice();
-	}
-	return itemchanges;
-}
-
-
-
-
-
-
diff --git a/AssB/src/Ingredients.cpp b/AssB/src/Ingredients.cpp
deleted file mode 100644
index 87ceca8..0000000
--- a/AssB/src/Ingredients.cpp
+++ /dev/null
@@ -1,56 +0,0 @@
-/*
- * Ingredients.cpp
- *
- *  Created on: Nov 22, 2013
- *      Author: arielbar
- */
-
-#include "Ingredients.h"
-#include <iostream>
-Ingredients::Ingredients():m_ingredients() {
-	
-
-}
-
-Ingredients::~Ingredients() {
-	
-	for (std::vector<Ingredient*>::iterator it = m_ingredients.begin(); it != m_ingredients.end(); ++it){
-		delete * it;
-	}
-	m_ingredients.clear();
-}
-
-Ingredient* Ingredients::getIngredient(const string& ingredient_name) {
-	//if ingredient exists -> return it
-	for (unsigned int i = 0; i < m_ingredients.size(); ++i) {
-		if(ingredient_name == m_ingredients[i]->getName()){
-			return m_ingredients[i];
-		}
-	}
-	//else -> create it, push, and return it
-	Ingredient* ingridient = new Ingredient(ingredient_name);
-	m_ingredients.push_back(ingridient);
-	return ingridient;
-}
-
-void Ingredients::update() {
-	for (unsigned int i = 0; i < m_ingredients.size(); ++i) {
-		m_ingredients[i]->pickBestSupplier();
-	}
-}
-
-void Ingredients::print() const {
-	std::ostringstream debugStr;
-	debugStr << "***************** Ingredients ******************" << std::endl;
-	for (unsigned int i = 0; i < m_ingredients.size(); ++i) {
-		m_ingredients[i]->print();
-	}
-	debugStr << "**********************************************" << std::endl;
-	CAppLogger::Instance().Log(debugStr, Poco::Message::PRIO_TRACE);
-}
-
-
-
-
-
-
diff --git a/AssB/src/Main.cpp b/AssB/src/Main.cpp
deleted file mode 100644
index 8b4e70f..0000000
--- a/AssB/src/Main.cpp
+++ /dev/null
@@ -1,27 +0,0 @@
-
-//for opencv
-#include "imageloader.h"
-#include "imageoperations.h"
-
-
-#include <iostream>
-
-#include "CoffeeManager.h"
-
-using namespace cv;
-
-
-int main(int argc, char **argv)
-{
-	if (argc < 5)
-	{
-		cout << "not enough arguments. exiting..." << endl;
-		return 0;
-	}
-
-	CoffeeManager manager;
-
-	manager.start( std::string(argv[1]), std::string(argv[2]) , std::string(argv[3]) , std::string(argv[4]) );
-
-	return 1;
-}
diff --git a/AssB/src/MenuItem.cpp b/AssB/src/MenuItem.cpp
deleted file mode 100644
index c78a69c..0000000
--- a/AssB/src/MenuItem.cpp
+++ /dev/null
@@ -1,103 +0,0 @@
-/*
- * MenuItem.cpp
- *
- *  Created on: Nov 22, 2013
- *      Author: arielbar
- */
-
-#include "MenuItem.h"
-#include <iostream>
-
-MenuItem::MenuItem(const string& name):_name(name),_itemIngredients(),_brutoPrice(-1),_netoPrice(-1),_onMenu(false) {
-	
-}
-
-MenuItem::~MenuItem() {
-	
-}
-
-double MenuItem::getBrutoPrice() const {
-	return _brutoPrice;
-}
-
-double MenuItem::getNetoPrice() const {
-	return _netoPrice;
-}
-
-bool MenuItem::isOnMenu() const {
-	return this->_onMenu;
-}
-
-
-int MenuItem::calculatePrice() {
-	int changed = 0;	//num
-	double cost = 0;
-	//iterate over all of this menu item's ingredients and sum up the cumulative cost
-	for (unsigned int i = 0; i < _itemIngredients.size(); ++i) {
-		cost += _itemIngredients[i]->getPrice();
-	}
-	//if a change in the menu item's price has occurred check if it was just added to the menu
-	//or just removed from the menu and log accordingly
-	if((this->_netoPrice != -1) && this->_brutoPrice != ((cost + 0.25)*1.5)){
-		// add 1 for each menu item that was just added to the menu
-		changed += logChange((cost + 0.25)*1.5);
-	}
-	this->_netoPrice = cost+0.25;
-	this->_brutoPrice = (cost + 0.25)*1.5;
-	if(_brutoPrice <= 5){
-		this->_onMenu = true;
-	}
-	else{
-		this->_onMenu = false;
-	}
-	return changed;
-}
-
-void MenuItem::addIngridient(Ingredient* ingridient) {
-	_itemIngredients.push_back(ingridient);
-}
-
-int MenuItem::logChange(double brutoPrice) const {
-	if( isOnMenu() ){
-		if(brutoPrice <= 5){
-			//inc number of menu items which their price changed and but still they stayed on the menu
-			return 1;
-		}
-		else{
-			CAppLogger::Instance().Log("Product "+this->_name+" was removed from the menu.",Poco::Message::PRIO_WARNING);		}
-	}
-	else{
-		if(brutoPrice <= 5){
-			CAppLogger::Instance().Log("Product "+this->_name+" was added from the menu.",Poco::Message::PRIO_WARNING);		}
-	}
-	return 0;
-}
-
-void MenuItem::print() const {
-	std::ostringstream debugStr;
-	if(this->isOnMenu()){
-		debugStr << "[x] ";
-	}
-	else{
-		debugStr << "[ ] ";
-	}
-	debugStr << this->_name  << "\t" << this->_brutoPrice << " (" << this->_netoPrice << ") { ";
-	for (unsigned int i = 0; i < this->_itemIngredients.size(); ++i) {
-		debugStr << this->_itemIngredients[i]->getName() ;
-		if(i != _itemIngredients.size()-1){
-			debugStr << ", ";
-		}
-	}
-	debugStr << " }" << std::endl;
-
-	CAppLogger::Instance().Log(debugStr,Poco::Message::PRIO_TRACE);
-}
-
-string MenuItem::getName() const {
-	return _name;
-}
-
-
-
-
-
diff --git a/AssB/src/MenuItems.cpp b/AssB/src/MenuItems.cpp
deleted file mode 100644
index 74f07e4..0000000
--- a/AssB/src/MenuItems.cpp
+++ /dev/null
@@ -1,57 +0,0 @@
-/*
- * MenuItems.cpp
- *
- *  Created on: Nov 22, 2013
- *      Author: arielbar
- */
-
-#include "MenuItems.h"
-#include <iostream>
-MenuItems::MenuItems():m_menuItems() {
-	
-
-}
-
-MenuItems::~MenuItems() {
-	
-	for (std::vector<MenuItem*>::iterator it = m_menuItems.begin(); it != m_menuItems.end(); ++it){
-		delete * it;
-	}
-	m_menuItems.clear();
-}
-
-MenuItem* MenuItems::getMenuItem(const string& name) {
-	//if MenuItem exists -> return it
-	for (unsigned int i = 0; i < m_menuItems.size(); ++i) {
-		if(name == m_menuItems[i]->getName()){
-			return m_menuItems[i];
-		}
-	}
-	//else -> create it, push, and return it
-	MenuItem* menuItem = new MenuItem(name);
-	m_menuItems.push_back(menuItem);
-	return menuItem;
-
-}
-
-
-void MenuItems::print() const {
-	std::ostringstream debugStr;
-	debugStr << "*****************Menu Items ******************" << std::endl;
-	for (unsigned int i = 0; i < m_menuItems.size(); ++i) {
-		m_menuItems[i]->print();
-	}
-	debugStr << "**********************************************" << std::endl;
-	CAppLogger::Instance().Log(debugStr, Poco::Message::PRIO_TRACE);
-}
-
-void MenuItems::update() {
-	for (unsigned int i = 0; i < m_menuItems.size(); ++i) {
-		m_menuItems[i]->calculatePrice();
-	}
-}
-
-void MenuItems::printMenu() const {
-}
-
-
diff --git a/AssB/src/RegularCustomer.cpp b/AssB/src/RegularCustomer.cpp
deleted file mode 100644
index 3a0dae8..0000000
--- a/AssB/src/RegularCustomer.cpp
+++ /dev/null
@@ -1,25 +0,0 @@
-/*
- * RegularCustomer.cpp
- *
- *  Created on: Nov 17, 2013
- *      Author: amio
- */
-
-#include "RegularCustomer.h"
-
-//RegularCustomer::RegularCustomer()
-//{
-//}
-
-RegularCustomer::RegularCustomer(const string& customer_name,const string& favorite_product):Customer(customer_name,favorite_product) {
-	
-}
-RegularCustomer::~RegularCustomer() {
-	
-}
-
-double RegularCustomer::computeProductPrice(double originalPrice) {
-	return originalPrice;
-}
-
-
diff --git a/AssB/src/SellingIngredient.cpp b/AssB/src/SellingIngredient.cpp
deleted file mode 100644
index bb5dab3..0000000
--- a/AssB/src/SellingIngredient.cpp
+++ /dev/null
@@ -1,43 +0,0 @@
-/*
- * SellingIngredient.cpp
- *
- *  Created on: Nov 22, 2013
- *      Author: arielbar
- */
-
-#include "SellingIngredient.h"
-
-SellingIngredient::SellingIngredient(Ingredient* ingridient):_ingredient(ingridient),_price(0) {
-
-}
-
-SellingIngredient::SellingIngredient(const SellingIngredient& other):_ingredient(NULL),_price(0) {
-	//unreachable
-
-}
-
-SellingIngredient& SellingIngredient::operator =(
-		const SellingIngredient& other) {
-	//unreachable
-	return *this;
-}
-
-SellingIngredient::~SellingIngredient() {
-	
-}
-
-string SellingIngredient::getName() {
-	return _ingredient->getName();
-}
-
-double SellingIngredient::getPrice() const {
-	return _price;
-}
-
-void SellingIngredient::setPrice(double price) {
-	_price = price;
-}
-
-
-
-
diff --git a/AssB/src/Supplier.cpp b/AssB/src/Supplier.cpp
deleted file mode 100644
index 75d9217..0000000
--- a/AssB/src/Supplier.cpp
+++ /dev/null
@@ -1,73 +0,0 @@
-/*
- * Supplier.cpp
- *
- *  Created on: Nov 22, 2013
- *      Author: arielbar
- */
-
-#include "Supplier.h"
-#include <iostream>
-Supplier::Supplier(const string& supname):_name(supname),_supplierIngredients() {
-
-}
-
-Supplier::~Supplier() {
-	
-	for (std::vector<SellingIngredient*>::iterator it = _supplierIngredients.begin(); it != _supplierIngredients.end(); ++it){
-		delete * it;
-	}
-	_supplierIngredients.clear();
-
-
-}
-
-bool Supplier::addIngredient(Ingredient* ingredient,double price) {
-	SellingIngredient* sellingIngredient = new SellingIngredient(ingredient);
-	sellingIngredient->setPrice(price);
-  	_supplierIngredients.push_back(sellingIngredient);
-
-	return true;
-}
-
-bool Supplier::operator ==(const Supplier& other) const {
-	return (this->_name == other._name);
-}
-
-void Supplier::updateIngredient(const string& ingredient_name, double price) {
-	for (unsigned int i = 0; i < _supplierIngredients.size(); ++i) {
-		if(_supplierIngredients[i]->getName() == ingredient_name){
-			_supplierIngredients[i]->setPrice(price);
-			return;
-		}
-	}
-}
-
-void Supplier::print() const {
-
-	std::ostringstream debugStr;
-	for (unsigned int j = 0; j < _supplierIngredients.size(); ++j) {
-		debugStr << "\t"<< _supplierIngredients[j]->getName() << "("<< _supplierIngredients[j]->getPrice() << ")"<<std::endl;
-	}
-	CAppLogger::Instance().Log(debugStr, Poco::Message::PRIO_TRACE);
-}
-
-string Supplier::getName() const {
-	return _name;
-}
-
-double Supplier::getIngridientPrice(const string& ingridient_name) const {
-	for (unsigned int i = 0; i < _supplierIngredients.size(); ++i) {
-		if(_supplierIngredients[i]->getName() == ingridient_name){
-			return _supplierIngredients[i]->getPrice();
-		}
-	}
-	//matandro said on the forum it cannot happen
-	CAppLogger::Instance().Log("getIngridientPrice: ingredient not found", Poco::Message::PRIO_DEBUG );
-	return -1;
-}
-
-
-
-
-
-
diff --git a/AssB/src/Suppliers.cpp b/AssB/src/Suppliers.cpp
deleted file mode 100644
index 67c9050..0000000
--- a/AssB/src/Suppliers.cpp
+++ /dev/null
@@ -1,50 +0,0 @@
-/*
- * Suppliers.cpp
- *
- *  Created on: Nov 22, 2013
- *      Author: arielbar
- */
-
-#include "Suppliers.h"
-
-
-Suppliers::Suppliers():m_suppliers() {
-	
-
-}
-
-Suppliers::~Suppliers() {
-	
-	for (std::vector<Supplier*>::iterator it = m_suppliers.begin(); it != m_suppliers.end(); ++it){
-		delete * it;
-	}
-	m_suppliers.clear();
-}
-
-Supplier* Suppliers::getSupplier(const string& name) {
-	//if ingredient exists -> return it
-	for (unsigned int i = 0; i < m_suppliers.size(); ++i) {
-		if(name == m_suppliers[i]->getName()){
-			return m_suppliers[i];
-		}
-	}
-	//else -> create it, push, and return it
-	Supplier* supplier = new Supplier(name);
-	m_suppliers.push_back(supplier);
-	return supplier;
-}
-
-
-void Suppliers::print() const {
-	std::ostringstream debugStr;
-	debugStr <<  "***************** Suppliers ******************" << endl;
-	for (unsigned int i = 0; i < m_suppliers.size(); ++i) {
-		debugStr << m_suppliers[i]->getName() << std::endl;
-		m_suppliers[i]->print();
-	}
-	debugStr << "**********************************************" << endl;
-	CAppLogger::Instance().Log(debugStr, Poco::Message::PRIO_TRACE);
-}
-
-
-
diff --git a/AssB/src/UniCoffeeShop.cpp b/AssB/src/UniCoffeeShop.cpp
deleted file mode 100644
index 39cacfc..0000000
--- a/AssB/src/UniCoffeeShop.cpp
+++ /dev/null
@@ -1,78 +0,0 @@
-
-#include "UniCoffeeShop.h"
-
-UniCoffeeShop::UniCoffeeShop():_menuItems(), _suppliers(), _ingredients(){
-
-}
-
-
-void UniCoffeeShop::processProducts(const vector<vector<string> >& productsInput) {
-	//going through the input file , creating products , ingridients, and linking.
-	for (unsigned int i = 0; i < productsInput.size(); ++i) {
-		MenuItem* tmp_menuItem = _menuItems.getMenuItem(productsInput[i][0]); //adding product
-
-		//adding ingredients
-		for (unsigned int j = 1; j < productsInput[i].size(); ++j) {
-			Ingredient* tmp_ingrident = _ingredients.getIngredient(productsInput[i][j]); //referense to ingredient
-			tmp_menuItem->addIngridient(tmp_ingrident); //add ingredient to menuItem
-			tmp_ingrident->addMenuItem(tmp_menuItem);
-		}
-	}
-}
-
-void UniCoffeeShop::processSuppliers(const vector<vector<string> >& suppliersInput) {
-	//going through the input file , creating products , ingridients, and linking.
-	for (unsigned int i = 0; i < suppliersInput.size(); ++i) {
-		Supplier* tmp_supplier = _suppliers.getSupplier(suppliersInput[i][0]); //get ref to supplier (create if needed)
-		Ingredient* tmp_ingredient = _ingredients.getIngredient(suppliersInput[i][1]); //get ref to ing
-		tmp_ingredient->addSupplier(tmp_supplier); //add supplier to ingredient
-		tmp_supplier->addIngredient( tmp_ingredient, atof(suppliersInput[i][2].c_str()) ); //add ing and price to supplier
-	}
-}
-
-UniCoffeeShop::~UniCoffeeShop() {
-}
-
-void UniCoffeeShop::start(vector< vector<string> >& productsInput,vector< vector<string> >& suppliersInput) {
-	processProducts(productsInput);
-	processSuppliers(suppliersInput);
-
-	_ingredients.update(); //get best price for each ingredient
-	_menuItems.update(); //calculate products prices & decide if on menu
-
-
-	_suppliers.print();
-	_menuItems.print();
-	_ingredients.print();
-
-}
-
-int UniCoffeeShop::updateSupplierIngredient(const string& supplier_name, const string& ingredient_name, const string& price) {
-
-	Supplier* supplier = _suppliers.getSupplier(supplier_name);
-	Ingredient* changeIngredient = _ingredients.getIngredient(ingredient_name);
-
-	double ingredientBestPrice_before = changeIngredient->getPrice();
-	supplier->updateIngredient(ingredient_name,atof(price.c_str())); //change ingredient price at supplier
-	changeIngredient->pickBestSupplier();
-	double ingredientBestPrice_after = changeIngredient->getPrice();
-
-	//updates the menu if needed
-	if(ingredientBestPrice_before != ingredientBestPrice_after ){
-		return changeIngredient->updateMyMenuItems();
-	}
-	return 0;
-
-}
-
-MenuItem* UniCoffeeShop::getProductPrice(const string& product_name) {
-	MenuItem* selectedProduct = _menuItems.getMenuItem(product_name);
-	return selectedProduct;
-}
-
-
-
-
-
-
-
diff --git a/AssB/src/VipCustomer.cpp b/AssB/src/VipCustomer.cpp
deleted file mode 100644
index 2a0eb38..0000000
--- a/AssB/src/VipCustomer.cpp
+++ /dev/null
@@ -1,23 +0,0 @@
-/*
- * VipCustomer.cpp
- *
- *  Created on: Nov 17, 2013
- *      Author: amio
- */
-
-#include "VipCustomer.h"
-
-VipCustomer::VipCustomer(const string& customer_name,const string& favorite_product):Customer(customer_name,favorite_product) {
-	
-
-}
-
-VipCustomer::~VipCustomer() {
-	
-}
-
-double VipCustomer::computeProductPrice(double originalPrice) {
-	return originalPrice*0.8;
-}
-
-
diff --git a/AssB/src/imageloader.cpp b/AssB/src/imageloader.cpp
deleted file mode 100644
index a48f42f..0000000
--- a/AssB/src/imageloader.cpp
+++ /dev/null
@@ -1,43 +0,0 @@
-#include "imageloader.h"
-
-using namespace cv;
-using namespace std;
-
-ImageLoader::ImageLoader(int width, int height)
-    : m_image(width, height, CV_8UC3)
-{
-
-}
-
-ImageLoader::ImageLoader(const string& fileName)
-    : m_image(imread(fileName))
-{
-  if (!m_image.data)
-  {
-	  CAppLogger::Instance().Log("Failed loading "+fileName, Poco::Message::PRIO_TRACE);
-  }
-}
-
-ImageLoader::~ImageLoader()
-{
-  m_image.release();
-}
-
-void ImageLoader::displayImage()
-{
-    // create image window named "My image"
-        namedWindow("My image");
-        // show the image on window
-        imshow("My image", m_image);
-        // wait key for 5000 ms
-        waitKey(5000);
-}
-
-cv::Mat& ImageLoader::getImage()
-{
-    return m_image;
-}
-
-void ImageLoader::saveImage(const string& fileName){
-    imwrite(fileName, m_image);
-}
diff --git a/AssB/src/imageoperations.cpp b/AssB/src/imageoperations.cpp
deleted file mode 100644
index 9676f3f..0000000
--- a/AssB/src/imageoperations.cpp
+++ /dev/null
@@ -1,27 +0,0 @@
-#include "imageoperations.h"
-
-void ImageOperations::rgb_to_greyscale(const cv::Mat& src, cv::Mat& dst)
-{
-    cv::cvtColor(src,dst,CV_BGR2GRAY);
-}
-
-
-void ImageOperations::resize(const cv::Mat& src, cv::Mat& dst)
-{
-    cv::resize(src,dst,dst.size());
-}
-
-void ImageOperations::copy_paste_image(const cv::Mat& original, cv::Mat& destination, int xLocation)
-{
-    if(original.size().height > destination.size().height)
-        throw ("original image is higher that destination image");
-    cv::Rect roi(xLocation, 0, original.size().width, original.size().height);
-    cv::Mat imageROI (destination, roi);
-    original.copyTo(imageROI);
-}
-
-
-
-
-
-
diff --git a/Assignment1/Assignment1.sln b/Assignment1/Assignment1.sln
deleted file mode 100644
index 213c170..0000000
--- a/Assignment1/Assignment1.sln
+++ /dev/null
@@ -1,22 +0,0 @@
-﻿
-Microsoft Visual Studio Solution File, Format Version 12.00
-# Visual Studio 2013
-VisualStudioVersion = 12.0.31101.0
-MinimumVisualStudioVersion = 10.0.40219.1
-Project("{8BC9CEB8-8B4A-11D0-8D11-00A0C91BC942}") = "Assignment1", "Assignment1\Assignment1.vcxproj", "{68C9CA09-572E-4458-BC57-307CDC75B862}"
-EndProject
-Global
-	GlobalSection(SolutionConfigurationPlatforms) = preSolution
-		Debug|Win32 = Debug|Win32
-		Release|Win32 = Release|Win32
-	EndGlobalSection
-	GlobalSection(ProjectConfigurationPlatforms) = postSolution
-		{68C9CA09-572E-4458-BC57-307CDC75B862}.Debug|Win32.ActiveCfg = Debug|Win32
-		{68C9CA09-572E-4458-BC57-307CDC75B862}.Debug|Win32.Build.0 = Debug|Win32
-		{68C9CA09-572E-4458-BC57-307CDC75B862}.Release|Win32.ActiveCfg = Release|Win32
-		{68C9CA09-572E-4458-BC57-307CDC75B862}.Release|Win32.Build.0 = Release|Win32
-	EndGlobalSection
-	GlobalSection(SolutionProperties) = preSolution
-		HideSolutionNode = FALSE
-	EndGlobalSection
-EndGlobal
diff --git a/Assignment1/Assignment1/Assignment1.vcxproj b/Assignment1/Assignment1/Assignment1.vcxproj
deleted file mode 100644
index 237f981..0000000
--- a/Assignment1/Assignment1/Assignment1.vcxproj
+++ /dev/null
@@ -1,89 +0,0 @@
-﻿<?xml version="1.0" encoding="utf-8"?>
-<Project DefaultTargets="Build" ToolsVersion="12.0" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
-  <ItemGroup Label="ProjectConfigurations">
-    <ProjectConfiguration Include="Debug|Win32">
-      <Configuration>Debug</Configuration>
-      <Platform>Win32</Platform>
-    </ProjectConfiguration>
-    <ProjectConfiguration Include="Release|Win32">
-      <Configuration>Release</Configuration>
-      <Platform>Win32</Platform>
-    </ProjectConfiguration>
-  </ItemGroup>
-  <PropertyGroup Label="Globals">
-    <ProjectGuid>{68C9CA09-572E-4458-BC57-307CDC75B862}</ProjectGuid>
-    <RootNamespace>Assignment1</RootNamespace>
-  </PropertyGroup>
-  <Import Project="$(VCTargetsPath)\Microsoft.Cpp.Default.props" />
-  <PropertyGroup Condition="'$(Configuration)|$(Platform)'=='Debug|Win32'" Label="Configuration">
-    <ConfigurationType>Application</ConfigurationType>
-    <UseDebugLibraries>true</UseDebugLibraries>
-    <PlatformToolset>v120</PlatformToolset>
-    <CharacterSet>MultiByte</CharacterSet>
-  </PropertyGroup>
-  <PropertyGroup Condition="'$(Configuration)|$(Platform)'=='Release|Win32'" Label="Configuration">
-    <ConfigurationType>Application</ConfigurationType>
-    <UseDebugLibraries>false</UseDebugLibraries>
-    <PlatformToolset>v120</PlatformToolset>
-    <WholeProgramOptimization>true</WholeProgramOptimization>
-    <CharacterSet>MultiByte</CharacterSet>
-  </PropertyGroup>
-  <Import Project="$(VCTargetsPath)\Microsoft.Cpp.props" />
-  <ImportGroup Label="ExtensionSettings">
-  </ImportGroup>
-  <ImportGroup Label="PropertySheets" Condition="'$(Configuration)|$(Platform)'=='Debug|Win32'">
-    <Import Project="$(UserRootDir)\Microsoft.Cpp.$(Platform).user.props" Condition="exists('$(UserRootDir)\Microsoft.Cpp.$(Platform).user.props')" Label="LocalAppDataPlatform" />
-  </ImportGroup>
-  <ImportGroup Label="PropertySheets" Condition="'$(Configuration)|$(Platform)'=='Release|Win32'">
-    <Import Project="$(UserRootDir)\Microsoft.Cpp.$(Platform).user.props" Condition="exists('$(UserRootDir)\Microsoft.Cpp.$(Platform).user.props')" Label="LocalAppDataPlatform" />
-  </ImportGroup>
-  <PropertyGroup Label="UserMacros" />
-  <PropertyGroup Condition="'$(Configuration)|$(Platform)'=='Debug|Win32'">
-    <IncludePath>$(VC_IncludePath);$(WindowsSDK_IncludePath);include;</IncludePath>
-  </PropertyGroup>
-  <ItemDefinitionGroup Condition="'$(Configuration)|$(Platform)'=='Debug|Win32'">
-    <ClCompile>
-      <WarningLevel>Level3</WarningLevel>
-      <Optimization>Disabled</Optimization>
-      <SDLCheck>true</SDLCheck>
-      <PreprocessorDefinitions>_MBCS;%(PreprocessorDefinitions);</PreprocessorDefinitions>
-    </ClCompile>
-    <Link>
-      <GenerateDebugInformation>true</GenerateDebugInformation>
-    </Link>
-  </ItemDefinitionGroup>
-  <ItemDefinitionGroup Condition="'$(Configuration)|$(Platform)'=='Release|Win32'">
-    <ClCompile>
-      <WarningLevel>Level3</WarningLevel>
-      <Optimization>MaxSpeed</Optimization>
-      <FunctionLevelLinking>true</FunctionLevelLinking>
-      <IntrinsicFunctions>true</IntrinsicFunctions>
-      <SDLCheck>true</SDLCheck>
-    </ClCompile>
-    <Link>
-      <GenerateDebugInformation>true</GenerateDebugInformation>
-      <EnableCOMDATFolding>true</EnableCOMDATFolding>
-      <OptimizeReferences>true</OptimizeReferences>
-    </Link>
-  </ItemDefinitionGroup>
-  <ItemGroup>
-    <ClCompile Include="main.cpp" />
-  </ItemGroup>
-  <ItemGroup>
-    <Library Include="lib\Glaux.lib" />
-    <Library Include="lib\GLU32.LIB" />
-    <Library Include="lib\glui32.lib" />
-    <Library Include="lib\glut32.lib" />
-    <Library Include="lib\OPENGL32.LIB" />
-  </ItemGroup>
-  <ItemGroup>
-    <ClInclude Include="include\GL\GL.H" />
-    <ClInclude Include="include\GL\GLAux.h" />
-    <ClInclude Include="include\GL\GLU.H" />
-    <ClInclude Include="include\GL\glui.h" />
-    <ClInclude Include="include\GL\glut.h" />
-  </ItemGroup>
-  <Import Project="$(VCTargetsPath)\Microsoft.Cpp.targets" />
-  <ImportGroup Label="ExtensionTargets">
-  </ImportGroup>
-</Project>
\ No newline at end of file
diff --git a/Assignment1/Assignment1/Assignment1.vcxproj.filters b/Assignment1/Assignment1/Assignment1.vcxproj.filters
deleted file mode 100644
index 4a31ede..0000000
--- a/Assignment1/Assignment1/Assignment1.vcxproj.filters
+++ /dev/null
@@ -1,46 +0,0 @@
-﻿<?xml version="1.0" encoding="utf-8"?>
-<Project ToolsVersion="4.0" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
-  <ItemGroup>
-    <Filter Include="Source Files">
-      <UniqueIdentifier>{4FC737F1-C7A5-4376-A066-2A32D752A2FF}</UniqueIdentifier>
-      <Extensions>cpp;c;cc;cxx;def;odl;idl;hpj;bat;asm;asmx</Extensions>
-    </Filter>
-    <Filter Include="Header Files">
-      <UniqueIdentifier>{93995380-89BD-4b04-88EB-625FBE52EBFB}</UniqueIdentifier>
-      <Extensions>h;hh;hpp;hxx;hm;inl;inc;xsd</Extensions>
-    </Filter>
-    <Filter Include="Resource Files">
-      <UniqueIdentifier>{67DA6AB6-F800-4c08-8B7A-83BB121AAD01}</UniqueIdentifier>
-      <Extensions>rc;ico;cur;bmp;dlg;rc2;rct;bin;rgs;gif;jpg;jpeg;jpe;resx;tiff;tif;png;wav;mfcribbon-ms</Extensions>
-    </Filter>
-  </ItemGroup>
-  <ItemGroup>
-    <ClCompile Include="main.cpp">
-      <Filter>Source Files</Filter>
-    </ClCompile>
-  </ItemGroup>
-  <ItemGroup>
-    <Library Include="lib\glui32.lib" />
-    <Library Include="lib\glut32.lib" />
-    <Library Include="lib\OPENGL32.LIB" />
-    <Library Include="lib\Glaux.lib" />
-    <Library Include="lib\GLU32.LIB" />
-  </ItemGroup>
-  <ItemGroup>
-    <ClInclude Include="include\GL\GL.H">
-      <Filter>Header Files</Filter>
-    </ClInclude>
-    <ClInclude Include="include\GL\GLAux.h">
-      <Filter>Header Files</Filter>
-    </ClInclude>
-    <ClInclude Include="include\GL\GLU.H">
-      <Filter>Header Files</Filter>
-    </ClInclude>
-    <ClInclude Include="include\GL\glui.h">
-      <Filter>Header Files</Filter>
-    </ClInclude>
-    <ClInclude Include="include\GL\glut.h">
-      <Filter>Header Files</Filter>
-    </ClInclude>
-  </ItemGroup>
-</Project>
\ No newline at end of file
diff --git a/Assignment1/Assignment1/Assignment1.vcxproj.user b/Assignment1/Assignment1/Assignment1.vcxproj.user
deleted file mode 100644
index c36dc27..0000000
--- a/Assignment1/Assignment1/Assignment1.vcxproj.user
+++ /dev/null
@@ -1,8 +0,0 @@
-﻿<?xml version="1.0" encoding="utf-8"?>
-<Project ToolsVersion="12.0" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
-  <PropertyGroup Condition="'$(Configuration)|$(Platform)'=='Debug|Win32'">
-    <LocalDebuggerEnvironment>PATH=%PATH%;$(ProjectDir)dll</LocalDebuggerEnvironment>
-    <DebuggerFlavor>WindowsLocalDebugger</DebuggerFlavor>
-    <LocalDebuggerCommandArguments>lena256.bmp</LocalDebuggerCommandArguments>
-  </PropertyGroup>
-</Project>
\ No newline at end of file
diff --git a/Assignment1/Assignment1/dll/glu32.dll b/Assignment1/Assignment1/dll/glu32.dll
deleted file mode 100644
index 6a4fb6b..0000000
Binary files a/Assignment1/Assignment1/dll/glu32.dll and /dev/null differ
diff --git a/Assignment1/Assignment1/dll/glut32.dll b/Assignment1/Assignment1/dll/glut32.dll
deleted file mode 100644
index e5703b0..0000000
Binary files a/Assignment1/Assignment1/dll/glut32.dll and /dev/null differ
diff --git a/Assignment1/Assignment1/dll/opengl32.dll b/Assignment1/Assignment1/dll/opengl32.dll
deleted file mode 100644
index 741a99f..0000000
Binary files a/Assignment1/Assignment1/dll/opengl32.dll and /dev/null differ
diff --git a/Assignment1/Assignment1/include/GL/GL.H b/Assignment1/Assignment1/include/GL/GL.H
deleted file mode 100644
index f1b50ff..0000000
--- a/Assignment1/Assignment1/include/GL/GL.H
+++ /dev/null
@@ -1,1526 +0,0 @@
-/*++ BUILD Version: 0004    // Increment this if a change has global effects
-
-Copyright (c) 1985-96, Microsoft Corporation
-
-Module Name:
-
-    gl.h
-
-Abstract:
-
-    Procedure declarations, constant definitions and macros for the OpenGL
-    component.
-
---*/
-
-#ifndef __gl_h_
-#ifndef __GL_H__
-
-#define __gl_h_
-#define __GL_H__
-
-#ifdef __cplusplus
-extern "C" {
-#endif
-
-/*
-** Copyright 1996 Silicon Graphics, Inc.
-** All Rights Reserved.
-**
-** This is UNPUBLISHED PROPRIETARY SOURCE CODE of Silicon Graphics, Inc.;
-** the contents of this file may not be disclosed to third parties, copied or
-** duplicated in any form, in whole or in part, without the prior written
-** permission of Silicon Graphics, Inc.
-**
-** RESTRICTED RIGHTS LEGEND:
-** Use, duplication or disclosure by the Government is subject to restrictions
-** as set forth in subdivision (c)(1)(ii) of the Rights in Technical Data
-** and Computer Software clause at DFARS 252.227-7013, and/or in similar or
-** successor clauses in the FAR, DOD or NASA FAR Supplement. Unpublished -
-** rights reserved under the Copyright Laws of the United States.
-*/
-
-typedef unsigned int GLenum;
-typedef unsigned char GLboolean;
-typedef unsigned int GLbitfield;
-typedef signed char GLbyte;
-typedef short GLshort;
-typedef int GLint;
-typedef int GLsizei;
-typedef unsigned char GLubyte;
-typedef unsigned short GLushort;
-typedef unsigned int GLuint;
-typedef float GLfloat;
-typedef float GLclampf;
-typedef double GLdouble;
-typedef double GLclampd;
-typedef void GLvoid;
-
-/*************************************************************/
-
-/* Version */
-#define GL_VERSION_1_1                    1
-
-/* AccumOp */
-#define GL_ACCUM                          0x0100
-#define GL_LOAD                           0x0101
-#define GL_RETURN                         0x0102
-#define GL_MULT                           0x0103
-#define GL_ADD                            0x0104
-
-/* AlphaFunction */
-#define GL_NEVER                          0x0200
-#define GL_LESS                           0x0201
-#define GL_EQUAL                          0x0202
-#define GL_LEQUAL                         0x0203
-#define GL_GREATER                        0x0204
-#define GL_NOTEQUAL                       0x0205
-#define GL_GEQUAL                         0x0206
-#define GL_ALWAYS                         0x0207
-
-/* AttribMask */
-#define GL_CURRENT_BIT                    0x00000001
-#define GL_POINT_BIT                      0x00000002
-#define GL_LINE_BIT                       0x00000004
-#define GL_POLYGON_BIT                    0x00000008
-#define GL_POLYGON_STIPPLE_BIT            0x00000010
-#define GL_PIXEL_MODE_BIT                 0x00000020
-#define GL_LIGHTING_BIT                   0x00000040
-#define GL_FOG_BIT                        0x00000080
-#define GL_DEPTH_BUFFER_BIT               0x00000100
-#define GL_ACCUM_BUFFER_BIT               0x00000200
-#define GL_STENCIL_BUFFER_BIT             0x00000400
-#define GL_VIEWPORT_BIT                   0x00000800
-#define GL_TRANSFORM_BIT                  0x00001000
-#define GL_ENABLE_BIT                     0x00002000
-#define GL_COLOR_BUFFER_BIT               0x00004000
-#define GL_HINT_BIT                       0x00008000
-#define GL_EVAL_BIT                       0x00010000
-#define GL_LIST_BIT                       0x00020000
-#define GL_TEXTURE_BIT                    0x00040000
-#define GL_SCISSOR_BIT                    0x00080000
-#define GL_ALL_ATTRIB_BITS                0x000fffff
-
-/* BeginMode */
-#define GL_POINTS                         0x0000
-#define GL_LINES                          0x0001
-#define GL_LINE_LOOP                      0x0002
-#define GL_LINE_STRIP                     0x0003
-#define GL_TRIANGLES                      0x0004
-#define GL_TRIANGLE_STRIP                 0x0005
-#define GL_TRIANGLE_FAN                   0x0006
-#define GL_QUADS                          0x0007
-#define GL_QUAD_STRIP                     0x0008
-#define GL_POLYGON                        0x0009
-
-/* BlendingFactorDest */
-#define GL_ZERO                           0
-#define GL_ONE                            1
-#define GL_SRC_COLOR                      0x0300
-#define GL_ONE_MINUS_SRC_COLOR            0x0301
-#define GL_SRC_ALPHA                      0x0302
-#define GL_ONE_MINUS_SRC_ALPHA            0x0303
-#define GL_DST_ALPHA                      0x0304
-#define GL_ONE_MINUS_DST_ALPHA            0x0305
-
-/* BlendingFactorSrc */
-/*      GL_ZERO */
-/*      GL_ONE */
-#define GL_DST_COLOR                      0x0306
-#define GL_ONE_MINUS_DST_COLOR            0x0307
-#define GL_SRC_ALPHA_SATURATE             0x0308
-/*      GL_SRC_ALPHA */
-/*      GL_ONE_MINUS_SRC_ALPHA */
-/*      GL_DST_ALPHA */
-/*      GL_ONE_MINUS_DST_ALPHA */
-
-/* Boolean */
-#define GL_TRUE                           1
-#define GL_FALSE                          0
-
-/* ClearBufferMask */
-/*      GL_COLOR_BUFFER_BIT */
-/*      GL_ACCUM_BUFFER_BIT */
-/*      GL_STENCIL_BUFFER_BIT */
-/*      GL_DEPTH_BUFFER_BIT */
-
-/* ClientArrayType */
-/*      GL_VERTEX_ARRAY */
-/*      GL_NORMAL_ARRAY */
-/*      GL_COLOR_ARRAY */
-/*      GL_INDEX_ARRAY */
-/*      GL_TEXTURE_COORD_ARRAY */
-/*      GL_EDGE_FLAG_ARRAY */
-
-/* ClipPlaneName */
-#define GL_CLIP_PLANE0                    0x3000
-#define GL_CLIP_PLANE1                    0x3001
-#define GL_CLIP_PLANE2                    0x3002
-#define GL_CLIP_PLANE3                    0x3003
-#define GL_CLIP_PLANE4                    0x3004
-#define GL_CLIP_PLANE5                    0x3005
-
-/* ColorMaterialFace */
-/*      GL_FRONT */
-/*      GL_BACK */
-/*      GL_FRONT_AND_BACK */
-
-/* ColorMaterialParameter */
-/*      GL_AMBIENT */
-/*      GL_DIFFUSE */
-/*      GL_SPECULAR */
-/*      GL_EMISSION */
-/*      GL_AMBIENT_AND_DIFFUSE */
-
-/* ColorPointerType */
-/*      GL_BYTE */
-/*      GL_UNSIGNED_BYTE */
-/*      GL_SHORT */
-/*      GL_UNSIGNED_SHORT */
-/*      GL_INT */
-/*      GL_UNSIGNED_INT */
-/*      GL_FLOAT */
-/*      GL_DOUBLE */
-
-/* CullFaceMode */
-/*      GL_FRONT */
-/*      GL_BACK */
-/*      GL_FRONT_AND_BACK */
-
-/* DataType */
-#define GL_BYTE                           0x1400
-#define GL_UNSIGNED_BYTE                  0x1401
-#define GL_SHORT                          0x1402
-#define GL_UNSIGNED_SHORT                 0x1403
-#define GL_INT                            0x1404
-#define GL_UNSIGNED_INT                   0x1405
-#define GL_FLOAT                          0x1406
-#define GL_2_BYTES                        0x1407
-#define GL_3_BYTES                        0x1408
-#define GL_4_BYTES                        0x1409
-#define GL_DOUBLE                         0x140A
-
-/* DepthFunction */
-/*      GL_NEVER */
-/*      GL_LESS */
-/*      GL_EQUAL */
-/*      GL_LEQUAL */
-/*      GL_GREATER */
-/*      GL_NOTEQUAL */
-/*      GL_GEQUAL */
-/*      GL_ALWAYS */
-
-/* DrawBufferMode */
-#define GL_NONE                           0
-#define GL_FRONT_LEFT                     0x0400
-#define GL_FRONT_RIGHT                    0x0401
-#define GL_BACK_LEFT                      0x0402
-#define GL_BACK_RIGHT                     0x0403
-#define GL_FRONT                          0x0404
-#define GL_BACK                           0x0405
-#define GL_LEFT                           0x0406
-#define GL_RIGHT                          0x0407
-#define GL_FRONT_AND_BACK                 0x0408
-#define GL_AUX0                           0x0409
-#define GL_AUX1                           0x040A
-#define GL_AUX2                           0x040B
-#define GL_AUX3                           0x040C
-
-/* Enable */
-/*      GL_FOG */
-/*      GL_LIGHTING */
-/*      GL_TEXTURE_1D */
-/*      GL_TEXTURE_2D */
-/*      GL_LINE_STIPPLE */
-/*      GL_POLYGON_STIPPLE */
-/*      GL_CULL_FACE */
-/*      GL_ALPHA_TEST */
-/*      GL_BLEND */
-/*      GL_INDEX_LOGIC_OP */
-/*      GL_COLOR_LOGIC_OP */
-/*      GL_DITHER */
-/*      GL_STENCIL_TEST */
-/*      GL_DEPTH_TEST */
-/*      GL_CLIP_PLANE0 */
-/*      GL_CLIP_PLANE1 */
-/*      GL_CLIP_PLANE2 */
-/*      GL_CLIP_PLANE3 */
-/*      GL_CLIP_PLANE4 */
-/*      GL_CLIP_PLANE5 */
-/*      GL_LIGHT0 */
-/*      GL_LIGHT1 */
-/*      GL_LIGHT2 */
-/*      GL_LIGHT3 */
-/*      GL_LIGHT4 */
-/*      GL_LIGHT5 */
-/*      GL_LIGHT6 */
-/*      GL_LIGHT7 */
-/*      GL_TEXTURE_GEN_S */
-/*      GL_TEXTURE_GEN_T */
-/*      GL_TEXTURE_GEN_R */
-/*      GL_TEXTURE_GEN_Q */
-/*      GL_MAP1_VERTEX_3 */
-/*      GL_MAP1_VERTEX_4 */
-/*      GL_MAP1_COLOR_4 */
-/*      GL_MAP1_INDEX */
-/*      GL_MAP1_NORMAL */
-/*      GL_MAP1_TEXTURE_COORD_1 */
-/*      GL_MAP1_TEXTURE_COORD_2 */
-/*      GL_MAP1_TEXTURE_COORD_3 */
-/*      GL_MAP1_TEXTURE_COORD_4 */
-/*      GL_MAP2_VERTEX_3 */
-/*      GL_MAP2_VERTEX_4 */
-/*      GL_MAP2_COLOR_4 */
-/*      GL_MAP2_INDEX */
-/*      GL_MAP2_NORMAL */
-/*      GL_MAP2_TEXTURE_COORD_1 */
-/*      GL_MAP2_TEXTURE_COORD_2 */
-/*      GL_MAP2_TEXTURE_COORD_3 */
-/*      GL_MAP2_TEXTURE_COORD_4 */
-/*      GL_POINT_SMOOTH */
-/*      GL_LINE_SMOOTH */
-/*      GL_POLYGON_SMOOTH */
-/*      GL_SCISSOR_TEST */
-/*      GL_COLOR_MATERIAL */
-/*      GL_NORMALIZE */
-/*      GL_AUTO_NORMAL */
-/*      GL_VERTEX_ARRAY */
-/*      GL_NORMAL_ARRAY */
-/*      GL_COLOR_ARRAY */
-/*      GL_INDEX_ARRAY */
-/*      GL_TEXTURE_COORD_ARRAY */
-/*      GL_EDGE_FLAG_ARRAY */
-/*      GL_POLYGON_OFFSET_POINT */
-/*      GL_POLYGON_OFFSET_LINE */
-/*      GL_POLYGON_OFFSET_FILL */
-
-/* ErrorCode */
-#define GL_NO_ERROR                       0
-#define GL_INVALID_ENUM                   0x0500
-#define GL_INVALID_VALUE                  0x0501
-#define GL_INVALID_OPERATION              0x0502
-#define GL_STACK_OVERFLOW                 0x0503
-#define GL_STACK_UNDERFLOW                0x0504
-#define GL_OUT_OF_MEMORY                  0x0505
-
-/* FeedBackMode */
-#define GL_2D                             0x0600
-#define GL_3D                             0x0601
-#define GL_3D_COLOR                       0x0602
-#define GL_3D_COLOR_TEXTURE               0x0603
-#define GL_4D_COLOR_TEXTURE               0x0604
-
-/* FeedBackToken */
-#define GL_PASS_THROUGH_TOKEN             0x0700
-#define GL_POINT_TOKEN                    0x0701
-#define GL_LINE_TOKEN                     0x0702
-#define GL_POLYGON_TOKEN                  0x0703
-#define GL_BITMAP_TOKEN                   0x0704
-#define GL_DRAW_PIXEL_TOKEN               0x0705
-#define GL_COPY_PIXEL_TOKEN               0x0706
-#define GL_LINE_RESET_TOKEN               0x0707
-
-/* FogMode */
-/*      GL_LINEAR */
-#define GL_EXP                            0x0800
-#define GL_EXP2                           0x0801
-
-
-/* FogParameter */
-/*      GL_FOG_COLOR */
-/*      GL_FOG_DENSITY */
-/*      GL_FOG_END */
-/*      GL_FOG_INDEX */
-/*      GL_FOG_MODE */
-/*      GL_FOG_START */
-
-/* FrontFaceDirection */
-#define GL_CW                             0x0900
-#define GL_CCW                            0x0901
-
-/* GetMapTarget */
-#define GL_COEFF                          0x0A00
-#define GL_ORDER                          0x0A01
-#define GL_DOMAIN                         0x0A02
-
-/* GetPixelMap */
-/*      GL_PIXEL_MAP_I_TO_I */
-/*      GL_PIXEL_MAP_S_TO_S */
-/*      GL_PIXEL_MAP_I_TO_R */
-/*      GL_PIXEL_MAP_I_TO_G */
-/*      GL_PIXEL_MAP_I_TO_B */
-/*      GL_PIXEL_MAP_I_TO_A */
-/*      GL_PIXEL_MAP_R_TO_R */
-/*      GL_PIXEL_MAP_G_TO_G */
-/*      GL_PIXEL_MAP_B_TO_B */
-/*      GL_PIXEL_MAP_A_TO_A */
-
-/* GetPointerTarget */
-/*      GL_VERTEX_ARRAY_POINTER */
-/*      GL_NORMAL_ARRAY_POINTER */
-/*      GL_COLOR_ARRAY_POINTER */
-/*      GL_INDEX_ARRAY_POINTER */
-/*      GL_TEXTURE_COORD_ARRAY_POINTER */
-/*      GL_EDGE_FLAG_ARRAY_POINTER */
-
-/* GetTarget */
-#define GL_CURRENT_COLOR                  0x0B00
-#define GL_CURRENT_INDEX                  0x0B01
-#define GL_CURRENT_NORMAL                 0x0B02
-#define GL_CURRENT_TEXTURE_COORDS         0x0B03
-#define GL_CURRENT_RASTER_COLOR           0x0B04
-#define GL_CURRENT_RASTER_INDEX           0x0B05
-#define GL_CURRENT_RASTER_TEXTURE_COORDS  0x0B06
-#define GL_CURRENT_RASTER_POSITION        0x0B07
-#define GL_CURRENT_RASTER_POSITION_VALID  0x0B08
-#define GL_CURRENT_RASTER_DISTANCE        0x0B09
-#define GL_POINT_SMOOTH                   0x0B10
-#define GL_POINT_SIZE                     0x0B11
-#define GL_POINT_SIZE_RANGE               0x0B12
-#define GL_POINT_SIZE_GRANULARITY         0x0B13
-#define GL_LINE_SMOOTH                    0x0B20
-#define GL_LINE_WIDTH                     0x0B21
-#define GL_LINE_WIDTH_RANGE               0x0B22
-#define GL_LINE_WIDTH_GRANULARITY         0x0B23
-#define GL_LINE_STIPPLE                   0x0B24
-#define GL_LINE_STIPPLE_PATTERN           0x0B25
-#define GL_LINE_STIPPLE_REPEAT            0x0B26
-#define GL_LIST_MODE                      0x0B30
-#define GL_MAX_LIST_NESTING               0x0B31
-#define GL_LIST_BASE                      0x0B32
-#define GL_LIST_INDEX                     0x0B33
-#define GL_POLYGON_MODE                   0x0B40
-#define GL_POLYGON_SMOOTH                 0x0B41
-#define GL_POLYGON_STIPPLE                0x0B42
-#define GL_EDGE_FLAG                      0x0B43
-#define GL_CULL_FACE                      0x0B44
-#define GL_CULL_FACE_MODE                 0x0B45
-#define GL_FRONT_FACE                     0x0B46
-#define GL_LIGHTING                       0x0B50
-#define GL_LIGHT_MODEL_LOCAL_VIEWER       0x0B51
-#define GL_LIGHT_MODEL_TWO_SIDE           0x0B52
-#define GL_LIGHT_MODEL_AMBIENT            0x0B53
-#define GL_SHADE_MODEL                    0x0B54
-#define GL_COLOR_MATERIAL_FACE            0x0B55
-#define GL_COLOR_MATERIAL_PARAMETER       0x0B56
-#define GL_COLOR_MATERIAL                 0x0B57
-#define GL_FOG                            0x0B60
-#define GL_FOG_INDEX                      0x0B61
-#define GL_FOG_DENSITY                    0x0B62
-#define GL_FOG_START                      0x0B63
-#define GL_FOG_END                        0x0B64
-#define GL_FOG_MODE                       0x0B65
-#define GL_FOG_COLOR                      0x0B66
-#define GL_DEPTH_RANGE                    0x0B70
-#define GL_DEPTH_TEST                     0x0B71
-#define GL_DEPTH_WRITEMASK                0x0B72
-#define GL_DEPTH_CLEAR_VALUE              0x0B73
-#define GL_DEPTH_FUNC                     0x0B74
-#define GL_ACCUM_CLEAR_VALUE              0x0B80
-#define GL_STENCIL_TEST                   0x0B90
-#define GL_STENCIL_CLEAR_VALUE            0x0B91
-#define GL_STENCIL_FUNC                   0x0B92
-#define GL_STENCIL_VALUE_MASK             0x0B93
-#define GL_STENCIL_FAIL                   0x0B94
-#define GL_STENCIL_PASS_DEPTH_FAIL        0x0B95
-#define GL_STENCIL_PASS_DEPTH_PASS        0x0B96
-#define GL_STENCIL_REF                    0x0B97
-#define GL_STENCIL_WRITEMASK              0x0B98
-#define GL_MATRIX_MODE                    0x0BA0
-#define GL_NORMALIZE                      0x0BA1
-#define GL_VIEWPORT                       0x0BA2
-#define GL_MODELVIEW_STACK_DEPTH          0x0BA3
-#define GL_PROJECTION_STACK_DEPTH         0x0BA4
-#define GL_TEXTURE_STACK_DEPTH            0x0BA5
-#define GL_MODELVIEW_MATRIX               0x0BA6
-#define GL_PROJECTION_MATRIX              0x0BA7
-#define GL_TEXTURE_MATRIX                 0x0BA8
-#define GL_ATTRIB_STACK_DEPTH             0x0BB0
-#define GL_CLIENT_ATTRIB_STACK_DEPTH      0x0BB1
-#define GL_ALPHA_TEST                     0x0BC0
-#define GL_ALPHA_TEST_FUNC                0x0BC1
-#define GL_ALPHA_TEST_REF                 0x0BC2
-#define GL_DITHER                         0x0BD0
-#define GL_BLEND_DST                      0x0BE0
-#define GL_BLEND_SRC                      0x0BE1
-#define GL_BLEND                          0x0BE2
-#define GL_LOGIC_OP_MODE                  0x0BF0
-#define GL_INDEX_LOGIC_OP                 0x0BF1
-#define GL_COLOR_LOGIC_OP                 0x0BF2
-#define GL_AUX_BUFFERS                    0x0C00
-#define GL_DRAW_BUFFER                    0x0C01
-#define GL_READ_BUFFER                    0x0C02
-#define GL_SCISSOR_BOX                    0x0C10
-#define GL_SCISSOR_TEST                   0x0C11
-#define GL_INDEX_CLEAR_VALUE              0x0C20
-#define GL_INDEX_WRITEMASK                0x0C21
-#define GL_COLOR_CLEAR_VALUE              0x0C22
-#define GL_COLOR_WRITEMASK                0x0C23
-#define GL_INDEX_MODE                     0x0C30
-#define GL_RGBA_MODE                      0x0C31
-#define GL_DOUBLEBUFFER                   0x0C32
-#define GL_STEREO                         0x0C33
-#define GL_RENDER_MODE                    0x0C40
-#define GL_PERSPECTIVE_CORRECTION_HINT    0x0C50
-#define GL_POINT_SMOOTH_HINT              0x0C51
-#define GL_LINE_SMOOTH_HINT               0x0C52
-#define GL_POLYGON_SMOOTH_HINT            0x0C53
-#define GL_FOG_HINT                       0x0C54
-#define GL_TEXTURE_GEN_S                  0x0C60
-#define GL_TEXTURE_GEN_T                  0x0C61
-#define GL_TEXTURE_GEN_R                  0x0C62
-#define GL_TEXTURE_GEN_Q                  0x0C63
-#define GL_PIXEL_MAP_I_TO_I               0x0C70
-#define GL_PIXEL_MAP_S_TO_S               0x0C71
-#define GL_PIXEL_MAP_I_TO_R               0x0C72
-#define GL_PIXEL_MAP_I_TO_G               0x0C73
-#define GL_PIXEL_MAP_I_TO_B               0x0C74
-#define GL_PIXEL_MAP_I_TO_A               0x0C75
-#define GL_PIXEL_MAP_R_TO_R               0x0C76
-#define GL_PIXEL_MAP_G_TO_G               0x0C77
-#define GL_PIXEL_MAP_B_TO_B               0x0C78
-#define GL_PIXEL_MAP_A_TO_A               0x0C79
-#define GL_PIXEL_MAP_I_TO_I_SIZE          0x0CB0
-#define GL_PIXEL_MAP_S_TO_S_SIZE          0x0CB1
-#define GL_PIXEL_MAP_I_TO_R_SIZE          0x0CB2
-#define GL_PIXEL_MAP_I_TO_G_SIZE          0x0CB3
-#define GL_PIXEL_MAP_I_TO_B_SIZE          0x0CB4
-#define GL_PIXEL_MAP_I_TO_A_SIZE          0x0CB5
-#define GL_PIXEL_MAP_R_TO_R_SIZE          0x0CB6
-#define GL_PIXEL_MAP_G_TO_G_SIZE          0x0CB7
-#define GL_PIXEL_MAP_B_TO_B_SIZE          0x0CB8
-#define GL_PIXEL_MAP_A_TO_A_SIZE          0x0CB9
-#define GL_UNPACK_SWAP_BYTES              0x0CF0
-#define GL_UNPACK_LSB_FIRST               0x0CF1
-#define GL_UNPACK_ROW_LENGTH              0x0CF2
-#define GL_UNPACK_SKIP_ROWS               0x0CF3
-#define GL_UNPACK_SKIP_PIXELS             0x0CF4
-#define GL_UNPACK_ALIGNMENT               0x0CF5
-#define GL_PACK_SWAP_BYTES                0x0D00
-#define GL_PACK_LSB_FIRST                 0x0D01
-#define GL_PACK_ROW_LENGTH                0x0D02
-#define GL_PACK_SKIP_ROWS                 0x0D03
-#define GL_PACK_SKIP_PIXELS               0x0D04
-#define GL_PACK_ALIGNMENT                 0x0D05
-#define GL_MAP_COLOR                      0x0D10
-#define GL_MAP_STENCIL                    0x0D11
-#define GL_INDEX_SHIFT                    0x0D12
-#define GL_INDEX_OFFSET                   0x0D13
-#define GL_RED_SCALE                      0x0D14
-#define GL_RED_BIAS                       0x0D15
-#define GL_ZOOM_X                         0x0D16
-#define GL_ZOOM_Y                         0x0D17
-#define GL_GREEN_SCALE                    0x0D18
-#define GL_GREEN_BIAS                     0x0D19
-#define GL_BLUE_SCALE                     0x0D1A
-#define GL_BLUE_BIAS                      0x0D1B
-#define GL_ALPHA_SCALE                    0x0D1C
-#define GL_ALPHA_BIAS                     0x0D1D
-#define GL_DEPTH_SCALE                    0x0D1E
-#define GL_DEPTH_BIAS                     0x0D1F
-#define GL_MAX_EVAL_ORDER                 0x0D30
-#define GL_MAX_LIGHTS                     0x0D31
-#define GL_MAX_CLIP_PLANES                0x0D32
-#define GL_MAX_TEXTURE_SIZE               0x0D33
-#define GL_MAX_PIXEL_MAP_TABLE            0x0D34
-#define GL_MAX_ATTRIB_STACK_DEPTH         0x0D35
-#define GL_MAX_MODELVIEW_STACK_DEPTH      0x0D36
-#define GL_MAX_NAME_STACK_DEPTH           0x0D37
-#define GL_MAX_PROJECTION_STACK_DEPTH     0x0D38
-#define GL_MAX_TEXTURE_STACK_DEPTH        0x0D39
-#define GL_MAX_VIEWPORT_DIMS              0x0D3A
-#define GL_MAX_CLIENT_ATTRIB_STACK_DEPTH  0x0D3B
-#define GL_SUBPIXEL_BITS                  0x0D50
-#define GL_INDEX_BITS                     0x0D51
-#define GL_RED_BITS                       0x0D52
-#define GL_GREEN_BITS                     0x0D53
-#define GL_BLUE_BITS                      0x0D54
-#define GL_ALPHA_BITS                     0x0D55
-#define GL_DEPTH_BITS                     0x0D56
-#define GL_STENCIL_BITS                   0x0D57
-#define GL_ACCUM_RED_BITS                 0x0D58
-#define GL_ACCUM_GREEN_BITS               0x0D59
-#define GL_ACCUM_BLUE_BITS                0x0D5A
-#define GL_ACCUM_ALPHA_BITS               0x0D5B
-#define GL_NAME_STACK_DEPTH               0x0D70
-#define GL_AUTO_NORMAL                    0x0D80
-#define GL_MAP1_COLOR_4                   0x0D90
-#define GL_MAP1_INDEX                     0x0D91
-#define GL_MAP1_NORMAL                    0x0D92
-#define GL_MAP1_TEXTURE_COORD_1           0x0D93
-#define GL_MAP1_TEXTURE_COORD_2           0x0D94
-#define GL_MAP1_TEXTURE_COORD_3           0x0D95
-#define GL_MAP1_TEXTURE_COORD_4           0x0D96
-#define GL_MAP1_VERTEX_3                  0x0D97
-#define GL_MAP1_VERTEX_4                  0x0D98
-#define GL_MAP2_COLOR_4                   0x0DB0
-#define GL_MAP2_INDEX                     0x0DB1
-#define GL_MAP2_NORMAL                    0x0DB2
-#define GL_MAP2_TEXTURE_COORD_1           0x0DB3
-#define GL_MAP2_TEXTURE_COORD_2           0x0DB4
-#define GL_MAP2_TEXTURE_COORD_3           0x0DB5
-#define GL_MAP2_TEXTURE_COORD_4           0x0DB6
-#define GL_MAP2_VERTEX_3                  0x0DB7
-#define GL_MAP2_VERTEX_4                  0x0DB8
-#define GL_MAP1_GRID_DOMAIN               0x0DD0
-#define GL_MAP1_GRID_SEGMENTS             0x0DD1
-#define GL_MAP2_GRID_DOMAIN               0x0DD2
-#define GL_MAP2_GRID_SEGMENTS             0x0DD3
-#define GL_TEXTURE_1D                     0x0DE0
-#define GL_TEXTURE_2D                     0x0DE1
-#define GL_FEEDBACK_BUFFER_POINTER        0x0DF0
-#define GL_FEEDBACK_BUFFER_SIZE           0x0DF1
-#define GL_FEEDBACK_BUFFER_TYPE           0x0DF2
-#define GL_SELECTION_BUFFER_POINTER       0x0DF3
-#define GL_SELECTION_BUFFER_SIZE          0x0DF4
-/*      GL_TEXTURE_BINDING_1D */
-/*      GL_TEXTURE_BINDING_2D */
-/*      GL_VERTEX_ARRAY */
-/*      GL_NORMAL_ARRAY */
-/*      GL_COLOR_ARRAY */
-/*      GL_INDEX_ARRAY */
-/*      GL_TEXTURE_COORD_ARRAY */
-/*      GL_EDGE_FLAG_ARRAY */
-/*      GL_VERTEX_ARRAY_SIZE */
-/*      GL_VERTEX_ARRAY_TYPE */
-/*      GL_VERTEX_ARRAY_STRIDE */
-/*      GL_NORMAL_ARRAY_TYPE */
-/*      GL_NORMAL_ARRAY_STRIDE */
-/*      GL_COLOR_ARRAY_SIZE */
-/*      GL_COLOR_ARRAY_TYPE */
-/*      GL_COLOR_ARRAY_STRIDE */
-/*      GL_INDEX_ARRAY_TYPE */
-/*      GL_INDEX_ARRAY_STRIDE */
-/*      GL_TEXTURE_COORD_ARRAY_SIZE */
-/*      GL_TEXTURE_COORD_ARRAY_TYPE */
-/*      GL_TEXTURE_COORD_ARRAY_STRIDE */
-/*      GL_EDGE_FLAG_ARRAY_STRIDE */
-/*      GL_POLYGON_OFFSET_FACTOR */
-/*      GL_POLYGON_OFFSET_UNITS */
-
-/* GetTextureParameter */
-/*      GL_TEXTURE_MAG_FILTER */
-/*      GL_TEXTURE_MIN_FILTER */
-/*      GL_TEXTURE_WRAP_S */
-/*      GL_TEXTURE_WRAP_T */
-#define GL_TEXTURE_WIDTH                  0x1000
-#define GL_TEXTURE_HEIGHT                 0x1001
-#define GL_TEXTURE_INTERNAL_FORMAT        0x1003
-#define GL_TEXTURE_BORDER_COLOR           0x1004
-#define GL_TEXTURE_BORDER                 0x1005
-/*      GL_TEXTURE_RED_SIZE */
-/*      GL_TEXTURE_GREEN_SIZE */
-/*      GL_TEXTURE_BLUE_SIZE */
-/*      GL_TEXTURE_ALPHA_SIZE */
-/*      GL_TEXTURE_LUMINANCE_SIZE */
-/*      GL_TEXTURE_INTENSITY_SIZE */
-/*      GL_TEXTURE_PRIORITY */
-/*      GL_TEXTURE_RESIDENT */
-
-/* HintMode */
-#define GL_DONT_CARE                      0x1100
-#define GL_FASTEST                        0x1101
-#define GL_NICEST                         0x1102
-
-/* HintTarget */
-/*      GL_PERSPECTIVE_CORRECTION_HINT */
-/*      GL_POINT_SMOOTH_HINT */
-/*      GL_LINE_SMOOTH_HINT */
-/*      GL_POLYGON_SMOOTH_HINT */
-/*      GL_FOG_HINT */
-/*      GL_PHONG_HINT */
-
-/* IndexPointerType */
-/*      GL_SHORT */
-/*      GL_INT */
-/*      GL_FLOAT */
-/*      GL_DOUBLE */
-
-/* LightModelParameter */
-/*      GL_LIGHT_MODEL_AMBIENT */
-/*      GL_LIGHT_MODEL_LOCAL_VIEWER */
-/*      GL_LIGHT_MODEL_TWO_SIDE */
-
-/* LightName */
-#define GL_LIGHT0                         0x4000
-#define GL_LIGHT1                         0x4001
-#define GL_LIGHT2                         0x4002
-#define GL_LIGHT3                         0x4003
-#define GL_LIGHT4                         0x4004
-#define GL_LIGHT5                         0x4005
-#define GL_LIGHT6                         0x4006
-#define GL_LIGHT7                         0x4007
-
-/* LightParameter */
-#define GL_AMBIENT                        0x1200
-#define GL_DIFFUSE                        0x1201
-#define GL_SPECULAR                       0x1202
-#define GL_POSITION                       0x1203
-#define GL_SPOT_DIRECTION                 0x1204
-#define GL_SPOT_EXPONENT                  0x1205
-#define GL_SPOT_CUTOFF                    0x1206
-#define GL_CONSTANT_ATTENUATION           0x1207
-#define GL_LINEAR_ATTENUATION             0x1208
-#define GL_QUADRATIC_ATTENUATION          0x1209
-
-/* InterleavedArrays */
-/*      GL_V2F */
-/*      GL_V3F */
-/*      GL_C4UB_V2F */
-/*      GL_C4UB_V3F */
-/*      GL_C3F_V3F */
-/*      GL_N3F_V3F */
-/*      GL_C4F_N3F_V3F */
-/*      GL_T2F_V3F */
-/*      GL_T4F_V4F */
-/*      GL_T2F_C4UB_V3F */
-/*      GL_T2F_C3F_V3F */
-/*      GL_T2F_N3F_V3F */
-/*      GL_T2F_C4F_N3F_V3F */
-/*      GL_T4F_C4F_N3F_V4F */
-
-/* ListMode */
-#define GL_COMPILE                        0x1300
-#define GL_COMPILE_AND_EXECUTE            0x1301
-
-/* ListNameType */
-/*      GL_BYTE */
-/*      GL_UNSIGNED_BYTE */
-/*      GL_SHORT */
-/*      GL_UNSIGNED_SHORT */
-/*      GL_INT */
-/*      GL_UNSIGNED_INT */
-/*      GL_FLOAT */
-/*      GL_2_BYTES */
-/*      GL_3_BYTES */
-/*      GL_4_BYTES */
-
-/* LogicOp */
-#define GL_CLEAR                          0x1500
-#define GL_AND                            0x1501
-#define GL_AND_REVERSE                    0x1502
-#define GL_COPY                           0x1503
-#define GL_AND_INVERTED                   0x1504
-#define GL_NOOP                           0x1505
-#define GL_XOR                            0x1506
-#define GL_OR                             0x1507
-#define GL_NOR                            0x1508
-#define GL_EQUIV                          0x1509
-#define GL_INVERT                         0x150A
-#define GL_OR_REVERSE                     0x150B
-#define GL_COPY_INVERTED                  0x150C
-#define GL_OR_INVERTED                    0x150D
-#define GL_NAND                           0x150E
-#define GL_SET                            0x150F
-
-/* MapTarget */
-/*      GL_MAP1_COLOR_4 */
-/*      GL_MAP1_INDEX */
-/*      GL_MAP1_NORMAL */
-/*      GL_MAP1_TEXTURE_COORD_1 */
-/*      GL_MAP1_TEXTURE_COORD_2 */
-/*      GL_MAP1_TEXTURE_COORD_3 */
-/*      GL_MAP1_TEXTURE_COORD_4 */
-/*      GL_MAP1_VERTEX_3 */
-/*      GL_MAP1_VERTEX_4 */
-/*      GL_MAP2_COLOR_4 */
-/*      GL_MAP2_INDEX */
-/*      GL_MAP2_NORMAL */
-/*      GL_MAP2_TEXTURE_COORD_1 */
-/*      GL_MAP2_TEXTURE_COORD_2 */
-/*      GL_MAP2_TEXTURE_COORD_3 */
-/*      GL_MAP2_TEXTURE_COORD_4 */
-/*      GL_MAP2_VERTEX_3 */
-/*      GL_MAP2_VERTEX_4 */
-
-/* MaterialFace */
-/*      GL_FRONT */
-/*      GL_BACK */
-/*      GL_FRONT_AND_BACK */
-
-/* MaterialParameter */
-#define GL_EMISSION                       0x1600
-#define GL_SHININESS                      0x1601
-#define GL_AMBIENT_AND_DIFFUSE            0x1602
-#define GL_COLOR_INDEXES                  0x1603
-/*      GL_AMBIENT */
-/*      GL_DIFFUSE */
-/*      GL_SPECULAR */
-
-/* MatrixMode */
-#define GL_MODELVIEW                      0x1700
-#define GL_PROJECTION                     0x1701
-#define GL_TEXTURE                        0x1702
-
-/* MeshMode1 */
-/*      GL_POINT */
-/*      GL_LINE */
-
-/* MeshMode2 */
-/*      GL_POINT */
-/*      GL_LINE */
-/*      GL_FILL */
-
-/* NormalPointerType */
-/*      GL_BYTE */
-/*      GL_SHORT */
-/*      GL_INT */
-/*      GL_FLOAT */
-/*      GL_DOUBLE */
-
-/* PixelCopyType */
-#define GL_COLOR                          0x1800
-#define GL_DEPTH                          0x1801
-#define GL_STENCIL                        0x1802
-
-/* PixelFormat */
-#define GL_COLOR_INDEX                    0x1900
-#define GL_STENCIL_INDEX                  0x1901
-#define GL_DEPTH_COMPONENT                0x1902
-#define GL_RED                            0x1903
-#define GL_GREEN                          0x1904
-#define GL_BLUE                           0x1905
-#define GL_ALPHA                          0x1906
-#define GL_RGB                            0x1907
-#define GL_RGBA                           0x1908
-#define GL_LUMINANCE                      0x1909
-#define GL_LUMINANCE_ALPHA                0x190A
-
-/* PixelMap */
-/*      GL_PIXEL_MAP_I_TO_I */
-/*      GL_PIXEL_MAP_S_TO_S */
-/*      GL_PIXEL_MAP_I_TO_R */
-/*      GL_PIXEL_MAP_I_TO_G */
-/*      GL_PIXEL_MAP_I_TO_B */
-/*      GL_PIXEL_MAP_I_TO_A */
-/*      GL_PIXEL_MAP_R_TO_R */
-/*      GL_PIXEL_MAP_G_TO_G */
-/*      GL_PIXEL_MAP_B_TO_B */
-/*      GL_PIXEL_MAP_A_TO_A */
-
-/* PixelStore */
-/*      GL_UNPACK_SWAP_BYTES */
-/*      GL_UNPACK_LSB_FIRST */
-/*      GL_UNPACK_ROW_LENGTH */
-/*      GL_UNPACK_SKIP_ROWS */
-/*      GL_UNPACK_SKIP_PIXELS */
-/*      GL_UNPACK_ALIGNMENT */
-/*      GL_PACK_SWAP_BYTES */
-/*      GL_PACK_LSB_FIRST */
-/*      GL_PACK_ROW_LENGTH */
-/*      GL_PACK_SKIP_ROWS */
-/*      GL_PACK_SKIP_PIXELS */
-/*      GL_PACK_ALIGNMENT */
-
-/* PixelTransfer */
-/*      GL_MAP_COLOR */
-/*      GL_MAP_STENCIL */
-/*      GL_INDEX_SHIFT */
-/*      GL_INDEX_OFFSET */
-/*      GL_RED_SCALE */
-/*      GL_RED_BIAS */
-/*      GL_GREEN_SCALE */
-/*      GL_GREEN_BIAS */
-/*      GL_BLUE_SCALE */
-/*      GL_BLUE_BIAS */
-/*      GL_ALPHA_SCALE */
-/*      GL_ALPHA_BIAS */
-/*      GL_DEPTH_SCALE */
-/*      GL_DEPTH_BIAS */
-
-/* PixelType */
-#define GL_BITMAP                         0x1A00
-/*      GL_BYTE */
-/*      GL_UNSIGNED_BYTE */
-/*      GL_SHORT */
-/*      GL_UNSIGNED_SHORT */
-/*      GL_INT */
-/*      GL_UNSIGNED_INT */
-/*      GL_FLOAT */
-
-/* PolygonMode */
-#define GL_POINT                          0x1B00
-#define GL_LINE                           0x1B01
-#define GL_FILL                           0x1B02
-
-/* ReadBufferMode */
-/*      GL_FRONT_LEFT */
-/*      GL_FRONT_RIGHT */
-/*      GL_BACK_LEFT */
-/*      GL_BACK_RIGHT */
-/*      GL_FRONT */
-/*      GL_BACK */
-/*      GL_LEFT */
-/*      GL_RIGHT */
-/*      GL_AUX0 */
-/*      GL_AUX1 */
-/*      GL_AUX2 */
-/*      GL_AUX3 */
-
-/* RenderingMode */
-#define GL_RENDER                         0x1C00
-#define GL_FEEDBACK                       0x1C01
-#define GL_SELECT                         0x1C02
-
-/* ShadingModel */
-#define GL_FLAT                           0x1D00
-#define GL_SMOOTH                         0x1D01
-
-
-/* StencilFunction */
-/*      GL_NEVER */
-/*      GL_LESS */
-/*      GL_EQUAL */
-/*      GL_LEQUAL */
-/*      GL_GREATER */
-/*      GL_NOTEQUAL */
-/*      GL_GEQUAL */
-/*      GL_ALWAYS */
-
-/* StencilOp */
-/*      GL_ZERO */
-#define GL_KEEP                           0x1E00
-#define GL_REPLACE                        0x1E01
-#define GL_INCR                           0x1E02
-#define GL_DECR                           0x1E03
-/*      GL_INVERT */
-
-/* StringName */
-#define GL_VENDOR                         0x1F00
-#define GL_RENDERER                       0x1F01
-#define GL_VERSION                        0x1F02
-#define GL_EXTENSIONS                     0x1F03
-
-/* TextureCoordName */
-#define GL_S                              0x2000
-#define GL_T                              0x2001
-#define GL_R                              0x2002
-#define GL_Q                              0x2003
-
-/* TexCoordPointerType */
-/*      GL_SHORT */
-/*      GL_INT */
-/*      GL_FLOAT */
-/*      GL_DOUBLE */
-
-/* TextureEnvMode */
-#define GL_MODULATE                       0x2100
-#define GL_DECAL                          0x2101
-/*      GL_BLEND */
-/*      GL_REPLACE */
-
-/* TextureEnvParameter */
-#define GL_TEXTURE_ENV_MODE               0x2200
-#define GL_TEXTURE_ENV_COLOR              0x2201
-
-/* TextureEnvTarget */
-#define GL_TEXTURE_ENV                    0x2300
-
-/* TextureGenMode */
-#define GL_EYE_LINEAR                     0x2400
-#define GL_OBJECT_LINEAR                  0x2401
-#define GL_SPHERE_MAP                     0x2402
-
-/* TextureGenParameter */
-#define GL_TEXTURE_GEN_MODE               0x2500
-#define GL_OBJECT_PLANE                   0x2501
-#define GL_EYE_PLANE                      0x2502
-
-/* TextureMagFilter */
-#define GL_NEAREST                        0x2600
-#define GL_LINEAR                         0x2601
-
-/* TextureMinFilter */
-/*      GL_NEAREST */
-/*      GL_LINEAR */
-#define GL_NEAREST_MIPMAP_NEAREST         0x2700
-#define GL_LINEAR_MIPMAP_NEAREST          0x2701
-#define GL_NEAREST_MIPMAP_LINEAR          0x2702
-#define GL_LINEAR_MIPMAP_LINEAR           0x2703
-
-/* TextureParameterName */
-#define GL_TEXTURE_MAG_FILTER             0x2800
-#define GL_TEXTURE_MIN_FILTER             0x2801
-#define GL_TEXTURE_WRAP_S                 0x2802
-#define GL_TEXTURE_WRAP_T                 0x2803
-/*      GL_TEXTURE_BORDER_COLOR */
-/*      GL_TEXTURE_PRIORITY */
-
-/* TextureTarget */
-/*      GL_TEXTURE_1D */
-/*      GL_TEXTURE_2D */
-/*      GL_PROXY_TEXTURE_1D */
-/*      GL_PROXY_TEXTURE_2D */
-
-/* TextureWrapMode */
-#define GL_CLAMP                          0x2900
-#define GL_REPEAT                         0x2901
-
-/* VertexPointerType */
-/*      GL_SHORT */
-/*      GL_INT */
-/*      GL_FLOAT */
-/*      GL_DOUBLE */
-
-/* ClientAttribMask */
-#define GL_CLIENT_PIXEL_STORE_BIT         0x00000001
-#define GL_CLIENT_VERTEX_ARRAY_BIT        0x00000002
-#define GL_CLIENT_ALL_ATTRIB_BITS         0xffffffff
-
-/* polygon_offset */
-#define GL_POLYGON_OFFSET_FACTOR          0x8038
-#define GL_POLYGON_OFFSET_UNITS           0x2A00
-#define GL_POLYGON_OFFSET_POINT           0x2A01
-#define GL_POLYGON_OFFSET_LINE            0x2A02
-#define GL_POLYGON_OFFSET_FILL            0x8037
-
-/* texture */
-#define GL_ALPHA4                         0x803B
-#define GL_ALPHA8                         0x803C
-#define GL_ALPHA12                        0x803D
-#define GL_ALPHA16                        0x803E
-#define GL_LUMINANCE4                     0x803F
-#define GL_LUMINANCE8                     0x8040
-#define GL_LUMINANCE12                    0x8041
-#define GL_LUMINANCE16                    0x8042
-#define GL_LUMINANCE4_ALPHA4              0x8043
-#define GL_LUMINANCE6_ALPHA2              0x8044
-#define GL_LUMINANCE8_ALPHA8              0x8045
-#define GL_LUMINANCE12_ALPHA4             0x8046
-#define GL_LUMINANCE12_ALPHA12            0x8047
-#define GL_LUMINANCE16_ALPHA16            0x8048
-#define GL_INTENSITY                      0x8049
-#define GL_INTENSITY4                     0x804A
-#define GL_INTENSITY8                     0x804B
-#define GL_INTENSITY12                    0x804C
-#define GL_INTENSITY16                    0x804D
-#define GL_R3_G3_B2                       0x2A10
-#define GL_RGB4                           0x804F
-#define GL_RGB5                           0x8050
-#define GL_RGB8                           0x8051
-#define GL_RGB10                          0x8052
-#define GL_RGB12                          0x8053
-#define GL_RGB16                          0x8054
-#define GL_RGBA2                          0x8055
-#define GL_RGBA4                          0x8056
-#define GL_RGB5_A1                        0x8057
-#define GL_RGBA8                          0x8058
-#define GL_RGB10_A2                       0x8059
-#define GL_RGBA12                         0x805A
-#define GL_RGBA16                         0x805B
-#define GL_TEXTURE_RED_SIZE               0x805C
-#define GL_TEXTURE_GREEN_SIZE             0x805D
-#define GL_TEXTURE_BLUE_SIZE              0x805E
-#define GL_TEXTURE_ALPHA_SIZE             0x805F
-#define GL_TEXTURE_LUMINANCE_SIZE         0x8060
-#define GL_TEXTURE_INTENSITY_SIZE         0x8061
-#define GL_PROXY_TEXTURE_1D               0x8063
-#define GL_PROXY_TEXTURE_2D               0x8064
-
-/* texture_object */
-#define GL_TEXTURE_PRIORITY               0x8066
-#define GL_TEXTURE_RESIDENT               0x8067
-#define GL_TEXTURE_BINDING_1D             0x8068
-#define GL_TEXTURE_BINDING_2D             0x8069
-
-/* vertex_array */
-#define GL_VERTEX_ARRAY                   0x8074
-#define GL_NORMAL_ARRAY                   0x8075
-#define GL_COLOR_ARRAY                    0x8076
-#define GL_INDEX_ARRAY                    0x8077
-#define GL_TEXTURE_COORD_ARRAY            0x8078
-#define GL_EDGE_FLAG_ARRAY                0x8079
-#define GL_VERTEX_ARRAY_SIZE              0x807A
-#define GL_VERTEX_ARRAY_TYPE              0x807B
-#define GL_VERTEX_ARRAY_STRIDE            0x807C
-#define GL_NORMAL_ARRAY_TYPE              0x807E
-#define GL_NORMAL_ARRAY_STRIDE            0x807F
-#define GL_COLOR_ARRAY_SIZE               0x8081
-#define GL_COLOR_ARRAY_TYPE               0x8082
-#define GL_COLOR_ARRAY_STRIDE             0x8083
-#define GL_INDEX_ARRAY_TYPE               0x8085
-#define GL_INDEX_ARRAY_STRIDE             0x8086
-#define GL_TEXTURE_COORD_ARRAY_SIZE       0x8088
-#define GL_TEXTURE_COORD_ARRAY_TYPE       0x8089
-#define GL_TEXTURE_COORD_ARRAY_STRIDE     0x808A
-#define GL_EDGE_FLAG_ARRAY_STRIDE         0x808C
-#define GL_VERTEX_ARRAY_POINTER           0x808E
-#define GL_NORMAL_ARRAY_POINTER           0x808F
-#define GL_COLOR_ARRAY_POINTER            0x8090
-#define GL_INDEX_ARRAY_POINTER            0x8091
-#define GL_TEXTURE_COORD_ARRAY_POINTER    0x8092
-#define GL_EDGE_FLAG_ARRAY_POINTER        0x8093
-#define GL_V2F                            0x2A20
-#define GL_V3F                            0x2A21
-#define GL_C4UB_V2F                       0x2A22
-#define GL_C4UB_V3F                       0x2A23
-#define GL_C3F_V3F                        0x2A24
-#define GL_N3F_V3F                        0x2A25
-#define GL_C4F_N3F_V3F                    0x2A26
-#define GL_T2F_V3F                        0x2A27
-#define GL_T4F_V4F                        0x2A28
-#define GL_T2F_C4UB_V3F                   0x2A29
-#define GL_T2F_C3F_V3F                    0x2A2A
-#define GL_T2F_N3F_V3F                    0x2A2B
-#define GL_T2F_C4F_N3F_V3F                0x2A2C
-#define GL_T4F_C4F_N3F_V4F                0x2A2D
-
-/* Extensions */
-#define GL_EXT_vertex_array               1
-#define GL_EXT_bgra                       1
-#define GL_EXT_paletted_texture           1
-#define GL_WIN_swap_hint                  1
-#define GL_WIN_draw_range_elements        1
-// #define GL_WIN_phong_shading              1
-// #define GL_WIN_specular_fog               1
-
-/* EXT_vertex_array */
-#define GL_VERTEX_ARRAY_EXT               0x8074
-#define GL_NORMAL_ARRAY_EXT               0x8075
-#define GL_COLOR_ARRAY_EXT                0x8076
-#define GL_INDEX_ARRAY_EXT                0x8077
-#define GL_TEXTURE_COORD_ARRAY_EXT        0x8078
-#define GL_EDGE_FLAG_ARRAY_EXT            0x8079
-#define GL_VERTEX_ARRAY_SIZE_EXT          0x807A
-#define GL_VERTEX_ARRAY_TYPE_EXT          0x807B
-#define GL_VERTEX_ARRAY_STRIDE_EXT        0x807C
-#define GL_VERTEX_ARRAY_COUNT_EXT         0x807D
-#define GL_NORMAL_ARRAY_TYPE_EXT          0x807E
-#define GL_NORMAL_ARRAY_STRIDE_EXT        0x807F
-#define GL_NORMAL_ARRAY_COUNT_EXT         0x8080
-#define GL_COLOR_ARRAY_SIZE_EXT           0x8081
-#define GL_COLOR_ARRAY_TYPE_EXT           0x8082
-#define GL_COLOR_ARRAY_STRIDE_EXT         0x8083
-#define GL_COLOR_ARRAY_COUNT_EXT          0x8084
-#define GL_INDEX_ARRAY_TYPE_EXT           0x8085
-#define GL_INDEX_ARRAY_STRIDE_EXT         0x8086
-#define GL_INDEX_ARRAY_COUNT_EXT          0x8087
-#define GL_TEXTURE_COORD_ARRAY_SIZE_EXT   0x8088
-#define GL_TEXTURE_COORD_ARRAY_TYPE_EXT   0x8089
-#define GL_TEXTURE_COORD_ARRAY_STRIDE_EXT 0x808A
-#define GL_TEXTURE_COORD_ARRAY_COUNT_EXT  0x808B
-#define GL_EDGE_FLAG_ARRAY_STRIDE_EXT     0x808C
-#define GL_EDGE_FLAG_ARRAY_COUNT_EXT      0x808D
-#define GL_VERTEX_ARRAY_POINTER_EXT       0x808E
-#define GL_NORMAL_ARRAY_POINTER_EXT       0x808F
-#define GL_COLOR_ARRAY_POINTER_EXT        0x8090
-#define GL_INDEX_ARRAY_POINTER_EXT        0x8091
-#define GL_TEXTURE_COORD_ARRAY_POINTER_EXT 0x8092
-#define GL_EDGE_FLAG_ARRAY_POINTER_EXT    0x8093
-#define GL_DOUBLE_EXT                     GL_DOUBLE
-
-/* EXT_bgra */
-#define GL_BGR_EXT                        0x80E0
-#define GL_BGRA_EXT                       0x80E1
-
-/* EXT_paletted_texture */
-
-/* These must match the GL_COLOR_TABLE_*_SGI enumerants */
-#define GL_COLOR_TABLE_FORMAT_EXT         0x80D8
-#define GL_COLOR_TABLE_WIDTH_EXT          0x80D9
-#define GL_COLOR_TABLE_RED_SIZE_EXT       0x80DA
-#define GL_COLOR_TABLE_GREEN_SIZE_EXT     0x80DB
-#define GL_COLOR_TABLE_BLUE_SIZE_EXT      0x80DC
-#define GL_COLOR_TABLE_ALPHA_SIZE_EXT     0x80DD
-#define GL_COLOR_TABLE_LUMINANCE_SIZE_EXT 0x80DE
-#define GL_COLOR_TABLE_INTENSITY_SIZE_EXT 0x80DF
-
-#define GL_COLOR_INDEX1_EXT               0x80E2
-#define GL_COLOR_INDEX2_EXT               0x80E3
-#define GL_COLOR_INDEX4_EXT               0x80E4
-#define GL_COLOR_INDEX8_EXT               0x80E5
-#define GL_COLOR_INDEX12_EXT              0x80E6
-#define GL_COLOR_INDEX16_EXT              0x80E7
-
-/* WIN_draw_range_elements */
-#define GL_MAX_ELEMENTS_VERTICES_WIN      0x80E8
-#define GL_MAX_ELEMENTS_INDICES_WIN       0x80E9
-
-/* WIN_phong_shading */
-#define GL_PHONG_WIN                      0x80EA 
-#define GL_PHONG_HINT_WIN                 0x80EB 
-
-/* WIN_specular_fog */
-#define GL_FOG_SPECULAR_TEXTURE_WIN       0x80EC
-
-/* For compatibility with OpenGL v1.0 */
-#define GL_LOGIC_OP GL_INDEX_LOGIC_OP
-#define GL_TEXTURE_COMPONENTS GL_TEXTURE_INTERNAL_FORMAT
-
-/*************************************************************/
-
-WINGDIAPI void APIENTRY glAccum (GLenum op, GLfloat value);
-WINGDIAPI void APIENTRY glAlphaFunc (GLenum func, GLclampf ref);
-WINGDIAPI GLboolean APIENTRY glAreTexturesResident (GLsizei n, const GLuint *textures, GLboolean *residences);
-WINGDIAPI void APIENTRY glArrayElement (GLint i);
-WINGDIAPI void APIENTRY glBegin (GLenum mode);
-WINGDIAPI void APIENTRY glBindTexture (GLenum target, GLuint texture);
-WINGDIAPI void APIENTRY glBitmap (GLsizei width, GLsizei height, GLfloat xorig, GLfloat yorig, GLfloat xmove, GLfloat ymove, const GLubyte *bitmap);
-WINGDIAPI void APIENTRY glBlendFunc (GLenum sfactor, GLenum dfactor);
-WINGDIAPI void APIENTRY glCallList (GLuint list);
-WINGDIAPI void APIENTRY glCallLists (GLsizei n, GLenum type, const GLvoid *lists);
-WINGDIAPI void APIENTRY glClear (GLbitfield mask);
-WINGDIAPI void APIENTRY glClearAccum (GLfloat red, GLfloat green, GLfloat blue, GLfloat alpha);
-WINGDIAPI void APIENTRY glClearColor (GLclampf red, GLclampf green, GLclampf blue, GLclampf alpha);
-WINGDIAPI void APIENTRY glClearDepth (GLclampd depth);
-WINGDIAPI void APIENTRY glClearIndex (GLfloat c);
-WINGDIAPI void APIENTRY glClearStencil (GLint s);
-WINGDIAPI void APIENTRY glClipPlane (GLenum plane, const GLdouble *equation);
-WINGDIAPI void APIENTRY glColor3b (GLbyte red, GLbyte green, GLbyte blue);
-WINGDIAPI void APIENTRY glColor3bv (const GLbyte *v);
-WINGDIAPI void APIENTRY glColor3d (GLdouble red, GLdouble green, GLdouble blue);
-WINGDIAPI void APIENTRY glColor3dv (const GLdouble *v);
-WINGDIAPI void APIENTRY glColor3f (GLfloat red, GLfloat green, GLfloat blue);
-WINGDIAPI void APIENTRY glColor3fv (const GLfloat *v);
-WINGDIAPI void APIENTRY glColor3i (GLint red, GLint green, GLint blue);
-WINGDIAPI void APIENTRY glColor3iv (const GLint *v);
-WINGDIAPI void APIENTRY glColor3s (GLshort red, GLshort green, GLshort blue);
-WINGDIAPI void APIENTRY glColor3sv (const GLshort *v);
-WINGDIAPI void APIENTRY glColor3ub (GLubyte red, GLubyte green, GLubyte blue);
-WINGDIAPI void APIENTRY glColor3ubv (const GLubyte *v);
-WINGDIAPI void APIENTRY glColor3ui (GLuint red, GLuint green, GLuint blue);
-WINGDIAPI void APIENTRY glColor3uiv (const GLuint *v);
-WINGDIAPI void APIENTRY glColor3us (GLushort red, GLushort green, GLushort blue);
-WINGDIAPI void APIENTRY glColor3usv (const GLushort *v);
-WINGDIAPI void APIENTRY glColor4b (GLbyte red, GLbyte green, GLbyte blue, GLbyte alpha);
-WINGDIAPI void APIENTRY glColor4bv (const GLbyte *v);
-WINGDIAPI void APIENTRY glColor4d (GLdouble red, GLdouble green, GLdouble blue, GLdouble alpha);
-WINGDIAPI void APIENTRY glColor4dv (const GLdouble *v);
-WINGDIAPI void APIENTRY glColor4f (GLfloat red, GLfloat green, GLfloat blue, GLfloat alpha);
-WINGDIAPI void APIENTRY glColor4fv (const GLfloat *v);
-WINGDIAPI void APIENTRY glColor4i (GLint red, GLint green, GLint blue, GLint alpha);
-WINGDIAPI void APIENTRY glColor4iv (const GLint *v);
-WINGDIAPI void APIENTRY glColor4s (GLshort red, GLshort green, GLshort blue, GLshort alpha);
-WINGDIAPI void APIENTRY glColor4sv (const GLshort *v);
-WINGDIAPI void APIENTRY glColor4ub (GLubyte red, GLubyte green, GLubyte blue, GLubyte alpha);
-WINGDIAPI void APIENTRY glColor4ubv (const GLubyte *v);
-WINGDIAPI void APIENTRY glColor4ui (GLuint red, GLuint green, GLuint blue, GLuint alpha);
-WINGDIAPI void APIENTRY glColor4uiv (const GLuint *v);
-WINGDIAPI void APIENTRY glColor4us (GLushort red, GLushort green, GLushort blue, GLushort alpha);
-WINGDIAPI void APIENTRY glColor4usv (const GLushort *v);
-WINGDIAPI void APIENTRY glColorMask (GLboolean red, GLboolean green, GLboolean blue, GLboolean alpha);
-WINGDIAPI void APIENTRY glColorMaterial (GLenum face, GLenum mode);
-WINGDIAPI void APIENTRY glColorPointer (GLint size, GLenum type, GLsizei stride, const GLvoid *pointer);
-WINGDIAPI void APIENTRY glCopyPixels (GLint x, GLint y, GLsizei width, GLsizei height, GLenum type);
-WINGDIAPI void APIENTRY glCopyTexImage1D (GLenum target, GLint level, GLenum internalFormat, GLint x, GLint y, GLsizei width, GLint border);
-WINGDIAPI void APIENTRY glCopyTexImage2D (GLenum target, GLint level, GLenum internalFormat, GLint x, GLint y, GLsizei width, GLsizei height, GLint border);
-WINGDIAPI void APIENTRY glCopyTexSubImage1D (GLenum target, GLint level, GLint xoffset, GLint x, GLint y, GLsizei width);
-WINGDIAPI void APIENTRY glCopyTexSubImage2D (GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint x, GLint y, GLsizei width, GLsizei height);
-WINGDIAPI void APIENTRY glCullFace (GLenum mode);
-WINGDIAPI void APIENTRY glDeleteLists (GLuint list, GLsizei range);
-WINGDIAPI void APIENTRY glDeleteTextures (GLsizei n, const GLuint *textures);
-WINGDIAPI void APIENTRY glDepthFunc (GLenum func);
-WINGDIAPI void APIENTRY glDepthMask (GLboolean flag);
-WINGDIAPI void APIENTRY glDepthRange (GLclampd zNear, GLclampd zFar);
-WINGDIAPI void APIENTRY glDisable (GLenum cap);
-WINGDIAPI void APIENTRY glDisableClientState (GLenum array);
-WINGDIAPI void APIENTRY glDrawArrays (GLenum mode, GLint first, GLsizei count);
-WINGDIAPI void APIENTRY glDrawBuffer (GLenum mode);
-WINGDIAPI void APIENTRY glDrawElements (GLenum mode, GLsizei count, GLenum type, const GLvoid *indices);
-WINGDIAPI void APIENTRY glDrawPixels (GLsizei width, GLsizei height, GLenum format, GLenum type, const GLvoid *pixels);
-WINGDIAPI void APIENTRY glEdgeFlag (GLboolean flag);
-WINGDIAPI void APIENTRY glEdgeFlagPointer (GLsizei stride, const GLvoid *pointer);
-WINGDIAPI void APIENTRY glEdgeFlagv (const GLboolean *flag);
-WINGDIAPI void APIENTRY glEnable (GLenum cap);
-WINGDIAPI void APIENTRY glEnableClientState (GLenum array);
-WINGDIAPI void APIENTRY glEnd (void);
-WINGDIAPI void APIENTRY glEndList (void);
-WINGDIAPI void APIENTRY glEvalCoord1d (GLdouble u);
-WINGDIAPI void APIENTRY glEvalCoord1dv (const GLdouble *u);
-WINGDIAPI void APIENTRY glEvalCoord1f (GLfloat u);
-WINGDIAPI void APIENTRY glEvalCoord1fv (const GLfloat *u);
-WINGDIAPI void APIENTRY glEvalCoord2d (GLdouble u, GLdouble v);
-WINGDIAPI void APIENTRY glEvalCoord2dv (const GLdouble *u);
-WINGDIAPI void APIENTRY glEvalCoord2f (GLfloat u, GLfloat v);
-WINGDIAPI void APIENTRY glEvalCoord2fv (const GLfloat *u);
-WINGDIAPI void APIENTRY glEvalMesh1 (GLenum mode, GLint i1, GLint i2);
-WINGDIAPI void APIENTRY glEvalMesh2 (GLenum mode, GLint i1, GLint i2, GLint j1, GLint j2);
-WINGDIAPI void APIENTRY glEvalPoint1 (GLint i);
-WINGDIAPI void APIENTRY glEvalPoint2 (GLint i, GLint j);
-WINGDIAPI void APIENTRY glFeedbackBuffer (GLsizei size, GLenum type, GLfloat *buffer);
-WINGDIAPI void APIENTRY glFinish (void);
-WINGDIAPI void APIENTRY glFlush (void);
-WINGDIAPI void APIENTRY glFogf (GLenum pname, GLfloat param);
-WINGDIAPI void APIENTRY glFogfv (GLenum pname, const GLfloat *params);
-WINGDIAPI void APIENTRY glFogi (GLenum pname, GLint param);
-WINGDIAPI void APIENTRY glFogiv (GLenum pname, const GLint *params);
-WINGDIAPI void APIENTRY glFrontFace (GLenum mode);
-WINGDIAPI void APIENTRY glFrustum (GLdouble left, GLdouble right, GLdouble bottom, GLdouble top, GLdouble zNear, GLdouble zFar);
-WINGDIAPI GLuint APIENTRY glGenLists (GLsizei range);
-WINGDIAPI void APIENTRY glGenTextures (GLsizei n, GLuint *textures);
-WINGDIAPI void APIENTRY glGetBooleanv (GLenum pname, GLboolean *params);
-WINGDIAPI void APIENTRY glGetClipPlane (GLenum plane, GLdouble *equation);
-WINGDIAPI void APIENTRY glGetDoublev (GLenum pname, GLdouble *params);
-WINGDIAPI GLenum APIENTRY glGetError (void);
-WINGDIAPI void APIENTRY glGetFloatv (GLenum pname, GLfloat *params);
-WINGDIAPI void APIENTRY glGetIntegerv (GLenum pname, GLint *params);
-WINGDIAPI void APIENTRY glGetLightfv (GLenum light, GLenum pname, GLfloat *params);
-WINGDIAPI void APIENTRY glGetLightiv (GLenum light, GLenum pname, GLint *params);
-WINGDIAPI void APIENTRY glGetMapdv (GLenum target, GLenum query, GLdouble *v);
-WINGDIAPI void APIENTRY glGetMapfv (GLenum target, GLenum query, GLfloat *v);
-WINGDIAPI void APIENTRY glGetMapiv (GLenum target, GLenum query, GLint *v);
-WINGDIAPI void APIENTRY glGetMaterialfv (GLenum face, GLenum pname, GLfloat *params);
-WINGDIAPI void APIENTRY glGetMaterialiv (GLenum face, GLenum pname, GLint *params);
-WINGDIAPI void APIENTRY glGetPixelMapfv (GLenum map, GLfloat *values);
-WINGDIAPI void APIENTRY glGetPixelMapuiv (GLenum map, GLuint *values);
-WINGDIAPI void APIENTRY glGetPixelMapusv (GLenum map, GLushort *values);
-WINGDIAPI void APIENTRY glGetPointerv (GLenum pname, GLvoid* *params);
-WINGDIAPI void APIENTRY glGetPolygonStipple (GLubyte *mask);
-WINGDIAPI const GLubyte * APIENTRY glGetString (GLenum name);
-WINGDIAPI void APIENTRY glGetTexEnvfv (GLenum target, GLenum pname, GLfloat *params);
-WINGDIAPI void APIENTRY glGetTexEnviv (GLenum target, GLenum pname, GLint *params);
-WINGDIAPI void APIENTRY glGetTexGendv (GLenum coord, GLenum pname, GLdouble *params);
-WINGDIAPI void APIENTRY glGetTexGenfv (GLenum coord, GLenum pname, GLfloat *params);
-WINGDIAPI void APIENTRY glGetTexGeniv (GLenum coord, GLenum pname, GLint *params);
-WINGDIAPI void APIENTRY glGetTexImage (GLenum target, GLint level, GLenum format, GLenum type, GLvoid *pixels);
-WINGDIAPI void APIENTRY glGetTexLevelParameterfv (GLenum target, GLint level, GLenum pname, GLfloat *params);
-WINGDIAPI void APIENTRY glGetTexLevelParameteriv (GLenum target, GLint level, GLenum pname, GLint *params);
-WINGDIAPI void APIENTRY glGetTexParameterfv (GLenum target, GLenum pname, GLfloat *params);
-WINGDIAPI void APIENTRY glGetTexParameteriv (GLenum target, GLenum pname, GLint *params);
-WINGDIAPI void APIENTRY glHint (GLenum target, GLenum mode);
-WINGDIAPI void APIENTRY glIndexMask (GLuint mask);
-WINGDIAPI void APIENTRY glIndexPointer (GLenum type, GLsizei stride, const GLvoid *pointer);
-WINGDIAPI void APIENTRY glIndexd (GLdouble c);
-WINGDIAPI void APIENTRY glIndexdv (const GLdouble *c);
-WINGDIAPI void APIENTRY glIndexf (GLfloat c);
-WINGDIAPI void APIENTRY glIndexfv (const GLfloat *c);
-WINGDIAPI void APIENTRY glIndexi (GLint c);
-WINGDIAPI void APIENTRY glIndexiv (const GLint *c);
-WINGDIAPI void APIENTRY glIndexs (GLshort c);
-WINGDIAPI void APIENTRY glIndexsv (const GLshort *c);
-WINGDIAPI void APIENTRY glIndexub (GLubyte c);
-WINGDIAPI void APIENTRY glIndexubv (const GLubyte *c);
-WINGDIAPI void APIENTRY glInitNames (void);
-WINGDIAPI void APIENTRY glInterleavedArrays (GLenum format, GLsizei stride, const GLvoid *pointer);
-WINGDIAPI GLboolean APIENTRY glIsEnabled (GLenum cap);
-WINGDIAPI GLboolean APIENTRY glIsList (GLuint list);
-WINGDIAPI GLboolean APIENTRY glIsTexture (GLuint texture);
-WINGDIAPI void APIENTRY glLightModelf (GLenum pname, GLfloat param);
-WINGDIAPI void APIENTRY glLightModelfv (GLenum pname, const GLfloat *params);
-WINGDIAPI void APIENTRY glLightModeli (GLenum pname, GLint param);
-WINGDIAPI void APIENTRY glLightModeliv (GLenum pname, const GLint *params);
-WINGDIAPI void APIENTRY glLightf (GLenum light, GLenum pname, GLfloat param);
-WINGDIAPI void APIENTRY glLightfv (GLenum light, GLenum pname, const GLfloat *params);
-WINGDIAPI void APIENTRY glLighti (GLenum light, GLenum pname, GLint param);
-WINGDIAPI void APIENTRY glLightiv (GLenum light, GLenum pname, const GLint *params);
-WINGDIAPI void APIENTRY glLineStipple (GLint factor, GLushort pattern);
-WINGDIAPI void APIENTRY glLineWidth (GLfloat width);
-WINGDIAPI void APIENTRY glListBase (GLuint base);
-WINGDIAPI void APIENTRY glLoadIdentity (void);
-WINGDIAPI void APIENTRY glLoadMatrixd (const GLdouble *m);
-WINGDIAPI void APIENTRY glLoadMatrixf (const GLfloat *m);
-WINGDIAPI void APIENTRY glLoadName (GLuint name);
-WINGDIAPI void APIENTRY glLogicOp (GLenum opcode);
-WINGDIAPI void APIENTRY glMap1d (GLenum target, GLdouble u1, GLdouble u2, GLint stride, GLint order, const GLdouble *points);
-WINGDIAPI void APIENTRY glMap1f (GLenum target, GLfloat u1, GLfloat u2, GLint stride, GLint order, const GLfloat *points);
-WINGDIAPI void APIENTRY glMap2d (GLenum target, GLdouble u1, GLdouble u2, GLint ustride, GLint uorder, GLdouble v1, GLdouble v2, GLint vstride, GLint vorder, const GLdouble *points);
-WINGDIAPI void APIENTRY glMap2f (GLenum target, GLfloat u1, GLfloat u2, GLint ustride, GLint uorder, GLfloat v1, GLfloat v2, GLint vstride, GLint vorder, const GLfloat *points);
-WINGDIAPI void APIENTRY glMapGrid1d (GLint un, GLdouble u1, GLdouble u2);
-WINGDIAPI void APIENTRY glMapGrid1f (GLint un, GLfloat u1, GLfloat u2);
-WINGDIAPI void APIENTRY glMapGrid2d (GLint un, GLdouble u1, GLdouble u2, GLint vn, GLdouble v1, GLdouble v2);
-WINGDIAPI void APIENTRY glMapGrid2f (GLint un, GLfloat u1, GLfloat u2, GLint vn, GLfloat v1, GLfloat v2);
-WINGDIAPI void APIENTRY glMaterialf (GLenum face, GLenum pname, GLfloat param);
-WINGDIAPI void APIENTRY glMaterialfv (GLenum face, GLenum pname, const GLfloat *params);
-WINGDIAPI void APIENTRY glMateriali (GLenum face, GLenum pname, GLint param);
-WINGDIAPI void APIENTRY glMaterialiv (GLenum face, GLenum pname, const GLint *params);
-WINGDIAPI void APIENTRY glMatrixMode (GLenum mode);
-WINGDIAPI void APIENTRY glMultMatrixd (const GLdouble *m);
-WINGDIAPI void APIENTRY glMultMatrixf (const GLfloat *m);
-WINGDIAPI void APIENTRY glNewList (GLuint list, GLenum mode);
-WINGDIAPI void APIENTRY glNormal3b (GLbyte nx, GLbyte ny, GLbyte nz);
-WINGDIAPI void APIENTRY glNormal3bv (const GLbyte *v);
-WINGDIAPI void APIENTRY glNormal3d (GLdouble nx, GLdouble ny, GLdouble nz);
-WINGDIAPI void APIENTRY glNormal3dv (const GLdouble *v);
-WINGDIAPI void APIENTRY glNormal3f (GLfloat nx, GLfloat ny, GLfloat nz);
-WINGDIAPI void APIENTRY glNormal3fv (const GLfloat *v);
-WINGDIAPI void APIENTRY glNormal3i (GLint nx, GLint ny, GLint nz);
-WINGDIAPI void APIENTRY glNormal3iv (const GLint *v);
-WINGDIAPI void APIENTRY glNormal3s (GLshort nx, GLshort ny, GLshort nz);
-WINGDIAPI void APIENTRY glNormal3sv (const GLshort *v);
-WINGDIAPI void APIENTRY glNormalPointer (GLenum type, GLsizei stride, const GLvoid *pointer);
-WINGDIAPI void APIENTRY glOrtho (GLdouble left, GLdouble right, GLdouble bottom, GLdouble top, GLdouble zNear, GLdouble zFar);
-WINGDIAPI void APIENTRY glPassThrough (GLfloat token);
-WINGDIAPI void APIENTRY glPixelMapfv (GLenum map, GLsizei mapsize, const GLfloat *values);
-WINGDIAPI void APIENTRY glPixelMapuiv (GLenum map, GLsizei mapsize, const GLuint *values);
-WINGDIAPI void APIENTRY glPixelMapusv (GLenum map, GLsizei mapsize, const GLushort *values);
-WINGDIAPI void APIENTRY glPixelStoref (GLenum pname, GLfloat param);
-WINGDIAPI void APIENTRY glPixelStorei (GLenum pname, GLint param);
-WINGDIAPI void APIENTRY glPixelTransferf (GLenum pname, GLfloat param);
-WINGDIAPI void APIENTRY glPixelTransferi (GLenum pname, GLint param);
-WINGDIAPI void APIENTRY glPixelZoom (GLfloat xfactor, GLfloat yfactor);
-WINGDIAPI void APIENTRY glPointSize (GLfloat size);
-WINGDIAPI void APIENTRY glPolygonMode (GLenum face, GLenum mode);
-WINGDIAPI void APIENTRY glPolygonOffset (GLfloat factor, GLfloat units);
-WINGDIAPI void APIENTRY glPolygonStipple (const GLubyte *mask);
-WINGDIAPI void APIENTRY glPopAttrib (void);
-WINGDIAPI void APIENTRY glPopClientAttrib (void);
-WINGDIAPI void APIENTRY glPopMatrix (void);
-WINGDIAPI void APIENTRY glPopName (void);
-WINGDIAPI void APIENTRY glPrioritizeTextures (GLsizei n, const GLuint *textures, const GLclampf *priorities);
-WINGDIAPI void APIENTRY glPushAttrib (GLbitfield mask);
-WINGDIAPI void APIENTRY glPushClientAttrib (GLbitfield mask);
-WINGDIAPI void APIENTRY glPushMatrix (void);
-WINGDIAPI void APIENTRY glPushName (GLuint name);
-WINGDIAPI void APIENTRY glRasterPos2d (GLdouble x, GLdouble y);
-WINGDIAPI void APIENTRY glRasterPos2dv (const GLdouble *v);
-WINGDIAPI void APIENTRY glRasterPos2f (GLfloat x, GLfloat y);
-WINGDIAPI void APIENTRY glRasterPos2fv (const GLfloat *v);
-WINGDIAPI void APIENTRY glRasterPos2i (GLint x, GLint y);
-WINGDIAPI void APIENTRY glRasterPos2iv (const GLint *v);
-WINGDIAPI void APIENTRY glRasterPos2s (GLshort x, GLshort y);
-WINGDIAPI void APIENTRY glRasterPos2sv (const GLshort *v);
-WINGDIAPI void APIENTRY glRasterPos3d (GLdouble x, GLdouble y, GLdouble z);
-WINGDIAPI void APIENTRY glRasterPos3dv (const GLdouble *v);
-WINGDIAPI void APIENTRY glRasterPos3f (GLfloat x, GLfloat y, GLfloat z);
-WINGDIAPI void APIENTRY glRasterPos3fv (const GLfloat *v);
-WINGDIAPI void APIENTRY glRasterPos3i (GLint x, GLint y, GLint z);
-WINGDIAPI void APIENTRY glRasterPos3iv (const GLint *v);
-WINGDIAPI void APIENTRY glRasterPos3s (GLshort x, GLshort y, GLshort z);
-WINGDIAPI void APIENTRY glRasterPos3sv (const GLshort *v);
-WINGDIAPI void APIENTRY glRasterPos4d (GLdouble x, GLdouble y, GLdouble z, GLdouble w);
-WINGDIAPI void APIENTRY glRasterPos4dv (const GLdouble *v);
-WINGDIAPI void APIENTRY glRasterPos4f (GLfloat x, GLfloat y, GLfloat z, GLfloat w);
-WINGDIAPI void APIENTRY glRasterPos4fv (const GLfloat *v);
-WINGDIAPI void APIENTRY glRasterPos4i (GLint x, GLint y, GLint z, GLint w);
-WINGDIAPI void APIENTRY glRasterPos4iv (const GLint *v);
-WINGDIAPI void APIENTRY glRasterPos4s (GLshort x, GLshort y, GLshort z, GLshort w);
-WINGDIAPI void APIENTRY glRasterPos4sv (const GLshort *v);
-WINGDIAPI void APIENTRY glReadBuffer (GLenum mode);
-WINGDIAPI void APIENTRY glReadPixels (GLint x, GLint y, GLsizei width, GLsizei height, GLenum format, GLenum type, GLvoid *pixels);
-WINGDIAPI void APIENTRY glRectd (GLdouble x1, GLdouble y1, GLdouble x2, GLdouble y2);
-WINGDIAPI void APIENTRY glRectdv (const GLdouble *v1, const GLdouble *v2);
-WINGDIAPI void APIENTRY glRectf (GLfloat x1, GLfloat y1, GLfloat x2, GLfloat y2);
-WINGDIAPI void APIENTRY glRectfv (const GLfloat *v1, const GLfloat *v2);
-WINGDIAPI void APIENTRY glRecti (GLint x1, GLint y1, GLint x2, GLint y2);
-WINGDIAPI void APIENTRY glRectiv (const GLint *v1, const GLint *v2);
-WINGDIAPI void APIENTRY glRects (GLshort x1, GLshort y1, GLshort x2, GLshort y2);
-WINGDIAPI void APIENTRY glRectsv (const GLshort *v1, const GLshort *v2);
-WINGDIAPI GLint APIENTRY glRenderMode (GLenum mode);
-WINGDIAPI void APIENTRY glRotated (GLdouble angle, GLdouble x, GLdouble y, GLdouble z);
-WINGDIAPI void APIENTRY glRotatef (GLfloat angle, GLfloat x, GLfloat y, GLfloat z);
-WINGDIAPI void APIENTRY glScaled (GLdouble x, GLdouble y, GLdouble z);
-WINGDIAPI void APIENTRY glScalef (GLfloat x, GLfloat y, GLfloat z);
-WINGDIAPI void APIENTRY glScissor (GLint x, GLint y, GLsizei width, GLsizei height);
-WINGDIAPI void APIENTRY glSelectBuffer (GLsizei size, GLuint *buffer);
-WINGDIAPI void APIENTRY glShadeModel (GLenum mode);
-WINGDIAPI void APIENTRY glStencilFunc (GLenum func, GLint ref, GLuint mask);
-WINGDIAPI void APIENTRY glStencilMask (GLuint mask);
-WINGDIAPI void APIENTRY glStencilOp (GLenum fail, GLenum zfail, GLenum zpass);
-WINGDIAPI void APIENTRY glTexCoord1d (GLdouble s);
-WINGDIAPI void APIENTRY glTexCoord1dv (const GLdouble *v);
-WINGDIAPI void APIENTRY glTexCoord1f (GLfloat s);
-WINGDIAPI void APIENTRY glTexCoord1fv (const GLfloat *v);
-WINGDIAPI void APIENTRY glTexCoord1i (GLint s);
-WINGDIAPI void APIENTRY glTexCoord1iv (const GLint *v);
-WINGDIAPI void APIENTRY glTexCoord1s (GLshort s);
-WINGDIAPI void APIENTRY glTexCoord1sv (const GLshort *v);
-WINGDIAPI void APIENTRY glTexCoord2d (GLdouble s, GLdouble t);
-WINGDIAPI void APIENTRY glTexCoord2dv (const GLdouble *v);
-WINGDIAPI void APIENTRY glTexCoord2f (GLfloat s, GLfloat t);
-WINGDIAPI void APIENTRY glTexCoord2fv (const GLfloat *v);
-WINGDIAPI void APIENTRY glTexCoord2i (GLint s, GLint t);
-WINGDIAPI void APIENTRY glTexCoord2iv (const GLint *v);
-WINGDIAPI void APIENTRY glTexCoord2s (GLshort s, GLshort t);
-WINGDIAPI void APIENTRY glTexCoord2sv (const GLshort *v);
-WINGDIAPI void APIENTRY glTexCoord3d (GLdouble s, GLdouble t, GLdouble r);
-WINGDIAPI void APIENTRY glTexCoord3dv (const GLdouble *v);
-WINGDIAPI void APIENTRY glTexCoord3f (GLfloat s, GLfloat t, GLfloat r);
-WINGDIAPI void APIENTRY glTexCoord3fv (const GLfloat *v);
-WINGDIAPI void APIENTRY glTexCoord3i (GLint s, GLint t, GLint r);
-WINGDIAPI void APIENTRY glTexCoord3iv (const GLint *v);
-WINGDIAPI void APIENTRY glTexCoord3s (GLshort s, GLshort t, GLshort r);
-WINGDIAPI void APIENTRY glTexCoord3sv (const GLshort *v);
-WINGDIAPI void APIENTRY glTexCoord4d (GLdouble s, GLdouble t, GLdouble r, GLdouble q);
-WINGDIAPI void APIENTRY glTexCoord4dv (const GLdouble *v);
-WINGDIAPI void APIENTRY glTexCoord4f (GLfloat s, GLfloat t, GLfloat r, GLfloat q);
-WINGDIAPI void APIENTRY glTexCoord4fv (const GLfloat *v);
-WINGDIAPI void APIENTRY glTexCoord4i (GLint s, GLint t, GLint r, GLint q);
-WINGDIAPI void APIENTRY glTexCoord4iv (const GLint *v);
-WINGDIAPI void APIENTRY glTexCoord4s (GLshort s, GLshort t, GLshort r, GLshort q);
-WINGDIAPI void APIENTRY glTexCoord4sv (const GLshort *v);
-WINGDIAPI void APIENTRY glTexCoordPointer (GLint size, GLenum type, GLsizei stride, const GLvoid *pointer);
-WINGDIAPI void APIENTRY glTexEnvf (GLenum target, GLenum pname, GLfloat param);
-WINGDIAPI void APIENTRY glTexEnvfv (GLenum target, GLenum pname, const GLfloat *params);
-WINGDIAPI void APIENTRY glTexEnvi (GLenum target, GLenum pname, GLint param);
-WINGDIAPI void APIENTRY glTexEnviv (GLenum target, GLenum pname, const GLint *params);
-WINGDIAPI void APIENTRY glTexGend (GLenum coord, GLenum pname, GLdouble param);
-WINGDIAPI void APIENTRY glTexGendv (GLenum coord, GLenum pname, const GLdouble *params);
-WINGDIAPI void APIENTRY glTexGenf (GLenum coord, GLenum pname, GLfloat param);
-WINGDIAPI void APIENTRY glTexGenfv (GLenum coord, GLenum pname, const GLfloat *params);
-WINGDIAPI void APIENTRY glTexGeni (GLenum coord, GLenum pname, GLint param);
-WINGDIAPI void APIENTRY glTexGeniv (GLenum coord, GLenum pname, const GLint *params);
-WINGDIAPI void APIENTRY glTexImage1D (GLenum target, GLint level, GLint internalformat, GLsizei width, GLint border, GLenum format, GLenum type, const GLvoid *pixels);
-WINGDIAPI void APIENTRY glTexImage2D (GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLint border, GLenum format, GLenum type, const GLvoid *pixels);
-WINGDIAPI void APIENTRY glTexParameterf (GLenum target, GLenum pname, GLfloat param);
-WINGDIAPI void APIENTRY glTexParameterfv (GLenum target, GLenum pname, const GLfloat *params);
-WINGDIAPI void APIENTRY glTexParameteri (GLenum target, GLenum pname, GLint param);
-WINGDIAPI void APIENTRY glTexParameteriv (GLenum target, GLenum pname, const GLint *params);
-WINGDIAPI void APIENTRY glTexSubImage1D (GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLenum type, const GLvoid *pixels);
-WINGDIAPI void APIENTRY glTexSubImage2D (GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLenum type, const GLvoid *pixels);
-WINGDIAPI void APIENTRY glTranslated (GLdouble x, GLdouble y, GLdouble z);
-WINGDIAPI void APIENTRY glTranslatef (GLfloat x, GLfloat y, GLfloat z);
-WINGDIAPI void APIENTRY glVertex2d (GLdouble x, GLdouble y);
-WINGDIAPI void APIENTRY glVertex2dv (const GLdouble *v);
-WINGDIAPI void APIENTRY glVertex2f (GLfloat x, GLfloat y);
-WINGDIAPI void APIENTRY glVertex2fv (const GLfloat *v);
-WINGDIAPI void APIENTRY glVertex2i (GLint x, GLint y);
-WINGDIAPI void APIENTRY glVertex2iv (const GLint *v);
-WINGDIAPI void APIENTRY glVertex2s (GLshort x, GLshort y);
-WINGDIAPI void APIENTRY glVertex2sv (const GLshort *v);
-WINGDIAPI void APIENTRY glVertex3d (GLdouble x, GLdouble y, GLdouble z);
-WINGDIAPI void APIENTRY glVertex3dv (const GLdouble *v);
-WINGDIAPI void APIENTRY glVertex3f (GLfloat x, GLfloat y, GLfloat z);
-WINGDIAPI void APIENTRY glVertex3fv (const GLfloat *v);
-WINGDIAPI void APIENTRY glVertex3i (GLint x, GLint y, GLint z);
-WINGDIAPI void APIENTRY glVertex3iv (const GLint *v);
-WINGDIAPI void APIENTRY glVertex3s (GLshort x, GLshort y, GLshort z);
-WINGDIAPI void APIENTRY glVertex3sv (const GLshort *v);
-WINGDIAPI void APIENTRY glVertex4d (GLdouble x, GLdouble y, GLdouble z, GLdouble w);
-WINGDIAPI void APIENTRY glVertex4dv (const GLdouble *v);
-WINGDIAPI void APIENTRY glVertex4f (GLfloat x, GLfloat y, GLfloat z, GLfloat w);
-WINGDIAPI void APIENTRY glVertex4fv (const GLfloat *v);
-WINGDIAPI void APIENTRY glVertex4i (GLint x, GLint y, GLint z, GLint w);
-WINGDIAPI void APIENTRY glVertex4iv (const GLint *v);
-WINGDIAPI void APIENTRY glVertex4s (GLshort x, GLshort y, GLshort z, GLshort w);
-WINGDIAPI void APIENTRY glVertex4sv (const GLshort *v);
-WINGDIAPI void APIENTRY glVertexPointer (GLint size, GLenum type, GLsizei stride, const GLvoid *pointer);
-WINGDIAPI void APIENTRY glViewport (GLint x, GLint y, GLsizei width, GLsizei height);
-
-/* EXT_vertex_array */
-typedef void (APIENTRY * PFNGLARRAYELEMENTEXTPROC) (GLint i);
-typedef void (APIENTRY * PFNGLDRAWARRAYSEXTPROC) (GLenum mode, GLint first, GLsizei count);
-typedef void (APIENTRY * PFNGLVERTEXPOINTEREXTPROC) (GLint size, GLenum type, GLsizei stride, GLsizei count, const GLvoid *pointer);
-typedef void (APIENTRY * PFNGLNORMALPOINTEREXTPROC) (GLenum type, GLsizei stride, GLsizei count, const GLvoid *pointer);
-typedef void (APIENTRY * PFNGLCOLORPOINTEREXTPROC) (GLint size, GLenum type, GLsizei stride, GLsizei count, const GLvoid *pointer);
-typedef void (APIENTRY * PFNGLINDEXPOINTEREXTPROC) (GLenum type, GLsizei stride, GLsizei count, const GLvoid *pointer);
-typedef void (APIENTRY * PFNGLTEXCOORDPOINTEREXTPROC) (GLint size, GLenum type, GLsizei stride, GLsizei count, const GLvoid *pointer);
-typedef void (APIENTRY * PFNGLEDGEFLAGPOINTEREXTPROC) (GLsizei stride, GLsizei count, const GLboolean *pointer);
-typedef void (APIENTRY * PFNGLGETPOINTERVEXTPROC) (GLenum pname, GLvoid* *params);
-typedef void (APIENTRY * PFNGLARRAYELEMENTARRAYEXTPROC)(GLenum mode, GLsizei count, const GLvoid* pi);
-
-/* WIN_draw_range_elements */
-typedef void (APIENTRY * PFNGLDRAWRANGEELEMENTSWINPROC) (GLenum mode, GLuint start, GLuint end, GLsizei count, GLenum type, const GLvoid *indices);
-
-/* WIN_swap_hint */
-typedef void (APIENTRY * PFNGLADDSWAPHINTRECTWINPROC)  (GLint x, GLint y, GLsizei width, GLsizei height);
-
-/* EXT_paletted_texture */
-typedef void (APIENTRY * PFNGLCOLORTABLEEXTPROC)
-    (GLenum target, GLenum internalFormat, GLsizei width, GLenum format,
-     GLenum type, const GLvoid *data);
-typedef void (APIENTRY * PFNGLCOLORSUBTABLEEXTPROC)
-    (GLenum target, GLsizei start, GLsizei count, GLenum format,
-     GLenum type, const GLvoid *data);
-typedef void (APIENTRY * PFNGLGETCOLORTABLEEXTPROC)
-    (GLenum target, GLenum format, GLenum type, GLvoid *data);
-typedef void (APIENTRY * PFNGLGETCOLORTABLEPARAMETERIVEXTPROC)
-    (GLenum target, GLenum pname, GLint *params);
-typedef void (APIENTRY * PFNGLGETCOLORTABLEPARAMETERFVEXTPROC)
-    (GLenum target, GLenum pname, GLfloat *params);
-
-#ifdef __cplusplus
-}
-#endif
-
-#endif /* __GL_H__ */
-#endif /* __gl_h_ */
diff --git a/Assignment1/Assignment1/include/GL/GLAux.h b/Assignment1/Assignment1/include/GL/GLAux.h
deleted file mode 100644
index 3e970db..0000000
--- a/Assignment1/Assignment1/include/GL/GLAux.h
+++ /dev/null
@@ -1,373 +0,0 @@
-/*++ BUILD Version: 0004    // Increment this if a change has global effects
-
-Copyright (c) 1985-95, Microsoft Corporation
-
-Module Name:
-
-    glaux.h
-
-Abstract:
-
-    Procedure declarations, constant definitions and macros for the OpenGL
-    Auxiliary Library.
-
---*/
-
-#ifndef __GLAUX_H__
-#define __GLAUX_H__
-
-/*
- * (c) Copyright 1993, Silicon Graphics, Inc.
- * ALL RIGHTS RESERVED 
- * Permission to use, copy, modify, and distribute this software for 
- * any purpose and without fee is hereby granted, provided that the above
- * copyright notice appear in all copies and that both the copyright notice
- * and this permission notice appear in supporting documentation, and that 
- * the name of Silicon Graphics, Inc. not be used in advertising
- * or publicity pertaining to distribution of the software without specific,
- * written prior permission. 
- *
- * THE MATERIAL EMBODIED ON THIS SOFTWARE IS PROVIDED TO YOU "AS-IS"
- * AND WITHOUT WARRANTY OF ANY KIND, EXPRESS, IMPLIED OR OTHERWISE,
- * INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY OR
- * FITNESS FOR A PARTICULAR PURPOSE.  IN NO EVENT SHALL SILICON
- * GRAPHICS, INC.  BE LIABLE TO YOU OR ANYONE ELSE FOR ANY DIRECT,
- * SPECIAL, INCIDENTAL, INDIRECT OR CONSEQUENTIAL DAMAGES OF ANY
- * KIND, OR ANY DAMAGES WHATSOEVER, INCLUDING WITHOUT LIMITATION,
- * LOSS OF PROFIT, LOSS OF USE, SAVINGS OR REVENUE, OR THE CLAIMS OF
- * THIRD PARTIES, WHETHER OR NOT SILICON GRAPHICS, INC.  HAS BEEN
- * ADVISED OF THE POSSIBILITY OF SUCH LOSS, HOWEVER CAUSED AND ON
- * ANY THEORY OF LIABILITY, ARISING OUT OF OR IN CONNECTION WITH THE
- * POSSESSION, USE OR PERFORMANCE OF THIS SOFTWARE.
- * 
- * US Government Users Restricted Rights 
- * Use, duplication, or disclosure by the Government is subject to
- * restrictions set forth in FAR 52.227.19(c)(2) or subparagraph
- * (c)(1)(ii) of the Rights in Technical Data and Computer Software
- * clause at DFARS 252.227-7013 and/or in similar or successor
- * clauses in the FAR or the DOD or NASA FAR Supplement.
- * Unpublished-- rights reserved under the copyright laws of the
- * United States.  Contractor/manufacturer is Silicon Graphics,
- * Inc., 2011 N.  Shoreline Blvd., Mountain View, CA 94039-7311.
- *
- * OpenGL(TM) is a trademark of Silicon Graphics, Inc.
- */
-
-#include <windows.h>
-#include <GL/gl.h>
-#include <GL/glu.h>
-
-#ifdef __cplusplus
-extern "C" {
-#endif
-
-/*
-** ToolKit Window Types
-** In the future, AUX_RGBA may be a combination of both RGB and ALPHA
-*/
-
-#define AUX_RGB             0
-#define AUX_RGBA            AUX_RGB
-#define AUX_INDEX           1
-#define AUX_SINGLE          0
-#define AUX_DOUBLE          2
-#define AUX_DIRECT          0
-#define AUX_INDIRECT        4
-
-#define AUX_ACCUM           8
-#define AUX_ALPHA           16
-#define AUX_DEPTH24         32      /* 24-bit depth buffer */
-#define AUX_STENCIL         64
-#define AUX_AUX             128
-#define AUX_DEPTH16         256     /* 16-bit depth buffer */
-#define AUX_FIXED_332_PAL   512
-#define AUX_DEPTH           AUX_DEPTH16 /* default is 16-bit depth buffer */
-
-/* 
-** Window Masks
-*/
-
-#define AUX_WIND_IS_RGB(x)      (((x) & AUX_INDEX) == 0)
-#define AUX_WIND_IS_INDEX(x)    (((x) & AUX_INDEX) != 0)
-#define AUX_WIND_IS_SINGLE(x)   (((x) & AUX_DOUBLE) == 0)
-#define AUX_WIND_IS_DOUBLE(x)   (((x) & AUX_DOUBLE) != 0)
-#define AUX_WIND_IS_INDIRECT(x) (((x) & AUX_INDIRECT) != 0)
-#define AUX_WIND_IS_DIRECT(x)   (((x) & AUX_INDIRECT) == 0)
-#define AUX_WIND_HAS_ACCUM(x)   (((x) & AUX_ACCUM) != 0)
-#define AUX_WIND_HAS_ALPHA(x)   (((x) & AUX_ALPHA) != 0)
-#define AUX_WIND_HAS_DEPTH(x)   (((x) & (AUX_DEPTH24 | AUX_DEPTH16)) != 0)
-#define AUX_WIND_HAS_STENCIL(x) (((x) & AUX_STENCIL) != 0)
-#define AUX_WIND_USES_FIXED_332_PAL(x)  (((x) & AUX_FIXED_332_PAL) != 0)
-
-/*
-** ToolKit Event Structure
-*/
-
-typedef struct _AUX_EVENTREC {
-    GLint event;
-    GLint data[4];
-} AUX_EVENTREC;
-
-/* 
-** ToolKit Event Types
-*/
-#define AUX_EXPOSE      1
-#define AUX_CONFIG      2
-#define AUX_DRAW        4
-#define AUX_KEYEVENT    8
-#define AUX_MOUSEDOWN   16
-#define AUX_MOUSEUP     32
-#define AUX_MOUSELOC    64
-
-/*
-** Toolkit Event Data Indices
-*/
-#define AUX_WINDOWX             0
-#define AUX_WINDOWY             1
-#define AUX_MOUSEX              0
-#define AUX_MOUSEY              1
-#define AUX_MOUSESTATUS         3
-#define AUX_KEY                 0
-#define AUX_KEYSTATUS           1
-
-/*
-** ToolKit Event Status Messages
-*/
-#define AUX_LEFTBUTTON          1
-#define AUX_RIGHTBUTTON         2
-#define AUX_MIDDLEBUTTON        4
-#define AUX_SHIFT               1
-#define AUX_CONTROL             2
-
-/* 
-** ToolKit Key Codes
-*/
-#define AUX_RETURN              0x0D
-#define AUX_ESCAPE              0x1B
-#define AUX_SPACE               0x20
-#define AUX_LEFT                0x25
-#define AUX_UP                  0x26
-#define AUX_RIGHT               0x27
-#define AUX_DOWN                0x28
-#define AUX_A                   'A'
-#define AUX_B                   'B'
-#define AUX_C                   'C'
-#define AUX_D                   'D'
-#define AUX_E                   'E'
-#define AUX_F                   'F'
-#define AUX_G                   'G'
-#define AUX_H                   'H'
-#define AUX_I                   'I'
-#define AUX_J                   'J'
-#define AUX_K                   'K'
-#define AUX_L                   'L'
-#define AUX_M                   'M'
-#define AUX_N                   'N'
-#define AUX_O                   'O'
-#define AUX_P                   'P'
-#define AUX_Q                   'Q'
-#define AUX_R                   'R'
-#define AUX_S                   'S'
-#define AUX_T                   'T'
-#define AUX_U                   'U'
-#define AUX_V                   'V'
-#define AUX_W                   'W'
-#define AUX_X                   'X'
-#define AUX_Y                   'Y'
-#define AUX_Z                   'Z'
-#define AUX_a                   'a'
-#define AUX_b                   'b'
-#define AUX_c                   'c'
-#define AUX_d                   'd'
-#define AUX_e                   'e'
-#define AUX_f                   'f'
-#define AUX_g                   'g'
-#define AUX_h                   'h'
-#define AUX_i                   'i'
-#define AUX_j                   'j'
-#define AUX_k                   'k'
-#define AUX_l                   'l'
-#define AUX_m                   'm'
-#define AUX_n                   'n'
-#define AUX_o                   'o'
-#define AUX_p                   'p'
-#define AUX_q                   'q'
-#define AUX_r                   'r'
-#define AUX_s                   's'
-#define AUX_t                   't'
-#define AUX_u                   'u'
-#define AUX_v                   'v'
-#define AUX_w                   'w'
-#define AUX_x                   'x'
-#define AUX_y                   'y'
-#define AUX_z                   'z'
-#define AUX_0                   '0'
-#define AUX_1                   '1'
-#define AUX_2                   '2'
-#define AUX_3                   '3'
-#define AUX_4                   '4'
-#define AUX_5                   '5'
-#define AUX_6                   '6'
-#define AUX_7                   '7'
-#define AUX_8                   '8'
-#define AUX_9                   '9'
-
-/*
-** ToolKit Gets and Sets
-*/
-#define AUX_FD                  1  /* return fd (long) */
-#define AUX_COLORMAP            3  /* pass buf of r, g and b (unsigned char) */
-#define AUX_GREYSCALEMAP        4
-#define AUX_FOGMAP              5  /* pass fog and color bits (long) */
-#define AUX_ONECOLOR            6  /* pass index, r, g, and b (long) */
-
-/*
-** Color Macros
-*/
-
-#define AUX_BLACK               0
-#define AUX_RED                 13
-#define AUX_GREEN               14
-#define AUX_YELLOW              15
-#define AUX_BLUE                16
-#define AUX_MAGENTA             17
-#define AUX_CYAN                18
-#define AUX_WHITE               19
-
-extern float auxRGBMap[20][3];
-
-#define AUX_SETCOLOR(x, y) (AUX_WIND_IS_RGB((x)) ? \
-                           glColor3fv(auxRGBMap[(y)]) : glIndexf((y)))
-
-/*
-** RGB Image Structure
-*/
-
-typedef struct _AUX_RGBImageRec {
-    GLint sizeX, sizeY;
-    unsigned char *data;
-} AUX_RGBImageRec;
-
-/*
-** Prototypes
-*/
-
-void APIENTRY auxInitDisplayMode(GLenum);
-void APIENTRY auxInitPosition(int, int, int, int);
-
-/* GLenum APIENTRY auxInitWindow(LPCTSTR); */
-#ifdef UNICODE
-#define auxInitWindow auxInitWindowW
-#else
-#define auxInitWindow auxInitWindowA
-#endif
-GLenum APIENTRY auxInitWindowA(LPCSTR);
-GLenum APIENTRY auxInitWindowW(LPCWSTR);
-
-void APIENTRY auxCloseWindow(void);
-void APIENTRY auxQuit(void);
-void APIENTRY auxSwapBuffers(void);
-
-typedef void (CALLBACK* AUXMAINPROC)(void);
-void APIENTRY auxMainLoop(AUXMAINPROC);
-
-typedef void (CALLBACK* AUXEXPOSEPROC)(int, int);
-void APIENTRY auxExposeFunc(AUXEXPOSEPROC);
-
-typedef void (CALLBACK* AUXRESHAPEPROC)(GLsizei, GLsizei);
-void APIENTRY auxReshapeFunc(AUXRESHAPEPROC);
-
-typedef void (CALLBACK* AUXIDLEPROC)(void);
-void APIENTRY auxIdleFunc(AUXIDLEPROC);
-
-typedef void (CALLBACK* AUXKEYPROC)(void);
-void APIENTRY auxKeyFunc(int, AUXKEYPROC);
-
-typedef void (CALLBACK* AUXMOUSEPROC)(AUX_EVENTREC *);
-void APIENTRY auxMouseFunc(int, int, AUXMOUSEPROC);
-
-int  APIENTRY auxGetColorMapSize(void);
-void APIENTRY auxGetMouseLoc(int *, int *);
-void APIENTRY auxSetOneColor(int, float, float, float);
-void APIENTRY auxSetFogRamp(int, int);
-void APIENTRY auxSetGreyRamp(void);
-void APIENTRY auxSetRGBMap(int, float *);
-
-/* AUX_RGBImageRec * APIENTRY auxRGBImageLoad(LPCTSTR); */
-#ifdef UNICODE
-#define auxRGBImageLoad auxRGBImageLoadW
-#else
-#define auxRGBImageLoad auxRGBImageLoadA
-#endif
-AUX_RGBImageRec * APIENTRY auxRGBImageLoadA(LPCSTR);
-AUX_RGBImageRec * APIENTRY auxRGBImageLoadW(LPCWSTR);
-
-#ifdef UNICODE
-#define auxDIBImageLoad auxDIBImageLoadW
-#else
-#define auxDIBImageLoad auxDIBImageLoadA
-#endif
-AUX_RGBImageRec * APIENTRY auxDIBImageLoadA(LPCSTR);
-AUX_RGBImageRec * APIENTRY auxDIBImageLoadW(LPCWSTR);
-
-void APIENTRY auxCreateFont(void);
-/* void APIENTRY auxDrawStr(LPCTSTR); */
-#ifdef UNICODE
-#define auxDrawStr auxDrawStrW
-#else
-#define auxDrawStr auxDrawStrA
-#endif
-void APIENTRY auxDrawStrA(LPCSTR);
-void APIENTRY auxDrawStrW(LPCWSTR);
-
-void APIENTRY auxWireSphere(GLdouble);
-void APIENTRY auxSolidSphere(GLdouble);
-void APIENTRY auxWireCube(GLdouble);
-void APIENTRY auxSolidCube(GLdouble);
-void APIENTRY auxWireBox(GLdouble, GLdouble, GLdouble);
-void APIENTRY auxSolidBox(GLdouble, GLdouble, GLdouble);
-void APIENTRY auxWireTorus(GLdouble, GLdouble);
-void APIENTRY auxSolidTorus(GLdouble, GLdouble);
-void APIENTRY auxWireCylinder(GLdouble, GLdouble);
-void APIENTRY auxSolidCylinder(GLdouble, GLdouble);
-void APIENTRY auxWireIcosahedron(GLdouble);
-void APIENTRY auxSolidIcosahedron(GLdouble);
-void APIENTRY auxWireOctahedron(GLdouble);
-void APIENTRY auxSolidOctahedron(GLdouble);
-void APIENTRY auxWireTetrahedron(GLdouble);
-void APIENTRY auxSolidTetrahedron(GLdouble);
-void APIENTRY auxWireDodecahedron(GLdouble);
-void APIENTRY auxSolidDodecahedron(GLdouble);
-void APIENTRY auxWireCone(GLdouble, GLdouble);
-void APIENTRY auxSolidCone(GLdouble, GLdouble);
-void APIENTRY auxWireTeapot(GLdouble);
-void APIENTRY auxSolidTeapot(GLdouble);
-
-/*
-** Window specific functions
-** hwnd, hdc, and hglrc valid after auxInitWindow()
-*/
-HWND  APIENTRY auxGetHWND(void);
-HDC   APIENTRY auxGetHDC(void);
-HGLRC APIENTRY auxGetHGLRC(void);
-
-/*
-** Viewperf support functions and constants
-*/
-/* Display Mode Selection Criteria */
-enum {
-    AUX_USE_ID = 1,
-    AUX_EXACT_MATCH,
-    AUX_MINIMUM_CRITERIA
-};
-void   APIENTRY auxInitDisplayModePolicy(GLenum);
-GLenum APIENTRY auxInitDisplayModeID(GLint);
-GLenum APIENTRY auxGetDisplayModePolicy(void);
-GLint  APIENTRY auxGetDisplayModeID(void);
-GLenum APIENTRY auxGetDisplayMode(void);
-
-#ifdef __cplusplus
-}
-#endif
-
-#endif /* __GLAUX_H__ */
diff --git a/Assignment1/Assignment1/include/GL/GLU.H b/Assignment1/Assignment1/include/GL/GLU.H
deleted file mode 100644
index bf8a6f6..0000000
--- a/Assignment1/Assignment1/include/GL/GLU.H
+++ /dev/null
@@ -1,584 +0,0 @@
-/*++ BUILD Version: 0004    // Increment this if a change has global effects
-
-Copyright (c) 1985-95, Microsoft Corporation
-
-Module Name:
-
-    glu.h
-
-Abstract:
-
-    Procedure declarations, constant definitions and macros for the OpenGL
-    Utility Library.
-
---*/
-
-#ifndef __glu_h__
-#ifndef __GLU_H__
-
-#define __glu_h__
-#define __GLU_H__
-
-#include <GL/gl.h>
-
-#ifdef __cplusplus
-extern "C" {
-#endif
-
-/*
-** Copyright 1991-1993, Silicon Graphics, Inc.
-** All Rights Reserved.
-** 
-** This is UNPUBLISHED PROPRIETARY SOURCE CODE of Silicon Graphics, Inc.;
-** the contents of this file may not be disclosed to third parties, copied or
-** duplicated in any form, in whole or in part, without the prior written
-** permission of Silicon Graphics, Inc.
-** 
-** RESTRICTED RIGHTS LEGEND:
-** Use, duplication or disclosure by the Government is subject to restrictions
-** as set forth in subdivision (c)(1)(ii) of the Rights in Technical Data
-** and Computer Software clause at DFARS 252.227-7013, and/or in similar or
-** successor clauses in the FAR, DOD or NASA FAR Supplement. Unpublished -
-** rights reserved under the Copyright Laws of the United States.
-*/
-
-/*
-** Return the error string associated with a particular error code.
-** This will return 0 for an invalid error code.
-**
-** The generic function prototype that can be compiled for ANSI or Unicode
-** is defined as follows:
-**
-** LPCTSTR APIENTRY gluErrorStringWIN (GLenum errCode);
-*/
-#ifdef UNICODE
-#define gluErrorStringWIN(errCode) ((LPCSTR)  gluErrorUnicodeStringEXT(errCode))
-#else
-#define gluErrorStringWIN(errCode) ((LPCWSTR) gluErrorString(errCode))
-#endif
-
-const GLubyte* APIENTRY gluErrorString (
-    GLenum   errCode);
-
-const wchar_t* APIENTRY gluErrorUnicodeStringEXT (
-    GLenum   errCode);
-
-const GLubyte* APIENTRY gluGetString (
-    GLenum   name);
-
-void APIENTRY gluOrtho2D (
-    GLdouble left, 
-    GLdouble right, 
-    GLdouble bottom, 
-    GLdouble top);
-
-void APIENTRY gluPerspective (
-    GLdouble fovy, 
-    GLdouble aspect, 
-    GLdouble zNear, 
-    GLdouble zFar);
-
-void APIENTRY gluPickMatrix (
-    GLdouble x, 
-    GLdouble y, 
-    GLdouble width, 
-    GLdouble height, 
-    GLint    viewport[4]);
-
-void APIENTRY gluLookAt (
-    GLdouble eyex, 
-    GLdouble eyey, 
-    GLdouble eyez, 
-    GLdouble centerx, 
-    GLdouble centery, 
-    GLdouble centerz, 
-    GLdouble upx, 
-    GLdouble upy, 
-    GLdouble upz);
-
-int APIENTRY gluProject (
-    GLdouble        objx, 
-    GLdouble        objy, 
-    GLdouble        objz,  
-    const GLdouble  modelMatrix[16], 
-    const GLdouble  projMatrix[16], 
-    const GLint     viewport[4], 
-    GLdouble        *winx, 
-    GLdouble        *winy, 
-    GLdouble        *winz);
-
-int APIENTRY gluUnProject (
-    GLdouble       winx, 
-    GLdouble       winy, 
-    GLdouble       winz, 
-    const GLdouble modelMatrix[16], 
-    const GLdouble projMatrix[16], 
-    const GLint    viewport[4], 
-    GLdouble       *objx, 
-    GLdouble       *objy, 
-    GLdouble       *objz);
-
-
-int APIENTRY gluScaleImage (
-    GLenum      format, 
-    GLint       widthin, 
-    GLint       heightin, 
-    GLenum      typein, 
-    const void  *datain, 
-    GLint       widthout, 
-    GLint       heightout, 
-    GLenum      typeout, 
-    void        *dataout);
-
-
-int APIENTRY gluBuild1DMipmaps (
-    GLenum      target, 
-    GLint       components, 
-    GLint       width, 
-    GLenum      format, 
-    GLenum      type, 
-    const void  *data);
-
-int APIENTRY gluBuild2DMipmaps (
-    GLenum      target, 
-    GLint       components, 
-    GLint       width, 
-    GLint       height, 
-    GLenum      format, 
-    GLenum      type, 
-    const void  *data);
-
-#ifdef __cplusplus
-
-class GLUnurbs;
-class GLUquadric;
-class GLUtesselator;
-
-/* backwards compatibility: */
-typedef class GLUnurbs GLUnurbsObj;
-typedef class GLUquadric GLUquadricObj;
-typedef class GLUtesselator GLUtesselatorObj;
-typedef class GLUtesselator GLUtriangulatorObj;
-
-#else
-
-typedef struct GLUnurbs GLUnurbs;
-typedef struct GLUquadric GLUquadric;
-typedef struct GLUtesselator GLUtesselator;
-
-/* backwards compatibility: */
-typedef struct GLUnurbs GLUnurbsObj;
-typedef struct GLUquadric GLUquadricObj;
-typedef struct GLUtesselator GLUtesselatorObj;
-typedef struct GLUtesselator GLUtriangulatorObj;
-
-#endif
-
-
-GLUquadric* APIENTRY gluNewQuadric (void);
-void APIENTRY gluDeleteQuadric (
-    GLUquadric          *state);
-
-void APIENTRY gluQuadricNormals (
-    GLUquadric          *quadObject, 
-    GLenum              normals);
-
-void APIENTRY gluQuadricTexture (
-    GLUquadric          *quadObject, 
-    GLboolean           textureCoords);
-
-void APIENTRY gluQuadricOrientation (
-    GLUquadric          *quadObject, 
-    GLenum              orientation);
-
-void APIENTRY gluQuadricDrawStyle (
-    GLUquadric          *quadObject, 
-    GLenum              drawStyle);
-
-void APIENTRY gluCylinder (
-    GLUquadric          *qobj, 
-    GLdouble            baseRadius, 
-    GLdouble            topRadius, 
-    GLdouble            height, 
-    GLint               slices, 
-    GLint               stacks);
-
-void APIENTRY gluDisk (
-    GLUquadric          *qobj, 
-    GLdouble            innerRadius, 
-    GLdouble            outerRadius, 
-    GLint               slices, 
-    GLint               loops);
-
-void APIENTRY gluPartialDisk (
-    GLUquadric          *qobj, 
-    GLdouble            innerRadius, 
-    GLdouble            outerRadius, 
-    GLint               slices, 
-    GLint               loops, 
-    GLdouble            startAngle, 
-    GLdouble            sweepAngle);
-
-void APIENTRY gluSphere (
-    GLUquadric          *qobj, 
-    GLdouble            radius, 
-    GLint               slices, 
-    GLint               stacks);
-
-void APIENTRY gluQuadricCallback (
-    GLUquadric          *qobj, 
-    GLenum              which, 
-    void                (CALLBACK* fn)());
-
-GLUtesselator* APIENTRY  gluNewTess(          
-    void );
-
-void APIENTRY  gluDeleteTess(       
-    GLUtesselator       *tess );
-
-void APIENTRY  gluTessBeginPolygon( 
-    GLUtesselator       *tess,
-    void                *polygon_data );
-
-void APIENTRY  gluTessBeginContour( 
-    GLUtesselator       *tess );
-
-void APIENTRY  gluTessVertex(       
-    GLUtesselator       *tess,
-    GLdouble            coords[3], 
-    void                *data );
-
-void APIENTRY  gluTessEndContour(   
-    GLUtesselator       *tess );
-
-void APIENTRY  gluTessEndPolygon(   
-    GLUtesselator       *tess );
-
-void APIENTRY  gluTessProperty(     
-    GLUtesselator       *tess,
-    GLenum              which, 
-    GLdouble            value );
- 
-void APIENTRY  gluTessNormal(       
-    GLUtesselator       *tess, 
-    GLdouble            x,
-    GLdouble            y, 
-    GLdouble            z );
-
-void APIENTRY  gluTessCallback(     
-    GLUtesselator       *tess,
-    GLenum              which, 
-    void                (CALLBACK *fn)());
-
-void APIENTRY  gluGetTessProperty(  
-    GLUtesselator       *tess,
-    GLenum              which, 
-    GLdouble            *value );
- 
-GLUnurbs* APIENTRY gluNewNurbsRenderer (void);
-
-void APIENTRY gluDeleteNurbsRenderer (
-    GLUnurbs            *nobj);
-
-void APIENTRY gluBeginSurface (
-    GLUnurbs            *nobj);
-
-void APIENTRY gluBeginCurve (
-    GLUnurbs            *nobj);
-
-void APIENTRY gluEndCurve (
-    GLUnurbs            *nobj);
-
-void APIENTRY gluEndSurface (
-    GLUnurbs            *nobj);
-
-void APIENTRY gluBeginTrim (
-    GLUnurbs            *nobj);
-
-void APIENTRY gluEndTrim (
-    GLUnurbs            *nobj);
-
-void APIENTRY gluPwlCurve (
-    GLUnurbs            *nobj, 
-    GLint               count, 
-    GLfloat             *array, 
-    GLint               stride, 
-    GLenum              type);
-
-void APIENTRY gluNurbsCurve (
-    GLUnurbs            *nobj, 
-    GLint               nknots, 
-    GLfloat             *knot, 
-    GLint               stride, 
-    GLfloat             *ctlarray, 
-    GLint               order, 
-    GLenum              type);
-
-void APIENTRY 
-gluNurbsSurface(     
-    GLUnurbs            *nobj, 
-    GLint               sknot_count, 
-    float               *sknot, 
-    GLint               tknot_count, 
-    GLfloat             *tknot, 
-    GLint               s_stride, 
-    GLint               t_stride, 
-    GLfloat             *ctlarray, 
-    GLint               sorder, 
-    GLint               torder, 
-    GLenum              type);
-
-void APIENTRY 
-gluLoadSamplingMatrices (
-    GLUnurbs            *nobj, 
-    const GLfloat       modelMatrix[16], 
-    const GLfloat       projMatrix[16], 
-    const GLint         viewport[4] );
-
-void APIENTRY 
-gluNurbsProperty (
-    GLUnurbs            *nobj, 
-    GLenum              property, 
-    GLfloat             value );
-
-void APIENTRY 
-gluGetNurbsProperty (
-    GLUnurbs            *nobj, 
-    GLenum              property, 
-    GLfloat             *value );
-
-void APIENTRY 
-gluNurbsCallback (
-    GLUnurbs            *nobj, 
-    GLenum              which, 
-    void                (CALLBACK* fn)() );
-
-
-/****           Callback function prototypes    ****/
-
-/* gluQuadricCallback */
-typedef void (CALLBACK* GLUquadricErrorProc) (GLenum);
-
-/* gluTessCallback */
-typedef void (CALLBACK* GLUtessBeginProc)        (GLenum);
-typedef void (CALLBACK* GLUtessEdgeFlagProc)     (GLboolean);
-typedef void (CALLBACK* GLUtessVertexProc)       (void *);
-typedef void (CALLBACK* GLUtessEndProc)          (void);
-typedef void (CALLBACK* GLUtessErrorProc)        (GLenum);
-typedef void (CALLBACK* GLUtessCombineProc)      (GLdouble[3],
-                                                  void*[4], 
-                                                  GLfloat[4],
-                                                  void** );
-typedef void (CALLBACK* GLUtessBeginDataProc)    (GLenum, void *);
-typedef void (CALLBACK* GLUtessEdgeFlagDataProc) (GLboolean, void *);
-typedef void (CALLBACK* GLUtessVertexDataProc)   (void *, void *);
-typedef void (CALLBACK* GLUtessEndDataProc)      (void *);
-typedef void (CALLBACK* GLUtessErrorDataProc)    (GLenum, void *);
-typedef void (CALLBACK* GLUtessCombineDataProc)  (GLdouble[3],
-                                                  void*[4], 
-                                                  GLfloat[4],
-                                                  void**,
-                                                  void* );
-
-/* gluNurbsCallback */
-typedef void (CALLBACK* GLUnurbsErrorProc)   (GLenum);
-
-
-/****           Generic constants               ****/
-
-/* Version */
-#define GLU_VERSION_1_1                 1
-#define GLU_VERSION_1_2                 1
-
-/* Errors: (return value 0 = no error) */
-#define GLU_INVALID_ENUM        100900
-#define GLU_INVALID_VALUE       100901
-#define GLU_OUT_OF_MEMORY       100902
-#define GLU_INCOMPATIBLE_GL_VERSION     100903
-
-/* StringName */
-#define GLU_VERSION             100800
-#define GLU_EXTENSIONS          100801
-
-/* Boolean */
-#define GLU_TRUE                GL_TRUE
-#define GLU_FALSE               GL_FALSE
-
-
-/****           Quadric constants               ****/
-
-/* QuadricNormal */
-#define GLU_SMOOTH              100000
-#define GLU_FLAT                100001
-#define GLU_NONE                100002
-
-/* QuadricDrawStyle */
-#define GLU_POINT               100010
-#define GLU_LINE                100011
-#define GLU_FILL                100012
-#define GLU_SILHOUETTE          100013
-
-/* QuadricOrientation */
-#define GLU_OUTSIDE             100020
-#define GLU_INSIDE              100021
-
-/* Callback types: */
-/*      GLU_ERROR               100103 */
-
-
-/****           Tesselation constants           ****/
-
-#define GLU_TESS_MAX_COORD              1.0e150
-
-/* TessProperty */
-#define GLU_TESS_WINDING_RULE           100140
-#define GLU_TESS_BOUNDARY_ONLY          100141
-#define GLU_TESS_TOLERANCE              100142
-
-/* TessWinding */
-#define GLU_TESS_WINDING_ODD            100130
-#define GLU_TESS_WINDING_NONZERO        100131
-#define GLU_TESS_WINDING_POSITIVE       100132
-#define GLU_TESS_WINDING_NEGATIVE       100133
-#define GLU_TESS_WINDING_ABS_GEQ_TWO    100134
-
-/* TessCallback */
-#define GLU_TESS_BEGIN          100100  /* void (CALLBACK*)(GLenum    type)  */
-#define GLU_TESS_VERTEX         100101  /* void (CALLBACK*)(void      *data) */
-#define GLU_TESS_END            100102  /* void (CALLBACK*)(void)            */
-#define GLU_TESS_ERROR          100103  /* void (CALLBACK*)(GLenum    errno) */
-#define GLU_TESS_EDGE_FLAG      100104  /* void (CALLBACK*)(GLboolean boundaryEdge)  */
-#define GLU_TESS_COMBINE        100105  /* void (CALLBACK*)(GLdouble  coords[3],
-                                                            void      *data[4],
-                                                            GLfloat   weight[4],
-                                                            void      **dataOut)     */
-#define GLU_TESS_BEGIN_DATA     100106  /* void (CALLBACK*)(GLenum    type,  
-                                                            void      *polygon_data) */
-#define GLU_TESS_VERTEX_DATA    100107  /* void (CALLBACK*)(void      *data, 
-                                                            void      *polygon_data) */
-#define GLU_TESS_END_DATA       100108  /* void (CALLBACK*)(void      *polygon_data) */
-#define GLU_TESS_ERROR_DATA     100109  /* void (CALLBACK*)(GLenum    errno, 
-                                                            void      *polygon_data) */
-#define GLU_TESS_EDGE_FLAG_DATA 100110  /* void (CALLBACK*)(GLboolean boundaryEdge,
-                                                            void      *polygon_data) */
-#define GLU_TESS_COMBINE_DATA   100111  /* void (CALLBACK*)(GLdouble  coords[3],
-                                                            void      *data[4],
-                                                            GLfloat   weight[4],
-                                                            void      **dataOut,
-                                                            void      *polygon_data) */
-
-/* TessError */
-#define GLU_TESS_ERROR1     100151
-#define GLU_TESS_ERROR2     100152
-#define GLU_TESS_ERROR3     100153
-#define GLU_TESS_ERROR4     100154
-#define GLU_TESS_ERROR5     100155
-#define GLU_TESS_ERROR6     100156
-#define GLU_TESS_ERROR7     100157
-#define GLU_TESS_ERROR8     100158
-
-#define GLU_TESS_MISSING_BEGIN_POLYGON  GLU_TESS_ERROR1
-#define GLU_TESS_MISSING_BEGIN_CONTOUR  GLU_TESS_ERROR2
-#define GLU_TESS_MISSING_END_POLYGON    GLU_TESS_ERROR3
-#define GLU_TESS_MISSING_END_CONTOUR    GLU_TESS_ERROR4
-#define GLU_TESS_COORD_TOO_LARGE        GLU_TESS_ERROR5
-#define GLU_TESS_NEED_COMBINE_CALLBACK  GLU_TESS_ERROR6
-
-/****           NURBS constants                 ****/
-
-/* NurbsProperty */
-#define GLU_AUTO_LOAD_MATRIX    100200
-#define GLU_CULLING             100201
-#define GLU_SAMPLING_TOLERANCE  100203
-#define GLU_DISPLAY_MODE        100204
-#define GLU_PARAMETRIC_TOLERANCE        100202
-#define GLU_SAMPLING_METHOD             100205
-#define GLU_U_STEP                      100206
-#define GLU_V_STEP                      100207
-
-/* NurbsSampling */
-#define GLU_PATH_LENGTH                 100215
-#define GLU_PARAMETRIC_ERROR            100216
-#define GLU_DOMAIN_DISTANCE             100217
-
-
-/* NurbsTrim */
-#define GLU_MAP1_TRIM_2         100210
-#define GLU_MAP1_TRIM_3         100211
-
-/* NurbsDisplay */
-/*      GLU_FILL                100012 */
-#define GLU_OUTLINE_POLYGON     100240
-#define GLU_OUTLINE_PATCH       100241
-
-/* NurbsCallback */
-/*      GLU_ERROR               100103 */
-
-/* NurbsErrors */
-#define GLU_NURBS_ERROR1        100251
-#define GLU_NURBS_ERROR2        100252
-#define GLU_NURBS_ERROR3        100253
-#define GLU_NURBS_ERROR4        100254
-#define GLU_NURBS_ERROR5        100255
-#define GLU_NURBS_ERROR6        100256
-#define GLU_NURBS_ERROR7        100257
-#define GLU_NURBS_ERROR8        100258
-#define GLU_NURBS_ERROR9        100259
-#define GLU_NURBS_ERROR10       100260
-#define GLU_NURBS_ERROR11       100261
-#define GLU_NURBS_ERROR12       100262
-#define GLU_NURBS_ERROR13       100263
-#define GLU_NURBS_ERROR14       100264
-#define GLU_NURBS_ERROR15       100265
-#define GLU_NURBS_ERROR16       100266
-#define GLU_NURBS_ERROR17       100267
-#define GLU_NURBS_ERROR18       100268
-#define GLU_NURBS_ERROR19       100269
-#define GLU_NURBS_ERROR20       100270
-#define GLU_NURBS_ERROR21       100271
-#define GLU_NURBS_ERROR22       100272
-#define GLU_NURBS_ERROR23       100273
-#define GLU_NURBS_ERROR24       100274
-#define GLU_NURBS_ERROR25       100275
-#define GLU_NURBS_ERROR26       100276
-#define GLU_NURBS_ERROR27       100277
-#define GLU_NURBS_ERROR28       100278
-#define GLU_NURBS_ERROR29       100279
-#define GLU_NURBS_ERROR30       100280
-#define GLU_NURBS_ERROR31       100281
-#define GLU_NURBS_ERROR32       100282
-#define GLU_NURBS_ERROR33       100283
-#define GLU_NURBS_ERROR34       100284
-#define GLU_NURBS_ERROR35       100285
-#define GLU_NURBS_ERROR36       100286
-#define GLU_NURBS_ERROR37       100287
-
-/****           Backwards compatibility for old tesselator           ****/
-
-void APIENTRY   gluBeginPolygon( GLUtesselator *tess );
-
-void APIENTRY   gluNextContour(  GLUtesselator *tess, 
-                                 GLenum        type );
-
-void APIENTRY   gluEndPolygon(   GLUtesselator *tess );
-
-/* Contours types -- obsolete! */
-#define GLU_CW          100120
-#define GLU_CCW         100121
-#define GLU_INTERIOR    100122
-#define GLU_EXTERIOR    100123
-#define GLU_UNKNOWN     100124
-
-/* Names without "TESS_" prefix */
-#define GLU_BEGIN       GLU_TESS_BEGIN
-#define GLU_VERTEX      GLU_TESS_VERTEX
-#define GLU_END         GLU_TESS_END
-#define GLU_ERROR       GLU_TESS_ERROR
-#define GLU_EDGE_FLAG   GLU_TESS_EDGE_FLAG
-
-#ifdef __cplusplus
-}
-#endif
-
-#endif /* __GLU_H__ */
-#endif /* __glu_h__ */
diff --git a/Assignment1/Assignment1/include/GL/glui.h b/Assignment1/Assignment1/include/GL/glui.h
deleted file mode 100644
index 3b2d72d..0000000
--- a/Assignment1/Assignment1/include/GL/glui.h
+++ /dev/null
@@ -1,1694 +0,0 @@
-/****************************************************************************
-  
-  GLUI User Interface Toolkit
-  ---------------------------
-
-     glui.h - Main header for GLUI User Interface Toolkit
-
-
-          --------------------------------------------------
-
-  Copyright (c) 1998 Paul Rademacher
-
-  This program is freely distributable without licensing fees and is
-  provided without guarantee or warrantee expressed or implied. This
-  program is -not- in the public domain.
-
-*****************************************************************************/
-
-
-#ifndef _GLUI_H_
-#define _GLUI_H_
-
-#include <GL/glut.h>
-#include <stdlib.h>
-#include <stdio.h>
-#include <string.h>
-
-#define GLUI_VERSION 2.01f    /********** Current version **********/
-
-#ifdef WIN32
-#pragma comment(lib, "glui32.lib")  // Link against GLUI library  
-#endif
-
-class Arcball;
-
-/********** Do some basic defines *******/
-#ifndef false
-#define true 1
-#define false 0
-#endif
-
-#ifndef Byte
-#define Byte unsigned char
-#endif
-
-#ifndef _RGBC_
-class RGBc {
-public:
-  Byte r, g, b;
-    
-  void set(Byte r,Byte g,Byte b) {this->r=r;this->g=g;this->b=b;};
-    
-  RGBc( void ) {};
-  RGBc( Byte r, Byte g, Byte b ) { set( r, g, b ); };
-};
-#define _RGBC_
-#endif
-
-/********** List of GLUT callbacks ********/
-
-enum GLUI_Glut_CB_Types { 
-  GLUI_GLUT_RESHAPE,
-  GLUI_GLUT_KEYBOARD,
-  GLUI_GLUT_DISPLAY,
-  GLUI_GLUT_MOUSE,
-  GLUI_GLUT_MOTION,
-  GLUI_GLUT_SPECIAL,
-  GLUI_GLUT_PASSIVE_MOTION,  
-  GLUI_GLUT_ENTRY,
-  GLUI_GLUT_VISIBILITY  
-};
-
-/********** List of control types **********/
-enum GLUI_Control_Types {
-  GLUI_CONTROL_CHECKBOX =1,
-  GLUI_CONTROL_BUTTON,
-  GLUI_CONTROL_RADIOBUTTON,
-  GLUI_CONTROL_RADIOGROUP,
-  GLUI_CONTROL_SLIDER,
-  GLUI_CONTROL_STATICTEXT,
-  GLUI_CONTROL_EDITTEXT,
-  GLUI_CONTROL_BITMAP,
-  GLUI_CONTROL_PANEL,
-  GLUI_CONTROL_SPINNER,
-  GLUI_CONTROL_SEPARATOR,
-  GLUI_CONTROL_COLUMN,
-  GLUI_CONTROL_LISTBOX,
-  GLUI_CONTROL_MOUSE_INTERACTION,
-  GLUI_CONTROL_ROTATION,
-  GLUI_CONTROL_TRANSLATION,
-  GLUI_CONTROL_ROLLOUT
-};
-
-
-/********* Constants for window placement **********/
-#define GLUI_XOFF                     6
-#define GLUI_YOFF                     6
-#define GLUI_ITEMSPACING              3
-#define GLUI_CHECKBOX_SIZE           13
-#define GLUI_RADIOBUTTON_SIZE        13
-#define GLUI_BUTTON_SIZE             20
-#define GLUI_STATICTEXT_SIZE         13
-#define GLUI_SEPARATOR_HEIGHT         8
-#define GLUI_DEFAULT_CONTROL_WIDTH  100
-#define GLUI_DEFAULT_CONTROL_HEIGHT  13 
-#define GLUI_EDITTEXT_BOXINNERMARGINX   3
-#define GLUI_EDITTEXT_HEIGHT            20
-#define GLUI_EDITTEXT_WIDTH            130
-#define GLUI_EDITTEXT_MIN_INT_WIDTH   35
-#define GLUI_EDITTEXT_MIN_TEXT_WIDTH   50
-#define GLUI_PANEL_NAME_DROP           8
-#define GLUI_PANEL_EMBOSS_TOP          4
-/* #define GLUI_ROTATION_WIDTH            60*/
-/*  #define GLUI_ROTATION_HEIGHT           78 */
-#define GLUI_ROTATION_WIDTH            50
-#define GLUI_ROTATION_HEIGHT           (GLUI_ROTATION_WIDTH+18)
-#define GLUI_MOUSE_INTERACTION_WIDTH   50
-#define GLUI_MOUSE_INTERACTION_HEIGHT  (GLUI_MOUSE_INTERACTION_WIDTH)+18
-
-
-/** Different panel control types **/
-#define GLUI_PANEL_NONE      0
-#define GLUI_PANEL_EMBOSSED  1
-#define GLUI_PANEL_RAISED    2
-
-
-/**  Max # of els in control's float_array  **/
-#define GLUI_DEF_MAX_ARRAY  30
-
-/********* The control's 'active' behavior *********/
-#define GLUI_CONTROL_ACTIVE_MOUSEDOWN       1
-#define GLUI_CONTROL_ACTIVE_PERMANENT       2
-
-
-/********* Control alignment types **********/
-#define GLUI_ALIGN_CENTER   1
-#define GLUI_ALIGN_RIGHT    2
-#define GLUI_ALIGN_LEFT     3
-
-
-/********** Limit types - how to limit spinner values *********/
-#define GLUI_LIMIT_NONE    0
-#define GLUI_LIMIT_CLAMP   1
-#define GLUI_LIMIT_WRAP    2
-
-
-/********** Translation control types ********************/
-
-#define GLUI_TRANSLATION_XY 0
-#define GLUI_TRANSLATION_Z  1
-#define GLUI_TRANSLATION_X  2
-#define GLUI_TRANSLATION_Y  3
-
-#define GLUI_TRANSLATION_LOCK_NONE 0
-#define GLUI_TRANSLATION_LOCK_X    1
-#define GLUI_TRANSLATION_LOCK_Y    2
-
-/********** How was a control activated? *****************/
-#define GLUI_ACTIVATE_MOUSE 1
-#define GLUI_ACTIVATE_TAB   2
-
-
-/********** What type of live variable does a control have? **********/
-#define GLUI_LIVE_NONE          0
-#define GLUI_LIVE_INT           1
-#define GLUI_LIVE_FLOAT         2
-#define GLUI_LIVE_TEXT          3
-#define GLUI_LIVE_DOUBLE        4
-#define GLUI_LIVE_FLOAT_ARRAY   5
-
-
-/**********  Translation codes  **********/
-
-enum TranslationCodes  {
-  GLUI_TRANSLATION_MOUSE_NONE=0,
-  GLUI_TRANSLATION_MOUSE_UP,
-  GLUI_TRANSLATION_MOUSE_DOWN,
-  GLUI_TRANSLATION_MOUSE_LEFT,
-  GLUI_TRANSLATION_MOUSE_RIGHT,
-  GLUI_TRANSLATION_MOUSE_UP_LEFT,
-  GLUI_TRANSLATION_MOUSE_UP_RIGHT,
-  GLUI_TRANSLATION_MOUSE_DOWN_LEFT,
-  GLUI_TRANSLATION_MOUSE_DOWN_RIGHT
-};
-
-/************ A string type for us to use **********/
-/*  typedef char  GLUI_String[300]; */
-class GLUI_String
-{
-public:
-  char string[300];
-
-  char &operator[]( int i ) {
-    return string[i];
-  }
-
-  operator char*() { return (char*) &string[0]; };
-  /*    operator void*() { return (void*) &string[0]; }; */
-
-  GLUI_String( void ) {
-    string[0] = '\0';
-  }
-
-  GLUI_String( char *text ) {
-    strcpy( string, text );
-  }
-};
-
-
-/********* Pre-declare the various classes *********/
-class GLUI;
-class GLUI_Control;
-class GLUI_Listbox;
-class GLUI_Rotation;
-class GLUI_Translation;
-class GLUI_Mouse_Interaction;
-class GLUI_Checkbox;
-class GLUI_Slider;
-class GLUI_Button;
-class GLUI_StaticText;
-class GLUI_Bitmap;
-class GLUI_EditText;
-class GLUI_Node;
-class GLUI_Main;
-class GLUI_Panel;
-class GLUI_Spinner;
-class GLUI_RadioButton;
-class GLUI_RadioGroup;
-class GLUI_Separator;
-class GLUI_Column;
-class GLUI_Master;
-class GLUI_Glut_Window;
-class GLUI_Rollout;
-
-
-
-/*** Flags for GLUI class constructor ***/
-#define  GLUI_SUBWINDOW          ((long)(1<< 1))
-#define  GLUI_SUBWINDOW_TOP      ((long)(1<< 2))
-#define  GLUI_SUBWINDOW_BOTTOM   ((long)(1<< 3))
-#define  GLUI_SUBWINDOW_LEFT     ((long)(1<< 4))
-#define  GLUI_SUBWINDOW_RIGHT    ((long)(1<< 5))
-
-/*** Codes for different type of edittext boxes and spinners ***/
-#define GLUI_EDITTEXT_TEXT             1
-#define GLUI_EDITTEXT_INT              2
-#define GLUI_EDITTEXT_FLOAT            3
-#define GLUI_SPINNER_INT               GLUI_EDITTEXT_INT
-#define GLUI_SPINNER_FLOAT             GLUI_EDITTEXT_FLOAT
-
-
-
-/*** Definition of callbacks ***/
-typedef void (*GLUI_Update_CB) (int id);
-typedef void (*Int1_CB)        (int);
-typedef void (*Int2_CB)        (int, int);
-typedef void (*Int3_CB)        (int, int, int);
-typedef void (*Int4_CB)        (int, int, int, int);
-
-                 
-
-/************************************************************/
-/*                                                          */
-/*          Base class, for hierarchical relationships      */
-/*                                                          */
-/************************************************************/
-
-class GLUI_Node {
-protected:
-  GLUI_Node *parent_node;
-  GLUI_Node *child_head;
-  GLUI_Node *child_tail;
-  GLUI_Node *next_sibling;
-  GLUI_Node *prev_sibling;
-
-public:
-  GLUI_Node *first_sibling( void );
-  GLUI_Node *last_sibling( void );
-  GLUI_Node *prev( void );
-  GLUI_Node *next( void );
-  GLUI_Node *first_child( void )   { return child_head; };
-  GLUI_Node *last_child( void )    { return child_tail; };
-  GLUI_Node *parent(void)          { return parent_node; };
-
-  void      link_this_to_parent_last( GLUI_Node *parent );
-  void      link_this_to_parent_first( GLUI_Node *parent );
-  void      link_this_to_sibling_next( GLUI_Node *sibling );
-  void      link_this_to_sibling_prev( GLUI_Node *sibling );
-  void      unlink( void );
-
-  void dump( FILE *out, char *name ) {
-    fprintf( out, "GLUI_node: %s\n", name );
-    fprintf( out, "   parent: %p     child_head: %p    child_tail: %p\n",
-         parent_node, child_head, child_tail );
-    fprintf( out, "   next: %p       prev: %p\n", next_sibling, prev_sibling );
-  }
-
-  GLUI_Node( void ) { 
-    parent_node= child_head = child_tail = next_sibling = prev_sibling = NULL;
-  }; 
-
-  friend class GLUI_Rollout;
-  friend class GLUI_Main;
-};
-
-
-
-/************************************************************/
-/*                                                          */
-/*                  Standard Bitmap stuff                   */
-/*                                                          */
-/************************************************************/
-
-enum GLUI_StdBitmaps_Codes {
-  GLUI_STDBITMAP_CHECKBOX_OFF=0,
-  GLUI_STDBITMAP_CHECKBOX_ON,
-  GLUI_STDBITMAP_RADIOBUTTON_OFF,
-  GLUI_STDBITMAP_RADIOBUTTON_ON,
-  GLUI_STDBITMAP_UP_ARROW,
-  GLUI_STDBITMAP_DOWN_ARROW,
-  GLUI_STDBITMAP_LEFT_ARROW,
-  GLUI_STDBITMAP_RIGHT_ARROW,
-  GLUI_STDBITMAP_SPINNER_UP_OFF,
-  GLUI_STDBITMAP_SPINNER_UP_ON,
-  GLUI_STDBITMAP_SPINNER_DOWN_OFF,
-  GLUI_STDBITMAP_SPINNER_DOWN_ON,
-
-  GLUI_STDBITMAP_CHECKBOX_OFF_DIS,    /*** Disactivated control bitmaps ***/
-  GLUI_STDBITMAP_CHECKBOX_ON_DIS,
-  GLUI_STDBITMAP_RADIOBUTTON_OFF_DIS,
-  GLUI_STDBITMAP_RADIOBUTTON_ON_DIS,
-  GLUI_STDBITMAP_SPINNER_UP_DIS,
-  GLUI_STDBITMAP_SPINNER_DOWN_DIS,
-  GLUI_STDBITMAP_LISTBOX_UP,
-  GLUI_STDBITMAP_LISTBOX_DOWN,
-  GLUI_STDBITMAP_LISTBOX_UP_DIS,
-  /***
-    GLUI_STDBITMAP_SLIDER_TAB,
-    ***/
-  GLUI_STDBITMAP_NUM_ITEMS
-};
-
-
-/************ Image Bitmap arrays **********/
-extern int glui_img_checkbox_0[];
-extern int glui_img_checkbox_1[];
-extern int glui_img_radiobutton_0[];
-extern int glui_img_radiobutton_1[];
-extern int glui_img_uparrow[];
-extern int glui_img_downarrow[];
-extern int glui_img_leftarrow[];
-extern int glui_img_rightarrow[];
-extern int glui_img_spinup_0[];
-extern int glui_img_spinup_1[];
-extern int glui_img_spindown_0[];
-extern int glui_img_spindown_1[];
-extern int glui_img_checkbox_0_dis[];
-extern int glui_img_checkbox_1_dis[];
-extern int glui_img_radiobutton_0_dis[];
-extern int glui_img_radiobutton_1_dis[];
-extern int glui_img_spinup_dis[];
-extern int glui_img_spindown_dis[];
-extern int glui_img_listbox_up[];
-extern int glui_img_listbox_down[];
-extern int glui_img_listbox_up_dis[];
-
-extern int *bitmap_arrays[];
-
-
-
-/************************************************************/
-/*                                                          */
-/*                  Class GLUI_Bitmap                       */
-/*                                                          */
-/************************************************************/
-class GLUI_Bitmap 
-{
-public:
-  unsigned char *pixels;
-  int            w, h;
-  
-  void load_from_array( int *array );
-
-  GLUI_Bitmap( void ) {
-    pixels = NULL;
-    w      = 0;
-    h      = 0;
-  }
-};
-
-
-
-
-/************************************************************/
-/*                                                          */
-/*                  Class GLUI_StdBitmap                    */
-/*                                                          */
-/************************************************************/
-class GLUI_StdBitmaps
-{
-public:
-  GLUI_Bitmap bitmaps[ GLUI_STDBITMAP_NUM_ITEMS ];
-
-  void draw( int bitmap_num, int x, int y );
-  
-  GLUI_StdBitmaps( void ) {
-    int i;
-
-    for( i=0; i<GLUI_STDBITMAP_NUM_ITEMS; i++ ) {
-      bitmaps[i].load_from_array( bitmap_arrays[i] );
-    }
-  }
-};
-
-
-
-
-/************************************************************/
-/*                                                          */
-/*                     Master GLUI Class                    */
-/*                                                          */
-/************************************************************/
-class GLUI_Master_Object {
-private:
-  GLUI_Node     glut_windows;
-  void (*glut_idle_CB)(void);
-
-  void                add_cb_to_glut_window(int window,int cb_type,void *cb);
-  
-public:
-  GLUI_Node     gluis;
-  GLUI_Control *active_control, *curr_left_button_glut_menu;
-  GLUI         *active_control_glui;
-  int           glui_id_counter;
-
-  GLUI_Glut_Window   *find_glut_window( int window_id );
-
-  void           set_glutIdleFunc(void (*f)(void));
-
-  /**************
-    void (*glut_keyboard_CB)(unsigned char, int, int);
-    void (*glut_reshape_CB)(int, int);
-    void (*glut_special_CB)(int, int, int);
-    void (*glut_mouse_CB)(int,int,int,int);
-    
-    void (*glut_passive_motion_CB)(int,int);
-    void (*glut_visibility_CB)(int);
-    void (*glut_motion_CB)(int,int);
-    void (*glut_display_CB)(void);
-    void (*glut_entry_CB)(int);
-    **********/
-
-  void  set_left_button_glut_menu_control( GLUI_Control *control );
-
-
-  /********** GLUT callthroughs **********/
-  /* These are the glut callbacks that we do not handle */
-
-  void set_glutReshapeFunc(void (*f)(int width, int height));
-  void set_glutKeyboardFunc(void (*f)(unsigned char key, int x, int y));
-  void set_glutSpecialFunc(void (*f)(int key, int x, int y));
-  void set_glutMouseFunc(void (*f)(int, int, int, int ));
-
-  void set_glutDisplayFunc(void (*f)(void)) {glutDisplayFunc(f);};
-  void set_glutTimerFunc(unsigned int millis, void (*f)(int value), int value)
-    { ::glutTimerFunc(millis,f,value);};
-  void set_glutOverlayDisplayFunc(void(*f)(void)){glutOverlayDisplayFunc(f);};
-  void set_glutSpaceballMotionFunc(Int3_CB f)  {glutSpaceballMotionFunc(f);};
-  void set_glutSpaceballRotateFunc(Int3_CB f)  {glutSpaceballRotateFunc(f);};
-  void set_glutSpaceballButtonFunc(Int2_CB f)  {glutSpaceballButtonFunc(f);};
-  void set_glutTabletMotionFunc(Int2_CB f)        {glutTabletMotionFunc(f);};
-  void set_glutTabletButtonFunc(Int4_CB f)        {glutTabletButtonFunc(f);};
-  /*    void set_glutWindowStatusFunc(Int1_CB f)        {glutWindowStatusFunc(f);}; */
-  void set_glutMenuStatusFunc(Int3_CB f)            {glutMenuStatusFunc(f);};
-  void set_glutMenuStateFunc(Int1_CB f)              {glutMenuStateFunc(f);};
-  void set_glutButtonBoxFunc(Int2_CB f)              {glutButtonBoxFunc(f);};
-  void set_glutDialsFunc(Int2_CB f)                      {glutDialsFunc(f);};  
-  
-
-  GLUI          *create_glui( char *name, long flags=0, int x=-1, int y=-1 ); 
-  GLUI          *create_glui_subwindow( int parent_window, long flags=0 );
-  GLUI          *find_glui_by_window_id( int window_id );
-  void           get_viewport_area( int *x, int *y, int *w, int *h );
-  void           auto_set_viewport( void );
-  void           close_all( void );
-  void           sync_live_all( void );
-
-  void           reshape( void );
-
-  float          get_version( void ) { return GLUI_VERSION; };
-
-  friend void    glui_idle_func(void);
-
-  GLUI_Master_Object( void ) {
-    glut_idle_CB    = NULL;
-    glui_id_counter = 1;
-  }
-};
-
-extern GLUI_Master_Object GLUI_Master;
-
-
-
-/************************************************************/
-/*                                                          */
-/*              Class for managing a GLUT window            */
-/*                                                          */
-/************************************************************/
-
-class GLUI_Glut_Window : public GLUI_Node {
-public:
-  int    glut_window_id;
-
-  /*********** Pointers to GLUT callthrough functions *****/
-  void (*glut_keyboard_CB)(unsigned char, int, int);
-  void (*glut_special_CB)(int, int, int);
-  void (*glut_reshape_CB)(int, int);
-  void (*glut_passive_motion_CB)(int,int);
-  void (*glut_mouse_CB)(int,int,int,int);
-  void (*glut_visibility_CB)(int);
-  void (*glut_motion_CB)(int,int);
-  void (*glut_display_CB)(void);
-  void (*glut_entry_CB)(int);
-
-  GLUI_Glut_Window( void ) {
-    glut_display_CB         = NULL;
-    glut_reshape_CB         = NULL;
-    glut_keyboard_CB        = NULL;
-    glut_special_CB         = NULL;
-    glut_mouse_CB           = NULL;
-    glut_motion_CB          = NULL;
-    glut_passive_motion_CB  = NULL;
-    glut_entry_CB           = NULL;
-    glut_visibility_CB      = NULL;
-    glut_window_id          = 0;
-  };
-};
-
-
-
-/************************************************************/
-/*                                                          */
-/*              Main GLUI class (not user-level)            */
-/*                                                          */
-/************************************************************/
-
-class GLUI_Main : public GLUI_Node {
-protected:
-  /*** Variables ***/
-  int           main_gfx_window_id;
-  int           mouse_button_down;
-  int           glut_window_id;
-  int           top_level_glut_window_id;
-  GLUI_Control *active_control;
-  GLUI_Control *mouse_over_control;
-  GLUI_Panel   *main_panel;
-  int           curr_cursor;
-  int           w, h;
-  long          flags; 
-  int           closing;
-  int           parent_window;
-  int           glui_id;
-
-  /********** Friend classes *************/
-
-  friend class GLUI_Control;
-  friend class GLUI_Rotation;
-  friend class GLUI_Translation;
-  friend class GLUI;
-  friend class GLUI_Master_Object;
-
-
-  /********** Misc functions *************/
-
-  GLUI_Control  *find_control( int x, int y );
-  GLUI_Control  *find_next_control( GLUI_Control *control );
-  GLUI_Control  *find_next_control_rec( GLUI_Control *control );
-  GLUI_Control  *find_next_control_( GLUI_Control *control );
-  GLUI_Control  *find_prev_control( GLUI_Control *control );
-  void           create_standalone_window( char *name, int x=-1, int y=-1 );
-  void           create_subwindow( int parent,int window_alignment );
-  void           setup_default_glut_callbacks( void );
-
-  void           mouse(int button, int state, int x, int y);
-  void           keyboard(unsigned char key, int x, int y);
-  void           special(int key, int x, int y);
-  void           passive_motion(int x, int y);
-  void           reshape( int w, int h );
-  void           visibility(int state);
-  void           motion(int x, int y);
-  void           entry(int state);
-  void           display( void );
-  void           idle(void);
-
-  void (*glut_mouse_CB)(int, int, int, int);
-  void (*glut_keyboard_CB)(unsigned char, int, int);
-  void (*glut_special_CB)(int, int, int);
-  void (*glut_reshape_CB)(int, int);
-
-  
-  /*********** Friend functions and classes **********/
-
-  friend void    glui_mouse_func(int button, int state, int x, int y);
-  friend void    glui_keyboard_func(unsigned char key, int x, int y);
-  friend void    glui_special_func(int key, int x, int y);
-  friend void    glui_passive_motion_func(int x, int y);
-  friend void    glui_reshape_func( int w, int h );
-  friend void    glui_visibility_func(int state);
-  friend void    glui_motion_func(int x, int y);
-  friend void    glui_entry_func(int state);
-  friend void    glui_display_func( void );
-  friend void    glui_idle_func(void);
-
-  friend void    glui_parent_window_reshape_func( int w, int h );
-  friend void    glui_parent_window_keyboard_func( unsigned char, int, int );
-  friend void    glui_parent_window_special_func( int, int, int );
-  friend void    glui_parent_window_mouse_func( int, int, int, int );
-
-
-  /*********** Controls ************/
-  GLUI_Control *controls;
-  int           num_controls;
-
-  int           add_control( GLUI_Node *parent, GLUI_Control *control );
-
-
-  /********** Constructors and Destructors ***********/
-
-  GLUI_Main( void );
-
-public:
-  GLUI_StdBitmaps  std_bitmaps;
-  GLUI_String      window_name;
-  RGBc             bkgd_color;
-  float            bkgd_color_f[3];
-
-  void            *font;
-  int              curr_modifiers;
-
-  void         adjust_glut_xy( int &x, int &y ) { y = h-y; };
-  void         activate_control( GLUI_Control *control, int how );
-  void         align_controls( GLUI_Control *control );
-  void         restore_draw_buffer( int buffer_state );
-  void         disactivate_current_control( void );
-  void         draw_raised_box( int x, int y, int w, int h );
-  void         draw_lowered_box( int x, int y, int w, int h );
-  int          set_front_draw_buffer( void );
-  void         post_update_main_gfx( void );
-  void         pack_controls( void );
-  void         close_internal( void );
-  void         check_subwindow_position( void );
-  void         set_ortho_projection( void );
-  void         set_viewport( void );
-  void         refresh( void );
-};
-
-
-
-
-
-
-/************************************************************/
-/*                                                          */
-/*       GLUI_Control: base class for all controls          */
-/*                                                          */
-/************************************************************/
-
-class GLUI_Control : public GLUI_Node {
-public:
-
-  int             w, h;                        /* dimensions of control */
-  int             x_abs, y_abs;
-  int             x_off, y_off_top, y_off_bot; /* INNER margins, by which
-                          child controls are indented */
-  int             contain_x, contain_y; 
-  int             contain_w, contain_h;
-  /* if this is a container control (e.g., 
-     radiogroup or panel) this indicated dimensions
-     of inner area in which controls reside */
-  int             active, active_type, can_activate;
-  int             spacebar_mouse_click;
-  long            user_id, type;
-  int             is_container;  /* Is this a container class (e.g., panel) */
-  int             alignment;
-  GLUI_Update_CB  callback;
-  void            *ptr_val;                              /* A pointer value */
-  float           float_val;                               /* A float value */
-  int             enabled;                   /* Is this control grayed out? */
-  int             int_val;                              /* An integer value */
-  float           float_array_val[GLUI_DEF_MAX_ARRAY];
-  int             state;
-  GLUI_String     name;                         /* The name of this control */
-  GLUI_String     text;              
-  GLUI           *glui;
-  void           *font;
-  int             live_type, live_inited;
-  int             last_live_int;   /* last value that live var known to have */
-  float           last_live_float;
-  GLUI_String     last_live_text;
-  float           last_live_float_array[GLUI_DEF_MAX_ARRAY];
-  int             float_array_size;
-
-  int             collapsible, is_open;
-  GLUI_Node       collapsed_node;
-  int             hidden; /* Collapsed controls (and children) are hidden */
-
-  /*** Get/Set values ***/
-
-  virtual void   set_name( char *string );
-  virtual void   set_int_val( int new_int )         { int_val = new_int; output_live(true); };
-  virtual void   set_float_val( float new_float )   { float_val = new_float; output_live(true); };
-  virtual void   set_ptr_val( void *new_ptr )       { ptr_val = new_ptr; output_live(true); };
-  virtual void   set_float_array_val( float *array_ptr );
-
-  virtual float  get_float_val( void )              { return float_val; };
-  virtual int    get_int_val( void )                { return int_val; };
-  virtual void   get_float_array_val( float *array_ptr );
-  
-  virtual int mouse_down_handler( int local_x, int local_y ) 
-    { return false; };
-  virtual int mouse_up_handler( int local_x, int local_y, int inside )
-    { return false; };
-  virtual int mouse_held_down_handler( int local_x, int local_y, int inside)
-    { return false; };
-  virtual int key_handler( unsigned char key, int modifiers )
-    { return false; };
-  virtual int special_handler( int key,int modifiers )
-    { return false; };
-
-  virtual void update_size( void )     { };
-  virtual void idle( void )            { };
-  virtual int  mouse_over( int state, int x, int y ) { return false; };
-  
-  virtual void enable( void ); 
-  virtual void disable( void );
-  virtual void activate( int how )     { active = true; };
-  virtual void disactivate( void )     { active = false; };
-
-  void         hide_internal( int recurse );
-  void         unhide_internal( int recurse );
-
-  int          can_draw( void ) { return (glui != NULL && hidden == false); };
-
-  virtual void align( void );
-  void         pack( int x, int y );    /* Recalculate positions and offsets */
-  void         pack_old( int x, int y );    
-  void         draw_recursive( int x, int y );
-  int          set_to_glut_window( void );
-  void         restore_window( int orig );
-  void         translate_and_draw_front( void );
-  void         translate_to_origin( void ) 
-    {glTranslatef((float)x_abs+.5,(float)y_abs+.5,0.0);};
-  virtual void draw( int x, int y )=0;
-  void         set_font( void *new_font );
-  void        *get_font( void );
-  int          string_width( char *text );
-  int          char_width( char c );
-
-  void         draw_name( int x, int y );
-  void         draw_box_inwards_outline( int x_min, int x_max, 
-                     int y_min, int y_max );
-  void         draw_box( int x_min, int x_max, int y_min, int y_max,
-             float r, float g, float b );
-  void         draw_bkgd_box( int x_min, int x_max, int y_min, int y_max );
-  void         draw_emboss_box( int x_min, int x_max,int y_min,int y_max);
-  void         draw_string( char *text );
-  void         draw_char( char c );
-  void         draw_active_box( int x_min, int x_max, int y_min, int y_max );
-  void         set_to_bkgd_color( void );
-    
-  void         set_w( int new_w );
-  void         set_h( int new_w );
-  void         set_alignment( int new_align );
-  void         sync_live( int recurse, int draw );  /* Reads live variable */
-  void         init_live( void );
-  void         output_live( int update_main_gfx );        /** Writes live variable **/
-  virtual void set_text( char *t )   {};
-  void         execute_callback( void );
-  void         get_this_column_dims( int *col_x, int *col_y, 
-                     int *col_w, int *col_h, 
-                     int *col_x_off, int *col_y_off );
-  virtual int  needs_idle( void );
-
-  GLUI_Control(void) {
-    x_off          = GLUI_XOFF;
-    y_off_top      = GLUI_YOFF;
-    y_off_bot      = GLUI_YOFF;
-    x_abs          = GLUI_XOFF;
-    y_abs          = GLUI_YOFF;
-    state          = 0;
-    active         = false;
-    enabled        = true;
-    int_val        = 0;
-    last_live_int  = 0;
-    float_array_size = 0;
-    sprintf( (char*)name, "Control: %p", this );
-    float_val      = 0.0;
-    last_live_float = 0.0;
-    ptr_val        = NULL;
-    glui           = NULL;
-    w              = GLUI_DEFAULT_CONTROL_WIDTH;
-    h              = GLUI_DEFAULT_CONTROL_HEIGHT;
-    font           = NULL;
-    active_type    = GLUI_CONTROL_ACTIVE_MOUSEDOWN;
-    alignment      = GLUI_ALIGN_LEFT;
-    is_container   = false;
-    can_activate   = true;         /* By default, you can activate a control */
-    spacebar_mouse_click = true;    /* Does spacebar simulate a mouse click? */
-    live_type      = GLUI_LIVE_NONE;
-    strcpy( (char*)text, "" );
-    strcpy( (char*)last_live_text, "" );
-    live_inited    = false;
-    collapsible    = false;
-    is_open        = true;
-    hidden         = false;
-
-    int i;
-    for( i=0; i<GLUI_DEF_MAX_ARRAY; i++ )
-      float_array_val[i] = last_live_float_array[i] = 0.0;
-  };
-
-  virtual ~GLUI_Control();
-};
-
-
-
-
-/************************************************************/
-/*                                                          */
-/*               Button class (container)                   */
-/*                                                          */
-/************************************************************/
-
-class GLUI_Button : public GLUI_Control
-{
-public:
-  int currently_inside;
-
-  int  mouse_down_handler( int local_x, int local_y );
-  int  mouse_up_handler( int local_x, int local_y, int same );
-  int  mouse_held_down_handler( int local_x, int local_y, int inside );
-  int  key_handler( unsigned char key,int modifiers );
-  
-  void draw( int x, int y );
-  void draw_pressed( void );
-  void draw_unpressed( void );
-  void draw_text( int sunken );
-
-  void update_size( void );
-
-  GLUI_Button( void ) {
-    sprintf( name, "Button: %p", this );
-    type         = GLUI_CONTROL_BUTTON;
-    h            = GLUI_BUTTON_SIZE;
-    w            = 100;
-    alignment    = GLUI_ALIGN_CENTER;
-    can_activate = true;
-  };
-  
-  virtual ~GLUI_Button() {};
-};
-
-
-
-/************************************************************/
-/*                                                          */
-/*               Checkbox class (container)                 */
-/*                                                          */
-/************************************************************/
-
-class GLUI_Checkbox : public GLUI_Control
-{
-public:
-  int  orig_value, currently_inside;
-  int  text_x_offset;
-
-  int  mouse_down_handler( int local_x, int local_y );
-  int  mouse_up_handler( int local_x, int local_y, int inside );
-  int  mouse_held_down_handler( int local_x, int local_y, int inside );
-  int  key_handler( unsigned char key,int modifiers );
-  
-  void update_size( void );
-
-  void draw( int x, int y );
-
-  void draw_active_area( void );
-  void draw_checked( void );
-  void draw_unchecked( void );
-  void draw_X( void );
-  void draw_empty_box( void );
-  void set_int_val( int new_val );
-
-  GLUI_Checkbox( void ) {
-    sprintf( name, "Checkbox: %p", this );
-    type           = GLUI_CONTROL_CHECKBOX;
-    w              = 100;
-    h              = GLUI_CHECKBOX_SIZE;
-    orig_value     = -1;
-    text_x_offset  = 18;
-    can_activate   = true;
-    live_type      = GLUI_LIVE_INT;   /* This control has an 'int' live var */
-  };
-  
-  virtual ~GLUI_Checkbox() {};
-};
-
-
-/************************************************************/
-/*                                                          */
-/*               Column class                               */
-/*                                                          */
-/************************************************************/
-
-class GLUI_Column : public GLUI_Control
-{
-public:
-  void draw( int x, int y );
-
-  GLUI_Column( void ) {
-    type         = GLUI_CONTROL_COLUMN;
-    w            = 0;
-    h            = 0;
-    int_val      = 0;
-    can_activate = false;
-  };
-  
-  virtual ~GLUI_Column() {};
-};
-
-
-
-/************************************************************/
-/*                                                          */
-/*               Panel class (container)                    */
-/*                                                          */
-/************************************************************/
-
-class GLUI_Panel : public GLUI_Control
-{
-public:
-  void draw( int x, int y );
-  void set_name( char *text );
-  void set_type( int new_type );
-
-  void update_size( void );
-
-  GLUI_Panel( void ) {
-    type         = GLUI_CONTROL_PANEL;
-    w            = 300;
-    h            = GLUI_DEFAULT_CONTROL_HEIGHT + 7;
-    int_val      = GLUI_PANEL_EMBOSSED;
-    alignment    = GLUI_ALIGN_CENTER;
-    is_container = true; 
-    can_activate = false;
-    strcpy( name, "" );
-  };
-
-  virtual ~GLUI_Panel() {};
-};
-
-
-/************************************************************/
-/*                                                          */
-/*               Panel class (container)                    */
-/*                                                          */
-/************************************************************/
-
-class GLUI_Rollout : public GLUI_Panel
-{
-  /*  private: */
-  /*    GLUI_Panel panel; */
-public:
-  int          currently_inside, initially_inside;
-  GLUI_Button  button;
-
-  void draw( int x, int y );
-  void draw_pressed( void );
-  void draw_unpressed( void );
-  int mouse_down_handler( int local_x, int local_y );
-  int mouse_up_handler( int local_x, int local_y, int inside );
-  int  mouse_held_down_handler( int local_x, int local_y, int inside );
-        
-  void  open( void ); 
-  void  close( void );
-
-    /*   void set_name( char *text )   { panel.set_name( text ); }; */
-  void update_size( void );
-
-  GLUI_Rollout( void ) {
-    currently_inside = false;
-    initially_inside = false;
-    can_activate     = true;
-    is_container     = true;
-    type             = GLUI_CONTROL_ROLLOUT;
-    h                = GLUI_DEFAULT_CONTROL_HEIGHT + 7;
-    w                = GLUI_DEFAULT_CONTROL_WIDTH;
-    y_off_top        = 21;
-    collapsible      = true;
-    strcpy( name, "" );
-  };
- 
-  virtual ~GLUI_Rollout() {};
-};
-
-
-/************************************************************/
-/*                                                          */
-/*                     User-Level GLUI class                */
-/*                                                          */
-/************************************************************/
-
-class GLUI : public GLUI_Main {
-private:
-public:
-  void  add_column( int draw_bar = true );
-  void  add_column_to_panel( GLUI_Panel *panel, int draw_bar = true );
-
-  void  add_separator( void );
-  void  add_separator_to_panel( GLUI_Panel *panel );
-
-  GLUI_RadioGroup 
-    *add_radiogroup( int *live_var=NULL,
-             int user_id=-1,GLUI_Update_CB callback=NULL);
-
-  GLUI_RadioGroup 
-    *add_radiogroup_to_panel(  GLUI_Panel *panel,
-                   int *live_var=NULL,
-                   int user_id=-1, GLUI_Update_CB callback=NULL );
-  GLUI_RadioButton
-    *add_radiobutton_to_group(  GLUI_RadioGroup *group,
-                char *name );
-
-  GLUI_Listbox *add_listbox( char *name, int *live_var=NULL,
-                 int id=-1, GLUI_Update_CB callback=NULL    );
-  GLUI_Listbox *add_listbox_to_panel( GLUI_Panel *panel,
-                      char *name, int *live_var=NULL,
-                      int id=-1, GLUI_Update_CB callback=NULL);
-
-  GLUI_Rotation *add_rotation( char *name, float *live_var=NULL,
-                   int id=-1, GLUI_Update_CB callback=NULL  );
-  GLUI_Rotation *add_rotation_to_panel( GLUI_Panel *panel,
-                    char *name, float *live_var=NULL,
-                    int id=-1, GLUI_Update_CB callback=NULL);
-  
-  GLUI_Translation *add_translation( char *name,
-                     int trans_type, float *live_var=NULL,
-                     int id=-1, GLUI_Update_CB callback=NULL    );
-  GLUI_Translation *add_translation_to_panel( 
-                         GLUI_Panel *panel, char *name, 
-                         int trans_type, float *live_var=NULL,
-                         int id=-1, GLUI_Update_CB callback=NULL);
-  
-  GLUI_Checkbox  *add_checkbox( char *name, 
-                int *live_var=NULL,
-                int id=-1, GLUI_Update_CB callback=NULL);
-  GLUI_Checkbox  *add_checkbox_to_panel( GLUI_Panel *panel, char *name, 
-                     int *live_var=NULL, int id=-1, 
-                     GLUI_Update_CB callback=NULL);
-
-  GLUI_Button  *add_button( char *name, int id=-1, 
-                GLUI_Update_CB callback=NULL);
-  GLUI_Button  *add_button_to_panel( GLUI_Panel *panel, char *name, 
-                     int id=-1, GLUI_Update_CB callback=NULL );
-
-  GLUI_StaticText  *add_statictext( char *name );
-  GLUI_StaticText  *add_statictext_to_panel( GLUI_Panel *panel, char *name );
-
-  GLUI_EditText  *add_edittext( char *name, 
-                int data_type=GLUI_EDITTEXT_TEXT,
-                void *live_var=NULL,
-                int id=-1, GLUI_Update_CB callback=NULL );
-  GLUI_EditText  *add_edittext_to_panel( GLUI_Panel *panel, 
-                     char *name,
-                     int data_type=GLUI_EDITTEXT_TEXT,
-                     void *live_var=NULL, int id=-1, 
-                     GLUI_Update_CB callback=NULL );
-
-  GLUI_Spinner  *add_spinner( char *name, 
-                  int data_type=GLUI_SPINNER_INT,
-                  void *live_var=NULL,
-                  int id=-1, GLUI_Update_CB callback=NULL );
-  GLUI_Spinner  *add_spinner_to_panel( GLUI_Panel *panel, 
-                       char *name,
-                       int data_type=GLUI_SPINNER_INT,
-                       void *live_var=NULL,
-                       int id=-1,
-                       GLUI_Update_CB callback=NULL );
-
-  GLUI_Panel     *add_panel( char *name, int type=GLUI_PANEL_EMBOSSED );
-  GLUI_Panel     *add_panel_to_panel( GLUI_Panel *panel, char *name, 
-                      int type=GLUI_PANEL_EMBOSSED );
-
-  GLUI_Rollout   *add_rollout( char *name, int open=true );
-  GLUI_Rollout   *add_rollout_to_panel( GLUI_Panel *panel, char *name, int open=true );
-
-  void            set_main_gfx_window( int window_id );
-  int             get_glut_window_id( void ) { return glut_window_id; };
-  
-  void            enable( void ) { main_panel->enable(); };
-  void            disable( void );
-
-  void            sync_live( void );
-
-  void            close( void );
-
-  void            show( void );
-  void            hide( void );
- 
-  /***** GLUT callback setup functions *****/
-  /*
-    void set_glutDisplayFunc(void (*f)(void));
-    void set_glutReshapeFunc(void (*f)(int width, int height));
-    void set_glutKeyboardFunc(void (*f)(unsigned char key, int x, int y));
-    void set_glutSpecialFunc(void (*f)(int key, int x, int y));
-    void set_glutMouseFunc(void (*f)(int button, int state, int x, int y));
-    void set_glutMotionFunc(void (*f)(int x, int y));
-    void set_glutPassiveMotionFunc(void (*f)(int x, int y));
-    void set_glutEntryFunc(void (*f)(int state));
-    void set_glutVisibilityFunc(void (*f)(int state));
-    void set_glutInit( int *argcp, char **argv );
-    void set_glutInitWindowSize(int width, int height);
-    void set_glutInitWindowPosition(int x, int y);
-    void set_glutInitDisplayMode(unsigned int mode);
-    int  set_glutCreateWindow(char *name);
-    */
-
-  /***** Constructors and desctructors *****/
-
-  int init( char *name, long flags, int x, int y, int parent_window );
-};
-
-
-
-
-/************************************************************/
-/*                                                          */
-/*               EditText class                             */
-/*                                                          */
-/************************************************************/
-
-class GLUI_EditText : public GLUI_Control
-{
-public:
-  int                 has_limits;
-  int                 data_type;
-  GLUI_String         orig_text;
-  int                 insertion_pt;
-  int                 title_x_offset;
-  int                 text_x_offset;
-  int                 substring_start; /*substring that gets displayed in box*/
-  int                 substring_end;  
-  int                 sel_start, sel_end;  /* current selection */
-  int                 num_periods;
-  int                 last_insertion_pt;
-  float               float_low, float_high;
-  int                 int_low, int_high;
-  GLUI_Spinner       *spinner;
-  int                 debug;
-  int                 draw_text_only;
-
-
-  int  mouse_down_handler( int local_x, int local_y );
-  int  mouse_up_handler( int local_x, int local_y, int same );
-  int  mouse_held_down_handler( int local_x, int local_y, int inside );
-  int  key_handler( unsigned char key,int modifiers );
-  int  special_handler( int key,int modifiers );
-  
-  void activate( int how );
-  void disactivate( void );
-
-  void draw( int x, int y );
-
-  int  mouse_over( int state, int x, int y );
-
-  int  find_word_break( int start, int direction );
-  int  substring_width( int start, int end );
-  void clear_substring( int start, int end );
-  int  find_insertion_pt( int x, int y );
-  int  update_substring_bounds( void );
-  void update_and_draw_text( void );
-  void draw_text( int x, int y );
-  void draw_insertion_pt( void );
-  void set_numeric_text( void );
-  void update_x_offsets( void );
-  void update_size( void );
-
-  void set_float_limits( float low,float high,int limit_type=GLUI_LIMIT_CLAMP);
-  void set_int_limits( int low, int high, int limit_type=GLUI_LIMIT_CLAMP );
-  void set_float_val( float new_val );
-  void set_int_val( int new_val );
-  void set_text( char *text );
-  char *get_text( void )         { return text; };  
-
-  void dump( FILE *out, char *text );
-
-  GLUI_EditText( void ) {
-    type                  = GLUI_CONTROL_EDITTEXT;
-    h                     = GLUI_EDITTEXT_HEIGHT;
-    w                     = GLUI_EDITTEXT_WIDTH;
-    title_x_offset        = 0;
-    text_x_offset         = 55;
-    insertion_pt          = -1;
-    last_insertion_pt     = -1;
-    name[0]               = '\0';
-    substring_start       = 0;
-    data_type             = GLUI_EDITTEXT_TEXT;
-    substring_end         = 2;
-    num_periods           = 0;
-    has_limits            = GLUI_LIMIT_NONE;
-    sel_start             = 0;
-    sel_end               = 0;
-    active_type           = GLUI_CONTROL_ACTIVE_PERMANENT;
-    can_activate          = true;
-    spacebar_mouse_click  = false;
-    spinner               = NULL;
-    debug                 = false;
-    draw_text_only        = false;
-  };
-};
-
-
-
-
-/************************************************************/
-/*                                                          */
-/*              RadioGroup class (container)                */
-/*                                                          */
-/************************************************************/
-
-class GLUI_RadioGroup : public GLUI_Control
-{
-public:
-  int  num_buttons;
-
-  void draw( int x, int y );
-  void set_name( char *text );
-  void set_int_val( int int_val ); 
-  void set_selected( int int_val );
-
-  void draw_group( int translate );
-
-  GLUI_RadioGroup( void ) {
-    type          = GLUI_CONTROL_RADIOGROUP;
-    x_off         = 0;
-    y_off_top     = 0;
-    y_off_bot     = 0;
-    is_container  = true;
-    w             = 300;
-    h             = 300;
-    num_buttons   = 0;
-    name[0]       = '\0';
-    can_activate  = false;
-    live_type     = GLUI_LIVE_INT;
-  };
-};
-
-
-
-/************************************************************/
-/*                                                          */
-/*               RadioButton class (container)              */
-/*                                                          */
-/************************************************************/
-
-class GLUI_RadioButton : public GLUI_Control
-{
-public:
-  int orig_value, currently_inside;
-  int text_x_offset;
-
-  int  mouse_down_handler( int local_x, int local_y );
-  int  mouse_up_handler( int local_x, int local_y, int inside );
-  int  mouse_held_down_handler( int local_x, int local_y, int inside );
-  
-  void draw( int x, int y );
-  void update_size( void );
-
-  void draw_active_area( void );
-  void draw_checked( void );
-  void draw_unchecked( void );
-  void draw_O( void );
-
-  GLUI_RadioGroup *group;
-
-  GLUI_RadioButton( void ) {
-    sprintf( name, "RadioButton: %p", this );
-    type           = GLUI_CONTROL_RADIOBUTTON;
-    h              = GLUI_RADIOBUTTON_SIZE;
-    group          = NULL;
-    orig_value     = -1;
-    text_x_offset  = 18;
-    can_activate   = true;
-  };
-};
-
-
-/************************************************************/
-/*                                                          */
-/*               Separator class (container)                */
-/*                                                          */
-/************************************************************/
-
-class GLUI_Separator : public GLUI_Control
-{
-public:
-  void draw( int x, int y );
-
-  GLUI_Separator( void ) {
-    type         = GLUI_CONTROL_SEPARATOR;
-    w            = 100;
-    h            = GLUI_SEPARATOR_HEIGHT;
-    can_activate = false;
-  };
-};
-
-
-#define  GLUI_SPINNER_ARROW_WIDTH  12
-#define  GLUI_SPINNER_ARROW_HEIGHT  8
-#define  GLUI_SPINNER_ARROW_Y       2
-
-#define  GLUI_SPINNER_STATE_NONE   0
-#define  GLUI_SPINNER_STATE_UP     1
-#define  GLUI_SPINNER_STATE_DOWN   2
-#define  GLUI_SPINNER_STATE_BOTH   3
-
-#define  GLUI_SPINNER_DEFAULT_GROWTH_EXP   1.05f
-
-
-/************************************************************/
-/*                                                          */
-/*               Spinner class (container)                  */
-/*                                                          */
-/************************************************************/
- 
-class GLUI_Spinner : public GLUI_Control
-{
-public:
-  int           currently_inside;
-  int           state;
-  float         growth, growth_exp;
-  int           last_x, last_y;
-  int           data_type;
-  int           callback_count;
-  int           last_int_val;
-  float         last_float_val;
-  int           first_callback;
-  float         user_speed;
-
-  GLUI_EditText *edittext;
-
-  int  mouse_down_handler( int local_x, int local_y );
-  int  mouse_up_handler( int local_x, int local_y, int same );
-  int  mouse_held_down_handler( int local_x, int local_y, int inside );
-  int  key_handler( unsigned char key,int modifiers );
-  int  special_handler( int key,int modifiers );
-  
-  void draw( int x, int y );
-  void draw_pressed( void );
-  void draw_unpressed( void );
-  void draw_text( int sunken );
-
-  void update_size( void );
-
-  void set_float_limits( float low,float high,int limit_type=GLUI_LIMIT_CLAMP);
-  void set_int_limits( int low, int high,int limit_type=GLUI_LIMIT_CLAMP);
-  int  find_arrow( int local_x, int local_y );
-  void do_drag( int x, int y );
-  void do_callbacks( void );
-  void draw_arrows( void );
-  void do_click( void );
-  void idle( void );
-  int  needs_idle( void );
-
-  char *get_text( void );
-
-  void set_float_val( float new_val );
-  void set_int_val( int new_val );
-  float  get_float_val( void );
-  int    get_int_val( void );
-  void increase_growth( void );
-  void reset_growth( void );
-
-  void set_speed( float speed ) { user_speed = speed; };
-
-  GLUI_Spinner( void ) {
-    sprintf( name, "Spinner: %p", this );
-    type         = GLUI_CONTROL_SPINNER;
-    h            = GLUI_EDITTEXT_HEIGHT;
-    w            = GLUI_EDITTEXT_WIDTH;
-    x_off        = 0;
-    y_off_top    = 0;
-    y_off_bot    = 0;
-    can_activate = true;
-    state        = GLUI_SPINNER_STATE_NONE;
-    edittext     = NULL;
-    growth_exp   = GLUI_SPINNER_DEFAULT_GROWTH_EXP;
-    callback_count = 0;
-    first_callback = true;
-    user_speed   = 1.0;
-  };
-};
-
-/************************************************************/
-
-/*                                                          */
-/*               StaticText class                           */
-/*                                                          */
-/************************************************************/
-
-class GLUI_StaticText : public GLUI_Control
-{
-public:
-  void set_text( char *text );
-  void draw( int x, int y );
-  void draw_text( void );
-  void update_size( void );
-  void erase_text( void );
-
-  GLUI_StaticText( void ) {
-    type    = GLUI_CONTROL_STATICTEXT;
-    h       = GLUI_STATICTEXT_SIZE;
-    name[0] = '\0';
-    can_activate  = false;
-  };
-};
-
-
-
-/************************************************************/
-/*                                                          */
-/*                   Listbox class                          */
-/*                                                          */
-/************************************************************/
-
-class GLUI_Listbox_Item : public GLUI_Node 
-{
-public:
-  GLUI_String text;
-  int         id;
-};
-
-class GLUI_Listbox : public GLUI_Control
-{
-public:
-  GLUI_String       curr_text;
-  GLUI_Listbox_Item items_list;
-  int               depressed;
-
-  int  orig_value, currently_inside;
-  int  text_x_offset, title_x_offset;
-  int  glut_menu_id;
-
-  int  mouse_down_handler( int local_x, int local_y );
-  int  mouse_up_handler( int local_x, int local_y, int inside );
-  int  mouse_held_down_handler( int local_x, int local_y, int inside );
-  int  key_handler( unsigned char key,int modifiers );
-  int  special_handler( int key,int modifiers );
-
-  void update_size( void );
-  void draw( int x, int y );
-  int  mouse_over( int state, int x, int y );
-
-  void draw_active_area( void );
-  void set_int_val( int new_val );
-  void dump( FILE *output );
-
-  int  add_item( int id, char *text );
-  int  delete_item( char *text );
-  int  delete_item( int id );
-  int  sort_items( void );
-
-  int  do_selection( int item );
-
-  void increase_width( void );
-
-  GLUI_Listbox_Item *get_item_ptr( char *text );
-  GLUI_Listbox_Item *get_item_ptr( int id );
-  
-
-  GLUI_Listbox( void ) {
-    sprintf( name, "Listbox: %p", this );
-    type           = GLUI_CONTROL_LISTBOX;
-    w              = GLUI_EDITTEXT_WIDTH;
-    h              = GLUI_EDITTEXT_HEIGHT;
-    orig_value     = -1;
-    title_x_offset = 0;
-    text_x_offset  = 55;
-    can_activate   = true;
-    curr_text[0]   = '\0';
-    live_type      = GLUI_LIVE_INT;  /* This has an integer live var */
-    depressed      = false;
-    glut_menu_id   = -1;
-  };
-
-  ~GLUI_Listbox();
-};
-
-
-/************************************************************/
-/*                                                          */
-/*              Mouse_Interaction class                     */
-/*                                                          */
-/************************************************************/
-
-class GLUI_Mouse_Interaction : public GLUI_Control
-{
-public:
-  /*int  get_main_area_size( void ) { return MIN( h-18,  */
-  int            draw_active_area_only;
-    
-  int  mouse_down_handler( int local_x, int local_y );
-  int  mouse_up_handler( int local_x, int local_y, int inside );
-  int  mouse_held_down_handler( int local_x, int local_y, int inside );
-  int  special_handler( int key, int modifiers );
-  void update_size( void );
-  void draw( int x, int y );
-  void draw_active_area( void );
-  
-  /***  The following methods (starting with "iaction_") need to
-    be overloaded  ***/
-  virtual int  iaction_mouse_down_handler( int local_x, int local_y ) = 0;
-  virtual int  iaction_mouse_up_handler( int local_x, int local_y, int inside )=0;
-  virtual int  iaction_mouse_held_down_handler( int local_x, int local_y, int inside )=0;
-  virtual int  iaction_special_handler( int key, int modifiers )=0;
-  virtual void iaction_draw_active_area_persp( void )=0;
-  virtual void iaction_draw_active_area_ortho( void )=0;
-  virtual void iaction_dump( FILE *output )=0;
-  virtual void iaction_init( void ) = 0;
-  
-  GLUI_Mouse_Interaction( void ) {
-    sprintf( name, "Mouse_Interaction: %p", this );
-    type           = GLUI_CONTROL_MOUSE_INTERACTION;
-    w              = GLUI_MOUSE_INTERACTION_WIDTH;
-    h              = GLUI_MOUSE_INTERACTION_HEIGHT;
-    can_activate   = true;
-    live_type      = GLUI_LIVE_NONE;
-    alignment      = GLUI_ALIGN_CENTER;
-    draw_active_area_only = false;
-  };
-};
-
- 
-/************************************************************/
-/*                                                          */
-/*                   Rotation class                         */
-/*                                                          */
-/************************************************************/
-
-class GLUI_Rotation : public GLUI_Mouse_Interaction
-{
-public:
-  Arcball        *ball;
-  GLUquadricObj *quadObj;
-  int            can_spin, spinning;
-  float          damping;
-  
-  int  iaction_mouse_down_handler( int local_x, int local_y );
-  int  iaction_mouse_up_handler( int local_x, int local_y, int inside );
-  int  iaction_mouse_held_down_handler( int local_x, int local_y, int inside );
-  int  iaction_special_handler( int key, int modifiers );
-  void iaction_init( void ) { init_ball(); };
-  void iaction_draw_active_area_persp( void );
-  void iaction_draw_active_area_ortho( void );
-  void iaction_dump( FILE *output );
-
-  /*  void update_size( void ); */
-  /*  void draw( int x, int y ); */
-  /*  int mouse_over( int state, int x, int y ); */
-    
-  void setup_texture( void );
-  void setup_lights( void );
-  void draw_ball( float radius );
-
-  void init_ball( void );
-
-  void reset( void );
-
-  int  needs_idle( void );
-  void idle( void );
-
-  void copy_float_array_to_ball( void );
-  void copy_ball_to_float_array( void );
-
-  void set_spin( float damp_factor );
-
-  GLUI_Rotation(void);
-};
-
-
-
-/************************************************************/
-/*                                                          */
-/*                   Translation class                      */
-/*                                                          */
-/************************************************************/
-
-class GLUI_Translation : public GLUI_Mouse_Interaction
-{
-public:
-  int trans_type;  /* Is this an XY or a Z controller? */
-  int down_x, down_y;
-  float scale_factor;
-  GLUquadricObj *quadObj;
-  int   trans_mouse_code;
-  float orig_x, orig_y, orig_z;
-  int   locked;
-
-  int  iaction_mouse_down_handler( int local_x, int local_y );
-  int  iaction_mouse_up_handler( int local_x, int local_y, int inside );
-  int  iaction_mouse_held_down_handler( int local_x, int local_y, int inside );
-  int  iaction_special_handler( int key, int modifiers );
-  void iaction_init( void ) {  };
-  void iaction_draw_active_area_persp( void );
-  void iaction_draw_active_area_ortho( void );
-  void iaction_dump( FILE *output );
-
-  void set_speed( float s ) { scale_factor = s; };
-
-  void setup_texture( void );
-  void setup_lights( void );
-  void draw_2d_arrow( int radius, int filled, int orientation ); 
-  void draw_2d_x_arrows( int radius );
-  void draw_2d_y_arrows( int radius );
-  void draw_2d_z_arrows( int radius );
-  void draw_2d_xy_arrows( int radius );
-
-  int  get_mouse_code( int x, int y );
-
-  /* Float array is either a single float (for single-axis controls),
-     or two floats for X and Y (if an XY controller) */
-
-  float get_z( void ) {     return float_array_val[0];  }
-  float get_x( void ) {     return float_array_val[0];  }
-  float get_y( void ) {
-    if ( trans_type == GLUI_TRANSLATION_XY )    return float_array_val[1];
-    else                    return float_array_val[0];
-  }
-
-  void  set_z( float val );
-  void  set_x( float val );
-  void  set_y( float val );
-  void  set_one_val( float val, int index );
-
-  GLUI_Translation( void ) {
-    locked              = GLUI_TRANSLATION_LOCK_NONE;
-    sprintf( name, "Translation: %p", this );
-    type                = GLUI_CONTROL_TRANSLATION;
-    w                   = GLUI_MOUSE_INTERACTION_WIDTH;
-    h                   = GLUI_MOUSE_INTERACTION_HEIGHT;
-    can_activate        = true;
-    live_type           = GLUI_LIVE_FLOAT_ARRAY;
-    float_array_size    = 0;
-    alignment           = GLUI_ALIGN_CENTER;
-    trans_type          = GLUI_TRANSLATION_XY;
-    scale_factor        = 1.0;
-    quadObj             = NULL;
-    trans_mouse_code    = GLUI_TRANSLATION_MOUSE_NONE;
-  };
-};
-
-
-
-
-/********** Misc functions *********************/
-int _glutBitmapWidthString( void *font, char *s );
-void _glutBitmapString( void *font, char *s );
-
-
-
-/********** Our own callbacks for glut *********/
-/* These are the callbacks that we pass to glut.  They take
-   some action if necessary, then (possibly) call the user-level
-   glut callbacks.  
-   */
-
-void glui_display_func( void );
-void glui_reshape_func( int w, int h );
-void glui_keyboard_func(unsigned char key, int x, int y);
-void glui_special_func(int key, int x, int y);
-void glui_mouse_func(int button, int state, int x, int y);
-void glui_motion_func(int x, int y);
-void glui_passive_motion_func(int x, int y);
-void glui_entry_func(int state);
-void glui_visibility_func(int state);
-void glui_idle_func(void);
-
-void glui_parent_window_reshape_func( int w, int h );
-void glui_parent_window_keyboard_func(unsigned char key, int x, int y);
-void glui_parent_window_mouse_func(int, int, int, int );
-void glui_parent_window_special_func(int key, int x, int y);
-
-
-
-#endif
diff --git a/Assignment1/Assignment1/include/GL/glut.h b/Assignment1/Assignment1/include/GL/glut.h
deleted file mode 100644
index 0e6ddfb..0000000
--- a/Assignment1/Assignment1/include/GL/glut.h
+++ /dev/null
@@ -1,716 +0,0 @@
-#ifndef __glut_h__
-#define __glut_h__
-
-/* Copyright (c) Mark J. Kilgard, 1994, 1995, 1996, 1998. */
-
-/* This program is freely distributable without licensing fees  and is
-   provided without guarantee or warrantee expressed or  implied. This
-   program is -not- in the public domain. */
-
-#if defined(_WIN32)
-
-/* GLUT 3.7 now tries to avoid including <windows.h>
-   to avoid name space pollution, but Win32's <GL/gl.h> 
-   needs APIENTRY and WINGDIAPI defined properly. */
-# if 0
-   /* This would put tons of macros and crap in our clean name space. */
-#  define  WIN32_LEAN_AND_MEAN
-#  include <windows.h>
-# else
-   /* XXX This is from Win32's <windef.h> */
-#  ifndef APIENTRY
-#   define GLUT_APIENTRY_DEFINED
-#   if (_MSC_VER >= 800) || defined(_STDCALL_SUPPORTED) || defined(__BORLANDC__) || defined(__LCC__)
-#    define APIENTRY    __stdcall
-#   else
-#    define APIENTRY
-#   endif
-#  endif
-   /* XXX This is from Win32's <winnt.h> */
-#  ifndef CALLBACK
-#   if (defined(_M_MRX000) || defined(_M_IX86) || defined(_M_ALPHA) || defined(_M_PPC)) && !defined(MIDL_PASS) || defined(__LCC__)
-#    define CALLBACK __stdcall
-#   else
-#    define CALLBACK
-#   endif
-#  endif
-   /* XXX Hack for lcc compiler.  It doesn't support __declspec(dllimport), just __stdcall. */
-#  if defined( __LCC__ )
-#   undef WINGDIAPI
-#   define WINGDIAPI __stdcall
-#  else
-   /* XXX This is from Win32's <wingdi.h> and <winnt.h> */
-#   ifndef WINGDIAPI
-#    define GLUT_WINGDIAPI_DEFINED
-#    define WINGDIAPI __declspec(dllimport)
-#   endif
-#  endif
-   /* XXX This is from Win32's <ctype.h> */
-#  ifndef _WCHAR_T_DEFINED
-typedef unsigned short wchar_t;
-#   define _WCHAR_T_DEFINED
-#  endif
-# endif
-
-/* To disable automatic library usage for GLUT, define GLUT_NO_LIB_PRAGMA
-   in your compile preprocessor options. */
-# if !defined(GLUT_BUILDING_LIB) && !defined(GLUT_NO_LIB_PRAGMA)
-#  pragma comment (lib, "winmm.lib")      /* link with Windows MultiMedia lib */
-/* To enable automatic SGI OpenGL for Windows library usage for GLUT,
-   define GLUT_USE_SGI_OPENGL in your compile preprocessor options.  */
-#  ifdef GLUT_USE_SGI_OPENGL
-#   pragma comment (lib, "opengl.lib")    /* link with SGI OpenGL for Windows lib */
-#   pragma comment (lib, "glu.lib")       /* link with SGI OpenGL Utility lib */
-#   pragma comment (lib, "glut.lib")      /* link with Win32 GLUT for SGI OpenGL lib */
-#  else
-#   pragma comment (lib, "opengl32.lib")  /* link with Microsoft OpenGL lib */
-#   pragma comment (lib, "glu32.lib")     /* link with Microsoft OpenGL Utility lib */
-#   pragma comment (lib, "glut32.lib")    /* link with Win32 GLUT lib */
-#  endif
-# endif
-
-/* To disable supression of annoying warnings about floats being promoted
-   to doubles, define GLUT_NO_WARNING_DISABLE in your compile preprocessor
-   options. */
-# ifndef GLUT_NO_WARNING_DISABLE
-#  pragma warning (disable:4244)  /* Disable bogus VC++ 4.2 conversion warnings. */
-#  pragma warning (disable:4305)  /* VC++ 5.0 version of above warning. */
-# endif
-
-/* Win32 has an annoying issue where there are multiple C run-time
-   libraries (CRTs).  If the executable is linked with a different CRT
-   from the GLUT DLL, the GLUT DLL will not share the same CRT static
-   data seen by the executable.  In particular, atexit callbacks registered
-   in the executable will not be called if GLUT calls its (different)
-   exit routine).  GLUT is typically built with the
-   "/MD" option (the CRT with multithreading DLL support), but the Visual
-   C++ linker default is "/ML" (the single threaded CRT).
-
-   One workaround to this issue is requiring users to always link with
-   the same CRT as GLUT is compiled with.  That requires users supply a
-   non-standard option.  GLUT 3.7 has its own built-in workaround where
-   the executable's "exit" function pointer is covertly passed to GLUT.
-   GLUT then calls the executable's exit function pointer to ensure that
-   any "atexit" calls registered by the application are called if GLUT
-   needs to exit.
-
-   Note that the __glut*WithExit routines should NEVER be called directly.
-   To avoid the atexit workaround, #define GLUT_DISABLE_ATEXIT_HACK. */
-
-/* XXX This is from Win32's <process.h> */
-# if !defined(_MSC_VER) && !defined(__cdecl)
-   /* Define __cdecl for non-Microsoft compilers. */
-#  define __cdecl
-#  define GLUT_DEFINED___CDECL
-# endif
-# ifndef _CRTIMP
-#  ifdef _NTSDK
-    /* Definition compatible with NT SDK */
-#   define _CRTIMP
-#  else
-    /* Current definition */
-#   ifdef _DLL
-#    define _CRTIMP __declspec(dllimport)
-#   else
-#    define _CRTIMP
-#   endif
-#  endif
-#  define GLUT_DEFINED__CRTIMP
-# endif
-
-/* GLUT API entry point declarations for Win32. */
-# ifdef GLUT_BUILDING_LIB
-#  define GLUTAPI __declspec(dllexport)
-# else
-#  ifdef _DLL
-#   define GLUTAPI __declspec(dllimport)
-#  else
-#   define GLUTAPI extern
-#  endif
-# endif
-
-/* GLUT callback calling convention for Win32. */
-# define GLUTCALLBACK __cdecl
-
-#endif  /* _WIN32 */
-
-#include <GL/gl.h>
-#include <GL/glu.h>
-
-#ifdef __cplusplus
-extern "C" {
-#endif
-
-#if defined(_WIN32)
-# ifndef GLUT_BUILDING_LIB
-extern _CRTIMP void __cdecl exit(int);
-# endif
-#else
-/* non-Win32 case. */
-/* Define APIENTRY and CALLBACK to nothing if we aren't on Win32. */
-# define APIENTRY
-# define GLUT_APIENTRY_DEFINED
-# define CALLBACK
-/* Define GLUTAPI and GLUTCALLBACK as below if we aren't on Win32. */
-# define GLUTAPI extern
-# define GLUTCALLBACK
-/* Prototype exit for the non-Win32 case (see above). */
-extern void exit(int);
-#endif
-
-/**
- GLUT API revision history:
- 
- GLUT_API_VERSION is updated to reflect incompatible GLUT
- API changes (interface changes, semantic changes, deletions,
- or additions).
- 
- GLUT_API_VERSION=1  First public release of GLUT.  11/29/94
-
- GLUT_API_VERSION=2  Added support for OpenGL/GLX multisampling,
- extension.  Supports new input devices like tablet, dial and button
- box, and Spaceball.  Easy to query OpenGL extensions.
-
- GLUT_API_VERSION=3  glutMenuStatus added.
-
- GLUT_API_VERSION=4  glutInitDisplayString, glutWarpPointer,
- glutBitmapLength, glutStrokeLength, glutWindowStatusFunc, dynamic
- video resize subAPI, glutPostWindowRedisplay, glutKeyboardUpFunc,
- glutSpecialUpFunc, glutIgnoreKeyRepeat, glutSetKeyRepeat,
- glutJoystickFunc, glutForceJoystickFunc (NOT FINALIZED!).
-**/
-#ifndef GLUT_API_VERSION  /* allow this to be overriden */
-#define GLUT_API_VERSION		3
-#endif
-
-/**
- GLUT implementation revision history:
- 
- GLUT_XLIB_IMPLEMENTATION is updated to reflect both GLUT
- API revisions and implementation revisions (ie, bug fixes).
-
- GLUT_XLIB_IMPLEMENTATION=1  mjk's first public release of
- GLUT Xlib-based implementation.  11/29/94
-
- GLUT_XLIB_IMPLEMENTATION=2  mjk's second public release of
- GLUT Xlib-based implementation providing GLUT version 2 
- interfaces.
-
- GLUT_XLIB_IMPLEMENTATION=3  mjk's GLUT 2.2 images. 4/17/95
-
- GLUT_XLIB_IMPLEMENTATION=4  mjk's GLUT 2.3 images. 6/?/95
-
- GLUT_XLIB_IMPLEMENTATION=5  mjk's GLUT 3.0 images. 10/?/95
-
- GLUT_XLIB_IMPLEMENTATION=7  mjk's GLUT 3.1+ with glutWarpPoitner.  7/24/96
-
- GLUT_XLIB_IMPLEMENTATION=8  mjk's GLUT 3.1+ with glutWarpPoitner
- and video resize.  1/3/97
-
- GLUT_XLIB_IMPLEMENTATION=9 mjk's GLUT 3.4 release with early GLUT 4 routines.
-
- GLUT_XLIB_IMPLEMENTATION=11 Mesa 2.5's GLUT 3.6 release.
-
- GLUT_XLIB_IMPLEMENTATION=12 mjk's GLUT 3.6 release with early GLUT 4 routines + signal handling.
-
- GLUT_XLIB_IMPLEMENTATION=13 mjk's GLUT 3.7 beta with GameGLUT support.
-
- GLUT_XLIB_IMPLEMENTATION=14 mjk's GLUT 3.7 beta with f90gl friend interface.
-
- GLUT_XLIB_IMPLEMENTATION=15 mjk's GLUT 3.7 beta sync'ed with Mesa <GL/glut.h>
-**/
-#ifndef GLUT_XLIB_IMPLEMENTATION  /* Allow this to be overriden. */
-#define GLUT_XLIB_IMPLEMENTATION	15
-#endif
-
-/* Display mode bit masks. */
-#define GLUT_RGB			0
-#define GLUT_RGBA			GLUT_RGB
-#define GLUT_INDEX			1
-#define GLUT_SINGLE			0
-#define GLUT_DOUBLE			2
-#define GLUT_ACCUM			4
-#define GLUT_ALPHA			8
-#define GLUT_DEPTH			16
-#define GLUT_STENCIL			32
-#if (GLUT_API_VERSION >= 2)
-#define GLUT_MULTISAMPLE		128
-#define GLUT_STEREO			256
-#endif
-#if (GLUT_API_VERSION >= 3)
-#define GLUT_LUMINANCE			512
-#endif
-
-/* Mouse buttons. */
-#define GLUT_LEFT_BUTTON		0
-#define GLUT_MIDDLE_BUTTON		1
-#define GLUT_RIGHT_BUTTON		2
-
-/* Mouse button  state. */
-#define GLUT_DOWN			0
-#define GLUT_UP				1
-
-#if (GLUT_API_VERSION >= 2)
-/* function keys */
-#define GLUT_KEY_F1			1
-#define GLUT_KEY_F2			2
-#define GLUT_KEY_F3			3
-#define GLUT_KEY_F4			4
-#define GLUT_KEY_F5			5
-#define GLUT_KEY_F6			6
-#define GLUT_KEY_F7			7
-#define GLUT_KEY_F8			8
-#define GLUT_KEY_F9			9
-#define GLUT_KEY_F10			10
-#define GLUT_KEY_F11			11
-#define GLUT_KEY_F12			12
-/* directional keys */
-#define GLUT_KEY_LEFT			100
-#define GLUT_KEY_UP			101
-#define GLUT_KEY_RIGHT			102
-#define GLUT_KEY_DOWN			103
-#define GLUT_KEY_PAGE_UP		104
-#define GLUT_KEY_PAGE_DOWN		105
-#define GLUT_KEY_HOME			106
-#define GLUT_KEY_END			107
-#define GLUT_KEY_INSERT			108
-#endif
-
-/* Entry/exit  state. */
-#define GLUT_LEFT			0
-#define GLUT_ENTERED			1
-
-/* Menu usage  state. */
-#define GLUT_MENU_NOT_IN_USE		0
-#define GLUT_MENU_IN_USE		1
-
-/* Visibility  state. */
-#define GLUT_NOT_VISIBLE		0
-#define GLUT_VISIBLE			1
-
-/* Window status  state. */
-#define GLUT_HIDDEN			0
-#define GLUT_FULLY_RETAINED		1
-#define GLUT_PARTIALLY_RETAINED		2
-#define GLUT_FULLY_COVERED		3
-
-/* Color index component selection values. */
-#define GLUT_RED			0
-#define GLUT_GREEN			1
-#define GLUT_BLUE			2
-
-#if defined(_WIN32)
-/* Stroke font constants (use these in GLUT program). */
-#define GLUT_STROKE_ROMAN		((void*)0)
-#define GLUT_STROKE_MONO_ROMAN		((void*)1)
-
-/* Bitmap font constants (use these in GLUT program). */
-#define GLUT_BITMAP_9_BY_15		((void*)2)
-#define GLUT_BITMAP_8_BY_13		((void*)3)
-#define GLUT_BITMAP_TIMES_ROMAN_10	((void*)4)
-#define GLUT_BITMAP_TIMES_ROMAN_24	((void*)5)
-#if (GLUT_API_VERSION >= 3)
-#define GLUT_BITMAP_HELVETICA_10	((void*)6)
-#define GLUT_BITMAP_HELVETICA_12	((void*)7)
-#define GLUT_BITMAP_HELVETICA_18	((void*)8)
-#endif
-#else
-/* Stroke font opaque addresses (use constants instead in source code). */
-GLUTAPI void *glutStrokeRoman;
-GLUTAPI void *glutStrokeMonoRoman;
-
-/* Stroke font constants (use these in GLUT program). */
-#define GLUT_STROKE_ROMAN		(&glutStrokeRoman)
-#define GLUT_STROKE_MONO_ROMAN		(&glutStrokeMonoRoman)
-
-/* Bitmap font opaque addresses (use constants instead in source code). */
-GLUTAPI void *glutBitmap9By15;
-GLUTAPI void *glutBitmap8By13;
-GLUTAPI void *glutBitmapTimesRoman10;
-GLUTAPI void *glutBitmapTimesRoman24;
-GLUTAPI void *glutBitmapHelvetica10;
-GLUTAPI void *glutBitmapHelvetica12;
-GLUTAPI void *glutBitmapHelvetica18;
-
-/* Bitmap font constants (use these in GLUT program). */
-#define GLUT_BITMAP_9_BY_15		(&glutBitmap9By15)
-#define GLUT_BITMAP_8_BY_13		(&glutBitmap8By13)
-#define GLUT_BITMAP_TIMES_ROMAN_10	(&glutBitmapTimesRoman10)
-#define GLUT_BITMAP_TIMES_ROMAN_24	(&glutBitmapTimesRoman24)
-#if (GLUT_API_VERSION >= 3)
-#define GLUT_BITMAP_HELVETICA_10	(&glutBitmapHelvetica10)
-#define GLUT_BITMAP_HELVETICA_12	(&glutBitmapHelvetica12)
-#define GLUT_BITMAP_HELVETICA_18	(&glutBitmapHelvetica18)
-#endif
-#endif
-
-/* glutGet parameters. */
-#define GLUT_WINDOW_X			((GLenum) 100)
-#define GLUT_WINDOW_Y			((GLenum) 101)
-#define GLUT_WINDOW_WIDTH		((GLenum) 102)
-#define GLUT_WINDOW_HEIGHT		((GLenum) 103)
-#define GLUT_WINDOW_BUFFER_SIZE		((GLenum) 104)
-#define GLUT_WINDOW_STENCIL_SIZE	((GLenum) 105)
-#define GLUT_WINDOW_DEPTH_SIZE		((GLenum) 106)
-#define GLUT_WINDOW_RED_SIZE		((GLenum) 107)
-#define GLUT_WINDOW_GREEN_SIZE		((GLenum) 108)
-#define GLUT_WINDOW_BLUE_SIZE		((GLenum) 109)
-#define GLUT_WINDOW_ALPHA_SIZE		((GLenum) 110)
-#define GLUT_WINDOW_ACCUM_RED_SIZE	((GLenum) 111)
-#define GLUT_WINDOW_ACCUM_GREEN_SIZE	((GLenum) 112)
-#define GLUT_WINDOW_ACCUM_BLUE_SIZE	((GLenum) 113)
-#define GLUT_WINDOW_ACCUM_ALPHA_SIZE	((GLenum) 114)
-#define GLUT_WINDOW_DOUBLEBUFFER	((GLenum) 115)
-#define GLUT_WINDOW_RGBA		((GLenum) 116)
-#define GLUT_WINDOW_PARENT		((GLenum) 117)
-#define GLUT_WINDOW_NUM_CHILDREN	((GLenum) 118)
-#define GLUT_WINDOW_COLORMAP_SIZE	((GLenum) 119)
-#if (GLUT_API_VERSION >= 2)
-#define GLUT_WINDOW_NUM_SAMPLES		((GLenum) 120)
-#define GLUT_WINDOW_STEREO		((GLenum) 121)
-#endif
-#if (GLUT_API_VERSION >= 3)
-#define GLUT_WINDOW_CURSOR		((GLenum) 122)
-#endif
-#define GLUT_SCREEN_WIDTH		((GLenum) 200)
-#define GLUT_SCREEN_HEIGHT		((GLenum) 201)
-#define GLUT_SCREEN_WIDTH_MM		((GLenum) 202)
-#define GLUT_SCREEN_HEIGHT_MM		((GLenum) 203)
-#define GLUT_MENU_NUM_ITEMS		((GLenum) 300)
-#define GLUT_DISPLAY_MODE_POSSIBLE	((GLenum) 400)
-#define GLUT_INIT_WINDOW_X		((GLenum) 500)
-#define GLUT_INIT_WINDOW_Y		((GLenum) 501)
-#define GLUT_INIT_WINDOW_WIDTH		((GLenum) 502)
-#define GLUT_INIT_WINDOW_HEIGHT		((GLenum) 503)
-#define GLUT_INIT_DISPLAY_MODE		((GLenum) 504)
-#if (GLUT_API_VERSION >= 2)
-#define GLUT_ELAPSED_TIME		((GLenum) 700)
-#endif
-#if (GLUT_API_VERSION >= 4 || GLUT_XLIB_IMPLEMENTATION >= 13)
-#define GLUT_WINDOW_FORMAT_ID		((GLenum) 123)
-#endif
-
-#if (GLUT_API_VERSION >= 2)
-/* glutDeviceGet parameters. */
-#define GLUT_HAS_KEYBOARD		((GLenum) 600)
-#define GLUT_HAS_MOUSE			((GLenum) 601)
-#define GLUT_HAS_SPACEBALL		((GLenum) 602)
-#define GLUT_HAS_DIAL_AND_BUTTON_BOX	((GLenum) 603)
-#define GLUT_HAS_TABLET			((GLenum) 604)
-#define GLUT_NUM_MOUSE_BUTTONS		((GLenum) 605)
-#define GLUT_NUM_SPACEBALL_BUTTONS	((GLenum) 606)
-#define GLUT_NUM_BUTTON_BOX_BUTTONS	((GLenum) 607)
-#define GLUT_NUM_DIALS			((GLenum) 608)
-#define GLUT_NUM_TABLET_BUTTONS		((GLenum) 609)
-#endif
-#if (GLUT_API_VERSION >= 4 || GLUT_XLIB_IMPLEMENTATION >= 13)
-#define GLUT_DEVICE_IGNORE_KEY_REPEAT   ((GLenum) 610)
-#define GLUT_DEVICE_KEY_REPEAT          ((GLenum) 611)
-#define GLUT_HAS_JOYSTICK		((GLenum) 612)
-#define GLUT_OWNS_JOYSTICK		((GLenum) 613)
-#define GLUT_JOYSTICK_BUTTONS		((GLenum) 614)
-#define GLUT_JOYSTICK_AXES		((GLenum) 615)
-#define GLUT_JOYSTICK_POLL_RATE		((GLenum) 616)
-#endif
-
-#if (GLUT_API_VERSION >= 3)
-/* glutLayerGet parameters. */
-#define GLUT_OVERLAY_POSSIBLE           ((GLenum) 800)
-#define GLUT_LAYER_IN_USE		((GLenum) 801)
-#define GLUT_HAS_OVERLAY		((GLenum) 802)
-#define GLUT_TRANSPARENT_INDEX		((GLenum) 803)
-#define GLUT_NORMAL_DAMAGED		((GLenum) 804)
-#define GLUT_OVERLAY_DAMAGED		((GLenum) 805)
-
-#if (GLUT_API_VERSION >= 4 || GLUT_XLIB_IMPLEMENTATION >= 9)
-/* glutVideoResizeGet parameters. */
-#define GLUT_VIDEO_RESIZE_POSSIBLE	((GLenum) 900)
-#define GLUT_VIDEO_RESIZE_IN_USE	((GLenum) 901)
-#define GLUT_VIDEO_RESIZE_X_DELTA	((GLenum) 902)
-#define GLUT_VIDEO_RESIZE_Y_DELTA	((GLenum) 903)
-#define GLUT_VIDEO_RESIZE_WIDTH_DELTA	((GLenum) 904)
-#define GLUT_VIDEO_RESIZE_HEIGHT_DELTA	((GLenum) 905)
-#define GLUT_VIDEO_RESIZE_X		((GLenum) 906)
-#define GLUT_VIDEO_RESIZE_Y		((GLenum) 907)
-#define GLUT_VIDEO_RESIZE_WIDTH		((GLenum) 908)
-#define GLUT_VIDEO_RESIZE_HEIGHT	((GLenum) 909)
-#endif
-
-/* glutUseLayer parameters. */
-#define GLUT_NORMAL			((GLenum) 0)
-#define GLUT_OVERLAY			((GLenum) 1)
-
-/* glutGetModifiers return mask. */
-#define GLUT_ACTIVE_SHIFT               1
-#define GLUT_ACTIVE_CTRL                2
-#define GLUT_ACTIVE_ALT                 4
-
-/* glutSetCursor parameters. */
-/* Basic arrows. */
-#define GLUT_CURSOR_RIGHT_ARROW		0
-#define GLUT_CURSOR_LEFT_ARROW		1
-/* Symbolic cursor shapes. */
-#define GLUT_CURSOR_INFO		2
-#define GLUT_CURSOR_DESTROY		3
-#define GLUT_CURSOR_HELP		4
-#define GLUT_CURSOR_CYCLE		5
-#define GLUT_CURSOR_SPRAY		6
-#define GLUT_CURSOR_WAIT		7
-#define GLUT_CURSOR_TEXT		8
-#define GLUT_CURSOR_CROSSHAIR		9
-/* Directional cursors. */
-#define GLUT_CURSOR_UP_DOWN		10
-#define GLUT_CURSOR_LEFT_RIGHT		11
-/* Sizing cursors. */
-#define GLUT_CURSOR_TOP_SIDE		12
-#define GLUT_CURSOR_BOTTOM_SIDE		13
-#define GLUT_CURSOR_LEFT_SIDE		14
-#define GLUT_CURSOR_RIGHT_SIDE		15
-#define GLUT_CURSOR_TOP_LEFT_CORNER	16
-#define GLUT_CURSOR_TOP_RIGHT_CORNER	17
-#define GLUT_CURSOR_BOTTOM_RIGHT_CORNER	18
-#define GLUT_CURSOR_BOTTOM_LEFT_CORNER	19
-/* Inherit from parent window. */
-#define GLUT_CURSOR_INHERIT		100
-/* Blank cursor. */
-#define GLUT_CURSOR_NONE		101
-/* Fullscreen crosshair (if available). */
-#define GLUT_CURSOR_FULL_CROSSHAIR	102
-#endif
-
-/* GLUT initialization sub-API. */
-GLUTAPI void APIENTRY glutInit(int *argcp, char **argv);
-#if defined(_WIN32) && !defined(GLUT_DISABLE_ATEXIT_HACK)
-GLUTAPI void APIENTRY __glutInitWithExit(int *argcp, char **argv, void (__cdecl *exitfunc)(int));
-#ifndef GLUT_BUILDING_LIB
-static void APIENTRY glutInit_ATEXIT_HACK(int *argcp, char **argv) { __glutInitWithExit(argcp, argv, exit); }
-#define glutInit glutInit_ATEXIT_HACK
-#endif
-#endif
-GLUTAPI void APIENTRY glutInitDisplayMode(unsigned int mode);
-#if (GLUT_API_VERSION >= 4 || GLUT_XLIB_IMPLEMENTATION >= 9)
-GLUTAPI void APIENTRY glutInitDisplayString(const char *string);
-#endif
-GLUTAPI void APIENTRY glutInitWindowPosition(int x, int y);
-GLUTAPI void APIENTRY glutInitWindowSize(int width, int height);
-GLUTAPI void APIENTRY glutMainLoop(void);
-
-/* GLUT window sub-API. */
-GLUTAPI int APIENTRY glutCreateWindow(const char *title);
-#if defined(_WIN32) && !defined(GLUT_DISABLE_ATEXIT_HACK)
-GLUTAPI int APIENTRY __glutCreateWindowWithExit(const char *title, void (__cdecl *exitfunc)(int));
-#ifndef GLUT_BUILDING_LIB
-static int APIENTRY glutCreateWindow_ATEXIT_HACK(const char *title) { return __glutCreateWindowWithExit(title, exit); }
-#define glutCreateWindow glutCreateWindow_ATEXIT_HACK
-#endif
-#endif
-GLUTAPI int APIENTRY glutCreateSubWindow(int win, int x, int y, int width, int height);
-GLUTAPI void APIENTRY glutDestroyWindow(int win);
-GLUTAPI void APIENTRY glutPostRedisplay(void);
-#if (GLUT_API_VERSION >= 4 || GLUT_XLIB_IMPLEMENTATION >= 11)
-GLUTAPI void APIENTRY glutPostWindowRedisplay(int win);
-#endif
-GLUTAPI void APIENTRY glutSwapBuffers(void);
-GLUTAPI int APIENTRY glutGetWindow(void);
-GLUTAPI void APIENTRY glutSetWindow(int win);
-GLUTAPI void APIENTRY glutSetWindowTitle(const char *title);
-GLUTAPI void APIENTRY glutSetIconTitle(const char *title);
-GLUTAPI void APIENTRY glutPositionWindow(int x, int y);
-GLUTAPI void APIENTRY glutReshapeWindow(int width, int height);
-GLUTAPI void APIENTRY glutPopWindow(void);
-GLUTAPI void APIENTRY glutPushWindow(void);
-GLUTAPI void APIENTRY glutIconifyWindow(void);
-GLUTAPI void APIENTRY glutShowWindow(void);
-GLUTAPI void APIENTRY glutHideWindow(void);
-#if (GLUT_API_VERSION >= 3)
-GLUTAPI void APIENTRY glutFullScreen(void);
-GLUTAPI void APIENTRY glutSetCursor(int cursor);
-#if (GLUT_API_VERSION >= 4 || GLUT_XLIB_IMPLEMENTATION >= 9)
-GLUTAPI void APIENTRY glutWarpPointer(int x, int y);
-#endif
-
-/* GLUT overlay sub-API. */
-GLUTAPI void APIENTRY glutEstablishOverlay(void);
-GLUTAPI void APIENTRY glutRemoveOverlay(void);
-GLUTAPI void APIENTRY glutUseLayer(GLenum layer);
-GLUTAPI void APIENTRY glutPostOverlayRedisplay(void);
-#if (GLUT_API_VERSION >= 4 || GLUT_XLIB_IMPLEMENTATION >= 11)
-GLUTAPI void APIENTRY glutPostWindowOverlayRedisplay(int win);
-#endif
-GLUTAPI void APIENTRY glutShowOverlay(void);
-GLUTAPI void APIENTRY glutHideOverlay(void);
-#endif
-
-/* GLUT menu sub-API. */
-GLUTAPI int APIENTRY glutCreateMenu(void (GLUTCALLBACK *func)(int));
-#if defined(_WIN32) && !defined(GLUT_DISABLE_ATEXIT_HACK)
-GLUTAPI int APIENTRY __glutCreateMenuWithExit(void (GLUTCALLBACK *func)(int), void (__cdecl *exitfunc)(int));
-#ifndef GLUT_BUILDING_LIB
-static int APIENTRY glutCreateMenu_ATEXIT_HACK(void (GLUTCALLBACK *func)(int)) { return __glutCreateMenuWithExit(func, exit); }
-#define glutCreateMenu glutCreateMenu_ATEXIT_HACK
-#endif
-#endif
-GLUTAPI void APIENTRY glutDestroyMenu(int menu);
-GLUTAPI int APIENTRY glutGetMenu(void);
-GLUTAPI void APIENTRY glutSetMenu(int menu);
-GLUTAPI void APIENTRY glutAddMenuEntry(const char *label, int value);
-GLUTAPI void APIENTRY glutAddSubMenu(const char *label, int submenu);
-GLUTAPI void APIENTRY glutChangeToMenuEntry(int item, const char *label, int value);
-GLUTAPI void APIENTRY glutChangeToSubMenu(int item, const char *label, int submenu);
-GLUTAPI void APIENTRY glutRemoveMenuItem(int item);
-GLUTAPI void APIENTRY glutAttachMenu(int button);
-GLUTAPI void APIENTRY glutDetachMenu(int button);
-
-/* GLUT window callback sub-API. */
-GLUTAPI void APIENTRY glutDisplayFunc(void (GLUTCALLBACK *func)(void));
-GLUTAPI void APIENTRY glutReshapeFunc(void (GLUTCALLBACK *func)(int width, int height));
-GLUTAPI void APIENTRY glutKeyboardFunc(void (GLUTCALLBACK *func)(unsigned char key, int x, int y));
-GLUTAPI void APIENTRY glutMouseFunc(void (GLUTCALLBACK *func)(int button, int state, int x, int y));
-GLUTAPI void APIENTRY glutMotionFunc(void (GLUTCALLBACK *func)(int x, int y));
-GLUTAPI void APIENTRY glutPassiveMotionFunc(void (GLUTCALLBACK *func)(int x, int y));
-GLUTAPI void APIENTRY glutEntryFunc(void (GLUTCALLBACK *func)(int state));
-GLUTAPI void APIENTRY glutVisibilityFunc(void (GLUTCALLBACK *func)(int state));
-GLUTAPI void APIENTRY glutIdleFunc(void (GLUTCALLBACK *func)(void));
-GLUTAPI void APIENTRY glutTimerFunc(unsigned int millis, void (GLUTCALLBACK *func)(int value), int value);
-GLUTAPI void APIENTRY glutMenuStateFunc(void (GLUTCALLBACK *func)(int state));
-#if (GLUT_API_VERSION >= 2)
-GLUTAPI void APIENTRY glutSpecialFunc(void (GLUTCALLBACK *func)(int key, int x, int y));
-GLUTAPI void APIENTRY glutSpaceballMotionFunc(void (GLUTCALLBACK *func)(int x, int y, int z));
-GLUTAPI void APIENTRY glutSpaceballRotateFunc(void (GLUTCALLBACK *func)(int x, int y, int z));
-GLUTAPI void APIENTRY glutSpaceballButtonFunc(void (GLUTCALLBACK *func)(int button, int state));
-GLUTAPI void APIENTRY glutButtonBoxFunc(void (GLUTCALLBACK *func)(int button, int state));
-GLUTAPI void APIENTRY glutDialsFunc(void (GLUTCALLBACK *func)(int dial, int value));
-GLUTAPI void APIENTRY glutTabletMotionFunc(void (GLUTCALLBACK *func)(int x, int y));
-GLUTAPI void APIENTRY glutTabletButtonFunc(void (GLUTCALLBACK *func)(int button, int state, int x, int y));
-#if (GLUT_API_VERSION >= 3)
-GLUTAPI void APIENTRY glutMenuStatusFunc(void (GLUTCALLBACK *func)(int status, int x, int y));
-GLUTAPI void APIENTRY glutOverlayDisplayFunc(void (GLUTCALLBACK *func)(void));
-#if (GLUT_API_VERSION >= 4 || GLUT_XLIB_IMPLEMENTATION >= 9)
-GLUTAPI void APIENTRY glutWindowStatusFunc(void (GLUTCALLBACK *func)(int state));
-#endif
-#if (GLUT_API_VERSION >= 4 || GLUT_XLIB_IMPLEMENTATION >= 13)
-GLUTAPI void APIENTRY glutKeyboardUpFunc(void (GLUTCALLBACK *func)(unsigned char key, int x, int y));
-GLUTAPI void APIENTRY glutSpecialUpFunc(void (GLUTCALLBACK *func)(int key, int x, int y));
-GLUTAPI void APIENTRY glutJoystickFunc(void (GLUTCALLBACK *func)(unsigned int buttonMask, int x, int y, int z), int pollInterval);
-#endif
-#endif
-#endif
-
-/* GLUT color index sub-API. */
-GLUTAPI void APIENTRY glutSetColor(int, GLfloat red, GLfloat green, GLfloat blue);
-GLUTAPI GLfloat APIENTRY glutGetColor(int ndx, int component);
-GLUTAPI void APIENTRY glutCopyColormap(int win);
-
-/* GLUT state retrieval sub-API. */
-GLUTAPI int APIENTRY glutGet(GLenum type);
-GLUTAPI int APIENTRY glutDeviceGet(GLenum type);
-#if (GLUT_API_VERSION >= 2)
-/* GLUT extension support sub-API */
-GLUTAPI int APIENTRY glutExtensionSupported(const char *name);
-#endif
-#if (GLUT_API_VERSION >= 3)
-GLUTAPI int APIENTRY glutGetModifiers(void);
-GLUTAPI int APIENTRY glutLayerGet(GLenum type);
-#endif
-
-/* GLUT font sub-API */
-GLUTAPI void APIENTRY glutBitmapCharacter(void *font, int character);
-GLUTAPI int APIENTRY glutBitmapWidth(void *font, int character);
-GLUTAPI void APIENTRY glutStrokeCharacter(void *font, int character);
-GLUTAPI int APIENTRY glutStrokeWidth(void *font, int character);
-#if (GLUT_API_VERSION >= 4 || GLUT_XLIB_IMPLEMENTATION >= 9)
-GLUTAPI int APIENTRY glutBitmapLength(void *font, const unsigned char *string);
-GLUTAPI int APIENTRY glutStrokeLength(void *font, const unsigned char *string);
-#endif
-
-/* GLUT pre-built models sub-API */
-GLUTAPI void APIENTRY glutWireSphere(GLdouble radius, GLint slices, GLint stacks);
-GLUTAPI void APIENTRY glutSolidSphere(GLdouble radius, GLint slices, GLint stacks);
-GLUTAPI void APIENTRY glutWireCone(GLdouble base, GLdouble height, GLint slices, GLint stacks);
-GLUTAPI void APIENTRY glutSolidCone(GLdouble base, GLdouble height, GLint slices, GLint stacks);
-GLUTAPI void APIENTRY glutWireCube(GLdouble size);
-GLUTAPI void APIENTRY glutSolidCube(GLdouble size);
-GLUTAPI void APIENTRY glutWireTorus(GLdouble innerRadius, GLdouble outerRadius, GLint sides, GLint rings);
-GLUTAPI void APIENTRY glutSolidTorus(GLdouble innerRadius, GLdouble outerRadius, GLint sides, GLint rings);
-GLUTAPI void APIENTRY glutWireDodecahedron(void);
-GLUTAPI void APIENTRY glutSolidDodecahedron(void);
-GLUTAPI void APIENTRY glutWireTeapot(GLdouble size);
-GLUTAPI void APIENTRY glutSolidTeapot(GLdouble size);
-GLUTAPI void APIENTRY glutWireOctahedron(void);
-GLUTAPI void APIENTRY glutSolidOctahedron(void);
-GLUTAPI void APIENTRY glutWireTetrahedron(void);
-GLUTAPI void APIENTRY glutSolidTetrahedron(void);
-GLUTAPI void APIENTRY glutWireIcosahedron(void);
-GLUTAPI void APIENTRY glutSolidIcosahedron(void);
-
-#if (GLUT_API_VERSION >= 4 || GLUT_XLIB_IMPLEMENTATION >= 9)
-/* GLUT video resize sub-API. */
-GLUTAPI int APIENTRY glutVideoResizeGet(GLenum param);
-GLUTAPI void APIENTRY glutSetupVideoResizing(void);
-GLUTAPI void APIENTRY glutStopVideoResizing(void);
-GLUTAPI void APIENTRY glutVideoResize(int x, int y, int width, int height);
-GLUTAPI void APIENTRY glutVideoPan(int x, int y, int width, int height);
-
-/* GLUT debugging sub-API. */
-GLUTAPI void APIENTRY glutReportErrors(void);
-#endif
-
-#if (GLUT_API_VERSION >= 4 || GLUT_XLIB_IMPLEMENTATION >= 13)
-/* GLUT device control sub-API. */
-/* glutSetKeyRepeat modes. */
-#define GLUT_KEY_REPEAT_OFF		0
-#define GLUT_KEY_REPEAT_ON		1
-#define GLUT_KEY_REPEAT_DEFAULT		2
-
-/* Joystick button masks. */
-#define GLUT_JOYSTICK_BUTTON_A		1
-#define GLUT_JOYSTICK_BUTTON_B		2
-#define GLUT_JOYSTICK_BUTTON_C		4
-#define GLUT_JOYSTICK_BUTTON_D		8
-
-GLUTAPI void APIENTRY glutIgnoreKeyRepeat(int ignore);
-GLUTAPI void APIENTRY glutSetKeyRepeat(int repeatMode);
-GLUTAPI void APIENTRY glutForceJoystickFunc(void);
-
-/* GLUT game mode sub-API. */
-/* glutGameModeGet. */
-#define GLUT_GAME_MODE_ACTIVE           ((GLenum) 0)
-#define GLUT_GAME_MODE_POSSIBLE         ((GLenum) 1)
-#define GLUT_GAME_MODE_WIDTH            ((GLenum) 2)
-#define GLUT_GAME_MODE_HEIGHT           ((GLenum) 3)
-#define GLUT_GAME_MODE_PIXEL_DEPTH      ((GLenum) 4)
-#define GLUT_GAME_MODE_REFRESH_RATE     ((GLenum) 5)
-#define GLUT_GAME_MODE_DISPLAY_CHANGED  ((GLenum) 6)
-
-GLUTAPI void APIENTRY glutGameModeString(const char *string);
-GLUTAPI int APIENTRY glutEnterGameMode(void);
-GLUTAPI void APIENTRY glutLeaveGameMode(void);
-GLUTAPI int APIENTRY glutGameModeGet(GLenum mode);
-#endif
-
-#ifdef __cplusplus
-}
-
-#endif
-
-#ifdef GLUT_APIENTRY_DEFINED
-# undef GLUT_APIENTRY_DEFINED
-# undef APIENTRY
-#endif
-
-#ifdef GLUT_WINGDIAPI_DEFINED
-# undef GLUT_WINGDIAPI_DEFINED
-# undef WINGDIAPI
-#endif
-
-#ifdef GLUT_DEFINED___CDECL
-# undef GLUT_DEFINED___CDECL
-# undef __cdecl
-#endif
-
-#ifdef GLUT_DEFINED__CRTIMP
-# undef GLUT_DEFINED__CRTIMP
-# undef _CRTIMP
-#endif
-
-#endif                  /* __glut_h__ */
diff --git a/Assignment1/Assignment1/lena256.bmp b/Assignment1/Assignment1/lena256.bmp
deleted file mode 100644
index 46986c2..0000000
Binary files a/Assignment1/Assignment1/lena256.bmp and /dev/null differ
diff --git a/Assignment1/Assignment1/lib/GLU32.LIB b/Assignment1/Assignment1/lib/GLU32.LIB
deleted file mode 100644
index 399b4c9..0000000
Binary files a/Assignment1/Assignment1/lib/GLU32.LIB and /dev/null differ
diff --git a/Assignment1/Assignment1/lib/Glaux.lib b/Assignment1/Assignment1/lib/Glaux.lib
deleted file mode 100644
index e08dd9c..0000000
Binary files a/Assignment1/Assignment1/lib/Glaux.lib and /dev/null differ
diff --git a/Assignment1/Assignment1/lib/OPENGL32.LIB b/Assignment1/Assignment1/lib/OPENGL32.LIB
deleted file mode 100644
index 5904079..0000000
Binary files a/Assignment1/Assignment1/lib/OPENGL32.LIB and /dev/null differ
diff --git a/Assignment1/Assignment1/lib/glui32.lib b/Assignment1/Assignment1/lib/glui32.lib
deleted file mode 100644
index 8757c03..0000000
Binary files a/Assignment1/Assignment1/lib/glui32.lib and /dev/null differ
diff --git a/Assignment1/Assignment1/lib/glut32.lib b/Assignment1/Assignment1/lib/glut32.lib
deleted file mode 100644
index 0ad1594..0000000
Binary files a/Assignment1/Assignment1/lib/glut32.lib and /dev/null differ
diff --git a/Assignment1/Assignment1/main.cpp b/Assignment1/Assignment1/main.cpp
deleted file mode 100644
index 8031044..0000000
--- a/Assignment1/Assignment1/main.cpp
+++ /dev/null
@@ -1,278 +0,0 @@
-#include <stdio.h>
-#include <math.h>
-#include <windows.h>
-#include "GL\glut.h"
-
-enum Filter { F_NONE, F_SOBEL, F_HALFTONE, F_FLOYD };
-
-GLuint texture[4];
-GLubyte* newPics[4];
-
-GLubyte* originalPic;
-GLint original_width;
-GLint original_height;
-
-void writeArrayToFile(char questionNum, GLubyte* content, int size, BOOL isMonochrome)
-{
-	char filename[30];
-	strcpy_s(filename, "assignment\\imgX.txt");
-	filename[14] = questionNum;
-	FILE* pFile;
-	CreateDirectory("assignment", NULL);
-	fopen_s(&pFile, filename, "wb");
-	if (isMonochrome)
-	{
-		for (int i = 0; i < size; i++)
-		{
-			if (content[i] == 255)	fwrite("1", sizeof(char), 1, pFile);
-			else					fwrite("0", sizeof(char), 1, pFile);
-
-			if (i < size - 1)	fwrite(",", sizeof(char), 1, pFile);
-
-		}
-	}
-	else
-	{
-		for (int i = 0; i < size; i++)
-		{
-			int value = content[i] / 16;
-			char str[4];
-			_itoa_s(value, str, 10);
-			fwrite(str, sizeof(char)*strlen(str), 1, pFile);
-
-			if (i < size - 1)	fwrite(",", sizeof(char), 1, pFile);
-		}
-	}
-	fclose(pFile);
-}
-
-void sobel(GLubyte* pic)
-{
-	double threshold = 0.135 * 255;
-	double m = (1.0 / 8);
-
-	GLdouble sx[9] = { 
-		m*-1, m * 0, m * 1,
-		m*-2, m * 0, m * 2,
-		m*-1, m * 0, m * 1
-	};
-
-	GLdouble sy[9] = { 
-		m * 1, m * 2, m * 1,
-		m * 0, m * 0, m * 0,
-		m* -1, m *-2, m *-1
-	};
-
-	GLdouble* tmp_sobel = new GLdouble[original_width*original_height];
-
-	for (int i = 0; i < original_height; i++)
-	{
-		for (int j = 0; j < original_width; j++)
-		{
-			tmp_sobel[i * original_width + j] = 0;
-			int horizontal_weight = 0;
-			int vertical_weight = 0;
-
-			//going through the 9 neighbors 
-			for (int w = i - 1; w <= i + 1; w++){
-				for (int h = j - 1; h <= j + 1; h++){
-					//if inside pic borders
-					if (w >= 0 && h >= 0 && w < original_height && h < original_width){
-						//update pixel with neighbor multiplied 
-
-						horizontal_weight += originalPic[w * original_width + h] * sx[(w - i + 1) * 3 + (h - j + 1)];
-						vertical_weight   += originalPic[w * original_width + h] * sy[(w - i + 1) * 3 + (h - j + 1)];
-					}
-				}
-			}
-			tmp_sobel[i * original_width + j] = abs(horizontal_weight) + abs(vertical_weight);
-		}
-	}
-	for (int i = 0; i < original_width*original_height; i++){
-		pic[i] = (tmp_sobel[i] < threshold) ? 0 : 255;
-	}
-}
-
-void halftone(GLubyte* pic)
-{
-	memset(pic, 255, original_height*original_width * 4 * sizeof(GLubyte));
-
-	for (int i = 0; i<original_height; i++)
-	{
-		for (int j = 0; j<original_width; j++)
-		{			
-			int k=j*2;
-			int l=i*2;
-
-			if(originalPic[i+j*original_width]<=255*1/5.0)
-			pic[l+k*original_width*2]=0;
-
-			if(originalPic[i+j*original_width]<=255*2/5.0)
-			pic[l+1+k*original_width*2]=0;
-
-			if(originalPic[i+j*original_width]<=255*3/5.0)
-			pic[l+1+(k+1)*original_width*2]=0;
-			if(originalPic[i+j*original_width]<=255*4/5.0)
-			pic[l+(k+1)*original_width*2]=0;
-
-		}
-	}
-}
-
-void floyd(GLubyte* pic)
-{
-	int numOfColors = 16;
-
-	GLdouble* tmp = new GLdouble[original_width*original_height];
-
-	for (int i = 0; i < original_width*original_height; i++) {
-		tmp[i] = (GLdouble)originalPic[i];
-	}
-
-	GLdouble a = 7.0 / 16.0;
-	GLdouble b = 3.0 / 16.0;
-	GLdouble c = 5.0 / 16.0;
-	GLdouble d = 1.0 / 16.0;
-
-	for (int i = 0; i < original_height; i++) {
-		for (int j = 0; j < original_width; j++) {
-			tmp[i*original_width + j] -= (((int)tmp[i*original_width + j]) % (256/numOfColors));
-			
-			double e = originalPic[i*original_width + j] - tmp[i*original_width + j];
-
-			if (j+1 < original_width)				tmp[i*original_width + j + 1]		+= (a*e);
-			if (i + 1 < original_height)
-			{
-				if		(j - 1 < original_width)		tmp[(i + 1)*original_width + j - 1] += (b*e);
-				else if (j < original_width)			tmp[(i + 1)*original_width + j]		+= (c*e);
-				else if (j + 1 < original_width)		tmp[(i + 1)*original_width + j + 1] += (d*e);		
-			}		
-		}
-	}
-	
-	for (int i = 0; i < original_width; i++) {
-		for (int j = 0; j < original_height; j++) {
-			pic[i*original_width + j] = (GLubyte)tmp[i*original_width + j];
-		}
-	}
-
-	delete[] tmp;
-	
-}
-
-void applyFilterToTexture(Filter filter, void(*function)(GLubyte*), int width, int height)
-{
-	if (function != NULL)	function(newPics[filter]);
-
-	glGenTextures(1, &texture[filter]);  //generate place for new texture
-	glBindTexture(GL_TEXTURE_2D, texture[filter]); // initialize first texure 
-
-	//texture properties
-	glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_S, GL_CLAMP);
-	glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_T, GL_CLAMP);
-	glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MAG_FILTER, GL_NEAREST);
-	glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MIN_FILTER, GL_NEAREST);
-
-	//build texture
-	glTexImage2D(GL_TEXTURE_2D, 0, GL_RGB, width, height, 0, GL_LUMINANCE, GL_UNSIGNED_BYTE, newPics[filter]);
-
-}
-
-void init(const char* filename)
-{
-	FILE* f1;
-	int rd;
-	GLubyte header[54], colorTable[1024];
-	glEnable(GL_TEXTURE_2D);
-	glOrtho(-1.0, 1.0, -1.0, 1.0, 2.0, -2.0);
-	glClearColor(0, 0, 0, 0);
-
-	fopen_s(&f1, filename, "rb");
-
-	/*************************/
-	//image header reading
-	fread(header, 54, 1, f1);
-	if (header[0] != 'B' || header[1] != 'M')		exit(1);  //not a BMP file
-
-	original_width = *(int*)(header + 18);
-	original_height = *(int*)(header + 22);
-	printf("\nlena %d %d %d \n", original_width, original_height, original_width*original_height);
-
-	/**********************************/
-
-	originalPic			= new GLubyte[original_width*original_height];
-	newPics[F_NONE] = originalPic;
-	newPics[F_SOBEL]	= new GLubyte[original_width*original_height];
-	newPics[F_HALFTONE] = new GLubyte[original_height*original_width * 4];
-	newPics[F_FLOYD]	= new GLubyte[original_width*original_height];
-
-	rd = fread(colorTable, 1, 1024, f1); //read color table
-	rd = fread(originalPic, 1, original_width*original_height, f1); //read image
-
-	fclose(f1);
-
-
-	applyFilterToTexture(F_NONE,		NULL,		original_width, original_height);
-	applyFilterToTexture(F_SOBEL,		sobel,		original_width, original_height);
-	applyFilterToTexture(F_HALFTONE,	halftone,	original_width*2, original_height*2);
-	applyFilterToTexture(F_FLOYD,		floyd,		original_width, original_height);
-
-	writeArrayToFile('4', newPics[F_SOBEL],		original_width*original_height,		TRUE);
-	writeArrayToFile('5', newPics[F_HALFTONE],	original_width*original_height*4,	TRUE);
-	writeArrayToFile('6', newPics[F_FLOYD],		original_width*original_height,		FALSE);
-}
-
-void paintQuadWithTexture(GLint x, GLint y, GLsizei width, GLsizei height, GLuint textureKey)
-{
-	glViewport(x, y, width, height);
-	glTexEnvf(GL_TEXTURE_ENV, GL_TEXTURE_ENV_MODE, GL_MODULATE);
-	glBindTexture(GL_TEXTURE_2D, textureKey); //using first texture
-
-	glBegin(GL_QUADS);
-		glTexCoord2f(0, 0); //adapt texture to shape
-		glVertex3f(-1.0, -1.0f, 1.0);
-
-		glTexCoord2f(1, 0);  //adapt texture to shape
-		glVertex3f(1.0, -1.0f, 1.0);
-
-		glTexCoord2f(1, 1);//adapt texture to shape
-		glVertex3f(1.0, 1.0f, 1.0);
-
-		glTexCoord2f(0, 1);//adapt texture to shape
-		glVertex3f(-1.0, 1.0f, 1.0);
-	glEnd();
-	glBindTexture(GL_TEXTURE_2D, 0);
-}
-
-void mydisplay(void){
-
-	glClear(GL_COLOR_BUFFER_BIT);
-
-	glColor3f(1.0f, 1.0f, 1.0f);
-
-	paintQuadWithTexture(0,	  256, 256, 256, texture[F_NONE]);
-	paintQuadWithTexture(256, 256, 256, 256, texture[F_SOBEL]);
-	paintQuadWithTexture(0,	  0,   256, 256, texture[F_HALFTONE]);
-	paintQuadWithTexture(256, 0,   256, 256, texture[F_FLOYD]);
-
-	glBindTexture(GL_TEXTURE_2D, 0);
-	glFlush();
-}
-
-int main(int  argc, char** argv)
-{
-	if (argc < 2){
-		printf("Please specify a filename. \n Exiting..");
-		exit(1);
-	}
-	glutInit(&argc, argv);
-	glutInitDisplayMode(GLUT_SINGLE | GLUT_RGB);
-	glutInitWindowSize(512, 512);
-	glutCreateWindow("Assignment1");
-
-	init(argv[1]);
-	glutDisplayFunc(mydisplay);
-	glutMainLoop();
-
-	delete[] newPics;
-}
\ No newline at end of file
diff --git a/Assignment3/.classpath b/Assignment3/.classpath
deleted file mode 100644
index 9f706b9..0000000
--- a/Assignment3/.classpath
+++ /dev/null
@@ -1,8 +0,0 @@
-<?xml version="1.0" encoding="UTF-8"?>
-<classpath>
-	<classpathentry kind="src" path="src"/>
-	<classpathentry kind="src" path="Test"/>
-	<classpathentry kind="con" path="org.eclipse.jdt.launching.JRE_CONTAINER/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType/JavaSE-1.7"/>
-	<classpathentry kind="con" path="org.eclipse.jdt.junit.JUNIT_CONTAINER/4"/>
-	<classpathentry kind="output" path="bin"/>
-</classpath>
diff --git a/Assignment3/.gitignore b/Assignment3/.gitignore
deleted file mode 100644
index 5e56e04..0000000
--- a/Assignment3/.gitignore
+++ /dev/null
@@ -1 +0,0 @@
-/bin
diff --git a/Assignment3/.project b/Assignment3/.project
deleted file mode 100644
index cd8215f..0000000
--- a/Assignment3/.project
+++ /dev/null
@@ -1,17 +0,0 @@
-<?xml version="1.0" encoding="UTF-8"?>
-<projectDescription>
-	<name>Assignment3</name>
-	<comment></comment>
-	<projects>
-	</projects>
-	<buildSpec>
-		<buildCommand>
-			<name>org.eclipse.jdt.core.javabuilder</name>
-			<arguments>
-			</arguments>
-		</buildCommand>
-	</buildSpec>
-	<natures>
-		<nature>org.eclipse.jdt.core.javanature</nature>
-	</natures>
-</projectDescription>
diff --git a/Assignment3/.settings/org.eclipse.jdt.core.prefs b/Assignment3/.settings/org.eclipse.jdt.core.prefs
deleted file mode 100644
index afd4270..0000000
--- a/Assignment3/.settings/org.eclipse.jdt.core.prefs
+++ /dev/null
@@ -1,12 +0,0 @@
-#Fri Dec 13 20:46:53 IST 2013
-eclipse.preferences.version=1
-org.eclipse.jdt.core.compiler.codegen.inlineJsrBytecode=enabled
-org.eclipse.jdt.core.compiler.codegen.targetPlatform=1.6
-org.eclipse.jdt.core.compiler.codegen.unusedLocal=preserve
-org.eclipse.jdt.core.compiler.compliance=1.6
-org.eclipse.jdt.core.compiler.debug.lineNumber=generate
-org.eclipse.jdt.core.compiler.debug.localVariable=generate
-org.eclipse.jdt.core.compiler.debug.sourceFile=generate
-org.eclipse.jdt.core.compiler.problem.assertIdentifier=error
-org.eclipse.jdt.core.compiler.problem.enumIdentifier=error
-org.eclipse.jdt.core.compiler.source=1.6
diff --git a/Assignment3/Test/WarehouseTest.java b/Assignment3/Test/WarehouseTest.java
deleted file mode 100644
index 0484bfe..0000000
--- a/Assignment3/Test/WarehouseTest.java
+++ /dev/null
@@ -1,71 +0,0 @@
-import static org.junit.Assert.*;
-
-import java.util.ArrayList;
-import java.util.List;
-
-import org.junit.After;
-import org.junit.Before;
-import org.junit.Test;
-
-
-public class WarehouseTest
-{
-
-	WarehouseImpl warehouse;
-	
-	
-	@Before
-	public void setUp() throws Exception
-	{
-		warehouse = new WarehouseImpl();
-	}
-
-	@After
-	public void tearDown() throws Exception
-	{
-	}
-
-	@Test
-	public void testTakeResources()
-	{
-		String ingredientsStr[] = { "cucumber", "tommato", "letus", "potato" };
-		List<Ingredient> ingredients = new ArrayList<Ingredient>();
-		
-		for (int i = 0; i < ingredientsStr.length; i++)
-		{
-			ingredients.add(new Ingredient(ingredientsStr[i],i+1));
-		}
-		
-		String kitchenToolsStr[] = { "fork", "pot", "spoon", "knife" };
-		List<KitchenTool> kitchenTools = new ArrayList<KitchenTool>();
-		
-		for (int i = 0; i < kitchenToolsStr.length; i++)
-		{
-			kitchenTools.add(new KitchenTool(kitchenToolsStr[i],i+1));
-		}
-		
-		warehouse.takeResources(ingredients, kitchenTools);
-		
-		
-		for (KitchenTool kitchenTool : kitchenTools)
-		{
-			//warehouse.getKitchenToolCount() == 
-		}
-		
-		
-		fail("Not yet implemented");
-	}
-
-	@Test
-	public void testReturnKitchenTools()
-	{
-		fail("Not yet implemented");
-	}
-
-	@Test
-	public void testIngredientsConsumedReport()
-	{
-		fail("Not yet implemented");
-	}
-
-}
diff --git a/Assignment3/src/Ingredient.java b/Assignment3/src/Ingredient.java
deleted file mode 100644
index 0a4b309..0000000
--- a/Assignment3/src/Ingredient.java
+++ /dev/null
@@ -1,10 +0,0 @@
-
-public class Ingredient
-{
-
-	public Ingredient(String string, int i)
-	{
-		// TODO Auto-generated constructor stub
-	}
-
-}
diff --git a/Assignment3/src/KitchenTool.java b/Assignment3/src/KitchenTool.java
deleted file mode 100644
index 81ac8ff..0000000
--- a/Assignment3/src/KitchenTool.java
+++ /dev/null
@@ -1,10 +0,0 @@
-
-public class KitchenTool
-{
-
-	public KitchenTool(String string, int i)
-	{
-		// TODO Auto-generated constructor stub
-	}
-
-}
diff --git a/Assignment3/src/Warehouse.java b/Assignment3/src/Warehouse.java
deleted file mode 100644
index 15f7a01..0000000
--- a/Assignment3/src/Warehouse.java
+++ /dev/null
@@ -1,37 +0,0 @@
-import java.util.List;
-
-/**
- * @inv getIngredientsCount() >= 0
- * @inv getKitchenToolCount() >= 0
- * 
- */
-public interface Warehouse
-{
-
-	/**
-	 * @pre foreach ingredient in @ingredients: getRemainingIngredient(ingredient) >= ingredient.quantity
-	 * @pre foreach kitchenTool in @kitchenTools: getRemainingKitchenTools(kitchenTool) >= kitchenTool.quantity
-	 * @post foreach ingredient in @this._ingredients: getRemainingIngredient(ingredient) == @before(getRemainingIngredient(ingredient)-ingredient.quantity)
-	 * @post foreach kitchenTool in @this._kitchenTools: getRemainingKitchenTools(kitchenTool) == @before(getRemainingKitchenTools(kitchenTool)-kitchenTool.quantity)
-	 */
-	public void takeResources(List<Ingredient> ingredients, List<KitchenTool> kitchenTools);
-	
-	/**
-	 * @pre foreach kitchenTool in @kitchenTools: getRemainingKitchenTools(kitchenTool) >= 0
-	 * @post foreach kitchenTool in @this._kitchenTools: getRemainingKitchenTools(kitchenTool) == @before(getRemainingKitchenTools(kitchenTool)+kitchenTool.quantity)
-	 */
-	public void returnKitchenTools(List<KitchenTool> kitchenTools);
-	
-	//
-	public String ingredientsConsumedReport();
-	
-	
-	public int getIngredientsCount();
-	public int getKitchenToolCount();
-	
-	public int getRemainingIngredient(String ingredient);
-	public int getRemainingKitchenTools(String kitchenTools);
-	
-	
-}
-
diff --git a/Assignment3/src/WarehouseImpl.java b/Assignment3/src/WarehouseImpl.java
deleted file mode 100644
index 02aee86..0000000
--- a/Assignment3/src/WarehouseImpl.java
+++ /dev/null
@@ -1,59 +0,0 @@
-import java.util.List;
-
-
-public class WarehouseImpl implements Warehouse
-{
-
-
-	
-	@Override
-	public void takeResources(List<Ingredient> ingredients,
-			List<KitchenTool> kitchenTools)
-	{
-		// TODO Auto-generated method stub
-
-	}
-
-	@Override
-	public void returnKitchenTools(List<KitchenTool> kitchenTools)
-	{
-		// TODO Auto-generated method stub
-
-	}
-
-	@Override
-	public String ingredientsConsumedReport()
-	{
-		// TODO Auto-generated method stub
-		return null;
-	}
-
-	@Override
-	public int getIngredientsCount()
-	{
-		// TODO Auto-generated method stub
-		return 0;
-	}
-
-	@Override
-	public int getKitchenToolCount()
-	{
-		// TODO Auto-generated method stub
-		return 0;
-	}
-
-	@Override
-	public int getRemainingIngredient(String ingredient)
-	{
-		// TODO Auto-generated method stub
-		return 0;
-	}
-
-	@Override
-	public int getRemainingKitchenTools(String kitchenTools)
-	{
-		// TODO Auto-generated method stub
-		return 0;
-	}
-
-}
diff --git a/LICENSE b/LICENSE
new file mode 100644
index 0000000..46fd1cc
--- /dev/null
+++ b/LICENSE
@@ -0,0 +1,24 @@
+The xv6 software is:
+
+Copyright (c) 2006-2009 Frans Kaashoek, Robert Morris, Russ Cox,
+                        Massachusetts Institute of Technology
+
+Permission is hereby granted, free of charge, to any person obtaining
+a copy of this software and associated documentation files (the
+"Software"), to deal in the Software without restriction, including
+without limitation the rights to use, copy, modify, merge, publish,
+distribute, sublicense, and/or sell copies of the Software, and to
+permit persons to whom the Software is furnished to do so, subject to
+the following conditions:
+
+The above copyright notice and this permission notice shall be
+included in all copies or substantial portions of the Software.
+
+THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
+EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
+MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
+NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
+LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
+OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
+WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+
diff --git a/Makefile b/Makefile
new file mode 100644
index 0000000..c94c71d
--- /dev/null
+++ b/Makefile
@@ -0,0 +1,219 @@
+OBJS = \
+	bio.o\
+	console.o\
+	exec.o\
+	file.o\
+	fs.o\
+	ide.o\
+	ioapic.o\
+	kalloc.o\
+	kbd.o\
+	lapic.o\
+	log.o\
+	main.o\
+	mp.o\
+	picirq.o\
+	pipe.o\
+	proc.o\
+	spinlock.o\
+	string.o\
+	swtch.o\
+	syscall.o\
+	sysfile.o\
+	sysproc.o\
+	timer.o\
+	trapasm.o\
+	trap.o\
+	uart.o\
+	vectors.o\
+	vm.o\
+
+# Cross-compiling (e.g., on Mac OS X)
+# TOOLPREFIX = i386-jos-elf
+
+# Using native tools (e.g., on X86 Linux)
+#TOOLPREFIX = 
+
+# Try to infer the correct TOOLPREFIX if not set
+ifndef TOOLPREFIX
+TOOLPREFIX := $(shell if i386-jos-elf-objdump -i 2>&1 | grep '^elf32-i386$$' >/dev/null 2>&1; \
+	then echo 'i386-jos-elf-'; \
+	elif objdump -i 2>&1 | grep 'elf32-i386' >/dev/null 2>&1; \
+	then echo ''; \
+	else echo "***" 1>&2; \
+	echo "*** Error: Couldn't find an i386-*-elf version of GCC/binutils." 1>&2; \
+	echo "*** Is the directory with i386-jos-elf-gcc in your PATH?" 1>&2; \
+	echo "*** If your i386-*-elf toolchain is installed with a command" 1>&2; \
+	echo "*** prefix other than 'i386-jos-elf-', set your TOOLPREFIX" 1>&2; \
+	echo "*** environment variable to that prefix and run 'make' again." 1>&2; \
+	echo "*** To turn off this error, run 'gmake TOOLPREFIX= ...'." 1>&2; \
+	echo "***" 1>&2; exit 1; fi)
+endif
+
+# If the makefile can't find QEMU, specify its path here
+# QEMU = qemu-system-i386
+
+# Try to infer the correct QEMU
+ifndef QEMU
+QEMU = $(shell if which qemu > /dev/null; \
+	then echo qemu; exit; \
+	elif which qemu-system-i386 > /dev/null; \
+	then echo qemu-system-i386; exit; \
+	else \
+	qemu=/Applications/Q.app/Contents/MacOS/i386-softmmu.app/Contents/MacOS/i386-softmmu; \
+	if test -x $$qemu; then echo $$qemu; exit; fi; fi; \
+	echo "***" 1>&2; \
+	echo "*** Error: Couldn't find a working QEMU executable." 1>&2; \
+	echo "*** Is the directory containing the qemu binary in your PATH" 1>&2; \
+	echo "*** or have you tried setting the QEMU variable in Makefile?" 1>&2; \
+	echo "***" 1>&2; exit 1)
+endif
+
+CC = $(TOOLPREFIX)gcc
+AS = $(TOOLPREFIX)gas
+LD = $(TOOLPREFIX)ld
+OBJCOPY = $(TOOLPREFIX)objcopy
+OBJDUMP = $(TOOLPREFIX)objdump
+#CFLAGS = -fno-pic -static -fno-builtin -fno-strict-aliasing -O2 -Wall -MD -ggdb -m32 -Werror -fno-omit-frame-pointer
+CFLAGS = -fno-pic -static -fno-builtin -fno-strict-aliasing -fvar-tracking -fvar-tracking-assignments -O0 -g -Wall -MD -gdwarf-2 -m32 -Werror -fno-omit-frame-pointer
+CFLAGS += $(shell $(CC) -fno-stack-protector -E -x c /dev/null >/dev/null 2>&1 && echo -fno-stack-protector)
+ASFLAGS = -m32 -gdwarf-2 -Wa,-divide
+# FreeBSD ld wants ``elf_i386_fbsd''
+LDFLAGS += -m $(shell $(LD) -V | grep elf_i386 2>/dev/null)
+
+xv6.img: bootblock kernel fs.img
+	dd if=/dev/zero of=xv6.img count=10000
+	dd if=bootblock of=xv6.img conv=notrunc
+	dd if=kernel of=xv6.img seek=1 conv=notrunc
+
+xv6memfs.img: bootblock kernelmemfs
+	dd if=/dev/zero of=xv6memfs.img count=10000
+	dd if=bootblock of=xv6memfs.img conv=notrunc
+	dd if=kernelmemfs of=xv6memfs.img seek=1 conv=notrunc
+
+bootblock: bootasm.S bootmain.c
+	$(CC) $(CFLAGS) -fno-pic -O -nostdinc -I. -c bootmain.c
+	$(CC) $(CFLAGS) -fno-pic -nostdinc -I. -c bootasm.S
+	$(LD) $(LDFLAGS) -N -e start -Ttext 0x7C00 -o bootblock.o bootasm.o bootmain.o
+	$(OBJDUMP) -S bootblock.o > bootblock.asm
+	$(OBJCOPY) -S -O binary -j .text bootblock.o bootblock
+	perl sign.pl bootblock
+
+entryother: entryother.S
+	$(CC) $(CFLAGS) -fno-pic -nostdinc -I. -c entryother.S
+	$(LD) $(LDFLAGS) -N -e start -Ttext 0x7000 -o bootblockother.o entryother.o
+	$(OBJCOPY) -S -O binary -j .text bootblockother.o entryother
+	$(OBJDUMP) -S bootblockother.o > entryother.asm
+
+initcode: initcode.S
+	$(CC) $(CFLAGS) -nostdinc -I. -c initcode.S
+	$(LD) $(LDFLAGS) -N -e start -Ttext 0 -o initcode.out initcode.o
+	$(OBJCOPY) -S -O binary initcode.out initcode
+	$(OBJDUMP) -S initcode.o > initcode.asm
+
+kernel: $(OBJS) entry.o entryother initcode kernel.ld
+	$(LD) $(LDFLAGS) -T kernel.ld -o kernel entry.o $(OBJS) -b binary initcode entryother
+	$(OBJDUMP) -S kernel > kernel.asm
+	$(OBJDUMP) -t kernel | sed '1,/SYMBOL TABLE/d; s/ .* / /; /^$$/d' > kernel.sym
+
+# kernelmemfs is a copy of kernel that maintains the
+# disk image in memory instead of writing to a disk.
+# This is not so useful for testing persistent storage or
+# exploring disk buffering implementations, but it is
+# great for testing the kernel on real hardware without
+# needing a scratch disk.
+MEMFSOBJS = $(filter-out ide.o,$(OBJS)) memide.o
+kernelmemfs: $(MEMFSOBJS) entry.o entryother initcode kernel.ld fs.img
+	$(LD) $(LDFLAGS) -T kernel.ld -o kernelmemfs entry.o  $(MEMFSOBJS) -b binary initcode entryother fs.img
+	$(OBJDUMP) -S kernelmemfs > kernelmemfs.asm
+	$(OBJDUMP) -t kernelmemfs | sed '1,/SYMBOL TABLE/d; s/ .* / /; /^$$/d' > kernelmemfs.sym
+
+tags: $(OBJS) entryother.S _init
+	etags *.S *.c
+
+vectors.S: vectors.pl
+	perl vectors.pl > vectors.S
+
+ULIB = ulib.o usys.o printf.o umalloc.o
+
+_%: %.o $(ULIB)
+	$(LD) $(LDFLAGS) -N -e main -Ttext 0 -o $@ $^
+	$(OBJDUMP) -S $@ > $*.asm
+	$(OBJDUMP) -t $@ | sed '1,/SYMBOL TABLE/d; s/ .* / /; /^$$/d' > $*.sym
+
+_forktest: forktest.o $(ULIB)
+	# forktest has less library code linked in - needs to be small
+	# in order to be able to max out the proc table.
+	$(LD) $(LDFLAGS) -N -e main -Ttext 0 -o _forktest forktest.o ulib.o usys.o
+	$(OBJDUMP) -S _forktest > forktest.asm
+
+mkfs: mkfs.c fs.h
+	gcc -Werror -Wall -o mkfs mkfs.c
+
+# Prevent deletion of intermediate files, e.g. cat.o, after first build, so
+# that disk image changes after first build are persistent until clean.  More
+# details:
+# http://www.gnu.org/software/make/manual/html_node/Chained-Rules.html
+.PRECIOUS: %.o
+
+UPROGS=\
+	_cat\
+	_echo\
+	_forktest\
+	_grep\
+	_init\
+	_kill\
+	_ln\
+	_ls\
+	_mkdir\
+	_rm\
+	_sh\
+	_stressfs\
+	_usertests\
+	_wc\
+	_zombie\
+
+fs.img: mkfs README $(UPROGS)
+	./mkfs fs.img README $(UPROGS)
+
+-include *.d
+
+clean: 
+	rm -f *.tex *.dvi *.idx *.aux *.log *.ind *.ilg \
+	*.o *.d *.asm *.sym vectors.S bootblock entryother \
+	initcode initcode.out kernel xv6.img fs.img kernelmemfs mkfs \
+	.gdbinit \
+	$(UPROGS)
+
+# run in emulators
+
+# try to generate a unique GDB port
+GDBPORT = $(shell expr `id -u` % 5000 + 25000)
+# QEMU's gdb stub command line changed in 0.11
+QEMUGDB = $(shell if $(QEMU) -help | grep -q '^-gdb'; \
+	then echo "-gdb tcp::$(GDBPORT)"; \
+	else echo "-s -p $(GDBPORT)"; fi)
+ifndef CPUS
+CPUS := 1
+endif
+QEMUOPTS = -hdb fs.img xv6.img -smp $(CPUS) -m 512 $(QEMUEXTRA)
+
+qemu: fs.img xv6.img
+	$(QEMU) -serial mon:stdio $(QEMUOPTS)
+
+qemu-memfs: xv6memfs.img
+	$(QEMU) xv6memfs.img -smp $(CPUS) -m 256
+
+qemu-nox: fs.img xv6.img
+	$(QEMU) -nographic $(QEMUOPTS)
+
+.gdbinit: .gdbinit.tmpl
+	sed "s/localhost:1234/localhost:$(GDBPORT)/" < $^ > $@
+
+qemu-gdb: fs.img xv6.img .gdbinit
+	@echo "*** Now run 'gdb'." 1>&2
+	$(QEMU) -serial mon:stdio $(QEMUOPTS) -S $(QEMUGDB)
+
+qemu-nox-gdb: fs.img xv6.img .gdbinit
+	@echo "*** Now run 'gdb'." 1>&2
+	$(QEMU) -nographic $(QEMUOPTS) -S $(QEMUGDB)
diff --git a/README b/README
new file mode 100644
index 0000000..5d04bb9
--- /dev/null
+++ b/README
@@ -0,0 +1,49 @@
+xv6 is a re-implementation of Dennis Ritchie's and Ken Thompson's Unix
+Version 6 (v6).  xv6 loosely follows the structure and style of v6,
+but is implemented for a modern x86-based multiprocessor using ANSI C.
+
+ACKNOWLEDGMENTS
+
+xv6 is inspired by John Lions's Commentary on UNIX 6th Edition (Peer
+to Peer Communications; ISBN: 1-57398-013-7; 1st edition (June 14,
+2000)). See also http://pdos.csail.mit.edu/6.828/2012/v6.html, which
+provides pointers to on-line resources for v6.
+
+xv6 borrows code from the following sources:
+    JOS (asm.h, elf.h, mmu.h, bootasm.S, ide.c, console.c, and others)
+    Plan 9 (entryother.S, mp.h, mp.c, lapic.c)
+    FreeBSD (ioapic.c)
+    NetBSD (console.c)
+
+The following people have made contributions:
+    Russ Cox (context switching, locking)
+    Cliff Frey (MP)
+    Xiao Yu (MP)
+    Nickolai Zeldovich
+    Austin Clements
+
+In addition, we are grateful for the bug reports and patches contributed by
+Silas Boyd-Wickizer, Peter Froehlich, Shivam Handa, Anders Kaseorg, Eddie
+Kohler, Yandong Mao, Hitoshi Mitake, Carmi Merimovich, Joel Nider, Greg Price,
+Eldar Sehayek, Yongming Shen, Stephen Tu, and Zouchangwei.
+
+The code in the files that constitute xv6 is
+Copyright 2006-2014 Frans Kaashoek, Robert Morris, and Russ Cox.
+
+ERROR REPORTS
+
+If you spot errors or have suggestions for improvement, please send
+email to Frans Kaashoek and Robert Morris (kaashoek,rtm@csail.mit.edu). 
+
+BUILDING AND RUNNING XV6
+
+To build xv6 on an x86 ELF machine (like Linux or FreeBSD), run "make".
+On non-x86 or non-ELF machines (like OS X, even on x86), you will
+need to install a cross-compiler gcc suite capable of producing x86 ELF
+binaries.  See http://pdos.csail.mit.edu/6.828/2014/tools.html.
+Then run "make TOOLPREFIX=i386-jos-elf-".
+
+To run xv6, install the QEMU PC simulators.  To run in QEMU, run "make qemu".
+
+To create a typeset version of the code, run "make xv6.pdf".  This
+requires the "mpage" utility.  See http://www.mesa.nl/pub/mpage/.
diff --git a/ReactorServer/.DS_Store b/ReactorServer/.DS_Store
deleted file mode 100644
index 3d9e8c2..0000000
Binary files a/ReactorServer/.DS_Store and /dev/null differ
diff --git a/ReactorServer/.classpath b/ReactorServer/.classpath
deleted file mode 100644
index 91ee9a5..0000000
--- a/ReactorServer/.classpath
+++ /dev/null
@@ -1,6 +0,0 @@
-<?xml version="1.0" encoding="UTF-8"?>
-<classpath>
-	<classpathentry kind="src" path="src"/>
-	<classpathentry kind="con" path="org.eclipse.jdt.launching.JRE_CONTAINER/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType/JavaSE-1.7"/>
-	<classpathentry kind="output" path="bin"/>
-</classpath>
diff --git a/ReactorServer/.gitignore b/ReactorServer/.gitignore
deleted file mode 100644
index 5e56e04..0000000
--- a/ReactorServer/.gitignore
+++ /dev/null
@@ -1 +0,0 @@
-/bin
diff --git a/ReactorServer/.project b/ReactorServer/.project
deleted file mode 100644
index f3bdedc..0000000
--- a/ReactorServer/.project
+++ /dev/null
@@ -1,17 +0,0 @@
-<?xml version="1.0" encoding="UTF-8"?>
-<projectDescription>
-	<name>ReactorServer</name>
-	<comment></comment>
-	<projects>
-	</projects>
-	<buildSpec>
-		<buildCommand>
-			<name>org.eclipse.jdt.core.javabuilder</name>
-			<arguments>
-			</arguments>
-		</buildCommand>
-	</buildSpec>
-	<natures>
-		<nature>org.eclipse.jdt.core.javanature</nature>
-	</natures>
-</projectDescription>
diff --git a/ReactorServer/.settings/org.eclipse.jdt.core.prefs b/ReactorServer/.settings/org.eclipse.jdt.core.prefs
deleted file mode 100644
index 838bd9d..0000000
--- a/ReactorServer/.settings/org.eclipse.jdt.core.prefs
+++ /dev/null
@@ -1,11 +0,0 @@
-eclipse.preferences.version=1
-org.eclipse.jdt.core.compiler.codegen.inlineJsrBytecode=enabled
-org.eclipse.jdt.core.compiler.codegen.targetPlatform=1.7
-org.eclipse.jdt.core.compiler.codegen.unusedLocal=preserve
-org.eclipse.jdt.core.compiler.compliance=1.7
-org.eclipse.jdt.core.compiler.debug.lineNumber=generate
-org.eclipse.jdt.core.compiler.debug.localVariable=generate
-org.eclipse.jdt.core.compiler.debug.sourceFile=generate
-org.eclipse.jdt.core.compiler.problem.assertIdentifier=error
-org.eclipse.jdt.core.compiler.problem.enumIdentifier=error
-org.eclipse.jdt.core.compiler.source=1.7
diff --git a/ReactorServer/build.xml b/ReactorServer/build.xml
deleted file mode 100644
index 7097422..0000000
--- a/ReactorServer/build.xml
+++ /dev/null
@@ -1,29 +0,0 @@
-<project>
-
-    <target name="clean">
-        <delete dir="build"/>
-    </target>
-
-    <target name="compile" depends="clean">
-        <mkdir dir="build/classes"/>
-        <javac includeantruntime="false" srcdir="src" destdir="build/classes"/>
-    </target>
-
-    <target name="jar" depends="compile">
-        <mkdir dir="build/jar"/>
-        <jar destfile="build/jar/server.jar" basedir="build/classes">
-            <manifest>
-                <attribute name="Main-Class" value="reactor.Reactor"/>
-            </manifest>
-        </jar>
-    </target>
-
-    <target name="run" depends="jar">
-        <java jar="build/jar/server.jar" fork="true">
-        	<arg value="${port}"/>
-        	<arg value="${pool}"/>
-        </java>
-        	
-    </target>
-
-</project>
\ No newline at end of file
diff --git a/ReactorServer/build/classes/protocol/AsyncServerProtocol.class b/ReactorServer/build/classes/protocol/AsyncServerProtocol.class
deleted file mode 100644
index 60b3b06..0000000
Binary files a/ReactorServer/build/classes/protocol/AsyncServerProtocol.class and /dev/null differ
diff --git a/ReactorServer/build/classes/protocol/ServerProtocol.class b/ReactorServer/build/classes/protocol/ServerProtocol.class
deleted file mode 100644
index f07b760..0000000
Binary files a/ReactorServer/build/classes/protocol/ServerProtocol.class and /dev/null differ
diff --git a/ReactorServer/build/classes/protocol/ServerProtocolFactory.class b/ReactorServer/build/classes/protocol/ServerProtocolFactory.class
deleted file mode 100644
index 93b9509..0000000
Binary files a/ReactorServer/build/classes/protocol/ServerProtocolFactory.class and /dev/null differ
diff --git a/ReactorServer/build/classes/protocol/TweeterProtocolFactory.class b/ReactorServer/build/classes/protocol/TweeterProtocolFactory.class
deleted file mode 100644
index 7594bf1..0000000
Binary files a/ReactorServer/build/classes/protocol/TweeterProtocolFactory.class and /dev/null differ
diff --git a/ReactorServer/build/classes/reactor/ConnectionAcceptor.class b/ReactorServer/build/classes/reactor/ConnectionAcceptor.class
deleted file mode 100644
index bdad888..0000000
Binary files a/ReactorServer/build/classes/reactor/ConnectionAcceptor.class and /dev/null differ
diff --git a/ReactorServer/build/classes/reactor/ConnectionHandler.class b/ReactorServer/build/classes/reactor/ConnectionHandler.class
deleted file mode 100644
index 7aaed15..0000000
Binary files a/ReactorServer/build/classes/reactor/ConnectionHandler.class and /dev/null differ
diff --git a/ReactorServer/build/classes/reactor/ProtocolTask.class b/ReactorServer/build/classes/reactor/ProtocolTask.class
deleted file mode 100644
index e2b0b4e..0000000
Binary files a/ReactorServer/build/classes/reactor/ProtocolTask.class and /dev/null differ
diff --git a/ReactorServer/build/classes/reactor/Reactor$1.class b/ReactorServer/build/classes/reactor/Reactor$1.class
deleted file mode 100644
index 701727a..0000000
Binary files a/ReactorServer/build/classes/reactor/Reactor$1.class and /dev/null differ
diff --git a/ReactorServer/build/classes/reactor/Reactor.class b/ReactorServer/build/classes/reactor/Reactor.class
deleted file mode 100644
index 478a495..0000000
Binary files a/ReactorServer/build/classes/reactor/Reactor.class and /dev/null differ
diff --git a/ReactorServer/build/classes/reactor/ReactorData.class b/ReactorServer/build/classes/reactor/ReactorData.class
deleted file mode 100644
index 353c046..0000000
Binary files a/ReactorServer/build/classes/reactor/ReactorData.class and /dev/null differ
diff --git a/ReactorServer/build/classes/reactor/TweeterProtocol$1.class b/ReactorServer/build/classes/reactor/TweeterProtocol$1.class
deleted file mode 100644
index 5e44234..0000000
Binary files a/ReactorServer/build/classes/reactor/TweeterProtocol$1.class and /dev/null differ
diff --git a/ReactorServer/build/classes/reactor/TweeterProtocol.class b/ReactorServer/build/classes/reactor/TweeterProtocol.class
deleted file mode 100644
index ae5ef3e..0000000
Binary files a/ReactorServer/build/classes/reactor/TweeterProtocol.class and /dev/null differ
diff --git a/ReactorServer/build/classes/spl/server/Statistics.class b/ReactorServer/build/classes/spl/server/Statistics.class
deleted file mode 100644
index 766d34d..0000000
Binary files a/ReactorServer/build/classes/spl/server/Statistics.class and /dev/null differ
diff --git a/ReactorServer/build/classes/spl/server/StatsItem.class b/ReactorServer/build/classes/spl/server/StatsItem.class
deleted file mode 100644
index 1059e9f..0000000
Binary files a/ReactorServer/build/classes/spl/server/StatsItem.class and /dev/null differ
diff --git a/ReactorServer/build/classes/spl/server/Topic.class b/ReactorServer/build/classes/spl/server/Topic.class
deleted file mode 100644
index 660cbce..0000000
Binary files a/ReactorServer/build/classes/spl/server/Topic.class and /dev/null differ
diff --git a/ReactorServer/build/classes/spl/server/TopicsDatabase.class b/ReactorServer/build/classes/spl/server/TopicsDatabase.class
deleted file mode 100644
index 5d1c231..0000000
Binary files a/ReactorServer/build/classes/spl/server/TopicsDatabase.class and /dev/null differ
diff --git a/ReactorServer/build/classes/spl/server/User.class b/ReactorServer/build/classes/spl/server/User.class
deleted file mode 100644
index e107403..0000000
Binary files a/ReactorServer/build/classes/spl/server/User.class and /dev/null differ
diff --git a/ReactorServer/build/classes/spl/server/UsersDatabase$Status.class b/ReactorServer/build/classes/spl/server/UsersDatabase$Status.class
deleted file mode 100644
index a2242a8..0000000
Binary files a/ReactorServer/build/classes/spl/server/UsersDatabase$Status.class and /dev/null differ
diff --git a/ReactorServer/build/classes/spl/server/UsersDatabase.class b/ReactorServer/build/classes/spl/server/UsersDatabase.class
deleted file mode 100644
index eda0b0a..0000000
Binary files a/ReactorServer/build/classes/spl/server/UsersDatabase.class and /dev/null differ
diff --git a/ReactorServer/build/classes/spl/server/stomp/frames/ConnectFrame.class b/ReactorServer/build/classes/spl/server/stomp/frames/ConnectFrame.class
deleted file mode 100644
index a147ec7..0000000
Binary files a/ReactorServer/build/classes/spl/server/stomp/frames/ConnectFrame.class and /dev/null differ
diff --git a/ReactorServer/build/classes/spl/server/stomp/frames/ConnectedFrame.class b/ReactorServer/build/classes/spl/server/stomp/frames/ConnectedFrame.class
deleted file mode 100644
index 181ac87..0000000
Binary files a/ReactorServer/build/classes/spl/server/stomp/frames/ConnectedFrame.class and /dev/null differ
diff --git a/ReactorServer/build/classes/spl/server/stomp/frames/DisconnectFrame.class b/ReactorServer/build/classes/spl/server/stomp/frames/DisconnectFrame.class
deleted file mode 100644
index a5af611..0000000
Binary files a/ReactorServer/build/classes/spl/server/stomp/frames/DisconnectFrame.class and /dev/null differ
diff --git a/ReactorServer/build/classes/spl/server/stomp/frames/ErrorFrame.class b/ReactorServer/build/classes/spl/server/stomp/frames/ErrorFrame.class
deleted file mode 100644
index 0313ab9..0000000
Binary files a/ReactorServer/build/classes/spl/server/stomp/frames/ErrorFrame.class and /dev/null differ
diff --git a/ReactorServer/build/classes/spl/server/stomp/frames/ReceiptFrame.class b/ReactorServer/build/classes/spl/server/stomp/frames/ReceiptFrame.class
deleted file mode 100644
index 2422f63..0000000
Binary files a/ReactorServer/build/classes/spl/server/stomp/frames/ReceiptFrame.class and /dev/null differ
diff --git a/ReactorServer/build/classes/spl/server/stomp/frames/SendFrame.class b/ReactorServer/build/classes/spl/server/stomp/frames/SendFrame.class
deleted file mode 100644
index 0bc12a1..0000000
Binary files a/ReactorServer/build/classes/spl/server/stomp/frames/SendFrame.class and /dev/null differ
diff --git a/ReactorServer/build/classes/spl/server/stomp/frames/ServerMessageFrame.class b/ReactorServer/build/classes/spl/server/stomp/frames/ServerMessageFrame.class
deleted file mode 100644
index 5e7bd92..0000000
Binary files a/ReactorServer/build/classes/spl/server/stomp/frames/ServerMessageFrame.class and /dev/null differ
diff --git a/ReactorServer/build/classes/spl/server/stomp/frames/StompFrame.class b/ReactorServer/build/classes/spl/server/stomp/frames/StompFrame.class
deleted file mode 100644
index 9648cc7..0000000
Binary files a/ReactorServer/build/classes/spl/server/stomp/frames/StompFrame.class and /dev/null differ
diff --git a/ReactorServer/build/classes/spl/server/stomp/frames/SubscribeFrame.class b/ReactorServer/build/classes/spl/server/stomp/frames/SubscribeFrame.class
deleted file mode 100644
index 853c585..0000000
Binary files a/ReactorServer/build/classes/spl/server/stomp/frames/SubscribeFrame.class and /dev/null differ
diff --git a/ReactorServer/build/classes/spl/server/stomp/frames/UnsubscribeFrame.class b/ReactorServer/build/classes/spl/server/stomp/frames/UnsubscribeFrame.class
deleted file mode 100644
index a92533d..0000000
Binary files a/ReactorServer/build/classes/spl/server/stomp/frames/UnsubscribeFrame.class and /dev/null differ
diff --git a/ReactorServer/build/classes/spl/util/MyFormatter.class b/ReactorServer/build/classes/spl/util/MyFormatter.class
deleted file mode 100644
index a2dc504..0000000
Binary files a/ReactorServer/build/classes/spl/util/MyFormatter.class and /dev/null differ
diff --git a/ReactorServer/build/classes/spl/util/MyLogger.class b/ReactorServer/build/classes/spl/util/MyLogger.class
deleted file mode 100644
index c714dd3..0000000
Binary files a/ReactorServer/build/classes/spl/util/MyLogger.class and /dev/null differ
diff --git a/ReactorServer/build/classes/tokenizer/FixedSeparatorMessageTokenizer.class b/ReactorServer/build/classes/tokenizer/FixedSeparatorMessageTokenizer.class
deleted file mode 100644
index 9c07a9e..0000000
Binary files a/ReactorServer/build/classes/tokenizer/FixedSeparatorMessageTokenizer.class and /dev/null differ
diff --git a/ReactorServer/build/classes/tokenizer/Message.class b/ReactorServer/build/classes/tokenizer/Message.class
deleted file mode 100644
index 362a67b..0000000
Binary files a/ReactorServer/build/classes/tokenizer/Message.class and /dev/null differ
diff --git a/ReactorServer/build/classes/tokenizer/MessageTokenizer.class b/ReactorServer/build/classes/tokenizer/MessageTokenizer.class
deleted file mode 100644
index 5e21902..0000000
Binary files a/ReactorServer/build/classes/tokenizer/MessageTokenizer.class and /dev/null differ
diff --git a/ReactorServer/build/classes/tokenizer/StringMessage.class b/ReactorServer/build/classes/tokenizer/StringMessage.class
deleted file mode 100644
index 904519e..0000000
Binary files a/ReactorServer/build/classes/tokenizer/StringMessage.class and /dev/null differ
diff --git a/ReactorServer/build/classes/tokenizer/TokenizerFactory.class b/ReactorServer/build/classes/tokenizer/TokenizerFactory.class
deleted file mode 100644
index 27be3fc..0000000
Binary files a/ReactorServer/build/classes/tokenizer/TokenizerFactory.class and /dev/null differ
diff --git a/ReactorServer/build/jar/server.jar b/ReactorServer/build/jar/server.jar
deleted file mode 100644
index 29f58ac..0000000
Binary files a/ReactorServer/build/jar/server.jar and /dev/null differ
diff --git a/ReactorServer/log.log b/ReactorServer/log.log
deleted file mode 100644
index ad996b9..0000000
--- a/ReactorServer/log.log
+++ /dev/null
@@ -1,7 +0,0 @@
-01:23:18 [server] [event=server online] [protocol='tweeter/STOMP'] [type='Reactor'] [pool size =10] [IP address='10.0.0.2'] [port='33342'] [encoding='UTF-8']
-01:24:08 [server] [event=connection accepted] [address='/10.0.0.9:5866']
-01:24:08 [<<] [request=login] [username='ami'] [password=oren]
-01:24:08 [info] [login success] [username='ami']
-01:24:21 [<<] [request=send] [username='ami'] [destination=ami] [message=bla]
-01:24:46 [<<] [request=subscribe] [username='ami'] [topic=server] [id=0]
-01:24:50 [<<] [request=send] [username='ami'] [destination=server] [message=stats]
diff --git a/ReactorServer/log.log.lck b/ReactorServer/log.log.lck
deleted file mode 100644
index e69de29..0000000
diff --git a/ReactorServer/src/.DS_Store b/ReactorServer/src/.DS_Store
deleted file mode 100644
index 0e763e5..0000000
Binary files a/ReactorServer/src/.DS_Store and /dev/null differ
diff --git a/ReactorServer/src/protocol/AsyncServerProtocol.java b/ReactorServer/src/protocol/AsyncServerProtocol.java
deleted file mode 100644
index 756ad8b..0000000
--- a/ReactorServer/src/protocol/AsyncServerProtocol.java
+++ /dev/null
@@ -1,39 +0,0 @@
-package protocol;
-
-import reactor.ConnectionHandler;
-
-/**
- * A protocol that describes the behavior of the server.
- */
-public interface AsyncServerProtocol<T> extends ServerProtocol<T> {
-
-	/**
-	 * processes a message
-	 * @param msg the message to process
-	 * @return the reply that should be sent to the client, or null if no reply needed
-	 */
-	boolean processMessage(T msg);
-
-	/**
-	 * detetmine whether the given message is the termination message
-	 * @param msg the message to examine
-	 * @return true if the message is the termination message, false otherwise
-	 */
-	boolean isEnd(T msg);
-
-	/**
-	 * Is the protocol in a closing state?.
-	 * When a protocol is in a closing state, it's handler should write out all pending data, 
-	 * and close the connection.
-	 * @return true if the protocol is in closing state.
-	 */
-	boolean shouldClose();
-
-	/**
-	 * Indicate to the protocol that the client disconnected.
-	 */
-	public void connectionTerminated();
-	
-	public void setConnectionHandler(ConnectionHandler connectionHandler);
-
-}
diff --git a/ReactorServer/src/protocol/ServerProtocol.java b/ReactorServer/src/protocol/ServerProtocol.java
deleted file mode 100644
index 051dc41..0000000
--- a/ReactorServer/src/protocol/ServerProtocol.java
+++ /dev/null
@@ -1,25 +0,0 @@
-package protocol;
-
-/**
- * A protocol that describes the behabiour of the server.
- */
-public interface ServerProtocol<T> {
-
-    /**
-     * processes a message
-     * @param msg the message to process
-     * @return the reply that should be sent to the client, or null if no reply needed
-     */
-    boolean processMessage(T msg);
-
-    /**
-     * detetmine whether the given message is the termination message
-     * @param msg the message to examine
-     * @return true if the message is the termination message, false otherwise
-     */
-    boolean isEnd(T msg);
-    
-    
-    
-
-}
diff --git a/ReactorServer/src/protocol/ServerProtocolFactory.java b/ReactorServer/src/protocol/ServerProtocolFactory.java
deleted file mode 100644
index f28e5c6..0000000
--- a/ReactorServer/src/protocol/ServerProtocolFactory.java
+++ /dev/null
@@ -1,5 +0,0 @@
-package protocol;
-
-public interface ServerProtocolFactory<T> {
-   AsyncServerProtocol<T> create();
-}
diff --git a/ReactorServer/src/protocol/TweeterProtocolFactory.java b/ReactorServer/src/protocol/TweeterProtocolFactory.java
deleted file mode 100644
index 2f7c65d..0000000
--- a/ReactorServer/src/protocol/TweeterProtocolFactory.java
+++ /dev/null
@@ -1,31 +0,0 @@
-package protocol;
-
-import reactor.TweeterProtocol;
-import spl.server.Statistics;
-import spl.server.TopicsDatabase;
-import spl.server.UsersDatabase;
-import tokenizer.StringMessage;
-
-/**
- * create a new tweeter protocol
- *
- */
-public class TweeterProtocolFactory implements ServerProtocolFactory<StringMessage>
-{
-	public TweeterProtocolFactory() {	
-		_users = new UsersDatabase();
-		_topics = new TopicsDatabase(_users);
-		_stats = new Statistics(_users, _topics);
-	}
-	
-    private final UsersDatabase _users;
-    private final TopicsDatabase _topics;
-    private final Statistics _stats;
-	
-	@Override
-	public AsyncServerProtocol<StringMessage> create()
-	{
-		return new TweeterProtocol(_users, _topics, _stats);
-	}
-
-}
diff --git a/ReactorServer/src/reactor/ConnectionAcceptor.java b/ReactorServer/src/reactor/ConnectionAcceptor.java
deleted file mode 100644
index c86e85c..0000000
--- a/ReactorServer/src/reactor/ConnectionAcceptor.java
+++ /dev/null
@@ -1,65 +0,0 @@
-package reactor;
-
-import java.io.IOException;
-import java.net.SocketAddress;
-import java.nio.channels.SelectionKey;
-import java.nio.channels.ServerSocketChannel;
-import java.nio.channels.SocketChannel;
-import java.util.logging.Logger;
-
-/**
- * Handles new client connections. An Acceptor is bound on a ServerSocketChannel
- * objects, which can produce new SocketChannels for new clients using its
- * <CODE>accept</CODE> method.
- */
-public class ConnectionAcceptor<T> {
-	private static final Logger logger = Logger.getGlobal();
-
-	protected ServerSocketChannel _ssChannel;
-
-	protected ReactorData<T> _data;
-
-	/**
-	 * Creates a new ConnectionAcceptor
-	 * 
-	 * @param ssChannel
-	 *            the ServerSocketChannel which can accept new connections
-	 * @param data
-	 *            a reference to ReactorData object
-	 */
-	public ConnectionAcceptor(ServerSocketChannel ssChannel, ReactorData<T> data) {
-		_ssChannel = ssChannel;
-		_data = data;
-	}
-
-	/**
-	 * Accepts a connection:
-	 * <UL>
-	 * <LI>Creates a SocketChannel for it
-	 * <LI>Creates a ConnectionHandler for it
-	 * <LI>Registers the SocketChannel and the ConnectionHandler to the
-	 * Selector
-	 * </UL>
-	 * 
-	 * @throws IOException
-	 *             in case of an IOException during the acceptance of a new
-	 *             connection
-	 */
-	public void accept() throws IOException {
-		// Get a new channel for the connection request
-		SocketChannel sChannel = _ssChannel.accept();
-
-		// If serverSocketChannel is non-blocking, sChannel may be null
-		if (sChannel != null) {
-			SocketAddress address = sChannel.socket().getRemoteSocketAddress();
-
-			logger.info("[server] [event=connection accepted] [address='"+address+"']");
-
-			sChannel.configureBlocking(false);
-			SelectionKey key = sChannel.register(_data.getSelector(), 0);
-
-			ConnectionHandler<T> handler = ConnectionHandler.create(sChannel, _data, key);
-			handler.switchToReadOnlyMode(); // set the handler to read only mode
-		}
-	}
-}
diff --git a/ReactorServer/src/reactor/ConnectionHandler.java b/ReactorServer/src/reactor/ConnectionHandler.java
deleted file mode 100644
index bcd87e7..0000000
--- a/ReactorServer/src/reactor/ConnectionHandler.java
+++ /dev/null
@@ -1,204 +0,0 @@
-package reactor;
-
-import java.io.IOException;
-import java.net.SocketAddress;
-import java.nio.ByteBuffer;
-import java.nio.channels.ClosedChannelException;
-import java.nio.channels.SelectionKey;
-import java.nio.channels.SocketChannel;
-import java.util.Vector;
-import java.util.logging.Logger;
-
-import protocol.AsyncServerProtocol;
-import tokenizer.MessageTokenizer;
-
-/**
- * Handles messages from clients
- */
-public class ConnectionHandler<T> {
-
-	private static final int BUFFER_SIZE = 1024;
-
-	protected final SocketChannel _sChannel;
-
-	protected final ReactorData<T> _data;
-
-	protected final AsyncServerProtocol<T> _protocol;
-	protected final MessageTokenizer<T> _tokenizer;
-
-	protected Vector<ByteBuffer> _outData = new Vector<ByteBuffer>();
-
-	protected final SelectionKey _skey;
-
-	private static final Logger logger = Logger.getGlobal();
-
-	private ProtocolTask<T> _task = null;
-
-	/**
-	 * Creates a new ConnectionHandler object
-	 * 
-	 * @param sChannel
-	 *            the SocketChannel of the client
-	 * @param data
-	 *            a reference to a ReactorData object
-	 */
-	private ConnectionHandler(SocketChannel sChannel, ReactorData<T> data, SelectionKey key) {
-		_sChannel = sChannel;
-		_data = data;
-		_protocol = _data.getProtocolMaker().create();
-		_tokenizer = _data.getTokenizerMaker().create();
-		_skey = key;
-	}
-
-	// make sure 'this' does not escape b4 the object is fully constructed!
-	private void initialize() {
-		_protocol.setConnectionHandler(this);
-		_skey.attach(this);
-		_task = new ProtocolTask<T>(_protocol, _tokenizer, this);
-	}
-
-	public static <T> ConnectionHandler<T> create(SocketChannel sChannel, ReactorData<T> data, SelectionKey key) {
-		ConnectionHandler<T> h = new ConnectionHandler<T>(sChannel, data, key);
-		h.initialize();
-		return h;
-	}
-
-	public synchronized void addOutData(ByteBuffer buf) {
-		_outData.add(buf);
-		switchToReadWriteMode();
-	}
-
-	private void closeConnection() {
-		// remove from the selector.
-		_skey.cancel();
-		try {
-			_sChannel.close();
-		} catch (IOException ignored) {
-			ignored = null;
-		}
-	}
-
-	/**
-	 * Reads incoming data from the client:
-	 * <UL>
-	 * <LI>Reads some bytes from the SocketChannel
-	 * <LI>create a protocolTask, to process this data, possibly generating an
-	 * answer
-	 * <LI>Inserts the Task to the ThreadPool
-	 * </UL>
-	 * 
-	 * @throws
-	 * 
-	 * @throws IOException
-	 *             in case of an IOException during reading
-	 */
-	public void read() {
-		// do not read if protocol has terminated. only write of pending data is
-		// allowed
-		if (_protocol.shouldClose()) {
-			return;
-		}
-
-		SocketAddress address = _sChannel.socket().getRemoteSocketAddress();
-		logger.fine("Reading from " + address);
-
-		ByteBuffer buf = ByteBuffer.allocate(BUFFER_SIZE);
-		int numBytesRead = 0;
-		try {
-			numBytesRead = _sChannel.read(buf);
-		} catch (IOException e) {
-			numBytesRead = -1;
-		}
-		// is the channel closed??
-		if (numBytesRead == -1) {
-			// No more bytes can be read from the channel
-			logger.fine("client on " + address + " has disconnected");
-			closeConnection();
-			// tell the protocol that the connection terminated.
-			_protocol.connectionTerminated();
-			return;
-		}
-
-		//add the buffer to the protocol task
-		buf.flip();
-		_task.addBytes(buf);
-		// add the protocol task to the reactor
-		_data.getExecutor().execute(_task);
-	}
-
-	/**
-	 * attempts to send data to the client<br/>
-	 * if all the data has been successfully sent, the ConnectionHandler will
-	 * automatically switch to read only mode, otherwise it'll stay in it's
-	 * current mode (which is read / write).
-	 * 
-	 * @throws IOException
-	 *             if the write operation fails
-	 * @throws ClosedChannelException
-	 *             if the channel have been closed while registering to the Selector
-	 */
-	public synchronized void write() {
-		if (_outData.size() == 0) {
-			// if nothing left in the output string, go back to read mode
-			switchToReadOnlyMode();
-			return;
-		}
-		// if there is something to send
-		ByteBuffer buf = _outData.remove(0);
-		if (buf.remaining() != 0) {
-			try {
-				_sChannel.write(buf);
-			} catch (IOException e) {
-				// this should never happen.
-				e.printStackTrace();
-			}
-			// check if the buffer contains more data
-			if (buf.remaining() != 0) {
-				_outData.add(0, buf);
-			}
-		}
-		// check if the protocol indicated close.
-		if (_protocol.shouldClose()) {
-			switchToWriteOnlyMode();
-			if (buf.remaining() == 0) {
-				closeConnection();
-				SocketAddress address = _sChannel.socket().getRemoteSocketAddress();
-				logger.fine("disconnecting client on " + address);
-			}
-		}
-	}
-
-	/**
-	 * switches the handler to read / write TODO Auto-generated catch blockmode
-	 * 
-	 * @throws ClosedChannelException
-	 *             if the channel is closed
-	 */
-	public void switchToReadWriteMode() {
-		_skey.interestOps(SelectionKey.OP_READ | SelectionKey.OP_WRITE);
-		_data.getSelector().wakeup();
-	}
-
-	/**
-	 * switches the handler to read only mode
-	 * 
-	 * @throws ClosedChannelException
-	 *             if the channel is closed
-	 */
-	public void switchToReadOnlyMode() {
-		_skey.interestOps(SelectionKey.OP_READ);
-		_data.getSelector().wakeup();
-	}
-
-	/**
-	 * switches the handler to write only mode
-	 * 
-	 * @throws ClosedChannelException
-	 *             if the channel is closed
-	 */
-	public void switchToWriteOnlyMode() {
-		_skey.interestOps(SelectionKey.OP_WRITE);
-		_data.getSelector().wakeup();
-	}
-
-}
diff --git a/ReactorServer/src/reactor/ProtocolTask.java b/ReactorServer/src/reactor/ProtocolTask.java
deleted file mode 100644
index 5ff70a8..0000000
--- a/ReactorServer/src/reactor/ProtocolTask.java
+++ /dev/null
@@ -1,61 +0,0 @@
-package reactor;
-
-import java.io.IOException;
-import java.nio.ByteBuffer;
-
-import protocol.ServerProtocol;
-import tokenizer.MessageTokenizer;
-
-/**
- * This class supplies some data to the protocol, which then processes the data,
- * possibly returning a reply. This class is implemented as an executor task.
- * 
- */
-public class ProtocolTask<T> implements Runnable {
-
-	private final ServerProtocol<T> _protocol;
-	private final MessageTokenizer<T> _tokenizer;
-	private final ConnectionHandler<T> _handler;
-
-	public ProtocolTask(final ServerProtocol<T> protocol, final MessageTokenizer<T> tokenizer, final ConnectionHandler<T> h) {
-		this._protocol = protocol;
-		this._tokenizer = tokenizer;
-		this._handler = h;
-	}
-
-	// we synchronize on ourselves, in case we are executed by several threads
-	// from the thread pool.
-	public synchronized void run()
-	{
-		// go over all complete messages and process them.
-		while (_tokenizer.hasMessage())
-		{
-			T msg = _tokenizer.nextMessage();
-
-			boolean shouldCloseServer = this._protocol.processMessage(msg);
-			if (shouldCloseServer)
-			{
-				try
-				{
-					this._handler._data.getSelector().close();
-				} catch (IOException e)
-				{
-					e.printStackTrace();
-				}
-			}
-			
-			
-//         T response = this._protocol.processMessage(msg);
-//         if (response != null) {
-//            try {
-//               ByteBuffer bytes = _tokenizer.getBytesForMessage(response);
-//               this._handler.addOutData(bytes);
-//            } catch (CharacterCodingException e) { e.printStackTrace(); }
-//         }
-      }
-	}
-
-	public void addBytes(ByteBuffer b) {
-		_tokenizer.addBytes(b);
-	}
-}
diff --git a/ReactorServer/src/reactor/Reactor.java b/ReactorServer/src/reactor/Reactor.java
deleted file mode 100644
index 7ad7322..0000000
--- a/ReactorServer/src/reactor/Reactor.java
+++ /dev/null
@@ -1,255 +0,0 @@
-package reactor;
-
-import java.io.IOException;
-import java.net.Inet4Address;
-import java.net.InetSocketAddress;
-import java.nio.channels.ClosedChannelException;
-import java.nio.channels.ClosedSelectorException;
-import java.nio.channels.SelectionKey;
-import java.nio.channels.Selector;
-import java.nio.channels.ServerSocketChannel;
-import java.nio.charset.Charset;
-import java.util.Iterator;
-import java.util.concurrent.ExecutorService;
-import java.util.concurrent.Executors;
-import java.util.concurrent.TimeUnit;
-import java.util.logging.Logger;
-
-import protocol.ServerProtocolFactory;
-import protocol.TweeterProtocolFactory;
-import spl.util.MyLogger;
-import tokenizer.FixedSeparatorMessageTokenizer;
-import tokenizer.MessageTokenizer;
-import tokenizer.StringMessage;
-import tokenizer.TokenizerFactory;
-
-
-/**
- * An implementation of the Reactor pattern.
- */
-public class Reactor<T> implements Runnable {
-
-	private static final Logger logger = Logger.getGlobal();
-
-	private final int _port;
-
-	private final int _poolSize;
-
-	private final ServerProtocolFactory<T> _protocolFactory;
-
-	private final TokenizerFactory<T> _tokenizerFactory;
-
-	private volatile boolean _shouldRun = true;
-
-	private ReactorData<T> _data;
-
-	/**
-	 * Creates a new Reactor
-	 * 
-	 * @param poolSize
-	 *            the number of WorkerThreads to include in the ThreadPool
-	 * @param port
-	 *            the port to bind the Reactor to
-	 * @param protocol
-	 *            the protocol factory to work with
-	 * @param tokenizer
-	 *            the tokenizer factory to work with
-	 * @throws IOException
-	 *             if some I/O problems arise during connection
-	 */
-	public Reactor(int port, int poolSize, ServerProtocolFactory<T> protocol, TokenizerFactory<T> tokenizer) {
-		_port = port;
-		_poolSize = poolSize;
-		_protocolFactory = protocol;
-		_tokenizerFactory = tokenizer;
-	}
-
-	/**
-	 * Create a non-blocking server socket channel and bind to to the Reactor
-	 * port
-	 */
-	private ServerSocketChannel createServerSocket(int port)
-			throws IOException {
-		try {
-			ServerSocketChannel ssChannel = ServerSocketChannel.open();
-			ssChannel.configureBlocking(false);
-			ssChannel.socket().bind(new InetSocketAddress(port));
-			return ssChannel;
-		} catch (IOException e) {
-			logger.fine("Port " + port + " is busy");
-			throw e;
-		}
-	}
-
-	/**
-	 * Main operation of the Reactor:
-	 * <UL>
-	 * <LI>Uses the <CODE>Selector.select()</CODE> method to find new
-	 * requests from clients
-	 * <LI>For each request in the selection set:
-	 * <UL>
-	 * If it is <B>acceptable</B>, use the ConnectionAcceptor to accept it,
-	 * create a new ConnectionHandler for it register it to the Selector
-	 * <LI>If it is <B>readable</B>, use the ConnectionHandler to read it,
-	 * extract messages and insert them to the ThreadPool
-	 * </UL>
-	 */
-	public void run() {
-		// Create & start the ThreadPool
-		ExecutorService executor = Executors.newFixedThreadPool(_poolSize);
-		Selector selector = null;
-		ServerSocketChannel ssChannel = null;
-
-		try {
-			selector = Selector.open();
-			ssChannel = createServerSocket(_port);
-		} catch (IOException e) {
-			logger.fine("cannot create the selector -- server socket is busy?");
-			return;
-		}
-
-		_data = new ReactorData<T>(executor, selector, _protocolFactory, _tokenizerFactory);
-		ConnectionAcceptor<T> connectionAcceptor = new ConnectionAcceptor<T>( ssChannel, _data);
-
-		// Bind the server socket channel to the selector, with the new
-		// acceptor as attachment
-
-		try {
-			ssChannel.register(selector, SelectionKey.OP_ACCEPT, connectionAcceptor);
-		} catch (ClosedChannelException e) {
-			logger.info("server channel seems to be closed!");
-			return;
-		}
-
-		while (_shouldRun && selector.isOpen()) {
-			// Wait for an event
-			Iterator<SelectionKey> it = null;
-			try {
-				selector.select();
-				// Get list of selection keys with pending events
-				it = selector.selectedKeys().iterator();
-			} catch (IOException e){
-				logger.fine("trouble with selector: " + e.getMessage());
-				continue;
-			}
-			catch (ClosedSelectorException e) {
-				logger.info("[server] [event=selector closed]");
-				continue;
-			}
-				
-
-			// Process each key
-			while (it.hasNext()) {
-				// Get the selection key
-				SelectionKey selKey = (SelectionKey) it.next();
-
-				// Remove it from the list to indicate that it is being
-				// processed. it.remove removes the last item returned by next.
-				it.remove();
-
-				// Check if it's a connection request
-				if (selKey.isValid() && selKey.isAcceptable()) {
-					logger.fine("Accepting a connection");
-					ConnectionAcceptor<T> acceptor = (ConnectionAcceptor<T>) selKey.attachment();
-					try {
-						acceptor.accept();
-					} catch (IOException e) {
-						logger.fine("problem accepting a new connection: "
-								+ e.getMessage());
-					}
-					continue;
-				}
-				// Check if a message has been sent
-				if (selKey.isValid() && selKey.isReadable()) {
-					ConnectionHandler<T> handler = (ConnectionHandler<T>) selKey.attachment();
-					logger.fine("Channel is ready for reading");
-					handler.read();
-				}
-				// Check if there are messages to send
-				if (selKey.isValid() && selKey.isWritable()) {
-					ConnectionHandler<T> handler = (ConnectionHandler<T>) selKey.attachment();
-					logger.fine("Channel is ready for writing");
-					handler.write();
-				}
-			}
-		}
-		stopReactor();
-		logger.info("[server] [event=server offline]");
-	}
-
-	/**
-	 * Returns the listening port of the Reactor
-	 * 
-	 * @return the listening port of the Reactor
-	 */
-	public int getPort() {
-		return _port;
-	}
-
-	/**
-	 * Stops the Reactor activity, including the Reactor thread and the Worker
-	 * Threads in the Thread Pool.
-	 */
-	public synchronized void stopReactor() {
-		if (!_shouldRun)
-			return;
-		_shouldRun = false;
-		_data.getSelector().wakeup(); // Force select() to return
-		_data.getExecutor().shutdown();
-		try {
-			_data.getExecutor().awaitTermination(2000, TimeUnit.MILLISECONDS);
-		} catch (InterruptedException e) {
-			// Someone didn't have patience to wait for the executor pool to
-			// close
-			e.printStackTrace();
-		}
-	}
-
-	/**
-	 * Main program, used for demonstration purposes. Create and run a
-	 * Reactor-based server for the Echo protocol. Listening port number and
-	 * number of threads in the thread pool are read from the command line.
-	 */
-	public static void main(String args[]) {
-		if (args.length != 2) {
-			System.err.println("Usage: java Reactor <port> <pool_size>");
-			System.exit(1);
-		}
-
-		new MyLogger().setup();
-		
-		try {
-			int port = Integer.parseInt(args[0]);
-			int poolSize = Integer.parseInt(args[1]);
-
-			//Reactor<HttpMessage> reactor = startHttpServer(port, poolSize);
-			//Reactor<StringMessage> reactor = startEchoServer(port, poolSize);
-			Reactor<StringMessage> reactor = startTweeterServer(port, poolSize);
-
-			Thread thread = new Thread(reactor);
-			thread.start();
-			
-			logger.info("[server] [event=server online] [protocol='tweeter/STOMP'] [type='Reactor'] [pool size ="+poolSize+"] [IP address='"+Inet4Address.getLocalHost().getHostAddress()+"'] [port='"+reactor.getPort()+"'] [encoding='UTF-8']");
-
-			thread.join();
-		} catch (Exception e) {
-			e.printStackTrace();
-		}
-	}
-
-
-	public static Reactor<StringMessage> startTweeterServer(int port, int poolSize){
-		ServerProtocolFactory<StringMessage> protocolMaker = new TweeterProtocolFactory();
-
-		final Charset charset = Charset.forName("UTF-8");
-		TokenizerFactory<StringMessage> tokenizerMaker = new TokenizerFactory<StringMessage>() {
-			public MessageTokenizer<StringMessage> create() {
-				return new FixedSeparatorMessageTokenizer("\u0000", charset);	//TWITTER CHANGED
-			}
-		};
-
-		Reactor<StringMessage> reactor = new Reactor<StringMessage>(port, poolSize, protocolMaker, tokenizerMaker);
-		return reactor;
-	}
-	
-}
diff --git a/ReactorServer/src/reactor/ReactorData.java b/ReactorServer/src/reactor/ReactorData.java
deleted file mode 100644
index fe29671..0000000
--- a/ReactorServer/src/reactor/ReactorData.java
+++ /dev/null
@@ -1,43 +0,0 @@
-package reactor;
-
-import java.nio.channels.Selector;
-import java.util.concurrent.ExecutorService;
-
-import protocol.ServerProtocolFactory;
-import tokenizer.TokenizerFactory;
-
-/**
- * a simple data structure that hold information about the reactor, including getter methods
- */
-public class ReactorData<T> {
-
-    private final ExecutorService _executor;
-    private final Selector _selector;
-    private final ServerProtocolFactory<T> _protocolMaker;
-    private final TokenizerFactory<T> _tokenizerMaker;
-    
-	public ExecutorService getExecutor() {
-        return _executor;
-    }
-
-    public Selector getSelector() {
-        return _selector;
-    }
-
-	public ReactorData(ExecutorService _executor, Selector _selector, ServerProtocolFactory<T> protocol, TokenizerFactory<T> tokenizer) {
-		this._executor = _executor;
-		this._selector = _selector;
-		this._protocolMaker = protocol;
-		this._tokenizerMaker = tokenizer;
-
-	}
-
-	public ServerProtocolFactory<T> getProtocolMaker() {
-		return _protocolMaker;
-	}
-
-	public TokenizerFactory<T> getTokenizerMaker() {
-		return _tokenizerMaker;
-	}
-
-}
diff --git a/ReactorServer/src/reactor/TweeterProtocol.java b/ReactorServer/src/reactor/TweeterProtocol.java
deleted file mode 100644
index 4af780e..0000000
--- a/ReactorServer/src/reactor/TweeterProtocol.java
+++ /dev/null
@@ -1,371 +0,0 @@
-package reactor;
-
-import java.nio.ByteBuffer;
-import java.util.ArrayList;
-import java.util.List;
-import java.util.logging.Logger;
-
-import protocol.AsyncServerProtocol;
-import spl.server.Statistics;
-import spl.server.Topic;
-import spl.server.TopicsDatabase;
-import spl.server.User;
-import spl.server.UsersDatabase;
-import spl.server.stomp.frames.ConnectFrame;
-import spl.server.stomp.frames.ConnectedFrame;
-import spl.server.stomp.frames.DisconnectFrame;
-import spl.server.stomp.frames.ErrorFrame;
-import spl.server.stomp.frames.ReceiptFrame;
-import spl.server.stomp.frames.SendFrame;
-import spl.server.stomp.frames.ServerMessageFrame;
-import spl.server.stomp.frames.StompFrame;
-import spl.server.stomp.frames.SubscribeFrame;
-import spl.server.stomp.frames.UnsubscribeFrame;
-import tokenizer.StringMessage;
-
-public class TweeterProtocol implements AsyncServerProtocol<StringMessage>
-{
-	private final static Logger LOGGER = Logger.getGlobal();
-
-    private boolean _shouldClose;
-    private UsersDatabase _usersDatabase;
-    private TopicsDatabase _topicsDatabase;
-    private String _username;
-	private ConnectionHandler _connectionHandler;
-	private Statistics _statistics;
-	
-    public TweeterProtocol(UsersDatabase usersDatabase, TopicsDatabase entriesDatabase, Statistics statistics) {
-        _shouldClose = false;
-        _usersDatabase = usersDatabase;
-        _topicsDatabase = entriesDatabase;
-        _username = null;
-        _connectionHandler = null;
-        _statistics = statistics;
-        
-    }
- 
-    /**
-     * gets an array of strings representing the rows of the msg
-     * and returns the value of a provided key according to stomp msg specs
-     * @param strArr
-     * @param stringToFind is the key
-     * @return
-     */
-    protected String getValueFromArray(String[] strArr,String stringToFind){
-    	for (String string : strArr) {
-    		if(string.length() >= stringToFind.length()){
-    			if(string.substring(0,stringToFind.length()).equals(stringToFind)){
-					return string.substring(stringToFind.length()+1);
-				}
-    		}
-		}
-    	return "not_found";
-    }
-    
-    /**
-     * gets an array of strings representing the rows of the msg
-     * and returns the body of the msg according to stomp specs
-     * @param strArr
-     * @return the body of the msg
-     */
-    protected String getBody(String[] strArr){
-    	for (int i = 0; i < strArr.length; i++) {
-			if(i!=0 && strArr[i].equals("")&& i+1 < strArr.length){
-				return strArr[i+1];
-			}
-			
-		}
-    	return "no_message";
-    }
-    
-		
-	@Override
-    public boolean processMessage(StringMessage strMsg){
-
-		String msg = strMsg.getMessage();
-		    	
-    	String[] splited = msg.split("\n");
-    	String command = splited[0];
-    	if(command.equals("") && splited.length >1) command = splited[1];
-    	
-    	switch (command) {
-    	
-		case "CONNECT":
-			String host = getValueFromArray(splited, "host");
-			String version = getValueFromArray(splited, "accept-version");
-			String username = getValueFromArray(splited, "login");
-			String password = getValueFromArray(splited, "passcode");
-			connect( new ConnectFrame(version, host, username, password) );
-			break;
-			
-		case "DISCONNECT":
-			String receipt = getValueFromArray(splited, "receipt");
-			disconnect( new DisconnectFrame(receipt) );
-			break;
-
-		case "SUBSCRIBE":
-			String destination = getValueFromArray(splited, "destination");
-			String subscribeId = getValueFromArray(splited, "id");
-			if( subscribe( new SubscribeFrame(destination,subscribeId) )){ //[twitter] success following user
-				_usersDatabase.getUser(destination).incrementFollowers();
-				//_connectionHandler.send(new ServerMessageFrame(_username,"-1","following "+destination).getEncodedString());
-				_connectionHandler.addOutData(ByteBuffer.wrap(new ServerMessageFrame(_username,"-1","following "+destination).getBytes()));
-			}
-			break;
-			
-		case "UNSUBSCRIBE":
-			String unsubscribeId = getValueFromArray(splited, "id");
-			unsubscribe( new UnsubscribeFrame(unsubscribeId) );
-			break;
-
-		case "SEND":
-			String sendDestination = getValueFromArray(splited, "destination");
-			String message = getBody(splited);
-			return processSendFrameFromUser( new SendFrame(sendDestination,message) );
-			//break;
-
-		default:
-			break;
-		}
-
-        return false;
-    }
- 
-	/**
-	 * processes SendFrame from a user
-	 * @param sendFrame
-	 * @return
-	 */
-    private boolean processSendFrameFromUser(SendFrame sendFrame) {
-    	Long currentTime = System.currentTimeMillis();
-		LOGGER.info("[<<] [request=send] [username='"+_username+"'] [destination="+sendFrame.getDestination()+"] [message="+sendFrame.getMessage()+"]");
-		String toUser = sendFrame.getDestination();
-		String message = sendFrame.getMessage();
-
-		_usersDatabase.incrementTweets(toUser); //user tweets ++
-		
-		if(toUser.equals("server")){
-			//speical server command received from user
-	    	String[] splited = message.split(" ");
-	    	switch (splited[0]) {
-			case "clients":
-				//user should now get back a list of all the registered clients in the system
-				boolean online = false;
-				if(splited.length > 1 && splited[1].equals("online")){
-					//user should now get all online users
-					online = true;
-				}
-				String listOfUsers = getListOfUsers(online);
-				_topicsDatabase.addMessageToTopic("server",listOfUsers);
-				break;
-			case "stats":
-				//users should get all gathered statistics
-				_topicsDatabase.addMessageToTopic("server",_statistics.generateStatisticsInformation());
-				break;
-			case "stop":
-				return true;
-			default:
-				break;
-			}
-		}
-		else{
-			//regular msg from a user to a topic
-			_statistics.addTweet();
-			_topicsDatabase.addMessageToTopic(toUser,message);
-			handleMentionedUsers(sendFrame); //[twitter] send to attached users '@otheruser'
-			_statistics.addTweetPassTime(System.currentTimeMillis()-currentTime);
-			//TODO: this is not really sending so this measurement will be very low
-		}
-		return false;
-		
-    }
-
-
-	private String getListOfUsers(boolean online) {
-		StringBuilder usersList = new StringBuilder();
-		usersList.append("[");
-		if(online) usersList.append("online ");
-		usersList.append("users] ");
-
-		usersList.append(_usersDatabase.printUsers(online));
-			
-		return usersList.toString();
-	}
-
-	/**
-	 * checks the msg for mentionings of other users and tags them
-	 * @param sendFrame
-	 */
-	private void handleMentionedUsers(SendFrame sendFrame) {
-		List<String> users = getMentionedUsers(sendFrame.getMessage());
-		int numOfMentions = 0;
-		for (String user : users) {
-			_usersDatabase.incrementMentions(user);
-			_topicsDatabase.addMessageToTopic(user,sendFrame.getMessage());
-			numOfMentions++;
-		}
-		_usersDatabase.incrementMentioning(sendFrame.getDestination(),numOfMentions);
-	}
-
-	private List<String> getMentionedUsers(String message) {
-		List<String> users = new ArrayList<String>();
-		
-		int from=0;
-		boolean found = false;
-		for (int i = 0; i < message.length(); i++) {
-			if(!found){
-				if(message.charAt(i) == '@'){
-					from = i;
-					found = true;
-				}
-			}
-			else if(found){
-				if(message.charAt(i) == ' '){
-					users.add(message.substring(from+1,i));
-					found = false;
-				}
-				if(message.charAt(i) == '@'){
-					users.add(message.substring(from+1,i));
-					from = i;
-				}
-			}
-			
-		}
-		if(found){
-			users.add(message.substring(from+1,message.length()));
-		}
-		return users;
-	}
-
-
-	private void unsubscribe(UnsubscribeFrame unsubscribeFrame){
-		String unsubscribeId = unsubscribeFrame.getId();
-		LOGGER.info("[<<] [request=unsubscribe] [username='"+_username+"'] [id="+unsubscribeId+"]");
-
-		User user = _usersDatabase.getUser(_username);
-		String userToUnfollow = user.getTopicName(unsubscribeId);
-		
-		int success = user.removeTopic(unsubscribeId);
-		
-		switch (success) { //[twitter] unfollow errors
-		case -1: //trying to unfollow myself
-			writeToHandler(new ErrorFrame("Trying to unfollow itself", "You can not unfollow yourself"));
-			break;
-		case 0: //success
-			_usersDatabase.getUser(userToUnfollow).decreaseFollowers();
-			writeToHandler(new ServerMessageFrame(_username,"-1","No longer following "+userToUnfollow));
-			break;
-		case 1: // trying to unfollow user that im not following
-			writeToHandler(new ErrorFrame("Not following this user", ""));
-			break;
-
-		default:
-			break;
-		}
-
-	}
-
-	private boolean subscribe(SubscribeFrame subscribeFrame) {
-		boolean success = true;
-		LOGGER.info("[<<] [request=subscribe] [username='"+_username+"'] [topic="+subscribeFrame.getDestination()+"] [id="+subscribeFrame.getId()+"]");
-		Topic topic = _topicsDatabase.addUserToTopic(subscribeFrame.getDestination(), _username);
-		if(topic == null){ //[twitter] username not found!
-			writeToHandler(new ErrorFrame("Wrong username", ""));
-			success = false;
-		}
-		boolean allreadyFollowing = _usersDatabase.getUser(_username).addTopic( topic,subscribeFrame.getId() );
-		if(allreadyFollowing){ //[twitter] already following user
-			writeToHandler(new ErrorFrame("Already following username", ""));
-			success = false;
-		}
-		return success;
-	}
-
-	public boolean isEnd(String msg) {
-        return msg.equalsIgnoreCase("bye");
-    }
-
-	private void connect(ConnectFrame connectFrame){
-		LOGGER.info("[<<] [request=login] [username='"+connectFrame.getUsername()+"'] [password="+connectFrame.getPassword()+"]");
-
-		UsersDatabase.Status status = _usersDatabase.login(connectFrame.getUsername(), connectFrame.getPassword(),_connectionHandler,_topicsDatabase);
-		
-		switch (status) {
-		case ALLREADY_LOGGED_IN:
-			LOGGER.info("[error] [type=login failed] [username='"+_username+"'] [reason=user already logged in]");
-
-			writeToHandler(new ErrorFrame("User allready logged in",""));
-			break;
-		case INVALID_PASSWORD:
-			LOGGER.info("[error] [type=login failed] [username='"+_username+"'] [reason=wrong password]");
-			writeToHandler( new ErrorFrame("Wrong password",""));
-			break;
-		case LOGIN_SUCCESS:
-			_username = connectFrame.getUsername();
-			LOGGER.info("[info] [login success] [username='"+_username+"']");
-			writeToHandler(new ConnectedFrame());
-			_usersDatabase.getUser( connectFrame.getUsername() ).sendUnreadMessages();
-			break;
-
-		default:
-			break;
-		}
-	}
-	
-	private void writeToHandler(StompFrame frame)
-	{
-		_connectionHandler.addOutData(ByteBuffer.wrap(frame.getBytes()));
-	}
-	
-	private void disconnect(DisconnectFrame disconnectFrame) {
-		LOGGER.info("[<<] [request=disconnect] [username='"+_username+"'][receipt="+disconnectFrame.getReceipt()+"]");
-		if(_username != null){
-			_usersDatabase.logout(_username);
-			writeToHandler(new ReceiptFrame(disconnectFrame.getReceipt()));
-		}
-		else{
-			LOGGER.info("[error] [logout failed] [username='"+_username+"'] [reason=user not logged in");
-
-			writeToHandler(new ErrorFrame("User not logged in",""));
-		}
-	}
-
-	public void setConnectionHanlder(ConnectionHandler connectionHandler) {
-		_connectionHandler = connectionHandler;
-		
-	}
-
-	public String getUsername() {
-		return _username;
-	}
-	
-	
-	@Override
-	public boolean isEnd(StringMessage msg)
-	{
-		//unused method
-		return false;
-	}
-
-	@Override
-	public boolean shouldClose()
-	{
-		return _shouldClose;
-	}
-
-	@Override
-	public void connectionTerminated()
-	{
-		_shouldClose = true;
-
-	}
-
-
-	@Override
-	public void setConnectionHandler(ConnectionHandler connectionHandler)
-	{
-		_connectionHandler = connectionHandler;
-		
-	}
-
-}
diff --git a/ReactorServer/src/spl/server/Statistics.java b/ReactorServer/src/spl/server/Statistics.java
deleted file mode 100644
index 5bfcd23..0000000
--- a/ReactorServer/src/spl/server/Statistics.java
+++ /dev/null
@@ -1,103 +0,0 @@
-package spl.server;
-
-import java.util.ArrayList;
-import java.util.List;
-
-/**
- * logging and generating server statistics
- */
-public class Statistics {
-	private UsersDatabase _userDB;
-	private TopicsDatabase _topicsDB;
-	private long _serverStartingTime;
-	private List<Long> _tweets;
-	private List<Long> _tweetsPassTime;
-	
-	public Statistics(UsersDatabase userDB, TopicsDatabase topicsDB) { 
-		_userDB = userDB;
-		_topicsDB = topicsDB;
-		_tweets = new ArrayList<Long>();
-		_tweetsPassTime = new ArrayList<Long>();
-		_serverStartingTime = System.currentTimeMillis();
-	}
-	
-	/**
-	 * logging tweet recieved time
-	 */	
-	public synchronized void addTweet(){
-		_tweets.add(System.currentTimeMillis());
-	}
-
-	/**
-	 * logging time took to pass tweet to all relevant users
-	 * @param time
-	 */
-	public synchronized void addTweetPassTime(Long time){
-		_tweetsPassTime.add(time);
-	}
-
-	/**
-	 * generating statistics about the server:
-	 * 1. max tweets per 5 seconds
-	 * 2. avg tweets per 5 seconds
-	 * 3. avg tweets pass time
-	 * 4. user with most followers
-	 * 5. user with most mentions
-	 * 6. most mentioning user
-	 * @return above
-	 */
-	public synchronized String generateStatisticsInformation(){
-		StringBuilder builder = new StringBuilder();
-		builder.append(String.format("[Max tweets per 5 secs=%d] \n", computeMaxNumberOfTweetsPer5Seconds()));
-		builder.append(String.format("[Avg. tweets per 5 secs=%.4f] \n", computeAvgNumberOfTweetsPer5Seconds()));
-		builder.append(String.format("[Avg. tweet pass time=%d] \n", computeAvgTweetPassTime()));
-		
-		StatsItem stats = new StatsItem(_userDB);
-		stats.compute();
-
-		builder.append(String.format("[most followers=%s][followers=%s] \n", stats.getMostFamousUser().getUsername() ,stats.getMostFamousUser().getNumOfFollowers()));
-		builder.append(String.format("[max mentions by others=%s] \n", stats.getMaxMentionedUser().getUsername()));
-		builder.append(String.format("[max mentioning in his tweets=%s] \n", stats.getMaxMentioningUser().getUsername()));
-		return builder.toString();
-	}
-
-	private long computeAvgTweetPassTime() {
-		Long totalTime = 0l;
-		
-		for (Long time : _tweetsPassTime) {
-			totalTime += time;
-		}
-		if( _tweetsPassTime.size() == 0 ) return 0; 
-		return totalTime/_tweetsPassTime.size();
-	}
-
-	private double computeAvgNumberOfTweetsPer5Seconds() {
-		long totalRunningTime = System.currentTimeMillis() - _serverStartingTime;
-		totalRunningTime /= 1000;
-		int totalTweets = _tweets.size();
-		return (double)(((double)(totalTweets*5.0))/(double)totalRunningTime);
-	}
-
-	private int computeMaxNumberOfTweetsPer5Seconds() {
-		int maxNumOfTweetsPer5Seconds = 0;
-		long toTime;
-		for (int i = 0; i < _tweets.size(); i++) {
-			toTime = _tweets.get(i)+5000;
-			
-			int numOfTweetsPer5Seconds=0;
-			for (int j = i; j < _tweets.size(); j++) {
-				if(_tweets.get(j) <= toTime){
-					numOfTweetsPer5Seconds++;
-				}
-				else{
-					break;
-				}
-			}
-			if(numOfTweetsPer5Seconds > maxNumOfTweetsPer5Seconds){
-				maxNumOfTweetsPer5Seconds = numOfTweetsPer5Seconds;
-			}
-		}
-		
-		return maxNumOfTweetsPer5Seconds;
-	}
-}
\ No newline at end of file
diff --git a/ReactorServer/src/spl/server/StatsItem.java b/ReactorServer/src/spl/server/StatsItem.java
deleted file mode 100644
index 3757a8c..0000000
--- a/ReactorServer/src/spl/server/StatsItem.java
+++ /dev/null
@@ -1,57 +0,0 @@
-package spl.server;
-
-/**
- * utility object to help calculate server statistics
- *
- */
-public class StatsItem {
-	private UsersDatabase _usersDB;
-	
-	private User _mostFamousUser;
-	private User _maxTweetsUser;
-	private User _maxMentioningUser;
-	private User _maxMentionedUser;
-	
-	public StatsItem(UsersDatabase usersDB) {
-		_usersDB = usersDB;
-	}
-	public void compute(){
-		_mostFamousUser = computeMostFamousUser();
-		_maxTweetsUser = computeMaxTweetsUser();
-		_maxMentioningUser = computeMaxMentioningUser();
-		_maxMentionedUser = computeMaxMentionedUser();
-	}
-	
-	private User computeMostFamousUser(){
-		return _usersDB.computeMostFamousUser();
-	}
-
-	private User computeMaxTweetsUser(){
-		return _usersDB.computeMaxTweetsUser();
-	}
-	
-	private User computeMaxMentioningUser(){
-		return _usersDB.computeMaxMentioningUser();
-	}	
-	
-	private User computeMaxMentionedUser(){
-		return _usersDB.computeMaxMentionedUser();
-	}
-	
-	
-	public User getMostFamousUser() {
-		return _mostFamousUser;
-	}
-
-	public User getMaxTweetsUser() {
-		return _maxTweetsUser;
-	}
-
-	public User getMaxMentioningUser() {
-		return _maxMentioningUser;
-	}
-
-	public User getMaxMentionedUser() {
-		return _maxMentionedUser;
-	}
-}
diff --git a/ReactorServer/src/spl/server/Topic.java b/ReactorServer/src/spl/server/Topic.java
deleted file mode 100644
index dbfb884..0000000
--- a/ReactorServer/src/spl/server/Topic.java
+++ /dev/null
@@ -1,43 +0,0 @@
-package spl.server;
-
-import java.util.Vector;
-
-/**
- * a topic which users can subscribe to. in tweeter, a username to follow
- *
- */
-public class Topic {
-	private String _topicName;
-	private Vector<User> _users;
-	
-	public Topic(String topicName) {
-		_topicName = topicName;
-		_users = new Vector<>();
-	}
-
-	public void addUser(User user) {
-		_users.add(user);
-	}
-	
-	public void removeUser(User user){
-		for (int i = 0; i < _users.size(); i++) {
-			if(user.equals(_users.get(i)) ){
-				_users.remove(i);
-				return;
-			}
-		}
-	}
-
-	public void addMessage(String message) {
-		for (User user : _users) {
-			if(!user.isServer()){
-				user.sendMessage(_topicName,message);
-			}
-		}
-	}
-
-	public String getName() {
-		
-		return _topicName;
-	}
-}
diff --git a/ReactorServer/src/spl/server/TopicsDatabase.java b/ReactorServer/src/spl/server/TopicsDatabase.java
deleted file mode 100644
index 6a13c1a..0000000
--- a/ReactorServer/src/spl/server/TopicsDatabase.java
+++ /dev/null
@@ -1,58 +0,0 @@
-package spl.server;
-
-import java.util.Map;
-import java.util.concurrent.ConcurrentHashMap;
-
-/**
- * Database of topics ('users' in tweeter)
- *
- */
-
-public class TopicsDatabase {
-	private Map<String, Topic> _topics;
-	private UsersDatabase _users;
-	
-	public TopicsDatabase(UsersDatabase usersDatabase) {
-		_topics = new ConcurrentHashMap<>();
-		_users = usersDatabase;
-		
-		//[twitter] server fake username
-		Topic topic = addUserToTopic("server", "server"); 
-	}
-	
-	private Topic addTopic(String topicName){
-		Topic topic = new Topic(topicName);
-		_topics.put(topicName, topic);
-		return topic;
-	}
-	
-	/**
-	 * handling follow option in tweeter
-	 * @param topicName username to follow
-	 * @param username follower username
-	 * @return topic (user) to follow
-	 */
-	public Topic addUserToTopic(String topicName,String username){
-		Topic topic = _topics.get(topicName);
-		if(topic == null){ //not found
-			if( topicName == username){ //[twitter] registering new user = topic
-				topic = addTopic(username);
-			}
-			else{ //error
-				return null;
-			}
-		}
-		topic.addUser( _users.getUser(username) );
-		return topic;
-	}
-
-	/**
-	 * add tweet to a user
-	 * @param topicName username
-	 * @param message tweet
-	 */
-	public void addMessageToTopic(String topicName, String message) {
-		Topic topic = _topics.get(topicName);
-		if(topic != null) topic.addMessage(message); //[twitter] can't tweet to a new topic
-	}
-}
diff --git a/ReactorServer/src/spl/server/User.java b/ReactorServer/src/spl/server/User.java
deleted file mode 100644
index 77003ac..0000000
--- a/ReactorServer/src/spl/server/User.java
+++ /dev/null
@@ -1,185 +0,0 @@
-package spl.server;
-
-import java.nio.ByteBuffer;
-import java.util.Map;
-import java.util.Map.Entry;
-import java.util.Queue;
-import java.util.Set;
-import java.util.concurrent.ConcurrentHashMap;
-import java.util.concurrent.ConcurrentLinkedQueue;
-import java.util.logging.Logger;
-
-import reactor.ConnectionHandler;
-import spl.server.stomp.frames.ServerMessageFrame;
-import tokenizer.Message;
-
-
-/**
- * this class represents a user
- *
- */
-public class User {
-	private final static Logger LOGGER = Logger.getGlobal();
-
-	private String _username;
-	private String _password;
-	private boolean _isLoggedIn;
-	private ConnectionHandler _connectionHanlder;
-	private Queue<Message> _myMessages; //queue of unread tweets
-	private Map<String, Topic> _myEntries; //queue of topics (users) I follow
-	
-	//stats
-	private int _numOfMentionsIwrote;
-	private int _numOfMentionsOfMe;
-	private int _numOfTweets;
-	private int _numOfFollowers;
-	
-	public User(String username, String password) {
-		_username = username;
-		_password = password;
-		_isLoggedIn = true;
-		_connectionHanlder = null;
-		_myMessages = new ConcurrentLinkedQueue<>();
-		_myEntries = new ConcurrentHashMap<String, Topic>();
-		_numOfMentionsIwrote = 0;
-		_numOfMentionsOfMe = 0;
-		_numOfTweets = 0;
-		_numOfFollowers = 0;
-	}
-	
-	public void login(ConnectionHandler connectionHandler){
-		_isLoggedIn = true;
-		_connectionHanlder = connectionHandler;
-	}
-	
-	public void logout(){
-		_isLoggedIn = false;
-		_connectionHanlder = null;
-	}
-	
-	public boolean checkPassword(String password){
-		return password.equals(_password);
-	}
-	
-	public boolean isLoggedIn(){
-		return _isLoggedIn;
-	}
-
-	public String getPw() {
-		return _password;
-	}
-
-	public void setConnectionHanlder(ConnectionHandler connectionHanlder) {
-		_connectionHanlder = connectionHanlder;
-	}
-	
-	/**
-	 * send message to user
-	 * if offline -> store it in unread queue
-	 * @param destination from
-	 * @param message tweet
-	 */	
-	public void sendMessage(String destination, String message){
-		String subscriptionId = getSubscriptionId(destination);
-		if(subscriptionId.equals("not_found")) return;
-		
-		ServerMessageFrame serverMessageFrame = new ServerMessageFrame(destination, subscriptionId, message);
-		
-		if(_isLoggedIn){
-			_connectionHanlder.addOutData(ByteBuffer.wrap(serverMessageFrame.getBytes()));
-		}
-		else{ //not logged in -> push to queue
-			_myMessages.add(serverMessageFrame);
-		}
-	}
-	
-	private String getSubscriptionId(String destination) {
-		Set<Entry<String, Topic>> entries = _myEntries.entrySet();
-		for (Entry<String, Topic> entry : entries)
-		{
-			if(entry.getValue().getName().equals(destination)){
-				return entry.getKey();
-			}
-		}
-		return "not_found";
-	}
-
-	/**
-	 * send unread messages to user
-	 */
-	public void sendUnreadMessages(){
-		while(!_myMessages.isEmpty()){
-			_connectionHanlder.addOutData(ByteBuffer.wrap(_myMessages.poll().getBytes()));
-		}
-	}
-	
-	@Override
-	public boolean equals(Object other) {
-		if(other instanceof User)
-			return _username.equals(((User)other)._username);
-		else{
-			return false;
-		}
-	}
-
-	/**
-	 * add a user to follow
-	 * @param topic user
-	 * @param id subscription id
-	 * @return
-	 */
-	public boolean addTopic(Topic topic, String id) {
-		Topic tmp = _myEntries.get(id);
-		if(tmp != null){
-			return true; // [twitter] allready following user
-		}
-		_myEntries.put(id, topic);
-		return false;
-	}
-
-	/**
-	 * unfollow a user
-	 * @param topic user
-	 * @param id subscription id
-	 * @return
-	 */
-	public int removeTopic(String id) {
-		Topic topic = _myEntries.get(id);
-		if(topic != null){
-			if(topic.getName() == _username){
-				return -1;
-			}
-			_myEntries.remove(id);
-			topic.removeUser(this);
-			return 0;
-		}
-		return 1;
-	}
-
-	public String getTopicName(String unsubscribeId) {
-		Topic topic = _myEntries.get(unsubscribeId);
-		if(topic == null ) return null;
-		
-		return topic.getName();
-	}
-
-
-	public boolean isServer() {
-		return _username.equals("server");
-	}
-
-	//statistics getters
-	public String getUsername() { return _username; }
-	public int getNumOfMentionsIwrote() { return _numOfMentionsIwrote; }
-	public int getNumOfMentionsOfMe() { return _numOfMentionsOfMe; }
-	public int getNumOfTweets() { return _numOfTweets; }
-	public int getNumOfFollowers() { return _numOfFollowers; }
-
-	//statistics getters
-	public void incrementMyTweets() { _numOfTweets++; }
-	public void incrementMentionsOfMe() { _numOfMentionsOfMe++; }
-	public void incrementMentionsIwrote(int numOfMentions) { _numOfMentionsIwrote +=numOfMentions; }
-	public void incrementFollowers() { _numOfFollowers++; }
-	public void decreaseFollowers() { _numOfFollowers--; }
-
-}
diff --git a/ReactorServer/src/spl/server/UsersDatabase.java b/ReactorServer/src/spl/server/UsersDatabase.java
deleted file mode 100644
index a87c512..0000000
--- a/ReactorServer/src/spl/server/UsersDatabase.java
+++ /dev/null
@@ -1,232 +0,0 @@
-package spl.server;
-
-import java.util.Map;
-import java.util.Map.Entry;
-import java.util.Set;
-import java.util.concurrent.ConcurrentHashMap;
-
-import reactor.ConnectionHandler;
-
-/** 
- * Database of users
- *
- */
-public class UsersDatabase {
-	private Map<String, User> _db;
-	
-	public enum Status{
-	    LOGIN_SUCCESS, USER_NOT_FOUND, INVALID_PASSWORD, ALLREADY_LOGGED_IN,
-	    LOGGED_OUT_SUCCESS,NOT_LOGGED_IN
-	}
-	
-	public UsersDatabase() {
-		_db = new ConcurrentHashMap<>();
-		register("server", "h4rdP455W0rd"); //[twitter] fake username server 
-	}
-	
-	private User register(String username, String password){
-		User user = null;
-		if( !userExists(username) ){ //register a new user or return existing user
-			user = new User(username, password);
-			_db.put(username, user);
-		}
-		return user;
-	}
-	
-	private boolean userExists(String username){
-		if( _db.get( username ) == null){
-			return false;
-		}
-		return true;
-	}
-	
-	/**
-	 * login method
-	 * @param username
-	 * @param password
-	 * @param connectionHandler
-	 * @param topicsDatabase
-	 * @return INVALID_PASSWORD \ ALLREADY_LOGGED_IN \ LOGIN_SUCCESS
-	 */
-	public UsersDatabase.Status login(String username, String password, ConnectionHandler connectionHandler, TopicsDatabase topicsDatabase){
-		User user = null;
-		if( userExists(username) ){
-			user = _db.get(username);
-			if( !user.checkPassword(password) ){
-				return Status.INVALID_PASSWORD;
-			}
-			else{
-				if( user.isLoggedIn() ){
-					return Status.ALLREADY_LOGGED_IN;
-				}
-			}
-		}
-		else{ //user doesn't exists -> register
-			user = register(username, password);
-			
-			// [Twitter] - follow myself
-			Topic topic = topicsDatabase.addUserToTopic(username, username);
-			user.addTopic( topic,"-1");
-		}
-		user.login(connectionHandler);
-		return Status.LOGIN_SUCCESS;
-	}
-	
-	/**
-	 * logout
-	 * @param username
-	 * @return NOT_LOGGED_IN \ LOGGED_OUT_SUCCESS \ USER_NOT_FOUND
-	 */
-	public UsersDatabase.Status logout(String username){
-		User user = null;
-		if( userExists(username) ){
-			user = _db.get(username);
-			
-			if( !user.isLoggedIn() ){ //not logged in
-				return Status.NOT_LOGGED_IN;
-			}
-			else{
-				user.logout();
-				return Status.LOGGED_OUT_SUCCESS;
-			}
-		}
-		else{ //user doesn't exists 
-			return Status.USER_NOT_FOUND;
-		}
-	}
-
-	public User getUser(String username) {
-		return _db.get(username);
-	}
-
-	/**
-	 * printing a list of users {online}
-	 * @param online
-	 * @return
-	 */
-	public Object printUsers(boolean online) {
-		StringBuilder builder = new StringBuilder();
-
-		Set<Entry<String, User>> entries = _db.entrySet();
-		for (Entry<String, User> entry : entries)
-		{
-			if((!online || entry.getValue().isLoggedIn()) && !entry.getKey().equals("server")){
-				builder.append(String.format("%s ", entry.getKey()));
-			}
-		}
-
-		return builder.toString();
-	}
-
-
-	public void incrementTweets(String username) {
-		User user = getUser(username);
-		if(user != null){
-			user.incrementMyTweets();
-		}
-		
-	}
-
-	public void incrementMentions(String username) {
-		User user = getUser(username);
-		if(user != null){
-			user.incrementMentionsOfMe();
-		}		
-	}
-
-	public void incrementMentioning(String username, int numOfMentions) {
-		User user = getUser(username);
-		if(user != null){
-			user.incrementMentionsIwrote(numOfMentions);
-		}		
-	}
-
-	public User computeMostFamousUser() {
-		User mostFamousUser=null;
-		
-		Set<Entry<String, User>> entries = _db.entrySet();
-		for (Entry<String, User> entry : entries)
-		{
-			if(entry.getKey().equals("server")) continue;
-			
-			User tmpUser = entry.getValue();
-			if(mostFamousUser == null){
-				mostFamousUser = tmpUser;
-				continue;
-			}
-			
-			if( tmpUser.getNumOfFollowers() > mostFamousUser.getNumOfFollowers() ){
-				mostFamousUser = tmpUser;
-			}
-		}		
-
-		return mostFamousUser;
-	}
-
-	public User computeMaxTweetsUser() {
-		User maxTweetsUser=null;
-		
-		Set<Entry<String, User>> entries = _db.entrySet();
-		for (Entry<String, User> entry : entries)
-		{
-			if(entry.getKey().equals("server")) continue;
-			
-			User tmpUser = entry.getValue();
-			if(maxTweetsUser == null){
-				maxTweetsUser = tmpUser;
-				continue;
-			}
-			
-			if( tmpUser.getNumOfTweets() > maxTweetsUser.getNumOfTweets() ){
-				maxTweetsUser = tmpUser;
-			}
-		}		
-
-		return maxTweetsUser;
-	}
-
-	public User computeMaxMentioningUser() {
-		User maxMentioningUser=null;
-		
-		Set<Entry<String, User>> entries = _db.entrySet();
-		for (Entry<String, User> entry : entries)
-		{
-			if(entry.getKey().equals("server")) continue;
-			
-			User tmpUser = entry.getValue();
-			if(maxMentioningUser == null){
-				maxMentioningUser = tmpUser;
-				continue;
-			}
-			
-			if( tmpUser.getNumOfMentionsIwrote() > maxMentioningUser.getNumOfMentionsIwrote() ){
-				maxMentioningUser = tmpUser;
-			}
-		}		
-
-		return maxMentioningUser;
-	}
-
-	public User computeMaxMentionedUser() {
-		User maxMentionedUser=null;
-		
-		Set<Entry<String, User>> entries = _db.entrySet();
-		for (Entry<String, User> entry : entries)
-		{
-			if(entry.getKey().equals("server")) continue;
-			
-			User tmpUser = entry.getValue();
-			if(maxMentionedUser == null){
-				maxMentionedUser = tmpUser;
-				continue;
-			}
-			
-			if( tmpUser.getNumOfMentionsOfMe() > maxMentionedUser.getNumOfMentionsOfMe() ){
-				maxMentionedUser = tmpUser;
-			}
-		}		
-
-		return maxMentionedUser;
-	}
-	
-}
diff --git a/ReactorServer/src/spl/server/stomp/frames/ConnectFrame.java b/ReactorServer/src/spl/server/stomp/frames/ConnectFrame.java
deleted file mode 100644
index e7a938a..0000000
--- a/ReactorServer/src/spl/server/stomp/frames/ConnectFrame.java
+++ /dev/null
@@ -1,38 +0,0 @@
-package spl.server.stomp.frames;
-
-import java.util.HashMap;
-import java.util.Map;
-
-
-
-public class ConnectFrame extends StompFrame {
-	private String _hostIP;
-	private String _username;
-	private String _password;
-	
-	public ConnectFrame(String version,String host, String username,String password) {
-		_hostIP = host;
-		_username = username;
-		_password = password;
-	}
-
-
-	@Override
-	public String getEncodedString() {
-		Map<String, String> map = new HashMap<>();
-		map.put("accept-version","1.2");
-		map.put("host",_hostIP);
-		map.put("login",_username);
-		map.put("passcode",_password);
-
-		return makeFrame("CONNECT", map, "");
-	}
-
-	public String getPassword() {
-		return _password;
-	}
-	public String getUsername() {
-		return _username;
-	}
-
-}
diff --git a/ReactorServer/src/spl/server/stomp/frames/ConnectedFrame.java b/ReactorServer/src/spl/server/stomp/frames/ConnectedFrame.java
deleted file mode 100644
index 96e1cbe..0000000
--- a/ReactorServer/src/spl/server/stomp/frames/ConnectedFrame.java
+++ /dev/null
@@ -1,20 +0,0 @@
-package spl.server.stomp.frames;
-
-import java.util.HashMap;
-import java.util.Map;
-
-
-public class ConnectedFrame extends StompFrame {
-
-
-
-	@Override
-	public String getEncodedString() {
-		Map<String, String> map = new HashMap<>();
-		map.put("version","1.2");
-
-		return makeFrame("CONNECTED", map, "");
-	}
-
-
-}
diff --git a/ReactorServer/src/spl/server/stomp/frames/DisconnectFrame.java b/ReactorServer/src/spl/server/stomp/frames/DisconnectFrame.java
deleted file mode 100644
index 82f6f3a..0000000
--- a/ReactorServer/src/spl/server/stomp/frames/DisconnectFrame.java
+++ /dev/null
@@ -1,26 +0,0 @@
-package spl.server.stomp.frames;
-
-import java.util.HashMap;
-import java.util.Map;
-
-public class DisconnectFrame extends StompFrame {
-	private String _receipt;
-	
-	public DisconnectFrame(String receipt) {
-		_receipt = receipt;
-	}
-	@Override
-	public String getEncodedString() {
-		Map<String, String> map = new HashMap<>();
-		map.put("receipt",_receipt);
-
-		return makeFrame("DISCONNECT", map, "");
-	}
-	
-	public String getReceipt() {
-		return _receipt;
-	}
-	
-	
-
-}
diff --git a/ReactorServer/src/spl/server/stomp/frames/ErrorFrame.java b/ReactorServer/src/spl/server/stomp/frames/ErrorFrame.java
deleted file mode 100644
index ca13cfa..0000000
--- a/ReactorServer/src/spl/server/stomp/frames/ErrorFrame.java
+++ /dev/null
@@ -1,24 +0,0 @@
-package spl.server.stomp.frames;
-
-import java.util.HashMap;
-import java.util.Map;
-
-
-public class ErrorFrame extends StompFrame {
-
-	private String _shortDescription;
-	private String _body;
-	public ErrorFrame(String shortDescription ,String body) {
-		_shortDescription = shortDescription;
-		_body = body;
-	}
-	@Override
-	public String getEncodedString() {
-		Map<String, String> map = new HashMap<>();
-		map.put("message",_shortDescription);
-
-		return makeFrame("ERROR", map, _body);
-	}
-
-
-}
diff --git a/ReactorServer/src/spl/server/stomp/frames/ReceiptFrame.java b/ReactorServer/src/spl/server/stomp/frames/ReceiptFrame.java
deleted file mode 100644
index 507eeac..0000000
--- a/ReactorServer/src/spl/server/stomp/frames/ReceiptFrame.java
+++ /dev/null
@@ -1,25 +0,0 @@
-package spl.server.stomp.frames;
-
-import java.util.HashMap;
-import java.util.Map;
-
-public class ReceiptFrame extends StompFrame {
-	private String _receipt;
-
-	public ReceiptFrame(String receipt) {
-		_receipt = receipt;
-	}
-
-	@Override
-	public String getEncodedString() {
-		Map<String, String> map = new HashMap<>();
-		map.put("receipt-id", _receipt);
-
-		return makeFrame("RECEIPT", map, "");
-	}
-
-	public String getReceipt() {
-		return _receipt;
-	}
-
-}
diff --git a/ReactorServer/src/spl/server/stomp/frames/SendFrame.java b/ReactorServer/src/spl/server/stomp/frames/SendFrame.java
deleted file mode 100644
index d58724f..0000000
--- a/ReactorServer/src/spl/server/stomp/frames/SendFrame.java
+++ /dev/null
@@ -1,31 +0,0 @@
-package spl.server.stomp.frames;
-
-import java.util.HashMap;
-import java.util.Map;
-
-public class SendFrame extends StompFrame {
-	private String _destination;
-	private String _message;
-	
-	public SendFrame(String destination,String message) {
-		_destination = destination;
-		_message = message;
-	}
-	
-	@Override
-	public String getEncodedString() {
-		Map<String, String> map = new HashMap<>();
-		map.put("destination",_destination);
-
-		return makeFrame("SEND", map, _message);
-	}
-	
-	public String getDestination(){
-		return _destination;
-	}
-	
-	public String getMessage(){
-		return _message;
-	}
-
-}
diff --git a/ReactorServer/src/spl/server/stomp/frames/ServerMessageFrame.java b/ReactorServer/src/spl/server/stomp/frames/ServerMessageFrame.java
deleted file mode 100644
index 4ef5fb5..0000000
--- a/ReactorServer/src/spl/server/stomp/frames/ServerMessageFrame.java
+++ /dev/null
@@ -1,47 +0,0 @@
-package spl.server.stomp.frames;
-
-import java.text.SimpleDateFormat;
-import java.util.Date;
-import java.util.HashMap;
-import java.util.Map;
-
-
-public class ServerMessageFrame extends StompFrame {
-	private String _destination;
-	private String _subscriptionId;
-	private String _messageId;
-	private String _body;
-	private String _time;
-	public ServerMessageFrame(String destination,String subscriptionId,String body) {
-		_destination = destination;
-		_messageId = ServerMessageFrame.generateMessageId();
-		_subscriptionId = subscriptionId;
-		_body=body;
-		_time = new SimpleDateFormat("dd.MM.yyyy HH:mm:ss").format(new Date());
-	}
-	
-	private static String generateMessageId()
-	{
-		return Long.toString(messageIdCounter++);
-	}
-
-	public void setSubscriptionId(String id){
-		_subscriptionId = id;
-	}
-	
-
-	
-	@Override
-	public String getEncodedString() {
-		Map<String, String> map = new HashMap<>();
-		map.put("destination",_destination);
-		map.put("subscription",_subscriptionId);
-		map.put("message-id",_messageId);
-		map.put("time",_time);
-
-		return makeFrame("MESSAGE", map, _body);
-	}
-
-	static private volatile long messageIdCounter=0;
-
-}
diff --git a/ReactorServer/src/spl/server/stomp/frames/StompFrame.java b/ReactorServer/src/spl/server/stomp/frames/StompFrame.java
deleted file mode 100644
index 87101ca..0000000
--- a/ReactorServer/src/spl/server/stomp/frames/StompFrame.java
+++ /dev/null
@@ -1,52 +0,0 @@
-package spl.server.stomp.frames;
-
-import java.util.Map;
-import java.util.Map.Entry;
-import java.util.Set;
-
-import tokenizer.Message;
-
-
-public abstract class StompFrame implements Message<StompFrame>
-{	
-	/**
-	 * return a string represents a valid STOMP syntax
-	 * @param header
-	 * @param map
-	 * @param body
-	 * @return
-	 */	
-	protected String makeFrame(String header, Map<String, String> map, String body)
-	{
-		StringBuilder builder = new StringBuilder();
-		builder.append(header);
-		builder.append("\n");
-		Set<Entry<String, String>> entries = map.entrySet();
-		for (Entry<String, String> entry : entries)
-		{
-			builder.append(entry.getKey());
-			builder.append(":");
-			builder.append(entry.getValue());
-			builder.append("\n");
-		}
-		builder.append("\n");
-		builder.append("\n");
-		builder.append(body);
-		builder.append("\u0000");
-		builder.append("\n");
-		return builder.toString();
-	}
-
-	public abstract String getEncodedString();
-	
-	@Override
-	/**
-	 * returns a byte[] of this frame
-	 */
-	public byte[] getBytes()
-	{
-		return getEncodedString().getBytes();
-	}
-	
-
-}
diff --git a/ReactorServer/src/spl/server/stomp/frames/SubscribeFrame.java b/ReactorServer/src/spl/server/stomp/frames/SubscribeFrame.java
deleted file mode 100644
index 2f46407..0000000
--- a/ReactorServer/src/spl/server/stomp/frames/SubscribeFrame.java
+++ /dev/null
@@ -1,31 +0,0 @@
-package spl.server.stomp.frames;
-
-import java.util.HashMap;
-import java.util.Map;
-
-public class SubscribeFrame extends StompFrame {
-	private String _destination;
-	private String _id;
-	public SubscribeFrame(String destination, String id) {
-		_destination = destination;
-		_id = id;
-	}
-
-	public String getId(){
-		return _id;
-	}
-	
-	public String getDestination(){
-		return _destination;
-	}
-
-	@Override
-	public String getEncodedString() {
-		Map<String, String> map = new HashMap<>();
-		map.put("destination",_destination);
-		map.put("id",_id);
-
-		return makeFrame("SUBSCRIBE", map, "");
-	}
-
-}
diff --git a/ReactorServer/src/spl/server/stomp/frames/UnsubscribeFrame.java b/ReactorServer/src/spl/server/stomp/frames/UnsubscribeFrame.java
deleted file mode 100644
index 5e0fd3e..0000000
--- a/ReactorServer/src/spl/server/stomp/frames/UnsubscribeFrame.java
+++ /dev/null
@@ -1,26 +0,0 @@
-package spl.server.stomp.frames;
-
-import java.util.HashMap;
-import java.util.Map;
-
-
-public class UnsubscribeFrame extends StompFrame {
-
-	private String _id;
-	public UnsubscribeFrame(String id) {
-		_id = id;
-	}
-
-	public String getId(){
-		return _id;
-	}
-	
-	@Override
-	public String getEncodedString() {
-		Map<String, String> map = new HashMap<>();
-		map.put("id",_id);
-
-		return makeFrame("UNSUBSCRIBE", map, "");
-	}
-
-}
diff --git a/ReactorServer/src/spl/util/MyFormatter.java b/ReactorServer/src/spl/util/MyFormatter.java
deleted file mode 100644
index e6a61ba..0000000
--- a/ReactorServer/src/spl/util/MyFormatter.java
+++ /dev/null
@@ -1,26 +0,0 @@
-package spl.util;
-
-import java.text.SimpleDateFormat;
-import java.util.Date;
-import java.util.logging.Formatter;
-import java.util.logging.LogRecord;
-
-
-/**
- * Custom format for logger
- *
- */
-public class MyFormatter extends Formatter
-{
-	@Override
-	public String format(LogRecord record)
-	{
-		SimpleDateFormat sdf = new SimpleDateFormat("HH:mm:ss");
-		return String.format("%s %s\n", 
-					sdf.format(new Date(record.getMillis())), 
-					record.getMessage()
-					);
-
-	}
-
-}
diff --git a/ReactorServer/src/spl/util/MyLogger.java b/ReactorServer/src/spl/util/MyLogger.java
deleted file mode 100644
index 763ff14..0000000
--- a/ReactorServer/src/spl/util/MyLogger.java
+++ /dev/null
@@ -1,42 +0,0 @@
-package spl.util;
-
-import java.util.logging.ConsoleHandler;
-import java.util.logging.FileHandler;
-import java.util.logging.Formatter;
-import java.util.logging.Handler;
-import java.util.logging.Level;
-import java.util.logging.Logger;
-
-/**
- * Logger Utility
- */
-public class MyLogger
-{
-
-	public void setup()
-	{
-		Logger logger = Logger.getGlobal();
-		
-		logger.setLevel(Level.INFO);
-		
-		logger.setUseParentHandlers(false);
-		Formatter formatter = new MyFormatter();
-		
-		Handler consoleHandler = new ConsoleHandler();
-		
-		consoleHandler.setFormatter(formatter);
-		logger.addHandler(consoleHandler);
-
-		try
-		{
-			Handler fileHandler = new FileHandler("log.log");
-			fileHandler.setFormatter(formatter);
-			logger.addHandler(fileHandler);
-		} 
-		catch (Exception e)
-		{
-			logger.warning("could not create file logger");
-		}
-
-	}
-}
diff --git a/ReactorServer/src/tokenizer/FixedSeparatorMessageTokenizer.java b/ReactorServer/src/tokenizer/FixedSeparatorMessageTokenizer.java
deleted file mode 100644
index 342670a..0000000
--- a/ReactorServer/src/tokenizer/FixedSeparatorMessageTokenizer.java
+++ /dev/null
@@ -1,85 +0,0 @@
-package tokenizer;
-
-import java.nio.ByteBuffer;
-import java.nio.CharBuffer;
-import java.nio.charset.CharacterCodingException;
-import java.nio.charset.Charset;
-import java.nio.charset.CharsetDecoder;
-import java.nio.charset.CharsetEncoder;
-import java.util.Vector;
-
-public class FixedSeparatorMessageTokenizer implements MessageTokenizer<StringMessage> {
-
-   private final String _messageSeparator;
-
-   private final StringBuffer _stringBuf = new StringBuffer();
-   /**
-	 * the fifo queue, which holds data coming from the socket. Access to the
-	 * queue is serialized, to ensure correct processing order.
-	 */
-	private final Vector<ByteBuffer> _buffers = new Vector<ByteBuffer>();
-
-   private final CharsetDecoder _decoder;
-   private final CharsetEncoder _encoder;
-
-   public FixedSeparatorMessageTokenizer(String separator, Charset charset) {
-      this._messageSeparator = separator;
-
-      this._decoder = charset.newDecoder();
-      this._encoder = charset.newEncoder();
-   }
-
-   /**
-    * Add some bytes to the message.  
-    * Bytes are converted to chars, and appended to the internal StringBuffer.
-    * Complete messages can be retrieved using the nextMessage() method.
-    *
-    * @param bytes an array of bytes to be appended to the message.
-    */
-   public synchronized void addBytes(ByteBuffer bytes) {
-	   _buffers.add(bytes);
-      
-   }
-
-   /**
-    * Is there a complete message ready?.
-    * @return true the next call to nextMessage() will not return null, false otherwise.
-    */
-   public synchronized boolean hasMessage() {
-	   while(_buffers.size() > 0) {
-           ByteBuffer bytes = _buffers.remove(0);
-           CharBuffer chars = CharBuffer.allocate(bytes.remaining());
- 	      this._decoder.decode(bytes, chars, false); // false: more bytes may follow. Any unused bytes are kept in the decoder.
- 	      chars.flip();
- 	      this._stringBuf.append(chars);
-	   }
-	   return this._stringBuf.indexOf(this._messageSeparator) > -1;
-   }
-
-   /**
-    * Get the next complete message if it exists, advancing the tokenizer to the next message.
-    * @return the next complete message, and null if no complete message exist.
-    */
-   public synchronized StringMessage nextMessage() {
-      String message = null;
-      int messageEnd = this._stringBuf.indexOf(this._messageSeparator);
-      if (messageEnd > -1) {
-         message = this._stringBuf.substring(0, messageEnd);
-         this._stringBuf.delete(0, messageEnd+this._messageSeparator.length());
-      }
-      return new StringMessage(message);
-   }
-
-   /**
-    * Convert the String message into bytes representation, taking care of encoding and framing.
-    *
-    * @return a ByteBuffer with the message content converted to bytes, after framing information has been added.
-    */
-   public ByteBuffer getBytesForMessage(StringMessage msg)  throws CharacterCodingException {
-      StringBuilder sb = new StringBuilder(msg.getMessage());
-      sb.append(this._messageSeparator);
-      ByteBuffer bb = this._encoder.encode(CharBuffer.wrap(sb));
-      return bb;
-   }
-
-}
diff --git a/ReactorServer/src/tokenizer/Message.java b/ReactorServer/src/tokenizer/Message.java
deleted file mode 100644
index e538433..0000000
--- a/ReactorServer/src/tokenizer/Message.java
+++ /dev/null
@@ -1,6 +0,0 @@
-package tokenizer;
-
-
-public interface Message<T>{
-	public abstract byte[] getBytes();
-}
diff --git a/ReactorServer/src/tokenizer/MessageTokenizer.java b/ReactorServer/src/tokenizer/MessageTokenizer.java
deleted file mode 100644
index eaf0f50..0000000
--- a/ReactorServer/src/tokenizer/MessageTokenizer.java
+++ /dev/null
@@ -1,33 +0,0 @@
-package tokenizer;
-
-import java.nio.ByteBuffer;
-import java.nio.charset.CharacterCodingException;
-
-public interface MessageTokenizer<T> {
-
-   
-   /**
-    * Add some bytes to the message stream.
-    * @param bytes an array of bytes to be appended to the message stream.
-    */
-   void addBytes(ByteBuffer bytes);
-
-   /**
-    * Is there a complete message ready?.
-    * @return true the next call to nextMessage() will not return null, false otherwise.
-    */
-   boolean hasMessage();
-
-   /**
-    * Get the next complete message if it exists, advancing the tokenizer to the next message.
-    * @return the next complete message, and null if no complete message exist.
-    */
-   T nextMessage();
-
-   /**
-    * Convert the String message into bytes representation, taking care of encoding and framing.
-    * @return a ByteBuffer with the message content converted to bytes, after framing information has been added.
-    */
-   ByteBuffer getBytesForMessage(T msg) throws CharacterCodingException;
-
-}
diff --git a/ReactorServer/src/tokenizer/StringMessage.java b/ReactorServer/src/tokenizer/StringMessage.java
deleted file mode 100644
index 2824e1b..0000000
--- a/ReactorServer/src/tokenizer/StringMessage.java
+++ /dev/null
@@ -1,30 +0,0 @@
-package tokenizer;
-
-public class StringMessage implements Message<StringMessage> {
-	private final String message;
-	
-	public StringMessage(String message){
-		this.message=message;
-	}
-
-	public String getMessage(){
-		return message;
-	}
-	
-	@Override
-	public String toString() {
-		return message;
-	}
-	
-	@Override
-	public boolean equals(Object other) {
-		return message.equals(other);
-	}
-
-	@Override
-	public byte[] getBytes()
-	{
-		// TODO Auto-generated method stub
-		return null;
-	}
-}
diff --git a/ReactorServer/src/tokenizer/TokenizerFactory.java b/ReactorServer/src/tokenizer/TokenizerFactory.java
deleted file mode 100644
index 0a85503..0000000
--- a/ReactorServer/src/tokenizer/TokenizerFactory.java
+++ /dev/null
@@ -1,5 +0,0 @@
-package tokenizer;
-
-public interface TokenizerFactory<T> {
-   MessageTokenizer<T> create();
-}
diff --git a/ServerThreadPerClient/.DS_Store b/ServerThreadPerClient/.DS_Store
deleted file mode 100644
index 211bbd4..0000000
Binary files a/ServerThreadPerClient/.DS_Store and /dev/null differ
diff --git a/ServerThreadPerClient/.classpath b/ServerThreadPerClient/.classpath
deleted file mode 100644
index 91ee9a5..0000000
--- a/ServerThreadPerClient/.classpath
+++ /dev/null
@@ -1,6 +0,0 @@
-<?xml version="1.0" encoding="UTF-8"?>
-<classpath>
-	<classpathentry kind="src" path="src"/>
-	<classpathentry kind="con" path="org.eclipse.jdt.launching.JRE_CONTAINER/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType/JavaSE-1.7"/>
-	<classpathentry kind="output" path="bin"/>
-</classpath>
diff --git a/ServerThreadPerClient/.gitignore b/ServerThreadPerClient/.gitignore
deleted file mode 100644
index 348c102..0000000
--- a/ServerThreadPerClient/.gitignore
+++ /dev/null
@@ -1,2 +0,0 @@
-/build
-/bin
diff --git a/ServerThreadPerClient/.project b/ServerThreadPerClient/.project
deleted file mode 100644
index e334824..0000000
--- a/ServerThreadPerClient/.project
+++ /dev/null
@@ -1,17 +0,0 @@
-<?xml version="1.0" encoding="UTF-8"?>
-<projectDescription>
-	<name>ThreadPerClientTweeterServer</name>
-	<comment></comment>
-	<projects>
-	</projects>
-	<buildSpec>
-		<buildCommand>
-			<name>org.eclipse.jdt.core.javabuilder</name>
-			<arguments>
-			</arguments>
-		</buildCommand>
-	</buildSpec>
-	<natures>
-		<nature>org.eclipse.jdt.core.javanature</nature>
-	</natures>
-</projectDescription>
diff --git a/ServerThreadPerClient/.settings/org.eclipse.core.resources.prefs b/ServerThreadPerClient/.settings/org.eclipse.core.resources.prefs
deleted file mode 100644
index 568bece..0000000
--- a/ServerThreadPerClient/.settings/org.eclipse.core.resources.prefs
+++ /dev/null
@@ -1,2 +0,0 @@
-eclipse.preferences.version=1
-encoding//src/spl/server/Server.java=UTF-8
diff --git a/ServerThreadPerClient/.settings/org.eclipse.jdt.core.prefs b/ServerThreadPerClient/.settings/org.eclipse.jdt.core.prefs
deleted file mode 100644
index 838bd9d..0000000
--- a/ServerThreadPerClient/.settings/org.eclipse.jdt.core.prefs
+++ /dev/null
@@ -1,11 +0,0 @@
-eclipse.preferences.version=1
-org.eclipse.jdt.core.compiler.codegen.inlineJsrBytecode=enabled
-org.eclipse.jdt.core.compiler.codegen.targetPlatform=1.7
-org.eclipse.jdt.core.compiler.codegen.unusedLocal=preserve
-org.eclipse.jdt.core.compiler.compliance=1.7
-org.eclipse.jdt.core.compiler.debug.lineNumber=generate
-org.eclipse.jdt.core.compiler.debug.localVariable=generate
-org.eclipse.jdt.core.compiler.debug.sourceFile=generate
-org.eclipse.jdt.core.compiler.problem.assertIdentifier=error
-org.eclipse.jdt.core.compiler.problem.enumIdentifier=error
-org.eclipse.jdt.core.compiler.source=1.7
diff --git a/ServerThreadPerClient/build.xml b/ServerThreadPerClient/build.xml
deleted file mode 100644
index b05db32..0000000
--- a/ServerThreadPerClient/build.xml
+++ /dev/null
@@ -1,28 +0,0 @@
-<project>
-
-    <target name="clean">
-        <delete dir="build"/>
-    </target>
-
-    <target name="compile" depends="clean">
-        <mkdir dir="build/classes"/>
-        <javac includeantruntime="false" srcdir="src" destdir="build/classes"/>
-    </target>
-
-    <target name="jar" depends="compile">
-        <mkdir dir="build/jar"/>
-        <jar destfile="build/jar/server.jar" basedir="build/classes">
-            <manifest>
-                <attribute name="Main-Class" value="spl.server.Main"/>
-            </manifest>
-        </jar>
-    </target>
-
-    <target name="run" depends="jar">
-        <java jar="build/jar/server.jar" fork="true">
-        	<arg value="${port}"/>
-        </java>
-        	
-    </target>
-
-</project>
\ No newline at end of file
diff --git a/ServerThreadPerClient/src/.DS_Store b/ServerThreadPerClient/src/.DS_Store
deleted file mode 100644
index ad6154b..0000000
Binary files a/ServerThreadPerClient/src/.DS_Store and /dev/null differ
diff --git a/ServerThreadPerClient/src/spl/server/ConnectionHandler.java b/ServerThreadPerClient/src/spl/server/ConnectionHandler.java
deleted file mode 100644
index 7eb8379..0000000
--- a/ServerThreadPerClient/src/spl/server/ConnectionHandler.java
+++ /dev/null
@@ -1,67 +0,0 @@
-package spl.server;
-import java.io.IOException;
-import java.net.Socket;
-import java.util.logging.Logger;
-
-import spl.server.encoding.Encoder;
-
-/**
- * Handles messages from clients
- */ 
-public class ConnectionHandler implements Runnable {
-	private final static Logger LOGGER = Logger.getGlobal();
-
-    private final Socket _socket;
-    private final Encoder _encoder;
-    private final Tokenizer _tokenizer;
-    private final MessagingProtocol _protocol;
- 
-    public ConnectionHandler(Socket s, Encoder encoder, Tokenizer tokenizer, MessagingProtocol protocol) {
-        _socket = s;
-        _encoder = encoder;
-        _tokenizer = tokenizer;
-        _protocol= protocol;
-    }
- 
-    private void init(){
-    	_protocol.setConnectionHanlder(this);
-    }
-    
-    public void run() {
-    	init();
-    	
-        while (!_protocol.shouldClose() && !_socket.isClosed()) {                          
-            try {
-                if (!_tokenizer.isAlive())
-                    _protocol.connectionTerminated();
-                else {
-                    String msg = _tokenizer.nextToken();
-                    boolean shouldDisconnect = _protocol.processMessage(msg);
-                    if (shouldDisconnect) {
-                    	_protocol.connectionTerminated();
-                    }
-                    
-                }
-            } catch (IOException e) {
-                _protocol.connectionTerminated();
-                break;
-            }
-        }
-        try {
-            _socket.close();
-        } catch (IOException ignored) {
-        }
-		LOGGER.info("[server] [event=client closed] [username='"+_protocol.getUsername()+"']");
-
-    }
-    
-    public void send(String msg) throws IOException{
-        byte[] buf = _encoder.toBytes(msg);
-        _socket.getOutputStream().write(buf, 0, buf.length);
-    }
-    
-    public void terminate() throws IOException{
-    	_socket.close();
-    	_protocol.terminate();
-    }
-}
\ No newline at end of file
diff --git a/ServerThreadPerClient/src/spl/server/Main.java b/ServerThreadPerClient/src/spl/server/Main.java
deleted file mode 100644
index 2e1378c..0000000
--- a/ServerThreadPerClient/src/spl/server/Main.java
+++ /dev/null
@@ -1,21 +0,0 @@
-package spl.server;
-
-import spl.util.MyLogger;
-
-public class Main{
-	public static void main(String[] args) {
-
-        if (args.length != 1) {
-            System.err.println("Usage: server <port>");
-            return;
-        }
-		new MyLogger().setup();
-
-		int port = Integer.parseInt(args[0]);
-		
-		//Initialize server
-        Server server = new Server(port);
-		server.start();
-    }	
-}
-
diff --git a/ServerThreadPerClient/src/spl/server/MessageFrame.java b/ServerThreadPerClient/src/spl/server/MessageFrame.java
deleted file mode 100644
index d866a3d..0000000
--- a/ServerThreadPerClient/src/spl/server/MessageFrame.java
+++ /dev/null
@@ -1,6 +0,0 @@
-package spl.server;
-
-abstract public class MessageFrame
-{
-	public abstract String getEncodedString();
-}
diff --git a/ServerThreadPerClient/src/spl/server/MessagingProtocol.java b/ServerThreadPerClient/src/spl/server/MessagingProtocol.java
deleted file mode 100644
index d751ef0..0000000
--- a/ServerThreadPerClient/src/spl/server/MessagingProtocol.java
+++ /dev/null
@@ -1,37 +0,0 @@
-package spl.server;
-
-import java.io.IOException;
-
-public interface MessagingProtocol {
-    /**
-     * Process a given message.
-     * 
-     * @return the answer to send back, or null if no answer is required
-     * @throws IOException 
-     */
-    boolean processMessage(String msg) throws IOException;
- 
-    /**
-    * determine whether the given message is the termination message
-    * @param msg the message to examine
-    * @return true if the message is the termination message, false otherwise
-    */
-    boolean isEnd(String msg);
- 
-    /**
-     * @return true if the connection should be terminated
-     */
-    boolean shouldClose();
- 
-    /**
-     * called when the connection was not gracefully shut down.
-     */
-    void connectionTerminated();
-
-	void setConnectionHanlder(ConnectionHandler connectionHandler);
-
-	void terminate();
-
-	String getUsername();
- 
-}
\ No newline at end of file
diff --git a/ServerThreadPerClient/src/spl/server/Server.java b/ServerThreadPerClient/src/spl/server/Server.java
deleted file mode 100644
index f0dcf19..0000000
--- a/ServerThreadPerClient/src/spl/server/Server.java
+++ /dev/null
@@ -1,92 +0,0 @@
-package spl.server;
-import java.io.IOException;
-import java.io.InputStreamReader;
-import java.net.Inet4Address;
-import java.net.ServerSocket;
-import java.net.Socket;
-import java.util.logging.Logger;
-
-import spl.server.encoding.Encoder;
-import spl.server.encoding.StringEncoder;
-import spl.server.protocols.stomp.StompProtocol;
-import spl.server.protocols.stomp.StompTokenizer;
- 
-/**
- * this class represents a Tweeter server
- *
- */
-public class Server {
-	private final static Logger LOGGER = Logger.getGlobal();
-
-	private int _port;
-	private UsersDatabase _usersDatabase;
-	private TopicsDatabase _entriesDatabase;
-	private boolean _shutdown;
-	private ServerSocket _socketAcceptor;
-	private Statistics _statistics;
-	
-
-	public Server(int port) {
-		_port =port;
-		_usersDatabase = new UsersDatabase();
-		_entriesDatabase = new TopicsDatabase(_usersDatabase);
-		_shutdown = false;
-		_statistics = new Statistics(_usersDatabase, _entriesDatabase);
-	}
-	
-	/**
-	 * running the server
-	 */
-	public void start(){
-		try {
-			init();
-		} catch (Exception e) {
-			LOGGER.info("[server] [event=server offline]");
-		}
-	}
-	
-	/**
-	 * Running as thread-per-client model
-	 * @throws NumberFormatException
-	 * @throws IOException
-	 */
-	private void init() throws NumberFormatException, IOException{
-	    /*The characteristic of the server concurrency model is determined by the selected implementation for the scm 
-	    instance (SingleThread, ThreadPerClient or ThreadPool - as described in the next sections)*/
-	    
-		ServerConcurrencyModel scm = new ThreadPerClient();  
-	    String encoding = "UTF-8";
-	    Encoder encoder = new StringEncoder(encoding);
-	    _socketAcceptor = new ServerSocket(_port);
-	    
-		LOGGER.info("[server] [event=server online] [protocol='tweeter/STOMP'] [IP address='"+Inet4Address.getLocalHost().getHostAddress()+"'] [port='"+_port+"'] [encoding='"+encoding+"']");
-		
-		//as long as shutdown wasn't requested
-	    while (!_shutdown) {
-	        Socket clientSocket = _socketAcceptor.accept(); //waiting to accept new connections 
-			LOGGER.info("[server] [event=client accepted] [IP address="+clientSocket.getInetAddress()+"]");
-	        
-			Tokenizer tokenizer = new StompTokenizer(new InputStreamReader(clientSocket.getInputStream(),encoder.getCharset()),'\u0000');
-	        MessagingProtocol protocol = new StompProtocol(_usersDatabase,_entriesDatabase,this,_statistics);
-	        Runnable connectionHandler = new ConnectionHandler(clientSocket, encoder, tokenizer, protocol);
-	       
-	        //handling new connection accepted
-	        scm.apply(connectionHandler);
-	    }		
-
-	}
-	
-	/**
-	 * shutting down server
-	 */
-	public void shutdown(){
-		_shutdown = true;
-		try {
-			_socketAcceptor.close();
-		} catch (IOException e) {
-			e.printStackTrace();
-		}
-	}
-	
- 
-}
\ No newline at end of file
diff --git a/ServerThreadPerClient/src/spl/server/ServerConcurrencyModel.java b/ServerThreadPerClient/src/spl/server/ServerConcurrencyModel.java
deleted file mode 100644
index 0b4c1c4..0000000
--- a/ServerThreadPerClient/src/spl/server/ServerConcurrencyModel.java
+++ /dev/null
@@ -1,4 +0,0 @@
-package spl.server;
-interface ServerConcurrencyModel {
-   public void apply (Runnable connectionHandler); 
-}
\ No newline at end of file
diff --git a/ServerThreadPerClient/src/spl/server/Statistics.java b/ServerThreadPerClient/src/spl/server/Statistics.java
deleted file mode 100644
index ce0b4c3..0000000
--- a/ServerThreadPerClient/src/spl/server/Statistics.java
+++ /dev/null
@@ -1,103 +0,0 @@
-package spl.server;
-
-import java.util.ArrayList;
-import java.util.List;
-
-/**
- * logging and generating server statistics
- */
-public class Statistics {
-	private UsersDatabase _userDB;
-	private TopicsDatabase _topicsDB;
-	private long _serverStartingTime;
-	private List<Long> _tweets;
-	private List<Long> _tweetsPassTime;
-	
-	public Statistics(UsersDatabase userDB, TopicsDatabase topicsDB) { 
-		_userDB = userDB;
-		_topicsDB = topicsDB;
-		_tweets = new ArrayList<Long>();
-		_tweetsPassTime = new ArrayList<Long>();
-		_serverStartingTime = System.currentTimeMillis();
-	}
- 	
-	/**
-	 * logging tweet recieved time
-	 */
-	public synchronized void addTweet(){
-		_tweets.add(System.currentTimeMillis());
-	}
-	
-	/**
-	 * logging time took to pass tweet to all relevant users
-	 * @param time
-	 */
-	public synchronized void addTweetPassTime(Long time){
-		_tweetsPassTime.add(time);
-	}
-	
-	/**
-	 * generating statistics about the server:
-	 * 1. max tweets per 5 seconds
-	 * 2. avg tweets per 5 seconds
-	 * 3. avg tweets pass time
-	 * 4. user with most followers
-	 * 5. user with most mentions
-	 * 6. most mentioning user
-	 * @return above
-	 */
-	public synchronized String generateStatisticsInformation(){
-		StringBuilder builder = new StringBuilder();
-		builder.append(String.format("[Max tweets per 5 secs=%d] \n", computeMaxNumberOfTweetsPer5Seconds()));
-		builder.append(String.format("[Avg. tweets per 5 secs=%.4f] \n", computeAvgNumberOfTweetsPer5Seconds()));
-		builder.append(String.format("[Avg. tweet pass time=%d] \n", computeAvgTweetPassTime()));
-		
-		StatsItem stats = new StatsItem(_userDB);
-		stats.compute();
-
-		builder.append(String.format("[most followers=%s][followers=%s] \n", stats.getMostFamousUser().getUsername() ,stats.getMostFamousUser().getNumOfFollowers()));
-		builder.append(String.format("[max mentions by others=%s] \n", stats.getMaxMentionedUser().getUsername()));
-		builder.append(String.format("[max mentioning in his tweets=%s] \n", stats.getMaxMentioningUser().getUsername()));
-		return builder.toString();
-	}
-
-	private long computeAvgTweetPassTime() {
-		Long totalTime = 0l;
-		
-		for (Long time : _tweetsPassTime) {
-			totalTime += time;
-		}
-		if(_tweetsPassTime.size() ==0 ) return 0;
-		return totalTime/_tweetsPassTime.size();
-	}
-
-	private double computeAvgNumberOfTweetsPer5Seconds() {
-		long totalRunningTime = System.currentTimeMillis() - _serverStartingTime;
-		totalRunningTime /= 1000;
-		int totalTweets = _tweets.size();
-		return (double)(((double)(totalTweets*5.0))/(double)totalRunningTime);
-	}
-
-	private int computeMaxNumberOfTweetsPer5Seconds() {
-		int maxNumOfTweetsPer5Seconds = 0;
-		long toTime;
-		for (int i = 0; i < _tweets.size(); i++) {
-			toTime = _tweets.get(i)+5000;
-			
-			int numOfTweetsPer5Seconds=0;
-			for (int j = i; j < _tweets.size(); j++) {
-				if(_tweets.get(j) <= toTime){
-					numOfTweetsPer5Seconds++;
-				}
-				else{
-					break;
-				}
-			}
-			if(numOfTweetsPer5Seconds > maxNumOfTweetsPer5Seconds){
-				maxNumOfTweetsPer5Seconds = numOfTweetsPer5Seconds;
-			}
-		}
-		
-		return maxNumOfTweetsPer5Seconds;
-	}
-}
\ No newline at end of file
diff --git a/ServerThreadPerClient/src/spl/server/StatsItem.java b/ServerThreadPerClient/src/spl/server/StatsItem.java
deleted file mode 100644
index 3757a8c..0000000
--- a/ServerThreadPerClient/src/spl/server/StatsItem.java
+++ /dev/null
@@ -1,57 +0,0 @@
-package spl.server;
-
-/**
- * utility object to help calculate server statistics
- *
- */
-public class StatsItem {
-	private UsersDatabase _usersDB;
-	
-	private User _mostFamousUser;
-	private User _maxTweetsUser;
-	private User _maxMentioningUser;
-	private User _maxMentionedUser;
-	
-	public StatsItem(UsersDatabase usersDB) {
-		_usersDB = usersDB;
-	}
-	public void compute(){
-		_mostFamousUser = computeMostFamousUser();
-		_maxTweetsUser = computeMaxTweetsUser();
-		_maxMentioningUser = computeMaxMentioningUser();
-		_maxMentionedUser = computeMaxMentionedUser();
-	}
-	
-	private User computeMostFamousUser(){
-		return _usersDB.computeMostFamousUser();
-	}
-
-	private User computeMaxTweetsUser(){
-		return _usersDB.computeMaxTweetsUser();
-	}
-	
-	private User computeMaxMentioningUser(){
-		return _usersDB.computeMaxMentioningUser();
-	}	
-	
-	private User computeMaxMentionedUser(){
-		return _usersDB.computeMaxMentionedUser();
-	}
-	
-	
-	public User getMostFamousUser() {
-		return _mostFamousUser;
-	}
-
-	public User getMaxTweetsUser() {
-		return _maxTweetsUser;
-	}
-
-	public User getMaxMentioningUser() {
-		return _maxMentioningUser;
-	}
-
-	public User getMaxMentionedUser() {
-		return _maxMentionedUser;
-	}
-}
diff --git a/ServerThreadPerClient/src/spl/server/ThreadPerClient.java b/ServerThreadPerClient/src/spl/server/ThreadPerClient.java
deleted file mode 100644
index 0ae980a..0000000
--- a/ServerThreadPerClient/src/spl/server/ThreadPerClient.java
+++ /dev/null
@@ -1,11 +0,0 @@
-package spl.server;
-
-/**
- * opening a new thread per client connection model
- *
- */
-class ThreadPerClient implements ServerConcurrencyModel {
-   public void apply (Runnable connectionHandler) {
-      new Thread(connectionHandler).start(); // NOTE HERE: Each connection handler runs in a different thread
-   }
-}
\ No newline at end of file
diff --git a/ServerThreadPerClient/src/spl/server/Tokenizer.java b/ServerThreadPerClient/src/spl/server/Tokenizer.java
deleted file mode 100644
index 05b5720..0000000
--- a/ServerThreadPerClient/src/spl/server/Tokenizer.java
+++ /dev/null
@@ -1,23 +0,0 @@
-package spl.server;
-import java.io.IOException;
- 
-/**
- * This interface care of tokenizing an input stream into protocol specific
- * messages.
- * 
- */
-public interface Tokenizer {
-    /**
-     * @return the next token, or null if no token is available. Pay attention
-     *         that a null return value does not indicate the stream is closed,
-     *         just that there is no message pending.
-     * @throws IOException to indicate that the connection is closed.
-     */
-    String nextToken() throws IOException;
- 
-    /**
-     * @return whether the input stream is still alive.
-     */
-    boolean isAlive();
-    
-}
\ No newline at end of file
diff --git a/ServerThreadPerClient/src/spl/server/Topic.java b/ServerThreadPerClient/src/spl/server/Topic.java
deleted file mode 100644
index 0411310..0000000
--- a/ServerThreadPerClient/src/spl/server/Topic.java
+++ /dev/null
@@ -1,42 +0,0 @@
-package spl.server;
-
-import java.util.Vector;
-
-/**
- * a topic which users can subscribe to. in tweeter, a username to follow
- *
- */
-public class Topic {
-	private String _topicName;
-	private Vector<User> _users;
-	
-	public Topic(String topicName) {
-		_topicName = topicName;
-		_users = new Vector<>();
-	}
-
-	public void addUser(User user) {
-		_users.add(user);
-	}
-	
-	public void removeUser(User user){
-		for (int i = 0; i < _users.size(); i++) {
-			if(user.equals(_users.get(i)) ){
-				_users.remove(i);
-				return;
-			}
-		}
-	}
-
-	public void addMessage(String message) {
-		for (User user : _users) {
-			if(!user.isServer()){
-				user.sendMessage(_topicName,message);
-			}
-		}
-	}
-
-	public String getName() {
-		return _topicName;
-	}
-}
diff --git a/ServerThreadPerClient/src/spl/server/TopicsDatabase.java b/ServerThreadPerClient/src/spl/server/TopicsDatabase.java
deleted file mode 100644
index 0ad8e73..0000000
--- a/ServerThreadPerClient/src/spl/server/TopicsDatabase.java
+++ /dev/null
@@ -1,57 +0,0 @@
-package spl.server;
-
-import java.util.Map;
-import java.util.concurrent.ConcurrentHashMap;
-
-/**
- * Database of topics ('users' in tweeter)
- *
- */
-public class TopicsDatabase {
-	private Map<String, Topic> _topics;
-	private UsersDatabase _users;
-	
-	public TopicsDatabase(UsersDatabase usersDatabase) {
-		_topics = new ConcurrentHashMap<>();
-		_users = usersDatabase;
-		
-		//[twitter] server fake username
-		addUserToTopic("server", "server"); 
-	}
-	
-	private Topic addTopic(String topicName){
-		Topic topic = new Topic(topicName);
-		_topics.put(topicName, topic);
-		return topic;
-	}
-	
-	/**
-	 * handling follow option in tweeter
-	 * @param topicName username to follow
-	 * @param username follower username
-	 * @return topic (user) to follow
-	 */
-	public Topic addUserToTopic(String topicName,String username){
-		Topic topic = _topics.get(topicName);
-		if(topic == null){ //not found
-			if( topicName == username){ //[twitter] registering new user = topic
-				topic = addTopic(username);
-			}
-			else{ //error
-				return null;
-			}
-		}
-		topic.addUser( _users.getUser(username) );
-		return topic;
-	}
-	
-	/**
-	 * add tweet to a user
-	 * @param topicName username
-	 * @param message tweet
-	 */
-	public void addMessageToTopic(String topicName, String message) {
-		Topic topic = _topics.get(topicName);
-		if(topic != null) topic.addMessage(message); //[twitter] can't tweet to a new topic
-	}
-}
diff --git a/ServerThreadPerClient/src/spl/server/User.java b/ServerThreadPerClient/src/spl/server/User.java
deleted file mode 100644
index 384c403..0000000
--- a/ServerThreadPerClient/src/spl/server/User.java
+++ /dev/null
@@ -1,203 +0,0 @@
-package spl.server;
-
-import java.io.IOException;
-import java.util.Map;
-import java.util.Map.Entry;
-import java.util.Queue;
-import java.util.Set;
-import java.util.concurrent.ConcurrentHashMap;
-import java.util.concurrent.ConcurrentLinkedQueue;
-import java.util.logging.Logger;
-
-import spl.server.protocols.stomp.frames.ServerMessageFrame;
-
-/**
- * this class represents a user
- *
- */
-public class User {
-	private final static Logger LOGGER = Logger.getGlobal();
-
-	private String _username;
-	private String _password;
-	private boolean _isLoggedIn;
-	private ConnectionHandler _connectionHanlder;
-	private Queue<MessageFrame> _myMessages; //queue of unread tweets
-	private Map<String, Topic> _myEntries; //queue of topics (users) I follow
-	
-	//stats
-	private int _numOfMentionsIwrote;
-	private int _numOfMentionsOfMe;
-	private int _numOfTweets;
-	private int _numOfFollowers;
-	
-	public User(String username, String password) {
-		_username = username;
-		_password = password;
-		_isLoggedIn = true;
-		_connectionHanlder = null;
-		_myMessages = new ConcurrentLinkedQueue<>();
-		_myEntries = new ConcurrentHashMap<String, Topic>();
-		_numOfMentionsIwrote = 0;
-		_numOfMentionsOfMe = 0;
-		_numOfTweets = 0;
-		_numOfFollowers = 0;
-	}
-	
-	public void login(ConnectionHandler connectionHandler){
-		_isLoggedIn = true;
-		_connectionHanlder = connectionHandler;
-	}
-	
-	public void logout(){
-		_isLoggedIn = false;
-		_connectionHanlder = null;
-	}
-	
-	public boolean checkPassword(String password){
-		return password.equals(_password);
-	}
-	
-	public boolean isLoggedIn(){
-		return _isLoggedIn;
-	}
-
-	public String getPw() {
-		return _password;
-	}
-
-	public void setConnectionHanlder(ConnectionHandler connectionHanlder) {
-		_connectionHanlder = connectionHanlder;
-	}
-	
-	/**
-	 * send message to user
-	 * if offline -> store it in unread queue
-	 * @param destination from
-	 * @param message tweet
-	 */
-	public void sendMessage(String destination, String message){
-		String subscriptionId = getSubscriptionId(destination);
-		if(subscriptionId.equals("not_found")) return;
-		
-		ServerMessageFrame serverMessageFrame = new ServerMessageFrame(destination, subscriptionId, message);
-		
-		if(_isLoggedIn){
-			try { //send it
-				_connectionHanlder.send(serverMessageFrame.getEncodedString());
-			} catch (IOException e) {
-				e.printStackTrace();
-			}
-		}
-		else{ //not logged in -> push to queue
-			_myMessages.add(serverMessageFrame);
-		}
-	}
-	
-	private String getSubscriptionId(String destination) {
-		Set<Entry<String, Topic>> entries = _myEntries.entrySet();
-		for (Entry<String, Topic> entry : entries)
-		{
-			if(entry.getValue().getName().equals(destination)){
-				return entry.getKey();
-			}
-		}
-		return "not_found";
-	}
-
-	/**
-	 * send unread messages to user
-	 */
-	public void sendUnreadMessages(){
-		while(!_myMessages.isEmpty()){
-			try {
-				_connectionHanlder.send(_myMessages.poll().getEncodedString());
-			} catch (IOException e) {
-				e.printStackTrace();
-			}
-		}
-	}
-	
-	@Override
-	public boolean equals(Object other) {
-		if(other instanceof User)
-			return _username.equals(((User)other)._username);
-		else{
-			return false;
-		}
-	}
-
-	/**
-	 * add a user to follow
-	 * @param topic user
-	 * @param id subscription id
-	 * @return
-	 */
-	public boolean addTopic(Topic topic, String id) {
-		Topic tmp = _myEntries.get(id);
-		if(tmp != null){
-			return true; // [twitter] allready following user
-		}
-		_myEntries.put(id, topic);
-		return false;
-	}
-
-	/**
-	 * unfollow a user
-	 * @param topic user
-	 * @param id subscription id
-	 * @return
-	 */
-	public int removeTopic(String id) {
-		Topic topic = _myEntries.get(id);
-		if(topic != null){
-			if(topic.getName() == _username){
-				return -1;
-			}
-			_myEntries.remove(id);
-			topic.removeUser(this);
-			return 0;
-		}
-		return 1;
-	}
-
-	public String getTopicName(String unsubscribeId) {
-		Topic topic = _myEntries.get(unsubscribeId);
-		if(topic == null ) return null;
-		
-		return topic.getName();
-	}
-
-	public boolean isServer() {
-		return _username.equals("server");
-	}
-
-	
-	/**
-	 * terminating a client connection
-	 */
-	public void terminate() {
-		try {
-			_connectionHanlder.terminate();
-		} catch (IOException e) {
-			e.printStackTrace();
-		}
-		LOGGER.info("[client terminated] [username="+_username+"]");
-
-	}
-
-	//statistics getters
-	public String getUsername() { return _username; }
-	public int getNumOfMentionsIwrote() { return _numOfMentionsIwrote; }
-	public int getNumOfMentionsOfMe() { return _numOfMentionsOfMe; }
-	public int getNumOfTweets() { return _numOfTweets; }
-	public int getNumOfFollowers() { return _numOfFollowers; }
-
-	//statistics getters
-	public void incrementMyTweets() { _numOfTweets++; }
-	public void incrementMentionsOfMe() { _numOfMentionsOfMe++; }
-	public void incrementMentionsIwrote(int numOfMentions) { _numOfMentionsIwrote +=numOfMentions; }
-	public void incrementFollowers() { _numOfFollowers++; }
-	public void decreaseFollowers() { _numOfFollowers--; }
-
-}
diff --git a/ServerThreadPerClient/src/spl/server/UsersDatabase.java b/ServerThreadPerClient/src/spl/server/UsersDatabase.java
deleted file mode 100644
index e7d0914..0000000
--- a/ServerThreadPerClient/src/spl/server/UsersDatabase.java
+++ /dev/null
@@ -1,242 +0,0 @@
-package spl.server;
-
-import java.util.Map;
-import java.util.Map.Entry;
-import java.util.Set;
-import java.util.concurrent.ConcurrentHashMap;
-
-/** 
- * Database of users
- *
- */
-public class UsersDatabase {
-	private Map<String, User> _db;
-	
-	public enum Status{
-	    LOGIN_SUCCESS, USER_NOT_FOUND, INVALID_PASSWORD, ALLREADY_LOGGED_IN,
-	    LOGGED_OUT_SUCCESS,NOT_LOGGED_IN
-	}
-	
-	public UsersDatabase() {
-		_db = new ConcurrentHashMap<>();
-		register("server", "h4rdP455W0rd"); //[twitter] fake username server 
-	}
-	
-	private User register(String username, String password){
-		User user = null;
-		if( !userExists(username) ){ //register a new user or return existing user
-			user = new User(username, password);
-			_db.put(username, user);
-		}
-		return user;
-	}
-	
-	private boolean userExists(String username){
-		if( _db.get( username ) == null){
-			return false;
-		}
-		return true;
-	}
-	
-	/**
-	 * login method
-	 * @param username
-	 * @param password
-	 * @param connectionHandler
-	 * @param topicsDatabase
-	 * @return INVALID_PASSWORD \ ALLREADY_LOGGED_IN \ LOGIN_SUCCESS
-	 */
-	public UsersDatabase.Status login(String username, String password, ConnectionHandler connectionHandler, TopicsDatabase topicsDatabase){
-		User user = null;
-		if( userExists(username) ){
-			user = _db.get(username);
-			if( !user.checkPassword(password) ){
-				return Status.INVALID_PASSWORD;
-			}
-			else{
-				if( user.isLoggedIn() ){
-					return Status.ALLREADY_LOGGED_IN;
-				}
-			}
-		}
-		else{ //user doesn't exists -> register
-			user = register(username, password);
-			
-			// [Twitter] - follow myself
-			Topic topic = topicsDatabase.addUserToTopic(username, username);
-			user.addTopic( topic,"-1");
-		}
-		user.login(connectionHandler);
-		return Status.LOGIN_SUCCESS;
-	}
-	
-	/**
-	 * logout
-	 * @param username
-	 * @return NOT_LOGGED_IN \ LOGGED_OUT_SUCCESS \ USER_NOT_FOUND
-	 */
-	public UsersDatabase.Status logout(String username){
-		User user = null;
-		if( userExists(username) ){
-			user = _db.get(username);
-			
-			if( !user.isLoggedIn() ){ //not logged in
-				return Status.NOT_LOGGED_IN;
-			}
-			else{
-				user.logout();
-				return Status.LOGGED_OUT_SUCCESS;
-			}
-		}
-		else{ //user doesn't exists 
-			return Status.USER_NOT_FOUND;
-		}
-	}
-
-	public User getUser(String username) {
-		return _db.get(username);
-	}
-
-	/**
-	 * printing a list of users {online}
-	 * @param online
-	 * @return
-	 */
-	public Object printUsers(boolean online) {
-		StringBuilder builder = new StringBuilder();
-
-		Set<Entry<String, User>> entries = _db.entrySet();
-		for (Entry<String, User> entry : entries)
-		{
-			if((!online || entry.getValue().isLoggedIn()) && !entry.getKey().equals("server")){
-				builder.append(String.format("%s ", entry.getKey()));
-			}
-		}
-
-		return builder.toString();
-	}
-
-	/**
-	 * go through all online users and terminates
-	 */
-	public void closeConnections() {
-		Set<Entry<String, User>> entries = _db.entrySet();
-		for (Entry<String, User> entry : entries)
-		{
-			if(entry.getValue().isLoggedIn() && !entry.getKey().equals("server")){
-				entry.getValue().terminate();
-			}
-		}		
-	}
-
-	public void incrementTweets(String username) {
-		User user = getUser(username);
-		if(user != null){
-			user.incrementMyTweets();
-		}
-		
-	}
-
-	public void incrementMentions(String username) {
-		User user = getUser(username);
-		if(user != null){
-			user.incrementMentionsOfMe();
-		}		
-	}
-
-	public void incrementMentioning(String username, int numOfMentions) {
-		User user = getUser(username);
-		if(user != null){
-			user.incrementMentionsIwrote(numOfMentions);
-		}		
-	}
-
-	public User computeMostFamousUser() {
-		User mostFamousUser=null;
-		
-		Set<Entry<String, User>> entries = _db.entrySet();
-		for (Entry<String, User> entry : entries)
-		{
-			if(entry.getKey().equals("server")) continue;
-			
-			User tmpUser = entry.getValue();
-			if(mostFamousUser == null){
-				mostFamousUser = tmpUser;
-				continue;
-			}
-			
-			if( tmpUser.getNumOfFollowers() > mostFamousUser.getNumOfFollowers() ){
-				mostFamousUser = tmpUser;
-			}
-		}		
-
-		return mostFamousUser;
-	}
-
-	public User computeMaxTweetsUser() {
-		User maxTweetsUser=null;
-		
-		Set<Entry<String, User>> entries = _db.entrySet();
-		for (Entry<String, User> entry : entries)
-		{
-			if(entry.getKey().equals("server")) continue;
-			
-			User tmpUser = entry.getValue();
-			if(maxTweetsUser == null){
-				maxTweetsUser = tmpUser;
-				continue;
-			}
-			
-			if( tmpUser.getNumOfTweets() > maxTweetsUser.getNumOfTweets() ){
-				maxTweetsUser = tmpUser;
-			}
-		}		
-
-		return maxTweetsUser;
-	}
-
-	public User computeMaxMentioningUser() {
-		User maxMentioningUser=null;
-		
-		Set<Entry<String, User>> entries = _db.entrySet();
-		for (Entry<String, User> entry : entries)
-		{
-			if(entry.getKey().equals("server")) continue;
-			
-			User tmpUser = entry.getValue();
-			if(maxMentioningUser == null){
-				maxMentioningUser = tmpUser;
-				continue;
-			}
-			
-			if( tmpUser.getNumOfMentionsIwrote() > maxMentioningUser.getNumOfMentionsIwrote() ){
-				maxMentioningUser = tmpUser;
-			}
-		}		
-
-		return maxMentioningUser;
-	}
-
-	public User computeMaxMentionedUser() {
-		User maxMentionedUser=null;
-		
-		Set<Entry<String, User>> entries = _db.entrySet();
-		for (Entry<String, User> entry : entries)
-		{
-			if(entry.getKey().equals("server")) continue;
-			
-			User tmpUser = entry.getValue();
-			if(maxMentionedUser == null){
-				maxMentionedUser = tmpUser;
-				continue;
-			}
-			
-			if( tmpUser.getNumOfMentionsOfMe() > maxMentionedUser.getNumOfMentionsOfMe() ){
-				maxMentionedUser = tmpUser;
-			}
-		}		
-
-		return maxMentionedUser;
-	}
-	
-}
diff --git a/ServerThreadPerClient/src/spl/server/encoding/Encoder.java b/ServerThreadPerClient/src/spl/server/encoding/Encoder.java
deleted file mode 100644
index a9519f0..0000000
--- a/ServerThreadPerClient/src/spl/server/encoding/Encoder.java
+++ /dev/null
@@ -1,8 +0,0 @@
-package spl.server.encoding;
-import java.nio.charset.Charset;
- 
-public interface Encoder {
-        public byte [] toBytes(String s);
-        public String fromBytes(byte [] buf);
-        public Charset getCharset();
-}
\ No newline at end of file
diff --git a/ServerThreadPerClient/src/spl/server/encoding/StringEncoder.java b/ServerThreadPerClient/src/spl/server/encoding/StringEncoder.java
deleted file mode 100644
index 15a370e..0000000
--- a/ServerThreadPerClient/src/spl/server/encoding/StringEncoder.java
+++ /dev/null
@@ -1,28 +0,0 @@
-package spl.server.encoding;
-import java.nio.charset.Charset;
- 
-public class StringEncoder implements Encoder {
- 
-        private static final String DFL_CHARSET = "UTF-8";
-        private Charset _charset;
- 
-        public StringEncoder() {
-                this(DFL_CHARSET);
-        }
- 
-        public StringEncoder(String charset) {
-                _charset = Charset.forName(charset);
-        }
- 
-        public byte [] toBytes(String s) {
-                return s.getBytes(_charset);
-        }
- 
-        public String fromBytes(byte [] buf) {
-                return new String(buf, 0, buf.length, _charset);
-        }
- 
-        public Charset getCharset()  {
-                return _charset;
-        }
-}
\ No newline at end of file
diff --git a/ServerThreadPerClient/src/spl/server/protocols/stomp/StompProtocol.java b/ServerThreadPerClient/src/spl/server/protocols/stomp/StompProtocol.java
deleted file mode 100644
index f738486..0000000
--- a/ServerThreadPerClient/src/spl/server/protocols/stomp/StompProtocol.java
+++ /dev/null
@@ -1,377 +0,0 @@
-package spl.server.protocols.stomp;
-import java.io.IOException;
-import java.util.Vector;
-import java.util.logging.Logger;
-
-import spl.server.ConnectionHandler;
-import spl.server.MessagingProtocol;
-import spl.server.Server;
-import spl.server.Statistics;
-import spl.server.Topic;
-import spl.server.TopicsDatabase;
-import spl.server.User;
-import spl.server.UsersDatabase;
-import spl.server.protocols.stomp.frames.ConnectFrame;
-import spl.server.protocols.stomp.frames.ConnectedFrame;
-import spl.server.protocols.stomp.frames.DisconnectFrame;
-import spl.server.protocols.stomp.frames.ErrorFrame;
-import spl.server.protocols.stomp.frames.ReceiptFrame;
-import spl.server.protocols.stomp.frames.SendFrame;
-import spl.server.protocols.stomp.frames.ServerMessageFrame;
-import spl.server.protocols.stomp.frames.StompFrame;
-import spl.server.protocols.stomp.frames.SubscribeFrame;
-import spl.server.protocols.stomp.frames.UnsubscribeFrame;
-public class StompProtocol implements MessagingProtocol {
-	private final static Logger LOGGER = Logger.getGlobal();
-
-    private boolean _shouldClose;
-    private int _lineNumber;
-    private UsersDatabase _usersDatabase;
-    private TopicsDatabase _topicsDatabase;
-    private String _username;
-	private ConnectionHandler _connectionHandler;
-	static private volatile long messageIdCounter=0;
-	private Server _server;
-	private Statistics _statistics;
-	
-    public StompProtocol(UsersDatabase usersDatabase, TopicsDatabase entriesDatabase, Server server, Statistics statistics) {
-        _shouldClose = false;
-        _lineNumber = 0;
-        _usersDatabase = usersDatabase;
-        _topicsDatabase = entriesDatabase;
-        _username = null;
-        _connectionHandler = null;
-        _server = server;
-        _statistics = statistics;
-        
-    }
- 
-    public boolean shouldClose() {
-        return _shouldClose;
-    }
- 
-    public void connectionTerminated() {
-        _shouldClose = true;
-    }
-    
-    protected String getValueFromArray(String[] strArr,String stringToFind){
-    	for (String string : strArr) {
-    		if(string.length() >= stringToFind.length()){
-    			if(string.substring(0,stringToFind.length()).equals(stringToFind)){
-					return string.substring(stringToFind.length()+1);
-				}
-    		}
-		}
-    	return "not_found";
-    }
-    protected String getBody(String[] strArr){
-    	for (int i = 0; i < strArr.length; i++) {
-			if(i!=0 && strArr[i].equals("")&& i+1 < strArr.length){
-				return strArr[i+1];
-			}
-			
-		}
-    	return "no_message";
-    }
-    
-    /**
-     * Processing messages recieved from clients
-     */
-    public boolean processMessage(String msg) throws IOException{
-    	
-    	//splitting to chunks
-    	String[] splited = msg.split("\n");
-    	String command = splited[0];
-    	if(command.equals("") && splited.length >1) command = splited[1];
-    	
-    	switch (command) {
-    	
-		case "CONNECT":
-			String host = getValueFromArray(splited, "host");
-			String version = getValueFromArray(splited, "accept-version");
-			String username = getValueFromArray(splited, "login");
-			String password = getValueFromArray(splited, "passcode");
-			connect( new ConnectFrame(version, host, username, password) );
-			break;
-			
-		case "DISCONNECT":
-			String receipt = getValueFromArray(splited, "receipt");
-			disconnect( new DisconnectFrame(receipt) );
-			break;
-
-		case "SUBSCRIBE":
-			String destination = getValueFromArray(splited, "destination");
-			String subscribeId = getValueFromArray(splited, "id");
-			if( subscribe( new SubscribeFrame(destination,subscribeId) )){ //[twitter] success following user
-				_usersDatabase.getUser(destination).incrementFollowers(); //user followers++
-				_connectionHandler.send(new ServerMessageFrame(_username,"-1","following "+destination).getEncodedString()); // following msg to client
-			}
-			break;
-			
-		case "UNSUBSCRIBE":
-			String unsubscribeId = getValueFromArray(splited, "id");
-			unsubscribe( new UnsubscribeFrame(unsubscribeId) );
-			break;
-
-		case "SEND":
-			String sendDestination = getValueFromArray(splited, "destination");
-			String message = getBody(splited);
-			return (send( new SendFrame(sendDestination,message) ));
-			//break;
-
-		default:
-			break;
-		}
-
-        return false;
-    }
- 
-    /**
-     * handling 'tweets' from client
-     * @param sendFrame
-     * @return true if needs to shutdown server
-     */
-    private boolean send(SendFrame sendFrame) {
-    	Long currentTime = System.currentTimeMillis(); //tweet hanlding start time
-		LOGGER.info("[<<] [request=send] [username='"+_username+"'] [destination="+sendFrame.getDestination()+"] [message="+sendFrame.getMessage()+"]");
-		String toUser = sendFrame.getDestination();
-		String message = sendFrame.getMessage();
-
-		_usersDatabase.incrementTweets(toUser); //user tweets ++
-		
-		//server control commands
-		if(toUser.equals("server")){
-	    	String[] splited = message.split(" ");
-	    	switch (splited[0]) {
-	    	
-	    	//command clients {online}
-			case "clients":
-				boolean online = false;
-				if(splited.length > 1 && splited[1].equals("online")){
-					online = true;
-				}
-				String listOfUsers = getListOfUsers(online);
-				_topicsDatabase.addMessageToTopic("server",listOfUsers);
-				break;
-				
-			//command stats -generate statistics
-			case "stats":
-				_topicsDatabase.addMessageToTopic("server",_statistics.generateStatisticsInformation());
-				break;
-			
-			//command stop - shutdown server
-			case "stop":
-				stopServer();
-				return true;
-				//break;
-
-			default:
-				break;
-			}
-		}
-		else{
-			_statistics.addTweet(); //for handling statistics
-			
-			_topicsDatabase.addMessageToTopic(toUser,message); //sending tweet to relevant user
-			handleMentionedUsers(sendFrame); //[twitter] send to attached users '@otheruser'
-			
-			_statistics.addTweetPassTime(System.currentTimeMillis()-currentTime);
-		}
-		return false;
-    }
-
-	private void stopServer() {
-		LOGGER.info("[<<] [request=stop server] [username='"+_username+"']");
-		_usersDatabase.closeConnections();
-		_server.shutdown();
-	}
-
-	private String getListOfUsers(boolean online) {
-		StringBuilder usersList = new StringBuilder();
-		usersList.append("[");
-		if(online) usersList.append("online ");
-		usersList.append("users] ");
-
-		usersList.append(_usersDatabase.printUsers(online));
-			
-		return usersList.toString();
-	}
-
-	/**
-	 * sends tweet to all users attached in the message (@user)
-	 * @param sendFrame
-	 */
-	private void handleMentionedUsers(SendFrame sendFrame) {
-		Vector<String> users = getMentionedUsers(sendFrame.getMessage());
-		int numOfMentions = 0;
-		for (String user : users) {
-			_usersDatabase.incrementMentions(user);
-			_topicsDatabase.addMessageToTopic(user,sendFrame.getMessage());
-			numOfMentions++;
-		}
-		_usersDatabase.incrementMentioning(sendFrame.getDestination(),numOfMentions);
-	}
-
-	private Vector<String> getMentionedUsers(String message) {
-		Vector<String> users = new Vector<>();
-		
-		int from=0;
-		boolean found = false;
-		for (int i = 0; i < message.length(); i++) {
-			if(!found){
-				if(message.charAt(i) == '@'){
-					from = i;
-					found = true;
-				}
-			}
-			else if(found){
-				if(message.charAt(i) == ' '){
-					users.add(message.substring(from+1,i));
-					found = false;
-				}
-				if(message.charAt(i) == '@'){
-					users.add(message.substring(from+1,i));
-					from = i;
-				}
-			}
-			
-		}
-		if(found){
-			users.add(message.substring(from+1,message.length()));
-		}
-		return users;
-	}
-
-	/**
-	 * generating a unique message id
-	 * @return id
-	 */
-	public static String generateMessageId() {
-		String id = Long.toString(StompProtocol.messageIdCounter);
-		StompProtocol.messageIdCounter++;
-		return id;
-	}
-
-	
-	private void unsubscribe(UnsubscribeFrame unsubscribeFrame) throws IOException{
-		String unsubscribeId = unsubscribeFrame.getId();
-		LOGGER.info("[<<] [request=unsubscribe] [username='"+_username+"'] [id="+unsubscribeId+"]");
-
-		User user = _usersDatabase.getUser(_username);
-		String userToUnfollow = user.getTopicName(unsubscribeId);
-		
-		int success = user.removeTopic(unsubscribeId);
-		
-		switch (success) { //[twitter] unfollow errors
-		case -1: //trying to unfollow myself
-			_connectionHandler.send(new ErrorFrame("Trying to unfollow itself", "You can not unfollow yourself").getEncodedString());
-			break;
-		case 0: //success
-			_usersDatabase.getUser(userToUnfollow).decreaseFollowers();
-			_connectionHandler.send(new ServerMessageFrame(_username,"-1","No longer following "+userToUnfollow).getEncodedString());
-			break;
-		case 1: // trying to unfollow user that im not following
-			_connectionHandler.send(new ErrorFrame("Not following this user", "").getEncodedString());
-			break;
-
-		default:
-			break;
-		}
-
-	}
-
-	private boolean subscribe(SubscribeFrame subscribeFrame) throws IOException {
-		boolean success = true;
-		LOGGER.info("[<<] [request=subscribe] [username='"+_username+"'] [topic="+subscribeFrame.getDestination()+"] [id="+subscribeFrame.getId()+"]");
-		
-		Topic topic = _topicsDatabase.addUserToTopic(subscribeFrame.getDestination(), _username);
-		
-		if(topic == null){ //[twitter] username not found!
-			_connectionHandler.send(new ErrorFrame("Wrong username", "").getEncodedString());
-			success = false;
-		}
-		
-		boolean allreadyFollowing = _usersDatabase.getUser(_username).addTopic( topic,subscribeFrame.getId() );
-		
-		if(allreadyFollowing){ //[twitter] already following user
-			_connectionHandler.send(new ErrorFrame("Already following username", "").getEncodedString());
-			success = false;
-		}
-		return success;
-	}
-
-	public boolean isEnd(String msg) {
-		//unused
-        return msg.equalsIgnoreCase("bye");
-    }
-
-	/**
-	 * hanlding connect request from client
-	 * @param connectFrame
-	 * @throws IOException
-	 */
-	private void connect(ConnectFrame connectFrame) throws IOException{
-		LOGGER.info("[<<] [request=login] [username='"+connectFrame.getUsername()+"'] [password="+connectFrame.getPassword()+"]");
-
-		StompFrame ans = null;
-		UsersDatabase.Status status = _usersDatabase.login(connectFrame.getUsername(), connectFrame.getPassword(),_connectionHandler,_topicsDatabase);
-		
-		switch (status) {
-		
-		case ALLREADY_LOGGED_IN:
-			LOGGER.info("[error] [type=login failed] [username='"+_username+"'] [reason=user already logged in]");
-
-			ans = new ErrorFrame("User allready logged in","");
-			_connectionHandler.send(ans.getEncodedString());
-			break;
-		case INVALID_PASSWORD:
-			LOGGER.info("[error] [type=login failed] [username='"+_username+"'] [reason=wrong password]");
-			ans = new ErrorFrame("Wrong password","");
-			_connectionHandler.send(ans.getEncodedString());
-			break;
-		case LOGIN_SUCCESS:
-			_username = connectFrame.getUsername();
-			LOGGER.info("[info] [login success] [username='"+_username+"']");
-			ans = new ConnectedFrame();
-			_connectionHandler.send(ans.getEncodedString());
-			_usersDatabase.getUser( connectFrame.getUsername() ).sendUnreadMessages(); //sending unread tweets to user
-			break;
-
-		default:
-			break;
-		}
-	}
-	
-	private void disconnect(DisconnectFrame disconnectFrame) throws IOException {
-		LOGGER.info("[<<] [request=disconnect] [username='"+_username+"'][receipt="+disconnectFrame.getReceipt()+"]");
-		StompFrame ans = null;
-		if(_username != null){
-			_usersDatabase.logout(_username);
-			ans = new ReceiptFrame(disconnectFrame.getReceipt());
-		}
-		else{
-			LOGGER.info("[error] [logout failed] [username='"+_username+"'] [reason=user not logged in");
-
-			ans = new ErrorFrame("User not logged in","");
-		}
-		_connectionHandler.send(ans.getEncodedString());
-	}
-
-	@Override
-	public void setConnectionHanlder(ConnectionHandler connectionHandler) {
-		_connectionHandler = connectionHandler;
-		
-	}
-
-	@Override
-	public void terminate() {
-		_shouldClose = true;
-		
-	}
-
-	@Override
-	public String getUsername() {
-		return _username;
-	}
-
-}
\ No newline at end of file
diff --git a/ServerThreadPerClient/src/spl/server/protocols/stomp/StompTokenizer.java b/ServerThreadPerClient/src/spl/server/protocols/stomp/StompTokenizer.java
deleted file mode 100644
index 2fba31e..0000000
--- a/ServerThreadPerClient/src/spl/server/protocols/stomp/StompTokenizer.java
+++ /dev/null
@@ -1,49 +0,0 @@
-package spl.server.protocols.stomp;
-
-import java.io.IOException;
-import java.io.InputStreamReader;
-
-import spl.server.Tokenizer;
-public class StompTokenizer implements Tokenizer {
- 
-    public final char _delimiter;
-    private final InputStreamReader _isr;
-    private boolean _closed;
- 
-    public StompTokenizer (InputStreamReader isr, char delimiter) {
-        _delimiter = delimiter;
-        _isr = isr;
-        _closed = false;
-    }
- 
-    public String nextToken() throws IOException {
-        if (!isAlive())
-            throw new IOException("tokenizer is closed");
-        String ans = null;
-        try {
-            // we are using a blocking stream, so we should always end up
-            // with a message, or with an exception indicating an error in
-            // the connection.
-            int c;
-            StringBuilder sb = new StringBuilder();
-            // read char by char, until encountering the framing character, or
-            // the connection is closed.
-            while ((c = _isr.read()) != -1) {
-                if (c == _delimiter)
-                    break;
-                else
-                    sb.append((char) c);
-            }
-            ans = sb.toString();
-        } catch (IOException e) {
-            _closed = true;
-            throw new IOException("Connection is dead");
-        }
-        return ans;
-    }
- 
-    public boolean isAlive() {
-        return !_closed;
-    }
- 
-}
\ No newline at end of file
diff --git a/ServerThreadPerClient/src/spl/server/protocols/stomp/frames/ConnectFrame.java b/ServerThreadPerClient/src/spl/server/protocols/stomp/frames/ConnectFrame.java
deleted file mode 100644
index 16c6810..0000000
--- a/ServerThreadPerClient/src/spl/server/protocols/stomp/frames/ConnectFrame.java
+++ /dev/null
@@ -1,37 +0,0 @@
-package spl.server.protocols.stomp.frames;
-
-import java.util.HashMap;
-import java.util.Map;
-
-
-public class ConnectFrame extends StompFrame {
-	private String _hostIP;
-	private String _username;
-	private String _password;
-	
-	public ConnectFrame(String version,String host, String username,String password) {
-		_hostIP = host;
-		_username = username;
-		_password = password;
-	}
-
-
-	@Override
-	public String getEncodedString() {
-		Map<String, String> map = new HashMap<>();
-		map.put("accept-version","1.2");
-		map.put("host",_hostIP);
-		map.put("login",_username);
-		map.put("passcode",_password);
-
-		return makeFrame("CONNECT", map, "");
-	}
-
-	public String getPassword() {
-		return _password;
-	}
-	public String getUsername() {
-		return _username;
-	}
-
-}
diff --git a/ServerThreadPerClient/src/spl/server/protocols/stomp/frames/ConnectedFrame.java b/ServerThreadPerClient/src/spl/server/protocols/stomp/frames/ConnectedFrame.java
deleted file mode 100644
index 821b22d..0000000
--- a/ServerThreadPerClient/src/spl/server/protocols/stomp/frames/ConnectedFrame.java
+++ /dev/null
@@ -1,17 +0,0 @@
-package spl.server.protocols.stomp.frames;
-
-import java.util.HashMap;
-import java.util.Map;
-
-public class ConnectedFrame extends StompFrame {
-
-	@Override
-	public String getEncodedString() {
-		Map<String, String> map = new HashMap<>();
-		map.put("version","1.2");
-
-		return makeFrame("CONNECTED", map, "");
-	}
-
-
-}
diff --git a/ServerThreadPerClient/src/spl/server/protocols/stomp/frames/DisconnectFrame.java b/ServerThreadPerClient/src/spl/server/protocols/stomp/frames/DisconnectFrame.java
deleted file mode 100644
index 8321910..0000000
--- a/ServerThreadPerClient/src/spl/server/protocols/stomp/frames/DisconnectFrame.java
+++ /dev/null
@@ -1,26 +0,0 @@
-package spl.server.protocols.stomp.frames;
-
-import java.util.HashMap;
-import java.util.Map;
-
-public class DisconnectFrame extends StompFrame {
-	private String _receipt;
-	
-	public DisconnectFrame(String receipt) {
-		_receipt = receipt;
-	}
-	@Override
-	public String getEncodedString() {
-		Map<String, String> map = new HashMap<>();
-		map.put("receipt",_receipt);
-
-		return makeFrame("DISCONNECT", map, "");
-	}
-	
-	public String getReceipt() {
-		return _receipt;
-	}
-	
-	
-
-}
diff --git a/ServerThreadPerClient/src/spl/server/protocols/stomp/frames/ErrorFrame.java b/ServerThreadPerClient/src/spl/server/protocols/stomp/frames/ErrorFrame.java
deleted file mode 100644
index 830fdcf..0000000
--- a/ServerThreadPerClient/src/spl/server/protocols/stomp/frames/ErrorFrame.java
+++ /dev/null
@@ -1,23 +0,0 @@
-package spl.server.protocols.stomp.frames;
-
-import java.util.HashMap;
-import java.util.Map;
-
-public class ErrorFrame extends StompFrame {
-
-	private String _shortDescription;
-	private String _body;
-	public ErrorFrame(String shortDescription ,String body) {
-		_shortDescription = shortDescription;
-		_body = body;
-	}
-	@Override
-	public String getEncodedString() {
-		Map<String, String> map = new HashMap<>();
-		map.put("message",_shortDescription);
-
-		return makeFrame("ERROR", map, _body);
-	}
-
-
-}
diff --git a/ServerThreadPerClient/src/spl/server/protocols/stomp/frames/ReceiptFrame.java b/ServerThreadPerClient/src/spl/server/protocols/stomp/frames/ReceiptFrame.java
deleted file mode 100644
index c8b9c31..0000000
--- a/ServerThreadPerClient/src/spl/server/protocols/stomp/frames/ReceiptFrame.java
+++ /dev/null
@@ -1,25 +0,0 @@
-package spl.server.protocols.stomp.frames;
-
-import java.util.HashMap;
-import java.util.Map;
-
-public class ReceiptFrame extends StompFrame {
-	private String _receipt;
-
-	public ReceiptFrame(String receipt) {
-		_receipt = receipt;
-	}
-
-	@Override
-	public String getEncodedString() {
-		Map<String, String> map = new HashMap<>();
-		map.put("receipt-id", _receipt);
-
-		return makeFrame("RECEIPT", map, "");
-	}
-
-	public String getReceipt() {
-		return _receipt;
-	}
-
-}
diff --git a/ServerThreadPerClient/src/spl/server/protocols/stomp/frames/SendFrame.java b/ServerThreadPerClient/src/spl/server/protocols/stomp/frames/SendFrame.java
deleted file mode 100644
index 622f3e5..0000000
--- a/ServerThreadPerClient/src/spl/server/protocols/stomp/frames/SendFrame.java
+++ /dev/null
@@ -1,31 +0,0 @@
-package spl.server.protocols.stomp.frames;
-
-import java.util.HashMap;
-import java.util.Map;
-
-public class SendFrame extends StompFrame {
-	private String _destination;
-	private String _message;
-	
-	public SendFrame(String destination,String message) {
-		_destination = destination;
-		_message = message;
-	}
-	
-	@Override
-	public String getEncodedString() {
-		Map<String, String> map = new HashMap<>();
-		map.put("destination",_destination);
-
-		return makeFrame("SEND", map, _message);
-	}
-	
-	public String getDestination(){
-		return _destination;
-	}
-	
-	public String getMessage(){
-		return _message;
-	}
-
-}
diff --git a/ServerThreadPerClient/src/spl/server/protocols/stomp/frames/ServerMessageFrame.java b/ServerThreadPerClient/src/spl/server/protocols/stomp/frames/ServerMessageFrame.java
deleted file mode 100644
index 7088b8c..0000000
--- a/ServerThreadPerClient/src/spl/server/protocols/stomp/frames/ServerMessageFrame.java
+++ /dev/null
@@ -1,39 +0,0 @@
-package spl.server.protocols.stomp.frames;
-
-import java.text.SimpleDateFormat;
-import java.util.Date;
-import java.util.HashMap;
-import java.util.Map;
-
-import spl.server.protocols.stomp.StompProtocol;
-
-public class ServerMessageFrame extends StompFrame {
-	private String _destination;
-	private String _subscriptionId;
-	private String _messageId;
-	private String _body;
-	private String _time;
-	public ServerMessageFrame(String destination,String subscriptionId,String body) {
-		_destination = destination;
-		_messageId = StompProtocol.generateMessageId();
-		_subscriptionId = subscriptionId;
-		_body=body;
-		_time = new SimpleDateFormat("dd.MM.yyyy HH:mm:ss").format(new Date());
-	}
-	
-	public void setSubscriptionId(String id){
-		_subscriptionId = id;
-	}
-	
-	@Override
-	public String getEncodedString() {
-		Map<String, String> map = new HashMap<>();
-		map.put("destination",_destination);
-		map.put("subscription",_subscriptionId);
-		map.put("message-id",_messageId);
-		map.put("time",_time);
-
-		return makeFrame("MESSAGE", map, _body);
-	}
-
-}
diff --git a/ServerThreadPerClient/src/spl/server/protocols/stomp/frames/StompFrame.java b/ServerThreadPerClient/src/spl/server/protocols/stomp/frames/StompFrame.java
deleted file mode 100644
index e37c3b6..0000000
--- a/ServerThreadPerClient/src/spl/server/protocols/stomp/frames/StompFrame.java
+++ /dev/null
@@ -1,39 +0,0 @@
-package spl.server.protocols.stomp.frames;
-
-import java.util.Map;
-import java.util.Map.Entry;
-import java.util.Set;
-
-import spl.server.MessageFrame;
-
-public abstract class StompFrame extends MessageFrame
-{	
-	/**
-	 * return a string represents a valid STOMP syntax
-	 * @param header
-	 * @param map
-	 * @param body
-	 * @return
-	 */
-	protected String makeFrame(String header, Map<String, String> map, String body)
-	{
-		StringBuilder builder = new StringBuilder();
-		builder.append(header);
-		builder.append("\n");
-		Set<Entry<String, String>> entries = map.entrySet();
-		for (Entry<String, String> entry : entries)
-		{
-			builder.append(entry.getKey());
-			builder.append(":");
-			builder.append(entry.getValue());
-			builder.append("\n");
-		}
-		builder.append("\n");
-		builder.append("\n");
-		builder.append(body);
-		builder.append("\u0000");
-		builder.append("\n");
-		return builder.toString();
-	}
-
-}
diff --git a/ServerThreadPerClient/src/spl/server/protocols/stomp/frames/SubscribeFrame.java b/ServerThreadPerClient/src/spl/server/protocols/stomp/frames/SubscribeFrame.java
deleted file mode 100644
index a82f682..0000000
--- a/ServerThreadPerClient/src/spl/server/protocols/stomp/frames/SubscribeFrame.java
+++ /dev/null
@@ -1,31 +0,0 @@
-package spl.server.protocols.stomp.frames;
-
-import java.util.HashMap;
-import java.util.Map;
-
-public class SubscribeFrame extends StompFrame {
-	private String _destination;
-	private String _id;
-	public SubscribeFrame(String destination, String id) {
-		_destination = destination;
-		_id = id;
-	}
-
-	public String getId(){
-		return _id;
-	}
-	
-	public String getDestination(){
-		return _destination;
-	}
-
-	@Override
-	public String getEncodedString() {
-		Map<String, String> map = new HashMap<>();
-		map.put("destination",_destination);
-		map.put("id",_id);
-
-		return makeFrame("SUBSCRIBE", map, "");
-	}
-
-}
diff --git a/ServerThreadPerClient/src/spl/server/protocols/stomp/frames/UnsubscribeFrame.java b/ServerThreadPerClient/src/spl/server/protocols/stomp/frames/UnsubscribeFrame.java
deleted file mode 100644
index 4089cb0..0000000
--- a/ServerThreadPerClient/src/spl/server/protocols/stomp/frames/UnsubscribeFrame.java
+++ /dev/null
@@ -1,26 +0,0 @@
-package spl.server.protocols.stomp.frames;
-
-import java.util.HashMap;
-import java.util.Map;
-
-
-public class UnsubscribeFrame extends StompFrame {
-
-	private String _id;
-	public UnsubscribeFrame(String id) {
-		_id = id;
-	}
-
-	public String getId(){
-		return _id;
-	}
-	
-	@Override
-	public String getEncodedString() {
-		Map<String, String> map = new HashMap<>();
-		map.put("id",_id);
-
-		return makeFrame("UNSUBSCRIBE", map, "");
-	}
-
-}
diff --git a/ServerThreadPerClient/src/spl/util/MyFormatter.java b/ServerThreadPerClient/src/spl/util/MyFormatter.java
deleted file mode 100644
index e6a61ba..0000000
--- a/ServerThreadPerClient/src/spl/util/MyFormatter.java
+++ /dev/null
@@ -1,26 +0,0 @@
-package spl.util;
-
-import java.text.SimpleDateFormat;
-import java.util.Date;
-import java.util.logging.Formatter;
-import java.util.logging.LogRecord;
-
-
-/**
- * Custom format for logger
- *
- */
-public class MyFormatter extends Formatter
-{
-	@Override
-	public String format(LogRecord record)
-	{
-		SimpleDateFormat sdf = new SimpleDateFormat("HH:mm:ss");
-		return String.format("%s %s\n", 
-					sdf.format(new Date(record.getMillis())), 
-					record.getMessage()
-					);
-
-	}
-
-}
diff --git a/ServerThreadPerClient/src/spl/util/MyLogger.java b/ServerThreadPerClient/src/spl/util/MyLogger.java
deleted file mode 100644
index d235107..0000000
--- a/ServerThreadPerClient/src/spl/util/MyLogger.java
+++ /dev/null
@@ -1,42 +0,0 @@
-package spl.util;
-
-import java.util.logging.ConsoleHandler;
-import java.util.logging.FileHandler;
-import java.util.logging.Formatter;
-import java.util.logging.Handler;
-import java.util.logging.Level;
-import java.util.logging.Logger;
-
-/**
- * Logger Utility
- */
-public class MyLogger
-{
-
-	public void setup()
-	{
-		Logger logger = Logger.getGlobal();
-		
-		logger.setLevel(Level.ALL);
-		
-		logger.setUseParentHandlers(false);
-		Formatter formatter = new MyFormatter();
-		
-		Handler consoleHandler = new ConsoleHandler();
-		
-		consoleHandler.setFormatter(formatter);
-		logger.addHandler(consoleHandler);
-
-		try
-		{
-			Handler fileHandler = new FileHandler("log.log");
-			fileHandler.setFormatter(formatter);
-			logger.addHandler(fileHandler);
-		} 
-		catch (Exception e)
-		{
-			logger.warning("could not create file logger");
-		}
-
-	}
-}
diff --git a/StompClient/.cproject b/StompClient/.cproject
deleted file mode 100644
index a2f2d0b..0000000
--- a/StompClient/.cproject
+++ /dev/null
@@ -1,134 +0,0 @@
-<?xml version="1.0" encoding="UTF-8" standalone="no"?>
-<?fileVersion 4.0.0?>
-
-<cproject storage_type_id="org.eclipse.cdt.core.XmlProjectDescriptionStorage">
-	<storageModule moduleId="org.eclipse.cdt.core.settings">
-		<cconfiguration id="cdt.managedbuild.config.gnu.exe.debug.1052069066">
-			<storageModule buildSystemId="org.eclipse.cdt.managedbuilder.core.configurationDataProvider" id="cdt.managedbuild.config.gnu.exe.debug.1052069066" moduleId="org.eclipse.cdt.core.settings" name="Debug">
-				<externalSettings/>
-				<extensions>
-					<extension id="org.eclipse.cdt.core.ELF" point="org.eclipse.cdt.core.BinaryParser"/>
-					<extension id="org.eclipse.cdt.core.GmakeErrorParser" point="org.eclipse.cdt.core.ErrorParser"/>
-					<extension id="org.eclipse.cdt.core.CWDLocator" point="org.eclipse.cdt.core.ErrorParser"/>
-					<extension id="org.eclipse.cdt.core.GCCErrorParser" point="org.eclipse.cdt.core.ErrorParser"/>
-					<extension id="org.eclipse.cdt.core.GASErrorParser" point="org.eclipse.cdt.core.ErrorParser"/>
-					<extension id="org.eclipse.cdt.core.GLDErrorParser" point="org.eclipse.cdt.core.ErrorParser"/>
-				</extensions>
-			</storageModule>
-			<storageModule moduleId="cdtBuildSystem" version="4.0.0">
-				<configuration artifactName="${ProjName}" buildArtefactType="org.eclipse.cdt.build.core.buildArtefactType.exe" buildProperties="org.eclipse.cdt.build.core.buildType=org.eclipse.cdt.build.core.buildType.debug,org.eclipse.cdt.build.core.buildArtefactType=org.eclipse.cdt.build.core.buildArtefactType.exe" cleanCommand="rm -rf" description="" id="cdt.managedbuild.config.gnu.exe.debug.1052069066" name="Debug" parent="cdt.managedbuild.config.gnu.exe.debug">
-					<folderInfo id="cdt.managedbuild.config.gnu.exe.debug.1052069066." name="/" resourcePath="">
-						<toolChain id="cdt.managedbuild.toolchain.gnu.exe.debug.1768045331" name="Linux GCC" superClass="cdt.managedbuild.toolchain.gnu.exe.debug">
-							<targetPlatform id="cdt.managedbuild.target.gnu.platform.exe.debug.1568867518" name="Debug Platform" superClass="cdt.managedbuild.target.gnu.platform.exe.debug"/>
-							<builder buildPath="${workspace_loc:/StompClient/Debug}" id="cdt.managedbuild.target.gnu.builder.exe.debug.1942164918" keepEnvironmentInBuildfile="false" managedBuildOn="true" name="Gnu Make Builder" superClass="cdt.managedbuild.target.gnu.builder.exe.debug"/>
-							<tool id="cdt.managedbuild.tool.gnu.archiver.base.1013081615" name="GCC Archiver" superClass="cdt.managedbuild.tool.gnu.archiver.base"/>
-							<tool id="cdt.managedbuild.tool.gnu.cpp.compiler.exe.debug.1766723468" name="GCC C++ Compiler" superClass="cdt.managedbuild.tool.gnu.cpp.compiler.exe.debug">
-								<option id="gnu.cpp.compiler.exe.debug.option.optimization.level.1082532161" name="Optimization Level" superClass="gnu.cpp.compiler.exe.debug.option.optimization.level" value="gnu.cpp.compiler.optimization.level.none" valueType="enumerated"/>
-								<option id="gnu.cpp.compiler.exe.debug.option.debugging.level.1284715940" name="Debug Level" superClass="gnu.cpp.compiler.exe.debug.option.debugging.level" value="gnu.cpp.compiler.debugging.level.max" valueType="enumerated"/>
-								<option id="gnu.cpp.compiler.option.include.paths.7785359" name="Include paths (-I)" superClass="gnu.cpp.compiler.option.include.paths" valueType="includePath">
-									<listOptionValue builtIn="false" value="/usr/include"/>
-								</option>
-								<inputType id="cdt.managedbuild.tool.gnu.cpp.compiler.input.1205628680" superClass="cdt.managedbuild.tool.gnu.cpp.compiler.input"/>
-							</tool>
-							<tool id="cdt.managedbuild.tool.gnu.c.compiler.exe.debug.1586185561" name="GCC C Compiler" superClass="cdt.managedbuild.tool.gnu.c.compiler.exe.debug">
-								<option defaultValue="gnu.c.optimization.level.none" id="gnu.c.compiler.exe.debug.option.optimization.level.437170192" name="Optimization Level" superClass="gnu.c.compiler.exe.debug.option.optimization.level" valueType="enumerated"/>
-								<option id="gnu.c.compiler.exe.debug.option.debugging.level.1470362608" name="Debug Level" superClass="gnu.c.compiler.exe.debug.option.debugging.level" value="gnu.c.debugging.level.max" valueType="enumerated"/>
-								<inputType id="cdt.managedbuild.tool.gnu.c.compiler.input.1325762803" superClass="cdt.managedbuild.tool.gnu.c.compiler.input"/>
-							</tool>
-							<tool id="cdt.managedbuild.tool.gnu.c.linker.exe.debug.1842186134" name="GCC C Linker" superClass="cdt.managedbuild.tool.gnu.c.linker.exe.debug"/>
-							<tool id="cdt.managedbuild.tool.gnu.cpp.linker.exe.debug.2135423064" name="GCC C++ Linker" superClass="cdt.managedbuild.tool.gnu.cpp.linker.exe.debug">
-								<option id="gnu.cpp.link.option.paths.352817499" name="Library search path (-L)" superClass="gnu.cpp.link.option.paths" valueType="libPaths">
-									<listOptionValue builtIn="false" value="/usr/lib"/>
-								</option>
-								<option id="gnu.cpp.link.option.libs.1340539280" name="Libraries (-l)" superClass="gnu.cpp.link.option.libs" valueType="libs">
-									<listOptionValue builtIn="false" value="boost_iostreams"/>
-									<listOptionValue builtIn="false" value="pthread"/>
-									<listOptionValue builtIn="false" value="boost_thread"/>
-									<listOptionValue builtIn="false" value="boost_system"/>
-								</option>
-								<inputType id="cdt.managedbuild.tool.gnu.cpp.linker.input.474715913" superClass="cdt.managedbuild.tool.gnu.cpp.linker.input">
-									<additionalInput kind="additionalinputdependency" paths="$(USER_OBJS)"/>
-									<additionalInput kind="additionalinput" paths="$(LIBS)"/>
-								</inputType>
-							</tool>
-							<tool id="cdt.managedbuild.tool.gnu.assembler.exe.debug.1990688953" name="GCC Assembler" superClass="cdt.managedbuild.tool.gnu.assembler.exe.debug">
-								<inputType id="cdt.managedbuild.tool.gnu.assembler.input.1870782859" superClass="cdt.managedbuild.tool.gnu.assembler.input"/>
-							</tool>
-						</toolChain>
-					</folderInfo>
-					<sourceEntries>
-						<entry flags="VALUE_WORKSPACE_PATH|RESOLVED" kind="sourcePath" name="src"/>
-					</sourceEntries>
-				</configuration>
-			</storageModule>
-			<storageModule moduleId="org.eclipse.cdt.core.externalSettings"/>
-		</cconfiguration>
-		<cconfiguration id="cdt.managedbuild.config.gnu.exe.release.805906070">
-			<storageModule buildSystemId="org.eclipse.cdt.managedbuilder.core.configurationDataProvider" id="cdt.managedbuild.config.gnu.exe.release.805906070" moduleId="org.eclipse.cdt.core.settings" name="Release">
-				<externalSettings/>
-				<extensions>
-					<extension id="org.eclipse.cdt.core.ELF" point="org.eclipse.cdt.core.BinaryParser"/>
-					<extension id="org.eclipse.cdt.core.GmakeErrorParser" point="org.eclipse.cdt.core.ErrorParser"/>
-					<extension id="org.eclipse.cdt.core.CWDLocator" point="org.eclipse.cdt.core.ErrorParser"/>
-					<extension id="org.eclipse.cdt.core.GCCErrorParser" point="org.eclipse.cdt.core.ErrorParser"/>
-					<extension id="org.eclipse.cdt.core.GASErrorParser" point="org.eclipse.cdt.core.ErrorParser"/>
-					<extension id="org.eclipse.cdt.core.GLDErrorParser" point="org.eclipse.cdt.core.ErrorParser"/>
-				</extensions>
-			</storageModule>
-			<storageModule moduleId="cdtBuildSystem" version="4.0.0">
-				<configuration artifactName="${ProjName}" buildArtefactType="org.eclipse.cdt.build.core.buildArtefactType.exe" buildProperties="org.eclipse.cdt.build.core.buildType=org.eclipse.cdt.build.core.buildType.release,org.eclipse.cdt.build.core.buildArtefactType=org.eclipse.cdt.build.core.buildArtefactType.exe" cleanCommand="rm -rf" description="" id="cdt.managedbuild.config.gnu.exe.release.805906070" name="Release" parent="cdt.managedbuild.config.gnu.exe.release">
-					<folderInfo id="cdt.managedbuild.config.gnu.exe.release.805906070." name="/" resourcePath="">
-						<toolChain id="cdt.managedbuild.toolchain.gnu.exe.release.380406057" name="Linux GCC" superClass="cdt.managedbuild.toolchain.gnu.exe.release">
-							<targetPlatform id="cdt.managedbuild.target.gnu.platform.exe.release.1088127057" name="Debug Platform" superClass="cdt.managedbuild.target.gnu.platform.exe.release"/>
-							<builder buildPath="${workspace_loc:/StompClient/Release}" id="cdt.managedbuild.target.gnu.builder.exe.release.644380353" keepEnvironmentInBuildfile="false" managedBuildOn="true" name="Gnu Make Builder" superClass="cdt.managedbuild.target.gnu.builder.exe.release"/>
-							<tool id="cdt.managedbuild.tool.gnu.archiver.base.931649258" name="GCC Archiver" superClass="cdt.managedbuild.tool.gnu.archiver.base"/>
-							<tool id="cdt.managedbuild.tool.gnu.cpp.compiler.exe.release.915551392" name="GCC C++ Compiler" superClass="cdt.managedbuild.tool.gnu.cpp.compiler.exe.release">
-								<option id="gnu.cpp.compiler.exe.release.option.optimization.level.1690156786" name="Optimization Level" superClass="gnu.cpp.compiler.exe.release.option.optimization.level" value="gnu.cpp.compiler.optimization.level.most" valueType="enumerated"/>
-								<option id="gnu.cpp.compiler.exe.release.option.debugging.level.1084749358" name="Debug Level" superClass="gnu.cpp.compiler.exe.release.option.debugging.level" value="gnu.cpp.compiler.debugging.level.none" valueType="enumerated"/>
-								<inputType id="cdt.managedbuild.tool.gnu.cpp.compiler.input.645422173" superClass="cdt.managedbuild.tool.gnu.cpp.compiler.input"/>
-							</tool>
-							<tool id="cdt.managedbuild.tool.gnu.c.compiler.exe.release.588718995" name="GCC C Compiler" superClass="cdt.managedbuild.tool.gnu.c.compiler.exe.release">
-								<option defaultValue="gnu.c.optimization.level.most" id="gnu.c.compiler.exe.release.option.optimization.level.95313616" name="Optimization Level" superClass="gnu.c.compiler.exe.release.option.optimization.level" valueType="enumerated"/>
-								<option id="gnu.c.compiler.exe.release.option.debugging.level.375967182" name="Debug Level" superClass="gnu.c.compiler.exe.release.option.debugging.level" value="gnu.c.debugging.level.none" valueType="enumerated"/>
-								<inputType id="cdt.managedbuild.tool.gnu.c.compiler.input.2118094899" superClass="cdt.managedbuild.tool.gnu.c.compiler.input"/>
-							</tool>
-							<tool id="cdt.managedbuild.tool.gnu.c.linker.exe.release.1509148605" name="GCC C Linker" superClass="cdt.managedbuild.tool.gnu.c.linker.exe.release"/>
-							<tool id="cdt.managedbuild.tool.gnu.cpp.linker.exe.release.131046257" name="GCC C++ Linker" superClass="cdt.managedbuild.tool.gnu.cpp.linker.exe.release">
-								<inputType id="cdt.managedbuild.tool.gnu.cpp.linker.input.691094106" superClass="cdt.managedbuild.tool.gnu.cpp.linker.input">
-									<additionalInput kind="additionalinputdependency" paths="$(USER_OBJS)"/>
-									<additionalInput kind="additionalinput" paths="$(LIBS)"/>
-								</inputType>
-							</tool>
-							<tool id="cdt.managedbuild.tool.gnu.assembler.exe.release.299740645" name="GCC Assembler" superClass="cdt.managedbuild.tool.gnu.assembler.exe.release">
-								<inputType id="cdt.managedbuild.tool.gnu.assembler.input.778617081" superClass="cdt.managedbuild.tool.gnu.assembler.input"/>
-							</tool>
-						</toolChain>
-					</folderInfo>
-					<sourceEntries>
-						<entry flags="VALUE_WORKSPACE_PATH|RESOLVED" kind="sourcePath" name="src"/>
-					</sourceEntries>
-				</configuration>
-			</storageModule>
-			<storageModule moduleId="org.eclipse.cdt.core.externalSettings"/>
-		</cconfiguration>
-	</storageModule>
-	<storageModule moduleId="cdtBuildSystem" version="4.0.0">
-		<project id="StompClient.cdt.managedbuild.target.gnu.exe.516128734" name="Executable" projectType="cdt.managedbuild.target.gnu.exe"/>
-	</storageModule>
-	<storageModule moduleId="scannerConfiguration">
-		<autodiscovery enabled="true" problemReportingEnabled="true" selectedProfileId=""/>
-		<scannerConfigBuildInfo instanceId="cdt.managedbuild.config.gnu.exe.debug.1052069066;cdt.managedbuild.config.gnu.exe.debug.1052069066.;cdt.managedbuild.tool.gnu.c.compiler.exe.debug.1586185561;cdt.managedbuild.tool.gnu.c.compiler.input.1325762803">
-			<autodiscovery enabled="true" problemReportingEnabled="true" selectedProfileId="org.eclipse.cdt.managedbuilder.core.GCCManagedMakePerProjectProfileC"/>
-		</scannerConfigBuildInfo>
-		<scannerConfigBuildInfo instanceId="cdt.managedbuild.config.gnu.exe.release.805906070;cdt.managedbuild.config.gnu.exe.release.805906070.;cdt.managedbuild.tool.gnu.cpp.compiler.exe.release.915551392;cdt.managedbuild.tool.gnu.cpp.compiler.input.645422173">
-			<autodiscovery enabled="true" problemReportingEnabled="true" selectedProfileId="org.eclipse.cdt.managedbuilder.core.GCCManagedMakePerProjectProfileCPP"/>
-		</scannerConfigBuildInfo>
-		<scannerConfigBuildInfo instanceId="cdt.managedbuild.config.gnu.exe.release.805906070;cdt.managedbuild.config.gnu.exe.release.805906070.;cdt.managedbuild.tool.gnu.c.compiler.exe.release.588718995;cdt.managedbuild.tool.gnu.c.compiler.input.2118094899">
-			<autodiscovery enabled="true" problemReportingEnabled="true" selectedProfileId="org.eclipse.cdt.managedbuilder.core.GCCManagedMakePerProjectProfileC"/>
-		</scannerConfigBuildInfo>
-		<scannerConfigBuildInfo instanceId="cdt.managedbuild.config.gnu.exe.debug.1052069066;cdt.managedbuild.config.gnu.exe.debug.1052069066.;cdt.managedbuild.tool.gnu.cpp.compiler.exe.debug.1766723468;cdt.managedbuild.tool.gnu.cpp.compiler.input.1205628680">
-			<autodiscovery enabled="true" problemReportingEnabled="true" selectedProfileId="org.eclipse.cdt.managedbuilder.core.GCCManagedMakePerProjectProfileCPP"/>
-		</scannerConfigBuildInfo>
-	</storageModule>
-	<storageModule moduleId="refreshScope"/>
-</cproject>
diff --git a/StompClient/.project b/StompClient/.project
deleted file mode 100644
index 4d3c563..0000000
--- a/StompClient/.project
+++ /dev/null
@@ -1,83 +0,0 @@
-<?xml version="1.0" encoding="UTF-8"?>
-<projectDescription>
-	<name>StompClient</name>
-	<comment></comment>
-	<projects>
-	</projects>
-	<buildSpec>
-		<buildCommand>
-			<name>org.eclipse.cdt.managedbuilder.core.genmakebuilder</name>
-			<triggers>clean,full,incremental,</triggers>
-			<arguments>
-				<dictionary>
-					<key>?name?</key>
-					<value></value>
-				</dictionary>
-				<dictionary>
-					<key>org.eclipse.cdt.make.core.append_environment</key>
-					<value>true</value>
-				</dictionary>
-				<dictionary>
-					<key>org.eclipse.cdt.make.core.autoBuildTarget</key>
-					<value>all</value>
-				</dictionary>
-				<dictionary>
-					<key>org.eclipse.cdt.make.core.buildArguments</key>
-					<value></value>
-				</dictionary>
-				<dictionary>
-					<key>org.eclipse.cdt.make.core.buildCommand</key>
-					<value>make</value>
-				</dictionary>
-				<dictionary>
-					<key>org.eclipse.cdt.make.core.buildLocation</key>
-					<value>${workspace_loc:/StompClient/Debug}</value>
-				</dictionary>
-				<dictionary>
-					<key>org.eclipse.cdt.make.core.cleanBuildTarget</key>
-					<value>clean</value>
-				</dictionary>
-				<dictionary>
-					<key>org.eclipse.cdt.make.core.contents</key>
-					<value>org.eclipse.cdt.make.core.activeConfigSettings</value>
-				</dictionary>
-				<dictionary>
-					<key>org.eclipse.cdt.make.core.enableAutoBuild</key>
-					<value>false</value>
-				</dictionary>
-				<dictionary>
-					<key>org.eclipse.cdt.make.core.enableCleanBuild</key>
-					<value>true</value>
-				</dictionary>
-				<dictionary>
-					<key>org.eclipse.cdt.make.core.enableFullBuild</key>
-					<value>true</value>
-				</dictionary>
-				<dictionary>
-					<key>org.eclipse.cdt.make.core.fullBuildTarget</key>
-					<value>all</value>
-				</dictionary>
-				<dictionary>
-					<key>org.eclipse.cdt.make.core.stopOnError</key>
-					<value>true</value>
-				</dictionary>
-				<dictionary>
-					<key>org.eclipse.cdt.make.core.useDefaultBuildCmd</key>
-					<value>true</value>
-				</dictionary>
-			</arguments>
-		</buildCommand>
-		<buildCommand>
-			<name>org.eclipse.cdt.managedbuilder.core.ScannerConfigBuilder</name>
-			<triggers>full,incremental,</triggers>
-			<arguments>
-			</arguments>
-		</buildCommand>
-	</buildSpec>
-	<natures>
-		<nature>org.eclipse.cdt.core.cnature</nature>
-		<nature>org.eclipse.cdt.core.ccnature</nature>
-		<nature>org.eclipse.cdt.managedbuilder.core.managedBuildNature</nature>
-		<nature>org.eclipse.cdt.managedbuilder.core.ScannerConfigNature</nature>
-	</natures>
-</projectDescription>
diff --git a/StompClient/Debug/StompClient b/StompClient/Debug/StompClient
deleted file mode 100755
index 60e027f..0000000
Binary files a/StompClient/Debug/StompClient and /dev/null differ
diff --git a/StompClient/Debug/makefile b/StompClient/Debug/makefile
deleted file mode 100644
index f4ea215..0000000
--- a/StompClient/Debug/makefile
+++ /dev/null
@@ -1,59 +0,0 @@
-################################################################################
-# Automatically-generated file. Do not edit!
-################################################################################
-
--include ../makefile.init
-
-RM := rm -rf
-
-# All of the sources participating in the build are defined here
--include sources.mk
--include src/subdir.mk
--include subdir.mk
--include objects.mk
-
-ifneq ($(MAKECMDGOALS),clean)
-ifneq ($(strip $(C++_DEPS)),)
--include $(C++_DEPS)
-endif
-ifneq ($(strip $(C_DEPS)),)
--include $(C_DEPS)
-endif
-ifneq ($(strip $(CC_DEPS)),)
--include $(CC_DEPS)
-endif
-ifneq ($(strip $(CPP_DEPS)),)
--include $(CPP_DEPS)
-endif
-ifneq ($(strip $(CXX_DEPS)),)
--include $(CXX_DEPS)
-endif
-ifneq ($(strip $(C_UPPER_DEPS)),)
--include $(C_UPPER_DEPS)
-endif
-endif
-
--include ../makefile.defs
-
-# Add inputs and outputs from these tool invocations to the build variables 
-
-# All Target
-all: StompClient
-
-# Tool invocations
-StompClient: $(OBJS) $(USER_OBJS)
-	@echo 'Building target: $@'
-	@echo 'Invoking: GCC C++ Linker'
-	g++ -L/usr/lib -o "StompClient" $(OBJS) $(USER_OBJS) $(LIBS)
-	@echo 'Finished building target: $@'
-	@echo ' '
-
-# Other Targets
-clean:
-	-$(RM) $(OBJS)$(C++_DEPS)$(C_DEPS)$(CC_DEPS)$(CPP_DEPS)$(EXECUTABLES)$(CXX_DEPS)$(C_UPPER_DEPS) StompClient
-	-@echo ' '
-
-.PHONY: all clean dependents
-.SECONDARY:
-
--include ../makefile.targets
diff --git a/StompClient/Debug/objects.mk b/StompClient/Debug/objects.mk
deleted file mode 100644
index 5595f51..0000000
--- a/StompClient/Debug/objects.mk
+++ /dev/null
@@ -1,8 +0,0 @@
-################################################################################
-# Automatically-generated file. Do not edit!
-################################################################################
-
-USER_OBJS :=
-
-LIBS := -lboost_iostreams -lpthread -lboost_thread -lboost_system
-
diff --git a/StompClient/Debug/sources.mk b/StompClient/Debug/sources.mk
deleted file mode 100644
index e7f4bf1..0000000
--- a/StompClient/Debug/sources.mk
+++ /dev/null
@@ -1,27 +0,0 @@
-################################################################################
-# Automatically-generated file. Do not edit!
-################################################################################
-
-O_SRCS := 
-CPP_SRCS := 
-C_UPPER_SRCS := 
-C_SRCS := 
-S_UPPER_SRCS := 
-OBJ_SRCS := 
-ASM_SRCS := 
-CXX_SRCS := 
-C++_SRCS := 
-CC_SRCS := 
-OBJS := 
-C++_DEPS := 
-C_DEPS := 
-CC_DEPS := 
-CPP_DEPS := 
-EXECUTABLES := 
-CXX_DEPS := 
-C_UPPER_DEPS := 
-
-# Every subdirectory with source files must be described here
-SUBDIRS := \
-src \
-
diff --git a/StompClient/Debug/src/StompClient.d b/StompClient/Debug/src/StompClient.d
deleted file mode 100644
index 895ff1f..0000000
--- a/StompClient/Debug/src/StompClient.d
+++ /dev/null
@@ -1 +0,0 @@
-src/StompClient.d: ../src/StompClient.cpp
diff --git a/StompClient/Debug/src/StompClient.o b/StompClient/Debug/src/StompClient.o
deleted file mode 100644
index 9da9cb8..0000000
Binary files a/StompClient/Debug/src/StompClient.o and /dev/null differ
diff --git a/StompClient/Debug/src/connectionHandler.d b/StompClient/Debug/src/connectionHandler.d
deleted file mode 100644
index a64f160..0000000
--- a/StompClient/Debug/src/connectionHandler.d
+++ /dev/null
@@ -1,4 +0,0 @@
-src/connectionHandler.d: ../src/connectionHandler.cpp \
- ../src/connectionHandler.h
-
-../src/connectionHandler.h:
diff --git a/StompClient/Debug/src/connectionHandler.o b/StompClient/Debug/src/connectionHandler.o
deleted file mode 100644
index 6de07d9..0000000
Binary files a/StompClient/Debug/src/connectionHandler.o and /dev/null differ
diff --git a/StompClient/Debug/src/encoder/subdir.mk b/StompClient/Debug/src/encoder/subdir.mk
deleted file mode 100644
index 5b3def8..0000000
--- a/StompClient/Debug/src/encoder/subdir.mk
+++ /dev/null
@@ -1,24 +0,0 @@
-################################################################################
-# Automatically-generated file. Do not edit!
-################################################################################
-
-# Add inputs and outputs from these tool invocations to the build variables 
-CPP_SRCS += \
-../src/encoder/encoder.cpp 
-
-OBJS += \
-./src/encoder/encoder.o 
-
-CPP_DEPS += \
-./src/encoder/encoder.d 
-
-
-# Each subdirectory must supply rules for building sources it contributes
-src/encoder/%.o: ../src/encoder/%.cpp
-	@echo 'Building file: $<'
-	@echo 'Invoking: GCC C++ Compiler'
-	g++ -I/usr/include -O0 -g3 -Wall -c -fmessage-length=0 -MMD -MP -MF"$(@:%.o=%.d)" -MT"$(@:%.o=%.d)" -o "$@" "$<"
-	@echo 'Finished building: $<'
-	@echo ' '
-
-
diff --git a/StompClient/Debug/src/subdir.mk b/StompClient/Debug/src/subdir.mk
deleted file mode 100644
index 2a63ad2..0000000
--- a/StompClient/Debug/src/subdir.mk
+++ /dev/null
@@ -1,27 +0,0 @@
-################################################################################
-# Automatically-generated file. Do not edit!
-################################################################################
-
-# Add inputs and outputs from these tool invocations to the build variables 
-CPP_SRCS += \
-../src/StompClient.cpp \
-../src/connectionHandler.cpp 
-
-OBJS += \
-./src/StompClient.o \
-./src/connectionHandler.o 
-
-CPP_DEPS += \
-./src/StompClient.d \
-./src/connectionHandler.d 
-
-
-# Each subdirectory must supply rules for building sources it contributes
-src/%.o: ../src/%.cpp
-	@echo 'Building file: $<'
-	@echo 'Invoking: GCC C++ Compiler'
-	g++ -I/usr/include -O0 -g3 -Wall -c -fmessage-length=0 -MMD -MP -MF"$(@:%.o=%.d)" -MT"$(@:%.o=%.d)" -o "$@" "$<"
-	@echo 'Finished building: $<'
-	@echo ' '
-
-
diff --git a/StompClient/src/StompClient.cpp b/StompClient/src/StompClient.cpp
deleted file mode 100644
index a9f686a..0000000
--- a/StompClient/src/StompClient.cpp
+++ /dev/null
@@ -1,58 +0,0 @@
-//
-// blocking_tcp_echo_client.cpp
-// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~
-//
-// Copyright (c) 2003-2011 Christopher M. Kohlhoff (chris at kohlhoff dot com)
-//
-// Distributed under the Boost Software License, Version 1.0. (See accompanying
-// file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)
-//
-
-#include <cstdlib>
-#include <cstring>
-#include <iostream>
-#include <boost/asio.hpp>
-
-using boost::asio::ip::tcp;
-
-enum { max_length = 1024 };
-
-int main(int argc, char* argv[])
-{
-	try
-	{
-		if (argc != 3)
-		{
-			std::cerr << "Usage: blocking_tcp_echo_client <host> <port>\n";
-			return 1;
-		}
-
-		boost::asio::io_service io_service;
-
-		tcp::resolver resolver(io_service);
-		tcp::resolver::query query(tcp::v4(), argv[1], argv[2]);
-		tcp::resolver::iterator iterator = resolver.resolve(query);
-
-		tcp::socket s(io_service);
-		s.connect(*iterator);
-
-		using namespace std; // For strlen.
-		std::cout << "Enter message: ";
-		char request[max_length];
-		std::cin.getline(request, max_length);
-		size_t request_length = strlen(request);
-		boost::asio::write(s, boost::asio::buffer(request, request_length));
-
-		char reply[max_length];
-		size_t reply_length = boost::asio::read(s, boost::asio::buffer(reply, request_length));
-		std::cout << "Reply is: ";
-		std::cout.write(reply, reply_length);
-		std::cout << "\n";
-	}
-	catch (std::exception& e)
-	{
-		std::cerr << "Exception: " << e.what() << "\n";
-	}
-
-	return 0;
-}
diff --git a/StompClient/src/connectionHandler.cpp b/StompClient/src/connectionHandler.cpp
deleted file mode 100644
index 79e02f0..0000000
--- a/StompClient/src/connectionHandler.cpp
+++ /dev/null
@@ -1,103 +0,0 @@
-#include "connectionHandler.h"
- 
-using boost::asio::ip::tcp;
-
-using std::cin;
-using std::cout;
-using std::cerr;
-using std::endl;
-using std::string;
- 
-ConnectionHandler::ConnectionHandler(string host, short port): host_(host), port_(port), io_service_(), socket_(io_service_){}
-    
-ConnectionHandler::~ConnectionHandler() {
-    close();
-}
- 
-bool ConnectionHandler::connect() {
-    std::cout << "Starting connect to " 
-        << host_ << ":" << port_ << std::endl;
-    try {
-		tcp::endpoint endpoint(boost::asio::ip::address::from_string(host_), port_); // the server endpoint
-		boost::system::error_code error;
-		socket_.connect(endpoint, error);
-		if (error)
-			throw boost::system::system_error(error);
-    }
-    catch (std::exception& e) {
-        std::cerr << "Connection failed (Error: " << e.what() << ')' << std::endl;
-        return false;
-    }
-    return true;
-}
- 
-bool ConnectionHandler::getBytes(char bytes[], unsigned int bytesToRead) {
-    size_t tmp = 0;
-	boost::system::error_code error;
-    try {
-        while (!error && bytesToRead > tmp ) {
-			tmp += socket_.read_some(boost::asio::buffer(bytes+tmp, bytesToRead-tmp), error);			
-        }
-		if(error)
-			throw boost::system::system_error(error);
-    } catch (std::exception& e) {
-        std::cerr << "recv failed (Error: " << e.what() << ')' << std::endl;
-        return false;
-    }
-    return true;
-}
-
-bool ConnectionHandler::sendBytes(const char bytes[], int bytesToWrite) {
-    int tmp = 0;
-	boost::system::error_code error;
-    try {
-        while (!error && bytesToWrite > tmp ) {
-			tmp += socket_.write_some(boost::asio::buffer(bytes + tmp, bytesToWrite - tmp), error);
-        }
-		if(error)
-			throw boost::system::system_error(error);
-    } catch (std::exception& e) {
-        std::cerr << "recv failed (Error: " << e.what() << ')' << std::endl;
-        return false;
-    }
-    return true;
-}
- 
-bool ConnectionHandler::getLine(std::string& line) {
-    return getFrameAscii(line, '\n');
-}
-
-bool ConnectionHandler::sendLine(std::string& line) {
-    return sendFrameAscii(line, '\n');
-}
- 
-bool ConnectionHandler::getFrameAscii(std::string& frame, char delimiter) {
-    char ch;
-    // Stop when we encounter the null character. 
-    // Notice that the null character is not appended to the frame string.
-    try {
-		do{
-			getBytes(&ch, 1);
-            frame.append(1, ch);
-        }while (delimiter != ch);
-    } catch (std::exception& e) {
-        std::cerr << "recv failed (Error: " << e.what() << ')' << std::endl;
-        return false;
-    }
-    return true;
-}
- 
-bool ConnectionHandler::sendFrameAscii(const std::string& frame, char delimiter) {
-	bool result=sendBytes(frame.c_str(),frame.length());
-	if(!result) return false;
-	return sendBytes(&delimiter,1);
-}
- 
-// Close down the connection properly.
-void ConnectionHandler::close() {
-    try{
-        socket_.close();
-    } catch (...) {
-        std::cout << "closing failed: connection already closed" << std::endl;
-    }
-}
\ No newline at end of file
diff --git a/StompClient/src/connectionHandler.h b/StompClient/src/connectionHandler.h
deleted file mode 100644
index fe01d49..0000000
--- a/StompClient/src/connectionHandler.h
+++ /dev/null
@@ -1,53 +0,0 @@
-#ifndef CONNECTION_HANDLER__
-#define CONNECTION_HANDLER__
-                                           
-#include <string>
-#include <iostream>
-#include <boost/asio.hpp>
-
-using boost::asio::ip::tcp;
-
-class ConnectionHandler {
-private:
-	const std::string host_;
-	const short port_;
-	boost::asio::io_service io_service_;   // Provides core I/O functionality
-	tcp::socket socket_; 
- 
-public:
-    ConnectionHandler(std::string host, short port);
-    virtual ~ConnectionHandler();
- 
-    // Connect to the remote machine
-    bool connect();
- 
-    // Read a fixed number of bytes from the server - blocking.
-    // Returns false in case the connection is closed before bytesToRead bytes can be read.
-    bool getBytes(char bytes[], unsigned int bytesToRead);
- 
-	// Send a fixed number of bytes from the client - blocking.
-    // Returns false in case the connection is closed before all the data is sent.
-    bool sendBytes(const char bytes[], int bytesToWrite);
-	
-    // Read an ascii line from the server
-    // Returns false in case connection closed before a newline can be read.
-    bool getLine(std::string& line);
-	
-	// Send an ascii line from the server
-    // Returns false in case connection closed before all the data is sent.
-    bool sendLine(std::string& line);
- 
-    // Get Ascii data from the server until the delimiter character
-    // Returns false in case connection closed before null can be read.
-    bool getFrameAscii(std::string& frame, char delimiter);
- 
-    // Send a message to the remote host.
-    // Returns false in case connection is closed before all the data is sent.
-    bool sendFrameAscii(const std::string& frame, char delimiter);
-	
-    // Close down the connection properly.
-    void close();
- 
-}; //class ConnectionHandler
- 
-#endif
\ No newline at end of file
diff --git a/TestClient/.classpath b/TestClient/.classpath
deleted file mode 100755
index 91ee9a5..0000000
--- a/TestClient/.classpath
+++ /dev/null
@@ -1,6 +0,0 @@
-<?xml version="1.0" encoding="UTF-8"?>
-<classpath>
-	<classpathentry kind="src" path="src"/>
-	<classpathentry kind="con" path="org.eclipse.jdt.launching.JRE_CONTAINER/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType/JavaSE-1.7"/>
-	<classpathentry kind="output" path="bin"/>
-</classpath>
diff --git a/TestClient/.project b/TestClient/.project
deleted file mode 100755
index 437ded1..0000000
--- a/TestClient/.project
+++ /dev/null
@@ -1,17 +0,0 @@
-<?xml version="1.0" encoding="UTF-8"?>
-<projectDescription>
-	<name>TestClient</name>
-	<comment></comment>
-	<projects>
-	</projects>
-	<buildSpec>
-		<buildCommand>
-			<name>org.eclipse.jdt.core.javabuilder</name>
-			<arguments>
-			</arguments>
-		</buildCommand>
-	</buildSpec>
-	<natures>
-		<nature>org.eclipse.jdt.core.javanature</nature>
-	</natures>
-</projectDescription>
diff --git a/TestClient/.settings/org.eclipse.jdt.core.prefs b/TestClient/.settings/org.eclipse.jdt.core.prefs
deleted file mode 100755
index 838bd9d..0000000
--- a/TestClient/.settings/org.eclipse.jdt.core.prefs
+++ /dev/null
@@ -1,11 +0,0 @@
-eclipse.preferences.version=1
-org.eclipse.jdt.core.compiler.codegen.inlineJsrBytecode=enabled
-org.eclipse.jdt.core.compiler.codegen.targetPlatform=1.7
-org.eclipse.jdt.core.compiler.codegen.unusedLocal=preserve
-org.eclipse.jdt.core.compiler.compliance=1.7
-org.eclipse.jdt.core.compiler.debug.lineNumber=generate
-org.eclipse.jdt.core.compiler.debug.localVariable=generate
-org.eclipse.jdt.core.compiler.debug.sourceFile=generate
-org.eclipse.jdt.core.compiler.problem.assertIdentifier=error
-org.eclipse.jdt.core.compiler.problem.enumIdentifier=error
-org.eclipse.jdt.core.compiler.source=1.7
diff --git a/TestClient/bin/.gitignore b/TestClient/bin/.gitignore
deleted file mode 100644
index 284155e..0000000
--- a/TestClient/bin/.gitignore
+++ /dev/null
@@ -1,2 +0,0 @@
-/EchoClient.class
-/ListenerThread.class
diff --git a/TestClient/src/EchoClient.java b/TestClient/src/EchoClient.java
deleted file mode 100755
index 15463c0..0000000
--- a/TestClient/src/EchoClient.java
+++ /dev/null
@@ -1,93 +0,0 @@
-import java.io.*;
-import java.net.*;
-/**
- * Simple echo client for STOMP assignment
- * Usage:
- * 		1.hard code your lines to strs[]
- * 		2. run with ' client {host} {port} '
- * 		3. press the 'enter' key to send a single STOMP frame 
- * @author arielbaruch , amioren
- *
- */
-public class EchoClient {
-	
-	public static void main(String[] args) throws IOException
-	{
-		System.out.println("[info] [event=client started] [protocol='STOMP/TCP'] [authors={Ariel Baruch, Ami Oren}']");
-
-		Socket clientSocket = null; // the connection socket
-		PrintWriter out = null;
-		BufferedReader in = null;
-
-		// Get host and port
-		String host = args[0];
-		int port = Integer.decode(args[1]).intValue();
-		
-		System.out.println("[info] [event=connecting] [address=" + host + "] [port=" + port+"]");
-		
-		// Trying to connect to a socket and initialize an output stream
-		try {
-			clientSocket = new Socket(host, port); // host and port
-      		out = new PrintWriter(clientSocket.getOutputStream(), true);
-    	} catch (UnknownHostException e) {
-    		System.out.println("[error] [msg=unknown host]");
-      		System.exit(1);
-	    } catch (IOException e) {
-    		System.out.println("[error] [msg=Couldn't get output to " + host + " connection]");
-			System.exit(1);
-    	}
-    	
-    	// Initialize an input stream
-    	try {
-    		in = new BufferedReader(new InputStreamReader(clientSocket.getInputStream(),"UTF-8"));
-    	} catch (IOException e) {
-    		System.out.println("[error] [msg=Couldn't get output to " + host + " connection]");
-			System.exit(1);
-    	}
-    	
-		System.out.println("[info] [event=connected] [address=" + host + "] [port=" + port+"]");
-    	
-    	new Thread(new ListenerThread(in)).start();
-    	
-    	BufferedReader userIn = new BufferedReader(new InputStreamReader(System.in,"UTF-8"));
-    	
-    	/**
-    	 * Edit your commands HERE ->
-    	 */
-    	String[] strs = new String[]{
-    		"CONNECT\naccept-version:1.2\nhost:127.0.0.1\nlogin:ariel\npasscode:p455\n\n"+'\u0000', //CONNECT
-    		"SEND\ndestination:ariel\n\nhello world\n"+'\u0000', //SEND
-    		"DISCONNECT\nreceipt:77\n\n"+'\u0000', //DISCONNECT
-    		"CONNECT\naccept-version:1.2\nhost:127.0.0.1\nlogin:ami\npasscode:oren\n\n"+'\u0000', //CONNECT AS OTHER USER
-    		"SEND\ndestination:ami\n\nhere with @ariel\n"+'\u0000', //SEND @user
-    		"DISCONNECT\nreceipt:99\n\n"+'\u0000', //DISCONNECT
-    		"CONNECT\naccept-version:1.2\nhost:127.0.0.1\nlogin:ariel\npasscode:WRONG\n\n"+'\u0000', //CONNECT wrong pw
-    		"CONNECT\naccept-version:1.2\nhost:127.0.0.1\nlogin:ariel\npasscode:p455\n\n"+'\u0000', //CONNECT
-    		"SUBSCRIBE\ndestination:ami\nid:88\n\n"+'\u0000', //SUBSCRIBE
-    		"SUBSCRIBE\ndestination:server\nid:99\n\n"+'\u0000', //FOLLOW SERVER
-    		"SEND\ndestination:server\n\nclients\n"+'\u0000', //CLIENTS
-    		"SEND\ndestination:server\n\nclients online\n"+'\u0000', //CLIENTS ONLINE
-    		"SEND\ndestination:server\n\nstats\n"+'\u0000', //STATS
-    		"SEND\ndestination:server\n\nstop\n"+'\u0000', //STOP
-    	};
-    	
-		for (int i = 0; i < strs.length; i++)
-		{
-			userIn.readLine();
-			System.out.println("[SENDING]\n"+strs[i]+"[/SENDING]\n");
-			out.print(strs[i]);
-			out.flush();
-		}
-		
-		System.out.println("[info] [event=client exit]");
-		System.exit(1);
-
-    	// Close all I/O
-    	out.close();
-    	in.close();
-    	userIn.close();
-    	clientSocket.close();
-    	
-    	
-	}
-}
diff --git a/TestClient/src/ListenerThread.java b/TestClient/src/ListenerThread.java
deleted file mode 100755
index cf5e0f5..0000000
--- a/TestClient/src/ListenerThread.java
+++ /dev/null
@@ -1,32 +0,0 @@
-import java.io.BufferedReader;
-
-
-public class ListenerThread implements Runnable
-{
-	
-	public ListenerThread(BufferedReader in)
-	{
-		_in = in;
-	}
-
-	private BufferedReader _in;
-	
-	@Override
-	public void run()
-	{
-		while(true)
-		{
-			try
-			{
-				System.out.println(_in.readLine());
-			} catch (Exception e)
-			{
-				// TODO Auto-generated catch block
-				System.exit(1);
-				e.printStackTrace();
-			}
-		}
-
-	}
-
-}
diff --git a/TwitterClient/.cproject b/TwitterClient/.cproject
deleted file mode 100644
index 92409f0..0000000
--- a/TwitterClient/.cproject
+++ /dev/null
@@ -1,156 +0,0 @@
-<?xml version="1.0" encoding="UTF-8" standalone="no"?>
-<?fileVersion 4.0.0?>
-
-<cproject storage_type_id="org.eclipse.cdt.core.XmlProjectDescriptionStorage">
-	<storageModule moduleId="org.eclipse.cdt.core.settings">
-		<cconfiguration id="cdt.managedbuild.config.gnu.exe.debug.1052069066">
-			<storageModule buildSystemId="org.eclipse.cdt.managedbuilder.core.configurationDataProvider" id="cdt.managedbuild.config.gnu.exe.debug.1052069066" moduleId="org.eclipse.cdt.core.settings" name="Debug">
-				<externalSettings/>
-				<extensions>
-					<extension id="org.eclipse.cdt.core.ELF" point="org.eclipse.cdt.core.BinaryParser"/>
-					<extension id="org.eclipse.cdt.core.GmakeErrorParser" point="org.eclipse.cdt.core.ErrorParser"/>
-					<extension id="org.eclipse.cdt.core.CWDLocator" point="org.eclipse.cdt.core.ErrorParser"/>
-					<extension id="org.eclipse.cdt.core.GCCErrorParser" point="org.eclipse.cdt.core.ErrorParser"/>
-					<extension id="org.eclipse.cdt.core.GASErrorParser" point="org.eclipse.cdt.core.ErrorParser"/>
-					<extension id="org.eclipse.cdt.core.GLDErrorParser" point="org.eclipse.cdt.core.ErrorParser"/>
-				</extensions>
-			</storageModule>
-			<storageModule moduleId="cdtBuildSystem" version="4.0.0">
-				<configuration artifactName="${ProjName}" buildArtefactType="org.eclipse.cdt.build.core.buildArtefactType.exe" buildProperties="org.eclipse.cdt.build.core.buildType=org.eclipse.cdt.build.core.buildType.debug,org.eclipse.cdt.build.core.buildArtefactType=org.eclipse.cdt.build.core.buildArtefactType.exe" cleanCommand="rm -rf" description="" id="cdt.managedbuild.config.gnu.exe.debug.1052069066" name="Debug" parent="cdt.managedbuild.config.gnu.exe.debug">
-					<folderInfo id="cdt.managedbuild.config.gnu.exe.debug.1052069066." name="/" resourcePath="">
-						<toolChain id="cdt.managedbuild.toolchain.gnu.exe.debug.1768045331" name="Linux GCC" superClass="cdt.managedbuild.toolchain.gnu.exe.debug">
-							<targetPlatform id="cdt.managedbuild.target.gnu.platform.exe.debug.1568867518" name="Debug Platform" superClass="cdt.managedbuild.target.gnu.platform.exe.debug"/>
-							<builder buildPath="${workspace_loc:/StompClient/bin}" id="cdt.managedbuild.target.gnu.builder.exe.debug.1942164918" keepEnvironmentInBuildfile="false" managedBuildOn="true" name="Gnu Make Builder" superClass="cdt.managedbuild.target.gnu.builder.exe.debug">
-								<outputEntries>
-									<entry flags="VALUE_WORKSPACE_PATH|RESOLVED" kind="outputPath" name="Debug"/>
-									<entry flags="VALUE_WORKSPACE_PATH|RESOLVED" kind="outputPath" name="Release"/>
-								</outputEntries>
-							</builder>
-							<tool id="cdt.managedbuild.tool.gnu.archiver.base.1013081615" name="GCC Archiver" superClass="cdt.managedbuild.tool.gnu.archiver.base"/>
-							<tool id="cdt.managedbuild.tool.gnu.cpp.compiler.exe.debug.1766723468" name="GCC C++ Compiler" superClass="cdt.managedbuild.tool.gnu.cpp.compiler.exe.debug">
-								<option id="gnu.cpp.compiler.exe.debug.option.optimization.level.1082532161" name="Optimization Level" superClass="gnu.cpp.compiler.exe.debug.option.optimization.level" value="gnu.cpp.compiler.optimization.level.none" valueType="enumerated"/>
-								<option id="gnu.cpp.compiler.exe.debug.option.debugging.level.1284715940" name="Debug Level" superClass="gnu.cpp.compiler.exe.debug.option.debugging.level" value="gnu.cpp.compiler.debugging.level.max" valueType="enumerated"/>
-								<option id="gnu.cpp.compiler.option.include.paths.7785359" name="Include paths (-I)" superClass="gnu.cpp.compiler.option.include.paths" valueType="includePath">
-									<listOptionValue builtIn="false" value="/usr/include"/>
-								</option>
-								<inputType id="cdt.managedbuild.tool.gnu.cpp.compiler.input.1205628680" superClass="cdt.managedbuild.tool.gnu.cpp.compiler.input"/>
-							</tool>
-							<tool id="cdt.managedbuild.tool.gnu.c.compiler.exe.debug.1586185561" name="GCC C Compiler" superClass="cdt.managedbuild.tool.gnu.c.compiler.exe.debug">
-								<option defaultValue="gnu.c.optimization.level.none" id="gnu.c.compiler.exe.debug.option.optimization.level.437170192" name="Optimization Level" superClass="gnu.c.compiler.exe.debug.option.optimization.level" valueType="enumerated"/>
-								<option id="gnu.c.compiler.exe.debug.option.debugging.level.1470362608" name="Debug Level" superClass="gnu.c.compiler.exe.debug.option.debugging.level" value="gnu.c.debugging.level.max" valueType="enumerated"/>
-								<option id="gnu.c.compiler.option.include.paths.546963201" name="Include paths (-I)" superClass="gnu.c.compiler.option.include.paths" valueType="includePath">
-									<listOptionValue builtIn="false" value="/usr/include"/>
-								</option>
-								<inputType id="cdt.managedbuild.tool.gnu.c.compiler.input.1325762803" superClass="cdt.managedbuild.tool.gnu.c.compiler.input"/>
-							</tool>
-							<tool id="cdt.managedbuild.tool.gnu.c.linker.exe.debug.1842186134" name="GCC C Linker" superClass="cdt.managedbuild.tool.gnu.c.linker.exe.debug"/>
-							<tool id="cdt.managedbuild.tool.gnu.cpp.linker.exe.debug.2135423064" name="GCC C++ Linker" superClass="cdt.managedbuild.tool.gnu.cpp.linker.exe.debug">
-								<option id="gnu.cpp.link.option.paths.352817499" name="Library search path (-L)" superClass="gnu.cpp.link.option.paths" valueType="libPaths">
-									<listOptionValue builtIn="false" value="/usr/lib"/>
-									<listOptionValue builtIn="false" value="/usr/local/lib"/>
-								</option>
-								<option id="gnu.cpp.link.option.libs.1340539280" name="Libraries (-l)" superClass="gnu.cpp.link.option.libs" valueType="libs">
-									<listOptionValue builtIn="false" value="boost_thread"/>
-									<listOptionValue builtIn="false" value="PocoFoundation"/>
-									<listOptionValue builtIn="false" value="PocoUtil"/>
-									<listOptionValue builtIn="false" value="pthread"/>
-									<listOptionValue builtIn="false" value="boost_system"/>
-								</option>
-								<inputType id="cdt.managedbuild.tool.gnu.cpp.linker.input.474715913" superClass="cdt.managedbuild.tool.gnu.cpp.linker.input">
-									<additionalInput kind="additionalinputdependency" paths="$(USER_OBJS)"/>
-									<additionalInput kind="additionalinput" paths="$(LIBS)"/>
-								</inputType>
-							</tool>
-							<tool id="cdt.managedbuild.tool.gnu.assembler.exe.debug.1990688953" name="GCC Assembler" superClass="cdt.managedbuild.tool.gnu.assembler.exe.debug">
-								<option id="gnu.both.asm.option.include.paths.1653821807" name="Include paths (-I)" superClass="gnu.both.asm.option.include.paths" valueType="includePath">
-									<listOptionValue builtIn="false" value="/usr/include"/>
-								</option>
-								<inputType id="cdt.managedbuild.tool.gnu.assembler.input.1870782859" superClass="cdt.managedbuild.tool.gnu.assembler.input"/>
-							</tool>
-						</toolChain>
-					</folderInfo>
-					<sourceEntries>
-						<entry flags="VALUE_WORKSPACE_PATH|RESOLVED" kind="sourcePath" name="src/protocols/STOMP/frames"/>
-						<entry excluding="protocols/STOMP/frames" flags="VALUE_WORKSPACE_PATH|RESOLVED" kind="sourcePath" name="src"/>
-						<entry flags="VALUE_WORKSPACE_PATH|RESOLVED" kind="sourcePath" name="include"/>
-					</sourceEntries>
-				</configuration>
-			</storageModule>
-			<storageModule moduleId="org.eclipse.cdt.core.externalSettings"/>
-		</cconfiguration>
-		<cconfiguration id="cdt.managedbuild.config.gnu.exe.release.805906070">
-			<storageModule buildSystemId="org.eclipse.cdt.managedbuilder.core.configurationDataProvider" id="cdt.managedbuild.config.gnu.exe.release.805906070" moduleId="org.eclipse.cdt.core.settings" name="Release">
-				<externalSettings/>
-				<extensions>
-					<extension id="org.eclipse.cdt.core.ELF" point="org.eclipse.cdt.core.BinaryParser"/>
-					<extension id="org.eclipse.cdt.core.GmakeErrorParser" point="org.eclipse.cdt.core.ErrorParser"/>
-					<extension id="org.eclipse.cdt.core.CWDLocator" point="org.eclipse.cdt.core.ErrorParser"/>
-					<extension id="org.eclipse.cdt.core.GCCErrorParser" point="org.eclipse.cdt.core.ErrorParser"/>
-					<extension id="org.eclipse.cdt.core.GASErrorParser" point="org.eclipse.cdt.core.ErrorParser"/>
-					<extension id="org.eclipse.cdt.core.GLDErrorParser" point="org.eclipse.cdt.core.ErrorParser"/>
-				</extensions>
-			</storageModule>
-			<storageModule moduleId="cdtBuildSystem" version="4.0.0">
-				<configuration artifactName="${ProjName}" buildArtefactType="org.eclipse.cdt.build.core.buildArtefactType.exe" buildProperties="org.eclipse.cdt.build.core.buildType=org.eclipse.cdt.build.core.buildType.release,org.eclipse.cdt.build.core.buildArtefactType=org.eclipse.cdt.build.core.buildArtefactType.exe" cleanCommand="rm -rf" description="" id="cdt.managedbuild.config.gnu.exe.release.805906070" name="Release" parent="cdt.managedbuild.config.gnu.exe.release">
-					<folderInfo id="cdt.managedbuild.config.gnu.exe.release.805906070." name="/" resourcePath="">
-						<toolChain id="cdt.managedbuild.toolchain.gnu.exe.release.380406057" name="Linux GCC" superClass="cdt.managedbuild.toolchain.gnu.exe.release">
-							<targetPlatform id="cdt.managedbuild.target.gnu.platform.exe.release.1088127057" name="Debug Platform" superClass="cdt.managedbuild.target.gnu.platform.exe.release"/>
-							<builder buildPath="${workspace_loc:/StompClient/Release}" id="cdt.managedbuild.target.gnu.builder.exe.release.644380353" keepEnvironmentInBuildfile="false" managedBuildOn="true" name="Gnu Make Builder" superClass="cdt.managedbuild.target.gnu.builder.exe.release"/>
-							<tool id="cdt.managedbuild.tool.gnu.archiver.base.931649258" name="GCC Archiver" superClass="cdt.managedbuild.tool.gnu.archiver.base"/>
-							<tool id="cdt.managedbuild.tool.gnu.cpp.compiler.exe.release.915551392" name="GCC C++ Compiler" superClass="cdt.managedbuild.tool.gnu.cpp.compiler.exe.release">
-								<option id="gnu.cpp.compiler.exe.release.option.optimization.level.1690156786" name="Optimization Level" superClass="gnu.cpp.compiler.exe.release.option.optimization.level" value="gnu.cpp.compiler.optimization.level.most" valueType="enumerated"/>
-								<option id="gnu.cpp.compiler.exe.release.option.debugging.level.1084749358" name="Debug Level" superClass="gnu.cpp.compiler.exe.release.option.debugging.level" value="gnu.cpp.compiler.debugging.level.none" valueType="enumerated"/>
-								<inputType id="cdt.managedbuild.tool.gnu.cpp.compiler.input.645422173" superClass="cdt.managedbuild.tool.gnu.cpp.compiler.input"/>
-							</tool>
-							<tool id="cdt.managedbuild.tool.gnu.c.compiler.exe.release.588718995" name="GCC C Compiler" superClass="cdt.managedbuild.tool.gnu.c.compiler.exe.release">
-								<option defaultValue="gnu.c.optimization.level.most" id="gnu.c.compiler.exe.release.option.optimization.level.95313616" name="Optimization Level" superClass="gnu.c.compiler.exe.release.option.optimization.level" valueType="enumerated"/>
-								<option id="gnu.c.compiler.exe.release.option.debugging.level.375967182" name="Debug Level" superClass="gnu.c.compiler.exe.release.option.debugging.level" value="gnu.c.debugging.level.none" valueType="enumerated"/>
-								<inputType id="cdt.managedbuild.tool.gnu.c.compiler.input.2118094899" superClass="cdt.managedbuild.tool.gnu.c.compiler.input"/>
-							</tool>
-							<tool id="cdt.managedbuild.tool.gnu.c.linker.exe.release.1509148605" name="GCC C Linker" superClass="cdt.managedbuild.tool.gnu.c.linker.exe.release"/>
-							<tool id="cdt.managedbuild.tool.gnu.cpp.linker.exe.release.131046257" name="GCC C++ Linker" superClass="cdt.managedbuild.tool.gnu.cpp.linker.exe.release">
-								<inputType id="cdt.managedbuild.tool.gnu.cpp.linker.input.691094106" superClass="cdt.managedbuild.tool.gnu.cpp.linker.input">
-									<additionalInput kind="additionalinputdependency" paths="$(USER_OBJS)"/>
-									<additionalInput kind="additionalinput" paths="$(LIBS)"/>
-								</inputType>
-							</tool>
-							<tool id="cdt.managedbuild.tool.gnu.assembler.exe.release.299740645" name="GCC Assembler" superClass="cdt.managedbuild.tool.gnu.assembler.exe.release">
-								<inputType id="cdt.managedbuild.tool.gnu.assembler.input.778617081" superClass="cdt.managedbuild.tool.gnu.assembler.input"/>
-							</tool>
-						</toolChain>
-					</folderInfo>
-					<sourceEntries>
-						<entry excluding="protocols" flags="VALUE_WORKSPACE_PATH|RESOLVED" kind="sourcePath" name="src"/>
-						<entry excluding="frames" flags="VALUE_WORKSPACE_PATH|RESOLVED" kind="sourcePath" name="src/protocols/STOMP"/>
-						<entry flags="VALUE_WORKSPACE_PATH|RESOLVED" kind="sourcePath" name="include"/>
-						<entry excluding="STOMP|STOMP/frames" flags="VALUE_WORKSPACE_PATH|RESOLVED" kind="sourcePath" name="src/protocols"/>
-						<entry flags="VALUE_WORKSPACE_PATH|RESOLVED" kind="sourcePath" name="src/protocols/STOMP/frames"/>
-					</sourceEntries>
-				</configuration>
-			</storageModule>
-			<storageModule moduleId="org.eclipse.cdt.core.externalSettings"/>
-		</cconfiguration>
-	</storageModule>
-	<storageModule moduleId="cdtBuildSystem" version="4.0.0">
-		<project id="StompClient.cdt.managedbuild.target.gnu.exe.516128734" name="Executable" projectType="cdt.managedbuild.target.gnu.exe"/>
-	</storageModule>
-	<storageModule moduleId="scannerConfiguration">
-		<autodiscovery enabled="true" problemReportingEnabled="true" selectedProfileId=""/>
-		<scannerConfigBuildInfo instanceId="cdt.managedbuild.config.gnu.exe.debug.1052069066;cdt.managedbuild.config.gnu.exe.debug.1052069066.;cdt.managedbuild.tool.gnu.c.compiler.exe.debug.1586185561;cdt.managedbuild.tool.gnu.c.compiler.input.1325762803">
-			<autodiscovery enabled="true" problemReportingEnabled="true" selectedProfileId="org.eclipse.cdt.managedbuilder.core.GCCManagedMakePerProjectProfileC"/>
-		</scannerConfigBuildInfo>
-		<scannerConfigBuildInfo instanceId="cdt.managedbuild.config.gnu.exe.release.805906070;cdt.managedbuild.config.gnu.exe.release.805906070.;cdt.managedbuild.tool.gnu.cpp.compiler.exe.release.915551392;cdt.managedbuild.tool.gnu.cpp.compiler.input.645422173">
-			<autodiscovery enabled="true" problemReportingEnabled="true" selectedProfileId="org.eclipse.cdt.managedbuilder.core.GCCManagedMakePerProjectProfileCPP"/>
-		</scannerConfigBuildInfo>
-		<scannerConfigBuildInfo instanceId="cdt.managedbuild.config.gnu.exe.release.805906070;cdt.managedbuild.config.gnu.exe.release.805906070.;cdt.managedbuild.tool.gnu.c.compiler.exe.release.588718995;cdt.managedbuild.tool.gnu.c.compiler.input.2118094899">
-			<autodiscovery enabled="true" problemReportingEnabled="true" selectedProfileId="org.eclipse.cdt.managedbuilder.core.GCCManagedMakePerProjectProfileC"/>
-		</scannerConfigBuildInfo>
-		<scannerConfigBuildInfo instanceId="cdt.managedbuild.config.gnu.exe.debug.1052069066;cdt.managedbuild.config.gnu.exe.debug.1052069066.;cdt.managedbuild.tool.gnu.cpp.compiler.exe.debug.1766723468;cdt.managedbuild.tool.gnu.cpp.compiler.input.1205628680">
-			<autodiscovery enabled="true" problemReportingEnabled="true" selectedProfileId="org.eclipse.cdt.managedbuilder.core.GCCManagedMakePerProjectProfileCPP"/>
-		</scannerConfigBuildInfo>
-	</storageModule>
-	<storageModule moduleId="refreshScope" versionNumber="1">
-		<resource resourceType="PROJECT" workspacePath="/TwitterClient"/>
-	</storageModule>
-	<storageModule moduleId="org.eclipse.cdt.internal.ui.text.commentOwnerProjectMappings"/>
-</cproject>
diff --git a/TwitterClient/.gitignore b/TwitterClient/.gitignore
deleted file mode 100644
index 95e0449..0000000
--- a/TwitterClient/.gitignore
+++ /dev/null
@@ -1,2 +0,0 @@
-/Debug
-/bin
diff --git a/TwitterClient/.project b/TwitterClient/.project
deleted file mode 100644
index 4e9b835..0000000
--- a/TwitterClient/.project
+++ /dev/null
@@ -1,87 +0,0 @@
-<?xml version="1.0" encoding="UTF-8"?>
-<projectDescription>
-	<name>TwitterClient</name>
-	<comment></comment>
-	<projects>
-	</projects>
-	<buildSpec>
-		<buildCommand>
-			<name>org.eclipse.cdt.managedbuilder.core.genmakebuilder</name>
-			<triggers>clean,full,incremental,</triggers>
-			<arguments>
-				<dictionary>
-					<key>?children?</key>
-					<value>?name?=outputEntries\|?children?=?name?=entry\\\\\\\|\\\|?name?=entry\\\\\\\|\\\|\||</value>
-				</dictionary>
-				<dictionary>
-					<key>?name?</key>
-					<value></value>
-				</dictionary>
-				<dictionary>
-					<key>org.eclipse.cdt.make.core.append_environment</key>
-					<value>true</value>
-				</dictionary>
-				<dictionary>
-					<key>org.eclipse.cdt.make.core.autoBuildTarget</key>
-					<value>all</value>
-				</dictionary>
-				<dictionary>
-					<key>org.eclipse.cdt.make.core.buildArguments</key>
-					<value></value>
-				</dictionary>
-				<dictionary>
-					<key>org.eclipse.cdt.make.core.buildCommand</key>
-					<value>make</value>
-				</dictionary>
-				<dictionary>
-					<key>org.eclipse.cdt.make.core.buildLocation</key>
-					<value>${workspace_loc:/StompClient/bin}</value>
-				</dictionary>
-				<dictionary>
-					<key>org.eclipse.cdt.make.core.cleanBuildTarget</key>
-					<value>clean</value>
-				</dictionary>
-				<dictionary>
-					<key>org.eclipse.cdt.make.core.contents</key>
-					<value>org.eclipse.cdt.make.core.activeConfigSettings</value>
-				</dictionary>
-				<dictionary>
-					<key>org.eclipse.cdt.make.core.enableAutoBuild</key>
-					<value>false</value>
-				</dictionary>
-				<dictionary>
-					<key>org.eclipse.cdt.make.core.enableCleanBuild</key>
-					<value>true</value>
-				</dictionary>
-				<dictionary>
-					<key>org.eclipse.cdt.make.core.enableFullBuild</key>
-					<value>true</value>
-				</dictionary>
-				<dictionary>
-					<key>org.eclipse.cdt.make.core.fullBuildTarget</key>
-					<value>all</value>
-				</dictionary>
-				<dictionary>
-					<key>org.eclipse.cdt.make.core.stopOnError</key>
-					<value>true</value>
-				</dictionary>
-				<dictionary>
-					<key>org.eclipse.cdt.make.core.useDefaultBuildCmd</key>
-					<value>true</value>
-				</dictionary>
-			</arguments>
-		</buildCommand>
-		<buildCommand>
-			<name>org.eclipse.cdt.managedbuilder.core.ScannerConfigBuilder</name>
-			<triggers>full,incremental,</triggers>
-			<arguments>
-			</arguments>
-		</buildCommand>
-	</buildSpec>
-	<natures>
-		<nature>org.eclipse.cdt.core.cnature</nature>
-		<nature>org.eclipse.cdt.core.ccnature</nature>
-		<nature>org.eclipse.cdt.managedbuilder.core.managedBuildNature</nature>
-		<nature>org.eclipse.cdt.managedbuilder.core.ScannerConfigNature</nature>
-	</natures>
-</projectDescription>
diff --git a/TwitterClient/ami.html b/TwitterClient/ami.html
deleted file mode 100644
index f3cbefe..0000000
Binary files a/TwitterClient/ami.html and /dev/null differ
diff --git a/TwitterClient/app.log b/TwitterClient/app.log
deleted file mode 100644
index f156fe7..0000000
Binary files a/TwitterClient/app.log and /dev/null differ
diff --git a/TwitterClient/include/AppLogger.h b/TwitterClient/include/AppLogger.h
deleted file mode 100644
index 5334767..0000000
--- a/TwitterClient/include/AppLogger.h
+++ /dev/null
@@ -1,93 +0,0 @@
-// AppLogger.h
-
-#ifndef APP_LOGGER_H
-#define APP_LOGGER_H
-
-#include <string>
-#include <sstream>
-#include <vector>
-#include <map>
-
-
-#include <iostream>
-#include <string>
-#include <stdio.h>
-#include <time.h>
-
-
-#include "Poco/Message.h"
-using namespace std;
-// Forward decalrations (instant including h files)
-namespace Poco{class Logger;};
-class CMyLogger;
-
-// Application logger: class that handles all application logging.
-// It is implemented as a singleton
-// Singleton is a design pattern that is used to restrict instantiation of a class to one object.
-// This is useful when exactly one object is needed to coordinate actions across the system - for example only one logger.
-// Sometimes it is generalized to systems that operate more efficiently when only one or a few objects exist.
-
-class CAppLogger
-{
-private:
-        enum ELogger
-        {
-                ELoggerFile             = 0,
-                   ELoggerConsole,
-
-                ELoggersCount
-            };
-
-        CAppLogger(
-             		const std::string& logFileName,
-        		Poco::Message::Priority minFilePriority,
-        		Poco::Message::Priority minConsolePriority);
-
-        const std::string CurrentDateTime();
-        void destroyHtmlLogger();
-
-public:
-        ~CAppLogger(void);
-
-        // The one and only application logger is accessible through this method
-        //first call initializes
-        static CAppLogger& Instance(
-        		const std::string& logFileName = "log.log",
-        		Poco::Message::Priority minFilePriority 	= Poco::Message::PRIO_INFORMATION,
-        		Poco::Message::Priority minConsolePriority	= Poco::Message::PRIO_INFORMATION
-        	)
-        {
-                // This is the instance.
-                static CAppLogger instance(logFileName, minFilePriority, minConsolePriority);
-
-                static bool firstCall = true;
-                if (firstCall)
-                {
-                        firstCall = false;
-                        //instance.Log("Message","Starting new log session.", Poco::Message::PRIO_DEBUG);
-                }
-
-
-                // Return a reference to the instance.
-                return instance;
-        }
-
-        static void Init(const std::string& logFileName, Poco::Message::Priority minFilePriority, Poco::Message::Priority minConsolePriority)
-        {
-
-        }
-        // Write to log a STL string.
-        void Log(const std::string& inLogString, Poco::Message::Priority inPriority/* = Poco::Message::PRIO_INFORMATION*/);
-        // Write to log a STL string stream.
-        void Log(const std::ostringstream& inLogString, Poco::Message::Priority inPriority/* = Poco::Message::PRIO_INFORMATION*/);
-
-        void StartHtmlLogger(const string& loggerName);
-        void LogHtmlRow(const string& loggerName, const string& arg0, const string& arg1, const string& arg2);
-private:
-        // Holds pointers to all loggers
-        std::vector<Poco::Logger*> mLoggers;
-        std::map<string, Poco::Logger*> mHtmlLoggers;
-};
-
-#endif // APP_LOGGER_H
-
diff --git a/TwitterClient/include/Client.h b/TwitterClient/include/Client.h
deleted file mode 100644
index b3b4212..0000000
--- a/TwitterClient/include/Client.h
+++ /dev/null
@@ -1,39 +0,0 @@
-/*
- * Client.h
- *
- *  Created on: Jan 7, 2014
- *      Author: amio
- */
-
-#ifndef CLIENT_H_
-#define CLIENT_H_
-
-#include "Protocol.h"
-#include "connectionHandler.h"
-#include <boost/thread.hpp>
-#include <sstream>
-#include "AppLogger.h"
-
-class Protocol;
-
-#include <string>
-using namespace std;
-class Client {
-public:
-	Client(Protocol& protocol);
-	virtual ~Client();
-	void start();
-	bool connect(const string& host, unsigned short port);
-	void disconnect();
-	bool isConnected();
-	void shutdown();
-private:
-	Protocol* _protocol;
-	bool _isConnected;
-	bool _shouldShutdown;
-	ConnectionHandler* _pConnectionHanlder;
-	void startListenning();
-	boost::thread* _pServerResponseHandlerThread;
-};
-
-#endif /* CLIENT_H_ */
diff --git a/TwitterClient/include/Protocol.h b/TwitterClient/include/Protocol.h
deleted file mode 100644
index f137787..0000000
--- a/TwitterClient/include/Protocol.h
+++ /dev/null
@@ -1,36 +0,0 @@
-/*
- * Protocol.h
- *
- *  Created on: Jan 7, 2014
- *      Author: amio
- */
-
-#ifndef PROTOCOL_H_
-#define PROTOCOL_H_
-
-#include <string>
-#include "Client.h"
-#include "Utility.h"
-#include <sstream>
-
-class Client;
-
-using namespace std;
-
-class Protocol {
-public:
-	Protocol();
-	virtual ~Protocol();
-	virtual bool processUserInput(const string& inputMsg, string& outputMsg) = 0;
-	virtual char getDelimiter() = 0;
-	void setClient(Client* client);
-	virtual void processMsg(const string& msg) = 0;
-	virtual void fixMsg(string& msg);	//corrects diversions from protocol
-
-	//virtual void chunkUpMsg(const string& str) = 0;
-protected:
-	Client* _client;
-	//stringstream _msgChunks;
-};
-
-#endif /* PROTOCOL_H_ */
diff --git a/TwitterClient/include/Utility.h b/TwitterClient/include/Utility.h
deleted file mode 100644
index 557d52e..0000000
--- a/TwitterClient/include/Utility.h
+++ /dev/null
@@ -1,23 +0,0 @@
-/*
- * Utility.h
- *
- *  Created on: Jan 8, 2014
- *      Author: arielbar
- */
-
-#ifndef UTILITY_H_
-#define UTILITY_H_
-#include <string>
-#include <vector>
-
-using namespace std;
-
-class Utility {
-public:
-	Utility();
-	virtual ~Utility();
-	static void splitString(const string& str,char delimiter, vector<string>& output);
-
-};
-
-#endif /* UTILITY_H_ */
diff --git a/TwitterClient/include/connectionHandler.h b/TwitterClient/include/connectionHandler.h
deleted file mode 100644
index 9885b1c..0000000
--- a/TwitterClient/include/connectionHandler.h
+++ /dev/null
@@ -1,56 +0,0 @@
-#ifndef CONNECTION_HANDLER__
-#define CONNECTION_HANDLER__
-                                           
-#include <string>
-#include <iostream>
-#include <boost/asio.hpp>
-
-using boost::asio::ip::tcp;
-
-class ConnectionHandler {
-private:
-	const std::string host_;
-	const unsigned short port_;
-	boost::asio::io_service io_service_;   // Provides core I/O functionality
-	tcp::socket socket_; 
- 
-public:
-    ConnectionHandler(std::string host, unsigned short port);
-    virtual ~ConnectionHandler();
- 
-    // Connect to the remote machine
-    bool connect();
- 
-    // Read a fixed number of bytes from the server - blocking.
-    // Returns false in case the connection is closed before bytesToRead bytes can be read.
-    bool getBytes(char bytes[], unsigned int bytesToRead);
- 
-	// Send a fixed number of bytes from the client - blocking.
-    // Returns false in case the connection is closed before all the data is sent.
-    bool sendBytes(const char bytes[], int bytesToWrite);
-	
-    // Read an ascii line from the server
-    // Returns false in case connection closed before a newline can be read.
-    bool getLine(std::string& line);
-	
-	// Send an ascii line from the server
-    // Returns false in case connection closed before all the data is sent.
-    bool sendLine(std::string& line);
- 
-    // Get Ascii data from the server until the delimiter character
-    // Returns false in case connection closed before null can be read.
-    bool getFrameAscii(std::string& frame, char delimiter);
- 
-    // Send a message to the remote host.
-    // Returns false in case connection is closed before all the data is sent.
-    bool sendFrameAscii(const std::string& frame, char delimiter);
-	
-    // Close down the connection properly.
-    void close();
-
-    bool sendString(const std::string& str);
-
- 
-}; //class ConnectionHandler
- 
-#endif
diff --git a/TwitterClient/makefile b/TwitterClient/makefile
deleted file mode 100644
index 1b53f3f..0000000
--- a/TwitterClient/makefile
+++ /dev/null
@@ -1,126 +0,0 @@
-
-RM := rm -rf
-
-# All of the sources participating in the build are defined here
-
-USER_OBJS :=
-
-LIBS := -lboost_thread -lPocoFoundation -lPocoUtil -lboost_system -lpthread
-
-CPP_SRCS += \
-../src/protocols/STOMP/frames/ConnectFrame.cpp \
-../src/protocols/STOMP/frames/DisconnectFrame.cpp \
-../src/protocols/STOMP/frames/MessageFrame.cpp \
-../src/protocols/STOMP/frames/SendFrame.cpp \
-../src/protocols/STOMP/frames/StompFrame.cpp \
-../src/protocols/STOMP/frames/SubscribeFrame.cpp \
-../src/protocols/STOMP/frames/UnsubscribeFrame.cpp 
-
-OBJS += \
-./src/protocols/STOMP/frames/ConnectFrame.o \
-./src/protocols/STOMP/frames/DisconnectFrame.o \
-./src/protocols/STOMP/frames/MessageFrame.o \
-./src/protocols/STOMP/frames/SendFrame.o \
-./src/protocols/STOMP/frames/StompFrame.o \
-./src/protocols/STOMP/frames/SubscribeFrame.o \
-./src/protocols/STOMP/frames/UnsubscribeFrame.o 
-
-CPP_DEPS += \
-./src/protocols/STOMP/frames/ConnectFrame.d \
-./src/protocols/STOMP/frames/DisconnectFrame.d \
-./src/protocols/STOMP/frames/MessageFrame.d \
-./src/protocols/STOMP/frames/SendFrame.d \
-./src/protocols/STOMP/frames/StompFrame.d \
-./src/protocols/STOMP/frames/SubscribeFrame.d \
-./src/protocols/STOMP/frames/UnsubscribeFrame.d 
-
-
-# Each subdirectory must supply rules for building sources it contributes
-src/protocols/STOMP/frames/%.o: ../src/protocols/STOMP/frames/%.cpp
-	@echo 'Building file: $<'
-	@echo 'Invoking: GCC C++ Compiler'
-	g++ -I/usr/include -O0 -g3 -Wall -Weffc++ -c -fmessage-length=0 -MMD -MP -MF"$(@:%.o=%.d)" -MT"$(@:%.o=%.d)" -o "$@" "$<"
-	@echo 'Finished building: $<'
-	@echo ' '-include src/protocols/STOMP/subdir.mk
-	
-# Add inputs and outputs from these tool invocations to the build variables 
-CPP_SRCS += \
-../src/AppLogger.cpp \
-../src/Client.cpp \
-../src/Main.cpp \
-../src/Protocol.cpp \
-../src/Utility.cpp \
-../src/connectionHandler.cpp 
-
-OBJS += \
-./src/AppLogger.o \
-./src/Client.o \
-./src/Main.o \
-./src/Protocol.o \
-./src/Utility.o \
-./src/connectionHandler.o 
-
-CPP_DEPS += \
-./src/AppLogger.d \
-./src/Client.d \
-./src/Main.d \
-./src/Protocol.d \
-./src/Utility.d \
-./src/connectionHandler.d 
-
-# Add inputs and outputs from these tool invocations to the build variables 
-CPP_SRCS += \
-../src/protocols/STOMP/StompProtocol.cpp \
-../src/protocols/STOMP/TweeterProtocol.cpp 
-
-OBJS += \
-./src/protocols/STOMP/StompProtocol.o \
-./src/protocols/STOMP/TweeterProtocol.o 
-
-CPP_DEPS += \
-./src/protocols/STOMP/StompProtocol.d \
-./src/protocols/STOMP/TweeterProtocol.d 
-
-
-# Each subdirectory must supply rules for building sources it contributes
-src/protocols/STOMP/%.o: ../src/protocols/STOMP/%.cpp
-	@echo 'Building file: $<'
-	@echo 'Invoking: GCC C++ Compiler'
-	g++ -I/usr/include -O0 -g3 -Wall -Weffc++ -c -fmessage-length=0 -MMD -MP -MF"$(@:%.o=%.d)" -MT"$(@:%.o=%.d)" -o "$@" "$<"
-	@echo 'Finished building: $<'
-	@echo ' '
-
-# Each subdirectory must supply rules for building sources it contributes
-src/%.o: ../src/%.cpp
-	@echo 'Building file: $<'
-	@echo 'Invoking: GCC C++ Compiler'
-	g++ -I/usr/include -O0 -g3 -Wall -Weffc++ -c -fmessage-length=0 -MMD -MP -MF"$(@:%.o=%.d)" -MT"$(@:%.o=%.d)" -o "$@" "$<"
-	@echo 'Finished building: $<'
-	@echo ' '
-
-
-# Add inputs and outputs from these tool invocations to the build variables 
-
-# All Target
-all: makedir TwitterClient
-
-makedir:
-	mkdir -p bin
-
-# Tool invocations
-TwitterClient: $(OBJS) $(USER_OBJS)
-	@echo 'Building target: $@'
-	@echo 'Invoking: GCC C++ Linker'
-	g++ -L/usr/lib -L/usr/local/lib -o "bin/TwitterClient" $(OBJS) $(USER_OBJS) $(LIBS)
-	@echo 'Finished building target: $@'
-	@echo ' '
-	-$(RM) $(OBJS)$(C++_DEPS)$(C_DEPS)$(CC_DEPS)$(CPP_DEPS)$(EXECUTABLES)$(CXX_DEPS)$(C_UPPER_DEPS)
-
-# Other Targets
-clean:
-	-$(RM) $(OBJS)$(C++_DEPS)$(C_DEPS)$(CC_DEPS)$(CPP_DEPS)$(EXECUTABLES)$(CXX_DEPS)$(C_UPPER_DEPS) bin/TwitterClient
-	-@echo ' '
-
-.PHONY: all clean dependents
-.SECONDARY:
-
diff --git a/TwitterClient/src/AppLogger.cpp b/TwitterClient/src/AppLogger.cpp
deleted file mode 100644
index c7c8e34..0000000
--- a/TwitterClient/src/AppLogger.cpp
+++ /dev/null
@@ -1,150 +0,0 @@
-// AppLogger.cpp
-
-#include "Poco/LoggingFactory.h"
-#include "Poco/Logger.h"
-#include "Poco/ConsoleChannel.h"
-#include "Poco/FileChannel.h"
-
-#include "../include/AppLogger.h"
-
-using namespace Poco;
-using namespace std;
-
-CAppLogger::CAppLogger(
-		const std::string& logFileName 				/*= "log.log"*/,
-		Poco::Message::Priority minFilePriority 	/*= Poco::Message::PRIO_INFORMATION*/,
-		Poco::Message::Priority minConsolePriority	/*= Poco::Message::PRIO_INFORMATION*/):mLoggers()
-{
-	// We tell the vector how much elements we it'll have - its more efficient.
-	mLoggers.resize(ELoggersCount);
-	// Build the loggers
-	mLoggers[ELoggerConsole] =
-		&Logger::create("Log.Console", LoggingFactory::defaultFactory().createChannel("ConsoleChannel"), minConsolePriority);
-	mLoggers[ELoggerFile] =
-		&Logger::create("Log.File", LoggingFactory::defaultFactory().createChannel("FileChannel"), minFilePriority);
-	//note that the priorty level set different. the file logger will have more masseges then the console logger
-
-
-	// Set file channel path property (file & directory).
-	mLoggers[ELoggerFile]->getChannel()->setProperty("path", logFileName);
-
-	// Open all loggers.
-	vector<Logger*>::iterator iterator;
-	for(iterator = mLoggers.begin();
-		iterator != mLoggers.end();
-		iterator++)
-	{
-		if (*iterator != NULL)
-		{
-			(*iterator)->getChannel()->open();
-		}
-	}
-}
-
-CAppLogger::~CAppLogger(void)
-{
-	// Close all loggers
-	vector<Logger*>::iterator iterator;
-	for(iterator = mLoggers.begin();
-		iterator != mLoggers.end();
-		iterator++)
-	{
-		if (*iterator != NULL)
-		{
-			(*iterator)->getChannel()->close();
-			(*iterator)->getChannel()->release();
-		}
-	}
-	destroyHtmlLogger();
-}
-
-void CAppLogger::Log(const std::string& inLogString, Poco::Message::Priority inPriority/* = Poco::Message::PRIO_INFORMATION*/)
-{
-	Message msg;
-	msg.setPriority(inPriority);
-
-	msg.setText(inLogString);
-
-	vector<Logger*>::iterator iterator;
-	for(iterator = mLoggers.begin();
-		iterator != mLoggers.end();
-		iterator++)
-	{
-		if (*iterator != NULL)
-		{
-			(*iterator)->log(msg);
-		}
-	}
-}
-
-void CAppLogger::Log(const std::ostringstream& inLogString, Poco::Message::Priority inPriority/* = Poco::Message::PRIO_INFORMATION*/)
-{
-	Log(inLogString.str(), inPriority);
-}
-
-
-
-void CAppLogger::StartHtmlLogger(const string& loggerName) {
-	map<string, Poco::Logger*>::iterator it = mHtmlLoggers.find(loggerName);
-	if (it != mHtmlLoggers.end())	return;			//logger exists - do nothing
-
-	Poco::Logger* logger = &Logger::create(loggerName, LoggingFactory::defaultFactory().createChannel("FileChannel"), Poco::Message::PRIO_INFORMATION);
-	logger->getChannel()->setProperty("path", loggerName+".html");
-	mHtmlLoggers[loggerName] = logger;
-	logger->getChannel()->open();
-	Message msg;
-	msg.setPriority(Poco::Message::PRIO_INFORMATION);
-	msg.setText("<html><body><h3>username: " + loggerName + "</h3><table border='solid black'>");
-	logger->log(msg);
-
-}
-
-void CAppLogger::destroyHtmlLogger() {
-
-	for(map<string, Poco::Logger*>::iterator p = mHtmlLoggers.begin(); p!=mHtmlLoggers.end(); ++p)
-	{
-		Logger* logger = p->second;
-		Message msg;
-		msg.setPriority(Poco::Message::PRIO_INFORMATION);
-		msg.setText("</table></body></html>");
-		logger->log(msg);
-		//destroy
-		logger->getChannel()->close();
-		logger->getChannel()->release();
-	}
-	mHtmlLoggers.clear();
-
-}
-
-void CAppLogger::LogHtmlRow(const string& loggerName, const string& arg0, const string& arg1, const string& arg2) {
-	map<string, Poco::Logger*>::iterator it = mHtmlLoggers.find(loggerName);
-	if (it == mHtmlLoggers.end())	return;		//logger wasnt found
-
-	Logger* logger = it->second;
-
-	stringstream ss;
-	ss << "<tr><td>" << arg0 << "</td><td>" << arg1 << "</td><td>" << arg2 << "</td></tr>";
-	Message msg;
-	msg.setPriority(Poco::Message::PRIO_INFORMATION);
-	msg.setText(ss.str());
-	logger->log(msg);
-
-}
-
-
-// Get current date/time, format is YYYY-MM-DD.HH:mm:ss
-// Get current date/time, format is DD-MM-YYYY HH:mm:ss
-const std::string CAppLogger::CurrentDateTime() {
-    time_t     now = time(0);
-    struct tm  tstruct;
-    char       buf[80];
-    tstruct = *localtime(&now);
-    // Visit http://en.cppreference.com/w/cpp/chrono/c/strftime
-    // for more information about date/time format
-    strftime(buf, sizeof(buf), "%d/%m/%Y %X", &tstruct);
-
-    return buf;
-}
-
-
-
diff --git a/TwitterClient/src/Client.cpp b/TwitterClient/src/Client.cpp
deleted file mode 100644
index 79d2fd0..0000000
--- a/TwitterClient/src/Client.cpp
+++ /dev/null
@@ -1,90 +0,0 @@
-/*
- * Client.cpp
- *
- *  Created on: Jan 7, 2014
- *      Author: amio
- */
-
-#include "../include/Client.h"
-
-
-Client::Client(Protocol& protocol):_protocol(&protocol),_isConnected(false),_shouldShutdown(false){
-	protocol.setClient(this);
-}
-Client::~Client() {
-	// TODO Auto-generated destructor stub
-}
-
-void Client::start() {
-
-    while (!_shouldShutdown) {
-        const short bufsize = 1024;
-        char buf[bufsize];
-        std::cin.getline(buf, bufsize);
-        string userInputMsg(buf);
-
-        string msgToSend;
-        bool shouldDisconnect = _protocol->processUserInput(userInputMsg, msgToSend);
-
-		if(_isConnected && msgToSend != "INVALID"){
-			if (!_pConnectionHanlder->sendString(msgToSend)) {
-				std::cout << "Disconnected. Exiting...\n" << std::endl;
-				break;
-			}
-		}
-
-		if( shouldDisconnect ){
-			_pServerResponseHandlerThread->join(); //... waiting for disconnecting gracefully..
-		}
-
-    }
-}
-
-bool Client::connect(const string& host, unsigned short port) {
-    _pConnectionHanlder = new ConnectionHandler(host, port);
-    if (!_pConnectionHanlder->connect()) {
-        std::cerr << "Could not connect to server. Check your Internet connection, IP and port." << std::endl;
-        return false;
-    }
-    _isConnected = true;
-    _pServerResponseHandlerThread = new boost::thread(&Client::startListenning, this);
-    //todo: delete it after dc
-    return true;
-}
-
-bool Client::isConnected() {
-	return _isConnected;
-}
-
-void Client::disconnect() {
-	CAppLogger::Instance().Log("Disconnecting... ",Poco::Message::PRIO_DEBUG);
-    _isConnected = false;
-    _pConnectionHanlder->close();
-    delete _pConnectionHanlder;
-}
-
-void Client::shutdown() {
-	_shouldShutdown = true;
-}
-
-void Client::startListenning() {
-	while(_isConnected){
-		string incomingMessage;
-		if (_pConnectionHanlder->getFrameAscii(incomingMessage,_protocol->getDelimiter())) //BLOCKING
-		{
-			_protocol->fixMsg(incomingMessage);
-			_protocol->processMsg(incomingMessage);
-		}
-		else
-		{
-			//if there is a problem with receiving
-			break;
-		}
-	}
-	CAppLogger::Instance().Log("Ending tcp listener thread",Poco::Message::PRIO_DEBUG);
-
-}
-
-
-
-
diff --git a/TwitterClient/src/Main.cpp b/TwitterClient/src/Main.cpp
deleted file mode 100644
index ce5f630..0000000
--- a/TwitterClient/src/Main.cpp
+++ /dev/null
@@ -1,22 +0,0 @@
-#include <stdlib.h>
-#include "../include/Client.h"
-
-#include "protocols/STOMP/StompProtocol.h"
-#include "protocols/STOMP/TweeterProtocol.h"
-#include "../include/AppLogger.h"
-/**
-* This code assumes that the server replies the exact text the client sent it (as opposed to the practical session example)
-*/
-int main (int argc, char *argv[]) {
-	//init logger
-	CAppLogger::Instance( "app.log",Poco::Message::PRIO_INFORMATION,Poco::Message::PRIO_INFORMATION );
-
-	CAppLogger::Instance().Log("Tweeter Client Started!",Poco::Message::PRIO_INFORMATION);
-
-	TweeterProtocol protocol;
-
-	Client client(protocol);
-	client.start();
-
-    return 1;
-}
diff --git a/TwitterClient/src/Protocol.cpp b/TwitterClient/src/Protocol.cpp
deleted file mode 100644
index b7634c6..0000000
--- a/TwitterClient/src/Protocol.cpp
+++ /dev/null
@@ -1,27 +0,0 @@
-/*
- * Protocol.cpp
- *
- *  Created on: Jan 7, 2014
- *      Author: amio
- */
-
-#include "../include/Protocol.h"
-
-Protocol::Protocol() {
-	// TODO Auto-generated constructor stub
-
-}
-
-Protocol::~Protocol() {
-	// TODO Auto-generated destructor stub
-}
-
-void Protocol::setClient(Client* client) {
-	_client = client;
-}
-
-void Protocol::fixMsg(string& msg) {
-}
-
-
-
diff --git a/TwitterClient/src/Utility.cpp b/TwitterClient/src/Utility.cpp
deleted file mode 100644
index dafae7f..0000000
--- a/TwitterClient/src/Utility.cpp
+++ /dev/null
@@ -1,32 +0,0 @@
-/*
- * Utility.cpp
- *
- *  Created on: Jan 8, 2014
- *      Author: arielbar
- */
-
-#include "../include/Utility.h"
-
-Utility::Utility() {
-	// TODO Auto-generated constructor stub
-
-}
-
-Utility::~Utility() {
-	// TODO Auto-generated destructor stub
-}
-
-void Utility::splitString(const string& str,char delimiter, vector<string>& output){
-	string tmp="";
-
-	for(unsigned int i=0;i<str.length();i++){
-		if(str[i] != delimiter){
-			tmp = tmp+str[i];
-		}
-		else{
-			output.push_back(tmp);
-			tmp="";
-		}
-	}
-	output.push_back(tmp);
-}
diff --git a/TwitterClient/src/connectionHandler.cpp b/TwitterClient/src/connectionHandler.cpp
deleted file mode 100644
index 32b5876..0000000
--- a/TwitterClient/src/connectionHandler.cpp
+++ /dev/null
@@ -1,107 +0,0 @@
-#include "../include/connectionHandler.h"
- 
-using boost::asio::ip::tcp;
-
-using std::cin;
-using std::cout;
-using std::cerr;
-using std::endl;
-using std::string;
- 
-ConnectionHandler::ConnectionHandler(string host, unsigned short port): host_(host), port_(port), io_service_(), socket_(io_service_){}
-    
-ConnectionHandler::~ConnectionHandler() {
-    close();
-}
- 
-bool ConnectionHandler::connect() {
-   // std::cout << "Starting connect to "
-       // << host_ << ":" << port_ << std::endl;
-    try {
-		tcp::endpoint endpoint(boost::asio::ip::address::from_string(host_), port_); // the server endpoint
-		boost::system::error_code error;
-		socket_.connect(endpoint, error);
-		if (error)
-			throw boost::system::system_error(error);
-    }
-    catch (std::exception& e) {
-        std::cerr << "Connection failed (Error: " << e.what() << ')' << std::endl;
-        return false;
-    }
-    return true;
-}
- 
-bool ConnectionHandler::getBytes(char bytes[], unsigned int bytesToRead) {
-    size_t tmp = 0;
-	boost::system::error_code error;
-    try {
-        while (!error && bytesToRead > tmp ) {
-			tmp += socket_.read_some(boost::asio::buffer(bytes+tmp, bytesToRead-tmp), error);			
-        }
-		if(error)
-			throw boost::system::system_error(error);
-    } catch (std::exception& e) {
-        //std::cerr << "getBytes recv failed (Error: " << e.what() << ')' << std::endl;
-        return false;
-    }
-    return true;
-}
-
-bool ConnectionHandler::sendBytes(const char bytes[], int bytesToWrite) {
-    int tmp = 0;
-	boost::system::error_code error;
-    try {
-        while (!error && bytesToWrite > tmp ) {
-			tmp += socket_.write_some(boost::asio::buffer(bytes + tmp, bytesToWrite - tmp), error);
-        }
-		if(error)
-			throw boost::system::system_error(error);
-    } catch (std::exception& e) {
-        std::cerr << "sendBytes recv failed (Error: " << e.what() << ')' << std::endl;
-        return false;
-    }
-    return true;
-}
- 
-bool ConnectionHandler::getLine(std::string& line) {
-    return getFrameAscii(line, '\n');
-}
-
-bool ConnectionHandler::sendLine(std::string& line) {
-    return sendFrameAscii(line, '\n');
-}
- 
-bool ConnectionHandler::getFrameAscii(std::string& frame, char delimiter) {
-    char ch;
-    // Stop when we encounter the null character. 
-    // Notice that the null character is not appended to the frame string.
-    try {
-		do{
-			if (!getBytes(&ch, 1)) return false;
-            frame.append(1, ch);
-        }while (delimiter != ch);
-    } catch (std::exception& e) {
-        std::cerr << "FrameAscii recv failed (Error: " << e.what() << ')' << std::endl;
-        return false;
-    }
-    return true;
-}
- 
-bool ConnectionHandler::sendFrameAscii(const std::string& frame, char delimiter) {
-	bool result=sendBytes(frame.c_str(),frame.length());
-	if(!result) return false;
-	return sendBytes(&delimiter,1);
-}
-
-bool ConnectionHandler::sendString(const std::string& str) {
-	return sendBytes(str.c_str(),str.length());
-}
-
-// Close down the connection properly.
-void ConnectionHandler::close() {
-    try{
-        socket_.close();
-    } catch (...) {
-        std::cout << "closing failed: connection already closed" << std::endl;
-    }
-}
diff --git a/TwitterClient/src/protocols/STOMP/StompProtocol.cpp b/TwitterClient/src/protocols/STOMP/StompProtocol.cpp
deleted file mode 100644
index 091b8f9..0000000
--- a/TwitterClient/src/protocols/STOMP/StompProtocol.cpp
+++ /dev/null
@@ -1,142 +0,0 @@
-/*
- * StompProtocol.cpp
- *
- *  Created on: Jan 7, 2014
- *      Author: amio
- */
-
-#include "StompProtocol.h"
-#include <stdlib.h>
-#include <sstream>
-#include "../../../include/AppLogger.h"
-StompProtocol::StompProtocol():_receipt(0),_subscriptionCounter(0) {
-	// TODO Auto-generated constructor stub
-
-}
-
-StompProtocol::~StompProtocol() {
-	// TODO Auto-generated destructor stub
-}
-
-/*
-void StompProtocol::chunkUpMsg(const string& str) {
-	_msgChunks << str; //add chunk to msg
-	if(str.length() > 1 && str.at(str.length()-2) == '\0'){ //when a full frame is saved process it
-		processMsg();
-		_msgChunks.str("");
-	}
-
-}
-*/
-
-char StompProtocol::getDelimiter() {
-	return '\0';
-}
-
-void StompProtocol::processMsg(const string& msg) {
-	vector<string> vec;
-	Utility::splitString(msg,'\n',vec);
-	string command = vec[0];
-
-	if		(command == "ERROR"){
-		CAppLogger::Instance().Log(vec[1].substr(8,vec[1].length()-2),Poco::Message::PRIO_INFORMATION);
-	}
-	else if	(command == "CONNECTED"){
-		CAppLogger::Instance().Log("Login Successfully",Poco::Message::PRIO_INFORMATION);
-	}
-	else if	(command == "RECEIPT"){
-		CAppLogger::Instance().Log(" RECIEVED RECEIPT. DISCONNECTING..",Poco::Message::PRIO_DEBUG);
-		_client->disconnect();
-	}
-	else if	(command == "MESSAGE"){
-		if (msg.find("following") != msg.npos)
-		{
-			string nmsg = "Now "+msg.substr(msg.find("following"));
-			CAppLogger::Instance().Log(nmsg, Poco::Message::PRIO_INFORMATION);
-		}
-		else
-		{
-			MessageFrame msgFrame(msg);
-			ostringstream debug;
-			debug << msgFrame.getDestination() << " tweets: " << msgFrame.getMsg();
-			CAppLogger::Instance().Log(debug, Poco::Message::PRIO_INFORMATION);
-			CAppLogger::Instance().LogHtmlRow(_username, msgFrame.getDestination(), msgFrame.getMsg(), msgFrame.getTime());
-		}
-	}
-
-}
-
-bool StompProtocol::processUserInput(const string& inputMsg, string& outputMsg) {
-	bool shouldDisconnect = false;
-	StompFrame* frame = NULL;
-
-    string buf; // Have a buffer string
-    stringstream ss(inputMsg); // Insert the string into a stream
-    vector<string> tokens; // Create vector to hold our words
-    while (ss >> buf){
-    	tokens.push_back(buf);		//splits with ' ' as delimiter
-    }
-
-    if(tokens[0] == "login"){ //"login ip port username password"
-    	if( _client->connect(tokens[1],atoi(tokens[2].c_str())) ){
-        	frame = new ConnectFrame(tokens[1], atoi(tokens[2].c_str()), tokens[3], tokens[4]);
-        	_username = tokens[3];
-        	_receipt ++;
-        	CAppLogger::Instance().StartHtmlLogger(_username);
-    	}
-    }
-    else if	(tokens[0] == "logout"){ //"logout"
-    	//logout
-    	frame = new DisconnectFrame(_receipt);
-    	shouldDisconnect = true;
-    }
-    else if	(tokens[0] == "exit_client"){ //"exit_client"
-    	//logout
-    	if(_client->isConnected()){
-        	frame = new DisconnectFrame(_receipt);
-        	shouldDisconnect = true;
-    	}
-    	_client->shutdown();
-    }
-    else if	(tokens[0] == "send"){ //"send destination body"
-    	int msgStartIndex = tokens[0].size()+tokens[1].size()+2;
-    	if (msgStartIndex < inputMsg.size())
-    	{
-    		frame = new SendFrame(tokens[1], inputMsg.substr(tokens[0].size()+tokens[1].size()+2));
-    	}
-    }
-    else if	(tokens[0] == "subscribe"){ //"subscribe destination"
-    	_subscriptions[tokens[1]]=_subscriptionCounter;
-    	frame = new SubscribeFrame(tokens[1], _subscriptionCounter);
-    	_subscriptionCounter++;
-    }
-    else if	(tokens[0] == "unsubscribe"){ //"subscribe destination"
-    	map<string,int>::iterator it =_subscriptions.find(tokens[1]);
-
-    	if( it == _subscriptions.end() ){ //not found
-    		//todo: print not found msg
-    		if (tokens[1] == _username)
-    		{
-    			frame = new UnsubscribeFrame(-1);
-    		}
-    	}
-    	else{
-        	frame = new UnsubscribeFrame(it->second);
-        	_subscriptions.erase(it);
-    	}
-    }
-
-    if(frame == NULL) outputMsg = "INVALID";
-
-    outputMsg = frame->toString();
-    delete frame;
-    return shouldDisconnect;
-}
-
-void StompProtocol::fixMsg(string& msg) {
-	while (msg.length()>0 && msg.at(0)=='\n')	//remove unneeded line breaks
-	{
-		msg = msg.substr(1);
-	}
-}
-
diff --git a/TwitterClient/src/protocols/STOMP/StompProtocol.h b/TwitterClient/src/protocols/STOMP/StompProtocol.h
deleted file mode 100644
index 385f4f0..0000000
--- a/TwitterClient/src/protocols/STOMP/StompProtocol.h
+++ /dev/null
@@ -1,41 +0,0 @@
-/*
- * StompProtocol.h
- *
- *  Created on: Jan 7, 2014
- *      Author: amio
- */
-
-#ifndef STOMPPROTOCOL_H_
-#define STOMPPROTOCOL_H_
-
-#include "../../../include/Protocol.h"
-#include <vector>
-#include "frames/ConnectFrame.h"
-#include "frames/DisconnectFrame.h"
-#include "frames/SendFrame.h"
-#include <map>
-#include "frames/SubscribeFrame.h"
-#include "frames/UnsubscribeFrame.h"
-#include "frames/MessageFrame.h"
-
-//TODO: add more
-
-class StompProtocol: public Protocol {
-public:
-	StompProtocol();
-	virtual ~StompProtocol();
-	virtual bool processUserInput(const string& inputMsg, string& outputMsg);
-	virtual char getDelimiter();
-	virtual void processMsg(const string& msg);
-	//void chunkUpMsg(const string& str);
-	virtual void fixMsg(string& msg);	//corrects diversions from protocol
-
-protected:
-	string _username;
-private:
-	int _receipt;
-	int _subscriptionCounter;
-	map<string,int> _subscriptions;
-};
-
-#endif /* STOMPPROTOCOL_H_ */
diff --git a/TwitterClient/src/protocols/STOMP/TweeterProtocol.cpp b/TwitterClient/src/protocols/STOMP/TweeterProtocol.cpp
deleted file mode 100644
index 4d47c6e..0000000
--- a/TwitterClient/src/protocols/STOMP/TweeterProtocol.cpp
+++ /dev/null
@@ -1,59 +0,0 @@
-/*
- * TweeterProtocol.cpp
- *
- *  Created on: Jan 8, 2014
- *      Author: arielbar
- */
-
-#include "TweeterProtocol.h"
-
-TweeterProtocol::TweeterProtocol() {
-	// TODO Auto-generated constructor stub
-
-}
-
-TweeterProtocol::~TweeterProtocol() {
-	// TODO Auto-generated destructor stub
-}
-
-bool TweeterProtocol::processUserInput(const string& inputMsg,string& outputMsg) {
-    string buf; // Have a buffer string
-    stringstream ss(inputMsg); // Insert the string into a stream
-    vector<string> tokens; // Create vector to hold our words
-    while (ss >> buf){
-    	tokens.push_back(buf);		//splits with ' ' as delimiter
-    }
-
-    ostringstream stompInputMsg;
-
-	if	(tokens[0] == "follow"){ 			//follow username
-		stompInputMsg << "subscribe " << tokens[1];
-	}
-	else if	(tokens[0] == "unfollow"){ 		//unfollow username
-		stompInputMsg << "unsubscribe " << tokens[1];
-	}
-	else if	(tokens[0] == "tweet" && inputMsg.size()>6){ 		//tweet msg
-		stompInputMsg << "send " << _username << " " << inputMsg.substr(6);
-	}
-	else if	(tokens[0] == "clients"){
-		stompInputMsg << "send server clients";
-		if (tokens[1] == "online") stompInputMsg << " online";
-	}
-	else if	(tokens[0] == "stats"){
-		stompInputMsg << "send server stats";
-	}
-	else if	(tokens[0] == "stop"){
-		stompInputMsg << "send server stop";
-		StompProtocol::processUserInput(stompInputMsg.str(), outputMsg);
-		return true;
-	}
-	else
-	{
-		//login \ logout \ exit_client
-		stompInputMsg << inputMsg;
-	}
-
-    return StompProtocol::processUserInput(stompInputMsg.str(), outputMsg);
-}
-
-
diff --git a/TwitterClient/src/protocols/STOMP/TweeterProtocol.h b/TwitterClient/src/protocols/STOMP/TweeterProtocol.h
deleted file mode 100644
index 9cd686e..0000000
--- a/TwitterClient/src/protocols/STOMP/TweeterProtocol.h
+++ /dev/null
@@ -1,24 +0,0 @@
-/*
- * TweeterProtocol.h
- *
- *  Created on: Jan 8, 2014
- *      Author: arielbar
- */
-
-#ifndef TWEETERPROTOCOL_H_
-#define TWEETERPROTOCOL_H_
-
-#include "StompProtocol.h"
-
-class TweeterProtocol: public StompProtocol {
-public:
-	TweeterProtocol();
-	virtual ~TweeterProtocol();
-
-	virtual bool processUserInput(const string& inputMsg, string& outputMsg);
-
-protected:
-	//virtual void processMsg();
-};
-
-#endif /* TWEETERPROTOCOL_H_ */
diff --git a/TwitterClient/src/protocols/STOMP/frames/ConnectFrame.cpp b/TwitterClient/src/protocols/STOMP/frames/ConnectFrame.cpp
deleted file mode 100644
index ec4d87f..0000000
--- a/TwitterClient/src/protocols/STOMP/frames/ConnectFrame.cpp
+++ /dev/null
@@ -1,32 +0,0 @@
-/*
- * ConnectFrame.cpp
- *
- *  Created on: Jan 7, 2014
- *      Author: amio
- */
-
-#include "ConnectFrame.h"
-
-
-//ConnectFrame::ConnectFrame()
-//{
-//}
-
-ConnectFrame::ConnectFrame(const string& hostIP, unsigned short port,
-		const string& username, const string& password):_hostIP(hostIP),_port(port),_username(username),_password(password) {
-
-}
-
-ConnectFrame::~ConnectFrame() {
-}
-
-string ConnectFrame::toString() {
-	vector<pair<string,string> > vec;
-	vec.push_back(make_pair("accept-version","1.2"));
-	vec.push_back(make_pair("host",_hostIP));
-	vec.push_back(make_pair("login",_username));
-	vec.push_back(make_pair("passcode",_password));
-	return makeFrame("CONNECT",vec,"");
-}
-
-
diff --git a/TwitterClient/src/protocols/STOMP/frames/ConnectFrame.h b/TwitterClient/src/protocols/STOMP/frames/ConnectFrame.h
deleted file mode 100644
index 4b8c56e..0000000
--- a/TwitterClient/src/protocols/STOMP/frames/ConnectFrame.h
+++ /dev/null
@@ -1,29 +0,0 @@
-/*
- * ConnectFrame.h
- *
- *  Created on: Jan 7, 2014
- *      Author: amio
- */
-
-#ifndef CONNECTFRAME_H_
-#define CONNECTFRAME_H_
-
-#include "StompFrame.h"
-#include <string>
-using namespace std;
-
-class ConnectFrame:public StompFrame {
-public:
-	//ConnectFrame();
-	ConnectFrame(const string& hostIP, unsigned short port, const string& username, const string& password);
-	virtual ~ConnectFrame();
-	virtual string toString();
-
-private:
-	string _hostIP;
-	unsigned short _port;
-	string _username;
-	string _password;
-};
-
-#endif /* CONNECTFRAME_H_ */
diff --git a/TwitterClient/src/protocols/STOMP/frames/DisconnectFrame.cpp b/TwitterClient/src/protocols/STOMP/frames/DisconnectFrame.cpp
deleted file mode 100644
index 7c531c0..0000000
--- a/TwitterClient/src/protocols/STOMP/frames/DisconnectFrame.cpp
+++ /dev/null
@@ -1,28 +0,0 @@
-/*
- * DisconnectFrame.cpp
- *
- *  Created on: Jan 7, 2014
- *      Author: amio
- */
-
-#include "DisconnectFrame.h"
-
-DisconnectFrame::DisconnectFrame(int receipt):_currentReceipt(receipt) {
-	// TODO Auto-generated constructor stub
-
-}
-
-DisconnectFrame::~DisconnectFrame() {
-	// TODO Auto-generated destructor stub
-}
-
-string DisconnectFrame::toString() {
-	vector<pair<string,string> > vec;
-	ostringstream recipt;
-	recipt << _currentReceipt;
-	vec.push_back(make_pair("receipt",recipt.str()));
-	return makeFrame("DISCONNECT",vec,"");
-
-}
-
-
diff --git a/TwitterClient/src/protocols/STOMP/frames/DisconnectFrame.h b/TwitterClient/src/protocols/STOMP/frames/DisconnectFrame.h
deleted file mode 100644
index e9f3608..0000000
--- a/TwitterClient/src/protocols/STOMP/frames/DisconnectFrame.h
+++ /dev/null
@@ -1,23 +0,0 @@
-/*
- * DisconnectFrame.h
- *
- *  Created on: Jan 7, 2014
- *      Author: amio
- */
-
-#ifndef DISCONNECTFRAME_H_
-#define DISCONNECTFRAME_H_
-
-#include "StompFrame.h"
-#include <sstream>
-
-class DisconnectFrame: public StompFrame {
-public:
-	DisconnectFrame(int receipt);
-	virtual ~DisconnectFrame();
-	virtual string toString();
-private:
-	int _currentReceipt;
-};
-
-#endif /* DISCONNECTFRAME_H_ */
diff --git a/TwitterClient/src/protocols/STOMP/frames/MessageFrame.cpp b/TwitterClient/src/protocols/STOMP/frames/MessageFrame.cpp
deleted file mode 100644
index 6a4df6a..0000000
--- a/TwitterClient/src/protocols/STOMP/frames/MessageFrame.cpp
+++ /dev/null
@@ -1,67 +0,0 @@
-/*
- * MessageFrame.cpp
- *
- *  Created on: Jan 10, 2014
- *      Author: amio
- */
-
-#include "MessageFrame.h"
-
-MessageFrame::MessageFrame(const string& unencodedchars) {
-
-	_originalFrameMsg = unencodedchars;
-	vector<string> vec;
-	Utility::splitString(unencodedchars,'\n',vec);
-
-	if (vec.size() < 3)		return;
-
-	string dest("destination");
-	string time("time");
-
-	//get destination from msg
-	unsigned int i = 1;
-	for ( ; i<vec.size() && vec[i].size()>0; i++)
-	{
-		if (vec[i].size()>dest.size() && vec[i].substr(0,dest.size()) == dest)
-		{
-			_destination = vec[i].substr(dest.size()+1);
-		}
-		else if (vec[i].size()>time.size() && vec[i].substr(0,time.size()) == time)
-		{
-			_time = vec[i].substr(time.size()+1);
-		}
-
-	}
-
-	stringstream ss;
-	for ( ; i<vec.size(); i++)
-	{
-		ss << vec[i];
-	}
-	_msg = ss.str();
-
-}
-
-MessageFrame::~MessageFrame() {
-	// TODO Auto-generated destructor stub
-}
-
-string MessageFrame::toString()
-{
-	return _originalFrameMsg;
-}
-
-string& MessageFrame::getMsg() {
-	return _msg;
-}
-
-string& MessageFrame::getDestination() {
-	return _destination;
-}
-
-string& MessageFrame::getTime() {
-	return _time;
-}
-
-
-
diff --git a/TwitterClient/src/protocols/STOMP/frames/MessageFrame.h b/TwitterClient/src/protocols/STOMP/frames/MessageFrame.h
deleted file mode 100644
index 184f4c1..0000000
--- a/TwitterClient/src/protocols/STOMP/frames/MessageFrame.h
+++ /dev/null
@@ -1,36 +0,0 @@
-/*
- * MessageFrame.h
- *
- *  Created on: Jan 10, 2014
- *      Author: amio
- */
-
-#ifndef MESSAGEFRAME_H_
-#define MESSAGEFRAME_H_
-
-#include <sstream>
-#include "../../../../include/AppLogger.h"
-#include "../../../../include/Utility.h"
-#include "StompFrame.h"
-using namespace std;
-
-class MessageFrame: public StompFrame {
-public:
-	MessageFrame(const string& unencodedchars);
-	virtual ~MessageFrame();
-
-	virtual string toString();
-
-	string& getMsg();
-	string& getDestination();
-	string& getTime();
-
-private:
-	string _msg;
-	string _destination;
-	string _time;
-	string _originalFrameMsg;
-
-};
-
-#endif /* MESSAGEFRAME_H_ */
diff --git a/TwitterClient/src/protocols/STOMP/frames/SendFrame.cpp b/TwitterClient/src/protocols/STOMP/frames/SendFrame.cpp
deleted file mode 100644
index 71498e8..0000000
--- a/TwitterClient/src/protocols/STOMP/frames/SendFrame.cpp
+++ /dev/null
@@ -1,24 +0,0 @@
-/*
- * SendFrame.cpp
- *
- *  Created on: Jan 7, 2014
- *      Author: amio
- */
-
-#include "SendFrame.h"
-
-
-SendFrame::SendFrame(const string& destination, const string& body):_destination(destination),_body(body) {
-}
-
-SendFrame::~SendFrame() {
-	// TODO Auto-generated destructor stub
-}
-
-string SendFrame::toString() {
-	vector<pair<string,string> > vec;
-	vec.push_back(make_pair("destination",_destination));
-	return makeFrame("SEND",vec,_body);
-}
-
-
diff --git a/TwitterClient/src/protocols/STOMP/frames/SendFrame.h b/TwitterClient/src/protocols/STOMP/frames/SendFrame.h
deleted file mode 100644
index b83f448..0000000
--- a/TwitterClient/src/protocols/STOMP/frames/SendFrame.h
+++ /dev/null
@@ -1,23 +0,0 @@
-/*
- * SendFrame.h
- *
- *  Created on: Jan 7, 2014
- *      Author: amio
- */
-
-#ifndef SENDFRAME_H_
-#define SENDFRAME_H_
-
-#include "StompFrame.h"
-
-class SendFrame: public StompFrame {
-public:
-	SendFrame(const string& destination,const string& body);
-	virtual ~SendFrame();
-	virtual string toString();
-private:
-	string _destination;
-	string _body;
-};
-
-#endif /* SENDFRAME_H_ */
diff --git a/TwitterClient/src/protocols/STOMP/frames/StompFrame.cpp b/TwitterClient/src/protocols/STOMP/frames/StompFrame.cpp
deleted file mode 100644
index 67431c5..0000000
--- a/TwitterClient/src/protocols/STOMP/frames/StompFrame.cpp
+++ /dev/null
@@ -1,36 +0,0 @@
-/*
- * StompFrame.cpp
- *
- *  Created on: Jan 7, 2014
- *      Author: amio
- */
-
-#include "StompFrame.h"
-#include <sstream>
-StompFrame::StompFrame() {
-	// TODO Auto-generated constructor stub
-
-}
-
-StompFrame::~StompFrame() {
-	// TODO Auto-generated destructor stub
-}
-
-
-string StompFrame::makeFrame(const string& header,vector<pair<string, string> > pairs, const string& body) {
-	ostringstream output;
-	output << header;
-	output << '\n';
-	for (unsigned int i = 0; i < pairs.size(); ++i) {
-		output << pairs[i].first << ':' << pairs[i].second;
-		output << '\n';
-	}
-	output << '\n';
-	output << body;
-	output << '\n';
-	output << '\0';
-
-	return output.str();
-}
-
-
diff --git a/TwitterClient/src/protocols/STOMP/frames/StompFrame.h b/TwitterClient/src/protocols/STOMP/frames/StompFrame.h
deleted file mode 100644
index 0b6fa86..0000000
--- a/TwitterClient/src/protocols/STOMP/frames/StompFrame.h
+++ /dev/null
@@ -1,28 +0,0 @@
-/*
- * StompFrame.h
- *
- *  Created on: Jan 7, 2014
- *      Author: amio
- */
-
-#ifndef STOMPFRAME_H_
-#define STOMPFRAME_H_
-
-#include <string>
-#include <vector>
-
-using namespace std;
-
-class StompFrame {
-public:
-	StompFrame();
-	virtual ~StompFrame();
-	virtual string toString() =0;
-
-protected:
-	string makeFrame(const string& header, vector<pair<string,string> > pairs,const string& body);
-
-
-};
-
-#endif /* STOMPFRAME_H_ */
diff --git a/TwitterClient/src/protocols/STOMP/frames/SubscribeFrame.cpp b/TwitterClient/src/protocols/STOMP/frames/SubscribeFrame.cpp
deleted file mode 100644
index 001c913..0000000
--- a/TwitterClient/src/protocols/STOMP/frames/SubscribeFrame.cpp
+++ /dev/null
@@ -1,26 +0,0 @@
-/*
- * SubscribeFrame.cpp
- *
- *  Created on: Jan 7, 2014
- *      Author: amio
- */
-
-#include "SubscribeFrame.h"
-
-SubscribeFrame::SubscribeFrame(const string& destination, int id):_destination(destination),_id(id) {
-}
-
-SubscribeFrame::~SubscribeFrame() {
-	// TODO Auto-generated destructor stub
-}
-
-string SubscribeFrame::toString() {
-	vector<pair<string,string> > vec;
-	vec.push_back(make_pair("destination",_destination));
-	ostringstream id;
-	id << _id;
-	vec.push_back(make_pair("id",id.str()));
-	return makeFrame("SUBSCRIBE",vec,"");
-}
-
-
diff --git a/TwitterClient/src/protocols/STOMP/frames/SubscribeFrame.h b/TwitterClient/src/protocols/STOMP/frames/SubscribeFrame.h
deleted file mode 100644
index 9a4bba4..0000000
--- a/TwitterClient/src/protocols/STOMP/frames/SubscribeFrame.h
+++ /dev/null
@@ -1,23 +0,0 @@
-/*
- * SubscribeFrame.h
- *
- *  Created on: Jan 7, 2014
- *      Author: amio
- */
-
-#ifndef SUBSCRIBEFRAME_H_
-#define SUBSCRIBEFRAME_H_
-
-#include "StompFrame.h"
-#include <sstream>
-class SubscribeFrame: public StompFrame {
-public:
-	SubscribeFrame(const string& destination, int id);
-	virtual ~SubscribeFrame();
-	virtual string toString();
-private:
-	string _destination;
-	int _id;
-};
-
-#endif /* SUBSCRIBEFRAME_H_ */
diff --git a/TwitterClient/src/protocols/STOMP/frames/UnsubscribeFrame.cpp b/TwitterClient/src/protocols/STOMP/frames/UnsubscribeFrame.cpp
deleted file mode 100644
index 6627d55..0000000
--- a/TwitterClient/src/protocols/STOMP/frames/UnsubscribeFrame.cpp
+++ /dev/null
@@ -1,25 +0,0 @@
-/*
- * UnsubscribeFrame.cpp
- *
- *  Created on: Jan 8, 2014
- *      Author: arielbar
- */
-
-#include "UnsubscribeFrame.h"
-
-UnsubscribeFrame::UnsubscribeFrame(int id) :_id(id){
-}
-
-UnsubscribeFrame::~UnsubscribeFrame() {
-	// TODO Auto-generated destructor stub
-}
-
-string UnsubscribeFrame::toString() {
-	vector<pair<string,string> > vec;
-	ostringstream id;
-	id << _id;
-	vec.push_back(make_pair("id",id.str()));
-	return makeFrame("UNSUBSCRIBE",vec,"");
-}
-
-
diff --git a/TwitterClient/src/protocols/STOMP/frames/UnsubscribeFrame.h b/TwitterClient/src/protocols/STOMP/frames/UnsubscribeFrame.h
deleted file mode 100644
index 21fb44d..0000000
--- a/TwitterClient/src/protocols/STOMP/frames/UnsubscribeFrame.h
+++ /dev/null
@@ -1,23 +0,0 @@
-/*
- * UnsubscribeFrame.h
- *
- *  Created on: Jan 8, 2014
- *      Author: arielbar
- */
-
-#ifndef UNSUBSCRIBEFRAME_H_
-#define UNSUBSCRIBEFRAME_H_
-
-#include "StompFrame.h"
-#include <sstream>
-
-class UnsubscribeFrame: public StompFrame {
-public:
-	UnsubscribeFrame(int id);
-	virtual ~UnsubscribeFrame();
-	virtual string toString();
-private:
-	int _id;
-};
-
-#endif /* UNSUBSCRIBEFRAME_H_ */
diff --git a/asm.h b/asm.h
new file mode 100644
index 0000000..68210d7
--- /dev/null
+++ b/asm.h
@@ -0,0 +1,21 @@
+//
+// assembler macros to create x86 segments
+//
+
+#define SEG_NULLASM                                             \
+        .word 0, 0;                                             \
+        .byte 0, 0, 0, 0
+
+// The 0xC0 means the limit is in 4096-byte units
+// and (for executable segments) 32-bit mode.
+#define SEG_ASM(type,base,lim)                                  \
+        .word (((lim) >> 12) & 0xffff), ((base) & 0xffff);      \
+        .byte (((base) >> 16) & 0xff), (0x90 | (type)),         \
+                (0xC0 | (((lim) >> 28) & 0xf)), (((base) >> 24) & 0xff)
+
+#define STA_X     0x8       // Executable segment
+#define STA_E     0x4       // Expand down (non-executable segments)
+#define STA_C     0x4       // Conforming code segment (executable only)
+#define STA_W     0x2       // Writeable (non-executable segments)
+#define STA_R     0x2       // Readable (executable segments)
+#define STA_A     0x1       // Accessed
diff --git a/bio.c b/bio.c
new file mode 100644
index 0000000..6a28053
--- /dev/null
+++ b/bio.c
@@ -0,0 +1,143 @@
+// Buffer cache.
+//
+// The buffer cache is a linked list of buf structures holding
+// cached copies of disk block contents.  Caching disk blocks
+// in memory reduces the number of disk reads and also provides
+// a synchronization point for disk blocks used by multiple processes.
+// 
+// Interface:
+// * To get a buffer for a particular disk block, call bread.
+// * After changing buffer data, call bwrite to write it to disk.
+// * When done with the buffer, call brelse.
+// * Do not use the buffer after calling brelse.
+// * Only one process at a time can use a buffer,
+//     so do not keep them longer than necessary.
+// 
+// The implementation uses three state flags internally:
+// * B_BUSY: the block has been returned from bread
+//     and has not been passed back to brelse.  
+// * B_VALID: the buffer data has been read from the disk.
+// * B_DIRTY: the buffer data has been modified
+//     and needs to be written to disk.
+
+#include "types.h"
+#include "defs.h"
+#include "param.h"
+#include "spinlock.h"
+#include "buf.h"
+
+struct {
+  struct spinlock lock;
+  struct buf buf[NBUF];
+
+  // Linked list of all buffers, through prev/next.
+  // head.next is most recently used.
+  struct buf head;
+} bcache;
+
+void
+binit(void)
+{
+  struct buf *b;
+
+  initlock(&bcache.lock, "bcache");
+
+//PAGEBREAK!
+  // Create linked list of buffers
+  bcache.head.prev = &bcache.head;
+  bcache.head.next = &bcache.head;
+  for(b = bcache.buf; b < bcache.buf+NBUF; b++){
+    b->next = bcache.head.next;
+    b->prev = &bcache.head;
+    b->dev = -1;
+    bcache.head.next->prev = b;
+    bcache.head.next = b;
+  }
+}
+
+// Look through buffer cache for sector on device dev.
+// If not found, allocate a buffer.
+// In either case, return B_BUSY buffer.
+static struct buf*
+bget(uint dev, uint sector)
+{
+  struct buf *b;
+
+  acquire(&bcache.lock);
+
+ loop:
+  // Is the sector already cached?
+  for(b = bcache.head.next; b != &bcache.head; b = b->next){
+    if(b->dev == dev && b->sector == sector){
+      if(!(b->flags & B_BUSY)){
+        b->flags |= B_BUSY;
+        release(&bcache.lock);
+        return b;
+      }
+      sleep(b, &bcache.lock);
+      goto loop;
+    }
+  }
+
+  // Not cached; recycle some non-busy and clean buffer.
+  // "clean" because B_DIRTY and !B_BUSY means log.c
+  // hasn't yet committed the changes to the buffer.
+  for(b = bcache.head.prev; b != &bcache.head; b = b->prev){
+    if((b->flags & B_BUSY) == 0 && (b->flags & B_DIRTY) == 0){
+      b->dev = dev;
+      b->sector = sector;
+      b->flags = B_BUSY;
+      release(&bcache.lock);
+      return b;
+    }
+  }
+  panic("bget: no buffers");
+}
+
+// Return a B_BUSY buf with the contents of the indicated disk sector.
+struct buf*
+bread(uint dev, uint sector)
+{
+  struct buf *b;
+
+  b = bget(dev, sector);
+  if(!(b->flags & B_VALID))
+    iderw(b);
+  return b;
+}
+
+// Write b's contents to disk.  Must be B_BUSY.
+void
+bwrite(struct buf *b)
+{
+  if((b->flags & B_BUSY) == 0)
+    panic("bwrite");
+  b->flags |= B_DIRTY;
+  iderw(b);
+}
+
+// Release a B_BUSY buffer.
+// Move to the head of the MRU list.
+void
+brelse(struct buf *b)
+{
+  if((b->flags & B_BUSY) == 0)
+    panic("brelse");
+
+  acquire(&bcache.lock);
+
+  b->next->prev = b->prev;
+  b->prev->next = b->next;
+  b->next = bcache.head.next;
+  b->prev = &bcache.head;
+  bcache.head.next->prev = b;
+  bcache.head.next = b;
+
+  b->flags &= ~B_BUSY;
+  wakeup(b);
+
+  release(&bcache.lock);
+}
+//PAGEBREAK!
+// Blank page.
+
diff --git a/bootasm.S b/bootasm.S
new file mode 100644
index 0000000..91a595e
--- /dev/null
+++ b/bootasm.S
@@ -0,0 +1,88 @@
+#include "asm.h"
+#include "memlayout.h"
+#include "mmu.h"
+
+# Start the first CPU: switch to 32-bit protected mode, jump into C.
+# The BIOS loads this code from the first sector of the hard disk into
+# memory at physical address 0x7c00 and starts executing in real mode
+# with %cs=0 %ip=7c00.
+
+.code16                       # Assemble for 16-bit mode
+.globl start
+start:
+  cli                         # BIOS enabled interrupts; disable
+
+  # Zero data segment registers DS, ES, and SS.
+  xorw    %ax,%ax             # Set %ax to zero
+  movw    %ax,%ds             # -> Data Segment
+  movw    %ax,%es             # -> Extra Segment
+  movw    %ax,%ss             # -> Stack Segment
+
+  # Physical address line A20 is tied to zero so that the first PCs 
+  # with 2 MB would run software that assumed 1 MB.  Undo that.
+seta20.1:
+  inb     $0x64,%al               # Wait for not busy
+  testb   $0x2,%al
+  jnz     seta20.1
+
+  movb    $0xd1,%al               # 0xd1 -> port 0x64
+  outb    %al,$0x64
+
+seta20.2:
+  inb     $0x64,%al               # Wait for not busy
+  testb   $0x2,%al
+  jnz     seta20.2
+
+  movb    $0xdf,%al               # 0xdf -> port 0x60
+  outb    %al,$0x60
+
+  # Switch from real to protected mode.  Use a bootstrap GDT that makes
+  # virtual addresses map directly to physical addresses so that the
+  # effective memory map doesn't change during the transition.
+  lgdt    gdtdesc
+  movl    %cr0, %eax
+  orl     $CR0_PE, %eax
+  movl    %eax, %cr0
+
+//PAGEBREAK!
+  # Complete transition to 32-bit protected mode by using long jmp
+  # to reload %cs and %eip.  The segment descriptors are set up with no
+  # translation, so that the mapping is still the identity mapping.
+  ljmp    $(SEG_KCODE<<3), $start32
+
+.code32  # Tell assembler to generate 32-bit code now.
+start32:
+  # Set up the protected-mode data segment registers
+  movw    $(SEG_KDATA<<3), %ax    # Our data segment selector
+  movw    %ax, %ds                # -> DS: Data Segment
+  movw    %ax, %es                # -> ES: Extra Segment
+  movw    %ax, %ss                # -> SS: Stack Segment
+  movw    $0, %ax                 # Zero segments not ready for use
+  movw    %ax, %fs                # -> FS
+  movw    %ax, %gs                # -> GS
+
+  # Set up the stack pointer and call into C.
+  movl    $start, %esp
+  call    bootmain
+
+  # If bootmain returns (it shouldn't), trigger a Bochs
+  # breakpoint if running under Bochs, then loop.
+  movw    $0x8a00, %ax            # 0x8a00 -> port 0x8a00
+  movw    %ax, %dx
+  outw    %ax, %dx
+  movw    $0x8ae0, %ax            # 0x8ae0 -> port 0x8a00
+  outw    %ax, %dx
+spin:
+  jmp     spin
+
+# Bootstrap GDT
+.p2align 2                                # force 4 byte alignment
+gdt:
+  SEG_NULLASM                             # null seg
+  SEG_ASM(STA_X|STA_R, 0x0, 0xffffffff)   # code seg
+  SEG_ASM(STA_W, 0x0, 0xffffffff)         # data seg
+
+gdtdesc:
+  .word   (gdtdesc - gdt - 1)             # sizeof(gdt) - 1
+  .long   gdt                             # address gdt
+
diff --git a/bootmain.c b/bootmain.c
new file mode 100644
index 0000000..d24bf66
--- /dev/null
+++ b/bootmain.c
@@ -0,0 +1,96 @@
+// Boot loader.
+// 
+// Part of the boot sector, along with bootasm.S, which calls bootmain().
+// bootasm.S has put the processor into protected 32-bit mode.
+// bootmain() loads an ELF kernel image from the disk starting at
+// sector 1 and then jumps to the kernel entry routine.
+
+#include "types.h"
+#include "elf.h"
+#include "x86.h"
+#include "memlayout.h"
+
+#define SECTSIZE  512
+
+void readseg(uchar*, uint, uint);
+
+void
+bootmain(void)
+{
+  struct elfhdr *elf;
+  struct proghdr *ph, *eph;
+  void (*entry)(void);
+  uchar* pa;
+
+  elf = (struct elfhdr*)0x10000;  // scratch space
+
+  // Read 1st page off disk
+  readseg((uchar*)elf, 4096, 0);
+
+  // Is this an ELF executable?
+  if(elf->magic != ELF_MAGIC)
+    return;  // let bootasm.S handle error
+
+  // Load each program segment (ignores ph flags).
+  ph = (struct proghdr*)((uchar*)elf + elf->phoff);
+  eph = ph + elf->phnum;
+  for(; ph < eph; ph++){
+    pa = (uchar*)ph->paddr;
+    readseg(pa, ph->filesz, ph->off);
+    if(ph->memsz > ph->filesz)
+      stosb(pa + ph->filesz, 0, ph->memsz - ph->filesz);
+  }
+
+  // Call the entry point from the ELF header.
+  // Does not return!
+  entry = (void(*)(void))(elf->entry);
+  entry();
+}
+
+void
+waitdisk(void)
+{
+  // Wait for disk ready.
+  while((inb(0x1F7) & 0xC0) != 0x40)
+    ;
+}
+
+// Read a single sector at offset into dst.
+void
+readsect(void *dst, uint offset)
+{
+  // Issue command.
+  waitdisk();
+  outb(0x1F2, 1);   // count = 1
+  outb(0x1F3, offset);
+  outb(0x1F4, offset >> 8);
+  outb(0x1F5, offset >> 16);
+  outb(0x1F6, (offset >> 24) | 0xE0);
+  outb(0x1F7, 0x20);  // cmd 0x20 - read sectors
+
+  // Read data.
+  waitdisk();
+  insl(0x1F0, dst, SECTSIZE/4);
+}
+
+// Read 'count' bytes at 'offset' from kernel into physical address 'pa'.
+// Might copy more than asked.
+void
+readseg(uchar* pa, uint count, uint offset)
+{
+  uchar* epa;
+
+  epa = pa + count;
+
+  // Round down to sector boundary.
+  pa -= offset % SECTSIZE;
+
+  // Translate from bytes to sectors; kernel starts at sector 1.
+  offset = (offset / SECTSIZE) + 1;
+
+  // If this is too slow, we could read lots of sectors at a time.
+  // We'd write more to memory than asked, but it doesn't matter --
+  // we load in increasing order.
+  for(; pa < epa; pa += SECTSIZE, offset++)
+    readsect(pa, offset);
+}
diff --git a/buf.h b/buf.h
new file mode 100644
index 0000000..9c586f2
--- /dev/null
+++ b/buf.h
@@ -0,0 +1,13 @@
+struct buf {
+  int flags;
+  uint dev;
+  uint sector;
+  struct buf *prev; // LRU cache list
+  struct buf *next;
+  struct buf *qnext; // disk queue
+  uchar data[512];
+};
+#define B_BUSY  0x1  // buffer is locked by some process
+#define B_VALID 0x2  // buffer has been read from disk
+#define B_DIRTY 0x4  // buffer needs to be written to disk
+
diff --git a/cat.c b/cat.c
new file mode 100644
index 0000000..2b2dcc7
--- /dev/null
+++ b/cat.c
@@ -0,0 +1,39 @@
+#include "types.h"
+#include "stat.h"
+#include "user.h"
+
+char buf[512];
+
+void
+cat(int fd)
+{
+  int n;
+
+  while((n = read(fd, buf, sizeof(buf))) > 0)
+    write(1, buf, n);
+  if(n < 0){
+    printf(1, "cat: read error\n");
+    exit();
+  }
+}
+
+int
+main(int argc, char *argv[])
+{
+  int fd, i;
+
+  if(argc <= 1){
+    cat(0);
+    exit();
+  }
+
+  for(i = 1; i < argc; i++){
+    if((fd = open(argv[i], 0)) < 0){
+      printf(1, "cat: cannot open %s\n", argv[i]);
+      exit();
+    }
+    cat(fd);
+    close(fd);
+  }
+  exit();
+}
diff --git a/console.c b/console.c
new file mode 100644
index 0000000..766dc30
--- /dev/null
+++ b/console.c
@@ -0,0 +1,293 @@
+// Console input and output.
+// Input is from the keyboard or serial port.
+// Output is written to the screen and serial port.
+
+#include "types.h"
+#include "defs.h"
+#include "param.h"
+#include "traps.h"
+#include "spinlock.h"
+#include "fs.h"
+#include "file.h"
+#include "memlayout.h"
+#include "mmu.h"
+#include "proc.h"
+#include "x86.h"
+
+static void consputc(int);
+
+static int panicked = 0;
+
+static struct {
+  struct spinlock lock;
+  int locking;
+} cons;
+
+static void
+printint(int xx, int base, int sign)
+{
+  static char digits[] = "0123456789abcdef";
+  char buf[16];
+  int i;
+  uint x;
+
+  if(sign && (sign = xx < 0))
+    x = -xx;
+  else
+    x = xx;
+
+  i = 0;
+  do{
+    buf[i++] = digits[x % base];
+  }while((x /= base) != 0);
+
+  if(sign)
+    buf[i++] = '-';
+
+  while(--i >= 0)
+    consputc(buf[i]);
+}
+//PAGEBREAK: 50
+
+// Print to the console. only understands %d, %x, %p, %s.
+void
+cprintf(char *fmt, ...)
+{
+  int i, c, locking;
+  uint *argp;
+  char *s;
+
+  locking = cons.locking;
+  if(locking)
+    acquire(&cons.lock);
+
+  if (fmt == 0)
+    panic("null fmt");
+
+  argp = (uint*)(void*)(&fmt + 1);
+  for(i = 0; (c = fmt[i] & 0xff) != 0; i++){
+    if(c != '%'){
+      consputc(c);
+      continue;
+    }
+    c = fmt[++i] & 0xff;
+    if(c == 0)
+      break;
+    switch(c){
+    case 'd':
+      printint(*argp++, 10, 1);
+      break;
+    case 'x':
+    case 'p':
+      printint(*argp++, 16, 0);
+      break;
+    case 's':
+      if((s = (char*)*argp++) == 0)
+        s = "(null)";
+      for(; *s; s++)
+        consputc(*s);
+      break;
+    case '%':
+      consputc('%');
+      break;
+    default:
+      // Print unknown % sequence to draw attention.
+      consputc('%');
+      consputc(c);
+      break;
+    }
+  }
+
+  if(locking)
+    release(&cons.lock);
+}
+
+void
+panic(char *s)
+{
+  int i;
+  uint pcs[10];
+  
+  cli();
+  cons.locking = 0;
+  cprintf("cpu%d: panic: ", cpu->id);
+  cprintf(s);
+  cprintf("\n");
+  getcallerpcs(&s, pcs);
+  for(i=0; i<10; i++)
+    cprintf(" %p", pcs[i]);
+  panicked = 1; // freeze other CPU
+  for(;;)
+    ;
+}
+
+//PAGEBREAK: 50
+#define BACKSPACE 0x100
+#define CRTPORT 0x3d4
+static ushort *crt = (ushort*)P2V(0xb8000);  // CGA memory
+
+static void
+cgaputc(int c)
+{
+  int pos;
+  
+  // Cursor position: col + 80*row.
+  outb(CRTPORT, 14);
+  pos = inb(CRTPORT+1) << 8;
+  outb(CRTPORT, 15);
+  pos |= inb(CRTPORT+1);
+
+  if(c == '\n')
+    pos += 80 - pos%80;
+  else if(c == BACKSPACE){
+    if(pos > 0) --pos;
+  } else
+    crt[pos++] = (c&0xff) | 0x0700;  // black on white
+  
+  if((pos/80) >= 24){  // Scroll up.
+    memmove(crt, crt+80, sizeof(crt[0])*23*80);
+    pos -= 80;
+    memset(crt+pos, 0, sizeof(crt[0])*(24*80 - pos));
+  }
+  
+  outb(CRTPORT, 14);
+  outb(CRTPORT+1, pos>>8);
+  outb(CRTPORT, 15);
+  outb(CRTPORT+1, pos);
+  crt[pos] = ' ' | 0x0700;
+}
+
+void
+consputc(int c)
+{
+  if(panicked){
+    cli();
+    for(;;)
+      ;
+  }
+
+  if(c == BACKSPACE){
+    uartputc('\b'); uartputc(' '); uartputc('\b');
+  } else
+    uartputc(c);
+  cgaputc(c);
+}
+
+#define INPUT_BUF 128
+struct {
+  struct spinlock lock;
+  char buf[INPUT_BUF];
+  uint r;  // Read index
+  uint w;  // Write index
+  uint e;  // Edit index
+} input;
+
+#define C(x)  ((x)-'@')  // Control-x
+
+void
+consoleintr(int (*getc)(void))
+{
+  int c;
+
+  acquire(&input.lock);
+  while((c = getc()) >= 0){
+    switch(c){
+    case C('P'):  // Process listing.
+      procdump();
+      break;
+    case C('U'):  // Kill line.
+      while(input.e != input.w &&
+            input.buf[(input.e-1) % INPUT_BUF] != '\n'){
+        input.e--;
+        consputc(BACKSPACE);
+      }
+      break;
+    case C('H'): case '\x7f':  // Backspace
+      if(input.e != input.w){
+        input.e--;
+        consputc(BACKSPACE);
+      }
+      break;
+    default:
+      if(c != 0 && input.e-input.r < INPUT_BUF){
+        c = (c == '\r') ? '\n' : c;
+        input.buf[input.e++ % INPUT_BUF] = c;
+        consputc(c);
+        if(c == '\n' || c == C('D') || input.e == input.r+INPUT_BUF){
+          input.w = input.e;
+          wakeup(&input.r);
+        }
+      }
+      break;
+    }
+  }
+  release(&input.lock);
+}
+
+int
+consoleread(struct inode *ip, char *dst, int n)
+{
+  uint target;
+  int c;
+
+  iunlock(ip);
+  target = n;
+  acquire(&input.lock);
+  while(n > 0){
+    while(input.r == input.w){
+      if(proc->killed){
+        release(&input.lock);
+        ilock(ip);
+        return -1;
+      }
+      sleep(&input.r, &input.lock);
+    }
+    c = input.buf[input.r++ % INPUT_BUF];
+    if(c == C('D')){  // EOF
+      if(n < target){
+        // Save ^D for next time, to make sure
+        // caller gets a 0-byte result.
+        input.r--;
+      }
+      break;
+    }
+    *dst++ = c;
+    --n;
+    if(c == '\n')
+      break;
+  }
+  release(&input.lock);
+  ilock(ip);
+
+  return target - n;
+}
+
+int
+consolewrite(struct inode *ip, char *buf, int n)
+{
+  int i;
+
+  iunlock(ip);
+  acquire(&cons.lock);
+  for(i = 0; i < n; i++)
+    consputc(buf[i] & 0xff);
+  release(&cons.lock);
+  ilock(ip);
+
+  return n;
+}
+
+void
+consoleinit(void)
+{
+  initlock(&cons.lock, "console");
+  initlock(&input.lock, "input");
+
+  devsw[CONSOLE].write = consolewrite;
+  devsw[CONSOLE].read = consoleread;
+  cons.locking = 1;
+
+  picenable(IRQ_KBD);
+  ioapicenable(IRQ_KBD, 0);
+}
+
diff --git a/date.h b/date.h
new file mode 100644
index 0000000..dd8f4b0
--- /dev/null
+++ b/date.h
@@ -0,0 +1,8 @@
+struct rtcdate {
+	uint second;
+	uint minute;
+	uint hour;
+	uint day;
+	uint month;
+	uint year;
+};
diff --git a/defs.h b/defs.h
new file mode 100644
index 0000000..43431e3
--- /dev/null
+++ b/defs.h
@@ -0,0 +1,183 @@
+struct buf;
+struct context;
+struct file;
+struct inode;
+struct pipe;
+struct proc;
+struct rtcdate;
+struct spinlock;
+struct stat;
+struct superblock;
+
+// bio.c
+void            binit(void);
+struct buf*     bread(uint, uint);
+void            brelse(struct buf*);
+void            bwrite(struct buf*);
+
+// console.c
+void            consoleinit(void);
+void            cprintf(char*, ...);
+void            consoleintr(int(*)(void));
+void            panic(char*) __attribute__((noreturn));
+
+// exec.c
+int             exec(char*, char**);
+
+// file.c
+struct file*    filealloc(void);
+void            fileclose(struct file*);
+struct file*    filedup(struct file*);
+void            fileinit(void);
+int             fileread(struct file*, char*, int n);
+int             filestat(struct file*, struct stat*);
+int             filewrite(struct file*, char*, int n);
+
+// fs.c
+void            readsb(int dev, struct superblock *sb);
+int             dirlink(struct inode*, char*, uint);
+struct inode*   dirlookup(struct inode*, char*, uint*);
+struct inode*   ialloc(uint, short);
+struct inode*   idup(struct inode*);
+void            iinit(void);
+void            ilock(struct inode*);
+void            iput(struct inode*);
+void            iunlock(struct inode*);
+void            iunlockput(struct inode*);
+void            iupdate(struct inode*);
+int             namecmp(const char*, const char*);
+struct inode*   namei(char*);
+struct inode*   nameiparent(char*, char*);
+int             readi(struct inode*, char*, uint, uint);
+void            stati(struct inode*, struct stat*);
+int             writei(struct inode*, char*, uint, uint);
+
+// ide.c
+void            ideinit(void);
+void            ideintr(void);
+void            iderw(struct buf*);
+
+// ioapic.c
+void            ioapicenable(int irq, int cpu);
+extern uchar    ioapicid;
+void            ioapicinit(void);
+
+// kalloc.c
+char*           kalloc(void);
+void            kfree(char*);
+void            kinit1(void*, void*);
+void            kinit2(void*, void*);
+
+// kbd.c
+void            kbdintr(void);
+
+// lapic.c
+void            cmostime(struct rtcdate *r);
+int             cpunum(void);
+extern volatile uint*    lapic;
+void            lapiceoi(void);
+void            lapicinit(void);
+void            lapicstartap(uchar, uint);
+void            microdelay(int);
+
+// log.c
+void            initlog(void);
+void            log_write(struct buf*);
+void            begin_op();
+void            end_op();
+
+// mp.c
+extern int      ismp;
+int             mpbcpu(void);
+void            mpinit(void);
+void            mpstartthem(void);
+
+// picirq.c
+void            picenable(int);
+void            picinit(void);
+
+// pipe.c
+int             pipealloc(struct file**, struct file**);
+void            pipeclose(struct pipe*, int);
+int             piperead(struct pipe*, char*, int);
+int             pipewrite(struct pipe*, char*, int);
+
+//PAGEBREAK: 16
+// proc.c
+struct proc*    copyproc(struct proc*);
+void            exit(void);
+int             fork(void);
+int             growproc(int);
+int             kill(int);
+void            pinit(void);
+void            procdump(void);
+void            scheduler(void) __attribute__((noreturn));
+void            sched(void);
+void            sleep(void*, struct spinlock*);
+void            userinit(void);
+int             wait(void);
+void            wakeup(void*);
+void            yield(void);
+
+// swtch.S
+void            swtch(struct context**, struct context*);
+
+// spinlock.c
+void            acquire(struct spinlock*);
+void            getcallerpcs(void*, uint*);
+int             holding(struct spinlock*);
+void            initlock(struct spinlock*, char*);
+void            release(struct spinlock*);
+void            pushcli(void);
+void            popcli(void);
+
+// string.c
+int             memcmp(const void*, const void*, uint);
+void*           memmove(void*, const void*, uint);
+void*           memset(void*, int, uint);
+char*           safestrcpy(char*, const char*, int);
+int             strlen(const char*);
+int             strncmp(const char*, const char*, uint);
+char*           strncpy(char*, const char*, int);
+
+// syscall.c
+int             argint(int, int*);
+int             argptr(int, char**, int);
+int             argstr(int, char**);
+int             fetchint(uint, int*);
+int             fetchstr(uint, char**);
+void            syscall(void);
+
+// timer.c
+void            timerinit(void);
+
+// trap.c
+void            idtinit(void);
+extern uint     ticks;
+void            tvinit(void);
+extern struct spinlock tickslock;
+
+// uart.c
+void            uartinit(void);
+void            uartintr(void);
+void            uartputc(int);
+
+// vm.c
+void            seginit(void);
+void            kvmalloc(void);
+void            vmenable(void);
+pde_t*          setupkvm(void);
+char*           uva2ka(pde_t*, char*);
+int             allocuvm(pde_t*, uint, uint);
+int             deallocuvm(pde_t*, uint, uint);
+void            freevm(pde_t*);
+void            inituvm(pde_t*, char*, uint);
+int             loaduvm(pde_t*, char*, struct inode*, uint, uint);
+pde_t*          copyuvm(pde_t*, uint);
+void            switchuvm(struct proc*);
+void            switchkvm(void);
+int             copyout(pde_t*, uint, void*, uint);
+void            clearpteu(pde_t *pgdir, char *uva);
+
+// number of elements in fixed-size array
+#define NELEM(x) (sizeof(x)/sizeof((x)[0]))
diff --git a/echo.c b/echo.c
new file mode 100644
index 0000000..806dee0
--- /dev/null
+++ b/echo.c
@@ -0,0 +1,13 @@
+#include "types.h"
+#include "stat.h"
+#include "user.h"
+
+int
+main(int argc, char *argv[])
+{
+  int i;
+
+  for(i = 1; i < argc; i++)
+    printf(1, "%s%s", argv[i], i+1 < argc ? " " : "\n");
+  exit();
+}
diff --git a/elf.h b/elf.h
new file mode 100644
index 0000000..d16c967
--- /dev/null
+++ b/elf.h
@@ -0,0 +1,42 @@
+// Format of an ELF executable file
+
+#define ELF_MAGIC 0x464C457FU  // "\x7FELF" in little endian
+
+// File header
+struct elfhdr {
+  uint magic;  // must equal ELF_MAGIC
+  uchar elf[12];
+  ushort type;
+  ushort machine;
+  uint version;
+  uint entry;
+  uint phoff;
+  uint shoff;
+  uint flags;
+  ushort ehsize;
+  ushort phentsize;
+  ushort phnum;
+  ushort shentsize;
+  ushort shnum;
+  ushort shstrndx;
+};
+
+// Program section header
+struct proghdr {
+  uint type;
+  uint off;
+  uint vaddr;
+  uint paddr;
+  uint filesz;
+  uint memsz;
+  uint flags;
+  uint align;
+};
+
+// Values for Proghdr type
+#define ELF_PROG_LOAD           1
+
+// Flag bits for Proghdr flags
+#define ELF_PROG_FLAG_EXEC      1
+#define ELF_PROG_FLAG_WRITE     2
+#define ELF_PROG_FLAG_READ      4
diff --git a/entry.S b/entry.S
new file mode 100644
index 0000000..5f4e124
--- /dev/null
+++ b/entry.S
@@ -0,0 +1,64 @@
+# Multiboot header, for multiboot boot loaders like GNU Grub.
+# http://www.gnu.org/software/grub/manual/multiboot/multiboot.html
+#
+# Using GRUB 2, you can boot xv6 from a file stored in a
+# Linux file system by copying kernel or kernelmemfs to /boot
+# and then adding this menu entry:
+#
+# menuentry "xv6" {
+# 	insmod ext2
+# 	set root='(hd0,msdos1)'
+# 	set kernel='/boot/kernel'
+# 	echo "Loading ${kernel}..."
+# 	multiboot ${kernel} ${kernel}
+# 	boot
+# }
+
+#include "asm.h"
+#include "memlayout.h"
+#include "mmu.h"
+#include "param.h"
+
+# Multiboot header.  Data to direct multiboot loader.
+.p2align 2
+.text
+.globl multiboot_header
+multiboot_header:
+  #define magic 0x1badb002
+  #define flags 0
+  .long magic
+  .long flags
+  .long (-magic-flags)
+
+# By convention, the _start symbol specifies the ELF entry point.
+# Since we haven't set up virtual memory yet, our entry point is
+# the physical address of 'entry'.
+.globl _start
+_start = V2P_WO(entry)
+
+# Entering xv6 on boot processor, with paging off.
+.globl entry
+entry:
+  # Turn on page size extension for 4Mbyte pages
+  movl    %cr4, %eax
+  orl     $(CR4_PSE), %eax
+  movl    %eax, %cr4
+  # Set page directory
+  movl    $(V2P_WO(entrypgdir)), %eax
+  movl    %eax, %cr3
+  # Turn on paging.
+  movl    %cr0, %eax
+  orl     $(CR0_PG|CR0_WP), %eax
+  movl    %eax, %cr0
+
+  # Set up the stack pointer.
+  movl $(stack + KSTACKSIZE), %esp
+
+  # Jump to main(), and switch to executing at
+  # high addresses. The indirect call is needed because
+  # the assembler produces a PC-relative instruction
+  # for a direct jump.
+  mov $main, %eax
+  jmp *%eax
+
+.comm stack, KSTACKSIZE
diff --git a/entryother.S b/entryother.S
new file mode 100644
index 0000000..9f94cd3
--- /dev/null
+++ b/entryother.S
@@ -0,0 +1,87 @@
+#include "asm.h"
+#include "memlayout.h"
+#include "mmu.h"
+	
+# Each non-boot CPU ("AP") is started up in response to a STARTUP
+# IPI from the boot CPU.  Section B.4.2 of the Multi-Processor
+# Specification says that the AP will start in real mode with CS:IP
+# set to XY00:0000, where XY is an 8-bit value sent with the
+# STARTUP. Thus this code must start at a 4096-byte boundary.
+#
+# Because this code sets DS to zero, it must sit
+# at an address in the low 2^16 bytes.
+#
+# Startothers (in main.c) sends the STARTUPs one at a time.
+# It copies this code (start) at 0x7000.  It puts the address of
+# a newly allocated per-core stack in start-4,the address of the
+# place to jump to (mpenter) in start-8, and the physical address
+# of entrypgdir in start-12.
+#
+# This code is identical to bootasm.S except:
+#   - it does not need to enable A20
+#   - it uses the address at start-4, start-8, and start-12
+
+.code16           
+.globl start
+start:
+  cli            
+
+  xorw    %ax,%ax
+  movw    %ax,%ds
+  movw    %ax,%es
+  movw    %ax,%ss
+
+  lgdt    gdtdesc
+  movl    %cr0, %eax
+  orl     $CR0_PE, %eax
+  movl    %eax, %cr0
+
+//PAGEBREAK!
+  ljmpl    $(SEG_KCODE<<3), $(start32)
+
+.code32
+start32:
+  movw    $(SEG_KDATA<<3), %ax
+  movw    %ax, %ds
+  movw    %ax, %es
+  movw    %ax, %ss
+  movw    $0, %ax
+  movw    %ax, %fs
+  movw    %ax, %gs
+
+  # Turn on page size extension for 4Mbyte pages
+  movl    %cr4, %eax
+  orl     $(CR4_PSE), %eax
+  movl    %eax, %cr4
+  # Use enterpgdir as our initial page table
+  movl    (start-12), %eax
+  movl    %eax, %cr3
+  # Turn on paging.
+  movl    %cr0, %eax
+  orl     $(CR0_PE|CR0_PG|CR0_WP), %eax
+  movl    %eax, %cr0
+
+  # Switch to the stack allocated by startothers()
+  movl    (start-4), %esp
+  # Call mpenter()
+  call	 *(start-8)
+
+  movw    $0x8a00, %ax
+  movw    %ax, %dx
+  outw    %ax, %dx
+  movw    $0x8ae0, %ax
+  outw    %ax, %dx
+spin:
+  jmp     spin
+
+.p2align 2
+gdt:
+  SEG_NULLASM
+  SEG_ASM(STA_X|STA_R, 0, 0xffffffff)
+  SEG_ASM(STA_W, 0, 0xffffffff)
+
+
+gdtdesc:
+  .word   (gdtdesc - gdt - 1)
+  .long   gdt
+
diff --git a/exec.c b/exec.c
new file mode 100644
index 0000000..8dbbdb6
--- /dev/null
+++ b/exec.c
@@ -0,0 +1,107 @@
+#include "types.h"
+#include "param.h"
+#include "memlayout.h"
+#include "mmu.h"
+#include "proc.h"
+#include "defs.h"
+#include "x86.h"
+#include "elf.h"
+
+int
+exec(char *path, char **argv)
+{
+  char *s, *last;
+  int i, off;
+  uint argc, sz, sp, ustack[3+MAXARG+1];
+  struct elfhdr elf;
+  struct inode *ip;
+  struct proghdr ph;
+  pde_t *pgdir, *oldpgdir;
+
+  begin_op();
+  if((ip = namei(path)) == 0){
+    end_op();
+    return -1;
+  }
+  ilock(ip);
+  pgdir = 0;
+
+  // Check ELF header
+  if(readi(ip, (char*)&elf, 0, sizeof(elf)) < sizeof(elf))
+    goto bad;
+  if(elf.magic != ELF_MAGIC)
+    goto bad;
+
+  if((pgdir = setupkvm()) == 0)
+    goto bad;
+
+  // Load program into memory.
+  sz = 0;
+  for(i=0, off=elf.phoff; i<elf.phnum; i++, off+=sizeof(ph)){
+    if(readi(ip, (char*)&ph, off, sizeof(ph)) != sizeof(ph))
+      goto bad;
+    if(ph.type != ELF_PROG_LOAD)
+      continue;
+    if(ph.memsz < ph.filesz)
+      goto bad;
+    if((sz = allocuvm(pgdir, sz, ph.vaddr + ph.memsz)) == 0)
+      goto bad;
+    if(loaduvm(pgdir, (char*)ph.vaddr, ip, ph.off, ph.filesz) < 0)
+      goto bad;
+  }
+  iunlockput(ip);
+  end_op();
+  ip = 0;
+
+  // Allocate two pages at the next page boundary.
+  // Make the first inaccessible.  Use the second as the user stack.
+  sz = PGROUNDUP(sz);
+  if((sz = allocuvm(pgdir, sz, sz + 2*PGSIZE)) == 0)
+    goto bad;
+  clearpteu(pgdir, (char*)(sz - 2*PGSIZE));
+  sp = sz;
+
+  // Push argument strings, prepare rest of stack in ustack.
+  for(argc = 0; argv[argc]; argc++) {
+    if(argc >= MAXARG)
+      goto bad;
+    sp = (sp - (strlen(argv[argc]) + 1)) & ~3;
+    if(copyout(pgdir, sp, argv[argc], strlen(argv[argc]) + 1) < 0)
+      goto bad;
+    ustack[3+argc] = sp;
+  }
+  ustack[3+argc] = 0;
+
+  ustack[0] = 0xffffffff;  // fake return PC
+  ustack[1] = argc;
+  ustack[2] = sp - (argc+1)*4;  // argv pointer
+
+  sp -= (3+argc+1) * 4;
+  if(copyout(pgdir, sp, ustack, (3+argc+1)*4) < 0)
+    goto bad;
+
+  // Save program name for debugging.
+  for(last=s=path; *s; s++)
+    if(*s == '/')
+      last = s+1;
+  safestrcpy(proc->name, last, sizeof(proc->name));
+
+  // Commit to the user image.
+  oldpgdir = proc->pgdir;
+  proc->pgdir = pgdir;
+  proc->sz = sz;
+  proc->tf->eip = elf.entry;  // main
+  proc->tf->esp = sp;
+  switchuvm(proc);
+  freevm(oldpgdir);
+  return 0;
+
+ bad:
+  if(pgdir)
+    freevm(pgdir);
+  if(ip){
+    iunlockput(ip);
+    end_op();
+  }
+  return -1;
+}
diff --git a/fcntl.h b/fcntl.h
new file mode 100644
index 0000000..d565483
--- /dev/null
+++ b/fcntl.h
@@ -0,0 +1,4 @@
+#define O_RDONLY  0x000
+#define O_WRONLY  0x001
+#define O_RDWR    0x002
+#define O_CREATE  0x200
diff --git a/file.c b/file.c
new file mode 100644
index 0000000..98cad1e
--- /dev/null
+++ b/file.c
@@ -0,0 +1,156 @@
+//
+// File descriptors
+//
+
+#include "types.h"
+#include "defs.h"
+#include "param.h"
+#include "fs.h"
+#include "file.h"
+#include "spinlock.h"
+
+struct devsw devsw[NDEV];
+struct {
+  struct spinlock lock;
+  struct file file[NFILE];
+} ftable;
+
+void
+fileinit(void)
+{
+  initlock(&ftable.lock, "ftable");
+}
+
+// Allocate a file structure.
+struct file*
+filealloc(void)
+{
+  struct file *f;
+
+  acquire(&ftable.lock);
+  for(f = ftable.file; f < ftable.file + NFILE; f++){
+    if(f->ref == 0){
+      f->ref = 1;
+      release(&ftable.lock);
+      return f;
+    }
+  }
+  release(&ftable.lock);
+  return 0;
+}
+
+// Increment ref count for file f.
+struct file*
+filedup(struct file *f)
+{
+  acquire(&ftable.lock);
+  if(f->ref < 1)
+    panic("filedup");
+  f->ref++;
+  release(&ftable.lock);
+  return f;
+}
+
+// Close file f.  (Decrement ref count, close when reaches 0.)
+void
+fileclose(struct file *f)
+{
+  struct file ff;
+
+  acquire(&ftable.lock);
+  if(f->ref < 1)
+    panic("fileclose");
+  if(--f->ref > 0){
+    release(&ftable.lock);
+    return;
+  }
+  ff = *f;
+  f->ref = 0;
+  f->type = FD_NONE;
+  release(&ftable.lock);
+  
+  if(ff.type == FD_PIPE)
+    pipeclose(ff.pipe, ff.writable);
+  else if(ff.type == FD_INODE){
+    begin_op();
+    iput(ff.ip);
+    end_op();
+  }
+}
+
+// Get metadata about file f.
+int
+filestat(struct file *f, struct stat *st)
+{
+  if(f->type == FD_INODE){
+    ilock(f->ip);
+    stati(f->ip, st);
+    iunlock(f->ip);
+    return 0;
+  }
+  return -1;
+}
+
+// Read from file f.
+int
+fileread(struct file *f, char *addr, int n)
+{
+  int r;
+
+  if(f->readable == 0)
+    return -1;
+  if(f->type == FD_PIPE)
+    return piperead(f->pipe, addr, n);
+  if(f->type == FD_INODE){
+    ilock(f->ip);
+    if((r = readi(f->ip, addr, f->off, n)) > 0)
+      f->off += r;
+    iunlock(f->ip);
+    return r;
+  }
+  panic("fileread");
+}
+
+//PAGEBREAK!
+// Write to file f.
+int
+filewrite(struct file *f, char *addr, int n)
+{
+  int r;
+
+  if(f->writable == 0)
+    return -1;
+  if(f->type == FD_PIPE)
+    return pipewrite(f->pipe, addr, n);
+  if(f->type == FD_INODE){
+    // write a few blocks at a time to avoid exceeding
+    // the maximum log transaction size, including
+    // i-node, indirect block, allocation blocks,
+    // and 2 blocks of slop for non-aligned writes.
+    // this really belongs lower down, since writei()
+    // might be writing a device like the console.
+    int max = ((LOGSIZE-1-1-2) / 2) * 512;
+    int i = 0;
+    while(i < n){
+      int n1 = n - i;
+      if(n1 > max)
+        n1 = max;
+
+      begin_op();
+      ilock(f->ip);
+      if ((r = writei(f->ip, addr + i, f->off, n1)) > 0)
+        f->off += r;
+      iunlock(f->ip);
+      end_op();
+
+      if(r < 0)
+        break;
+      if(r != n1)
+        panic("short filewrite");
+      i += r;
+    }
+    return i == n ? n : -1;
+  }
+  panic("filewrite");
+}
+
diff --git a/file.h b/file.h
new file mode 100644
index 0000000..5a4a463
--- /dev/null
+++ b/file.h
@@ -0,0 +1,41 @@
+struct file {
+  enum { FD_NONE, FD_PIPE, FD_INODE } type;
+  int ref; // reference count
+  char readable;
+  char writable;
+  struct pipe *pipe;
+  struct inode *ip;
+  uint off;
+};
+
+
+// in-memory copy of an inode
+struct inode {
+  uint dev;           // Device number
+  uint inum;          // Inode number
+  int ref;            // Reference count
+  int flags;          // I_BUSY, I_VALID
+
+  short type;         // copy of disk inode
+  short major;
+  short minor;
+  short nlink;
+  uint size;
+  uint addrs[NDIRECT+1];
+};
+#define I_BUSY 0x1
+#define I_VALID 0x2
+
+// table mapping major device number to
+// device functions
+struct devsw {
+  int (*read)(struct inode*, char*, int);
+  int (*write)(struct inode*, char*, int);
+};
+
+extern struct devsw devsw[];
+
+#define CONSOLE 1
+
+//PAGEBREAK!
+// Blank page.
diff --git a/forktest.c b/forktest.c
new file mode 100644
index 0000000..bb286e6
--- /dev/null
+++ b/forktest.c
@@ -0,0 +1,56 @@
+// Test that fork fails gracefully.
+// Tiny executable so that the limit can be filling the proc table.
+
+#include "types.h"
+#include "stat.h"
+#include "user.h"
+
+#define N  1000
+
+void
+printf(int fd, char *s, ...)
+{
+  write(fd, s, strlen(s));
+}
+
+void
+forktest(void)
+{
+  int n, pid;
+
+  printf(1, "fork test\n");
+
+  for(n=0; n<N; n++){
+    pid = fork();
+    if(pid < 0)
+      break;
+    if(pid == 0)
+      exit();
+  }
+  
+  if(n == N){
+    printf(1, "fork claimed to work N times!\n", N);
+    exit();
+  }
+  
+  for(; n > 0; n--){
+    if(wait() < 0){
+      printf(1, "wait stopped early\n");
+      exit();
+    }
+  }
+  
+  if(wait() != -1){
+    printf(1, "wait got too many\n");
+    exit();
+  }
+  
+  printf(1, "fork test OK\n");
+}
+
+int
+main(void)
+{
+  forktest();
+  exit();
+}
diff --git a/fs.c b/fs.c
new file mode 100644
index 0000000..1803cb4
--- /dev/null
+++ b/fs.c
@@ -0,0 +1,653 @@
+// File system implementation.  Five layers:
+//   + Blocks: allocator for raw disk blocks.
+//   + Log: crash recovery for multi-step updates.
+//   + Files: inode allocator, reading, writing, metadata.
+//   + Directories: inode with special contents (list of other inodes!)
+//   + Names: paths like /usr/rtm/xv6/fs.c for convenient naming.
+//
+// This file contains the low-level file system manipulation 
+// routines.  The (higher-level) system call implementations
+// are in sysfile.c.
+
+#include "types.h"
+#include "defs.h"
+#include "param.h"
+#include "stat.h"
+#include "mmu.h"
+#include "proc.h"
+#include "spinlock.h"
+#include "buf.h"
+#include "fs.h"
+#include "file.h"
+
+#define min(a, b) ((a) < (b) ? (a) : (b))
+static void itrunc(struct inode*);
+
+// Read the super block.
+void
+readsb(int dev, struct superblock *sb)
+{
+  struct buf *bp;
+  
+  bp = bread(dev, 1);
+  memmove(sb, bp->data, sizeof(*sb));
+  brelse(bp);
+}
+
+// Zero a block.
+static void
+bzero(int dev, int bno)
+{
+  struct buf *bp;
+  
+  bp = bread(dev, bno);
+  memset(bp->data, 0, BSIZE);
+  log_write(bp);
+  brelse(bp);
+}
+
+// Blocks. 
+
+// Allocate a zeroed disk block.
+static uint
+balloc(uint dev)
+{
+  int b, bi, m;
+  struct buf *bp;
+  struct superblock sb;
+
+  bp = 0;
+  readsb(dev, &sb);
+  for(b = 0; b < sb.size; b += BPB){
+    bp = bread(dev, BBLOCK(b, sb.ninodes));
+    for(bi = 0; bi < BPB && b + bi < sb.size; bi++){
+      m = 1 << (bi % 8);
+      if((bp->data[bi/8] & m) == 0){  // Is block free?
+        bp->data[bi/8] |= m;  // Mark block in use.
+        log_write(bp);
+        brelse(bp);
+        bzero(dev, b + bi);
+        return b + bi;
+      }
+    }
+    brelse(bp);
+  }
+  panic("balloc: out of blocks");
+}
+
+// Free a disk block.
+static void
+bfree(int dev, uint b)
+{
+  struct buf *bp;
+  struct superblock sb;
+  int bi, m;
+
+  readsb(dev, &sb);
+  bp = bread(dev, BBLOCK(b, sb.ninodes));
+  bi = b % BPB;
+  m = 1 << (bi % 8);
+  if((bp->data[bi/8] & m) == 0)
+    panic("freeing free block");
+  bp->data[bi/8] &= ~m;
+  log_write(bp);
+  brelse(bp);
+}
+
+// Inodes.
+//
+// An inode describes a single unnamed file.
+// The inode disk structure holds metadata: the file's type,
+// its size, the number of links referring to it, and the
+// list of blocks holding the file's content.
+//
+// The inodes are laid out sequentially on disk immediately after
+// the superblock. Each inode has a number, indicating its
+// position on the disk.
+//
+// The kernel keeps a cache of in-use inodes in memory
+// to provide a place for synchronizing access
+// to inodes used by multiple processes. The cached
+// inodes include book-keeping information that is
+// not stored on disk: ip->ref and ip->flags.
+//
+// An inode and its in-memory represtative go through a
+// sequence of states before they can be used by the
+// rest of the file system code.
+//
+// * Allocation: an inode is allocated if its type (on disk)
+//   is non-zero. ialloc() allocates, iput() frees if
+//   the link count has fallen to zero.
+//
+// * Referencing in cache: an entry in the inode cache
+//   is free if ip->ref is zero. Otherwise ip->ref tracks
+//   the number of in-memory pointers to the entry (open
+//   files and current directories). iget() to find or
+//   create a cache entry and increment its ref, iput()
+//   to decrement ref.
+//
+// * Valid: the information (type, size, &c) in an inode
+//   cache entry is only correct when the I_VALID bit
+//   is set in ip->flags. ilock() reads the inode from
+//   the disk and sets I_VALID, while iput() clears
+//   I_VALID if ip->ref has fallen to zero.
+//
+// * Locked: file system code may only examine and modify
+//   the information in an inode and its content if it
+//   has first locked the inode. The I_BUSY flag indicates
+//   that the inode is locked. ilock() sets I_BUSY,
+//   while iunlock clears it.
+//
+// Thus a typical sequence is:
+//   ip = iget(dev, inum)
+//   ilock(ip)
+//   ... examine and modify ip->xxx ...
+//   iunlock(ip)
+//   iput(ip)
+//
+// ilock() is separate from iget() so that system calls can
+// get a long-term reference to an inode (as for an open file)
+// and only lock it for short periods (e.g., in read()).
+// The separation also helps avoid deadlock and races during
+// pathname lookup. iget() increments ip->ref so that the inode
+// stays cached and pointers to it remain valid.
+//
+// Many internal file system functions expect the caller to
+// have locked the inodes involved; this lets callers create
+// multi-step atomic operations.
+
+struct {
+  struct spinlock lock;
+  struct inode inode[NINODE];
+} icache;
+
+void
+iinit(void)
+{
+  initlock(&icache.lock, "icache");
+}
+
+static struct inode* iget(uint dev, uint inum);
+
+//PAGEBREAK!
+// Allocate a new inode with the given type on device dev.
+// A free inode has a type of zero.
+struct inode*
+ialloc(uint dev, short type)
+{
+  int inum;
+  struct buf *bp;
+  struct dinode *dip;
+  struct superblock sb;
+
+  readsb(dev, &sb);
+
+  for(inum = 1; inum < sb.ninodes; inum++){
+    bp = bread(dev, IBLOCK(inum));
+    dip = (struct dinode*)bp->data + inum%IPB;
+    if(dip->type == 0){  // a free inode
+      memset(dip, 0, sizeof(*dip));
+      dip->type = type;
+      log_write(bp);   // mark it allocated on the disk
+      brelse(bp);
+      return iget(dev, inum);
+    }
+    brelse(bp);
+  }
+  panic("ialloc: no inodes");
+}
+
+// Copy a modified in-memory inode to disk.
+void
+iupdate(struct inode *ip)
+{
+  struct buf *bp;
+  struct dinode *dip;
+
+  bp = bread(ip->dev, IBLOCK(ip->inum));
+  dip = (struct dinode*)bp->data + ip->inum%IPB;
+  dip->type = ip->type;
+  dip->major = ip->major;
+  dip->minor = ip->minor;
+  dip->nlink = ip->nlink;
+  dip->size = ip->size;
+  memmove(dip->addrs, ip->addrs, sizeof(ip->addrs));
+  log_write(bp);
+  brelse(bp);
+}
+
+// Find the inode with number inum on device dev
+// and return the in-memory copy. Does not lock
+// the inode and does not read it from disk.
+static struct inode*
+iget(uint dev, uint inum)
+{
+  struct inode *ip, *empty;
+
+  acquire(&icache.lock);
+
+  // Is the inode already cached?
+  empty = 0;
+  for(ip = &icache.inode[0]; ip < &icache.inode[NINODE]; ip++){
+    if(ip->ref > 0 && ip->dev == dev && ip->inum == inum){
+      ip->ref++;
+      release(&icache.lock);
+      return ip;
+    }
+    if(empty == 0 && ip->ref == 0)    // Remember empty slot.
+      empty = ip;
+  }
+
+  // Recycle an inode cache entry.
+  if(empty == 0)
+    panic("iget: no inodes");
+
+  ip = empty;
+  ip->dev = dev;
+  ip->inum = inum;
+  ip->ref = 1;
+  ip->flags = 0;
+  release(&icache.lock);
+
+  return ip;
+}
+
+// Increment reference count for ip.
+// Returns ip to enable ip = idup(ip1) idiom.
+struct inode*
+idup(struct inode *ip)
+{
+  acquire(&icache.lock);
+  ip->ref++;
+  release(&icache.lock);
+  return ip;
+}
+
+// Lock the given inode.
+// Reads the inode from disk if necessary.
+void
+ilock(struct inode *ip)
+{
+  struct buf *bp;
+  struct dinode *dip;
+
+  if(ip == 0 || ip->ref < 1)
+    panic("ilock");
+
+  acquire(&icache.lock);
+  while(ip->flags & I_BUSY)
+    sleep(ip, &icache.lock);
+  ip->flags |= I_BUSY;
+  release(&icache.lock);
+
+  if(!(ip->flags & I_VALID)){
+    bp = bread(ip->dev, IBLOCK(ip->inum));
+    dip = (struct dinode*)bp->data + ip->inum%IPB;
+    ip->type = dip->type;
+    ip->major = dip->major;
+    ip->minor = dip->minor;
+    ip->nlink = dip->nlink;
+    ip->size = dip->size;
+    memmove(ip->addrs, dip->addrs, sizeof(ip->addrs));
+    brelse(bp);
+    ip->flags |= I_VALID;
+    if(ip->type == 0)
+      panic("ilock: no type");
+  }
+}
+
+// Unlock the given inode.
+void
+iunlock(struct inode *ip)
+{
+  if(ip == 0 || !(ip->flags & I_BUSY) || ip->ref < 1)
+    panic("iunlock");
+
+  acquire(&icache.lock);
+  ip->flags &= ~I_BUSY;
+  wakeup(ip);
+  release(&icache.lock);
+}
+
+// Drop a reference to an in-memory inode.
+// If that was the last reference, the inode cache entry can
+// be recycled.
+// If that was the last reference and the inode has no links
+// to it, free the inode (and its content) on disk.
+// All calls to iput() must be inside a transaction in
+// case it has to free the inode.
+void
+iput(struct inode *ip)
+{
+  acquire(&icache.lock);
+  if(ip->ref == 1 && (ip->flags & I_VALID) && ip->nlink == 0){
+    // inode has no links and no other references: truncate and free.
+    if(ip->flags & I_BUSY)
+      panic("iput busy");
+    ip->flags |= I_BUSY;
+    release(&icache.lock);
+    itrunc(ip);
+    ip->type = 0;
+    iupdate(ip);
+    acquire(&icache.lock);
+    ip->flags = 0;
+    wakeup(ip);
+  }
+  ip->ref--;
+  release(&icache.lock);
+}
+
+// Common idiom: unlock, then put.
+void
+iunlockput(struct inode *ip)
+{
+  iunlock(ip);
+  iput(ip);
+}
+
+//PAGEBREAK!
+// Inode content
+//
+// The content (data) associated with each inode is stored
+// in blocks on the disk. The first NDIRECT block numbers
+// are listed in ip->addrs[].  The next NINDIRECT blocks are 
+// listed in block ip->addrs[NDIRECT].
+
+// Return the disk block address of the nth block in inode ip.
+// If there is no such block, bmap allocates one.
+static uint
+bmap(struct inode *ip, uint bn)
+{
+  uint addr, *a;
+  struct buf *bp;
+
+  if(bn < NDIRECT){
+    if((addr = ip->addrs[bn]) == 0)
+      ip->addrs[bn] = addr = balloc(ip->dev);
+    return addr;
+  }
+  bn -= NDIRECT;
+
+  if(bn < NINDIRECT){
+    // Load indirect block, allocating if necessary.
+    if((addr = ip->addrs[NDIRECT]) == 0)
+      ip->addrs[NDIRECT] = addr = balloc(ip->dev);
+    bp = bread(ip->dev, addr);
+    a = (uint*)bp->data;
+    if((addr = a[bn]) == 0){
+      a[bn] = addr = balloc(ip->dev);
+      log_write(bp);
+    }
+    brelse(bp);
+    return addr;
+  }
+
+  panic("bmap: out of range");
+}
+
+// Truncate inode (discard contents).
+// Only called when the inode has no links
+// to it (no directory entries referring to it)
+// and has no in-memory reference to it (is
+// not an open file or current directory).
+static void
+itrunc(struct inode *ip)
+{
+  int i, j;
+  struct buf *bp;
+  uint *a;
+
+  for(i = 0; i < NDIRECT; i++){
+    if(ip->addrs[i]){
+      bfree(ip->dev, ip->addrs[i]);
+      ip->addrs[i] = 0;
+    }
+  }
+  
+  if(ip->addrs[NDIRECT]){
+    bp = bread(ip->dev, ip->addrs[NDIRECT]);
+    a = (uint*)bp->data;
+    for(j = 0; j < NINDIRECT; j++){
+      if(a[j])
+        bfree(ip->dev, a[j]);
+    }
+    brelse(bp);
+    bfree(ip->dev, ip->addrs[NDIRECT]);
+    ip->addrs[NDIRECT] = 0;
+  }
+
+  ip->size = 0;
+  iupdate(ip);
+}
+
+// Copy stat information from inode.
+void
+stati(struct inode *ip, struct stat *st)
+{
+  st->dev = ip->dev;
+  st->ino = ip->inum;
+  st->type = ip->type;
+  st->nlink = ip->nlink;
+  st->size = ip->size;
+}
+
+//PAGEBREAK!
+// Read data from inode.
+int
+readi(struct inode *ip, char *dst, uint off, uint n)
+{
+  uint tot, m;
+  struct buf *bp;
+
+  if(ip->type == T_DEV){
+    if(ip->major < 0 || ip->major >= NDEV || !devsw[ip->major].read)
+      return -1;
+    return devsw[ip->major].read(ip, dst, n);
+  }
+
+  if(off > ip->size || off + n < off)
+    return -1;
+  if(off + n > ip->size)
+    n = ip->size - off;
+
+  for(tot=0; tot<n; tot+=m, off+=m, dst+=m){
+    bp = bread(ip->dev, bmap(ip, off/BSIZE));
+    m = min(n - tot, BSIZE - off%BSIZE);
+    memmove(dst, bp->data + off%BSIZE, m);
+    brelse(bp);
+  }
+  return n;
+}
+
+// PAGEBREAK!
+// Write data to inode.
+int
+writei(struct inode *ip, char *src, uint off, uint n)
+{
+  uint tot, m;
+  struct buf *bp;
+
+  if(ip->type == T_DEV){
+    if(ip->major < 0 || ip->major >= NDEV || !devsw[ip->major].write)
+      return -1;
+    return devsw[ip->major].write(ip, src, n);
+  }
+
+  if(off > ip->size || off + n < off)
+    return -1;
+  if(off + n > MAXFILE*BSIZE)
+    return -1;
+
+  for(tot=0; tot<n; tot+=m, off+=m, src+=m){
+    bp = bread(ip->dev, bmap(ip, off/BSIZE));
+    m = min(n - tot, BSIZE - off%BSIZE);
+    memmove(bp->data + off%BSIZE, src, m);
+    log_write(bp);
+    brelse(bp);
+  }
+
+  if(n > 0 && off > ip->size){
+    ip->size = off;
+    iupdate(ip);
+  }
+  return n;
+}
+
+//PAGEBREAK!
+// Directories
+
+int
+namecmp(const char *s, const char *t)
+{
+  return strncmp(s, t, DIRSIZ);
+}
+
+// Look for a directory entry in a directory.
+// If found, set *poff to byte offset of entry.
+struct inode*
+dirlookup(struct inode *dp, char *name, uint *poff)
+{
+  uint off, inum;
+  struct dirent de;
+
+  if(dp->type != T_DIR)
+    panic("dirlookup not DIR");
+
+  for(off = 0; off < dp->size; off += sizeof(de)){
+    if(readi(dp, (char*)&de, off, sizeof(de)) != sizeof(de))
+      panic("dirlink read");
+    if(de.inum == 0)
+      continue;
+    if(namecmp(name, de.name) == 0){
+      // entry matches path element
+      if(poff)
+        *poff = off;
+      inum = de.inum;
+      return iget(dp->dev, inum);
+    }
+  }
+
+  return 0;
+}
+
+// Write a new directory entry (name, inum) into the directory dp.
+int
+dirlink(struct inode *dp, char *name, uint inum)
+{
+  int off;
+  struct dirent de;
+  struct inode *ip;
+
+  // Check that name is not present.
+  if((ip = dirlookup(dp, name, 0)) != 0){
+    iput(ip);
+    return -1;
+  }
+
+  // Look for an empty dirent.
+  for(off = 0; off < dp->size; off += sizeof(de)){
+    if(readi(dp, (char*)&de, off, sizeof(de)) != sizeof(de))
+      panic("dirlink read");
+    if(de.inum == 0)
+      break;
+  }
+
+  strncpy(de.name, name, DIRSIZ);
+  de.inum = inum;
+  if(writei(dp, (char*)&de, off, sizeof(de)) != sizeof(de))
+    panic("dirlink");
+  
+  return 0;
+}
+
+//PAGEBREAK!
+// Paths
+
+// Copy the next path element from path into name.
+// Return a pointer to the element following the copied one.
+// The returned path has no leading slashes,
+// so the caller can check *path=='\0' to see if the name is the last one.
+// If no name to remove, return 0.
+//
+// Examples:
+//   skipelem("a/bb/c", name) = "bb/c", setting name = "a"
+//   skipelem("///a//bb", name) = "bb", setting name = "a"
+//   skipelem("a", name) = "", setting name = "a"
+//   skipelem("", name) = skipelem("////", name) = 0
+//
+static char*
+skipelem(char *path, char *name)
+{
+  char *s;
+  int len;
+
+  while(*path == '/')
+    path++;
+  if(*path == 0)
+    return 0;
+  s = path;
+  while(*path != '/' && *path != 0)
+    path++;
+  len = path - s;
+  if(len >= DIRSIZ)
+    memmove(name, s, DIRSIZ);
+  else {
+    memmove(name, s, len);
+    name[len] = 0;
+  }
+  while(*path == '/')
+    path++;
+  return path;
+}
+
+// Look up and return the inode for a path name.
+// If parent != 0, return the inode for the parent and copy the final
+// path element into name, which must have room for DIRSIZ bytes.
+// Must be called inside a transaction since it calls iput().
+static struct inode*
+namex(char *path, int nameiparent, char *name)
+{
+  struct inode *ip, *next;
+
+  if(*path == '/')
+    ip = iget(ROOTDEV, ROOTINO);
+  else
+    ip = idup(proc->cwd);
+
+  while((path = skipelem(path, name)) != 0){
+    ilock(ip);
+    if(ip->type != T_DIR){
+      iunlockput(ip);
+      return 0;
+    }
+    if(nameiparent && *path == '\0'){
+      // Stop one level early.
+      iunlock(ip);
+      return ip;
+    }
+    if((next = dirlookup(ip, name, 0)) == 0){
+      iunlockput(ip);
+      return 0;
+    }
+    iunlockput(ip);
+    ip = next;
+  }
+  if(nameiparent){
+    iput(ip);
+    return 0;
+  }
+  return ip;
+}
+
+struct inode*
+namei(char *path)
+{
+  char name[DIRSIZ];
+  return namex(path, 0, name);
+}
+
+struct inode*
+nameiparent(char *path, char *name)
+{
+  return namex(path, 1, name);
+}
diff --git a/fs.h b/fs.h
new file mode 100644
index 0000000..f191d43
--- /dev/null
+++ b/fs.h
@@ -0,0 +1,55 @@
+// On-disk file system format. 
+// Both the kernel and user programs use this header file.
+
+// Block 0 is unused.
+// Block 1 is super block.
+// Blocks 2 through sb.ninodes/IPB hold inodes.
+// Then free bitmap blocks holding sb.size bits.
+// Then sb.nblocks data blocks.
+// Then sb.nlog log blocks.
+
+#define ROOTINO 1  // root i-number
+#define BSIZE 512  // block size
+
+// File system super block
+struct superblock {
+  uint size;         // Size of file system image (blocks)
+  uint nblocks;      // Number of data blocks
+  uint ninodes;      // Number of inodes.
+  uint nlog;         // Number of log blocks
+};
+
+#define NDIRECT 12
+#define NINDIRECT (BSIZE / sizeof(uint))
+#define MAXFILE (NDIRECT + NINDIRECT)
+
+// On-disk inode structure
+struct dinode {
+  short type;           // File type
+  short major;          // Major device number (T_DEV only)
+  short minor;          // Minor device number (T_DEV only)
+  short nlink;          // Number of links to inode in file system
+  uint size;            // Size of file (bytes)
+  uint addrs[NDIRECT+1];   // Data block addresses
+};
+
+// Inodes per block.
+#define IPB           (BSIZE / sizeof(struct dinode))
+
+// Block containing inode i
+#define IBLOCK(i)     ((i) / IPB + 2)
+
+// Bitmap bits per block
+#define BPB           (BSIZE*8)
+
+// Block containing bit for block b
+#define BBLOCK(b, ninodes) (b/BPB + (ninodes)/IPB + 3)
+
+// Directory is a file containing a sequence of dirent structures.
+#define DIRSIZ 14
+
+struct dirent {
+  ushort inum;
+  char name[DIRSIZ];
+};
+
diff --git a/grep.c b/grep.c
new file mode 100644
index 0000000..2fbf5b6
--- /dev/null
+++ b/grep.c
@@ -0,0 +1,106 @@
+// Simple grep.  Only supports ^ . * $ operators.
+
+#include "types.h"
+#include "stat.h"
+#include "user.h"
+
+char buf[1024];
+int match(char*, char*);
+
+void
+grep(char *pattern, int fd)
+{
+  int n, m;
+  char *p, *q;
+  
+  m = 0;
+  while((n = read(fd, buf+m, sizeof(buf)-m)) > 0){
+    m += n;
+    p = buf;
+    while((q = strchr(p, '\n')) != 0){
+      *q = 0;
+      if(match(pattern, p)){
+        *q = '\n';
+        write(1, p, q+1 - p);
+      }
+      p = q+1;
+    }
+    if(p == buf)
+      m = 0;
+    if(m > 0){
+      m -= p - buf;
+      memmove(buf, p, m);
+    }
+  }
+}
+
+int
+main(int argc, char *argv[])
+{
+  int fd, i;
+  char *pattern;
+  
+  if(argc <= 1){
+    printf(2, "usage: grep pattern [file ...]\n");
+    exit();
+  }
+  pattern = argv[1];
+  
+  if(argc <= 2){
+    grep(pattern, 0);
+    exit();
+  }
+
+  for(i = 2; i < argc; i++){
+    if((fd = open(argv[i], 0)) < 0){
+      printf(1, "grep: cannot open %s\n", argv[i]);
+      exit();
+    }
+    grep(pattern, fd);
+    close(fd);
+  }
+  exit();
+}
+
+// Regexp matcher from Kernighan & Pike,
+// The Practice of Programming, Chapter 9.
+
+int matchhere(char*, char*);
+int matchstar(int, char*, char*);
+
+int
+match(char *re, char *text)
+{
+  if(re[0] == '^')
+    return matchhere(re+1, text);
+  do{  // must look at empty string
+    if(matchhere(re, text))
+      return 1;
+  }while(*text++ != '\0');
+  return 0;
+}
+
+// matchhere: search for re at beginning of text
+int matchhere(char *re, char *text)
+{
+  if(re[0] == '\0')
+    return 1;
+  if(re[1] == '*')
+    return matchstar(re[0], re+2, text);
+  if(re[0] == '$' && re[1] == '\0')
+    return *text == '\0';
+  if(*text!='\0' && (re[0]=='.' || re[0]==*text))
+    return matchhere(re+1, text+1);
+  return 0;
+}
+
+// matchstar: search for c*re at beginning of text
+int matchstar(int c, char *re, char *text)
+{
+  do{  // a * matches zero or more instances
+    if(matchhere(re, text))
+      return 1;
+  }while(*text!='\0' && (*text++==c || c=='.'));
+  return 0;
+}
+
diff --git a/ide.c b/ide.c
new file mode 100644
index 0000000..6850a09
--- /dev/null
+++ b/ide.c
@@ -0,0 +1,155 @@
+// Simple PIO-based (non-DMA) IDE driver code.
+
+#include "types.h"
+#include "defs.h"
+#include "param.h"
+#include "memlayout.h"
+#include "mmu.h"
+#include "proc.h"
+#include "x86.h"
+#include "traps.h"
+#include "spinlock.h"
+#include "buf.h"
+
+#define IDE_BSY       0x80
+#define IDE_DRDY      0x40
+#define IDE_DF        0x20
+#define IDE_ERR       0x01
+
+#define IDE_CMD_READ  0x20
+#define IDE_CMD_WRITE 0x30
+
+// idequeue points to the buf now being read/written to the disk.
+// idequeue->qnext points to the next buf to be processed.
+// You must hold idelock while manipulating queue.
+
+static struct spinlock idelock;
+static struct buf *idequeue;
+
+static int havedisk1;
+static void idestart(struct buf*);
+
+// Wait for IDE disk to become ready.
+static int
+idewait(int checkerr)
+{
+  int r;
+
+  while(((r = inb(0x1f7)) & (IDE_BSY|IDE_DRDY)) != IDE_DRDY) 
+    ;
+  if(checkerr && (r & (IDE_DF|IDE_ERR)) != 0)
+    return -1;
+  return 0;
+}
+
+void
+ideinit(void)
+{
+  int i;
+
+  initlock(&idelock, "ide");
+  picenable(IRQ_IDE);
+  ioapicenable(IRQ_IDE, ncpu - 1);
+  idewait(0);
+  
+  // Check if disk 1 is present
+  outb(0x1f6, 0xe0 | (1<<4));
+  for(i=0; i<1000; i++){
+    if(inb(0x1f7) != 0){
+      havedisk1 = 1;
+      break;
+    }
+  }
+  
+  // Switch back to disk 0.
+  outb(0x1f6, 0xe0 | (0<<4));
+}
+
+// Start the request for b.  Caller must hold idelock.
+static void
+idestart(struct buf *b)
+{
+  if(b == 0)
+    panic("idestart");
+
+  idewait(0);
+  outb(0x3f6, 0);  // generate interrupt
+  outb(0x1f2, 1);  // number of sectors
+  outb(0x1f3, b->sector & 0xff);
+  outb(0x1f4, (b->sector >> 8) & 0xff);
+  outb(0x1f5, (b->sector >> 16) & 0xff);
+  outb(0x1f6, 0xe0 | ((b->dev&1)<<4) | ((b->sector>>24)&0x0f));
+  if(b->flags & B_DIRTY){
+    outb(0x1f7, IDE_CMD_WRITE);
+    outsl(0x1f0, b->data, 512/4);
+  } else {
+    outb(0x1f7, IDE_CMD_READ);
+  }
+}
+
+// Interrupt handler.
+void
+ideintr(void)
+{
+  struct buf *b;
+
+  // First queued buffer is the active request.
+  acquire(&idelock);
+  if((b = idequeue) == 0){
+    release(&idelock);
+    // cprintf("spurious IDE interrupt\n");
+    return;
+  }
+  idequeue = b->qnext;
+
+  // Read data if needed.
+  if(!(b->flags & B_DIRTY) && idewait(1) >= 0)
+    insl(0x1f0, b->data, 512/4);
+  
+  // Wake process waiting for this buf.
+  b->flags |= B_VALID;
+  b->flags &= ~B_DIRTY;
+  wakeup(b);
+  
+  // Start disk on next buf in queue.
+  if(idequeue != 0)
+    idestart(idequeue);
+
+  release(&idelock);
+}
+
+//PAGEBREAK!
+// Sync buf with disk. 
+// If B_DIRTY is set, write buf to disk, clear B_DIRTY, set B_VALID.
+// Else if B_VALID is not set, read buf from disk, set B_VALID.
+void
+iderw(struct buf *b)
+{
+  struct buf **pp;
+
+  if(!(b->flags & B_BUSY))
+    panic("iderw: buf not busy");
+  if((b->flags & (B_VALID|B_DIRTY)) == B_VALID)
+    panic("iderw: nothing to do");
+  if(b->dev != 0 && !havedisk1)
+    panic("iderw: ide disk 1 not present");
+
+  acquire(&idelock);  //DOC:acquire-lock
+
+  // Append b to idequeue.
+  b->qnext = 0;
+  for(pp=&idequeue; *pp; pp=&(*pp)->qnext)  //DOC:insert-queue
+    ;
+  *pp = b;
+  
+  // Start disk if necessary.
+  if(idequeue == b)
+    idestart(b);
+  
+  // Wait for request to finish.
+  while((b->flags & (B_VALID|B_DIRTY)) != B_VALID){
+    sleep(b, &idelock);
+  }
+
+  release(&idelock);
+}
diff --git a/init.c b/init.c
new file mode 100644
index 0000000..046b551
--- /dev/null
+++ b/init.c
@@ -0,0 +1,37 @@
+// init: The initial user-level program
+
+#include "types.h"
+#include "stat.h"
+#include "user.h"
+#include "fcntl.h"
+
+char *argv[] = { "sh", 0 };
+
+int
+main(void)
+{
+  int pid, wpid;
+
+  if(open("console", O_RDWR) < 0){
+    mknod("console", 1, 1);
+    open("console", O_RDWR);
+  }
+  dup(0);  // stdout
+  dup(0);  // stderr
+
+  for(;;){
+    printf(1, "init: starting sh\n");
+    pid = fork();
+    if(pid < 0){
+      printf(1, "init: fork failed\n");
+      exit();
+    }
+    if(pid == 0){
+      exec("sh", argv);
+      printf(1, "init: exec sh failed\n");
+      exit();
+    }
+    while((wpid=wait()) >= 0 && wpid != pid)
+      printf(1, "zombie!\n");
+  }
+}
diff --git a/initcode.S b/initcode.S
new file mode 100644
index 0000000..109341a
--- /dev/null
+++ b/initcode.S
@@ -0,0 +1,31 @@
+# Initial process execs /init.
+
+#include "syscall.h"
+#include "traps.h"
+
+
+# exec(init, argv)
+.globl start
+start:
+  pushl $argv
+  pushl $init
+  pushl $0  // where caller pc would be
+  movl $SYS_exec, %eax
+  int $T_SYSCALL
+
+# for(;;) exit();
+exit:
+  movl $SYS_exit, %eax
+  int $T_SYSCALL
+  jmp exit
+
+# char init[] = "/init\0";
+init:
+  .string "/init\0"
+
+# char *argv[] = { init, 0 };
+.p2align 2
+argv:
+  .long init
+  .long 0
+
diff --git a/ioapic.c b/ioapic.c
new file mode 100644
index 0000000..d343611
--- /dev/null
+++ b/ioapic.c
@@ -0,0 +1,81 @@
+// The I/O APIC manages hardware interrupts for an SMP system.
+// http://www.intel.com/design/chipsets/datashts/29056601.pdf
+// See also picirq.c.
+
+#include "types.h"
+#include "defs.h"
+#include "traps.h"
+
+#define IOAPIC  0xFEC00000   // Default physical address of IO APIC
+
+#define REG_ID     0x00  // Register index: ID
+#define REG_VER    0x01  // Register index: version
+#define REG_TABLE  0x10  // Redirection table base
+
+// The redirection table starts at REG_TABLE and uses
+// two registers to configure each interrupt.  
+// The first (low) register in a pair contains configuration bits.
+// The second (high) register contains a bitmask telling which
+// CPUs can serve that interrupt.
+#define INT_DISABLED   0x00010000  // Interrupt disabled
+#define INT_LEVEL      0x00008000  // Level-triggered (vs edge-)
+#define INT_ACTIVELOW  0x00002000  // Active low (vs high)
+#define INT_LOGICAL    0x00000800  // Destination is CPU id (vs APIC ID)
+
+volatile struct ioapic *ioapic;
+
+// IO APIC MMIO structure: write reg, then read or write data.
+struct ioapic {
+  uint reg;
+  uint pad[3];
+  uint data;
+};
+
+static uint
+ioapicread(int reg)
+{
+  ioapic->reg = reg;
+  return ioapic->data;
+}
+
+static void
+ioapicwrite(int reg, uint data)
+{
+  ioapic->reg = reg;
+  ioapic->data = data;
+}
+
+void
+ioapicinit(void)
+{
+  int i, id, maxintr;
+
+  if(!ismp)
+    return;
+
+  ioapic = (volatile struct ioapic*)IOAPIC;
+  maxintr = (ioapicread(REG_VER) >> 16) & 0xFF;
+  id = ioapicread(REG_ID) >> 24;
+  if(id != ioapicid)
+    cprintf("ioapicinit: id isn't equal to ioapicid; not a MP\n");
+
+  // Mark all interrupts edge-triggered, active high, disabled,
+  // and not routed to any CPUs.
+  for(i = 0; i <= maxintr; i++){
+    ioapicwrite(REG_TABLE+2*i, INT_DISABLED | (T_IRQ0 + i));
+    ioapicwrite(REG_TABLE+2*i+1, 0);
+  }
+}
+
+void
+ioapicenable(int irq, int cpunum)
+{
+  if(!ismp)
+    return;
+
+  // Mark interrupt edge-triggered, active high,
+  // enabled, and routed to the given cpunum,
+  // which happens to be that cpu's APIC ID.
+  ioapicwrite(REG_TABLE+2*irq, T_IRQ0 + irq);
+  ioapicwrite(REG_TABLE+2*irq+1, cpunum << 24);
+}
diff --git a/kalloc.c b/kalloc.c
new file mode 100644
index 0000000..417c20f
--- /dev/null
+++ b/kalloc.c
@@ -0,0 +1,96 @@
+// Physical memory allocator, intended to allocate
+// memory for user processes, kernel stacks, page table pages,
+// and pipe buffers. Allocates 4096-byte pages.
+
+#include "types.h"
+#include "defs.h"
+#include "param.h"
+#include "memlayout.h"
+#include "mmu.h"
+#include "spinlock.h"
+
+void freerange(void *vstart, void *vend);
+extern char end[]; // first address after kernel loaded from ELF file
+
+struct run {
+  struct run *next;
+};
+
+struct {
+  struct spinlock lock;
+  int use_lock;
+  struct run *freelist;
+} kmem;
+
+// Initialization happens in two phases.
+// 1. main() calls kinit1() while still using entrypgdir to place just
+// the pages mapped by entrypgdir on free list.
+// 2. main() calls kinit2() with the rest of the physical pages
+// after installing a full page table that maps them on all cores.
+void
+kinit1(void *vstart, void *vend)
+{
+  initlock(&kmem.lock, "kmem");
+  kmem.use_lock = 0;
+  freerange(vstart, vend);
+}
+
+void
+kinit2(void *vstart, void *vend)
+{
+  freerange(vstart, vend);
+  kmem.use_lock = 1;
+}
+
+void
+freerange(void *vstart, void *vend)
+{
+  char *p;
+  p = (char*)PGROUNDUP((uint)vstart);
+  for(; p + PGSIZE <= (char*)vend; p += PGSIZE)
+    kfree(p);
+}
+
+//PAGEBREAK: 21
+// Free the page of physical memory pointed at by v,
+// which normally should have been returned by a
+// call to kalloc().  (The exception is when
+// initializing the allocator; see kinit above.)
+void
+kfree(char *v)
+{
+  struct run *r;
+
+  if((uint)v % PGSIZE || v < end || v2p(v) >= PHYSTOP)
+    panic("kfree");
+
+  // Fill with junk to catch dangling refs.
+  memset(v, 1, PGSIZE);
+
+  if(kmem.use_lock)
+    acquire(&kmem.lock);
+  r = (struct run*)v;
+  r->next = kmem.freelist;
+  kmem.freelist = r;
+  if(kmem.use_lock)
+    release(&kmem.lock);
+}
+
+// Allocate one 4096-byte page of physical memory.
+// Returns a pointer that the kernel can use.
+// Returns 0 if the memory cannot be allocated.
+char*
+kalloc(void)
+{
+  struct run *r;
+
+  if(kmem.use_lock)
+    acquire(&kmem.lock);
+  r = kmem.freelist;
+  if(r)
+    kmem.freelist = r->next;
+  if(kmem.use_lock)
+    release(&kmem.lock);
+  return (char*)r;
+}
+
diff --git a/kbd.c b/kbd.c
new file mode 100644
index 0000000..32c1463
--- /dev/null
+++ b/kbd.c
@@ -0,0 +1,50 @@
+#include "types.h"
+#include "x86.h"
+#include "defs.h"
+#include "kbd.h"
+
+int
+kbdgetc(void)
+{
+  static uint shift;
+  static uchar *charcode[4] = {
+    normalmap, shiftmap, ctlmap, ctlmap
+  };
+  uint st, data, c;
+
+  st = inb(KBSTATP);
+  if((st & KBS_DIB) == 0)
+    return -1;
+  data = inb(KBDATAP);
+
+  if(data == 0xE0){
+    shift |= E0ESC;
+    return 0;
+  } else if(data & 0x80){
+    // Key released
+    data = (shift & E0ESC ? data : data & 0x7F);
+    shift &= ~(shiftcode[data] | E0ESC);
+    return 0;
+  } else if(shift & E0ESC){
+    // Last character was an E0 escape; or with 0x80
+    data |= 0x80;
+    shift &= ~E0ESC;
+  }
+
+  shift |= shiftcode[data];
+  shift ^= togglecode[data];
+  c = charcode[shift & (CTL | SHIFT)][data];
+  if(shift & CAPSLOCK){
+    if('a' <= c && c <= 'z')
+      c += 'A' - 'a';
+    else if('A' <= c && c <= 'Z')
+      c += 'a' - 'A';
+  }
+  return c;
+}
+
+void
+kbdintr(void)
+{
+  consoleintr(kbdgetc);
+}
diff --git a/kbd.h b/kbd.h
new file mode 100644
index 0000000..babbd6e
--- /dev/null
+++ b/kbd.h
@@ -0,0 +1,112 @@
+// PC keyboard interface constants
+
+#define KBSTATP         0x64    // kbd controller status port(I)
+#define KBS_DIB         0x01    // kbd data in buffer
+#define KBDATAP         0x60    // kbd data port(I)
+
+#define NO              0
+
+#define SHIFT           (1<<0)
+#define CTL             (1<<1)
+#define ALT             (1<<2)
+
+#define CAPSLOCK        (1<<3)
+#define NUMLOCK         (1<<4)
+#define SCROLLLOCK      (1<<5)
+
+#define E0ESC           (1<<6)
+
+// Special keycodes
+#define KEY_HOME        0xE0
+#define KEY_END         0xE1
+#define KEY_UP          0xE2
+#define KEY_DN          0xE3
+#define KEY_LF          0xE4
+#define KEY_RT          0xE5
+#define KEY_PGUP        0xE6
+#define KEY_PGDN        0xE7
+#define KEY_INS         0xE8
+#define KEY_DEL         0xE9
+
+// C('A') == Control-A
+#define C(x) (x - '@')
+
+static uchar shiftcode[256] =
+{
+  [0x1D] CTL,
+  [0x2A] SHIFT,
+  [0x36] SHIFT,
+  [0x38] ALT,
+  [0x9D] CTL,
+  [0xB8] ALT
+};
+
+static uchar togglecode[256] =
+{
+  [0x3A] CAPSLOCK,
+  [0x45] NUMLOCK,
+  [0x46] SCROLLLOCK
+};
+
+static uchar normalmap[256] =
+{
+  NO,   0x1B, '1',  '2',  '3',  '4',  '5',  '6',  // 0x00
+  '7',  '8',  '9',  '0',  '-',  '=',  '\b', '\t',
+  'q',  'w',  'e',  'r',  't',  'y',  'u',  'i',  // 0x10
+  'o',  'p',  '[',  ']',  '\n', NO,   'a',  's',
+  'd',  'f',  'g',  'h',  'j',  'k',  'l',  ';',  // 0x20
+  '\'', '`',  NO,   '\\', 'z',  'x',  'c',  'v',
+  'b',  'n',  'm',  ',',  '.',  '/',  NO,   '*',  // 0x30
+  NO,   ' ',  NO,   NO,   NO,   NO,   NO,   NO,
+  NO,   NO,   NO,   NO,   NO,   NO,   NO,   '7',  // 0x40
+  '8',  '9',  '-',  '4',  '5',  '6',  '+',  '1',
+  '2',  '3',  '0',  '.',  NO,   NO,   NO,   NO,   // 0x50
+  [0x9C] '\n',      // KP_Enter
+  [0xB5] '/',       // KP_Div
+  [0xC8] KEY_UP,    [0xD0] KEY_DN,
+  [0xC9] KEY_PGUP,  [0xD1] KEY_PGDN,
+  [0xCB] KEY_LF,    [0xCD] KEY_RT,
+  [0x97] KEY_HOME,  [0xCF] KEY_END,
+  [0xD2] KEY_INS,   [0xD3] KEY_DEL
+};
+
+static uchar shiftmap[256] =
+{
+  NO,   033,  '!',  '@',  '#',  '$',  '%',  '^',  // 0x00
+  '&',  '*',  '(',  ')',  '_',  '+',  '\b', '\t',
+  'Q',  'W',  'E',  'R',  'T',  'Y',  'U',  'I',  // 0x10
+  'O',  'P',  '{',  '}',  '\n', NO,   'A',  'S',
+  'D',  'F',  'G',  'H',  'J',  'K',  'L',  ':',  // 0x20
+  '"',  '~',  NO,   '|',  'Z',  'X',  'C',  'V',
+  'B',  'N',  'M',  '<',  '>',  '?',  NO,   '*',  // 0x30
+  NO,   ' ',  NO,   NO,   NO,   NO,   NO,   NO,
+  NO,   NO,   NO,   NO,   NO,   NO,   NO,   '7',  // 0x40
+  '8',  '9',  '-',  '4',  '5',  '6',  '+',  '1',
+  '2',  '3',  '0',  '.',  NO,   NO,   NO,   NO,   // 0x50
+  [0x9C] '\n',      // KP_Enter
+  [0xB5] '/',       // KP_Div
+  [0xC8] KEY_UP,    [0xD0] KEY_DN,
+  [0xC9] KEY_PGUP,  [0xD1] KEY_PGDN,
+  [0xCB] KEY_LF,    [0xCD] KEY_RT,
+  [0x97] KEY_HOME,  [0xCF] KEY_END,
+  [0xD2] KEY_INS,   [0xD3] KEY_DEL
+};
+
+static uchar ctlmap[256] =
+{
+  NO,      NO,      NO,      NO,      NO,      NO,      NO,      NO,
+  NO,      NO,      NO,      NO,      NO,      NO,      NO,      NO,
+  C('Q'),  C('W'),  C('E'),  C('R'),  C('T'),  C('Y'),  C('U'),  C('I'),
+  C('O'),  C('P'),  NO,      NO,      '\r',    NO,      C('A'),  C('S'),
+  C('D'),  C('F'),  C('G'),  C('H'),  C('J'),  C('K'),  C('L'),  NO,
+  NO,      NO,      NO,      C('\\'), C('Z'),  C('X'),  C('C'),  C('V'),
+  C('B'),  C('N'),  C('M'),  NO,      NO,      C('/'),  NO,      NO,
+  [0x9C] '\r',      // KP_Enter
+  [0xB5] C('/'),    // KP_Div
+  [0xC8] KEY_UP,    [0xD0] KEY_DN,
+  [0xC9] KEY_PGUP,  [0xD1] KEY_PGDN,
+  [0xCB] KEY_LF,    [0xCD] KEY_RT,
+  [0x97] KEY_HOME,  [0xCF] KEY_END,
+  [0xD2] KEY_INS,   [0xD3] KEY_DEL
+};
+
diff --git a/kernel.ld b/kernel.ld
new file mode 100644
index 0000000..e24c860
--- /dev/null
+++ b/kernel.ld
@@ -0,0 +1,68 @@
+/* Simple linker script for the JOS kernel.
+   See the GNU ld 'info' manual ("info ld") to learn the syntax. */
+
+OUTPUT_FORMAT("elf32-i386", "elf32-i386", "elf32-i386")
+OUTPUT_ARCH(i386)
+ENTRY(_start)
+
+SECTIONS
+{
+	/* Link the kernel at this address: "." means the current address */
+        /* Must be equal to KERNLINK */
+	. = 0x80100000;
+
+	.text : AT(0x100000) {
+		*(.text .stub .text.* .gnu.linkonce.t.*)
+	}
+
+	PROVIDE(etext = .);	/* Define the 'etext' symbol to this value */
+
+	.rodata : {
+		*(.rodata .rodata.* .gnu.linkonce.r.*)
+	}
+
+	/* Include debugging information in kernel memory */
+	.stab : {
+		PROVIDE(__STAB_BEGIN__ = .);
+		*(.stab);
+		PROVIDE(__STAB_END__ = .);
+		BYTE(0)		/* Force the linker to allocate space
+				   for this section */
+	}
+
+	.stabstr : {
+		PROVIDE(__STABSTR_BEGIN__ = .);
+		*(.stabstr);
+		PROVIDE(__STABSTR_END__ = .);
+		BYTE(0)		/* Force the linker to allocate space
+				   for this section */
+	}
+
+	/* Adjust the address for the data segment to the next page */
+	. = ALIGN(0x1000);
+
+	/* Conventionally, Unix linkers provide pseudo-symbols
+	 * etext, edata, and end, at the end of the text, data, and bss.
+	 * For the kernel mapping, we need the address at the beginning
+	 * of the data section, but that's not one of the conventional
+	 * symbols, because the convention started before there was a
+	 * read-only rodata section between text and data. */
+	PROVIDE(data = .);
+
+	/* The data segment */
+	.data : {
+		*(.data)
+	}
+
+	PROVIDE(edata = .);
+
+	.bss : {
+		*(.bss)
+	}
+
+	PROVIDE(end = .);
+
+	/DISCARD/ : {
+		*(.eh_frame .note.GNU-stack)
+	}
+}
diff --git a/kill.c b/kill.c
new file mode 100644
index 0000000..5e60113
--- /dev/null
+++ b/kill.c
@@ -0,0 +1,17 @@
+#include "types.h"
+#include "stat.h"
+#include "user.h"
+
+int
+main(int argc, char **argv)
+{
+  int i;
+
+  if(argc < 1){
+    printf(2, "usage: kill pid...\n");
+    exit();
+  }
+  for(i=1; i<argc; i++)
+    kill(atoi(argv[i]));
+  exit();
+}
diff --git a/lapic.c b/lapic.c
new file mode 100644
index 0000000..4da4214
--- /dev/null
+++ b/lapic.c
@@ -0,0 +1,237 @@
+// The local APIC manages internal (non-I/O) interrupts.
+// See Chapter 8 & Appendix C of Intel processor manual volume 3.
+
+#include "types.h"
+#include "defs.h"
+#include "date.h"
+#include "memlayout.h"
+#include "traps.h"
+#include "mmu.h"
+#include "x86.h"
+
+// Local APIC registers, divided by 4 for use as uint[] indices.
+#define ID      (0x0020/4)   // ID
+#define VER     (0x0030/4)   // Version
+#define TPR     (0x0080/4)   // Task Priority
+#define EOI     (0x00B0/4)   // EOI
+#define SVR     (0x00F0/4)   // Spurious Interrupt Vector
+  #define ENABLE     0x00000100   // Unit Enable
+#define ESR     (0x0280/4)   // Error Status
+#define ICRLO   (0x0300/4)   // Interrupt Command
+  #define INIT       0x00000500   // INIT/RESET
+  #define STARTUP    0x00000600   // Startup IPI
+  #define DELIVS     0x00001000   // Delivery status
+  #define ASSERT     0x00004000   // Assert interrupt (vs deassert)
+  #define DEASSERT   0x00000000
+  #define LEVEL      0x00008000   // Level triggered
+  #define BCAST      0x00080000   // Send to all APICs, including self.
+  #define BUSY       0x00001000
+  #define FIXED      0x00000000
+#define ICRHI   (0x0310/4)   // Interrupt Command [63:32]
+#define TIMER   (0x0320/4)   // Local Vector Table 0 (TIMER)
+  #define X1         0x0000000B   // divide counts by 1
+  #define PERIODIC   0x00020000   // Periodic
+#define PCINT   (0x0340/4)   // Performance Counter LVT
+#define LINT0   (0x0350/4)   // Local Vector Table 1 (LINT0)
+#define LINT1   (0x0360/4)   // Local Vector Table 2 (LINT1)
+#define ERROR   (0x0370/4)   // Local Vector Table 3 (ERROR)
+  #define MASKED     0x00010000   // Interrupt masked
+#define TICR    (0x0380/4)   // Timer Initial Count
+#define TCCR    (0x0390/4)   // Timer Current Count
+#define TDCR    (0x03E0/4)   // Timer Divide Configuration
+
+volatile uint *lapic;  // Initialized in mp.c
+
+static void
+lapicw(int index, int value)
+{
+  lapic[index] = value;
+  lapic[ID];  // wait for write to finish, by reading
+}
+//PAGEBREAK!
+
+void
+lapicinit(void)
+{
+  if(!lapic) 
+    return;
+
+  // Enable local APIC; set spurious interrupt vector.
+  lapicw(SVR, ENABLE | (T_IRQ0 + IRQ_SPURIOUS));
+
+  // The timer repeatedly counts down at bus frequency
+  // from lapic[TICR] and then issues an interrupt.  
+  // If xv6 cared more about precise timekeeping,
+  // TICR would be calibrated using an external time source.
+  lapicw(TDCR, X1);
+  lapicw(TIMER, PERIODIC | (T_IRQ0 + IRQ_TIMER));
+  lapicw(TICR, 10000000); 
+
+  // Disable logical interrupt lines.
+  lapicw(LINT0, MASKED);
+  lapicw(LINT1, MASKED);
+
+  // Disable performance counter overflow interrupts
+  // on machines that provide that interrupt entry.
+  if(((lapic[VER]>>16) & 0xFF) >= 4)
+    lapicw(PCINT, MASKED);
+
+  // Map error interrupt to IRQ_ERROR.
+  lapicw(ERROR, T_IRQ0 + IRQ_ERROR);
+
+  // Clear error status register (requires back-to-back writes).
+  lapicw(ESR, 0);
+  lapicw(ESR, 0);
+
+  // Ack any outstanding interrupts.
+  lapicw(EOI, 0);
+
+  // Send an Init Level De-Assert to synchronise arbitration ID's.
+  lapicw(ICRHI, 0);
+  lapicw(ICRLO, BCAST | INIT | LEVEL);
+  while(lapic[ICRLO] & DELIVS)
+    ;
+
+  // Enable interrupts on the APIC (but not on the processor).
+  lapicw(TPR, 0);
+}
+
+int
+cpunum(void)
+{
+  // Cannot call cpu when interrupts are enabled:
+  // result not guaranteed to last long enough to be used!
+  // Would prefer to panic but even printing is chancy here:
+  // almost everything, including cprintf and panic, calls cpu,
+  // often indirectly through acquire and release.
+  if(readeflags()&FL_IF){
+    static int n;
+    if(n++ == 0)
+      cprintf("cpu called from %x with interrupts enabled\n",
+        __builtin_return_address(0));
+  }
+
+  if(lapic)
+    return lapic[ID]>>24;
+  return 0;
+}
+
+// Acknowledge interrupt.
+void
+lapiceoi(void)
+{
+  if(lapic)
+    lapicw(EOI, 0);
+}
+
+// Spin for a given number of microseconds.
+// On real hardware would want to tune this dynamically.
+void
+microdelay(int us)
+{
+}
+
+#define CMOS_PORT    0x70
+#define CMOS_RETURN  0x71
+
+// Start additional processor running entry code at addr.
+// See Appendix B of MultiProcessor Specification.
+void
+lapicstartap(uchar apicid, uint addr)
+{
+  int i;
+  ushort *wrv;
+  
+  // "The BSP must initialize CMOS shutdown code to 0AH
+  // and the warm reset vector (DWORD based at 40:67) to point at
+  // the AP startup code prior to the [universal startup algorithm]."
+  outb(CMOS_PORT, 0xF);  // offset 0xF is shutdown code
+  outb(CMOS_PORT+1, 0x0A);
+  wrv = (ushort*)P2V((0x40<<4 | 0x67));  // Warm reset vector
+  wrv[0] = 0;
+  wrv[1] = addr >> 4;
+
+  // "Universal startup algorithm."
+  // Send INIT (level-triggered) interrupt to reset other CPU.
+  lapicw(ICRHI, apicid<<24);
+  lapicw(ICRLO, INIT | LEVEL | ASSERT);
+  microdelay(200);
+  lapicw(ICRLO, INIT | LEVEL);
+  microdelay(100);    // should be 10ms, but too slow in Bochs!
+  
+  // Send startup IPI (twice!) to enter code.
+  // Regular hardware is supposed to only accept a STARTUP
+  // when it is in the halted state due to an INIT.  So the second
+  // should be ignored, but it is part of the official Intel algorithm.
+  // Bochs complains about the second one.  Too bad for Bochs.
+  for(i = 0; i < 2; i++){
+    lapicw(ICRHI, apicid<<24);
+    lapicw(ICRLO, STARTUP | (addr>>12));
+    microdelay(200);
+  }
+}
+
+#define CMOS_STATA   0x0a
+#define CMOS_STATB   0x0b
+#define CMOS_UIP    (1 << 7)        // RTC update in progress
+
+#define SECS    0x00
+#define MINS    0x02
+#define HOURS   0x04
+#define DAY     0x07
+#define MONTH   0x08
+#define YEAR    0x09
+
+static uint cmos_read(uint reg)
+{
+  outb(CMOS_PORT,  reg);
+  microdelay(200);
+
+  return inb(CMOS_RETURN);
+}
+
+static void fill_rtcdate(struct rtcdate *r)
+{
+  r->second = cmos_read(SECS);
+  r->minute = cmos_read(MINS);
+  r->hour   = cmos_read(HOURS);
+  r->day    = cmos_read(DAY);
+  r->month  = cmos_read(MONTH);
+  r->year   = cmos_read(YEAR);
+}
+
+// qemu seems to use 24-hour GWT and the values are BCD encoded
+void cmostime(struct rtcdate *r)
+{
+  struct rtcdate t1, t2;
+  int sb, bcd;
+
+  sb = cmos_read(CMOS_STATB);
+
+  bcd = (sb & (1 << 2)) == 0;
+
+  // make sure CMOS doesn't modify time while we read it
+  for (;;) {
+    fill_rtcdate(&t1);
+    if (cmos_read(CMOS_STATA) & CMOS_UIP)
+        continue;
+    fill_rtcdate(&t2);
+    if (memcmp(&t1, &t2, sizeof(t1)) == 0)
+      break;
+  }
+
+  // convert
+  if (bcd) {
+#define    CONV(x)     (t1.x = ((t1.x >> 4) * 10) + (t1.x & 0xf))
+    CONV(second);
+    CONV(minute);
+    CONV(hour  );
+    CONV(day   );
+    CONV(month );
+    CONV(year  );
+#undef     CONV
+  }
+
+  *r = t1;
+  r->year += 2000;
+}
diff --git a/ln.c b/ln.c
new file mode 100644
index 0000000..cf8a64e
--- /dev/null
+++ b/ln.c
@@ -0,0 +1,15 @@
+#include "types.h"
+#include "stat.h"
+#include "user.h"
+
+int
+main(int argc, char *argv[])
+{
+  if(argc != 3){
+    printf(2, "Usage: ln old new\n");
+    exit();
+  }
+  if(link(argv[1], argv[2]) < 0)
+    printf(2, "link %s %s: failed\n", argv[1], argv[2]);
+  exit();
+}
diff --git a/log.c b/log.c
new file mode 100644
index 0000000..f519a8c
--- /dev/null
+++ b/log.c
@@ -0,0 +1,231 @@
+#include "types.h"
+#include "defs.h"
+#include "param.h"
+#include "spinlock.h"
+#include "fs.h"
+#include "buf.h"
+
+// Simple logging that allows concurrent FS system calls.
+//
+// A log transaction contains the updates of multiple FS system
+// calls. The logging system only commits when there are
+// no FS system calls active. Thus there is never
+// any reasoning required about whether a commit might
+// write an uncommitted system call's updates to disk.
+//
+// A system call should call begin_op()/end_op() to mark
+// its start and end. Usually begin_op() just increments
+// the count of in-progress FS system calls and returns.
+// But if it thinks the log is close to running out, it
+// sleeps until the last outstanding end_op() commits.
+//
+// The log is a physical re-do log containing disk blocks.
+// The on-disk log format:
+//   header block, containing sector #s for block A, B, C, ...
+//   block A
+//   block B
+//   block C
+//   ...
+// Log appends are synchronous.
+
+// Contents of the header block, used for both the on-disk header block
+// and to keep track in memory of logged sector #s before commit.
+struct logheader {
+  int n;   
+  int sector[LOGSIZE];
+};
+
+struct log {
+  struct spinlock lock;
+  int start;
+  int size;
+  int outstanding; // how many FS sys calls are executing.
+  int committing;  // in commit(), please wait.
+  int dev;
+  struct logheader lh;
+};
+struct log log;
+
+static void recover_from_log(void);
+static void commit();
+
+void
+initlog(void)
+{
+  if (sizeof(struct logheader) >= BSIZE)
+    panic("initlog: too big logheader");
+
+  struct superblock sb;
+  initlock(&log.lock, "log");
+  readsb(ROOTDEV, &sb);
+  log.start = sb.size - sb.nlog;
+  log.size = sb.nlog;
+  log.dev = ROOTDEV;
+  recover_from_log();
+}
+
+// Copy committed blocks from log to their home location
+static void 
+install_trans(void)
+{
+  int tail;
+
+  for (tail = 0; tail < log.lh.n; tail++) {
+    struct buf *lbuf = bread(log.dev, log.start+tail+1); // read log block
+    struct buf *dbuf = bread(log.dev, log.lh.sector[tail]); // read dst
+    memmove(dbuf->data, lbuf->data, BSIZE);  // copy block to dst
+    bwrite(dbuf);  // write dst to disk
+    brelse(lbuf); 
+    brelse(dbuf);
+  }
+}
+
+// Read the log header from disk into the in-memory log header
+static void
+read_head(void)
+{
+  struct buf *buf = bread(log.dev, log.start);
+  struct logheader *lh = (struct logheader *) (buf->data);
+  int i;
+  log.lh.n = lh->n;
+  for (i = 0; i < log.lh.n; i++) {
+    log.lh.sector[i] = lh->sector[i];
+  }
+  brelse(buf);
+}
+
+// Write in-memory log header to disk.
+// This is the true point at which the
+// current transaction commits.
+static void
+write_head(void)
+{
+  struct buf *buf = bread(log.dev, log.start);
+  struct logheader *hb = (struct logheader *) (buf->data);
+  int i;
+  hb->n = log.lh.n;
+  for (i = 0; i < log.lh.n; i++) {
+    hb->sector[i] = log.lh.sector[i];
+  }
+  bwrite(buf);
+  brelse(buf);
+}
+
+static void
+recover_from_log(void)
+{
+  read_head();      
+  install_trans(); // if committed, copy from log to disk
+  log.lh.n = 0;
+  write_head(); // clear the log
+}
+
+// called at the start of each FS system call.
+void
+begin_op(void)
+{
+  acquire(&log.lock);
+  while(1){
+    if(log.committing){
+      sleep(&log, &log.lock);
+    } else if(log.lh.n + (log.outstanding+1)*MAXOPBLOCKS > LOGSIZE){
+      // this op might exhaust log space; wait for commit.
+      sleep(&log, &log.lock);
+    } else {
+      log.outstanding += 1;
+      release(&log.lock);
+      break;
+    }
+  }
+}
+
+// called at the end of each FS system call.
+// commits if this was the last outstanding operation.
+void
+end_op(void)
+{
+  int do_commit = 0;
+
+  acquire(&log.lock);
+  log.outstanding -= 1;
+  if(log.committing)
+    panic("log.committing");
+  if(log.outstanding == 0){
+    do_commit = 1;
+    log.committing = 1;
+  } else {
+    // begin_op() may be waiting for log space.
+    wakeup(&log);
+  }
+  release(&log.lock);
+
+  if(do_commit){
+    // call commit w/o holding locks, since not allowed
+    // to sleep with locks.
+    commit();
+    acquire(&log.lock);
+    log.committing = 0;
+    wakeup(&log);
+    release(&log.lock);
+  }
+}
+
+// Copy modified blocks from cache to log.
+static void 
+write_log(void)
+{
+  int tail;
+
+  for (tail = 0; tail < log.lh.n; tail++) {
+    struct buf *to = bread(log.dev, log.start+tail+1); // log block
+    struct buf *from = bread(log.dev, log.lh.sector[tail]); // cache block
+    memmove(to->data, from->data, BSIZE);
+    bwrite(to);  // write the log
+    brelse(from); 
+    brelse(to);
+  }
+}
+
+static void
+commit()
+{
+  if (log.lh.n > 0) {
+    write_log();     // Write modified blocks from cache to log
+    write_head();    // Write header to disk -- the real commit
+    install_trans(); // Now install writes to home locations
+    log.lh.n = 0; 
+    write_head();    // Erase the transaction from the log
+  }
+}
+
+// Caller has modified b->data and is done with the buffer.
+// Record the block number and pin in the cache with B_DIRTY.
+// commit()/write_log() will do the disk write.
+//
+// log_write() replaces bwrite(); a typical use is:
+//   bp = bread(...)
+//   modify bp->data[]
+//   log_write(bp)
+//   brelse(bp)
+void
+log_write(struct buf *b)
+{
+  int i;
+
+  if (log.lh.n >= LOGSIZE || log.lh.n >= log.size - 1)
+    panic("too big a transaction");
+  if (log.outstanding < 1)
+    panic("log_write outside of trans");
+
+  acquire(&log.lock);
+  for (i = 0; i < log.lh.n; i++) {
+    if (log.lh.sector[i] == b->sector)   // log absorbtion
+      break;
+  }
+  log.lh.sector[i] = b->sector;
+  if (i == log.lh.n)
+    log.lh.n++;
+  b->flags |= B_DIRTY; // prevent eviction
+  release(&log.lock);
+}
+
diff --git a/ls.c b/ls.c
new file mode 100644
index 0000000..b6ddd7f
--- /dev/null
+++ b/ls.c
@@ -0,0 +1,85 @@
+#include "types.h"
+#include "stat.h"
+#include "user.h"
+#include "fs.h"
+
+char*
+fmtname(char *path)
+{
+  static char buf[DIRSIZ+1];
+  char *p;
+  
+  // Find first character after last slash.
+  for(p=path+strlen(path); p >= path && *p != '/'; p--)
+    ;
+  p++;
+  
+  // Return blank-padded name.
+  if(strlen(p) >= DIRSIZ)
+    return p;
+  memmove(buf, p, strlen(p));
+  memset(buf+strlen(p), ' ', DIRSIZ-strlen(p));
+  return buf;
+}
+
+void
+ls(char *path)
+{
+  char buf[512], *p;
+  int fd;
+  struct dirent de;
+  struct stat st;
+  
+  if((fd = open(path, 0)) < 0){
+    printf(2, "ls: cannot open %s\n", path);
+    return;
+  }
+  
+  if(fstat(fd, &st) < 0){
+    printf(2, "ls: cannot stat %s\n", path);
+    close(fd);
+    return;
+  }
+  
+  switch(st.type){
+  case T_FILE:
+    printf(1, "%s %d %d %d\n", fmtname(path), st.type, st.ino, st.size);
+    break;
+  
+  case T_DIR:
+    if(strlen(path) + 1 + DIRSIZ + 1 > sizeof buf){
+      printf(1, "ls: path too long\n");
+      break;
+    }
+    strcpy(buf, path);
+    p = buf+strlen(buf);
+    *p++ = '/';
+    while(read(fd, &de, sizeof(de)) == sizeof(de)){
+      if(de.inum == 0)
+        continue;
+      memmove(p, de.name, DIRSIZ);
+      p[DIRSIZ] = 0;
+      if(stat(buf, &st) < 0){
+        printf(1, "ls: cannot stat %s\n", buf);
+        continue;
+      }
+      printf(1, "%s %d %d %d\n", fmtname(buf), st.type, st.ino, st.size);
+    }
+    break;
+  }
+  close(fd);
+}
+
+int
+main(int argc, char *argv[])
+{
+  int i;
+
+  if(argc < 2){
+    ls(".");
+    exit();
+  }
+  for(i=1; i<argc; i++)
+    ls(argv[i]);
+  exit();
+}
diff --git a/main.c b/main.c
new file mode 100644
index 0000000..8a73c0f
--- /dev/null
+++ b/main.c
@@ -0,0 +1,119 @@
+#include "types.h"
+#include "defs.h"
+#include "param.h"
+#include "memlayout.h"
+#include "mmu.h"
+#include "proc.h"
+#include "x86.h"
+
+static void startothers(void);
+static void mpmain(void)  __attribute__((noreturn));
+extern pde_t *kpgdir;
+extern char end[]; // first address after kernel loaded from ELF file
+
+// Bootstrap processor starts running C code here.
+// Allocate a real stack and switch to it, first
+// doing some setup required for memory allocator to work.
+int
+main(void)
+{
+  kinit1(end, P2V(4*1024*1024)); // phys page allocator
+  kvmalloc();      // kernel page table
+  mpinit();        // collect info about this machine
+  lapicinit();
+  seginit();       // set up segments
+  cprintf("\ncpu%d: starting xv6\n\n", cpu->id);
+  picinit();       // interrupt controller
+  ioapicinit();    // another interrupt controller
+  consoleinit();   // I/O devices & their interrupts
+  uartinit();      // serial port
+  pinit();         // process table
+  tvinit();        // trap vectors
+  binit();         // buffer cache
+  fileinit();      // file table
+  iinit();         // inode cache
+  ideinit();       // disk
+  if(!ismp)
+    timerinit();   // uniprocessor timer
+  startothers();   // start other processors
+  kinit2(P2V(4*1024*1024), P2V(PHYSTOP)); // must come after startothers()
+  userinit();      // first user process
+  // Finish setting up this processor in mpmain.
+  mpmain();
+}
+
+// Other CPUs jump here from entryother.S.
+static void
+mpenter(void)
+{
+  switchkvm(); 
+  seginit();
+  lapicinit();
+  mpmain();
+}
+
+// Common CPU setup code.
+static void
+mpmain(void)
+{
+  cprintf("cpu%d: starting\n", cpu->id);
+  idtinit();       // load idt register
+  xchg(&cpu->started, 1); // tell startothers() we're up
+  scheduler();     // start running processes
+}
+
+pde_t entrypgdir[];  // For entry.S
+
+// Start the non-boot (AP) processors.
+static void
+startothers(void)
+{
+  extern uchar _binary_entryother_start[], _binary_entryother_size[];
+  uchar *code;
+  struct cpu *c;
+  char *stack;
+
+  // Write entry code to unused memory at 0x7000.
+  // The linker has placed the image of entryother.S in
+  // _binary_entryother_start.
+  code = p2v(0x7000);
+  memmove(code, _binary_entryother_start, (uint)_binary_entryother_size);
+
+  for(c = cpus; c < cpus+ncpu; c++){
+    if(c == cpus+cpunum())  // We've started already.
+      continue;
+
+    // Tell entryother.S what stack to use, where to enter, and what 
+    // pgdir to use. We cannot use kpgdir yet, because the AP processor
+    // is running in low  memory, so we use entrypgdir for the APs too.
+    stack = kalloc();
+    *(void**)(code-4) = stack + KSTACKSIZE;
+    *(void**)(code-8) = mpenter;
+    *(int**)(code-12) = (void *) v2p(entrypgdir);
+
+    lapicstartap(c->id, v2p(code));
+
+    // wait for cpu to finish mpmain()
+    while(c->started == 0)
+      ;
+  }
+}
+
+// Boot page table used in entry.S and entryother.S.
+// Page directories (and page tables), must start on a page boundary,
+// hence the "__aligned__" attribute.  
+// Use PTE_PS in page directory entry to enable 4Mbyte pages.
+__attribute__((__aligned__(PGSIZE)))
+pde_t entrypgdir[NPDENTRIES] = {
+  // Map VA's [0, 4MB) to PA's [0, 4MB)
+  [0] = (0) | PTE_P | PTE_W | PTE_PS,
+  // Map VA's [KERNBASE, KERNBASE+4MB) to PA's [0, 4MB)
+  [KERNBASE>>PDXSHIFT] = (0) | PTE_P | PTE_W | PTE_PS,
+};
+
+//PAGEBREAK!
+// Blank page.
+//PAGEBREAK!
+// Blank page.
+//PAGEBREAK!
+// Blank page.
diff --git a/memide.c b/memide.c
new file mode 100644
index 0000000..d2c5bb7
--- /dev/null
+++ b/memide.c
@@ -0,0 +1,58 @@
+// Fake IDE disk; stores blocks in memory.
+// Useful for running kernel without scratch disk.
+
+#include "types.h"
+#include "defs.h"
+#include "param.h"
+#include "mmu.h"
+#include "proc.h"
+#include "x86.h"
+#include "traps.h"
+#include "spinlock.h"
+#include "buf.h"
+
+extern uchar _binary_fs_img_start[], _binary_fs_img_size[];
+
+static int disksize;
+static uchar *memdisk;
+
+void
+ideinit(void)
+{
+  memdisk = _binary_fs_img_start;
+  disksize = (uint)_binary_fs_img_size/512;
+}
+
+// Interrupt handler.
+void
+ideintr(void)
+{
+  // no-op
+}
+
+// Sync buf with disk. 
+// If B_DIRTY is set, write buf to disk, clear B_DIRTY, set B_VALID.
+// Else if B_VALID is not set, read buf from disk, set B_VALID.
+void
+iderw(struct buf *b)
+{
+  uchar *p;
+
+  if(!(b->flags & B_BUSY))
+    panic("iderw: buf not busy");
+  if((b->flags & (B_VALID|B_DIRTY)) == B_VALID)
+    panic("iderw: nothing to do");
+  if(b->dev != 1)
+    panic("iderw: request not for disk 1");
+  if(b->sector >= disksize)
+    panic("iderw: sector out of range");
+
+  p = memdisk + b->sector*512;
+  
+  if(b->flags & B_DIRTY){
+    b->flags &= ~B_DIRTY;
+    memmove(p, b->data, 512);
+  } else
+    memmove(b->data, p, 512);
+  b->flags |= B_VALID;
+}
diff --git a/memlayout.h b/memlayout.h
new file mode 100644
index 0000000..6a62cd7
--- /dev/null
+++ b/memlayout.h
@@ -0,0 +1,22 @@
+// Memory layout
+
+#define EXTMEM  0x100000            // Start of extended memory
+#define PHYSTOP 0xE000000           // Top physical memory
+#define DEVSPACE 0xFE000000         // Other devices are at high addresses
+
+// Key addresses for address space layout (see kmap in vm.c for layout)
+#define KERNBASE 0x80000000         // First kernel virtual address
+#define KERNLINK (KERNBASE+EXTMEM)  // Address where kernel is linked
+
+#ifndef __ASSEMBLER__
+
+static inline uint v2p(void *a) { return ((uint) (a))  - KERNBASE; }
+static inline void *p2v(uint a) { return (void *) ((a) + KERNBASE); }
+
+#endif
+
+#define V2P(a) (((uint) (a)) - KERNBASE)
+#define P2V(a) (((void *) (a)) + KERNBASE)
+
+#define V2P_WO(x) ((x) - KERNBASE)    // same as V2P, but without casts
+#define P2V_WO(x) ((x) + KERNBASE)    // same as V2P, but without casts
diff --git a/mkdir.c b/mkdir.c
new file mode 100644
index 0000000..6e4c954
--- /dev/null
+++ b/mkdir.c
@@ -0,0 +1,23 @@
+#include "types.h"
+#include "stat.h"
+#include "user.h"
+
+int
+main(int argc, char *argv[])
+{
+  int i;
+
+  if(argc < 2){
+    printf(2, "Usage: mkdir files...\n");
+    exit();
+  }
+
+  for(i = 1; i < argc; i++){
+    if(mkdir(argv[i]) < 0){
+      printf(2, "mkdir: %s failed to create\n", argv[i]);
+      break;
+    }
+  }
+
+  exit();
+}
diff --git a/mkfs.c b/mkfs.c
new file mode 100644
index 0000000..c168377
--- /dev/null
+++ b/mkfs.c
@@ -0,0 +1,298 @@
+#include <stdio.h>
+#include <unistd.h>
+#include <stdlib.h>
+#include <string.h>
+#include <fcntl.h>
+#include <assert.h>
+
+#define stat xv6_stat  // avoid clash with host struct stat
+#include "types.h"
+#include "fs.h"
+#include "stat.h"
+#include "param.h"
+
+#define static_assert(a, b) do { switch (0) case 0: case (a): ; } while (0)
+
+int nblocks = (995-LOGSIZE);
+int nlog = LOGSIZE;
+int ninodes = 200;
+int size = 1024;
+
+int fsfd;
+struct superblock sb;
+char zeroes[512];
+uint freeblock;
+uint usedblocks;
+uint bitblocks;
+uint freeinode = 1;
+
+void balloc(int);
+void wsect(uint, void*);
+void winode(uint, struct dinode*);
+void rinode(uint inum, struct dinode *ip);
+void rsect(uint sec, void *buf);
+uint ialloc(ushort type);
+void iappend(uint inum, void *p, int n);
+
+// convert to intel byte order
+ushort
+xshort(ushort x)
+{
+  ushort y;
+  uchar *a = (uchar*)&y;
+  a[0] = x;
+  a[1] = x >> 8;
+  return y;
+}
+
+uint
+xint(uint x)
+{
+  uint y;
+  uchar *a = (uchar*)&y;
+  a[0] = x;
+  a[1] = x >> 8;
+  a[2] = x >> 16;
+  a[3] = x >> 24;
+  return y;
+}
+
+int
+main(int argc, char *argv[])
+{
+  int i, cc, fd;
+  uint rootino, inum, off;
+  struct dirent de;
+  char buf[512];
+  struct dinode din;
+
+
+  static_assert(sizeof(int) == 4, "Integers must be 4 bytes!");
+
+  if(argc < 2){
+    fprintf(stderr, "Usage: mkfs fs.img files...\n");
+    exit(1);
+  }
+
+  assert((512 % sizeof(struct dinode)) == 0);
+  assert((512 % sizeof(struct dirent)) == 0);
+
+  fsfd = open(argv[1], O_RDWR|O_CREAT|O_TRUNC, 0666);
+  if(fsfd < 0){
+    perror(argv[1]);
+    exit(1);
+  }
+
+  sb.size = xint(size);
+  sb.nblocks = xint(nblocks); // so whole disk is size sectors
+  sb.ninodes = xint(ninodes);
+  sb.nlog = xint(nlog);
+
+  bitblocks = size/(512*8) + 1;
+  usedblocks = ninodes / IPB + 3 + bitblocks;
+  freeblock = usedblocks;
+
+  printf("used %d (bit %d ninode %zu) free %u log %u total %d\n", usedblocks,
+         bitblocks, ninodes/IPB + 1, freeblock, nlog, nblocks+usedblocks+nlog);
+
+  assert(nblocks + usedblocks + nlog == size);
+
+  for(i = 0; i < nblocks + usedblocks + nlog; i++)
+    wsect(i, zeroes);
+
+  memset(buf, 0, sizeof(buf));
+  memmove(buf, &sb, sizeof(sb));
+  wsect(1, buf);
+
+  rootino = ialloc(T_DIR);
+  assert(rootino == ROOTINO);
+
+  bzero(&de, sizeof(de));
+  de.inum = xshort(rootino);
+  strcpy(de.name, ".");
+  iappend(rootino, &de, sizeof(de));
+
+  bzero(&de, sizeof(de));
+  de.inum = xshort(rootino);
+  strcpy(de.name, "..");
+  iappend(rootino, &de, sizeof(de));
+
+  for(i = 2; i < argc; i++){
+    assert(index(argv[i], '/') == 0);
+
+    if((fd = open(argv[i], 0)) < 0){
+      perror(argv[i]);
+      exit(1);
+    }
+    
+    // Skip leading _ in name when writing to file system.
+    // The binaries are named _rm, _cat, etc. to keep the
+    // build operating system from trying to execute them
+    // in place of system binaries like rm and cat.
+    if(argv[i][0] == '_')
+      ++argv[i];
+
+    inum = ialloc(T_FILE);
+
+    bzero(&de, sizeof(de));
+    de.inum = xshort(inum);
+    strncpy(de.name, argv[i], DIRSIZ);
+    iappend(rootino, &de, sizeof(de));
+
+    while((cc = read(fd, buf, sizeof(buf))) > 0)
+      iappend(inum, buf, cc);
+
+    close(fd);
+  }
+
+  // fix size of root inode dir
+  rinode(rootino, &din);
+  off = xint(din.size);
+  off = ((off/BSIZE) + 1) * BSIZE;
+  din.size = xint(off);
+  winode(rootino, &din);
+
+  balloc(usedblocks);
+
+  exit(0);
+}
+
+void
+wsect(uint sec, void *buf)
+{
+  if(lseek(fsfd, sec * 512L, 0) != sec * 512L){
+    perror("lseek");
+    exit(1);
+  }
+  if(write(fsfd, buf, 512) != 512){
+    perror("write");
+    exit(1);
+  }
+}
+
+uint
+i2b(uint inum)
+{
+  return (inum / IPB) + 2;
+}
+
+void
+winode(uint inum, struct dinode *ip)
+{
+  char buf[512];
+  uint bn;
+  struct dinode *dip;
+
+  bn = i2b(inum);
+  rsect(bn, buf);
+  dip = ((struct dinode*)buf) + (inum % IPB);
+  *dip = *ip;
+  wsect(bn, buf);
+}
+
+void
+rinode(uint inum, struct dinode *ip)
+{
+  char buf[512];
+  uint bn;
+  struct dinode *dip;
+
+  bn = i2b(inum);
+  rsect(bn, buf);
+  dip = ((struct dinode*)buf) + (inum % IPB);
+  *ip = *dip;
+}
+
+void
+rsect(uint sec, void *buf)
+{
+  if(lseek(fsfd, sec * 512L, 0) != sec * 512L){
+    perror("lseek");
+    exit(1);
+  }
+  if(read(fsfd, buf, 512) != 512){
+    perror("read");
+    exit(1);
+  }
+}
+
+uint
+ialloc(ushort type)
+{
+  uint inum = freeinode++;
+  struct dinode din;
+
+  bzero(&din, sizeof(din));
+  din.type = xshort(type);
+  din.nlink = xshort(1);
+  din.size = xint(0);
+  winode(inum, &din);
+  return inum;
+}
+
+void
+balloc(int used)
+{
+  uchar buf[512];
+  int i;
+
+  printf("balloc: first %d blocks have been allocated\n", used);
+  assert(used < 512*8);
+  bzero(buf, 512);
+  for(i = 0; i < used; i++){
+    buf[i/8] = buf[i/8] | (0x1 << (i%8));
+  }
+  printf("balloc: write bitmap block at sector %zu\n", ninodes/IPB + 3);
+  wsect(ninodes / IPB + 3, buf);
+}
+
+#define min(a, b) ((a) < (b) ? (a) : (b))
+
+void
+iappend(uint inum, void *xp, int n)
+{
+  char *p = (char*)xp;
+  uint fbn, off, n1;
+  struct dinode din;
+  char buf[512];
+  uint indirect[NINDIRECT];
+  uint x;
+
+  rinode(inum, &din);
+
+  off = xint(din.size);
+  while(n > 0){
+    fbn = off / 512;
+    assert(fbn < MAXFILE);
+    if(fbn < NDIRECT){
+      if(xint(din.addrs[fbn]) == 0){
+        din.addrs[fbn] = xint(freeblock++);
+        usedblocks++;
+      }
+      x = xint(din.addrs[fbn]);
+    } else {
+      if(xint(din.addrs[NDIRECT]) == 0){
+        // printf("allocate indirect block\n");
+        din.addrs[NDIRECT] = xint(freeblock++);
+        usedblocks++;
+      }
+      // printf("read indirect block\n");
+      rsect(xint(din.addrs[NDIRECT]), (char*)indirect);
+      if(indirect[fbn - NDIRECT] == 0){
+        indirect[fbn - NDIRECT] = xint(freeblock++);
+        usedblocks++;
+        wsect(xint(din.addrs[NDIRECT]), (char*)indirect);
+      }
+      x = xint(indirect[fbn-NDIRECT]);
+    }
+    n1 = min(n, (fbn + 1) * 512 - off);
+    rsect(x, buf);
+    bcopy(p, buf + off - (fbn * 512), n1);
+    wsect(x, buf);
+    n -= n1;
+    off += n1;
+    p += n1;
+  }
+  din.size = xint(off);
+  winode(inum, &din);
+}
diff --git a/mmu.h b/mmu.h
new file mode 100644
index 0000000..685f51d
--- /dev/null
+++ b/mmu.h
@@ -0,0 +1,226 @@
+// This file contains definitions for the 
+// x86 memory management unit (MMU).
+
+// Eflags register
+#define FL_CF           0x00000001      // Carry Flag
+#define FL_PF           0x00000004      // Parity Flag
+#define FL_AF           0x00000010      // Auxiliary carry Flag
+#define FL_ZF           0x00000040      // Zero Flag
+#define FL_SF           0x00000080      // Sign Flag
+#define FL_TF           0x00000100      // Trap Flag
+#define FL_IF           0x00000200      // Interrupt Enable
+#define FL_DF           0x00000400      // Direction Flag
+#define FL_OF           0x00000800      // Overflow Flag
+#define FL_IOPL_MASK    0x00003000      // I/O Privilege Level bitmask
+#define FL_IOPL_0       0x00000000      //   IOPL == 0
+#define FL_IOPL_1       0x00001000      //   IOPL == 1
+#define FL_IOPL_2       0x00002000      //   IOPL == 2
+#define FL_IOPL_3       0x00003000      //   IOPL == 3
+#define FL_NT           0x00004000      // Nested Task
+#define FL_RF           0x00010000      // Resume Flag
+#define FL_VM           0x00020000      // Virtual 8086 mode
+#define FL_AC           0x00040000      // Alignment Check
+#define FL_VIF          0x00080000      // Virtual Interrupt Flag
+#define FL_VIP          0x00100000      // Virtual Interrupt Pending
+#define FL_ID           0x00200000      // ID flag
+
+// Control Register flags
+#define CR0_PE          0x00000001      // Protection Enable
+#define CR0_MP          0x00000002      // Monitor coProcessor
+#define CR0_EM          0x00000004      // Emulation
+#define CR0_TS          0x00000008      // Task Switched
+#define CR0_ET          0x00000010      // Extension Type
+#define CR0_NE          0x00000020      // Numeric Errror
+#define CR0_WP          0x00010000      // Write Protect
+#define CR0_AM          0x00040000      // Alignment Mask
+#define CR0_NW          0x20000000      // Not Writethrough
+#define CR0_CD          0x40000000      // Cache Disable
+#define CR0_PG          0x80000000      // Paging
+
+#define CR4_PSE         0x00000010      // Page size extension
+
+#define SEG_KCODE 1  // kernel code
+#define SEG_KDATA 2  // kernel data+stack
+#define SEG_KCPU  3  // kernel per-cpu data
+#define SEG_UCODE 4  // user code
+#define SEG_UDATA 5  // user data+stack
+#define SEG_TSS   6  // this process's task state
+
+//PAGEBREAK!
+#ifndef __ASSEMBLER__
+// Segment Descriptor
+struct segdesc {
+  uint lim_15_0 : 16;  // Low bits of segment limit
+  uint base_15_0 : 16; // Low bits of segment base address
+  uint base_23_16 : 8; // Middle bits of segment base address
+  uint type : 4;       // Segment type (see STS_ constants)
+  uint s : 1;          // 0 = system, 1 = application
+  uint dpl : 2;        // Descriptor Privilege Level
+  uint p : 1;          // Present
+  uint lim_19_16 : 4;  // High bits of segment limit
+  uint avl : 1;        // Unused (available for software use)
+  uint rsv1 : 1;       // Reserved
+  uint db : 1;         // 0 = 16-bit segment, 1 = 32-bit segment
+  uint g : 1;          // Granularity: limit scaled by 4K when set
+  uint base_31_24 : 8; // High bits of segment base address
+};
+
+// Normal segment
+#define SEG(type, base, lim, dpl) (struct segdesc)    \
+{ ((lim) >> 12) & 0xffff, (uint)(base) & 0xffff,      \
+  ((uint)(base) >> 16) & 0xff, type, 1, dpl, 1,       \
+  (uint)(lim) >> 28, 0, 0, 1, 1, (uint)(base) >> 24 }
+#define SEG16(type, base, lim, dpl) (struct segdesc)  \
+{ (lim) & 0xffff, (uint)(base) & 0xffff,              \
+  ((uint)(base) >> 16) & 0xff, type, 1, dpl, 1,       \
+  (uint)(lim) >> 16, 0, 0, 1, 0, (uint)(base) >> 24 }
+#endif
+
+#define DPL_USER    0x3     // User DPL
+
+// Application segment type bits
+#define STA_X       0x8     // Executable segment
+#define STA_E       0x4     // Expand down (non-executable segments)
+#define STA_C       0x4     // Conforming code segment (executable only)
+#define STA_W       0x2     // Writeable (non-executable segments)
+#define STA_R       0x2     // Readable (executable segments)
+#define STA_A       0x1     // Accessed
+
+// System segment type bits
+#define STS_T16A    0x1     // Available 16-bit TSS
+#define STS_LDT     0x2     // Local Descriptor Table
+#define STS_T16B    0x3     // Busy 16-bit TSS
+#define STS_CG16    0x4     // 16-bit Call Gate
+#define STS_TG      0x5     // Task Gate / Coum Transmitions
+#define STS_IG16    0x6     // 16-bit Interrupt Gate
+#define STS_TG16    0x7     // 16-bit Trap Gate
+#define STS_T32A    0x9     // Available 32-bit TSS
+#define STS_T32B    0xB     // Busy 32-bit TSS
+#define STS_CG32    0xC     // 32-bit Call Gate
+#define STS_IG32    0xE     // 32-bit Interrupt Gate
+#define STS_TG32    0xF     // 32-bit Trap Gate
+
+// A virtual address 'la' has a three-part structure as follows:
+//
+// +--------10------+-------10-------+---------12----------+
+// | Page Directory |   Page Table   | Offset within Page  |
+// |      Index     |      Index     |                     |
+// +----------------+----------------+---------------------+
+//  \--- PDX(va) --/ \--- PTX(va) --/ 
+
+// page directory index
+#define PDX(va)         (((uint)(va) >> PDXSHIFT) & 0x3FF)
+
+// page table index
+#define PTX(va)         (((uint)(va) >> PTXSHIFT) & 0x3FF)
+
+// construct virtual address from indexes and offset
+#define PGADDR(d, t, o) ((uint)((d) << PDXSHIFT | (t) << PTXSHIFT | (o)))
+
+// Page directory and page table constants.
+#define NPDENTRIES      1024    // # directory entries per page directory
+#define NPTENTRIES      1024    // # PTEs per page table
+#define PGSIZE          4096    // bytes mapped by a page
+
+#define PGSHIFT         12      // log2(PGSIZE)
+#define PTXSHIFT        12      // offset of PTX in a linear address
+#define PDXSHIFT        22      // offset of PDX in a linear address
+
+#define PGROUNDUP(sz)  (((sz)+PGSIZE-1) & ~(PGSIZE-1))
+#define PGROUNDDOWN(a) (((a)) & ~(PGSIZE-1))
+
+// Page table/directory entry flags.
+#define PTE_P           0x001   // Present
+#define PTE_W           0x002   // Writeable
+#define PTE_U           0x004   // User
+#define PTE_PWT         0x008   // Write-Through
+#define PTE_PCD         0x010   // Cache-Disable
+#define PTE_A           0x020   // Accessed
+#define PTE_D           0x040   // Dirty
+#define PTE_PS          0x080   // Page Size
+#define PTE_MBZ         0x180   // Bits must be zero
+
+// Address in page table or page directory entry
+#define PTE_ADDR(pte)   ((uint)(pte) & ~0xFFF)
+#define PTE_FLAGS(pte)  ((uint)(pte) &  0xFFF)
+
+#ifndef __ASSEMBLER__
+typedef uint pte_t;
+
+// Task state segment format
+struct taskstate {
+  uint link;         // Old ts selector
+  uint esp0;         // Stack pointers and segment selectors
+  ushort ss0;        //   after an increase in privilege level
+  ushort padding1;
+  uint *esp1;
+  ushort ss1;
+  ushort padding2;
+  uint *esp2;
+  ushort ss2;
+  ushort padding3;
+  void *cr3;         // Page directory base
+  uint *eip;         // Saved state from last task switch
+  uint eflags;
+  uint eax;          // More saved state (registers)
+  uint ecx;
+  uint edx;
+  uint ebx;
+  uint *esp;
+  uint *ebp;
+  uint esi;
+  uint edi;
+  ushort es;         // Even more saved state (segment selectors)
+  ushort padding4;
+  ushort cs;
+  ushort padding5;
+  ushort ss;
+  ushort padding6;
+  ushort ds;
+  ushort padding7;
+  ushort fs;
+  ushort padding8;
+  ushort gs;
+  ushort padding9;
+  ushort ldt;
+  ushort padding10;
+  ushort t;          // Trap on task switch
+  ushort iomb;       // I/O map base address
+};
+
+// PAGEBREAK: 12
+// Gate descriptors for interrupts and traps
+struct gatedesc {
+  uint off_15_0 : 16;   // low 16 bits of offset in segment
+  uint cs : 16;         // code segment selector
+  uint args : 5;        // # args, 0 for interrupt/trap gates
+  uint rsv1 : 3;        // reserved(should be zero I guess)
+  uint type : 4;        // type(STS_{TG,IG32,TG32})
+  uint s : 1;           // must be 0 (system)
+  uint dpl : 2;         // descriptor(meaning new) privilege level
+  uint p : 1;           // Present
+  uint off_31_16 : 16;  // high bits of offset in segment
+};
+
+// Set up a normal interrupt/trap gate descriptor.
+// - istrap: 1 for a trap (= exception) gate, 0 for an interrupt gate.
+//   interrupt gate clears FL_IF, trap gate leaves FL_IF alone
+// - sel: Code segment selector for interrupt/trap handler
+// - off: Offset in code segment for interrupt/trap handler
+// - dpl: Descriptor Privilege Level -
+//        the privilege level required for software to invoke
+//        this interrupt/trap gate explicitly using an int instruction.
+#define SETGATE(gate, istrap, sel, off, d)                \
+{                                                         \
+  (gate).off_15_0 = (uint)(off) & 0xffff;                \
+  (gate).cs = (sel);                                      \
+  (gate).args = 0;                                        \
+  (gate).rsv1 = 0;                                        \
+  (gate).type = (istrap) ? STS_TG32 : STS_IG32;           \
+  (gate).s = 0;                                           \
+  (gate).dpl = (d);                                       \
+  (gate).p = 1;                                           \
+  (gate).off_31_16 = (uint)(off) >> 16;                  \
+}
+
+#endif
diff --git a/mp.c b/mp.c
new file mode 100644
index 0000000..5b52a98
--- /dev/null
+++ b/mp.c
@@ -0,0 +1,156 @@
+// Multiprocessor support
+// Search memory for MP description structures.
+// http://developer.intel.com/design/pentium/datashts/24201606.pdf
+
+#include "types.h"
+#include "defs.h"
+#include "param.h"
+#include "memlayout.h"
+#include "mp.h"
+#include "x86.h"
+#include "mmu.h"
+#include "proc.h"
+
+struct cpu cpus[NCPU];
+static struct cpu *bcpu;
+int ismp;
+int ncpu;
+uchar ioapicid;
+
+int
+mpbcpu(void)
+{
+  return bcpu-cpus;
+}
+
+static uchar
+sum(uchar *addr, int len)
+{
+  int i, sum;
+  
+  sum = 0;
+  for(i=0; i<len; i++)
+    sum += addr[i];
+  return sum;
+}
+
+// Look for an MP structure in the len bytes at addr.
+static struct mp*
+mpsearch1(uint a, int len)
+{
+  uchar *e, *p, *addr;
+
+  addr = p2v(a);
+  e = addr+len;
+  for(p = addr; p < e; p += sizeof(struct mp))
+    if(memcmp(p, "_MP_", 4) == 0 && sum(p, sizeof(struct mp)) == 0)
+      return (struct mp*)p;
+  return 0;
+}
+
+// Search for the MP Floating Pointer Structure, which according to the
+// spec is in one of the following three locations:
+// 1) in the first KB of the EBDA;
+// 2) in the last KB of system base memory;
+// 3) in the BIOS ROM between 0xE0000 and 0xFFFFF.
+static struct mp*
+mpsearch(void)
+{
+  uchar *bda;
+  uint p;
+  struct mp *mp;
+
+  bda = (uchar *) P2V(0x400);
+  if((p = ((bda[0x0F]<<8)| bda[0x0E]) << 4)){
+    if((mp = mpsearch1(p, 1024)))
+      return mp;
+  } else {
+    p = ((bda[0x14]<<8)|bda[0x13])*1024;
+    if((mp = mpsearch1(p-1024, 1024)))
+      return mp;
+  }
+  return mpsearch1(0xF0000, 0x10000);
+}
+
+// Search for an MP configuration table.  For now,
+// don't accept the default configurations (physaddr == 0).
+// Check for correct signature, calculate the checksum and,
+// if correct, check the version.
+// To do: check extended table checksum.
+static struct mpconf*
+mpconfig(struct mp **pmp)
+{
+  struct mpconf *conf;
+  struct mp *mp;
+
+  if((mp = mpsearch()) == 0 || mp->physaddr == 0)
+    return 0;
+  conf = (struct mpconf*) p2v((uint) mp->physaddr);
+  if(memcmp(conf, "PCMP", 4) != 0)
+    return 0;
+  if(conf->version != 1 && conf->version != 4)
+    return 0;
+  if(sum((uchar*)conf, conf->length) != 0)
+    return 0;
+  *pmp = mp;
+  return conf;
+}
+
+void
+mpinit(void)
+{
+  uchar *p, *e;
+  struct mp *mp;
+  struct mpconf *conf;
+  struct mpproc *proc;
+  struct mpioapic *ioapic;
+
+  bcpu = &cpus[0];
+  if((conf = mpconfig(&mp)) == 0)
+    return;
+  ismp = 1;
+  lapic = (uint*)conf->lapicaddr;
+  for(p=(uchar*)(conf+1), e=(uchar*)conf+conf->length; p<e; ){
+    switch(*p){
+    case MPPROC:
+      proc = (struct mpproc*)p;
+      if(ncpu != proc->apicid){
+        cprintf("mpinit: ncpu=%d apicid=%d\n", ncpu, proc->apicid);
+        ismp = 0;
+      }
+      if(proc->flags & MPBOOT)
+        bcpu = &cpus[ncpu];
+      cpus[ncpu].id = ncpu;
+      ncpu++;
+      p += sizeof(struct mpproc);
+      continue;
+    case MPIOAPIC:
+      ioapic = (struct mpioapic*)p;
+      ioapicid = ioapic->apicno;
+      p += sizeof(struct mpioapic);
+      continue;
+    case MPBUS:
+    case MPIOINTR:
+    case MPLINTR:
+      p += 8;
+      continue;
+    default:
+      cprintf("mpinit: unknown config type %x\n", *p);
+      ismp = 0;
+    }
+  }
+  if(!ismp){
+    // Didn't like what we found; fall back to no MP.
+    ncpu = 1;
+    lapic = 0;
+    ioapicid = 0;
+    return;
+  }
+
+  if(mp->imcrp){
+    // Bochs doesn't support IMCR, so this doesn't run on Bochs.
+    // But it would on real hardware.
+    outb(0x22, 0x70);   // Select IMCR
+    outb(0x23, inb(0x23) | 1);  // Mask external interrupts.
+  }
+}
diff --git a/mp.h b/mp.h
new file mode 100644
index 0000000..4d17283
--- /dev/null
+++ b/mp.h
@@ -0,0 +1,56 @@
+// See MultiProcessor Specification Version 1.[14]
+
+struct mp {             // floating pointer
+  uchar signature[4];           // "_MP_"
+  void *physaddr;               // phys addr of MP config table
+  uchar length;                 // 1
+  uchar specrev;                // [14]
+  uchar checksum;               // all bytes must add up to 0
+  uchar type;                   // MP system config type
+  uchar imcrp;
+  uchar reserved[3];
+};
+
+struct mpconf {         // configuration table header
+  uchar signature[4];           // "PCMP"
+  ushort length;                // total table length
+  uchar version;                // [14]
+  uchar checksum;               // all bytes must add up to 0
+  uchar product[20];            // product id
+  uint *oemtable;               // OEM table pointer
+  ushort oemlength;             // OEM table length
+  ushort entry;                 // entry count
+  uint *lapicaddr;              // address of local APIC
+  ushort xlength;               // extended table length
+  uchar xchecksum;              // extended table checksum
+  uchar reserved;
+};
+
+struct mpproc {         // processor table entry
+  uchar type;                   // entry type (0)
+  uchar apicid;                 // local APIC id
+  uchar version;                // local APIC verison
+  uchar flags;                  // CPU flags
+    #define MPBOOT 0x02           // This proc is the bootstrap processor.
+  uchar signature[4];           // CPU signature
+  uint feature;                 // feature flags from CPUID instruction
+  uchar reserved[8];
+};
+
+struct mpioapic {       // I/O APIC table entry
+  uchar type;                   // entry type (2)
+  uchar apicno;                 // I/O APIC id
+  uchar version;                // I/O APIC version
+  uchar flags;                  // I/O APIC flags
+  uint *addr;                  // I/O APIC address
+};
+
+// Table entry types
+#define MPPROC    0x00  // One per processor
+#define MPBUS     0x01  // One per bus
+#define MPIOAPIC  0x02  // One per I/O APIC
+#define MPIOINTR  0x03  // One per bus interrupt source
+#define MPLINTR   0x04  // One per system interrupt source
+
+//PAGEBREAK!
+// Blank page.
diff --git a/param.h b/param.h
new file mode 100644
index 0000000..8e007ca
--- /dev/null
+++ b/param.h
@@ -0,0 +1,13 @@
+#define NPROC        64  // maximum number of processes
+#define KSTACKSIZE 4096  // size of per-process kernel stack
+#define NCPU          8  // maximum number of CPUs
+#define NOFILE       16  // open files per process
+#define NFILE       100  // open files per system
+#define NINODE       50  // maximum number of active i-nodes
+#define NDEV         10  // maximum major device number
+#define ROOTDEV       1  // device number of file system root disk
+#define MAXARG       32  // max exec arguments
+#define MAXOPBLOCKS  10  // max # of blocks any FS op writes
+#define LOGSIZE      (MAXOPBLOCKS*3)  // max data sectors in on-disk log
+#define NBUF         (MAXOPBLOCKS*3)  // size of disk block cache
+
diff --git a/picirq.c b/picirq.c
new file mode 100644
index 0000000..ff86831
--- /dev/null
+++ b/picirq.c
@@ -0,0 +1,84 @@
+// Intel 8259A programmable interrupt controllers.
+
+#include "types.h"
+#include "x86.h"
+#include "traps.h"
+
+// I/O Addresses of the two programmable interrupt controllers
+#define IO_PIC1         0x20    // Master (IRQs 0-7)
+#define IO_PIC2         0xA0    // Slave (IRQs 8-15)
+
+#define IRQ_SLAVE       2       // IRQ at which slave connects to master
+
+// Current IRQ mask.
+// Initial IRQ mask has interrupt 2 enabled (for slave 8259A).
+static ushort irqmask = 0xFFFF & ~(1<<IRQ_SLAVE);
+
+static void
+picsetmask(ushort mask)
+{
+  irqmask = mask;
+  outb(IO_PIC1+1, mask);
+  outb(IO_PIC2+1, mask >> 8);
+}
+
+void
+picenable(int irq)
+{
+  picsetmask(irqmask & ~(1<<irq));
+}
+
+// Initialize the 8259A interrupt controllers.
+void
+picinit(void)
+{
+  // mask all interrupts
+  outb(IO_PIC1+1, 0xFF);
+  outb(IO_PIC2+1, 0xFF);
+
+  // Set up master (8259A-1)
+
+  // ICW1:  0001g0hi
+  //    g:  0 = edge triggering, 1 = level triggering
+  //    h:  0 = cascaded PICs, 1 = master only
+  //    i:  0 = no ICW4, 1 = ICW4 required
+  outb(IO_PIC1, 0x11);
+
+  // ICW2:  Vector offset
+  outb(IO_PIC1+1, T_IRQ0);
+
+  // ICW3:  (master PIC) bit mask of IR lines connected to slaves
+  //        (slave PIC) 3-bit # of slave's connection to master
+  outb(IO_PIC1+1, 1<<IRQ_SLAVE);
+
+  // ICW4:  000nbmap
+  //    n:  1 = special fully nested mode
+  //    b:  1 = buffered mode
+  //    m:  0 = slave PIC, 1 = master PIC
+  //      (ignored when b is 0, as the master/slave role
+  //      can be hardwired).
+  //    a:  1 = Automatic EOI mode
+  //    p:  0 = MCS-80/85 mode, 1 = intel x86 mode
+  outb(IO_PIC1+1, 0x3);
+
+  // Set up slave (8259A-2)
+  outb(IO_PIC2, 0x11);                  // ICW1
+  outb(IO_PIC2+1, T_IRQ0 + 8);      // ICW2
+  outb(IO_PIC2+1, IRQ_SLAVE);           // ICW3
+  // NB Automatic EOI mode doesn't tend to work on the slave.
+  // Linux source code says it's "to be investigated".
+  outb(IO_PIC2+1, 0x3);                 // ICW4
+
+  // OCW3:  0ef01prs
+  //   ef:  0x = NOP, 10 = clear specific mask, 11 = set specific mask
+  //    p:  0 = no polling, 1 = polling mode
+  //   rs:  0x = NOP, 10 = read IRR, 11 = read ISR
+  outb(IO_PIC1, 0x68);             // clear specific mask
+  outb(IO_PIC1, 0x0a);             // read IRR by default
+
+  outb(IO_PIC2, 0x68);             // OCW3
+  outb(IO_PIC2, 0x0a);             // OCW3
+
+  if(irqmask != 0xFFFF)
+    picsetmask(irqmask);
+}
diff --git a/pipe.c b/pipe.c
new file mode 100644
index 0000000..f76ed5c
--- /dev/null
+++ b/pipe.c
@@ -0,0 +1,120 @@
+#include "types.h"
+#include "defs.h"
+#include "param.h"
+#include "mmu.h"
+#include "proc.h"
+#include "fs.h"
+#include "file.h"
+#include "spinlock.h"
+
+#define PIPESIZE 512
+
+struct pipe {
+  struct spinlock lock;
+  char data[PIPESIZE];
+  uint nread;     // number of bytes read
+  uint nwrite;    // number of bytes written
+  int readopen;   // read fd is still open
+  int writeopen;  // write fd is still open
+};
+
+int
+pipealloc(struct file **f0, struct file **f1)
+{
+  struct pipe *p;
+
+  p = 0;
+  *f0 = *f1 = 0;
+  if((*f0 = filealloc()) == 0 || (*f1 = filealloc()) == 0)
+    goto bad;
+  if((p = (struct pipe*)kalloc()) == 0)
+    goto bad;
+  p->readopen = 1;
+  p->writeopen = 1;
+  p->nwrite = 0;
+  p->nread = 0;
+  initlock(&p->lock, "pipe");
+  (*f0)->type = FD_PIPE;
+  (*f0)->readable = 1;
+  (*f0)->writable = 0;
+  (*f0)->pipe = p;
+  (*f1)->type = FD_PIPE;
+  (*f1)->readable = 0;
+  (*f1)->writable = 1;
+  (*f1)->pipe = p;
+  return 0;
+
+//PAGEBREAK: 20
+ bad:
+  if(p)
+    kfree((char*)p);
+  if(*f0)
+    fileclose(*f0);
+  if(*f1)
+    fileclose(*f1);
+  return -1;
+}
+
+void
+pipeclose(struct pipe *p, int writable)
+{
+  acquire(&p->lock);
+  if(writable){
+    p->writeopen = 0;
+    wakeup(&p->nread);
+  } else {
+    p->readopen = 0;
+    wakeup(&p->nwrite);
+  }
+  if(p->readopen == 0 && p->writeopen == 0){
+    release(&p->lock);
+    kfree((char*)p);
+  } else
+    release(&p->lock);
+}
+
+//PAGEBREAK: 40
+int
+pipewrite(struct pipe *p, char *addr, int n)
+{
+  int i;
+
+  acquire(&p->lock);
+  for(i = 0; i < n; i++){
+    while(p->nwrite == p->nread + PIPESIZE){  //DOC: pipewrite-full
+      if(p->readopen == 0 || proc->killed){
+        release(&p->lock);
+        return -1;
+      }
+      wakeup(&p->nread);
+      sleep(&p->nwrite, &p->lock);  //DOC: pipewrite-sleep
+    }
+    p->data[p->nwrite++ % PIPESIZE] = addr[i];
+  }
+  wakeup(&p->nread);  //DOC: pipewrite-wakeup1
+  release(&p->lock);
+  return n;
+}
+
+int
+piperead(struct pipe *p, char *addr, int n)
+{
+  int i;
+
+  acquire(&p->lock);
+  while(p->nread == p->nwrite && p->writeopen){  //DOC: pipe-empty
+    if(proc->killed){
+      release(&p->lock);
+      return -1;
+    }
+    sleep(&p->nread, &p->lock); //DOC: piperead-sleep
+  }
+  for(i = 0; i < n; i++){  //DOC: piperead-copy
+    if(p->nread == p->nwrite)
+      break;
+    addr[i] = p->data[p->nread++ % PIPESIZE];
+  }
+  wakeup(&p->nwrite);  //DOC: piperead-wakeup
+  release(&p->lock);
+  return i;
+}
diff --git a/printf.c b/printf.c
new file mode 100644
index 0000000..9972b45
--- /dev/null
+++ b/printf.c
@@ -0,0 +1,85 @@
+#include "types.h"
+#include "stat.h"
+#include "user.h"
+
+static void
+putc(int fd, char c)
+{
+  write(fd, &c, 1);
+}
+
+static void
+printint(int fd, int xx, int base, int sgn)
+{
+  static char digits[] = "0123456789ABCDEF";
+  char buf[16];
+  int i, neg;
+  uint x;
+
+  neg = 0;
+  if(sgn && xx < 0){
+    neg = 1;
+    x = -xx;
+  } else {
+    x = xx;
+  }
+
+  i = 0;
+  do{
+    buf[i++] = digits[x % base];
+  }while((x /= base) != 0);
+  if(neg)
+    buf[i++] = '-';
+
+  while(--i >= 0)
+    putc(fd, buf[i]);
+}
+
+// Print to the given fd. Only understands %d, %x, %p, %s.
+void
+printf(int fd, char *fmt, ...)
+{
+  char *s;
+  int c, i, state;
+  uint *ap;
+
+  state = 0;
+  ap = (uint*)(void*)&fmt + 1;
+  for(i = 0; fmt[i]; i++){
+    c = fmt[i] & 0xff;
+    if(state == 0){
+      if(c == '%'){
+        state = '%';
+      } else {
+        putc(fd, c);
+      }
+    } else if(state == '%'){
+      if(c == 'd'){
+        printint(fd, *ap, 10, 1);
+        ap++;
+      } else if(c == 'x' || c == 'p'){
+        printint(fd, *ap, 16, 0);
+        ap++;
+      } else if(c == 's'){
+        s = (char*)*ap;
+        ap++;
+        if(s == 0)
+          s = "(null)";
+        while(*s != 0){
+          putc(fd, *s);
+          s++;
+        }
+      } else if(c == 'c'){
+        putc(fd, *ap);
+        ap++;
+      } else if(c == '%'){
+        putc(fd, c);
+      } else {
+        // Unknown % sequence.  Print it to draw attention.
+        putc(fd, '%');
+        putc(fd, c);
+      }
+      state = 0;
+    }
+  }
+}
diff --git a/proc.c b/proc.c
new file mode 100644
index 0000000..a642f5a
--- /dev/null
+++ b/proc.c
@@ -0,0 +1,465 @@
+#include "types.h"
+#include "defs.h"
+#include "param.h"
+#include "memlayout.h"
+#include "mmu.h"
+#include "x86.h"
+#include "proc.h"
+#include "spinlock.h"
+
+struct {
+  struct spinlock lock;
+  struct proc proc[NPROC];
+} ptable;
+
+static struct proc *initproc;
+
+int nextpid = 1;
+extern void forkret(void);
+extern void trapret(void);
+
+static void wakeup1(void *chan);
+
+void
+pinit(void)
+{
+  initlock(&ptable.lock, "ptable");
+}
+
+//PAGEBREAK: 32
+// Look in the process table for an UNUSED proc.
+// If found, change state to EMBRYO and initialize
+// state required to run in the kernel.
+// Otherwise return 0.
+static struct proc*
+allocproc(void)
+{
+  struct proc *p;
+  char *sp;
+
+  acquire(&ptable.lock);
+  for(p = ptable.proc; p < &ptable.proc[NPROC]; p++)
+    if(p->state == UNUSED)
+      goto found;
+  release(&ptable.lock);
+  return 0;
+
+found:
+  p->state = EMBRYO;
+  p->pid = nextpid++;
+  release(&ptable.lock);
+
+  // Allocate kernel stack.
+  if((p->kstack = kalloc()) == 0){
+    p->state = UNUSED;
+    return 0;
+  }
+  sp = p->kstack + KSTACKSIZE;
+  
+  // Leave room for trap frame.
+  sp -= sizeof *p->tf;
+  p->tf = (struct trapframe*)sp;
+  
+  // Set up new context to start executing at forkret,
+  // which returns to trapret.
+  sp -= 4;
+  *(uint*)sp = (uint)trapret;
+
+  sp -= sizeof *p->context;
+  p->context = (struct context*)sp;
+  memset(p->context, 0, sizeof *p->context);
+  p->context->eip = (uint)forkret;
+
+  return p;
+}
+
+//PAGEBREAK: 32
+// Set up first user process.
+void
+userinit(void)
+{
+  struct proc *p;
+  extern char _binary_initcode_start[], _binary_initcode_size[];
+  
+  p = allocproc();
+  initproc = p;
+  if((p->pgdir = setupkvm()) == 0)
+    panic("userinit: out of memory?");
+  inituvm(p->pgdir, _binary_initcode_start, (int)_binary_initcode_size);
+  p->sz = PGSIZE;
+  memset(p->tf, 0, sizeof(*p->tf));
+  p->tf->cs = (SEG_UCODE << 3) | DPL_USER;
+  p->tf->ds = (SEG_UDATA << 3) | DPL_USER;
+  p->tf->es = p->tf->ds;
+  p->tf->ss = p->tf->ds;
+  p->tf->eflags = FL_IF;
+  p->tf->esp = PGSIZE;
+  p->tf->eip = 0;  // beginning of initcode.S
+
+  safestrcpy(p->name, "initcode", sizeof(p->name));
+  p->cwd = namei("/");
+
+  p->state = RUNNABLE;
+}
+
+// Grow current process's memory by n bytes.
+// Return 0 on success, -1 on failure.
+int
+growproc(int n)
+{
+  uint sz;
+  
+  sz = proc->sz;
+  if(n > 0){
+    if((sz = allocuvm(proc->pgdir, sz, sz + n)) == 0)
+      return -1;
+  } else if(n < 0){
+    if((sz = deallocuvm(proc->pgdir, sz, sz + n)) == 0)
+      return -1;
+  }
+  proc->sz = sz;
+  switchuvm(proc);
+  return 0;
+}
+
+// Create a new process copying p as the parent.
+// Sets up stack to return as if from system call.
+// Caller must set state of returned proc to RUNNABLE.
+int
+fork(void)
+{
+  int i, pid;
+  struct proc *np;
+
+  // Allocate process.
+  if((np = allocproc()) == 0)
+    return -1;
+
+  // Copy process state from p.
+  if((np->pgdir = copyuvm(proc->pgdir, proc->sz)) == 0){
+    kfree(np->kstack);
+    np->kstack = 0;
+    np->state = UNUSED;
+    return -1;
+  }
+  np->sz = proc->sz;
+  np->parent = proc;
+  *np->tf = *proc->tf;
+
+  // Clear %eax so that fork returns 0 in the child.
+  np->tf->eax = 0;
+
+  for(i = 0; i < NOFILE; i++)
+    if(proc->ofile[i])
+      np->ofile[i] = filedup(proc->ofile[i]);
+  np->cwd = idup(proc->cwd);
+
+  safestrcpy(np->name, proc->name, sizeof(proc->name));
+ 
+  pid = np->pid;
+
+  // lock to force the compiler to emit the np->state write last.
+  acquire(&ptable.lock);
+  np->state = RUNNABLE;
+  release(&ptable.lock);
+  
+  return pid;
+}
+
+// Exit the current process.  Does not return.
+// An exited process remains in the zombie state
+// until its parent calls wait() to find out it exited.
+void
+exit(void)
+{
+  struct proc *p;
+  int fd;
+
+  if(proc == initproc)
+    panic("init exiting");
+
+  // Close all open files.
+  for(fd = 0; fd < NOFILE; fd++){
+    if(proc->ofile[fd]){
+      fileclose(proc->ofile[fd]);
+      proc->ofile[fd] = 0;
+    }
+  }
+
+  begin_op();
+  iput(proc->cwd);
+  end_op();
+  proc->cwd = 0;
+
+  acquire(&ptable.lock);
+
+  // Parent might be sleeping in wait().
+  wakeup1(proc->parent);
+
+  // Pass abandoned children to init.
+  for(p = ptable.proc; p < &ptable.proc[NPROC]; p++){
+    if(p->parent == proc){
+      p->parent = initproc;
+      if(p->state == ZOMBIE)
+        wakeup1(initproc);
+    }
+  }
+
+  // Jump into the scheduler, never to return.
+  proc->state = ZOMBIE;
+  sched();
+  panic("zombie exit");
+}
+
+// Wait for a child process to exit and return its pid.
+// Return -1 if this process has no children.
+int
+wait(void)
+{
+  struct proc *p;
+  int havekids, pid;
+
+  acquire(&ptable.lock);
+  for(;;){
+    // Scan through table looking for zombie children.
+    havekids = 0;
+    for(p = ptable.proc; p < &ptable.proc[NPROC]; p++){
+      if(p->parent != proc)
+        continue;
+      havekids = 1;
+      if(p->state == ZOMBIE){
+        // Found one.
+        pid = p->pid;
+        kfree(p->kstack);
+        p->kstack = 0;
+        freevm(p->pgdir);
+        p->state = UNUSED;
+        p->pid = 0;
+        p->parent = 0;
+        p->name[0] = 0;
+        p->killed = 0;
+        release(&ptable.lock);
+        return pid;
+      }
+    }
+
+    // No point waiting if we don't have any children.
+    if(!havekids || proc->killed){
+      release(&ptable.lock);
+      return -1;
+    }
+
+    // Wait for children to exit.  (See wakeup1 call in proc_exit.)
+    sleep(proc, &ptable.lock);  //DOC: wait-sleep
+  }
+}
+
+//PAGEBREAK: 42
+// Per-CPU process scheduler.
+// Each CPU calls scheduler() after setting itself up.
+// Scheduler never returns.  It loops, doing:
+//  - choose a process to run
+//  - swtch to start running that process
+//  - eventually that process transfers control
+//      via swtch back to the scheduler.
+void
+scheduler(void)
+{
+  struct proc *p;
+
+  for(;;){
+    // Enable interrupts on this processor.
+    sti();
+
+    // Loop over process table looking for process to run.
+    acquire(&ptable.lock);
+    for(p = ptable.proc; p < &ptable.proc[NPROC]; p++){
+      if(p->state != RUNNABLE)
+        continue;
+
+      // Switch to chosen process.  It is the process's job
+      // to release ptable.lock and then reacquire it
+      // before jumping back to us.
+      proc = p;
+      switchuvm(p);
+      p->state = RUNNING;
+      swtch(&cpu->scheduler, proc->context);
+      switchkvm();
+
+      // Process is done running for now.
+      // It should have changed its p->state before coming back.
+      proc = 0;
+    }
+    release(&ptable.lock);
+
+  }
+}
+
+// Enter scheduler.  Must hold only ptable.lock
+// and have changed proc->state.
+void
+sched(void)
+{
+  int intena;
+
+  if(!holding(&ptable.lock))
+    panic("sched ptable.lock");
+  if(cpu->ncli != 1)
+    panic("sched locks");
+  if(proc->state == RUNNING)
+    panic("sched running");
+  if(readeflags()&FL_IF)
+    panic("sched interruptible");
+  intena = cpu->intena;
+  swtch(&proc->context, cpu->scheduler);
+  cpu->intena = intena;
+}
+
+// Give up the CPU for one scheduling round.
+void
+yield(void)
+{
+  acquire(&ptable.lock);  //DOC: yieldlock
+  proc->state = RUNNABLE;
+  sched();
+  release(&ptable.lock);
+}
+
+// A fork child's very first scheduling by scheduler()
+// will swtch here.  "Return" to user space.
+void
+forkret(void)
+{
+  static int first = 1;
+  // Still holding ptable.lock from scheduler.
+  release(&ptable.lock);
+
+  if (first) {
+    // Some initialization functions must be run in the context
+    // of a regular process (e.g., they call sleep), and thus cannot 
+    // be run from main().
+    first = 0;
+    initlog();
+  }
+  
+  // Return to "caller", actually trapret (see allocproc).
+}
+
+// Atomically release lock and sleep on chan.
+// Reacquires lock when awakened.
+void
+sleep(void *chan, struct spinlock *lk)
+{
+  if(proc == 0)
+    panic("sleep");
+
+  if(lk == 0)
+    panic("sleep without lk");
+
+  // Must acquire ptable.lock in order to
+  // change p->state and then call sched.
+  // Once we hold ptable.lock, we can be
+  // guaranteed that we won't miss any wakeup
+  // (wakeup runs with ptable.lock locked),
+  // so it's okay to release lk.
+  if(lk != &ptable.lock){  //DOC: sleeplock0
+    acquire(&ptable.lock);  //DOC: sleeplock1
+    release(lk);
+  }
+
+  // Go to sleep.
+  proc->chan = chan;
+  proc->state = SLEEPING;
+  sched();
+
+  // Tidy up.
+  proc->chan = 0;
+
+  // Reacquire original lock.
+  if(lk != &ptable.lock){  //DOC: sleeplock2
+    release(&ptable.lock);
+    acquire(lk);
+  }
+}
+
+//PAGEBREAK!
+// Wake up all processes sleeping on chan.
+// The ptable lock must be held.
+static void
+wakeup1(void *chan)
+{
+  struct proc *p;
+
+  for(p = ptable.proc; p < &ptable.proc[NPROC]; p++)
+    if(p->state == SLEEPING && p->chan == chan)
+      p->state = RUNNABLE;
+}
+
+// Wake up all processes sleeping on chan.
+void
+wakeup(void *chan)
+{
+  acquire(&ptable.lock);
+  wakeup1(chan);
+  release(&ptable.lock);
+}
+
+// Kill the process with the given pid.
+// Process won't exit until it returns
+// to user space (see trap in trap.c).
+int
+kill(int pid)
+{
+  struct proc *p;
+
+  acquire(&ptable.lock);
+  for(p = ptable.proc; p < &ptable.proc[NPROC]; p++){
+    if(p->pid == pid){
+      p->killed = 1;
+      // Wake process from sleep if necessary.
+      if(p->state == SLEEPING)
+        p->state = RUNNABLE;
+      release(&ptable.lock);
+      return 0;
+    }
+  }
+  release(&ptable.lock);
+  return -1;
+}
+
+//PAGEBREAK: 36
+// Print a process listing to console.  For debugging.
+// Runs when user types ^P on console.
+// No lock to avoid wedging a stuck machine further.
+void
+procdump(void)
+{
+  static char *states[] = {
+  [UNUSED]    "unused",
+  [EMBRYO]    "embryo",
+  [SLEEPING]  "sleep ",
+  [RUNNABLE]  "runble",
+  [RUNNING]   "run   ",
+  [ZOMBIE]    "zombie"
+  };
+  int i;
+  struct proc *p;
+  char *state;
+  uint pc[10];
+  
+  for(p = ptable.proc; p < &ptable.proc[NPROC]; p++){
+    if(p->state == UNUSED)
+      continue;
+    if(p->state >= 0 && p->state < NELEM(states) && states[p->state])
+      state = states[p->state];
+    else
+      state = "???";
+    cprintf("%d %s %s", p->pid, state, p->name);
+    if(p->state == SLEEPING){
+      getcallerpcs((uint*)p->context->ebp+2, pc);
+      for(i=0; i<10 && pc[i] != 0; i++)
+        cprintf(" %p", pc[i]);
+    }
+    cprintf("\n");
+  }
+}
diff --git a/proc.h b/proc.h
new file mode 100644
index 0000000..3b9c3ac
--- /dev/null
+++ b/proc.h
@@ -0,0 +1,75 @@
+// Segments in proc->gdt.
+#define NSEGS     7
+
+// Per-CPU state
+struct cpu {
+  uchar id;                    // Local APIC ID; index into cpus[] below
+  struct context *scheduler;   // swtch() here to enter scheduler
+  struct taskstate ts;         // Used by x86 to find stack for interrupt
+  struct segdesc gdt[NSEGS];   // x86 global descriptor table
+  volatile uint started;       // Has the CPU started?
+  int ncli;                    // Depth of pushcli nesting.
+  int intena;                  // Were interrupts enabled before pushcli?
+  
+  // Cpu-local storage variables; see below
+  struct cpu *cpu;
+  struct proc *proc;           // The currently-running process.
+};
+
+extern struct cpu cpus[NCPU];
+extern int ncpu;
+
+// Per-CPU variables, holding pointers to the
+// current cpu and to the current process.
+// The asm suffix tells gcc to use "%gs:0" to refer to cpu
+// and "%gs:4" to refer to proc.  seginit sets up the
+// %gs segment register so that %gs refers to the memory
+// holding those two variables in the local cpu's struct cpu.
+// This is similar to how thread-local variables are implemented
+// in thread libraries such as Linux pthreads.
+extern struct cpu *cpu asm("%gs:0");       // &cpus[cpunum()]
+extern struct proc *proc asm("%gs:4");     // cpus[cpunum()].proc
+
+//PAGEBREAK: 17
+// Saved registers for kernel context switches.
+// Don't need to save all the segment registers (%cs, etc),
+// because they are constant across kernel contexts.
+// Don't need to save %eax, %ecx, %edx, because the
+// x86 convention is that the caller has saved them.
+// Contexts are stored at the bottom of the stack they
+// describe; the stack pointer is the address of the context.
+// The layout of the context matches the layout of the stack in swtch.S
+// at the "Switch stacks" comment. Switch doesn't save eip explicitly,
+// but it is on the stack and allocproc() manipulates it.
+struct context {
+  uint edi;
+  uint esi;
+  uint ebx;
+  uint ebp;
+  uint eip;
+};
+
+enum procstate { UNUSED, EMBRYO, SLEEPING, RUNNABLE, RUNNING, ZOMBIE };
+
+// Per-process state
+struct proc {
+  uint sz;                     // Size of process memory (bytes)
+  pde_t* pgdir;                // Page table
+  char *kstack;                // Bottom of kernel stack for this process
+  enum procstate state;        // Process state
+  int pid;                     // Process ID
+  struct proc *parent;         // Parent process
+  struct trapframe *tf;        // Trap frame for current syscall
+  struct context *context;     // swtch() here to run process
+  void *chan;                  // If non-zero, sleeping on chan
+  int killed;                  // If non-zero, have been killed
+  struct file *ofile[NOFILE];  // Open files
+  struct inode *cwd;           // Current directory
+  char name[16];               // Process name (debugging)
+};
+
+// Process memory is laid out contiguously, low addresses first:
+//   text
+//   original data and bss
+//   fixed-size stack
+//   expandable heap
diff --git a/rm.c b/rm.c
new file mode 100644
index 0000000..4fd33c8
--- /dev/null
+++ b/rm.c
@@ -0,0 +1,23 @@
+#include "types.h"
+#include "stat.h"
+#include "user.h"
+
+int
+main(int argc, char *argv[])
+{
+  int i;
+
+  if(argc < 2){
+    printf(2, "Usage: rm files...\n");
+    exit();
+  }
+
+  for(i = 1; i < argc; i++){
+    if(unlink(argv[i]) < 0){
+      printf(2, "rm: %s failed to delete\n", argv[i]);
+      break;
+    }
+  }
+
+  exit();
+}
diff --git a/sh.c b/sh.c
new file mode 100644
index 0000000..16e325b
--- /dev/null
+++ b/sh.c
@@ -0,0 +1,494 @@
+// Shell.
+
+#include "types.h"
+#include "user.h"
+#include "fcntl.h"
+
+// Parsed command representation
+#define EXEC  1
+#define REDIR 2
+#define PIPE  3
+#define LIST  4
+#define BACK  5
+
+#define MAXARGS 10
+
+struct cmd {
+  int type;
+};
+
+struct execcmd {
+  int type;
+  char *argv[MAXARGS];
+  char *eargv[MAXARGS];
+};
+
+struct redircmd {
+  int type;
+  struct cmd *cmd;
+  char *file;
+  char *efile;
+  int mode;
+  int fd;
+};
+
+struct pipecmd {
+  int type;
+  struct cmd *left;
+  struct cmd *right;
+};
+
+struct listcmd {
+  int type;
+  struct cmd *left;
+  struct cmd *right;
+};
+
+struct backcmd {
+  int type;
+  struct cmd *cmd;
+};
+
+int fork1(void);  // Fork but panics on failure.
+void panic(char*);
+struct cmd *parsecmd(char*);
+
+// Execute cmd.  Never returns.
+void
+runcmd(struct cmd *cmd)
+{
+  int p[2];
+  struct backcmd *bcmd;
+  struct execcmd *ecmd;
+  struct listcmd *lcmd;
+  struct pipecmd *pcmd;
+  struct redircmd *rcmd;
+
+  if(cmd == 0)
+    exit();
+  
+  switch(cmd->type){
+  default:
+    panic("runcmd");
+
+  case EXEC:
+    ecmd = (struct execcmd*)cmd;
+    if(ecmd->argv[0] == 0)
+      exit();
+    exec(ecmd->argv[0], ecmd->argv);
+    printf(2, "exec %s failed\n", ecmd->argv[0]);
+    break;
+
+  case REDIR:
+    rcmd = (struct redircmd*)cmd;
+    close(rcmd->fd);
+    if(open(rcmd->file, rcmd->mode) < 0){
+      printf(2, "open %s failed\n", rcmd->file);
+      exit();
+    }
+    runcmd(rcmd->cmd);
+    break;
+
+  case LIST:
+    lcmd = (struct listcmd*)cmd;
+    if(fork1() == 0)
+      runcmd(lcmd->left);
+    wait();
+    runcmd(lcmd->right);
+    break;
+
+  case PIPE:
+    pcmd = (struct pipecmd*)cmd;
+    if(pipe(p) < 0)
+      panic("pipe");
+    if(fork1() == 0){
+      close(1);
+      dup(p[1]);
+      close(p[0]);
+      close(p[1]);
+      runcmd(pcmd->left);
+    }
+    if(fork1() == 0){
+      close(0);
+      dup(p[0]);
+      close(p[0]);
+      close(p[1]);
+      runcmd(pcmd->right);
+    }
+    close(p[0]);
+    close(p[1]);
+    wait();
+    wait();
+    break;
+    
+  case BACK:
+    bcmd = (struct backcmd*)cmd;
+    if(fork1() == 0)
+      runcmd(bcmd->cmd);
+    break;
+  }
+  exit();
+}
+
+int
+getcmd(char *buf, int nbuf)
+{
+  printf(2, "$ ");
+  memset(buf, 0, nbuf);
+  gets(buf, nbuf);
+  if(buf[0] == 0) // EOF
+    return -1;
+  return 0;
+}
+
+int
+main(void)
+{
+  static char buf[100];
+  int fd;
+  
+  // Assumes three file descriptors open.
+  while((fd = open("console", O_RDWR)) >= 0){
+    if(fd >= 3){
+      close(fd);
+      break;
+    }
+  }
+  
+  // Read and run input commands.
+  while(getcmd(buf, sizeof(buf)) >= 0){
+    if(buf[0] == 'c' && buf[1] == 'd' && buf[2] == ' '){
+      // Clumsy but will have to do for now.
+      // Chdir has no effect on the parent if run in the child.
+      buf[strlen(buf)-1] = 0;  // chop \n
+      if(chdir(buf+3) < 0)
+        printf(2, "cannot cd %s\n", buf+3);
+      continue;
+    }
+    if(fork1() == 0)
+      runcmd(parsecmd(buf));
+    wait();
+  }
+  exit();
+}
+
+void
+panic(char *s)
+{
+  printf(2, "%s\n", s);
+  exit();
+}
+
+int
+fork1(void)
+{
+  int pid;
+  
+  pid = fork();
+  if(pid == -1)
+    panic("fork");
+  return pid;
+}
+
+//PAGEBREAK!
+// Constructors
+
+struct cmd*
+execcmd(void)
+{
+  struct execcmd *cmd;
+
+  cmd = malloc(sizeof(*cmd));
+  memset(cmd, 0, sizeof(*cmd));
+  cmd->type = EXEC;
+  return (struct cmd*)cmd;
+}
+
+struct cmd*
+redircmd(struct cmd *subcmd, char *file, char *efile, int mode, int fd)
+{
+  struct redircmd *cmd;
+
+  cmd = malloc(sizeof(*cmd));
+  memset(cmd, 0, sizeof(*cmd));
+  cmd->type = REDIR;
+  cmd->cmd = subcmd;
+  cmd->file = file;
+  cmd->efile = efile;
+  cmd->mode = mode;
+  cmd->fd = fd;
+  return (struct cmd*)cmd;
+}
+
+struct cmd*
+pipecmd(struct cmd *left, struct cmd *right)
+{
+  struct pipecmd *cmd;
+
+  cmd = malloc(sizeof(*cmd));
+  memset(cmd, 0, sizeof(*cmd));
+  cmd->type = PIPE;
+  cmd->left = left;
+  cmd->right = right;
+  return (struct cmd*)cmd;
+}
+
+struct cmd*
+listcmd(struct cmd *left, struct cmd *right)
+{
+  struct listcmd *cmd;
+
+  cmd = malloc(sizeof(*cmd));
+  memset(cmd, 0, sizeof(*cmd));
+  cmd->type = LIST;
+  cmd->left = left;
+  cmd->right = right;
+  return (struct cmd*)cmd;
+}
+
+struct cmd*
+backcmd(struct cmd *subcmd)
+{
+  struct backcmd *cmd;
+
+  cmd = malloc(sizeof(*cmd));
+  memset(cmd, 0, sizeof(*cmd));
+  cmd->type = BACK;
+  cmd->cmd = subcmd;
+  return (struct cmd*)cmd;
+}
+//PAGEBREAK!
+// Parsing
+
+char whitespace[] = " \t\r\n\v";
+char symbols[] = "<|>&;()";
+
+int
+gettoken(char **ps, char *es, char **q, char **eq)
+{
+  char *s;
+  int ret;
+  
+  s = *ps;
+  while(s < es && strchr(whitespace, *s))
+    s++;
+  if(q)
+    *q = s;
+  ret = *s;
+  switch(*s){
+  case 0:
+    break;
+  case '|':
+  case '(':
+  case ')':
+  case ';':
+  case '&':
+  case '<':
+    s++;
+    break;
+  case '>':
+    s++;
+    if(*s == '>'){
+      ret = '+';
+      s++;
+    }
+    break;
+  default:
+    ret = 'a';
+    while(s < es && !strchr(whitespace, *s) && !strchr(symbols, *s))
+      s++;
+    break;
+  }
+  if(eq)
+    *eq = s;
+  
+  while(s < es && strchr(whitespace, *s))
+    s++;
+  *ps = s;
+  return ret;
+}
+
+int
+peek(char **ps, char *es, char *toks)
+{
+  char *s;
+  
+  s = *ps;
+  while(s < es && strchr(whitespace, *s))
+    s++;
+  *ps = s;
+  return *s && strchr(toks, *s);
+}
+
+struct cmd *parseline(char**, char*);
+struct cmd *parsepipe(char**, char*);
+struct cmd *parseexec(char**, char*);
+struct cmd *nulterminate(struct cmd*);
+
+struct cmd*
+parsecmd(char *s)
+{
+  char *es;
+  struct cmd *cmd;
+
+  es = s + strlen(s);
+  cmd = parseline(&s, es);
+  peek(&s, es, "");
+  if(s != es){
+    printf(2, "leftovers: %s\n", s);
+    panic("syntax");
+  }
+  nulterminate(cmd);
+  return cmd;
+}
+
+struct cmd*
+parseline(char **ps, char *es)
+{
+  struct cmd *cmd;
+
+  cmd = parsepipe(ps, es);
+  while(peek(ps, es, "&")){
+    gettoken(ps, es, 0, 0);
+    cmd = backcmd(cmd);
+  }
+  if(peek(ps, es, ";")){
+    gettoken(ps, es, 0, 0);
+    cmd = listcmd(cmd, parseline(ps, es));
+  }
+  return cmd;
+}
+
+struct cmd*
+parsepipe(char **ps, char *es)
+{
+  struct cmd *cmd;
+
+  cmd = parseexec(ps, es);
+  if(peek(ps, es, "|")){
+    gettoken(ps, es, 0, 0);
+    cmd = pipecmd(cmd, parsepipe(ps, es));
+  }
+  return cmd;
+}
+
+struct cmd*
+parseredirs(struct cmd *cmd, char **ps, char *es)
+{
+  int tok;
+  char *q, *eq;
+
+  while(peek(ps, es, "<>")){
+    tok = gettoken(ps, es, 0, 0);
+    if(gettoken(ps, es, &q, &eq) != 'a')
+      panic("missing file for redirection");
+    switch(tok){
+    case '<':
+      cmd = redircmd(cmd, q, eq, O_RDONLY, 0);
+      break;
+    case '>':
+      cmd = redircmd(cmd, q, eq, O_WRONLY|O_CREATE, 1);
+      break;
+    case '+':  // >>
+      cmd = redircmd(cmd, q, eq, O_WRONLY|O_CREATE, 1);
+      break;
+    }
+  }
+  return cmd;
+}
+
+struct cmd*
+parseblock(char **ps, char *es)
+{
+  struct cmd *cmd;
+
+  if(!peek(ps, es, "("))
+    panic("parseblock");
+  gettoken(ps, es, 0, 0);
+  cmd = parseline(ps, es);
+  if(!peek(ps, es, ")"))
+    panic("syntax - missing )");
+  gettoken(ps, es, 0, 0);
+  cmd = parseredirs(cmd, ps, es);
+  return cmd;
+}
+
+struct cmd*
+parseexec(char **ps, char *es)
+{
+  char *q, *eq;
+  int tok, argc;
+  struct execcmd *cmd;
+  struct cmd *ret;
+  
+  if(peek(ps, es, "("))
+    return parseblock(ps, es);
+
+  ret = execcmd();
+  cmd = (struct execcmd*)ret;
+
+  argc = 0;
+  ret = parseredirs(ret, ps, es);
+  while(!peek(ps, es, "|)&;")){
+    if((tok=gettoken(ps, es, &q, &eq)) == 0)
+      break;
+    if(tok != 'a')
+      panic("syntax");
+    cmd->argv[argc] = q;
+    cmd->eargv[argc] = eq;
+    argc++;
+    if(argc >= MAXARGS)
+      panic("too many args");
+    ret = parseredirs(ret, ps, es);
+  }
+  cmd->argv[argc] = 0;
+  cmd->eargv[argc] = 0;
+  return ret;
+}
+
+// NUL-terminate all the counted strings.
+struct cmd*
+nulterminate(struct cmd *cmd)
+{
+  int i;
+  struct backcmd *bcmd;
+  struct execcmd *ecmd;
+  struct listcmd *lcmd;
+  struct pipecmd *pcmd;
+  struct redircmd *rcmd;
+
+  if(cmd == 0)
+    return 0;
+  
+  switch(cmd->type){
+  case EXEC:
+    ecmd = (struct execcmd*)cmd;
+    for(i=0; ecmd->argv[i]; i++)
+      *ecmd->eargv[i] = 0;
+    break;
+
+  case REDIR:
+    rcmd = (struct redircmd*)cmd;
+    nulterminate(rcmd->cmd);
+    *rcmd->efile = 0;
+    break;
+
+  case PIPE:
+    pcmd = (struct pipecmd*)cmd;
+    nulterminate(pcmd->left);
+    nulterminate(pcmd->right);
+    break;
+    
+  case LIST:
+    lcmd = (struct listcmd*)cmd;
+    nulterminate(lcmd->left);
+    nulterminate(lcmd->right);
+    break;
+
+  case BACK:
+    bcmd = (struct backcmd*)cmd;
+    nulterminate(bcmd->cmd);
+    break;
+  }
+  return cmd;
+}
diff --git a/sign.pl b/sign.pl
new file mode 100755
index 0000000..d793035
--- /dev/null
+++ b/sign.pl
@@ -0,0 +1,19 @@
+#!/usr/bin/perl
+
+open(SIG, $ARGV[0]) || die "open $ARGV[0]: $!";
+
+$n = sysread(SIG, $buf, 1000);
+
+if($n > 510){
+  print STDERR "boot block too large: $n bytes (max 510)\n";
+  exit 1;
+}
+
+print STDERR "boot block is $n bytes (max 510)\n";
+
+$buf .= "\0" x (510-$n);
+$buf .= "\x55\xAA";
+
+open(SIG, ">$ARGV[0]") || die "open >$ARGV[0]: $!";
+print SIG $buf;
+close SIG;
diff --git a/spinlock.c b/spinlock.c
new file mode 100644
index 0000000..a16621c
--- /dev/null
+++ b/spinlock.c
@@ -0,0 +1,117 @@
+// Mutual exclusion spin locks.
+
+#include "types.h"
+#include "defs.h"
+#include "param.h"
+#include "x86.h"
+#include "memlayout.h"
+#include "mmu.h"
+#include "proc.h"
+#include "spinlock.h"
+
+void
+initlock(struct spinlock *lk, char *name)
+{
+  lk->name = name;
+  lk->locked = 0;
+  lk->cpu = 0;
+}
+
+// Acquire the lock.
+// Loops (spins) until the lock is acquired.
+// Holding a lock for a long time may cause
+// other CPUs to waste time spinning to acquire it.
+void
+acquire(struct spinlock *lk)
+{
+  pushcli(); // disable interrupts to avoid deadlock.
+  if(holding(lk))
+    panic("acquire");
+
+  // The xchg is atomic.
+  // It also serializes, so that reads after acquire are not
+  // reordered before it. 
+  while(xchg(&lk->locked, 1) != 0)
+    ;
+
+  // Record info about lock acquisition for debugging.
+  lk->cpu = cpu;
+  getcallerpcs(&lk, lk->pcs);
+}
+
+// Release the lock.
+void
+release(struct spinlock *lk)
+{
+  if(!holding(lk))
+    panic("release");
+
+  lk->pcs[0] = 0;
+  lk->cpu = 0;
+
+  // The xchg serializes, so that reads before release are 
+  // not reordered after it.  The 1996 PentiumPro manual (Volume 3,
+  // 7.2) says reads can be carried out speculatively and in
+  // any order, which implies we need to serialize here.
+  // But the 2007 Intel 64 Architecture Memory Ordering White
+  // Paper says that Intel 64 and IA-32 will not move a load
+  // after a store. So lock->locked = 0 would work here.
+  // The xchg being asm volatile ensures gcc emits it after
+  // the above assignments (and after the critical section).
+  xchg(&lk->locked, 0);
+
+  popcli();
+}
+
+// Record the current call stack in pcs[] by following the %ebp chain.
+void
+getcallerpcs(void *v, uint pcs[])
+{
+  uint *ebp;
+  int i;
+  
+  ebp = (uint*)v - 2;
+  for(i = 0; i < 10; i++){
+    if(ebp == 0 || ebp < (uint*)KERNBASE || ebp == (uint*)0xffffffff)
+      break;
+    pcs[i] = ebp[1];     // saved %eip
+    ebp = (uint*)ebp[0]; // saved %ebp
+  }
+  for(; i < 10; i++)
+    pcs[i] = 0;
+}
+
+// Check whether this cpu is holding the lock.
+int
+holding(struct spinlock *lock)
+{
+  return lock->locked && lock->cpu == cpu;
+}
+
+
+// Pushcli/popcli are like cli/sti except that they are matched:
+// it takes two popcli to undo two pushcli.  Also, if interrupts
+// are off, then pushcli, popcli leaves them off.
+
+void
+pushcli(void)
+{
+  int eflags;
+  
+  eflags = readeflags();
+  cli();
+  if(cpu->ncli++ == 0)
+    cpu->intena = eflags & FL_IF;
+}
+
+void
+popcli(void)
+{
+  if(readeflags()&FL_IF)
+    panic("popcli - interruptible");
+  if(--cpu->ncli < 0)
+    panic("popcli");
+  if(cpu->ncli == 0 && cpu->intena)
+    sti();
+}
+
diff --git a/spinlock.h b/spinlock.h
new file mode 100644
index 0000000..fdda016
--- /dev/null
+++ b/spinlock.h
@@ -0,0 +1,11 @@
+// Mutual exclusion lock.
+struct spinlock {
+  uint locked;       // Is the lock held?
+  
+  // For debugging:
+  char *name;        // Name of lock.
+  struct cpu *cpu;   // The cpu holding the lock.
+  uint pcs[10];      // The call stack (an array of program counters)
+                     // that locked the lock.
+};
+
diff --git a/stat.h b/stat.h
new file mode 100644
index 0000000..8a80933
--- /dev/null
+++ b/stat.h
@@ -0,0 +1,11 @@
+#define T_DIR  1   // Directory
+#define T_FILE 2   // File
+#define T_DEV  3   // Device
+
+struct stat {
+  short type;  // Type of file
+  int dev;     // File system's disk device
+  uint ino;    // Inode number
+  short nlink; // Number of links to file
+  uint size;   // Size of file in bytes
+};
diff --git a/stressfs.c b/stressfs.c
new file mode 100644
index 0000000..6369400
--- /dev/null
+++ b/stressfs.c
@@ -0,0 +1,49 @@
+// Demonstrate that moving the "acquire" in iderw after the loop that
+// appends to the idequeue results in a race.
+
+// For this to work, you should also add a spin within iderw's
+// idequeue traversal loop.  Adding the following demonstrated a panic
+// after about 5 runs of stressfs in QEMU on a 2.1GHz CPU:
+//    for (i = 0; i < 40000; i++)
+//      asm volatile("");
+
+#include "types.h"
+#include "stat.h"
+#include "user.h"
+#include "fs.h"
+#include "fcntl.h"
+
+int
+main(int argc, char *argv[])
+{
+  int fd, i;
+  char path[] = "stressfs0";
+  char data[512];
+
+  printf(1, "stressfs starting\n");
+  memset(data, 'a', sizeof(data));
+
+  for(i = 0; i < 4; i++)
+    if(fork() > 0)
+      break;
+
+  printf(1, "write %d\n", i);
+
+  path[8] += i;
+  fd = open(path, O_CREATE | O_RDWR);
+  for(i = 0; i < 20; i++)
+//    printf(fd, "%d\n", i);
+    write(fd, data, sizeof(data));
+  close(fd);
+
+  printf(1, "read\n");
+
+  fd = open(path, O_RDONLY);
+  for (i = 0; i < 20; i++)
+    read(fd, data, sizeof(data));
+  close(fd);
+
+  wait();
+  
+  exit();
+}
diff --git a/string.c b/string.c
new file mode 100644
index 0000000..d066c18
--- /dev/null
+++ b/string.c
@@ -0,0 +1,105 @@
+#include "types.h"
+#include "x86.h"
+
+void*
+memset(void *dst, int c, uint n)
+{
+  if ((int)dst%4 == 0 && n%4 == 0){
+    c &= 0xFF;
+    stosl(dst, (c<<24)|(c<<16)|(c<<8)|c, n/4);
+  } else
+    stosb(dst, c, n);
+  return dst;
+}
+
+int
+memcmp(const void *v1, const void *v2, uint n)
+{
+  const uchar *s1, *s2;
+  
+  s1 = v1;
+  s2 = v2;
+  while(n-- > 0){
+    if(*s1 != *s2)
+      return *s1 - *s2;
+    s1++, s2++;
+  }
+
+  return 0;
+}
+
+void*
+memmove(void *dst, const void *src, uint n)
+{
+  const char *s;
+  char *d;
+
+  s = src;
+  d = dst;
+  if(s < d && s + n > d){
+    s += n;
+    d += n;
+    while(n-- > 0)
+      *--d = *--s;
+  } else
+    while(n-- > 0)
+      *d++ = *s++;
+
+  return dst;
+}
+
+// memcpy exists to placate GCC.  Use memmove.
+void*
+memcpy(void *dst, const void *src, uint n)
+{
+  return memmove(dst, src, n);
+}
+
+int
+strncmp(const char *p, const char *q, uint n)
+{
+  while(n > 0 && *p && *p == *q)
+    n--, p++, q++;
+  if(n == 0)
+    return 0;
+  return (uchar)*p - (uchar)*q;
+}
+
+char*
+strncpy(char *s, const char *t, int n)
+{
+  char *os;
+  
+  os = s;
+  while(n-- > 0 && (*s++ = *t++) != 0)
+    ;
+  while(n-- > 0)
+    *s++ = 0;
+  return os;
+}
+
+// Like strncpy but guaranteed to NUL-terminate.
+char*
+safestrcpy(char *s, const char *t, int n)
+{
+  char *os;
+  
+  os = s;
+  if(n <= 0)
+    return os;
+  while(--n > 0 && (*s++ = *t++) != 0)
+    ;
+  *s = 0;
+  return os;
+}
+
+int
+strlen(const char *s)
+{
+  int n;
+
+  for(n = 0; s[n]; n++)
+    ;
+  return n;
+}
+
diff --git a/swtch.S b/swtch.S
new file mode 100644
index 0000000..8751317
--- /dev/null
+++ b/swtch.S
@@ -0,0 +1,28 @@
+# Context switch
+#
+#   void swtch(struct context **old, struct context *new);
+# 
+# Save current register context in old
+# and then load register context from new.
+
+.globl swtch
+swtch:
+  movl 4(%esp), %eax
+  movl 8(%esp), %edx
+
+  # Save old callee-save registers
+  pushl %ebp
+  pushl %ebx
+  pushl %esi
+  pushl %edi
+
+  # Switch stacks
+  movl %esp, (%eax)
+  movl %edx, %esp
+
+  # Load new callee-save registers
+  popl %edi
+  popl %esi
+  popl %ebx
+  popl %ebp
+  ret
diff --git a/syscall.c b/syscall.c
new file mode 100644
index 0000000..799ebc2
--- /dev/null
+++ b/syscall.c
@@ -0,0 +1,139 @@
+#include "types.h"
+#include "defs.h"
+#include "param.h"
+#include "memlayout.h"
+#include "mmu.h"
+#include "proc.h"
+#include "x86.h"
+#include "syscall.h"
+
+// User code makes a system call with INT T_SYSCALL.
+// System call number in %eax.
+// Arguments on the stack, from the user call to the C
+// library system call function. The saved user %esp points
+// to a saved program counter, and then the first argument.
+
+// Fetch the int at addr from the current process.
+int
+fetchint(uint addr, int *ip)
+{
+  if(addr >= proc->sz || addr+4 > proc->sz)
+    return -1;
+  *ip = *(int*)(addr);
+  return 0;
+}
+
+// Fetch the nul-terminated string at addr from the current process.
+// Doesn't actually copy the string - just sets *pp to point at it.
+// Returns length of string, not including nul.
+int
+fetchstr(uint addr, char **pp)
+{
+  char *s, *ep;
+
+  if(addr >= proc->sz)
+    return -1;
+  *pp = (char*)addr;
+  ep = (char*)proc->sz;
+  for(s = *pp; s < ep; s++)
+    if(*s == 0)
+      return s - *pp;
+  return -1;
+}
+
+// Fetch the nth 32-bit system call argument.
+int
+argint(int n, int *ip)
+{
+  return fetchint(proc->tf->esp + 4 + 4*n, ip);
+}
+
+// Fetch the nth word-sized system call argument as a pointer
+// to a block of memory of size n bytes.  Check that the pointer
+// lies within the process address space.
+int
+argptr(int n, char **pp, int size)
+{
+  int i;
+  
+  if(argint(n, &i) < 0)
+    return -1;
+  if((uint)i >= proc->sz || (uint)i+size > proc->sz)
+    return -1;
+  *pp = (char*)i;
+  return 0;
+}
+
+// Fetch the nth word-sized system call argument as a string pointer.
+// Check that the pointer is valid and the string is nul-terminated.
+// (There is no shared writable memory, so the string can't change
+// between this check and being used by the kernel.)
+int
+argstr(int n, char **pp)
+{
+  int addr;
+  if(argint(n, &addr) < 0)
+    return -1;
+  return fetchstr(addr, pp);
+}
+
+extern int sys_chdir(void);
+extern int sys_close(void);
+extern int sys_dup(void);
+extern int sys_exec(void);
+extern int sys_exit(void);
+extern int sys_fork(void);
+extern int sys_fstat(void);
+extern int sys_getpid(void);
+extern int sys_kill(void);
+extern int sys_link(void);
+extern int sys_mkdir(void);
+extern int sys_mknod(void);
+extern int sys_open(void);
+extern int sys_pipe(void);
+extern int sys_read(void);
+extern int sys_sbrk(void);
+extern int sys_sleep(void);
+extern int sys_unlink(void);
+extern int sys_wait(void);
+extern int sys_write(void);
+extern int sys_uptime(void);
+
+static int (*syscalls[])(void) = {
+[SYS_fork]    sys_fork,
+[SYS_exit]    sys_exit,
+[SYS_wait]    sys_wait,
+[SYS_pipe]    sys_pipe,
+[SYS_read]    sys_read,
+[SYS_kill]    sys_kill,
+[SYS_exec]    sys_exec,
+[SYS_fstat]   sys_fstat,
+[SYS_chdir]   sys_chdir,
+[SYS_dup]     sys_dup,
+[SYS_getpid]  sys_getpid,
+[SYS_sbrk]    sys_sbrk,
+[SYS_sleep]   sys_sleep,
+[SYS_uptime]  sys_uptime,
+[SYS_open]    sys_open,
+[SYS_write]   sys_write,
+[SYS_mknod]   sys_mknod,
+[SYS_unlink]  sys_unlink,
+[SYS_link]    sys_link,
+[SYS_mkdir]   sys_mkdir,
+[SYS_close]   sys_close,
+};
+
+void
+syscall(void)
+{
+  int num;
+
+  num = proc->tf->eax;
+  if(num > 0 && num < NELEM(syscalls) && syscalls[num]) {
+    proc->tf->eax = syscalls[num]();
+  } else {
+    cprintf("%d %s: unknown sys call %d\n",
+            proc->pid, proc->name, num);
+    proc->tf->eax = -1;
+  }
+}
diff --git a/syscall.h b/syscall.h
new file mode 100644
index 0000000..bc5f356
--- /dev/null
+++ b/syscall.h
@@ -0,0 +1,22 @@
+// System call numbers
+#define SYS_fork    1
+#define SYS_exit    2
+#define SYS_wait    3
+#define SYS_pipe    4
+#define SYS_read    5
+#define SYS_kill    6
+#define SYS_exec    7
+#define SYS_fstat   8
+#define SYS_chdir   9
+#define SYS_dup    10
+#define SYS_getpid 11
+#define SYS_sbrk   12
+#define SYS_sleep  13
+#define SYS_uptime 14
+#define SYS_open   15
+#define SYS_write  16
+#define SYS_mknod  17
+#define SYS_unlink 18
+#define SYS_link   19
+#define SYS_mkdir  20
+#define SYS_close  21
diff --git a/sysfile.c b/sysfile.c
new file mode 100644
index 0000000..2209f6e
--- /dev/null
+++ b/sysfile.c
@@ -0,0 +1,442 @@
+//
+// File-system system calls.
+// Mostly argument checking, since we don't trust
+// user code, and calls into file.c and fs.c.
+//
+
+#include "types.h"
+#include "defs.h"
+#include "param.h"
+#include "stat.h"
+#include "mmu.h"
+#include "proc.h"
+#include "fs.h"
+#include "file.h"
+#include "fcntl.h"
+
+// Fetch the nth word-sized system call argument as a file descriptor
+// and return both the descriptor and the corresponding struct file.
+static int
+argfd(int n, int *pfd, struct file **pf)
+{
+  int fd;
+  struct file *f;
+
+  if(argint(n, &fd) < 0)
+    return -1;
+  if(fd < 0 || fd >= NOFILE || (f=proc->ofile[fd]) == 0)
+    return -1;
+  if(pfd)
+    *pfd = fd;
+  if(pf)
+    *pf = f;
+  return 0;
+}
+
+// Allocate a file descriptor for the given file.
+// Takes over file reference from caller on success.
+static int
+fdalloc(struct file *f)
+{
+  int fd;
+
+  for(fd = 0; fd < NOFILE; fd++){
+    if(proc->ofile[fd] == 0){
+      proc->ofile[fd] = f;
+      return fd;
+    }
+  }
+  return -1;
+}
+
+int
+sys_dup(void)
+{
+  struct file *f;
+  int fd;
+  
+  if(argfd(0, 0, &f) < 0)
+    return -1;
+  if((fd=fdalloc(f)) < 0)
+    return -1;
+  filedup(f);
+  return fd;
+}
+
+int
+sys_read(void)
+{
+  struct file *f;
+  int n;
+  char *p;
+
+  if(argfd(0, 0, &f) < 0 || argint(2, &n) < 0 || argptr(1, &p, n) < 0)
+    return -1;
+  return fileread(f, p, n);
+}
+
+int
+sys_write(void)
+{
+  struct file *f;
+  int n;
+  char *p;
+
+  if(argfd(0, 0, &f) < 0 || argint(2, &n) < 0 || argptr(1, &p, n) < 0)
+    return -1;
+  return filewrite(f, p, n);
+}
+
+int
+sys_close(void)
+{
+  int fd;
+  struct file *f;
+  
+  if(argfd(0, &fd, &f) < 0)
+    return -1;
+  proc->ofile[fd] = 0;
+  fileclose(f);
+  return 0;
+}
+
+int
+sys_fstat(void)
+{
+  struct file *f;
+  struct stat *st;
+  
+  if(argfd(0, 0, &f) < 0 || argptr(1, (void*)&st, sizeof(*st)) < 0)
+    return -1;
+  return filestat(f, st);
+}
+
+// Create the path new as a link to the same inode as old.
+int
+sys_link(void)
+{
+  char name[DIRSIZ], *new, *old;
+  struct inode *dp, *ip;
+
+  if(argstr(0, &old) < 0 || argstr(1, &new) < 0)
+    return -1;
+
+  begin_op();
+  if((ip = namei(old)) == 0){
+    end_op();
+    return -1;
+  }
+
+  ilock(ip);
+  if(ip->type == T_DIR){
+    iunlockput(ip);
+    end_op();
+    return -1;
+  }
+
+  ip->nlink++;
+  iupdate(ip);
+  iunlock(ip);
+
+  if((dp = nameiparent(new, name)) == 0)
+    goto bad;
+  ilock(dp);
+  if(dp->dev != ip->dev || dirlink(dp, name, ip->inum) < 0){
+    iunlockput(dp);
+    goto bad;
+  }
+  iunlockput(dp);
+  iput(ip);
+
+  end_op();
+
+  return 0;
+
+bad:
+  ilock(ip);
+  ip->nlink--;
+  iupdate(ip);
+  iunlockput(ip);
+  end_op();
+  return -1;
+}
+
+// Is the directory dp empty except for "." and ".." ?
+static int
+isdirempty(struct inode *dp)
+{
+  int off;
+  struct dirent de;
+
+  for(off=2*sizeof(de); off<dp->size; off+=sizeof(de)){
+    if(readi(dp, (char*)&de, off, sizeof(de)) != sizeof(de))
+      panic("isdirempty: readi");
+    if(de.inum != 0)
+      return 0;
+  }
+  return 1;
+}
+
+//PAGEBREAK!
+int
+sys_unlink(void)
+{
+  struct inode *ip, *dp;
+  struct dirent de;
+  char name[DIRSIZ], *path;
+  uint off;
+
+  if(argstr(0, &path) < 0)
+    return -1;
+
+  begin_op();
+  if((dp = nameiparent(path, name)) == 0){
+    end_op();
+    return -1;
+  }
+
+  ilock(dp);
+
+  // Cannot unlink "." or "..".
+  if(namecmp(name, ".") == 0 || namecmp(name, "..") == 0)
+    goto bad;
+
+  if((ip = dirlookup(dp, name, &off)) == 0)
+    goto bad;
+  ilock(ip);
+
+  if(ip->nlink < 1)
+    panic("unlink: nlink < 1");
+  if(ip->type == T_DIR && !isdirempty(ip)){
+    iunlockput(ip);
+    goto bad;
+  }
+
+  memset(&de, 0, sizeof(de));
+  if(writei(dp, (char*)&de, off, sizeof(de)) != sizeof(de))
+    panic("unlink: writei");
+  if(ip->type == T_DIR){
+    dp->nlink--;
+    iupdate(dp);
+  }
+  iunlockput(dp);
+
+  ip->nlink--;
+  iupdate(ip);
+  iunlockput(ip);
+
+  end_op();
+
+  return 0;
+
+bad:
+  iunlockput(dp);
+  end_op();
+  return -1;
+}
+
+static struct inode*
+create(char *path, short type, short major, short minor)
+{
+  uint off;
+  struct inode *ip, *dp;
+  char name[DIRSIZ];
+
+  if((dp = nameiparent(path, name)) == 0)
+    return 0;
+  ilock(dp);
+
+  if((ip = dirlookup(dp, name, &off)) != 0){
+    iunlockput(dp);
+    ilock(ip);
+    if(type == T_FILE && ip->type == T_FILE)
+      return ip;
+    iunlockput(ip);
+    return 0;
+  }
+
+  if((ip = ialloc(dp->dev, type)) == 0)
+    panic("create: ialloc");
+
+  ilock(ip);
+  ip->major = major;
+  ip->minor = minor;
+  ip->nlink = 1;
+  iupdate(ip);
+
+  if(type == T_DIR){  // Create . and .. entries.
+    dp->nlink++;  // for ".."
+    iupdate(dp);
+    // No ip->nlink++ for ".": avoid cyclic ref count.
+    if(dirlink(ip, ".", ip->inum) < 0 || dirlink(ip, "..", dp->inum) < 0)
+      panic("create dots");
+  }
+
+  if(dirlink(dp, name, ip->inum) < 0)
+    panic("create: dirlink");
+
+  iunlockput(dp);
+
+  return ip;
+}
+
+int
+sys_open(void)
+{
+  char *path;
+  int fd, omode;
+  struct file *f;
+  struct inode *ip;
+
+  if(argstr(0, &path) < 0 || argint(1, &omode) < 0)
+    return -1;
+
+  begin_op();
+
+  if(omode & O_CREATE){
+    ip = create(path, T_FILE, 0, 0);
+    if(ip == 0){
+      end_op();
+      return -1;
+    }
+  } else {
+    if((ip = namei(path)) == 0){
+      end_op();
+      return -1;
+    }
+    ilock(ip);
+    if(ip->type == T_DIR && omode != O_RDONLY){
+      iunlockput(ip);
+      end_op();
+      return -1;
+    }
+  }
+
+  if((f = filealloc()) == 0 || (fd = fdalloc(f)) < 0){
+    if(f)
+      fileclose(f);
+    iunlockput(ip);
+    end_op();
+    return -1;
+  }
+  iunlock(ip);
+  end_op();
+
+  f->type = FD_INODE;
+  f->ip = ip;
+  f->off = 0;
+  f->readable = !(omode & O_WRONLY);
+  f->writable = (omode & O_WRONLY) || (omode & O_RDWR);
+  return fd;
+}
+
+int
+sys_mkdir(void)
+{
+  char *path;
+  struct inode *ip;
+
+  begin_op();
+  if(argstr(0, &path) < 0 || (ip = create(path, T_DIR, 0, 0)) == 0){
+    end_op();
+    return -1;
+  }
+  iunlockput(ip);
+  end_op();
+  return 0;
+}
+
+int
+sys_mknod(void)
+{
+  struct inode *ip;
+  char *path;
+  int len;
+  int major, minor;
+  
+  begin_op();
+  if((len=argstr(0, &path)) < 0 ||
+     argint(1, &major) < 0 ||
+     argint(2, &minor) < 0 ||
+     (ip = create(path, T_DEV, major, minor)) == 0){
+    end_op();
+    return -1;
+  }
+  iunlockput(ip);
+  end_op();
+  return 0;
+}
+
+int
+sys_chdir(void)
+{
+  char *path;
+  struct inode *ip;
+
+  begin_op();
+  if(argstr(0, &path) < 0 || (ip = namei(path)) == 0){
+    end_op();
+    return -1;
+  }
+  ilock(ip);
+  if(ip->type != T_DIR){
+    iunlockput(ip);
+    end_op();
+    return -1;
+  }
+  iunlock(ip);
+  iput(proc->cwd);
+  end_op();
+  proc->cwd = ip;
+  return 0;
+}
+
+int
+sys_exec(void)
+{
+  char *path, *argv[MAXARG];
+  int i;
+  uint uargv, uarg;
+
+  if(argstr(0, &path) < 0 || argint(1, (int*)&uargv) < 0){
+    return -1;
+  }
+  memset(argv, 0, sizeof(argv));
+  for(i=0;; i++){
+    if(i >= NELEM(argv))
+      return -1;
+    if(fetchint(uargv+4*i, (int*)&uarg) < 0)
+      return -1;
+    if(uarg == 0){
+      argv[i] = 0;
+      break;
+    }
+    if(fetchstr(uarg, &argv[i]) < 0)
+      return -1;
+  }
+  return exec(path, argv);
+}
+
+int
+sys_pipe(void)
+{
+  int *fd;
+  struct file *rf, *wf;
+  int fd0, fd1;
+
+  if(argptr(0, (void*)&fd, 2*sizeof(fd[0])) < 0)
+    return -1;
+  if(pipealloc(&rf, &wf) < 0)
+    return -1;
+  fd0 = -1;
+  if((fd0 = fdalloc(rf)) < 0 || (fd1 = fdalloc(wf)) < 0){
+    if(fd0 >= 0)
+      proc->ofile[fd0] = 0;
+    fileclose(rf);
+    fileclose(wf);
+    return -1;
+  }
+  fd[0] = fd0;
+  fd[1] = fd1;
+  return 0;
+}
diff --git a/sysproc.c b/sysproc.c
new file mode 100644
index 0000000..027a5e5
--- /dev/null
+++ b/sysproc.c
@@ -0,0 +1,91 @@
+#include "types.h"
+#include "x86.h"
+#include "defs.h"
+#include "date.h"
+#include "param.h"
+#include "memlayout.h"
+#include "mmu.h"
+#include "proc.h"
+
+int
+sys_fork(void)
+{
+  return fork();
+}
+
+int
+sys_exit(void)
+{
+  exit();
+  return 0;  // not reached
+}
+
+int
+sys_wait(void)
+{
+  return wait();
+}
+
+int
+sys_kill(void)
+{
+  int pid;
+
+  if(argint(0, &pid) < 0)
+    return -1;
+  return kill(pid);
+}
+
+int
+sys_getpid(void)
+{
+  return proc->pid;
+}
+
+int
+sys_sbrk(void)
+{
+  int addr;
+  int n;
+
+  if(argint(0, &n) < 0)
+    return -1;
+  addr = proc->sz;
+  if(growproc(n) < 0)
+    return -1;
+  return addr;
+}
+
+int
+sys_sleep(void)
+{
+  int n;
+  uint ticks0;
+  
+  if(argint(0, &n) < 0)
+    return -1;
+  acquire(&tickslock);
+  ticks0 = ticks;
+  while(ticks - ticks0 < n){
+    if(proc->killed){
+      release(&tickslock);
+      return -1;
+    }
+    sleep(&ticks, &tickslock);
+  }
+  release(&tickslock);
+  return 0;
+}
+
+// return how many clock tick interrupts have occurred
+// since start.
+int
+sys_uptime(void)
+{
+  uint xticks;
+  
+  acquire(&tickslock);
+  xticks = ticks;
+  release(&tickslock);
+  return xticks;
+}
diff --git a/timer.c b/timer.c
new file mode 100644
index 0000000..8df75a9
--- /dev/null
+++ b/timer.c
@@ -0,0 +1,32 @@
+// Intel 8253/8254/82C54 Programmable Interval Timer (PIT).
+// Only used on uniprocessors;
+// SMP machines use the local APIC timer.
+
+#include "types.h"
+#include "defs.h"
+#include "traps.h"
+#include "x86.h"
+
+#define IO_TIMER1       0x040           // 8253 Timer #1
+
+// Frequency of all three count-down timers;
+// (TIMER_FREQ/freq) is the appropriate count
+// to generate a frequency of freq Hz.
+
+#define TIMER_FREQ      1193182
+#define TIMER_DIV(x)    ((TIMER_FREQ+(x)/2)/(x))
+
+#define TIMER_MODE      (IO_TIMER1 + 3) // timer mode port
+#define TIMER_SEL0      0x00    // select counter 0
+#define TIMER_RATEGEN   0x04    // mode 2, rate generator
+#define TIMER_16BIT     0x30    // r/w counter 16 bits, LSB first
+
+void
+timerinit(void)
+{
+  // Interrupt 100 times/sec.
+  outb(TIMER_MODE, TIMER_SEL0 | TIMER_RATEGEN | TIMER_16BIT);
+  outb(IO_TIMER1, TIMER_DIV(100) % 256);
+  outb(IO_TIMER1, TIMER_DIV(100) / 256);
+  picenable(IRQ_TIMER);
+}
diff --git a/trap.c b/trap.c
new file mode 100644
index 0000000..3f80145
--- /dev/null
+++ b/trap.c
@@ -0,0 +1,111 @@
+#include "types.h"
+#include "defs.h"
+#include "param.h"
+#include "memlayout.h"
+#include "mmu.h"
+#include "proc.h"
+#include "x86.h"
+#include "traps.h"
+#include "spinlock.h"
+
+// Interrupt descriptor table (shared by all CPUs).
+struct gatedesc idt[256];
+extern uint vectors[];  // in vectors.S: array of 256 entry pointers
+struct spinlock tickslock;
+uint ticks;
+
+void
+tvinit(void)
+{
+  int i;
+
+  for(i = 0; i < 256; i++)
+    SETGATE(idt[i], 0, SEG_KCODE<<3, vectors[i], 0);
+  SETGATE(idt[T_SYSCALL], 1, SEG_KCODE<<3, vectors[T_SYSCALL], DPL_USER);
+  
+  initlock(&tickslock, "time");
+}
+
+void
+idtinit(void)
+{
+  lidt(idt, sizeof(idt));
+}
+
+//PAGEBREAK: 41
+void
+trap(struct trapframe *tf)
+{
+  if(tf->trapno == T_SYSCALL){
+    if(proc->killed)
+      exit();
+    proc->tf = tf;
+    syscall();
+    if(proc->killed)
+      exit();
+    return;
+  }
+
+  switch(tf->trapno){
+  case T_IRQ0 + IRQ_TIMER:
+    if(cpu->id == 0){
+      acquire(&tickslock);
+      ticks++;
+      wakeup(&ticks);
+      release(&tickslock);
+    }
+    lapiceoi();
+    break;
+  case T_IRQ0 + IRQ_IDE:
+    ideintr();
+    lapiceoi();
+    break;
+  case T_IRQ0 + IRQ_IDE+1:
+    // Bochs generates spurious IDE1 interrupts.
+    break;
+  case T_IRQ0 + IRQ_KBD:
+    kbdintr();
+    lapiceoi();
+    break;
+  case T_IRQ0 + IRQ_COM1:
+    uartintr();
+    lapiceoi();
+    break;
+  case T_IRQ0 + 7:
+  case T_IRQ0 + IRQ_SPURIOUS:
+    cprintf("cpu%d: spurious interrupt at %x:%x\n",
+            cpu->id, tf->cs, tf->eip);
+    lapiceoi();
+    break;
+   
+  //PAGEBREAK: 13
+  default:
+    if(proc == 0 || (tf->cs&3) == 0){
+      // In kernel, it must be our mistake.
+      cprintf("unexpected trap %d from cpu %d eip %x (cr2=0x%x)\n",
+              tf->trapno, cpu->id, tf->eip, rcr2());
+      panic("trap");
+    }
+    // In user space, assume process misbehaved.
+    cprintf("pid %d %s: trap %d err %d on cpu %d "
+            "eip 0x%x addr 0x%x--kill proc\n",
+            proc->pid, proc->name, tf->trapno, tf->err, cpu->id, tf->eip, 
+            rcr2());
+    proc->killed = 1;
+  }
+
+  // Force process exit if it has been killed and is in user space.
+  // (If it is still executing in the kernel, let it keep running 
+  // until it gets to the regular system call return.)
+  if(proc && proc->killed && (tf->cs&3) == DPL_USER)
+    exit();
+
+  // Force process to give up CPU on clock tick.
+  // If interrupts were on while locks held, would need to check nlock.
+  if(proc && proc->state == RUNNING && tf->trapno == T_IRQ0+IRQ_TIMER)
+    yield();
+
+  // Check if the process has been killed since we yielded
+  if(proc && proc->killed && (tf->cs&3) == DPL_USER)
+    exit();
+}
diff --git a/trapasm.S b/trapasm.S
new file mode 100644
index 0000000..787727f
--- /dev/null
+++ b/trapasm.S
@@ -0,0 +1,35 @@
+#include "mmu.h"
+
+  # vectors.S sends all traps here.
+.globl alltraps
+alltraps:
+  # Build trap frame.
+  pushl %ds
+  pushl %es
+  pushl %fs
+  pushl %gs
+  pushal
+  
+  # Set up data and per-cpu segments.
+  movw $(SEG_KDATA<<3), %ax
+  movw %ax, %ds
+  movw %ax, %es
+  movw $(SEG_KCPU<<3), %ax
+  movw %ax, %fs
+  movw %ax, %gs
+
+  # Call trap(tf), where tf=%esp
+  pushl %esp
+  call trap
+  addl $4, %esp
+
+  # Return falls through to trapret...
+.globl trapret
+trapret:
+  popal
+  popl %gs
+  popl %fs
+  popl %es
+  popl %ds
+  addl $0x8, %esp  # trapno and errcode
+  iret
diff --git a/traps.h b/traps.h
new file mode 100644
index 0000000..0bd1fd8
--- /dev/null
+++ b/traps.h
@@ -0,0 +1,38 @@
+// x86 trap and interrupt constants.
+
+// Processor-defined:
+#define T_DIVIDE         0      // divide error
+#define T_DEBUG          1      // debug exception
+#define T_NMI            2      // non-maskable interrupt
+#define T_BRKPT          3      // breakpoint
+#define T_OFLOW          4      // overflow
+#define T_BOUND          5      // bounds check
+#define T_ILLOP          6      // illegal opcode
+#define T_DEVICE         7      // device not available
+#define T_DBLFLT         8      // double fault
+// #define T_COPROC      9      // reserved (not used since 486)
+#define T_TSS           10      // invalid task switch segment
+#define T_SEGNP         11      // segment not present
+#define T_STACK         12      // stack exception
+#define T_GPFLT         13      // general protection fault
+#define T_PGFLT         14      // page fault
+// #define T_RES        15      // reserved
+#define T_FPERR         16      // floating point error
+#define T_ALIGN         17      // aligment check
+#define T_MCHK          18      // machine check
+#define T_SIMDERR       19      // SIMD floating point error
+
+// These are arbitrarily chosen, but with care not to overlap
+// processor defined exceptions or interrupt vectors.
+#define T_SYSCALL       64      // system call
+#define T_DEFAULT      500      // catchall
+
+#define T_IRQ0          32      // IRQ 0 corresponds to int T_IRQ
+
+#define IRQ_TIMER        0
+#define IRQ_KBD          1
+#define IRQ_COM1         4
+#define IRQ_IDE         14
+#define IRQ_ERROR       19
+#define IRQ_SPURIOUS    31
+
diff --git a/types.h b/types.h
new file mode 100644
index 0000000..e4adf64
--- /dev/null
+++ b/types.h
@@ -0,0 +1,4 @@
+typedef unsigned int   uint;
+typedef unsigned short ushort;
+typedef unsigned char  uchar;
+typedef uint pde_t;
diff --git a/uart.c b/uart.c
new file mode 100644
index 0000000..576e254
--- /dev/null
+++ b/uart.c
@@ -0,0 +1,77 @@
+// Intel 8250 serial port (UART).
+
+#include "types.h"
+#include "defs.h"
+#include "param.h"
+#include "traps.h"
+#include "spinlock.h"
+#include "fs.h"
+#include "file.h"
+#include "mmu.h"
+#include "proc.h"
+#include "x86.h"
+
+#define COM1    0x3f8
+
+static int uart;    // is there a uart?
+
+void
+uartinit(void)
+{
+  char *p;
+
+  // Turn off the FIFO
+  outb(COM1+2, 0);
+  
+  // 9600 baud, 8 data bits, 1 stop bit, parity off.
+  outb(COM1+3, 0x80);    // Unlock divisor
+  outb(COM1+0, 115200/9600);
+  outb(COM1+1, 0);
+  outb(COM1+3, 0x03);    // Lock divisor, 8 data bits.
+  outb(COM1+4, 0);
+  outb(COM1+1, 0x01);    // Enable receive interrupts.
+
+  // If status is 0xFF, no serial port.
+  if(inb(COM1+5) == 0xFF)
+    return;
+  uart = 1;
+
+  // Acknowledge pre-existing interrupt conditions;
+  // enable interrupts.
+  inb(COM1+2);
+  inb(COM1+0);
+  picenable(IRQ_COM1);
+  ioapicenable(IRQ_COM1, 0);
+  
+  // Announce that we're here.
+  for(p="xv6...\n"; *p; p++)
+    uartputc(*p);
+}
+
+void
+uartputc(int c)
+{
+  int i;
+
+  if(!uart)
+    return;
+  for(i = 0; i < 128 && !(inb(COM1+5) & 0x20); i++)
+    microdelay(10);
+  outb(COM1+0, c);
+}
+
+static int
+uartgetc(void)
+{
+  if(!uart)
+    return -1;
+  if(!(inb(COM1+5) & 0x01))
+    return -1;
+  return inb(COM1+0);
+}
+
+void
+uartintr(void)
+{
+  consoleintr(uartgetc);
+}
diff --git a/ulib.c b/ulib.c
new file mode 100644
index 0000000..dbbcfcf
--- /dev/null
+++ b/ulib.c
@@ -0,0 +1,105 @@
+#include "types.h"
+#include "stat.h"
+#include "fcntl.h"
+#include "user.h"
+#include "x86.h"
+
+char*
+strcpy(char *s, char *t)
+{
+  char *os;
+
+  os = s;
+  while((*s++ = *t++) != 0)
+    ;
+  return os;
+}
+
+int
+strcmp(const char *p, const char *q)
+{
+  while(*p && *p == *q)
+    p++, q++;
+  return (uchar)*p - (uchar)*q;
+}
+
+uint
+strlen(char *s)
+{
+  int n;
+
+  for(n = 0; s[n]; n++)
+    ;
+  return n;
+}
+
+void*
+memset(void *dst, int c, uint n)
+{
+  stosb(dst, c, n);
+  return dst;
+}
+
+char*
+strchr(const char *s, char c)
+{
+  for(; *s; s++)
+    if(*s == c)
+      return (char*)s;
+  return 0;
+}
+
+char*
+gets(char *buf, int max)
+{
+  int i, cc;
+  char c;
+
+  for(i=0; i+1 < max; ){
+    cc = read(0, &c, 1);
+    if(cc < 1)
+      break;
+    buf[i++] = c;
+    if(c == '\n' || c == '\r')
+      break;
+  }
+  buf[i] = '\0';
+  return buf;
+}
+
+int
+stat(char *n, struct stat *st)
+{
+  int fd;
+  int r;
+
+  fd = open(n, O_RDONLY);
+  if(fd < 0)
+    return -1;
+  r = fstat(fd, st);
+  close(fd);
+  return r;
+}
+
+int
+atoi(const char *s)
+{
+  int n;
+
+  n = 0;
+  while('0' <= *s && *s <= '9')
+    n = n*10 + *s++ - '0';
+  return n;
+}
+
+void*
+memmove(void *vdst, void *vsrc, int n)
+{
+  char *dst, *src;
+  
+  dst = vdst;
+  src = vsrc;
+  while(n-- > 0)
+    *dst++ = *src++;
+  return vdst;
+}
diff --git a/umalloc.c b/umalloc.c
new file mode 100644
index 0000000..a7e7d2c
--- /dev/null
+++ b/umalloc.c
@@ -0,0 +1,90 @@
+#include "types.h"
+#include "stat.h"
+#include "user.h"
+#include "param.h"
+
+// Memory allocator by Kernighan and Ritchie,
+// The C programming Language, 2nd ed.  Section 8.7.
+
+typedef long Align;
+
+union header {
+  struct {
+    union header *ptr;
+    uint size;
+  } s;
+  Align x;
+};
+
+typedef union header Header;
+
+static Header base;
+static Header *freep;
+
+void
+free(void *ap)
+{
+  Header *bp, *p;
+
+  bp = (Header*)ap - 1;
+  for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
+    if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
+      break;
+  if(bp + bp->s.size == p->s.ptr){
+    bp->s.size += p->s.ptr->s.size;
+    bp->s.ptr = p->s.ptr->s.ptr;
+  } else
+    bp->s.ptr = p->s.ptr;
+  if(p + p->s.size == bp){
+    p->s.size += bp->s.size;
+    p->s.ptr = bp->s.ptr;
+  } else
+    p->s.ptr = bp;
+  freep = p;
+}
+
+static Header*
+morecore(uint nu)
+{
+  char *p;
+  Header *hp;
+
+  if(nu < 4096)
+    nu = 4096;
+  p = sbrk(nu * sizeof(Header));
+  if(p == (char*)-1)
+    return 0;
+  hp = (Header*)p;
+  hp->s.size = nu;
+  free((void*)(hp + 1));
+  return freep;
+}
+
+void*
+malloc(uint nbytes)
+{
+  Header *p, *prevp;
+  uint nunits;
+
+  nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;
+  if((prevp = freep) == 0){
+    base.s.ptr = freep = prevp = &base;
+    base.s.size = 0;
+  }
+  for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
+    if(p->s.size >= nunits){
+      if(p->s.size == nunits)
+        prevp->s.ptr = p->s.ptr;
+      else {
+        p->s.size -= nunits;
+        p += p->s.size;
+        p->s.size = nunits;
+      }
+      freep = prevp;
+      return (void*)(p + 1);
+    }
+    if(p == freep)
+      if((p = morecore(nunits)) == 0)
+        return 0;
+  }
+}
diff --git a/user.h b/user.h
new file mode 100644
index 0000000..f45b8d5
--- /dev/null
+++ b/user.h
@@ -0,0 +1,39 @@
+struct stat;
+struct rtcdate;
+
+// system calls
+int fork(void);
+int exit(void) __attribute__((noreturn));
+int wait(void);
+int pipe(int*);
+int write(int, void*, int);
+int read(int, void*, int);
+int close(int);
+int kill(int);
+int exec(char*, char**);
+int open(char*, int);
+int mknod(char*, short, short);
+int unlink(char*);
+int fstat(int fd, struct stat*);
+int link(char*, char*);
+int mkdir(char*);
+int chdir(char*);
+int dup(int);
+int getpid(void);
+char* sbrk(int);
+int sleep(int);
+int uptime(void);
+
+// ulib.c
+int stat(char*, struct stat*);
+char* strcpy(char*, char*);
+void *memmove(void*, void*, int);
+char* strchr(const char*, char c);
+int strcmp(const char*, const char*);
+void printf(int, char*, ...);
+char* gets(char*, int max);
+uint strlen(char*);
+void* memset(void*, int, uint);
+void* malloc(uint);
+void free(void*);
+int atoi(const char*);
diff --git a/usertests.c b/usertests.c
new file mode 100644
index 0000000..22a7bfb
--- /dev/null
+++ b/usertests.c
@@ -0,0 +1,1757 @@
+#include "param.h"
+#include "types.h"
+#include "stat.h"
+#include "user.h"
+#include "fs.h"
+#include "fcntl.h"
+#include "syscall.h"
+#include "traps.h"
+#include "memlayout.h"
+
+char buf[8192];
+char name[3];
+char *echoargv[] = { "echo", "ALL", "TESTS", "PASSED", 0 };
+int stdout = 1;
+
+// does chdir() call iput(p->cwd) in a transaction?
+void
+iputtest(void)
+{
+  printf(stdout, "iput test\n");
+
+  if(mkdir("iputdir") < 0){
+    printf(stdout, "mkdir failed\n");
+    exit();
+  }
+  if(chdir("iputdir") < 0){
+    printf(stdout, "chdir iputdir failed\n");
+    exit();
+  }
+  if(unlink("../iputdir") < 0){
+    printf(stdout, "unlink ../iputdir failed\n");
+    exit();
+  }
+  if(chdir("/") < 0){
+    printf(stdout, "chdir / failed\n");
+    exit();
+  }
+  printf(stdout, "iput test ok\n");
+}
+
+// does exit() call iput(p->cwd) in a transaction?
+void
+exitiputtest(void)
+{
+  int pid;
+
+  printf(stdout, "exitiput test\n");
+
+  pid = fork();
+  if(pid < 0){
+    printf(stdout, "fork failed\n");
+    exit();
+  }
+  if(pid == 0){
+    if(mkdir("iputdir") < 0){
+      printf(stdout, "mkdir failed\n");
+      exit();
+    }
+    if(chdir("iputdir") < 0){
+      printf(stdout, "child chdir failed\n");
+      exit();
+    }
+    if(unlink("../iputdir") < 0){
+      printf(stdout, "unlink ../iputdir failed\n");
+      exit();
+    }
+    exit();
+  }
+  wait();
+  printf(stdout, "exitiput test ok\n");
+}
+
+// does the error path in open() for attempt to write a
+// directory call iput() in a transaction?
+// needs a hacked kernel that pauses just after the namei()
+// call in sys_open():
+//    if((ip = namei(path)) == 0)
+//      return -1;
+//    {
+//      int i;
+//      for(i = 0; i < 10000; i++)
+//        yield();
+//    }
+void
+openiputtest(void)
+{
+  int pid;
+
+  printf(stdout, "openiput test\n");
+  if(mkdir("oidir") < 0){
+    printf(stdout, "mkdir oidir failed\n");
+    exit();
+  }
+  pid = fork();
+  if(pid < 0){
+    printf(stdout, "fork failed\n");
+    exit();
+  }
+  if(pid == 0){
+    int fd = open("oidir", O_RDWR);
+    if(fd >= 0){
+      printf(stdout, "open directory for write succeeded\n");
+      exit();
+    }
+    exit();
+  }
+  sleep(1);
+  if(unlink("oidir") != 0){
+    printf(stdout, "unlink failed\n");
+    exit();
+  }
+  wait();
+  printf(stdout, "openiput test ok\n");
+}
+
+// simple file system tests
+
+void
+opentest(void)
+{
+  int fd;
+
+  printf(stdout, "open test\n");
+  fd = open("echo", 0);
+  if(fd < 0){
+    printf(stdout, "open echo failed!\n");
+    exit();
+  }
+  close(fd);
+  fd = open("doesnotexist", 0);
+  if(fd >= 0){
+    printf(stdout, "open doesnotexist succeeded!\n");
+    exit();
+  }
+  printf(stdout, "open test ok\n");
+}
+
+void
+writetest(void)
+{
+  int fd;
+  int i;
+
+  printf(stdout, "small file test\n");
+  fd = open("small", O_CREATE|O_RDWR);
+  if(fd >= 0){
+    printf(stdout, "creat small succeeded; ok\n");
+  } else {
+    printf(stdout, "error: creat small failed!\n");
+    exit();
+  }
+  for(i = 0; i < 100; i++){
+    if(write(fd, "aaaaaaaaaa", 10) != 10){
+      printf(stdout, "error: write aa %d new file failed\n", i);
+      exit();
+    }
+    if(write(fd, "bbbbbbbbbb", 10) != 10){
+      printf(stdout, "error: write bb %d new file failed\n", i);
+      exit();
+    }
+  }
+  printf(stdout, "writes ok\n");
+  close(fd);
+  fd = open("small", O_RDONLY);
+  if(fd >= 0){
+    printf(stdout, "open small succeeded ok\n");
+  } else {
+    printf(stdout, "error: open small failed!\n");
+    exit();
+  }
+  i = read(fd, buf, 2000);
+  if(i == 2000){
+    printf(stdout, "read succeeded ok\n");
+  } else {
+    printf(stdout, "read failed\n");
+    exit();
+  }
+  close(fd);
+
+  if(unlink("small") < 0){
+    printf(stdout, "unlink small failed\n");
+    exit();
+  }
+  printf(stdout, "small file test ok\n");
+}
+
+void
+writetest1(void)
+{
+  int i, fd, n;
+
+  printf(stdout, "big files test\n");
+
+  fd = open("big", O_CREATE|O_RDWR);
+  if(fd < 0){
+    printf(stdout, "error: creat big failed!\n");
+    exit();
+  }
+
+  for(i = 0; i < MAXFILE; i++){
+    ((int*)buf)[0] = i;
+    if(write(fd, buf, 512) != 512){
+      printf(stdout, "error: write big file failed\n", i);
+      exit();
+    }
+  }
+
+  close(fd);
+
+  fd = open("big", O_RDONLY);
+  if(fd < 0){
+    printf(stdout, "error: open big failed!\n");
+    exit();
+  }
+
+  n = 0;
+  for(;;){
+    i = read(fd, buf, 512);
+    if(i == 0){
+      if(n == MAXFILE - 1){
+        printf(stdout, "read only %d blocks from big", n);
+        exit();
+      }
+      break;
+    } else if(i != 512){
+      printf(stdout, "read failed %d\n", i);
+      exit();
+    }
+    if(((int*)buf)[0] != n){
+      printf(stdout, "read content of block %d is %d\n",
+             n, ((int*)buf)[0]);
+      exit();
+    }
+    n++;
+  }
+  close(fd);
+  if(unlink("big") < 0){
+    printf(stdout, "unlink big failed\n");
+    exit();
+  }
+  printf(stdout, "big files ok\n");
+}
+
+void
+createtest(void)
+{
+  int i, fd;
+
+  printf(stdout, "many creates, followed by unlink test\n");
+
+  name[0] = 'a';
+  name[2] = '\0';
+  for(i = 0; i < 52; i++){
+    name[1] = '0' + i;
+    fd = open(name, O_CREATE|O_RDWR);
+    close(fd);
+  }
+  name[0] = 'a';
+  name[2] = '\0';
+  for(i = 0; i < 52; i++){
+    name[1] = '0' + i;
+    unlink(name);
+  }
+  printf(stdout, "many creates, followed by unlink; ok\n");
+}
+
+void dirtest(void)
+{
+  printf(stdout, "mkdir test\n");
+
+  if(mkdir("dir0") < 0){
+    printf(stdout, "mkdir failed\n");
+    exit();
+  }
+
+  if(chdir("dir0") < 0){
+    printf(stdout, "chdir dir0 failed\n");
+    exit();
+  }
+
+  if(chdir("..") < 0){
+    printf(stdout, "chdir .. failed\n");
+    exit();
+  }
+
+  if(unlink("dir0") < 0){
+    printf(stdout, "unlink dir0 failed\n");
+    exit();
+  }
+  printf(stdout, "mkdir test ok\n");
+}
+
+void
+exectest(void)
+{
+  printf(stdout, "exec test\n");
+  if(exec("echo", echoargv) < 0){
+    printf(stdout, "exec echo failed\n");
+    exit();
+  }
+}
+
+// simple fork and pipe read/write
+
+void
+pipe1(void)
+{
+  int fds[2], pid;
+  int seq, i, n, cc, total;
+
+  if(pipe(fds) != 0){
+    printf(1, "pipe() failed\n");
+    exit();
+  }
+  pid = fork();
+  seq = 0;
+  if(pid == 0){
+    close(fds[0]);
+    for(n = 0; n < 5; n++){
+      for(i = 0; i < 1033; i++)
+        buf[i] = seq++;
+      if(write(fds[1], buf, 1033) != 1033){
+        printf(1, "pipe1 oops 1\n");
+        exit();
+      }
+    }
+    exit();
+  } else if(pid > 0){
+    close(fds[1]);
+    total = 0;
+    cc = 1;
+    while((n = read(fds[0], buf, cc)) > 0){
+      for(i = 0; i < n; i++){
+        if((buf[i] & 0xff) != (seq++ & 0xff)){
+          printf(1, "pipe1 oops 2\n");
+          return;
+        }
+      }
+      total += n;
+      cc = cc * 2;
+      if(cc > sizeof(buf))
+        cc = sizeof(buf);
+    }
+    if(total != 5 * 1033){
+      printf(1, "pipe1 oops 3 total %d\n", total);
+      exit();
+    }
+    close(fds[0]);
+    wait();
+  } else {
+    printf(1, "fork() failed\n");
+    exit();
+  }
+  printf(1, "pipe1 ok\n");
+}
+
+// meant to be run w/ at most two CPUs
+void
+preempt(void)
+{
+  int pid1, pid2, pid3;
+  int pfds[2];
+
+  printf(1, "preempt: ");
+  pid1 = fork();
+  if(pid1 == 0)
+    for(;;)
+      ;
+
+  pid2 = fork();
+  if(pid2 == 0)
+    for(;;)
+      ;
+
+  pipe(pfds);
+  pid3 = fork();
+  if(pid3 == 0){
+    close(pfds[0]);
+    if(write(pfds[1], "x", 1) != 1)
+      printf(1, "preempt write error");
+    close(pfds[1]);
+    for(;;)
+      ;
+  }
+
+  close(pfds[1]);
+  if(read(pfds[0], buf, sizeof(buf)) != 1){
+    printf(1, "preempt read error");
+    return;
+  }
+  close(pfds[0]);
+  printf(1, "kill... ");
+  kill(pid1);
+  kill(pid2);
+  kill(pid3);
+  printf(1, "wait... ");
+  wait();
+  wait();
+  wait();
+  printf(1, "preempt ok\n");
+}
+
+// try to find any races between exit and wait
+void
+exitwait(void)
+{
+  int i, pid;
+
+  for(i = 0; i < 100; i++){
+    pid = fork();
+    if(pid < 0){
+      printf(1, "fork failed\n");
+      return;
+    }
+    if(pid){
+      if(wait() != pid){
+        printf(1, "wait wrong pid\n");
+        return;
+      }
+    } else {
+      exit();
+    }
+  }
+  printf(1, "exitwait ok\n");
+}
+
+void
+mem(void)
+{
+  void *m1, *m2;
+  int pid, ppid;
+
+  printf(1, "mem test\n");
+  ppid = getpid();
+  if((pid = fork()) == 0){
+    m1 = 0;
+    while((m2 = malloc(10001)) != 0){
+      *(char**)m2 = m1;
+      m1 = m2;
+    }
+    while(m1){
+      m2 = *(char**)m1;
+      free(m1);
+      m1 = m2;
+    }
+    m1 = malloc(1024*20);
+    if(m1 == 0){
+      printf(1, "couldn't allocate mem?!!\n");
+      kill(ppid);
+      exit();
+    }
+    free(m1);
+    printf(1, "mem ok\n");
+    exit();
+  } else {
+    wait();
+  }
+}
+
+// More file system tests
+
+// two processes write to the same file descriptor
+// is the offset shared? does inode locking work?
+void
+sharedfd(void)
+{
+  int fd, pid, i, n, nc, np;
+  char buf[10];
+
+  printf(1, "sharedfd test\n");
+
+  unlink("sharedfd");
+  fd = open("sharedfd", O_CREATE|O_RDWR);
+  if(fd < 0){
+    printf(1, "fstests: cannot open sharedfd for writing");
+    return;
+  }
+  pid = fork();
+  memset(buf, pid==0?'c':'p', sizeof(buf));
+  for(i = 0; i < 1000; i++){
+    if(write(fd, buf, sizeof(buf)) != sizeof(buf)){
+      printf(1, "fstests: write sharedfd failed\n");
+      break;
+    }
+  }
+  if(pid == 0)
+    exit();
+  else
+    wait();
+  close(fd);
+  fd = open("sharedfd", 0);
+  if(fd < 0){
+    printf(1, "fstests: cannot open sharedfd for reading\n");
+    return;
+  }
+  nc = np = 0;
+  while((n = read(fd, buf, sizeof(buf))) > 0){
+    for(i = 0; i < sizeof(buf); i++){
+      if(buf[i] == 'c')
+        nc++;
+      if(buf[i] == 'p')
+        np++;
+    }
+  }
+  close(fd);
+  unlink("sharedfd");
+  if(nc == 10000 && np == 10000){
+    printf(1, "sharedfd ok\n");
+  } else {
+    printf(1, "sharedfd oops %d %d\n", nc, np);
+    exit();
+  }
+}
+
+// four processes write different files at the same
+// time, to test block allocation.
+void
+fourfiles(void)
+{
+  int fd, pid, i, j, n, total, pi;
+  char *names[] = { "f0", "f1", "f2", "f3" };
+  char *fname;
+
+  printf(1, "fourfiles test\n");
+
+  for(pi = 0; pi < 4; pi++){
+    fname = names[pi];
+    unlink(fname);
+
+    pid = fork();
+    if(pid < 0){
+      printf(1, "fork failed\n");
+      exit();
+    }
+
+    if(pid == 0){
+      fd = open(fname, O_CREATE | O_RDWR);
+      if(fd < 0){
+        printf(1, "create failed\n");
+        exit();
+      }
+      
+      memset(buf, '0'+pi, 512);
+      for(i = 0; i < 12; i++){
+        if((n = write(fd, buf, 500)) != 500){
+          printf(1, "write failed %d\n", n);
+          exit();
+        }
+      }
+      exit();
+    }
+  }
+
+  for(pi = 0; pi < 4; pi++){
+    wait();
+  }
+
+  for(i = 0; i < 2; i++){
+    fname = names[i];
+    fd = open(fname, 0);
+    total = 0;
+    while((n = read(fd, buf, sizeof(buf))) > 0){
+      for(j = 0; j < n; j++){
+        if(buf[j] != '0'+i){
+          printf(1, "wrong char\n");
+          exit();
+        }
+      }
+      total += n;
+    }
+    close(fd);
+    if(total != 12*500){
+      printf(1, "wrong length %d\n", total);
+      exit();
+    }
+    unlink(fname);
+  }
+
+  printf(1, "fourfiles ok\n");
+}
+
+// four processes create and delete different files in same directory
+void
+createdelete(void)
+{
+  enum { N = 20 };
+  int pid, i, fd, pi;
+  char name[32];
+
+  printf(1, "createdelete test\n");
+
+  for(pi = 0; pi < 4; pi++){
+    pid = fork();
+    if(pid < 0){
+      printf(1, "fork failed\n");
+      exit();
+    }
+
+    if(pid == 0){
+      name[0] = 'p' + pi;
+      name[2] = '\0';
+      for(i = 0; i < N; i++){
+        name[1] = '0' + i;
+        fd = open(name, O_CREATE | O_RDWR);
+        if(fd < 0){
+          printf(1, "create failed\n");
+          exit();
+        }
+        close(fd);
+        if(i > 0 && (i % 2 ) == 0){
+          name[1] = '0' + (i / 2);
+          if(unlink(name) < 0){
+            printf(1, "unlink failed\n");
+            exit();
+          }
+        }
+      }
+      exit();
+    }
+  }
+
+  for(pi = 0; pi < 4; pi++){
+    wait();
+  }
+
+  name[0] = name[1] = name[2] = 0;
+  for(i = 0; i < N; i++){
+    for(pi = 0; pi < 4; pi++){
+      name[0] = 'p' + pi;
+      name[1] = '0' + i;
+      fd = open(name, 0);
+      if((i == 0 || i >= N/2) && fd < 0){
+        printf(1, "oops createdelete %s didn't exist\n", name);
+        exit();
+      } else if((i >= 1 && i < N/2) && fd >= 0){
+        printf(1, "oops createdelete %s did exist\n", name);
+        exit();
+      }
+      if(fd >= 0)
+        close(fd);
+    }
+  }
+
+  for(i = 0; i < N; i++){
+    for(pi = 0; pi < 4; pi++){
+      name[0] = 'p' + i;
+      name[1] = '0' + i;
+      unlink(name);
+    }
+  }
+
+  printf(1, "createdelete ok\n");
+}
+
+// can I unlink a file and still read it?
+void
+unlinkread(void)
+{
+  int fd, fd1;
+
+  printf(1, "unlinkread test\n");
+  fd = open("unlinkread", O_CREATE | O_RDWR);
+  if(fd < 0){
+    printf(1, "create unlinkread failed\n");
+    exit();
+  }
+  write(fd, "hello", 5);
+  close(fd);
+
+  fd = open("unlinkread", O_RDWR);
+  if(fd < 0){
+    printf(1, "open unlinkread failed\n");
+    exit();
+  }
+  if(unlink("unlinkread") != 0){
+    printf(1, "unlink unlinkread failed\n");
+    exit();
+  }
+
+  fd1 = open("unlinkread", O_CREATE | O_RDWR);
+  write(fd1, "yyy", 3);
+  close(fd1);
+
+  if(read(fd, buf, sizeof(buf)) != 5){
+    printf(1, "unlinkread read failed");
+    exit();
+  }
+  if(buf[0] != 'h'){
+    printf(1, "unlinkread wrong data\n");
+    exit();
+  }
+  if(write(fd, buf, 10) != 10){
+    printf(1, "unlinkread write failed\n");
+    exit();
+  }
+  close(fd);
+  unlink("unlinkread");
+  printf(1, "unlinkread ok\n");
+}
+
+void
+linktest(void)
+{
+  int fd;
+
+  printf(1, "linktest\n");
+
+  unlink("lf1");
+  unlink("lf2");
+
+  fd = open("lf1", O_CREATE|O_RDWR);
+  if(fd < 0){
+    printf(1, "create lf1 failed\n");
+    exit();
+  }
+  if(write(fd, "hello", 5) != 5){
+    printf(1, "write lf1 failed\n");
+    exit();
+  }
+  close(fd);
+
+  if(link("lf1", "lf2") < 0){
+    printf(1, "link lf1 lf2 failed\n");
+    exit();
+  }
+  unlink("lf1");
+
+  if(open("lf1", 0) >= 0){
+    printf(1, "unlinked lf1 but it is still there!\n");
+    exit();
+  }
+
+  fd = open("lf2", 0);
+  if(fd < 0){
+    printf(1, "open lf2 failed\n");
+    exit();
+  }
+  if(read(fd, buf, sizeof(buf)) != 5){
+    printf(1, "read lf2 failed\n");
+    exit();
+  }
+  close(fd);
+
+  if(link("lf2", "lf2") >= 0){
+    printf(1, "link lf2 lf2 succeeded! oops\n");
+    exit();
+  }
+
+  unlink("lf2");
+  if(link("lf2", "lf1") >= 0){
+    printf(1, "link non-existant succeeded! oops\n");
+    exit();
+  }
+
+  if(link(".", "lf1") >= 0){
+    printf(1, "link . lf1 succeeded! oops\n");
+    exit();
+  }
+
+  printf(1, "linktest ok\n");
+}
+
+// test concurrent create/link/unlink of the same file
+void
+concreate(void)
+{
+  char file[3];
+  int i, pid, n, fd;
+  char fa[40];
+  struct {
+    ushort inum;
+    char name[14];
+  } de;
+
+  printf(1, "concreate test\n");
+  file[0] = 'C';
+  file[2] = '\0';
+  for(i = 0; i < 40; i++){
+    file[1] = '0' + i;
+    unlink(file);
+    pid = fork();
+    if(pid && (i % 3) == 1){
+      link("C0", file);
+    } else if(pid == 0 && (i % 5) == 1){
+      link("C0", file);
+    } else {
+      fd = open(file, O_CREATE | O_RDWR);
+      if(fd < 0){
+        printf(1, "concreate create %s failed\n", file);
+        exit();
+      }
+      close(fd);
+    }
+    if(pid == 0)
+      exit();
+    else
+      wait();
+  }
+
+  memset(fa, 0, sizeof(fa));
+  fd = open(".", 0);
+  n = 0;
+  while(read(fd, &de, sizeof(de)) > 0){
+    if(de.inum == 0)
+      continue;
+    if(de.name[0] == 'C' && de.name[2] == '\0'){
+      i = de.name[1] - '0';
+      if(i < 0 || i >= sizeof(fa)){
+        printf(1, "concreate weird file %s\n", de.name);
+        exit();
+      }
+      if(fa[i]){
+        printf(1, "concreate duplicate file %s\n", de.name);
+        exit();
+      }
+      fa[i] = 1;
+      n++;
+    }
+  }
+  close(fd);
+
+  if(n != 40){
+    printf(1, "concreate not enough files in directory listing\n");
+    exit();
+  }
+
+  for(i = 0; i < 40; i++){
+    file[1] = '0' + i;
+    pid = fork();
+    if(pid < 0){
+      printf(1, "fork failed\n");
+      exit();
+    }
+    if(((i % 3) == 0 && pid == 0) ||
+       ((i % 3) == 1 && pid != 0)){
+      close(open(file, 0));
+      close(open(file, 0));
+      close(open(file, 0));
+      close(open(file, 0));
+    } else {
+      unlink(file);
+      unlink(file);
+      unlink(file);
+      unlink(file);
+    }
+    if(pid == 0)
+      exit();
+    else
+      wait();
+  }
+
+  printf(1, "concreate ok\n");
+}
+
+// another concurrent link/unlink/create test,
+// to look for deadlocks.
+void
+linkunlink()
+{
+  int pid, i;
+
+  printf(1, "linkunlink test\n");
+
+  unlink("x");
+  pid = fork();
+  if(pid < 0){
+    printf(1, "fork failed\n");
+    exit();
+  }
+
+  unsigned int x = (pid ? 1 : 97);
+  for(i = 0; i < 100; i++){
+    x = x * 1103515245 + 12345;
+    if((x % 3) == 0){
+      close(open("x", O_RDWR | O_CREATE));
+    } else if((x % 3) == 1){
+      link("cat", "x");
+    } else {
+      unlink("x");
+    }
+  }
+
+  if(pid)
+    wait();
+  else 
+    exit();
+
+  printf(1, "linkunlink ok\n");
+}
+
+// directory that uses indirect blocks
+void
+bigdir(void)
+{
+  int i, fd;
+  char name[10];
+
+  printf(1, "bigdir test\n");
+  unlink("bd");
+
+  fd = open("bd", O_CREATE);
+  if(fd < 0){
+    printf(1, "bigdir create failed\n");
+    exit();
+  }
+  close(fd);
+
+  for(i = 0; i < 500; i++){
+    name[0] = 'x';
+    name[1] = '0' + (i / 64);
+    name[2] = '0' + (i % 64);
+    name[3] = '\0';
+    if(link("bd", name) != 0){
+      printf(1, "bigdir link failed\n");
+      exit();
+    }
+  }
+
+  unlink("bd");
+  for(i = 0; i < 500; i++){
+    name[0] = 'x';
+    name[1] = '0' + (i / 64);
+    name[2] = '0' + (i % 64);
+    name[3] = '\0';
+    if(unlink(name) != 0){
+      printf(1, "bigdir unlink failed");
+      exit();
+    }
+  }
+
+  printf(1, "bigdir ok\n");
+}
+
+void
+subdir(void)
+{
+  int fd, cc;
+
+  printf(1, "subdir test\n");
+
+  unlink("ff");
+  if(mkdir("dd") != 0){
+    printf(1, "subdir mkdir dd failed\n");
+    exit();
+  }
+
+  fd = open("dd/ff", O_CREATE | O_RDWR);
+  if(fd < 0){
+    printf(1, "create dd/ff failed\n");
+    exit();
+  }
+  write(fd, "ff", 2);
+  close(fd);
+  
+  if(unlink("dd") >= 0){
+    printf(1, "unlink dd (non-empty dir) succeeded!\n");
+    exit();
+  }
+
+  if(mkdir("/dd/dd") != 0){
+    printf(1, "subdir mkdir dd/dd failed\n");
+    exit();
+  }
+
+  fd = open("dd/dd/ff", O_CREATE | O_RDWR);
+  if(fd < 0){
+    printf(1, "create dd/dd/ff failed\n");
+    exit();
+  }
+  write(fd, "FF", 2);
+  close(fd);
+
+  fd = open("dd/dd/../ff", 0);
+  if(fd < 0){
+    printf(1, "open dd/dd/../ff failed\n");
+    exit();
+  }
+  cc = read(fd, buf, sizeof(buf));
+  if(cc != 2 || buf[0] != 'f'){
+    printf(1, "dd/dd/../ff wrong content\n");
+    exit();
+  }
+  close(fd);
+
+  if(link("dd/dd/ff", "dd/dd/ffff") != 0){
+    printf(1, "link dd/dd/ff dd/dd/ffff failed\n");
+    exit();
+  }
+
+  if(unlink("dd/dd/ff") != 0){
+    printf(1, "unlink dd/dd/ff failed\n");
+    exit();
+  }
+  if(open("dd/dd/ff", O_RDONLY) >= 0){
+    printf(1, "open (unlinked) dd/dd/ff succeeded\n");
+    exit();
+  }
+
+  if(chdir("dd") != 0){
+    printf(1, "chdir dd failed\n");
+    exit();
+  }
+  if(chdir("dd/../../dd") != 0){
+    printf(1, "chdir dd/../../dd failed\n");
+    exit();
+  }
+  if(chdir("dd/../../../dd") != 0){
+    printf(1, "chdir dd/../../dd failed\n");
+    exit();
+  }
+  if(chdir("./..") != 0){
+    printf(1, "chdir ./.. failed\n");
+    exit();
+  }
+
+  fd = open("dd/dd/ffff", 0);
+  if(fd < 0){
+    printf(1, "open dd/dd/ffff failed\n");
+    exit();
+  }
+  if(read(fd, buf, sizeof(buf)) != 2){
+    printf(1, "read dd/dd/ffff wrong len\n");
+    exit();
+  }
+  close(fd);
+
+  if(open("dd/dd/ff", O_RDONLY) >= 0){
+    printf(1, "open (unlinked) dd/dd/ff succeeded!\n");
+    exit();
+  }
+
+  if(open("dd/ff/ff", O_CREATE|O_RDWR) >= 0){
+    printf(1, "create dd/ff/ff succeeded!\n");
+    exit();
+  }
+  if(open("dd/xx/ff", O_CREATE|O_RDWR) >= 0){
+    printf(1, "create dd/xx/ff succeeded!\n");
+    exit();
+  }
+  if(open("dd", O_CREATE) >= 0){
+    printf(1, "create dd succeeded!\n");
+    exit();
+  }
+  if(open("dd", O_RDWR) >= 0){
+    printf(1, "open dd rdwr succeeded!\n");
+    exit();
+  }
+  if(open("dd", O_WRONLY) >= 0){
+    printf(1, "open dd wronly succeeded!\n");
+    exit();
+  }
+  if(link("dd/ff/ff", "dd/dd/xx") == 0){
+    printf(1, "link dd/ff/ff dd/dd/xx succeeded!\n");
+    exit();
+  }
+  if(link("dd/xx/ff", "dd/dd/xx") == 0){
+    printf(1, "link dd/xx/ff dd/dd/xx succeeded!\n");
+    exit();
+  }
+  if(link("dd/ff", "dd/dd/ffff") == 0){
+    printf(1, "link dd/ff dd/dd/ffff succeeded!\n");
+    exit();
+  }
+  if(mkdir("dd/ff/ff") == 0){
+    printf(1, "mkdir dd/ff/ff succeeded!\n");
+    exit();
+  }
+  if(mkdir("dd/xx/ff") == 0){
+    printf(1, "mkdir dd/xx/ff succeeded!\n");
+    exit();
+  }
+  if(mkdir("dd/dd/ffff") == 0){
+    printf(1, "mkdir dd/dd/ffff succeeded!\n");
+    exit();
+  }
+  if(unlink("dd/xx/ff") == 0){
+    printf(1, "unlink dd/xx/ff succeeded!\n");
+    exit();
+  }
+  if(unlink("dd/ff/ff") == 0){
+    printf(1, "unlink dd/ff/ff succeeded!\n");
+    exit();
+  }
+  if(chdir("dd/ff") == 0){
+    printf(1, "chdir dd/ff succeeded!\n");
+    exit();
+  }
+  if(chdir("dd/xx") == 0){
+    printf(1, "chdir dd/xx succeeded!\n");
+    exit();
+  }
+
+  if(unlink("dd/dd/ffff") != 0){
+    printf(1, "unlink dd/dd/ff failed\n");
+    exit();
+  }
+  if(unlink("dd/ff") != 0){
+    printf(1, "unlink dd/ff failed\n");
+    exit();
+  }
+  if(unlink("dd") == 0){
+    printf(1, "unlink non-empty dd succeeded!\n");
+    exit();
+  }
+  if(unlink("dd/dd") < 0){
+    printf(1, "unlink dd/dd failed\n");
+    exit();
+  }
+  if(unlink("dd") < 0){
+    printf(1, "unlink dd failed\n");
+    exit();
+  }
+
+  printf(1, "subdir ok\n");
+}
+
+// test writes that are larger than the log.
+void
+bigwrite(void)
+{
+  int fd, sz;
+
+  printf(1, "bigwrite test\n");
+
+  unlink("bigwrite");
+  for(sz = 499; sz < 12*512; sz += 471){
+    fd = open("bigwrite", O_CREATE | O_RDWR);
+    if(fd < 0){
+      printf(1, "cannot create bigwrite\n");
+      exit();
+    }
+    int i;
+    for(i = 0; i < 2; i++){
+      int cc = write(fd, buf, sz);
+      if(cc != sz){
+        printf(1, "write(%d) ret %d\n", sz, cc);
+        exit();
+      }
+    }
+    close(fd);
+    unlink("bigwrite");
+  }
+
+  printf(1, "bigwrite ok\n");
+}
+
+void
+bigfile(void)
+{
+  int fd, i, total, cc;
+
+  printf(1, "bigfile test\n");
+
+  unlink("bigfile");
+  fd = open("bigfile", O_CREATE | O_RDWR);
+  if(fd < 0){
+    printf(1, "cannot create bigfile");
+    exit();
+  }
+  for(i = 0; i < 20; i++){
+    memset(buf, i, 600);
+    if(write(fd, buf, 600) != 600){
+      printf(1, "write bigfile failed\n");
+      exit();
+    }
+  }
+  close(fd);
+
+  fd = open("bigfile", 0);
+  if(fd < 0){
+    printf(1, "cannot open bigfile\n");
+    exit();
+  }
+  total = 0;
+  for(i = 0; ; i++){
+    cc = read(fd, buf, 300);
+    if(cc < 0){
+      printf(1, "read bigfile failed\n");
+      exit();
+    }
+    if(cc == 0)
+      break;
+    if(cc != 300){
+      printf(1, "short read bigfile\n");
+      exit();
+    }
+    if(buf[0] != i/2 || buf[299] != i/2){
+      printf(1, "read bigfile wrong data\n");
+      exit();
+    }
+    total += cc;
+  }
+  close(fd);
+  if(total != 20*600){
+    printf(1, "read bigfile wrong total\n");
+    exit();
+  }
+  unlink("bigfile");
+
+  printf(1, "bigfile test ok\n");
+}
+
+void
+fourteen(void)
+{
+  int fd;
+
+  // DIRSIZ is 14.
+  printf(1, "fourteen test\n");
+
+  if(mkdir("12345678901234") != 0){
+    printf(1, "mkdir 12345678901234 failed\n");
+    exit();
+  }
+  if(mkdir("12345678901234/123456789012345") != 0){
+    printf(1, "mkdir 12345678901234/123456789012345 failed\n");
+    exit();
+  }
+  fd = open("123456789012345/123456789012345/123456789012345", O_CREATE);
+  if(fd < 0){
+    printf(1, "create 123456789012345/123456789012345/123456789012345 failed\n");
+    exit();
+  }
+  close(fd);
+  fd = open("12345678901234/12345678901234/12345678901234", 0);
+  if(fd < 0){
+    printf(1, "open 12345678901234/12345678901234/12345678901234 failed\n");
+    exit();
+  }
+  close(fd);
+
+  if(mkdir("12345678901234/12345678901234") == 0){
+    printf(1, "mkdir 12345678901234/12345678901234 succeeded!\n");
+    exit();
+  }
+  if(mkdir("123456789012345/12345678901234") == 0){
+    printf(1, "mkdir 12345678901234/123456789012345 succeeded!\n");
+    exit();
+  }
+
+  printf(1, "fourteen ok\n");
+}
+
+void
+rmdot(void)
+{
+  printf(1, "rmdot test\n");
+  if(mkdir("dots") != 0){
+    printf(1, "mkdir dots failed\n");
+    exit();
+  }
+  if(chdir("dots") != 0){
+    printf(1, "chdir dots failed\n");
+    exit();
+  }
+  if(unlink(".") == 0){
+    printf(1, "rm . worked!\n");
+    exit();
+  }
+  if(unlink("..") == 0){
+    printf(1, "rm .. worked!\n");
+    exit();
+  }
+  if(chdir("/") != 0){
+    printf(1, "chdir / failed\n");
+    exit();
+  }
+  if(unlink("dots/.") == 0){
+    printf(1, "unlink dots/. worked!\n");
+    exit();
+  }
+  if(unlink("dots/..") == 0){
+    printf(1, "unlink dots/.. worked!\n");
+    exit();
+  }
+  if(unlink("dots") != 0){
+    printf(1, "unlink dots failed!\n");
+    exit();
+  }
+  printf(1, "rmdot ok\n");
+}
+
+void
+dirfile(void)
+{
+  int fd;
+
+  printf(1, "dir vs file\n");
+
+  fd = open("dirfile", O_CREATE);
+  if(fd < 0){
+    printf(1, "create dirfile failed\n");
+    exit();
+  }
+  close(fd);
+  if(chdir("dirfile") == 0){
+    printf(1, "chdir dirfile succeeded!\n");
+    exit();
+  }
+  fd = open("dirfile/xx", 0);
+  if(fd >= 0){
+    printf(1, "create dirfile/xx succeeded!\n");
+    exit();
+  }
+  fd = open("dirfile/xx", O_CREATE);
+  if(fd >= 0){
+    printf(1, "create dirfile/xx succeeded!\n");
+    exit();
+  }
+  if(mkdir("dirfile/xx") == 0){
+    printf(1, "mkdir dirfile/xx succeeded!\n");
+    exit();
+  }
+  if(unlink("dirfile/xx") == 0){
+    printf(1, "unlink dirfile/xx succeeded!\n");
+    exit();
+  }
+  if(link("README", "dirfile/xx") == 0){
+    printf(1, "link to dirfile/xx succeeded!\n");
+    exit();
+  }
+  if(unlink("dirfile") != 0){
+    printf(1, "unlink dirfile failed!\n");
+    exit();
+  }
+
+  fd = open(".", O_RDWR);
+  if(fd >= 0){
+    printf(1, "open . for writing succeeded!\n");
+    exit();
+  }
+  fd = open(".", 0);
+  if(write(fd, "x", 1) > 0){
+    printf(1, "write . succeeded!\n");
+    exit();
+  }
+  close(fd);
+
+  printf(1, "dir vs file OK\n");
+}
+
+// test that iput() is called at the end of _namei()
+void
+iref(void)
+{
+  int i, fd;
+
+  printf(1, "empty file name\n");
+
+  // the 50 is NINODE
+  for(i = 0; i < 50 + 1; i++){
+    if(mkdir("irefd") != 0){
+      printf(1, "mkdir irefd failed\n");
+      exit();
+    }
+    if(chdir("irefd") != 0){
+      printf(1, "chdir irefd failed\n");
+      exit();
+    }
+
+    mkdir("");
+    link("README", "");
+    fd = open("", O_CREATE);
+    if(fd >= 0)
+      close(fd);
+    fd = open("xx", O_CREATE);
+    if(fd >= 0)
+      close(fd);
+    unlink("xx");
+  }
+
+  chdir("/");
+  printf(1, "empty file name OK\n");
+}
+
+// test that fork fails gracefully
+// the forktest binary also does this, but it runs out of proc entries first.
+// inside the bigger usertests binary, we run out of memory first.
+void
+forktest(void)
+{
+  int n, pid;
+
+  printf(1, "fork test\n");
+
+  for(n=0; n<1000; n++){
+    pid = fork();
+    if(pid < 0)
+      break;
+    if(pid == 0)
+      exit();
+  }
+  
+  if(n == 1000){
+    printf(1, "fork claimed to work 1000 times!\n");
+    exit();
+  }
+  
+  for(; n > 0; n--){
+    if(wait() < 0){
+      printf(1, "wait stopped early\n");
+      exit();
+    }
+  }
+  
+  if(wait() != -1){
+    printf(1, "wait got too many\n");
+    exit();
+  }
+  
+  printf(1, "fork test OK\n");
+}
+
+void
+sbrktest(void)
+{
+  int fds[2], pid, pids[10], ppid;
+  char *a, *b, *c, *lastaddr, *oldbrk, *p, scratch;
+  uint amt;
+
+  printf(stdout, "sbrk test\n");
+  oldbrk = sbrk(0);
+
+  // can one sbrk() less than a page?
+  a = sbrk(0);
+  int i;
+  for(i = 0; i < 5000; i++){ 
+    b = sbrk(1);
+    if(b != a){
+      printf(stdout, "sbrk test failed %d %x %x\n", i, a, b);
+      exit();
+    }
+    *b = 1;
+    a = b + 1;
+  }
+  pid = fork();
+  if(pid < 0){
+    printf(stdout, "sbrk test fork failed\n");
+    exit();
+  }
+  c = sbrk(1);
+  c = sbrk(1);
+  if(c != a + 1){
+    printf(stdout, "sbrk test failed post-fork\n");
+    exit();
+  }
+  if(pid == 0)
+    exit();
+  wait();
+
+  // can one grow address space to something big?
+#define BIG (100*1024*1024)
+  a = sbrk(0);
+  amt = (BIG) - (uint)a;
+  p = sbrk(amt);
+  if (p != a) { 
+    printf(stdout, "sbrk test failed to grow big address space; enough phys mem?\n");
+    exit();
+  }
+  lastaddr = (char*) (BIG-1);
+  *lastaddr = 99;
+
+  // can one de-allocate?
+  a = sbrk(0);
+  c = sbrk(-4096);
+  if(c == (char*)0xffffffff){
+    printf(stdout, "sbrk could not deallocate\n");
+    exit();
+  }
+  c = sbrk(0);
+  if(c != a - 4096){
+    printf(stdout, "sbrk deallocation produced wrong address, a %x c %x\n", a, c);
+    exit();
+  }
+
+  // can one re-allocate that page?
+  a = sbrk(0);
+  c = sbrk(4096);
+  if(c != a || sbrk(0) != a + 4096){
+    printf(stdout, "sbrk re-allocation failed, a %x c %x\n", a, c);
+    exit();
+  }
+  if(*lastaddr == 99){
+    // should be zero
+    printf(stdout, "sbrk de-allocation didn't really deallocate\n");
+    exit();
+  }
+
+  a = sbrk(0);
+  c = sbrk(-(sbrk(0) - oldbrk));
+  if(c != a){
+    printf(stdout, "sbrk downsize failed, a %x c %x\n", a, c);
+    exit();
+  }
+  
+  // can we read the kernel's memory?
+  for(a = (char*)(KERNBASE); a < (char*) (KERNBASE+2000000); a += 50000){
+    ppid = getpid();
+    pid = fork();
+    if(pid < 0){
+      printf(stdout, "fork failed\n");
+      exit();
+    }
+    if(pid == 0){
+      printf(stdout, "oops could read %x = %x\n", a, *a);
+      kill(ppid);
+      exit();
+    }
+    wait();
+  }
+
+  // if we run the system out of memory, does it clean up the last
+  // failed allocation?
+  if(pipe(fds) != 0){
+    printf(1, "pipe() failed\n");
+    exit();
+  }
+  for(i = 0; i < sizeof(pids)/sizeof(pids[0]); i++){
+    if((pids[i] = fork()) == 0){
+      // allocate a lot of memory
+      sbrk(BIG - (uint)sbrk(0));
+      write(fds[1], "x", 1);
+      // sit around until killed
+      for(;;) sleep(1000);
+    }
+    if(pids[i] != -1)
+      read(fds[0], &scratch, 1);
+  }
+  // if those failed allocations freed up the pages they did allocate,
+  // we'll be able to allocate here
+  c = sbrk(4096);
+  for(i = 0; i < sizeof(pids)/sizeof(pids[0]); i++){
+    if(pids[i] == -1)
+      continue;
+    kill(pids[i]);
+    wait();
+  }
+  if(c == (char*)0xffffffff){
+    printf(stdout, "failed sbrk leaked memory\n");
+    exit();
+  }
+
+  if(sbrk(0) > oldbrk)
+    sbrk(-(sbrk(0) - oldbrk));
+
+  printf(stdout, "sbrk test OK\n");
+}
+
+void
+validateint(int *p)
+{
+  int res;
+  asm("mov %%esp, %%ebx\n\t"
+      "mov %3, %%esp\n\t"
+      "int %2\n\t"
+      "mov %%ebx, %%esp" :
+      "=a" (res) :
+      "a" (SYS_sleep), "n" (T_SYSCALL), "c" (p) :
+      "ebx");
+}
+
+void
+validatetest(void)
+{
+  int hi, pid;
+  uint p;
+
+  printf(stdout, "validate test\n");
+  hi = 1100*1024;
+
+  for(p = 0; p <= (uint)hi; p += 4096){
+    if((pid = fork()) == 0){
+      // try to crash the kernel by passing in a badly placed integer
+      validateint((int*)p);
+      exit();
+    }
+    sleep(0);
+    sleep(0);
+    kill(pid);
+    wait();
+
+    // try to crash the kernel by passing in a bad string pointer
+    if(link("nosuchfile", (char*)p) != -1){
+      printf(stdout, "link should not succeed\n");
+      exit();
+    }
+  }
+
+  printf(stdout, "validate ok\n");
+}
+
+// does unintialized data start out zero?
+char uninit[10000];
+void
+bsstest(void)
+{
+  int i;
+
+  printf(stdout, "bss test\n");
+  for(i = 0; i < sizeof(uninit); i++){
+    if(uninit[i] != '\0'){
+      printf(stdout, "bss test failed\n");
+      exit();
+    }
+  }
+  printf(stdout, "bss test ok\n");
+}
+
+// does exec return an error if the arguments
+// are larger than a page? or does it write
+// below the stack and wreck the instructions/data?
+void
+bigargtest(void)
+{
+  int pid, fd;
+
+  unlink("bigarg-ok");
+  pid = fork();
+  if(pid == 0){
+    static char *args[MAXARG];
+    int i;
+    for(i = 0; i < MAXARG-1; i++)
+      args[i] = "bigargs test: failed\n                                                                                                                                                                                                       ";
+    args[MAXARG-1] = 0;
+    printf(stdout, "bigarg test\n");
+    exec("echo", args);
+    printf(stdout, "bigarg test ok\n");
+    fd = open("bigarg-ok", O_CREATE);
+    close(fd);
+    exit();
+  } else if(pid < 0){
+    printf(stdout, "bigargtest: fork failed\n");
+    exit();
+  }
+  wait();
+  fd = open("bigarg-ok", 0);
+  if(fd < 0){
+    printf(stdout, "bigarg test failed!\n");
+    exit();
+  }
+  close(fd);
+  unlink("bigarg-ok");
+}
+
+// what happens when the file system runs out of blocks?
+// answer: balloc panics, so this test is not useful.
+void
+fsfull()
+{
+  int nfiles;
+  int fsblocks = 0;
+
+  printf(1, "fsfull test\n");
+
+  for(nfiles = 0; ; nfiles++){
+    char name[64];
+    name[0] = 'f';
+    name[1] = '0' + nfiles / 1000;
+    name[2] = '0' + (nfiles % 1000) / 100;
+    name[3] = '0' + (nfiles % 100) / 10;
+    name[4] = '0' + (nfiles % 10);
+    name[5] = '\0';
+    printf(1, "writing %s\n", name);
+    int fd = open(name, O_CREATE|O_RDWR);
+    if(fd < 0){
+      printf(1, "open %s failed\n", name);
+      break;
+    }
+    int total = 0;
+    while(1){
+      int cc = write(fd, buf, 512);
+      if(cc < 512)
+        break;
+      total += cc;
+      fsblocks++;
+    }
+    printf(1, "wrote %d bytes\n", total);
+    close(fd);
+    if(total == 0)
+      break;
+  }
+
+  while(nfiles >= 0){
+    char name[64];
+    name[0] = 'f';
+    name[1] = '0' + nfiles / 1000;
+    name[2] = '0' + (nfiles % 1000) / 100;
+    name[3] = '0' + (nfiles % 100) / 10;
+    name[4] = '0' + (nfiles % 10);
+    name[5] = '\0';
+    unlink(name);
+    nfiles--;
+  }
+
+  printf(1, "fsfull test finished\n");
+}
+
+unsigned long randstate = 1;
+unsigned int
+rand()
+{
+  randstate = randstate * 1664525 + 1013904223;
+  return randstate;
+}
+
+int
+main(int argc, char *argv[])
+{
+  printf(1, "usertests starting\n");
+
+  if(open("usertests.ran", 0) >= 0){
+    printf(1, "already ran user tests -- rebuild fs.img\n");
+    exit();
+  }
+  close(open("usertests.ran", O_CREATE));
+
+  createdelete();
+  linkunlink();
+  concreate();
+  fourfiles();
+  sharedfd();
+
+  bigargtest();
+  bigwrite();
+  bigargtest();
+  bsstest();
+  sbrktest();
+  validatetest();
+
+  opentest();
+  writetest();
+  writetest1();
+  createtest();
+
+  openiputtest();
+  exitiputtest();
+  iputtest();
+
+  mem();
+  pipe1();
+  preempt();
+  exitwait();
+
+  rmdot();
+  fourteen();
+  bigfile();
+  subdir();
+  linktest();
+  unlinkread();
+  dirfile();
+  iref();
+  forktest();
+  bigdir(); // slow
+  exectest();
+
+  exit();
+}
diff --git a/usys.S b/usys.S
new file mode 100644
index 0000000..8bfd8a1
--- /dev/null
+++ b/usys.S
@@ -0,0 +1,31 @@
+#include "syscall.h"
+#include "traps.h"
+
+#define SYSCALL(name) \
+  .globl name; \
+  name: \
+    movl $SYS_ ## name, %eax; \
+    int $T_SYSCALL; \
+    ret
+
+SYSCALL(fork)
+SYSCALL(exit)
+SYSCALL(wait)
+SYSCALL(pipe)
+SYSCALL(read)
+SYSCALL(write)
+SYSCALL(close)
+SYSCALL(kill)
+SYSCALL(exec)
+SYSCALL(open)
+SYSCALL(mknod)
+SYSCALL(unlink)
+SYSCALL(fstat)
+SYSCALL(link)
+SYSCALL(mkdir)
+SYSCALL(chdir)
+SYSCALL(dup)
+SYSCALL(getpid)
+SYSCALL(sbrk)
+SYSCALL(sleep)
+SYSCALL(uptime)
diff --git a/vectors.pl b/vectors.pl
new file mode 100755
index 0000000..57b49dd
--- /dev/null
+++ b/vectors.pl
@@ -0,0 +1,47 @@
+#!/usr/bin/perl -w
+
+# Generate vectors.S, the trap/interrupt entry points.
+# There has to be one entry point per interrupt number
+# since otherwise there's no way for trap() to discover
+# the interrupt number.
+
+print "# generated by vectors.pl - do not edit\n";
+print "# handlers\n";
+print ".globl alltraps\n";
+for(my $i = 0; $i < 256; $i++){
+    print ".globl vector$i\n";
+    print "vector$i:\n";
+    if(!($i == 8 || ($i >= 10 && $i <= 14) || $i == 17)){
+        print "  pushl \$0\n";
+    }
+    print "  pushl \$$i\n";
+    print "  jmp alltraps\n";
+}
+
+print "\n# vector table\n";
+print ".data\n";
+print ".globl vectors\n";
+print "vectors:\n";
+for(my $i = 0; $i < 256; $i++){
+    print "  .long vector$i\n";
+}
+
+# sample output:
+#   # handlers
+#   .globl alltraps
+#   .globl vector0
+#   vector0:
+#     pushl $0
+#     pushl $0
+#     jmp alltraps
+#   ...
+#   
+#   # vector table
+#   .data
+#   .globl vectors
+#   vectors:
+#     .long vector0
+#     .long vector1
+#     .long vector2
+#   ...
+
diff --git a/vm.c b/vm.c
new file mode 100644
index 0000000..5326d14
--- /dev/null
+++ b/vm.c
@@ -0,0 +1,386 @@
+#include "param.h"
+#include "types.h"
+#include "defs.h"
+#include "x86.h"
+#include "memlayout.h"
+#include "mmu.h"
+#include "proc.h"
+#include "elf.h"
+
+extern char data[];  // defined by kernel.ld
+pde_t *kpgdir;  // for use in scheduler()
+struct segdesc gdt[NSEGS];
+
+// Set up CPU's kernel segment descriptors.
+// Run once on entry on each CPU.
+void
+seginit(void)
+{
+  struct cpu *c;
+
+  // Map "logical" addresses to virtual addresses using identity map.
+  // Cannot share a CODE descriptor for both kernel and user
+  // because it would have to have DPL_USR, but the CPU forbids
+  // an interrupt from CPL=0 to DPL=3.
+  c = &cpus[cpunum()];
+  c->gdt[SEG_KCODE] = SEG(STA_X|STA_R, 0, 0xffffffff, 0);
+  c->gdt[SEG_KDATA] = SEG(STA_W, 0, 0xffffffff, 0);
+  c->gdt[SEG_UCODE] = SEG(STA_X|STA_R, 0, 0xffffffff, DPL_USER);
+  c->gdt[SEG_UDATA] = SEG(STA_W, 0, 0xffffffff, DPL_USER);
+
+  // Map cpu, and curproc
+  c->gdt[SEG_KCPU] = SEG(STA_W, &c->cpu, 8, 0);
+
+  lgdt(c->gdt, sizeof(c->gdt));
+  loadgs(SEG_KCPU << 3);
+  
+  // Initialize cpu-local storage.
+  cpu = c;
+  proc = 0;
+}
+
+// Return the address of the PTE in page table pgdir
+// that corresponds to virtual address va.  If alloc!=0,
+// create any required page table pages.
+static pte_t *
+walkpgdir(pde_t *pgdir, const void *va, int alloc)
+{
+  pde_t *pde;
+  pte_t *pgtab;
+
+  pde = &pgdir[PDX(va)];
+  if(*pde & PTE_P){
+    pgtab = (pte_t*)p2v(PTE_ADDR(*pde));
+  } else {
+    if(!alloc || (pgtab = (pte_t*)kalloc()) == 0)
+      return 0;
+    // Make sure all those PTE_P bits are zero.
+    memset(pgtab, 0, PGSIZE);
+    // The permissions here are overly generous, but they can
+    // be further restricted by the permissions in the page table 
+    // entries, if necessary.
+    *pde = v2p(pgtab) | PTE_P | PTE_W | PTE_U;
+  }
+  return &pgtab[PTX(va)];
+}
+
+// Create PTEs for virtual addresses starting at va that refer to
+// physical addresses starting at pa. va and size might not
+// be page-aligned.
+static int
+mappages(pde_t *pgdir, void *va, uint size, uint pa, int perm)
+{
+  char *a, *last;
+  pte_t *pte;
+  
+  a = (char*)PGROUNDDOWN((uint)va);
+  last = (char*)PGROUNDDOWN(((uint)va) + size - 1);
+  for(;;){
+    if((pte = walkpgdir(pgdir, a, 1)) == 0)
+      return -1;
+    if(*pte & PTE_P)
+      panic("remap");
+    *pte = pa | perm | PTE_P;
+    if(a == last)
+      break;
+    a += PGSIZE;
+    pa += PGSIZE;
+  }
+  return 0;
+}
+
+// There is one page table per process, plus one that's used when
+// a CPU is not running any process (kpgdir). The kernel uses the
+// current process's page table during system calls and interrupts;
+// page protection bits prevent user code from using the kernel's
+// mappings.
+// 
+// setupkvm() and exec() set up every page table like this:
+//
+//   0..KERNBASE: user memory (text+data+stack+heap), mapped to
+//                phys memory allocated by the kernel
+//   KERNBASE..KERNBASE+EXTMEM: mapped to 0..EXTMEM (for I/O space)
+//   KERNBASE+EXTMEM..data: mapped to EXTMEM..V2P(data)
+//                for the kernel's instructions and r/o data
+//   data..KERNBASE+PHYSTOP: mapped to V2P(data)..PHYSTOP, 
+//                                  rw data + free physical memory
+//   0xfe000000..0: mapped direct (devices such as ioapic)
+//
+// The kernel allocates physical memory for its heap and for user memory
+// between V2P(end) and the end of physical memory (PHYSTOP)
+// (directly addressable from end..P2V(PHYSTOP)).
+
+// This table defines the kernel's mappings, which are present in
+// every process's page table.
+static struct kmap {
+  void *virt;
+  uint phys_start;
+  uint phys_end;
+  int perm;
+} kmap[] = {
+ { (void*)KERNBASE, 0,             EXTMEM,    PTE_W}, // I/O space
+ { (void*)KERNLINK, V2P(KERNLINK), V2P(data), 0},     // kern text+rodata
+ { (void*)data,     V2P(data),     PHYSTOP,   PTE_W}, // kern data+memory
+ { (void*)DEVSPACE, DEVSPACE,      0,         PTE_W}, // more devices
+};
+
+// Set up kernel part of a page table.
+pde_t*
+setupkvm(void)
+{
+  pde_t *pgdir;
+  struct kmap *k;
+
+  if((pgdir = (pde_t*)kalloc()) == 0)
+    return 0;
+  memset(pgdir, 0, PGSIZE);
+  if (p2v(PHYSTOP) > (void*)DEVSPACE)
+    panic("PHYSTOP too high");
+  for(k = kmap; k < &kmap[NELEM(kmap)]; k++)
+    if(mappages(pgdir, k->virt, k->phys_end - k->phys_start, 
+                (uint)k->phys_start, k->perm) < 0)
+      return 0;
+  return pgdir;
+}
+
+// Allocate one page table for the machine for the kernel address
+// space for scheduler processes.
+void
+kvmalloc(void)
+{
+  kpgdir = setupkvm();
+  switchkvm();
+}
+
+// Switch h/w page table register to the kernel-only page table,
+// for when no process is running.
+void
+switchkvm(void)
+{
+  lcr3(v2p(kpgdir));   // switch to the kernel page table
+}
+
+// Switch TSS and h/w page table to correspond to process p.
+void
+switchuvm(struct proc *p)
+{
+  pushcli();
+  cpu->gdt[SEG_TSS] = SEG16(STS_T32A, &cpu->ts, sizeof(cpu->ts)-1, 0);
+  cpu->gdt[SEG_TSS].s = 0;
+  cpu->ts.ss0 = SEG_KDATA << 3;
+  cpu->ts.esp0 = (uint)proc->kstack + KSTACKSIZE;
+  ltr(SEG_TSS << 3);
+  if(p->pgdir == 0)
+    panic("switchuvm: no pgdir");
+  lcr3(v2p(p->pgdir));  // switch to new address space
+  popcli();
+}
+
+// Load the initcode into address 0 of pgdir.
+// sz must be less than a page.
+void
+inituvm(pde_t *pgdir, char *init, uint sz)
+{
+  char *mem;
+  
+  if(sz >= PGSIZE)
+    panic("inituvm: more than a page");
+  mem = kalloc();
+  memset(mem, 0, PGSIZE);
+  mappages(pgdir, 0, PGSIZE, v2p(mem), PTE_W|PTE_U);
+  memmove(mem, init, sz);
+}
+
+// Load a program segment into pgdir.  addr must be page-aligned
+// and the pages from addr to addr+sz must already be mapped.
+int
+loaduvm(pde_t *pgdir, char *addr, struct inode *ip, uint offset, uint sz)
+{
+  uint i, pa, n;
+  pte_t *pte;
+
+  if((uint) addr % PGSIZE != 0)
+    panic("loaduvm: addr must be page aligned");
+  for(i = 0; i < sz; i += PGSIZE){
+    if((pte = walkpgdir(pgdir, addr+i, 0)) == 0)
+      panic("loaduvm: address should exist");
+    pa = PTE_ADDR(*pte);
+    if(sz - i < PGSIZE)
+      n = sz - i;
+    else
+      n = PGSIZE;
+    if(readi(ip, p2v(pa), offset+i, n) != n)
+      return -1;
+  }
+  return 0;
+}
+
+// Allocate page tables and physical memory to grow process from oldsz to
+// newsz, which need not be page aligned.  Returns new size or 0 on error.
+int
+allocuvm(pde_t *pgdir, uint oldsz, uint newsz)
+{
+  char *mem;
+  uint a;
+
+  if(newsz >= KERNBASE)
+    return 0;
+  if(newsz < oldsz)
+    return oldsz;
+
+  a = PGROUNDUP(oldsz);
+  for(; a < newsz; a += PGSIZE){
+    mem = kalloc();
+    if(mem == 0){
+      cprintf("allocuvm out of memory\n");
+      deallocuvm(pgdir, newsz, oldsz);
+      return 0;
+    }
+    memset(mem, 0, PGSIZE);
+    mappages(pgdir, (char*)a, PGSIZE, v2p(mem), PTE_W|PTE_U);
+  }
+  return newsz;
+}
+
+// Deallocate user pages to bring the process size from oldsz to
+// newsz.  oldsz and newsz need not be page-aligned, nor does newsz
+// need to be less than oldsz.  oldsz can be larger than the actual
+// process size.  Returns the new process size.
+int
+deallocuvm(pde_t *pgdir, uint oldsz, uint newsz)
+{
+  pte_t *pte;
+  uint a, pa;
+
+  if(newsz >= oldsz)
+    return oldsz;
+
+  a = PGROUNDUP(newsz);
+  for(; a  < oldsz; a += PGSIZE){
+    pte = walkpgdir(pgdir, (char*)a, 0);
+    if(!pte)
+      a += (NPTENTRIES - 1) * PGSIZE;
+    else if((*pte & PTE_P) != 0){
+      pa = PTE_ADDR(*pte);
+      if(pa == 0)
+        panic("kfree");
+      char *v = p2v(pa);
+      kfree(v);
+      *pte = 0;
+    }
+  }
+  return newsz;
+}
+
+// Free a page table and all the physical memory pages
+// in the user part.
+void
+freevm(pde_t *pgdir)
+{
+  uint i;
+
+  if(pgdir == 0)
+    panic("freevm: no pgdir");
+  deallocuvm(pgdir, KERNBASE, 0);
+  for(i = 0; i < NPDENTRIES; i++){
+    if(pgdir[i] & PTE_P){
+      char * v = p2v(PTE_ADDR(pgdir[i]));
+      kfree(v);
+    }
+  }
+  kfree((char*)pgdir);
+}
+
+// Clear PTE_U on a page. Used to create an inaccessible
+// page beneath the user stack.
+void
+clearpteu(pde_t *pgdir, char *uva)
+{
+  pte_t *pte;
+
+  pte = walkpgdir(pgdir, uva, 0);
+  if(pte == 0)
+    panic("clearpteu");
+  *pte &= ~PTE_U;
+}
+
+// Given a parent process's page table, create a copy
+// of it for a child.
+pde_t*
+copyuvm(pde_t *pgdir, uint sz)
+{
+  pde_t *d;
+  pte_t *pte;
+  uint pa, i, flags;
+  char *mem;
+
+  if((d = setupkvm()) == 0)
+    return 0;
+  for(i = 0; i < sz; i += PGSIZE){
+    if((pte = walkpgdir(pgdir, (void *) i, 0)) == 0)
+      panic("copyuvm: pte should exist");
+    if(!(*pte & PTE_P))
+      panic("copyuvm: page not present");
+    pa = PTE_ADDR(*pte);
+    flags = PTE_FLAGS(*pte);
+    if((mem = kalloc()) == 0)
+      goto bad;
+    memmove(mem, (char*)p2v(pa), PGSIZE);
+    if(mappages(d, (void*)i, PGSIZE, v2p(mem), flags) < 0)
+      goto bad;
+  }
+  return d;
+
+bad:
+  freevm(d);
+  return 0;
+}
+
+//PAGEBREAK!
+// Map user virtual address to kernel address.
+char*
+uva2ka(pde_t *pgdir, char *uva)
+{
+  pte_t *pte;
+
+  pte = walkpgdir(pgdir, uva, 0);
+  if((*pte & PTE_P) == 0)
+    return 0;
+  if((*pte & PTE_U) == 0)
+    return 0;
+  return (char*)p2v(PTE_ADDR(*pte));
+}
+
+// Copy len bytes from p to user address va in page table pgdir.
+// Most useful when pgdir is not the current page table.
+// uva2ka ensures this only works for PTE_U pages.
+int
+copyout(pde_t *pgdir, uint va, void *p, uint len)
+{
+  char *buf, *pa0;
+  uint n, va0;
+
+  buf = (char*)p;
+  while(len > 0){
+    va0 = (uint)PGROUNDDOWN(va);
+    pa0 = uva2ka(pgdir, (char*)va0);
+    if(pa0 == 0)
+      return -1;
+    n = PGSIZE - (va - va0);
+    if(n > len)
+      n = len;
+    memmove(pa0 + (va - va0), buf, n);
+    len -= n;
+    buf += n;
+    va = va0 + PGSIZE;
+  }
+  return 0;
+}
+
+//PAGEBREAK!
+// Blank page.
+//PAGEBREAK!
+// Blank page.
+//PAGEBREAK!
+// Blank page.
+
diff --git a/wc.c b/wc.c
new file mode 100644
index 0000000..d6a54df
--- /dev/null
+++ b/wc.c
@@ -0,0 +1,54 @@
+#include "types.h"
+#include "stat.h"
+#include "user.h"
+
+char buf[512];
+
+void
+wc(int fd, char *name)
+{
+  int i, n;
+  int l, w, c, inword;
+
+  l = w = c = 0;
+  inword = 0;
+  while((n = read(fd, buf, sizeof(buf))) > 0){
+    for(i=0; i<n; i++){
+      c++;
+      if(buf[i] == '\n')
+        l++;
+      if(strchr(" \r\t\n\v", buf[i]))
+        inword = 0;
+      else if(!inword){
+        w++;
+        inword = 1;
+      }
+    }
+  }
+  if(n < 0){
+    printf(1, "wc: read error\n");
+    exit();
+  }
+  printf(1, "%d %d %d %s\n", l, w, c, name);
+}
+
+int
+main(int argc, char *argv[])
+{
+  int fd, i;
+
+  if(argc <= 1){
+    wc(0, "");
+    exit();
+  }
+
+  for(i = 1; i < argc; i++){
+    if((fd = open(argv[i], 0)) < 0){
+      printf(1, "wc: cannot open %s\n", argv[i]);
+      exit();
+    }
+    wc(fd, argv[i]);
+    close(fd);
+  }
+  exit();
+}
diff --git a/x86.h b/x86.h
new file mode 100644
index 0000000..3949900
--- /dev/null
+++ b/x86.h
@@ -0,0 +1,183 @@
+// Routines to let C code use special x86 instructions.
+
+static inline uchar
+inb(ushort port)
+{
+  uchar data;
+
+  asm volatile("in %1,%0" : "=a" (data) : "d" (port));
+  return data;
+}
+
+static inline void
+insl(int port, void *addr, int cnt)
+{
+  asm volatile("cld; rep insl" :
+               "=D" (addr), "=c" (cnt) :
+               "d" (port), "0" (addr), "1" (cnt) :
+               "memory", "cc");
+}
+
+static inline void
+outb(ushort port, uchar data)
+{
+  asm volatile("out %0,%1" : : "a" (data), "d" (port));
+}
+
+static inline void
+outw(ushort port, ushort data)
+{
+  asm volatile("out %0,%1" : : "a" (data), "d" (port));
+}
+
+static inline void
+outsl(int port, const void *addr, int cnt)
+{
+  asm volatile("cld; rep outsl" :
+               "=S" (addr), "=c" (cnt) :
+               "d" (port), "0" (addr), "1" (cnt) :
+               "cc");
+}
+
+static inline void
+stosb(void *addr, int data, int cnt)
+{
+  asm volatile("cld; rep stosb" :
+               "=D" (addr), "=c" (cnt) :
+               "0" (addr), "1" (cnt), "a" (data) :
+               "memory", "cc");
+}
+
+static inline void
+stosl(void *addr, int data, int cnt)
+{
+  asm volatile("cld; rep stosl" :
+               "=D" (addr), "=c" (cnt) :
+               "0" (addr), "1" (cnt), "a" (data) :
+               "memory", "cc");
+}
+
+struct segdesc;
+
+static inline void
+lgdt(struct segdesc *p, int size)
+{
+  volatile ushort pd[3];
+
+  pd[0] = size-1;
+  pd[1] = (uint)p;
+  pd[2] = (uint)p >> 16;
+
+  asm volatile("lgdt (%0)" : : "r" (pd));
+}
+
+struct gatedesc;
+
+static inline void
+lidt(struct gatedesc *p, int size)
+{
+  volatile ushort pd[3];
+
+  pd[0] = size-1;
+  pd[1] = (uint)p;
+  pd[2] = (uint)p >> 16;
+
+  asm volatile("lidt (%0)" : : "r" (pd));
+}
+
+static inline void
+ltr(ushort sel)
+{
+  asm volatile("ltr %0" : : "r" (sel));
+}
+
+static inline uint
+readeflags(void)
+{
+  uint eflags;
+  asm volatile("pushfl; popl %0" : "=r" (eflags));
+  return eflags;
+}
+
+static inline void
+loadgs(ushort v)
+{
+  asm volatile("movw %0, %%gs" : : "r" (v));
+}
+
+static inline void
+cli(void)
+{
+  asm volatile("cli");
+}
+
+static inline void
+sti(void)
+{
+  asm volatile("sti");
+}
+
+static inline uint
+xchg(volatile uint *addr, uint newval)
+{
+  uint result;
+  
+  // The + in "+m" denotes a read-modify-write operand.
+  asm volatile("lock; xchgl %0, %1" :
+               "+m" (*addr), "=a" (result) :
+               "1" (newval) :
+               "cc");
+  return result;
+}
+
+static inline uint
+rcr2(void)
+{
+  uint val;
+  asm volatile("movl %%cr2,%0" : "=r" (val));
+  return val;
+}
+
+static inline void
+lcr3(uint val) 
+{
+  asm volatile("movl %0,%%cr3" : : "r" (val));
+}
+
+//PAGEBREAK: 36
+// Layout of the trap frame built on the stack by the
+// hardware and by trapasm.S, and passed to trap().
+struct trapframe {
+  // registers as pushed by pusha
+  uint edi;
+  uint esi;
+  uint ebp;
+  uint oesp;      // useless & ignored
+  uint ebx;
+  uint edx;
+  uint ecx;
+  uint eax;
+
+  // rest of trap frame
+  ushort gs;
+  ushort padding1;
+  ushort fs;
+  ushort padding2;
+  ushort es;
+  ushort padding3;
+  ushort ds;
+  ushort padding4;
+  uint trapno;
+
+  // below here defined by x86 hardware
+  uint err;
+  uint eip;
+  ushort cs;
+  ushort padding5;
+  uint eflags;
+
+  // below here only when crossing rings, such as from user to kernel
+  uint esp;
+  ushort ss;
+  ushort padding6;
+};
diff --git a/xv6/.cproject b/xv6/.cproject
deleted file mode 100644
index b76a808..0000000
--- a/xv6/.cproject
+++ /dev/null
@@ -1,117 +0,0 @@
-<?xml version="1.0" encoding="UTF-8" standalone="no"?>
-<?fileVersion 4.0.0?><cproject storage_type_id="org.eclipse.cdt.core.XmlProjectDescriptionStorage">
-	<storageModule moduleId="org.eclipse.cdt.core.settings">
-		<cconfiguration id="cdt.managedbuild.config.gnu.cross.exe.debug.1785693045">
-			<storageModule buildSystemId="org.eclipse.cdt.managedbuilder.core.configurationDataProvider" id="cdt.managedbuild.config.gnu.cross.exe.debug.1785693045" moduleId="org.eclipse.cdt.core.settings" name="Debug">
-				<externalSettings/>
-				<extensions>
-					<extension id="org.eclipse.cdt.core.GmakeErrorParser" point="org.eclipse.cdt.core.ErrorParser"/>
-					<extension id="org.eclipse.cdt.core.CWDLocator" point="org.eclipse.cdt.core.ErrorParser"/>
-					<extension id="org.eclipse.cdt.core.GCCErrorParser" point="org.eclipse.cdt.core.ErrorParser"/>
-					<extension id="org.eclipse.cdt.core.GASErrorParser" point="org.eclipse.cdt.core.ErrorParser"/>
-					<extension id="org.eclipse.cdt.core.GLDErrorParser" point="org.eclipse.cdt.core.ErrorParser"/>
-					<extension id="org.eclipse.cdt.core.ELF" point="org.eclipse.cdt.core.BinaryParser"/>
-				</extensions>
-			</storageModule>
-			<storageModule moduleId="cdtBuildSystem" version="4.0.0">
-				<configuration artifactName="${ProjName}" buildArtefactType="org.eclipse.cdt.build.core.buildArtefactType.exe" buildProperties="org.eclipse.cdt.build.core.buildType=org.eclipse.cdt.build.core.buildType.debug,org.eclipse.cdt.build.core.buildArtefactType=org.eclipse.cdt.build.core.buildArtefactType.exe" cleanCommand="rm -rf" description="" id="cdt.managedbuild.config.gnu.cross.exe.debug.1785693045" name="Debug" parent="cdt.managedbuild.config.gnu.cross.exe.debug">
-					<folderInfo id="cdt.managedbuild.config.gnu.cross.exe.debug.1785693045." name="/" resourcePath="">
-						<toolChain id="cdt.managedbuild.toolchain.gnu.cross.exe.debug.716320894" name="Cross GCC" superClass="cdt.managedbuild.toolchain.gnu.cross.exe.debug">
-							<targetPlatform archList="all" binaryParser="org.eclipse.cdt.core.ELF" id="cdt.managedbuild.targetPlatform.gnu.cross.1145229834" isAbstract="false" osList="all" superClass="cdt.managedbuild.targetPlatform.gnu.cross"/>
-							<builder arguments="clean qemu SCHEDFLAG=DEFAULT" buildPath="${workspace_loc:/xv6/Debug}" command="make" enabledIncrementalBuild="true" id="cdt.managedbuild.builder.gnu.cross.1560635541" incrementalBuildTarget="" keepEnvironmentInBuildfile="false" managedBuildOn="false" name="Gnu Make Builder" superClass="cdt.managedbuild.builder.gnu.cross"/>
-							<tool id="cdt.managedbuild.tool.gnu.cross.c.compiler.310227302" name="Cross GCC Compiler" superClass="cdt.managedbuild.tool.gnu.cross.c.compiler">
-								<option defaultValue="gnu.c.optimization.level.none" id="gnu.c.compiler.option.optimization.level.1132006865" name="Optimization Level" superClass="gnu.c.compiler.option.optimization.level" valueType="enumerated"/>
-								<option id="gnu.c.compiler.option.debugging.level.559181073" name="Debug Level" superClass="gnu.c.compiler.option.debugging.level" value="gnu.c.debugging.level.max" valueType="enumerated"/>
-								<inputType id="cdt.managedbuild.tool.gnu.c.compiler.input.62253759" superClass="cdt.managedbuild.tool.gnu.c.compiler.input"/>
-							</tool>
-							<tool id="cdt.managedbuild.tool.gnu.cross.cpp.compiler.397081983" name="Cross G++ Compiler" superClass="cdt.managedbuild.tool.gnu.cross.cpp.compiler">
-								<option id="gnu.cpp.compiler.option.optimization.level.2107611325" name="Optimization Level" superClass="gnu.cpp.compiler.option.optimization.level" value="gnu.cpp.compiler.optimization.level.none" valueType="enumerated"/>
-								<option id="gnu.cpp.compiler.option.debugging.level.403101444" name="Debug Level" superClass="gnu.cpp.compiler.option.debugging.level" value="gnu.cpp.compiler.debugging.level.max" valueType="enumerated"/>
-								<inputType id="cdt.managedbuild.tool.gnu.cpp.compiler.input.720809752" superClass="cdt.managedbuild.tool.gnu.cpp.compiler.input"/>
-							</tool>
-							<tool id="cdt.managedbuild.tool.gnu.cross.c.linker.1074774993" name="Cross GCC Linker" superClass="cdt.managedbuild.tool.gnu.cross.c.linker"/>
-							<tool id="cdt.managedbuild.tool.gnu.cross.cpp.linker.1685084062" name="Cross G++ Linker" superClass="cdt.managedbuild.tool.gnu.cross.cpp.linker">
-								<inputType id="cdt.managedbuild.tool.gnu.cpp.linker.input.636941533" superClass="cdt.managedbuild.tool.gnu.cpp.linker.input">
-									<additionalInput kind="additionalinputdependency" paths="$(USER_OBJS)"/>
-									<additionalInput kind="additionalinput" paths="$(LIBS)"/>
-								</inputType>
-							</tool>
-							<tool id="cdt.managedbuild.tool.gnu.cross.archiver.713244021" name="Cross GCC Archiver" superClass="cdt.managedbuild.tool.gnu.cross.archiver"/>
-							<tool id="cdt.managedbuild.tool.gnu.cross.assembler.1700540333" name="Cross GCC Assembler" superClass="cdt.managedbuild.tool.gnu.cross.assembler">
-								<inputType id="cdt.managedbuild.tool.gnu.assembler.input.1242256278" superClass="cdt.managedbuild.tool.gnu.assembler.input"/>
-							</tool>
-						</toolChain>
-					</folderInfo>
-				</configuration>
-			</storageModule>
-			<storageModule moduleId="org.eclipse.cdt.core.externalSettings"/>
-		</cconfiguration>
-		<cconfiguration id="cdt.managedbuild.config.gnu.cross.exe.release.1272920932">
-			<storageModule buildSystemId="org.eclipse.cdt.managedbuilder.core.configurationDataProvider" id="cdt.managedbuild.config.gnu.cross.exe.release.1272920932" moduleId="org.eclipse.cdt.core.settings" name="Release">
-				<externalSettings/>
-				<extensions>
-					<extension id="org.eclipse.cdt.core.GmakeErrorParser" point="org.eclipse.cdt.core.ErrorParser"/>
-					<extension id="org.eclipse.cdt.core.CWDLocator" point="org.eclipse.cdt.core.ErrorParser"/>
-					<extension id="org.eclipse.cdt.core.GCCErrorParser" point="org.eclipse.cdt.core.ErrorParser"/>
-					<extension id="org.eclipse.cdt.core.GASErrorParser" point="org.eclipse.cdt.core.ErrorParser"/>
-					<extension id="org.eclipse.cdt.core.GLDErrorParser" point="org.eclipse.cdt.core.ErrorParser"/>
-					<extension id="org.eclipse.cdt.core.ELF" point="org.eclipse.cdt.core.BinaryParser"/>
-				</extensions>
-			</storageModule>
-			<storageModule moduleId="cdtBuildSystem" version="4.0.0">
-				<configuration artifactName="${ProjName}" buildArtefactType="org.eclipse.cdt.build.core.buildArtefactType.exe" buildProperties="org.eclipse.cdt.build.core.buildType=org.eclipse.cdt.build.core.buildType.release,org.eclipse.cdt.build.core.buildArtefactType=org.eclipse.cdt.build.core.buildArtefactType.exe" cleanCommand="rm -rf" description="" id="cdt.managedbuild.config.gnu.cross.exe.release.1272920932" name="Release" parent="cdt.managedbuild.config.gnu.cross.exe.release">
-					<folderInfo id="cdt.managedbuild.config.gnu.cross.exe.release.1272920932." name="/" resourcePath="">
-						<toolChain id="cdt.managedbuild.toolchain.gnu.cross.exe.release.1091058645" name="Cross GCC" superClass="cdt.managedbuild.toolchain.gnu.cross.exe.release">
-							<targetPlatform archList="all" binaryParser="org.eclipse.cdt.core.ELF" id="cdt.managedbuild.targetPlatform.gnu.cross.1668522315" isAbstract="false" osList="all" superClass="cdt.managedbuild.targetPlatform.gnu.cross"/>
-							<builder buildPath="${workspace_loc:/xv6/Release}" id="cdt.managedbuild.builder.gnu.cross.942710131" managedBuildOn="true" name="Gnu Make Builder.Release" superClass="cdt.managedbuild.builder.gnu.cross"/>
-							<tool id="cdt.managedbuild.tool.gnu.cross.c.compiler.1712097346" name="Cross GCC Compiler" superClass="cdt.managedbuild.tool.gnu.cross.c.compiler">
-								<option defaultValue="gnu.c.optimization.level.most" id="gnu.c.compiler.option.optimization.level.1195342129" superClass="gnu.c.compiler.option.optimization.level" valueType="enumerated"/>
-								<option id="gnu.c.compiler.option.debugging.level.1322710753" superClass="gnu.c.compiler.option.debugging.level" value="gnu.c.debugging.level.none" valueType="enumerated"/>
-								<inputType id="cdt.managedbuild.tool.gnu.c.compiler.input.1396171079" superClass="cdt.managedbuild.tool.gnu.c.compiler.input"/>
-							</tool>
-							<tool id="cdt.managedbuild.tool.gnu.cross.cpp.compiler.786900999" name="Cross G++ Compiler" superClass="cdt.managedbuild.tool.gnu.cross.cpp.compiler">
-								<option id="gnu.cpp.compiler.option.optimization.level.835282502" superClass="gnu.cpp.compiler.option.optimization.level" value="gnu.cpp.compiler.optimization.level.most" valueType="enumerated"/>
-								<option id="gnu.cpp.compiler.option.debugging.level.519235452" superClass="gnu.cpp.compiler.option.debugging.level" value="gnu.cpp.compiler.debugging.level.none" valueType="enumerated"/>
-								<inputType id="cdt.managedbuild.tool.gnu.cpp.compiler.input.2067330078" superClass="cdt.managedbuild.tool.gnu.cpp.compiler.input"/>
-							</tool>
-							<tool id="cdt.managedbuild.tool.gnu.cross.c.linker.596482473" name="Cross GCC Linker" superClass="cdt.managedbuild.tool.gnu.cross.c.linker"/>
-							<tool id="cdt.managedbuild.tool.gnu.cross.cpp.linker.581383205" name="Cross G++ Linker" superClass="cdt.managedbuild.tool.gnu.cross.cpp.linker">
-								<inputType id="cdt.managedbuild.tool.gnu.cpp.linker.input.1944554642" superClass="cdt.managedbuild.tool.gnu.cpp.linker.input">
-									<additionalInput kind="additionalinputdependency" paths="$(USER_OBJS)"/>
-									<additionalInput kind="additionalinput" paths="$(LIBS)"/>
-								</inputType>
-							</tool>
-							<tool id="cdt.managedbuild.tool.gnu.cross.archiver.746497236" name="Cross GCC Archiver" superClass="cdt.managedbuild.tool.gnu.cross.archiver"/>
-							<tool id="cdt.managedbuild.tool.gnu.cross.assembler.1688753766" name="Cross GCC Assembler" superClass="cdt.managedbuild.tool.gnu.cross.assembler">
-								<inputType id="cdt.managedbuild.tool.gnu.assembler.input.1814361227" superClass="cdt.managedbuild.tool.gnu.assembler.input"/>
-							</tool>
-						</toolChain>
-					</folderInfo>
-				</configuration>
-			</storageModule>
-			<storageModule moduleId="org.eclipse.cdt.core.externalSettings"/>
-		</cconfiguration>
-	</storageModule>
-	<storageModule moduleId="cdtBuildSystem" version="4.0.0">
-		<project id="xv6.cdt.managedbuild.target.gnu.cross.exe.1104959887" name="Executable" projectType="cdt.managedbuild.target.gnu.cross.exe"/>
-	</storageModule>
-	<storageModule moduleId="scannerConfiguration">
-		<autodiscovery enabled="true" problemReportingEnabled="true" selectedProfileId=""/>
-		<scannerConfigBuildInfo instanceId="cdt.managedbuild.config.gnu.cross.exe.debug.1785693045;cdt.managedbuild.config.gnu.cross.exe.debug.1785693045.;cdt.managedbuild.tool.gnu.cross.cpp.compiler.397081983;cdt.managedbuild.tool.gnu.cpp.compiler.input.720809752">
-			<autodiscovery enabled="true" problemReportingEnabled="true" selectedProfileId="org.eclipse.cdt.managedbuilder.core.GCCManagedMakePerProjectProfileCPP"/>
-		</scannerConfigBuildInfo>
-		<scannerConfigBuildInfo instanceId="cdt.managedbuild.config.gnu.cross.exe.release.1272920932;cdt.managedbuild.config.gnu.cross.exe.release.1272920932.;cdt.managedbuild.tool.gnu.cross.cpp.compiler.786900999;cdt.managedbuild.tool.gnu.cpp.compiler.input.2067330078">
-			<autodiscovery enabled="true" problemReportingEnabled="true" selectedProfileId="org.eclipse.cdt.managedbuilder.core.GCCManagedMakePerProjectProfileCPP"/>
-		</scannerConfigBuildInfo>
-		<scannerConfigBuildInfo instanceId="cdt.managedbuild.config.gnu.cross.exe.release.1272920932;cdt.managedbuild.config.gnu.cross.exe.release.1272920932.;cdt.managedbuild.tool.gnu.cross.c.compiler.1712097346;cdt.managedbuild.tool.gnu.c.compiler.input.1396171079">
-			<autodiscovery enabled="true" problemReportingEnabled="true" selectedProfileId="org.eclipse.cdt.managedbuilder.core.GCCManagedMakePerProjectProfileC"/>
-		</scannerConfigBuildInfo>
-		<scannerConfigBuildInfo instanceId="cdt.managedbuild.config.gnu.cross.exe.debug.1785693045;cdt.managedbuild.config.gnu.cross.exe.debug.1785693045.;cdt.managedbuild.tool.gnu.cross.c.compiler.310227302;cdt.managedbuild.tool.gnu.c.compiler.input.62253759">
-			<autodiscovery enabled="true" problemReportingEnabled="true" selectedProfileId="org.eclipse.cdt.managedbuilder.core.GCCManagedMakePerProjectProfileC"/>
-		</scannerConfigBuildInfo>
-	</storageModule>
-	<storageModule moduleId="refreshScope" versionNumber="1">
-		<resource resourceType="PROJECT" workspacePath="/xv6"/>
-	</storageModule>
-	<storageModule moduleId="org.eclipse.cdt.core.LanguageSettingsProviders"/>
-</cproject>
diff --git a/xv6/.gitignore b/xv6/.gitignore
deleted file mode 100644
index 3ce0e3f..0000000
--- a/xv6/.gitignore
+++ /dev/null
@@ -1,25 +0,0 @@
-/_balbazar
-/_cat
-/_echo
-/_forktest
-/_grep
-/_init
-/_kill
-/_ln
-/_ls
-/_mkdir
-/_picachu
-/_read
-/_rm
-/_sanity
-/_sh
-/_stressfs
-/_usertests
-/_wc
-/_zombie
-/.project
-/fs.img
-/initcode.out
-/kernel
-/mkfs
-/xv6.img
diff --git a/xv6/.project b/xv6/.project
deleted file mode 100644
index 2b13bd9..0000000
--- a/xv6/.project
+++ /dev/null
@@ -1,83 +0,0 @@
-<?xml version="1.0" encoding="UTF-8"?>
-<projectDescription>
-	<name>xv6</name>
-	<comment></comment>
-	<projects>
-	</projects>
-	<buildSpec>
-		<buildCommand>
-			<name>org.eclipse.cdt.managedbuilder.core.genmakebuilder</name>
-			<triggers>clean,full,incremental,</triggers>
-			<arguments>
-				<dictionary>
-					<key>?name?</key>
-					<value></value>
-				</dictionary>
-				<dictionary>
-					<key>org.eclipse.cdt.make.core.append_environment</key>
-					<value>true</value>
-				</dictionary>
-				<dictionary>
-					<key>org.eclipse.cdt.make.core.autoBuildTarget</key>
-					<value>all</value>
-				</dictionary>
-				<dictionary>
-					<key>org.eclipse.cdt.make.core.buildArguments</key>
-					<value>clean qemu SCHEDFLAG=DEFAULT</value>
-				</dictionary>
-				<dictionary>
-					<key>org.eclipse.cdt.make.core.buildCommand</key>
-					<value>make</value>
-				</dictionary>
-				<dictionary>
-					<key>org.eclipse.cdt.make.core.buildLocation</key>
-					<value>${workspace_loc:/xv6/Debug}</value>
-				</dictionary>
-				<dictionary>
-					<key>org.eclipse.cdt.make.core.cleanBuildTarget</key>
-					<value>clean</value>
-				</dictionary>
-				<dictionary>
-					<key>org.eclipse.cdt.make.core.contents</key>
-					<value>org.eclipse.cdt.make.core.activeConfigSettings</value>
-				</dictionary>
-				<dictionary>
-					<key>org.eclipse.cdt.make.core.enableAutoBuild</key>
-					<value>false</value>
-				</dictionary>
-				<dictionary>
-					<key>org.eclipse.cdt.make.core.enableCleanBuild</key>
-					<value>true</value>
-				</dictionary>
-				<dictionary>
-					<key>org.eclipse.cdt.make.core.enableFullBuild</key>
-					<value>true</value>
-				</dictionary>
-				<dictionary>
-					<key>org.eclipse.cdt.make.core.fullBuildTarget</key>
-					<value></value>
-				</dictionary>
-				<dictionary>
-					<key>org.eclipse.cdt.make.core.stopOnError</key>
-					<value>true</value>
-				</dictionary>
-				<dictionary>
-					<key>org.eclipse.cdt.make.core.useDefaultBuildCmd</key>
-					<value>false</value>
-				</dictionary>
-			</arguments>
-		</buildCommand>
-		<buildCommand>
-			<name>org.eclipse.cdt.managedbuilder.core.ScannerConfigBuilder</name>
-			<triggers>full,incremental,</triggers>
-			<arguments>
-			</arguments>
-		</buildCommand>
-	</buildSpec>
-	<natures>
-		<nature>org.eclipse.cdt.core.cnature</nature>
-		<nature>org.eclipse.cdt.core.ccnature</nature>
-		<nature>org.eclipse.cdt.managedbuilder.core.managedBuildNature</nature>
-		<nature>org.eclipse.cdt.managedbuilder.core.ScannerConfigNature</nature>
-	</natures>
-</projectDescription>
diff --git a/xv6/.settings/language.settings.xml b/xv6/.settings/language.settings.xml
deleted file mode 100644
index a811418..0000000
--- a/xv6/.settings/language.settings.xml
+++ /dev/null
@@ -1,25 +0,0 @@
-<?xml version="1.0" encoding="UTF-8" standalone="no"?>
-<project>
-	<configuration id="cdt.managedbuild.config.gnu.cross.exe.debug.1785693045" name="Debug">
-		<extension point="org.eclipse.cdt.core.LanguageSettingsProvider">
-			<provider copy-of="extension" id="org.eclipse.cdt.ui.UserLanguageSettingsProvider"/>
-			<provider-reference id="org.eclipse.cdt.core.ReferencedProjectsLanguageSettingsProvider" ref="shared-provider"/>
-			<provider-reference id="org.eclipse.cdt.managedbuilder.core.MBSLanguageSettingsProvider" ref="shared-provider"/>
-			<provider class="org.eclipse.cdt.internal.build.crossgcc.CrossGCCBuiltinSpecsDetector" console="false" env-hash="120019214163450739" id="org.eclipse.cdt.build.crossgcc.CrossGCCBuiltinSpecsDetector" keep-relative-paths="false" name="CDT Cross GCC Built-in Compiler Settings" parameter="${COMMAND} ${FLAGS} -E -P -v -dD &quot;${INPUTS}&quot;" prefer-non-shared="true">
-				<language-scope id="org.eclipse.cdt.core.gcc"/>
-				<language-scope id="org.eclipse.cdt.core.g++"/>
-			</provider>
-		</extension>
-	</configuration>
-	<configuration id="cdt.managedbuild.config.gnu.cross.exe.release.1272920932" name="Release">
-		<extension point="org.eclipse.cdt.core.LanguageSettingsProvider">
-			<provider copy-of="extension" id="org.eclipse.cdt.ui.UserLanguageSettingsProvider"/>
-			<provider-reference id="org.eclipse.cdt.core.ReferencedProjectsLanguageSettingsProvider" ref="shared-provider"/>
-			<provider-reference id="org.eclipse.cdt.managedbuilder.core.MBSLanguageSettingsProvider" ref="shared-provider"/>
-			<provider class="org.eclipse.cdt.internal.build.crossgcc.CrossGCCBuiltinSpecsDetector" console="false" env-hash="120019214163450739" id="org.eclipse.cdt.build.crossgcc.CrossGCCBuiltinSpecsDetector" keep-relative-paths="false" name="CDT Cross GCC Built-in Compiler Settings" parameter="${COMMAND} ${FLAGS} -E -P -v -dD &quot;${INPUTS}&quot;" prefer-non-shared="true">
-				<language-scope id="org.eclipse.cdt.core.gcc"/>
-				<language-scope id="org.eclipse.cdt.core.g++"/>
-			</provider>
-		</extension>
-	</configuration>
-</project>
diff --git a/xv6/BUGS b/xv6/BUGS
deleted file mode 100644
index 81d2220..0000000
--- a/xv6/BUGS
+++ /dev/null
@@ -1,7 +0,0 @@
-formatting:
-	need to fix PAGEBREAK mechanism
-
-sh:
-	can't always runcmd in child -- breaks cd.
-	maybe should hard-code PATH=/ ?
-
diff --git a/xv6/LICENSE b/xv6/LICENSE
deleted file mode 100644
index 46fd1cc..0000000
--- a/xv6/LICENSE
+++ /dev/null
@@ -1,24 +0,0 @@
-The xv6 software is:
-
-Copyright (c) 2006-2009 Frans Kaashoek, Robert Morris, Russ Cox,
-                        Massachusetts Institute of Technology
-
-Permission is hereby granted, free of charge, to any person obtaining
-a copy of this software and associated documentation files (the
-"Software"), to deal in the Software without restriction, including
-without limitation the rights to use, copy, modify, merge, publish,
-distribute, sublicense, and/or sell copies of the Software, and to
-permit persons to whom the Software is furnished to do so, subject to
-the following conditions:
-
-The above copyright notice and this permission notice shall be
-included in all copies or substantial portions of the Software.
-
-THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
-EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
-MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
-NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
-LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
-OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
-WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
-
diff --git a/xv6/Makefile b/xv6/Makefile
deleted file mode 100644
index 9538efa..0000000
--- a/xv6/Makefile
+++ /dev/null
@@ -1,288 +0,0 @@
-OBJS = \
-	bio.o\
-	console.o\
-	exec.o\
-	file.o\
-	fs.o\
-	ide.o\
-	ioapic.o\
-	kalloc.o\
-	kbd.o\
-	lapic.o\
-	log.o\
-	main.o\
-	mp.o\
-	picirq.o\
-	pipe.o\
-	proc.o\
-	spinlock.o\
-	string.o\
-	swtch.o\
-	syscall.o\
-	sysfile.o\
-	sysproc.o\
-	timer.o\
-	trapasm.o\
-	trap.o\
-	uart.o\
-	vectors.o\
-	vm.o\
-	implicit_return.o\
-	linkedList.o\
-	
-
-# Cross-compiling (e.g., on Mac OS X)
-# TOOLPREFIX = i386-jos-elf
-
-# Using native tools (e.g., on X86 Linux)
-#TOOLPREFIX = 
-
-# Try to infer the correct TOOLPREFIX if not set
-ifndef TOOLPREFIX
-TOOLPREFIX := $(shell if i386-jos-elf-objdump -i 2>&1 | grep '^elf32-i386$$' >/dev/null 2>&1; \
-	then echo 'i386-jos-elf-'; \
-	elif objdump -i 2>&1 | grep 'elf32-i386' >/dev/null 2>&1; \
-	then echo ''; \
-	else echo "***" 1>&2; \
-	echo "*** Error: Couldn't find an i386-*-elf version of GCC/binutils." 1>&2; \
-	echo "*** Is the directory with i386-jos-elf-gcc in your PATH?" 1>&2; \
-	echo "*** If your i386-*-elf toolchain is installed with a command" 1>&2; \
-	echo "*** prefix other than 'i386-jos-elf-', set your TOOLPREFIX" 1>&2; \
-	echo "*** environment variable to that prefix and run 'make' again." 1>&2; \
-	echo "*** To turn off this error, run 'gmake TOOLPREFIX= ...'." 1>&2; \
-	echo "***" 1>&2; exit 1; fi)
-endif
-
-# If the makefile can't find QEMU, specify its path here
-# QEMU = qemu-system-i386
-
-ifndef SCHEDFLAG
-	SCHEDFLAG=DEFAULT
-endif
-
-# Try to infer the correct QEMU
-ifndef QEMU
-QEMU = $(shell if which qemu > /dev/null; \
-	then echo qemu; exit; \
-	elif which qemu-system-i386 > /dev/null; \
-	then echo qemu-system-i386; exit; \
-	else \
-	qemu=/Applications/Q.app/Contents/MacOS/i386-softmmu.app/Contents/MacOS/i386-softmmu; \
-	if test -x $$qemu; then echo $$qemu; exit; fi; fi; \
-	echo "***" 1>&2; \
-	echo "*** Error: Couldn't find a working QEMU executable." 1>&2; \
-	echo "*** Is the directory containing the qemu binary in your PATH" 1>&2; \
-	echo "*** or have you tried setting the QEMU variable in Makefile?" 1>&2; \
-	echo "***" 1>&2; exit 1)
-endif
-
-CC = $(TOOLPREFIX)gcc
-AS = $(TOOLPREFIX)gas
-LD = $(TOOLPREFIX)ld
-OBJCOPY = $(TOOLPREFIX)objcopy
-OBJDUMP = $(TOOLPREFIX)objdump
-#CFLAGS = -fno-pic -static -fno-builtin -fno-strict-aliasing -O2 -Wall -MD -ggdb -m32 -Werror -fno-omit-frame-pointer
-CFLAGS = -nostdinc -fno-pic -static -fno-builtin -fno-strict-aliasing -fvar-tracking -fvar-tracking-assignments -O0 -g -Wall -MD -gdwarf-2 -m32 -Werror -fno-omit-frame-pointer
-CFLAGS += $(shell $(CC) -fno-stack-protector -E -x c /dev/null >/dev/null 2>&1 && echo -fno-stack-protector) -D $(SCHEDFLAG)=1
-ASFLAGS = -m32 -gdwarf-2 -Wa,-divide
-# FreeBSD ld wants ``elf_i386_fbsd''
-LDFLAGS += -m $(shell $(LD) -V | grep elf_i386 2>/dev/null)
-
-xv6.img: bootblock kernel fs.img
-	dd if=/dev/zero of=xv6.img count=10000
-	dd if=bootblock of=xv6.img conv=notrunc
-	dd if=kernel of=xv6.img seek=1 conv=notrunc
-
-xv6memfs.img: bootblock kernelmemfs
-	dd if=/dev/zero of=xv6memfs.img count=10000
-	dd if=bootblock of=xv6memfs.img conv=notrunc
-	dd if=kernelmemfs of=xv6memfs.img seek=1 conv=notrunc
-
-bootblock: bootasm.S bootmain.c
-	$(CC) $(CFLAGS) -fno-pic -O -nostdinc -I. -c bootmain.c
-	$(CC) $(CFLAGS) -fno-pic -nostdinc -I. -c bootasm.S
-	$(LD) $(LDFLAGS) -N -e start -Ttext 0x7C00 -o bootblock.o bootasm.o bootmain.o
-	$(OBJDUMP) -S bootblock.o > bootblock.asm
-	$(OBJCOPY) -S -O binary -j .text bootblock.o bootblock
-	./sign.pl bootblock
-
-entryother: entryother.S
-	$(CC) $(CFLAGS) -fno-pic -nostdinc -I. -c entryother.S
-	$(LD) $(LDFLAGS) -N -e start -Ttext 0x7000 -o bootblockother.o entryother.o
-	$(OBJCOPY) -S -O binary -j .text bootblockother.o entryother
-	$(OBJDUMP) -S bootblockother.o > entryother.asm
-
-initcode: initcode.S
-	$(CC) $(CFLAGS) -nostdinc -I. -c initcode.S
-	$(LD) $(LDFLAGS) -N -e start -Ttext 0 -o initcode.out initcode.o
-	$(OBJCOPY) -S -O binary initcode.out initcode
-	$(OBJDUMP) -S initcode.o > initcode.asm
-
-kernel: $(OBJS) entry.o entryother initcode kernel.ld
-	$(LD) $(LDFLAGS) -T kernel.ld -o kernel entry.o $(OBJS) -b binary initcode entryother
-	$(OBJDUMP) -S kernel > kernel.asm
-	$(OBJDUMP) -t kernel | sed '1,/SYMBOL TABLE/d; s/ .* / /; /^$$/d' > kernel.sym
-
-# kernelmemfs is a copy of kernel that maintains the
-# disk image in memory instead of writing to a disk.
-# This is not so useful for testing persistent storage or
-# exploring disk buffering implementations, but it is
-# great for testing the kernel on real hardware without
-# needing a scratch disk.
-MEMFSOBJS = $(filter-out ide.o,$(OBJS)) memide.o
-kernelmemfs: $(MEMFSOBJS) entry.o entryother initcode kernel.ld fs.img
-	$(LD) $(LDFLAGS) -T kernel.ld -o kernelmemfs entry.o  $(MEMFSOBJS) -b binary initcode entryother fs.img
-	$(OBJDUMP) -S kernelmemfs > kernelmemfs.asm
-	$(OBJDUMP) -t kernelmemfs | sed '1,/SYMBOL TABLE/d; s/ .* / /; /^$$/d' > kernelmemfs.sym
-
-tags: $(OBJS) entryother.S _init
-	etags *.S *.c
-
-vectors.S: vectors.pl
-	perl vectors.pl > vectors.S
-
-ULIB = ulib.o usys.o printf.o umalloc.o
-
-_%: %.o $(ULIB)
-	$(LD) $(LDFLAGS) -N -e main -Ttext 0 -o $@ $^
-	$(OBJDUMP) -S $@ > $*.asm
-	$(OBJDUMP) -t $@ | sed '1,/SYMBOL TABLE/d; s/ .* / /; /^$$/d' > $*.sym
-
-_forktest: forktest.o $(ULIB)
-	# forktest has less library code linked in - needs to be small
-	# in order to be able to max out the proc table.
-	$(LD) $(LDFLAGS) -N -e main -Ttext 0 -o _forktest forktest.o ulib.o usys.o
-	$(OBJDUMP) -S _forktest > forktest.asm
-
-mkfs: mkfs.c fs.h
-	gcc -Werror -Wall -o mkfs mkfs.c
-
-# Prevent deletion of intermediate files, e.g. cat.o, after first build, so
-# that disk image changes after first build are persistent until clean.  More
-# details:
-# http://www.gnu.org/software/make/manual/html_node/Chained-Rules.html
-.PRECIOUS: %.o
-
-UPROGS=\
-	_cat\
-	_echo\
-	_forktest\
-	_grep\
-	_init\
-	_kill\
-	_ln\
-	_ls\
-	_mkdir\
-	_rm\
-	_sh\
-	_stressfs\
-	_usertests\
-	_wc\
-	_zombie\
-	_read\
-	_sanity\
-
-fs.img: mkfs README $(UPROGS)
-	./mkfs fs.img README $(UPROGS)
-
--include *.d
-
-clean: 
-	
-
-	rm -f *.tex *.dvi *.idx *.aux *.log *.ind *.ilg \
-	*.o *.d *.asm *.sym vectors.S bootblock entryother \
-	initcode initcode.out kernel xv6.img fs.img kernelmemfs mkfs \
-	.gdbinit \
-	$(UPROGS) \
-
-# make a printout
-FILES = $(shell grep -v '^\#' runoff.list)
-PRINT = runoff.list runoff.spec README toc.hdr toc.ftr $(FILES)
-
-xv6.pdf: $(PRINT)
-	./runoff
-	ls -l xv6.pdf
-
-print: xv6.pdf
-
-# run in emulators
-
-bochs : fs.img xv6.img
-	if [ ! -e .bochsrc ]; then ln -s dot-bochsrc .bochsrc; fi
-	bochs -q
-
-# try to generate a unique GDB port
-GDBPORT = $(shell expr `id -u` % 5000 + 25000)
-# QEMU's gdb stub command line changed in 0.11
-QEMUGDB = $(shell if $(QEMU) -help | grep -q '^-gdb'; \
-	then echo "-gdb tcp::$(GDBPORT)"; \
-	else echo "-s -p $(GDBPORT)"; fi)
-ifndef CPUS
-CPUS := 2
-endif
-QEMUOPTS = -hdb fs.img xv6.img -smp $(CPUS) -m 512 $(QEMUEXTRA)
-
-qemu: fs.img xv6.img
-	$(QEMU) -serial mon:stdio $(QEMUOPTS)
-
-qemu-memfs: xv6memfs.img
-	$(QEMU) xv6memfs.img -smp $(CPUS) -m 256
-
-qemu-nox: fs.img xv6.img
-	$(QEMU) -nographic $(QEMUOPTS)
-
-.gdbinit: .gdbinit.tmpl
-	sed "s/localhost:1234/localhost:$(GDBPORT)/" < $^ > $@
-
-qemu-gdb: fs.img xv6.img .gdbinit
-	@echo "*** Now run 'gdb'." 1>&2
-	$(QEMU) -serial mon:stdio $(QEMUOPTS) -S $(QEMUGDB)
-
-qemu-nox-gdb: fs.img xv6.img .gdbinit
-	@echo "*** Now run 'gdb'." 1>&2
-	$(QEMU) -nographic $(QEMUOPTS) -S $(QEMUGDB)
-
-# CUT HERE
-# prepare dist for students
-# after running make dist, probably want to
-# rename it to rev0 or rev1 or so on and then
-# check in that version.
-
-EXTRA=\
-	mkfs.c ulib.c user.h cat.c echo.c forktest.c grep.c kill.c\
-	ln.c ls.c mkdir.c rm.c stressfs.c read.c sanity.c usertests.c wc.c zombie.c\
-	printf.c umalloc.c\
-	README dot-bochsrc *.pl toc.* runoff runoff1 runoff.list\
-	.gdbinit.tmpl gdbutil\
-
-dist:
-	rm -rf dist
-	mkdir dist
-	for i in $(FILES); \
-	do \
-		grep -v PAGEBREAK $$i >dist/$$i; \
-	done
-	sed '/CUT HERE/,$$d' Makefile >dist/Makefile
-	echo >dist/runoff.spec
-	cp $(EXTRA) dist
-
-dist-test:
-	rm -rf dist
-	make dist
-	rm -rf dist-test
-	mkdir dist-test
-	cp dist/* dist-test
-	cd dist-test; $(MAKE) print
-	cd dist-test; $(MAKE) bochs || true
-	cd dist-test; $(MAKE) qemu
-
-# update this rule (change rev#) when it is time to
-# make a new revision.
-tar:
-	rm -rf /tmp/xv6
-	mkdir -p /tmp/xv6
-	cp dist/* dist/.gdbinit.tmpl /tmp/xv6
-	(cd /tmp; tar cf - xv6) | gzip >xv6-rev5.tar.gz
-
-.PHONY: dist-test dist
diff --git a/xv6/Notes b/xv6/Notes
deleted file mode 100644
index 74c8aea..0000000
--- a/xv6/Notes
+++ /dev/null
@@ -1,123 +0,0 @@
-bochs 2.2.6:
-./configure --enable-smp --enable-disasm --enable-debugger --enable-all-optimizations --enable-4meg-pages --enable-global-pages --enable-pae --disable-reset-on-triple-fault
-bochs CVS after 2.2.6:
-./configure --enable-smp --enable-disasm --enable-debugger --enable-all-optimizations --enable-4meg-pages --enable-global-pages --enable-pae 
-
-bootmain.c doesn't work right if the ELF sections aren't
-sector-aligned. so you can't use ld -N. and the sections may also need
-to be non-zero length, only really matters for tiny "kernels".
-
-kernel loaded at 1 megabyte. stack same place that bootasm.S left it.
-
-kinit() should find real mem size
-  and rescue useable memory below 1 meg
-
-no paging, no use of page table hardware, just segments
-
-no user area: no magic kernel stack mapping
-  so no copying of kernel stack during fork
-  though there is a kernel stack page for each process
-
-no kernel malloc(), just kalloc() for user core
-
-user pointers aren't valid in the kernel
-
-are interrupts turned on in the kernel? yes.
-
-pass curproc explicitly, or implicit from cpu #?
-  e.g. argument to newproc()?
-  hmm, you need a global curproc[cpu] for trap() &c
-
-no stack expansion
-
-test running out of memory, process slots
-
-we can't really use a separate stack segment, since stack addresses
-need to work correctly as ordinary pointers. the same may be true of
-data vs text. how can we have a gap between data and stack, so that
-both can grow, without committing 4GB of physical memory? does this
-mean we need paging?
-
-perhaps have fixed-size stack, put it in the data segment?
-
-oops, if kernel stack is in contiguous user phys mem, then moving
-users' memory (e.g. to expand it) will wreck any pointers into the
-kernel stack.
-
-do we need to set fs and gs? so user processes can't abuse them?
-
-setupsegs() may modify current segment table, is that legal?
-
-trap() ought to lgdt on return, since currently only done in swtch()
-
-protect hardware interrupt vectors from user INT instructions?
-
-test out-of-fd cases for creating pipe.
-test pipe reader closes then write
-test two readers, two writers.
-test children being inherited by grandparent &c
-
-some sleep()s should be interruptible by kill()
-
-locks
-  init_lock
-    sequences CPU startup
-  proc_table_lock
-    also protects next_pid
-  per-fd lock *just* protects count read-modify-write
-    also maybe freeness?
-  memory allocator
-  printf
-
-in general, the table locks protect both free-ness and
-  public variables of table elements
-  in many cases you can use table elements w/o a lock
-  e.g. if you are the process, or you are using an fd
-
-lock order
-  per-pipe lock
-  proc_table_lock fd_table_lock kalloc_lock
-  console_lock
-
-do you have to be holding the mutex in order to call wakeup()? yes
-
-device interrupts don't clear FL_IF
-  so a recursive timer interrupt is possible
-
-what does inode->busy mean?
-  might be held across disk reads
-  no-one is allowed to do anything to the inode
-  protected by inode_table_lock
-inode->count counts in-memory pointers to the struct
-  prevents inode[] element from being re-used
-  protected by inode_table_lock
-
-blocks and inodes have ad-hoc sleep-locks
-  provide a single mechanism?
-
-kalloc() can return 0; do callers handle this right?
-
-test: one process unlinks a file while another links to it
-test: one process opens a file while another deletes it
-test: deadlock d/.. vs ../d, two processes.
-test: dup() shared fd->off
-test: does echo foo > x truncate x?
-
-sh: ioredirection incorrect now we have pipes
-sh: chain of pipes won't work, also ugly that parent closes fdarray entries too
-sh: dynamic memory allocation?
-sh: should sh support ; () &
-sh: stop stdin on ctrl-d (for cat > y)
-
-really should have bdwrite() for file content
-  and make some inode updates async
-  so soft updates make sense
-
-disk scheduling
-echo foo > bar should truncate bar
-  so O_CREATE should not truncate
-  but O_TRUNC should
-
-make it work on a real machine
-release before acquire at end of sleep?
-check 2nd disk (i.e. if not in .bochsrc)
diff --git a/xv6/README b/xv6/README
deleted file mode 100644
index 5d04bb9..0000000
--- a/xv6/README
+++ /dev/null
@@ -1,49 +0,0 @@
-xv6 is a re-implementation of Dennis Ritchie's and Ken Thompson's Unix
-Version 6 (v6).  xv6 loosely follows the structure and style of v6,
-but is implemented for a modern x86-based multiprocessor using ANSI C.
-
-ACKNOWLEDGMENTS
-
-xv6 is inspired by John Lions's Commentary on UNIX 6th Edition (Peer
-to Peer Communications; ISBN: 1-57398-013-7; 1st edition (June 14,
-2000)). See also http://pdos.csail.mit.edu/6.828/2012/v6.html, which
-provides pointers to on-line resources for v6.
-
-xv6 borrows code from the following sources:
-    JOS (asm.h, elf.h, mmu.h, bootasm.S, ide.c, console.c, and others)
-    Plan 9 (entryother.S, mp.h, mp.c, lapic.c)
-    FreeBSD (ioapic.c)
-    NetBSD (console.c)
-
-The following people have made contributions:
-    Russ Cox (context switching, locking)
-    Cliff Frey (MP)
-    Xiao Yu (MP)
-    Nickolai Zeldovich
-    Austin Clements
-
-In addition, we are grateful for the bug reports and patches contributed by
-Silas Boyd-Wickizer, Peter Froehlich, Shivam Handa, Anders Kaseorg, Eddie
-Kohler, Yandong Mao, Hitoshi Mitake, Carmi Merimovich, Joel Nider, Greg Price,
-Eldar Sehayek, Yongming Shen, Stephen Tu, and Zouchangwei.
-
-The code in the files that constitute xv6 is
-Copyright 2006-2014 Frans Kaashoek, Robert Morris, and Russ Cox.
-
-ERROR REPORTS
-
-If you spot errors or have suggestions for improvement, please send
-email to Frans Kaashoek and Robert Morris (kaashoek,rtm@csail.mit.edu). 
-
-BUILDING AND RUNNING XV6
-
-To build xv6 on an x86 ELF machine (like Linux or FreeBSD), run "make".
-On non-x86 or non-ELF machines (like OS X, even on x86), you will
-need to install a cross-compiler gcc suite capable of producing x86 ELF
-binaries.  See http://pdos.csail.mit.edu/6.828/2014/tools.html.
-Then run "make TOOLPREFIX=i386-jos-elf-".
-
-To run xv6, install the QEMU PC simulators.  To run in QEMU, run "make qemu".
-
-To create a typeset version of the code, run "make xv6.pdf".  This
-requires the "mpage" utility.  See http://www.mesa.nl/pub/mpage/.
diff --git a/xv6/TRICKS b/xv6/TRICKS
deleted file mode 100644
index 8d1439f..0000000
--- a/xv6/TRICKS
+++ /dev/null
@@ -1,140 +0,0 @@
-This file lists subtle things that might not be commented 
-as well as they should be in the source code and that
-might be worth pointing out in a longer explanation or in class.
-
----
-
-[2009/07/12: No longer relevant; forkret1 changed
-and this is now cleaner.]
-
-forkret1 in trapasm.S is called with a tf argument.
-In order to use it, forkret1 copies the tf pointer into
-%esp and then jumps to trapret, which pops the 
-register state out of the trap frame.  If an interrupt
-came in between the mov tf, %esp and the iret that
-goes back out to user space, the interrupt stack frame
-would end up scribbling over the tf and whatever memory
-lay under it.
-
-Why is this safe?  Because forkret1 is only called
-the first time a process returns to user space, and
-at that point, cp->tf is set to point to a trap frame
-constructed at the top of cp's kernel stack.  So tf 
-*is* a valid %esp that can hold interrupt state.
-
-If other tf's were used in forkret1, we could add
-a cli before the mov tf, %esp.
-
----
-
-In pushcli, must cli() no matter what.  It is not safe to do
-
-  if(cpus[cpu()].ncli == 0)
-    cli();
-  cpus[cpu()].ncli++;
-
-because if interrupts are off then we might call cpu(), get
-rescheduled to a different cpu, look at cpus[oldcpu].ncli,
-and wrongly decide not to disable interrupts on the new cpu.
-
-Instead do 
-
-  cli();
-  cpus[cpu()].ncli++;
-
-always.
-
----
-
-There is a (harmless) race in pushcli, which does
-
-	eflags = readeflags();
-	cli();
-	if(c->ncli++ == 0)
-		c->intena = eflags & FL_IF;
-
-Consider a bottom-level pushcli.  
-If interrupts are disabled already, then the right thing
-happens: read_eflags finds that FL_IF is not set,
-and intena = 0.  If interrupts are enabled, then
-it is less clear that the right thing happens:
-the readeflags can execute, then the process
-can get preempted and rescheduled on another cpu,
-and then once it starts running, perhaps with 
-interrupts disabled (can happen since the scheduler
-only enables interrupts once per scheduling loop,
-not every time it schedules a process), it will 
-incorrectly record that interrupts *were* enabled.
-This doesn't matter, because if it was safe to be
-running with interrupts enabled before the context
-switch, it is still safe (and arguably more correct)
-to run with them enabled after the context switch too.
-
-In fact it would be safe if scheduler always set
-	c->intena = 1;
-before calling swtch, and perhaps it should.
-
----
-
-The x86's processor-ordering memory model 
-matches spin locks well, so no explicit memory
-synchronization instructions are required in
-acquire and release.  
-
-Consider two sequences of code on different CPUs:
-
-CPU0
-A;
-release(lk);
-
-and
-
-CPU1
-acquire(lk);
-B;
-
-We want to make sure that:
-  - all reads in B see the effects of writes in A.
-  - all reads in A do *not* see the effects of writes in B.
- 
-The x86 guarantees that writes in A will go out
-to memory before the write of lk->locked = 0 in 
-release(lk).  It further guarantees that CPU1 
-will observe CPU0's write of lk->locked = 0 only
-after observing the earlier writes by CPU0.
-So any reads in B are guaranteed to observe the
-effects of writes in A.
-
-According to the Intel manual behavior spec, the
-second condition requires a serialization instruction
-in release, to avoid reads in A happening after giving
-up lk.  No Intel SMP processor in existence actually
-moves reads down after writes, but the language in
-the spec allows it.  There is no telling whether future
-processors will need it.
-
----
-
-The code in fork needs to read np->pid before
-setting np->state to RUNNABLE.  The following
-is not a correct way to do this:
-
-	int
-	fork(void)
-	{
-	  ...
-	  np->state = RUNNABLE;
-	  return np->pid; // oops
-	}
-
-After setting np->state to RUNNABLE, some other CPU
-might run the process, it might exit, and then it might
-get reused for a different process (with a new pid), all
-before the return statement.  So it's not safe to just
-"return np->pid". Even saving a copy of np->pid before
-setting np->state isn't safe, since the compiler is
-allowed to re-order statements.
-
-The real code saves a copy of np->pid, then acquires a lock
-around the write to np->state. The acquire() prevents the
-compiler from re-ordering.
diff --git a/xv6/asm.h b/xv6/asm.h
deleted file mode 100644
index 68210d7..0000000
--- a/xv6/asm.h
+++ /dev/null
@@ -1,21 +0,0 @@
-//
-// assembler macros to create x86 segments
-//
-
-#define SEG_NULLASM                                             \
-        .word 0, 0;                                             \
-        .byte 0, 0, 0, 0
-
-// The 0xC0 means the limit is in 4096-byte units
-// and (for executable segments) 32-bit mode.
-#define SEG_ASM(type,base,lim)                                  \
-        .word (((lim) >> 12) & 0xffff), ((base) & 0xffff);      \
-        .byte (((base) >> 16) & 0xff), (0x90 | (type)),         \
-                (0xC0 | (((lim) >> 28) & 0xf)), (((base) >> 24) & 0xff)
-
-#define STA_X     0x8       // Executable segment
-#define STA_E     0x4       // Expand down (non-executable segments)
-#define STA_C     0x4       // Conforming code segment (executable only)
-#define STA_W     0x2       // Writeable (non-executable segments)
-#define STA_R     0x2       // Readable (executable segments)
-#define STA_A     0x1       // Accessed
diff --git a/xv6/bio.c b/xv6/bio.c
deleted file mode 100644
index 6a28053..0000000
--- a/xv6/bio.c
+++ /dev/null
@@ -1,143 +0,0 @@
-// Buffer cache.
-//
-// The buffer cache is a linked list of buf structures holding
-// cached copies of disk block contents.  Caching disk blocks
-// in memory reduces the number of disk reads and also provides
-// a synchronization point for disk blocks used by multiple processes.
-// 
-// Interface:
-// * To get a buffer for a particular disk block, call bread.
-// * After changing buffer data, call bwrite to write it to disk.
-// * When done with the buffer, call brelse.
-// * Do not use the buffer after calling brelse.
-// * Only one process at a time can use a buffer,
-//     so do not keep them longer than necessary.
-// 
-// The implementation uses three state flags internally:
-// * B_BUSY: the block has been returned from bread
-//     and has not been passed back to brelse.  
-// * B_VALID: the buffer data has been read from the disk.
-// * B_DIRTY: the buffer data has been modified
-//     and needs to be written to disk.
-
-#include "types.h"
-#include "defs.h"
-#include "param.h"
-#include "spinlock.h"
-#include "buf.h"
-
-struct {
-  struct spinlock lock;
-  struct buf buf[NBUF];
-
-  // Linked list of all buffers, through prev/next.
-  // head.next is most recently used.
-  struct buf head;
-} bcache;
-
-void
-binit(void)
-{
-  struct buf *b;
-
-  initlock(&bcache.lock, "bcache");
-
-//PAGEBREAK!
-  // Create linked list of buffers
-  bcache.head.prev = &bcache.head;
-  bcache.head.next = &bcache.head;
-  for(b = bcache.buf; b < bcache.buf+NBUF; b++){
-    b->next = bcache.head.next;
-    b->prev = &bcache.head;
-    b->dev = -1;
-    bcache.head.next->prev = b;
-    bcache.head.next = b;
-  }
-}
-
-// Look through buffer cache for sector on device dev.
-// If not found, allocate a buffer.
-// In either case, return B_BUSY buffer.
-static struct buf*
-bget(uint dev, uint sector)
-{
-  struct buf *b;
-
-  acquire(&bcache.lock);
-
- loop:
-  // Is the sector already cached?
-  for(b = bcache.head.next; b != &bcache.head; b = b->next){
-    if(b->dev == dev && b->sector == sector){
-      if(!(b->flags & B_BUSY)){
-        b->flags |= B_BUSY;
-        release(&bcache.lock);
-        return b;
-      }
-      sleep(b, &bcache.lock);
-      goto loop;
-    }
-  }
-
-  // Not cached; recycle some non-busy and clean buffer.
-  // "clean" because B_DIRTY and !B_BUSY means log.c
-  // hasn't yet committed the changes to the buffer.
-  for(b = bcache.head.prev; b != &bcache.head; b = b->prev){
-    if((b->flags & B_BUSY) == 0 && (b->flags & B_DIRTY) == 0){
-      b->dev = dev;
-      b->sector = sector;
-      b->flags = B_BUSY;
-      release(&bcache.lock);
-      return b;
-    }
-  }
-  panic("bget: no buffers");
-}
-
-// Return a B_BUSY buf with the contents of the indicated disk sector.
-struct buf*
-bread(uint dev, uint sector)
-{
-  struct buf *b;
-
-  b = bget(dev, sector);
-  if(!(b->flags & B_VALID))
-    iderw(b);
-  return b;
-}
-
-// Write b's contents to disk.  Must be B_BUSY.
-void
-bwrite(struct buf *b)
-{
-  if((b->flags & B_BUSY) == 0)
-    panic("bwrite");
-  b->flags |= B_DIRTY;
-  iderw(b);
-}
-
-// Release a B_BUSY buffer.
-// Move to the head of the MRU list.
-void
-brelse(struct buf *b)
-{
-  if((b->flags & B_BUSY) == 0)
-    panic("brelse");
-
-  acquire(&bcache.lock);
-
-  b->next->prev = b->prev;
-  b->prev->next = b->next;
-  b->next = bcache.head.next;
-  b->prev = &bcache.head;
-  bcache.head.next->prev = b;
-  bcache.head.next = b;
-
-  b->flags &= ~B_BUSY;
-  wakeup(b);
-
-  release(&bcache.lock);
-}
-//PAGEBREAK!
-// Blank page.
-
diff --git a/xv6/bio.d b/xv6/bio.d
deleted file mode 100644
index c4574dd..0000000
--- a/xv6/bio.d
+++ /dev/null
@@ -1 +0,0 @@
-bio.o: bio.c types.h defs.h param.h spinlock.h buf.h
diff --git a/xv6/bootasm.S b/xv6/bootasm.S
deleted file mode 100644
index 91a595e..0000000
--- a/xv6/bootasm.S
+++ /dev/null
@@ -1,88 +0,0 @@
-#include "asm.h"
-#include "memlayout.h"
-#include "mmu.h"
-
-# Start the first CPU: switch to 32-bit protected mode, jump into C.
-# The BIOS loads this code from the first sector of the hard disk into
-# memory at physical address 0x7c00 and starts executing in real mode
-# with %cs=0 %ip=7c00.
-
-.code16                       # Assemble for 16-bit mode
-.globl start
-start:
-  cli                         # BIOS enabled interrupts; disable
-
-  # Zero data segment registers DS, ES, and SS.
-  xorw    %ax,%ax             # Set %ax to zero
-  movw    %ax,%ds             # -> Data Segment
-  movw    %ax,%es             # -> Extra Segment
-  movw    %ax,%ss             # -> Stack Segment
-
-  # Physical address line A20 is tied to zero so that the first PCs 
-  # with 2 MB would run software that assumed 1 MB.  Undo that.
-seta20.1:
-  inb     $0x64,%al               # Wait for not busy
-  testb   $0x2,%al
-  jnz     seta20.1
-
-  movb    $0xd1,%al               # 0xd1 -> port 0x64
-  outb    %al,$0x64
-
-seta20.2:
-  inb     $0x64,%al               # Wait for not busy
-  testb   $0x2,%al
-  jnz     seta20.2
-
-  movb    $0xdf,%al               # 0xdf -> port 0x60
-  outb    %al,$0x60
-
-  # Switch from real to protected mode.  Use a bootstrap GDT that makes
-  # virtual addresses map directly to physical addresses so that the
-  # effective memory map doesn't change during the transition.
-  lgdt    gdtdesc
-  movl    %cr0, %eax
-  orl     $CR0_PE, %eax
-  movl    %eax, %cr0
-
-//PAGEBREAK!
-  # Complete transition to 32-bit protected mode by using long jmp
-  # to reload %cs and %eip.  The segment descriptors are set up with no
-  # translation, so that the mapping is still the identity mapping.
-  ljmp    $(SEG_KCODE<<3), $start32
-
-.code32  # Tell assembler to generate 32-bit code now.
-start32:
-  # Set up the protected-mode data segment registers
-  movw    $(SEG_KDATA<<3), %ax    # Our data segment selector
-  movw    %ax, %ds                # -> DS: Data Segment
-  movw    %ax, %es                # -> ES: Extra Segment
-  movw    %ax, %ss                # -> SS: Stack Segment
-  movw    $0, %ax                 # Zero segments not ready for use
-  movw    %ax, %fs                # -> FS
-  movw    %ax, %gs                # -> GS
-
-  # Set up the stack pointer and call into C.
-  movl    $start, %esp
-  call    bootmain
-
-  # If bootmain returns (it shouldn't), trigger a Bochs
-  # breakpoint if running under Bochs, then loop.
-  movw    $0x8a00, %ax            # 0x8a00 -> port 0x8a00
-  movw    %ax, %dx
-  outw    %ax, %dx
-  movw    $0x8ae0, %ax            # 0x8ae0 -> port 0x8a00
-  outw    %ax, %dx
-spin:
-  jmp     spin
-
-# Bootstrap GDT
-.p2align 2                                # force 4 byte alignment
-gdt:
-  SEG_NULLASM                             # null seg
-  SEG_ASM(STA_X|STA_R, 0x0, 0xffffffff)   # code seg
-  SEG_ASM(STA_W, 0x0, 0xffffffff)         # data seg
-
-gdtdesc:
-  .word   (gdtdesc - gdt - 1)             # sizeof(gdt) - 1
-  .long   gdt                             # address gdt
-
diff --git a/xv6/bootasm.d b/xv6/bootasm.d
deleted file mode 100644
index 3b3dc19..0000000
--- a/xv6/bootasm.d
+++ /dev/null
@@ -1 +0,0 @@
-bootasm.o: bootasm.S asm.h memlayout.h mmu.h
diff --git a/xv6/bootblock b/xv6/bootblock
deleted file mode 100755
index e02ec96..0000000
Binary files a/xv6/bootblock and /dev/null differ
diff --git a/xv6/bootblock.asm b/xv6/bootblock.asm
deleted file mode 100644
index 478291e..0000000
--- a/xv6/bootblock.asm
+++ /dev/null
@@ -1,396 +0,0 @@
-
-bootblock.o:     file format elf32-i386
-
-
-Disassembly of section .text:
-
-00007c00 <start>:
-# with %cs=0 %ip=7c00.
-
-.code16                       # Assemble for 16-bit mode
-.globl start
-start:
-  cli                         # BIOS enabled interrupts; disable
-    7c00:	fa                   	cli    
-
-  # Zero data segment registers DS, ES, and SS.
-  xorw    %ax,%ax             # Set %ax to zero
-    7c01:	31 c0                	xor    %eax,%eax
-  movw    %ax,%ds             # -> Data Segment
-    7c03:	8e d8                	mov    %eax,%ds
-  movw    %ax,%es             # -> Extra Segment
-    7c05:	8e c0                	mov    %eax,%es
-  movw    %ax,%ss             # -> Stack Segment
-    7c07:	8e d0                	mov    %eax,%ss
-
-00007c09 <seta20.1>:
-
-  # Physical address line A20 is tied to zero so that the first PCs 
-  # with 2 MB would run software that assumed 1 MB.  Undo that.
-seta20.1:
-  inb     $0x64,%al               # Wait for not busy
-    7c09:	e4 64                	in     $0x64,%al
-  testb   $0x2,%al
-    7c0b:	a8 02                	test   $0x2,%al
-  jnz     seta20.1
-    7c0d:	75 fa                	jne    7c09 <seta20.1>
-
-  movb    $0xd1,%al               # 0xd1 -> port 0x64
-    7c0f:	b0 d1                	mov    $0xd1,%al
-  outb    %al,$0x64
-    7c11:	e6 64                	out    %al,$0x64
-
-00007c13 <seta20.2>:
-
-seta20.2:
-  inb     $0x64,%al               # Wait for not busy
-    7c13:	e4 64                	in     $0x64,%al
-  testb   $0x2,%al
-    7c15:	a8 02                	test   $0x2,%al
-  jnz     seta20.2
-    7c17:	75 fa                	jne    7c13 <seta20.2>
-
-  movb    $0xdf,%al               # 0xdf -> port 0x60
-    7c19:	b0 df                	mov    $0xdf,%al
-  outb    %al,$0x60
-    7c1b:	e6 60                	out    %al,$0x60
-
-  # Switch from real to protected mode.  Use a bootstrap GDT that makes
-  # virtual addresses map directly to physical addresses so that the
-  # effective memory map doesn't change during the transition.
-  lgdt    gdtdesc
-    7c1d:	0f 01 16             	lgdtl  (%esi)
-    7c20:	78 7c                	js     7c9e <readsect+0x9>
-  movl    %cr0, %eax
-    7c22:	0f 20 c0             	mov    %cr0,%eax
-  orl     $CR0_PE, %eax
-    7c25:	66 83 c8 01          	or     $0x1,%ax
-  movl    %eax, %cr0
-    7c29:	0f 22 c0             	mov    %eax,%cr0
-
-//PAGEBREAK!
-  # Complete transition to 32-bit protected mode by using long jmp
-  # to reload %cs and %eip.  The segment descriptors are set up with no
-  # translation, so that the mapping is still the identity mapping.
-  ljmp    $(SEG_KCODE<<3), $start32
-    7c2c:	ea 31 7c 08 00 66 b8 	ljmp   $0xb866,$0x87c31
-
-00007c31 <start32>:
-
-.code32  # Tell assembler to generate 32-bit code now.
-start32:
-  # Set up the protected-mode data segment registers
-  movw    $(SEG_KDATA<<3), %ax    # Our data segment selector
-    7c31:	66 b8 10 00          	mov    $0x10,%ax
-  movw    %ax, %ds                # -> DS: Data Segment
-    7c35:	8e d8                	mov    %eax,%ds
-  movw    %ax, %es                # -> ES: Extra Segment
-    7c37:	8e c0                	mov    %eax,%es
-  movw    %ax, %ss                # -> SS: Stack Segment
-    7c39:	8e d0                	mov    %eax,%ss
-  movw    $0, %ax                 # Zero segments not ready for use
-    7c3b:	66 b8 00 00          	mov    $0x0,%ax
-  movw    %ax, %fs                # -> FS
-    7c3f:	8e e0                	mov    %eax,%fs
-  movw    %ax, %gs                # -> GS
-    7c41:	8e e8                	mov    %eax,%gs
-
-  # Set up the stack pointer and call into C.
-  movl    $start, %esp
-    7c43:	bc 00 7c 00 00       	mov    $0x7c00,%esp
-  call    bootmain
-    7c48:	e8 e7 00 00 00       	call   7d34 <bootmain>
-
-  # If bootmain returns (it shouldn't), trigger a Bochs
-  # breakpoint if running under Bochs, then loop.
-  movw    $0x8a00, %ax            # 0x8a00 -> port 0x8a00
-    7c4d:	66 b8 00 8a          	mov    $0x8a00,%ax
-  movw    %ax, %dx
-    7c51:	66 89 c2             	mov    %ax,%dx
-  outw    %ax, %dx
-    7c54:	66 ef                	out    %ax,(%dx)
-  movw    $0x8ae0, %ax            # 0x8ae0 -> port 0x8a00
-    7c56:	66 b8 e0 8a          	mov    $0x8ae0,%ax
-  outw    %ax, %dx
-    7c5a:	66 ef                	out    %ax,(%dx)
-
-00007c5c <spin>:
-spin:
-  jmp     spin
-    7c5c:	eb fe                	jmp    7c5c <spin>
-    7c5e:	66 90                	xchg   %ax,%ax
-
-00007c60 <gdt>:
-	...
-    7c68:	ff                   	(bad)  
-    7c69:	ff 00                	incl   (%eax)
-    7c6b:	00 00                	add    %al,(%eax)
-    7c6d:	9a cf 00 ff ff 00 00 	lcall  $0x0,$0xffff00cf
-    7c74:	00 92 cf 00 17 00    	add    %dl,0x1700cf(%edx)
-
-00007c78 <gdtdesc>:
-    7c78:	17                   	pop    %ss
-    7c79:	00 60 7c             	add    %ah,0x7c(%eax)
-    7c7c:	00 00                	add    %al,(%eax)
-    7c7e:	90                   	nop
-    7c7f:	90                   	nop
-
-00007c80 <waitdisk>:
-  entry();
-}
-
-void
-waitdisk(void)
-{
-    7c80:	55                   	push   %ebp
-    7c81:	89 e5                	mov    %esp,%ebp
-static inline uchar
-inb(ushort port)
-{
-  uchar data;
-
-  asm volatile("in %1,%0" : "=a" (data) : "d" (port));
-    7c83:	ba f7 01 00 00       	mov    $0x1f7,%edx
-    7c88:	ec                   	in     (%dx),%al
-  // Wait for disk ready.
-  while((inb(0x1F7) & 0xC0) != 0x40)
-    7c89:	25 c0 00 00 00       	and    $0xc0,%eax
-    7c8e:	83 f8 40             	cmp    $0x40,%eax
-    7c91:	75 f5                	jne    7c88 <waitdisk+0x8>
-    ;
-}
-    7c93:	5d                   	pop    %ebp
-    7c94:	c3                   	ret    
-
-00007c95 <readsect>:
-
-// Read a single sector at offset into dst.
-void
-readsect(void *dst, uint offset)
-{
-    7c95:	55                   	push   %ebp
-    7c96:	89 e5                	mov    %esp,%ebp
-    7c98:	57                   	push   %edi
-    7c99:	8b 7d 0c             	mov    0xc(%ebp),%edi
-  // Issue command.
-  waitdisk();
-    7c9c:	e8 df ff ff ff       	call   7c80 <waitdisk>
-}
-
-static inline void
-outb(ushort port, uchar data)
-{
-  asm volatile("out %0,%1" : : "a" (data), "d" (port));
-    7ca1:	ba f2 01 00 00       	mov    $0x1f2,%edx
-    7ca6:	b8 01 00 00 00       	mov    $0x1,%eax
-    7cab:	ee                   	out    %al,(%dx)
-    7cac:	b2 f3                	mov    $0xf3,%dl
-    7cae:	89 f8                	mov    %edi,%eax
-    7cb0:	ee                   	out    %al,(%dx)
-  outb(0x1F2, 1);   // count = 1
-  outb(0x1F3, offset);
-  outb(0x1F4, offset >> 8);
-    7cb1:	89 f8                	mov    %edi,%eax
-    7cb3:	c1 e8 08             	shr    $0x8,%eax
-    7cb6:	b2 f4                	mov    $0xf4,%dl
-    7cb8:	ee                   	out    %al,(%dx)
-  outb(0x1F5, offset >> 16);
-    7cb9:	89 f8                	mov    %edi,%eax
-    7cbb:	c1 e8 10             	shr    $0x10,%eax
-    7cbe:	b2 f5                	mov    $0xf5,%dl
-    7cc0:	ee                   	out    %al,(%dx)
-  outb(0x1F6, (offset >> 24) | 0xE0);
-    7cc1:	c1 ef 18             	shr    $0x18,%edi
-    7cc4:	89 f8                	mov    %edi,%eax
-    7cc6:	83 c8 e0             	or     $0xffffffe0,%eax
-    7cc9:	b2 f6                	mov    $0xf6,%dl
-    7ccb:	ee                   	out    %al,(%dx)
-    7ccc:	b2 f7                	mov    $0xf7,%dl
-    7cce:	b8 20 00 00 00       	mov    $0x20,%eax
-    7cd3:	ee                   	out    %al,(%dx)
-  outb(0x1F7, 0x20);  // cmd 0x20 - read sectors
-
-  // Read data.
-  waitdisk();
-    7cd4:	e8 a7 ff ff ff       	call   7c80 <waitdisk>
-}
-
-static inline void
-insl(int port, void *addr, int cnt)
-{
-  asm volatile("cld; rep insl" :
-    7cd9:	8b 7d 08             	mov    0x8(%ebp),%edi
-    7cdc:	b9 80 00 00 00       	mov    $0x80,%ecx
-    7ce1:	ba f0 01 00 00       	mov    $0x1f0,%edx
-    7ce6:	fc                   	cld    
-    7ce7:	f3 6d                	rep insl (%dx),%es:(%edi)
-  insl(0x1F0, dst, SECTSIZE/4);
-}
-    7ce9:	5f                   	pop    %edi
-    7cea:	5d                   	pop    %ebp
-    7ceb:	c3                   	ret    
-
-00007cec <readseg>:
-
-// Read 'count' bytes at 'offset' from kernel into physical address 'pa'.
-// Might copy more than asked.
-void
-readseg(uchar* pa, uint count, uint offset)
-{
-    7cec:	55                   	push   %ebp
-    7ced:	89 e5                	mov    %esp,%ebp
-    7cef:	57                   	push   %edi
-    7cf0:	56                   	push   %esi
-    7cf1:	53                   	push   %ebx
-    7cf2:	83 ec 08             	sub    $0x8,%esp
-    7cf5:	8b 5d 08             	mov    0x8(%ebp),%ebx
-    7cf8:	8b 75 10             	mov    0x10(%ebp),%esi
-  uchar* epa;
-
-  epa = pa + count;
-    7cfb:	89 df                	mov    %ebx,%edi
-    7cfd:	03 7d 0c             	add    0xc(%ebp),%edi
-
-  // Round down to sector boundary.
-  pa -= offset % SECTSIZE;
-    7d00:	89 f0                	mov    %esi,%eax
-    7d02:	25 ff 01 00 00       	and    $0x1ff,%eax
-    7d07:	29 c3                	sub    %eax,%ebx
-  offset = (offset / SECTSIZE) + 1;
-
-  // If this is too slow, we could read lots of sectors at a time.
-  // We'd write more to memory than asked, but it doesn't matter --
-  // we load in increasing order.
-  for(; pa < epa; pa += SECTSIZE, offset++)
-    7d09:	39 df                	cmp    %ebx,%edi
-    7d0b:	76 1f                	jbe    7d2c <readseg+0x40>
-
-  // Round down to sector boundary.
-  pa -= offset % SECTSIZE;
-
-  // Translate from bytes to sectors; kernel starts at sector 1.
-  offset = (offset / SECTSIZE) + 1;
-    7d0d:	c1 ee 09             	shr    $0x9,%esi
-    7d10:	83 c6 01             	add    $0x1,%esi
-
-  // If this is too slow, we could read lots of sectors at a time.
-  // We'd write more to memory than asked, but it doesn't matter --
-  // we load in increasing order.
-  for(; pa < epa; pa += SECTSIZE, offset++)
-    readsect(pa, offset);
-    7d13:	89 74 24 04          	mov    %esi,0x4(%esp)
-    7d17:	89 1c 24             	mov    %ebx,(%esp)
-    7d1a:	e8 76 ff ff ff       	call   7c95 <readsect>
-  offset = (offset / SECTSIZE) + 1;
-
-  // If this is too slow, we could read lots of sectors at a time.
-  // We'd write more to memory than asked, but it doesn't matter --
-  // we load in increasing order.
-  for(; pa < epa; pa += SECTSIZE, offset++)
-    7d1f:	81 c3 00 02 00 00    	add    $0x200,%ebx
-    7d25:	83 c6 01             	add    $0x1,%esi
-    7d28:	39 df                	cmp    %ebx,%edi
-    7d2a:	77 e7                	ja     7d13 <readseg+0x27>
-    readsect(pa, offset);
-}
-    7d2c:	83 c4 08             	add    $0x8,%esp
-    7d2f:	5b                   	pop    %ebx
-    7d30:	5e                   	pop    %esi
-    7d31:	5f                   	pop    %edi
-    7d32:	5d                   	pop    %ebp
-    7d33:	c3                   	ret    
-
-00007d34 <bootmain>:
-
-void readseg(uchar*, uint, uint);
-
-void
-bootmain(void)
-{
-    7d34:	55                   	push   %ebp
-    7d35:	89 e5                	mov    %esp,%ebp
-    7d37:	57                   	push   %edi
-    7d38:	56                   	push   %esi
-    7d39:	53                   	push   %ebx
-    7d3a:	83 ec 2c             	sub    $0x2c,%esp
-  uchar* pa;
-
-  elf = (struct elfhdr*)0x10000;  // scratch space
-
-  // Read 1st page off disk
-  readseg((uchar*)elf, 4096, 0);
-    7d3d:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
-    7d44:	00 
-    7d45:	c7 44 24 04 00 10 00 	movl   $0x1000,0x4(%esp)
-    7d4c:	00 
-    7d4d:	c7 04 24 00 00 01 00 	movl   $0x10000,(%esp)
-    7d54:	e8 93 ff ff ff       	call   7cec <readseg>
-
-  // Is this an ELF executable?
-  if(elf->magic != ELF_MAGIC)
-    7d59:	81 3d 00 00 01 00 7f 	cmpl   $0x464c457f,0x10000
-    7d60:	45 4c 46 
-    7d63:	75 5d                	jne    7dc2 <bootmain+0x8e>
-    return;  // let bootasm.S handle error
-
-  // Load each program segment (ignores ph flags).
-  ph = (struct proghdr*)((uchar*)elf + elf->phoff);
-    7d65:	8b 1d 1c 00 01 00    	mov    0x1001c,%ebx
-    7d6b:	81 c3 00 00 01 00    	add    $0x10000,%ebx
-  eph = ph + elf->phnum;
-    7d71:	0f b7 05 2c 00 01 00 	movzwl 0x1002c,%eax
-    7d78:	c1 e0 05             	shl    $0x5,%eax
-    7d7b:	01 d8                	add    %ebx,%eax
-    7d7d:	89 45 e4             	mov    %eax,-0x1c(%ebp)
-  for(; ph < eph; ph++){
-    7d80:	39 c3                	cmp    %eax,%ebx
-    7d82:	73 38                	jae    7dbc <bootmain+0x88>
-    pa = (uchar*)ph->paddr;
-    7d84:	8b 73 0c             	mov    0xc(%ebx),%esi
-    readseg(pa, ph->filesz, ph->off);
-    7d87:	8b 43 04             	mov    0x4(%ebx),%eax
-    7d8a:	89 44 24 08          	mov    %eax,0x8(%esp)
-    7d8e:	8b 43 10             	mov    0x10(%ebx),%eax
-    7d91:	89 44 24 04          	mov    %eax,0x4(%esp)
-    7d95:	89 34 24             	mov    %esi,(%esp)
-    7d98:	e8 4f ff ff ff       	call   7cec <readseg>
-    if(ph->memsz > ph->filesz)
-    7d9d:	8b 4b 14             	mov    0x14(%ebx),%ecx
-    7da0:	8b 43 10             	mov    0x10(%ebx),%eax
-    7da3:	39 c1                	cmp    %eax,%ecx
-    7da5:	76 0d                	jbe    7db4 <bootmain+0x80>
-      stosb(pa + ph->filesz, 0, ph->memsz - ph->filesz);
-    7da7:	8d 3c 06             	lea    (%esi,%eax,1),%edi
-    7daa:	29 c1                	sub    %eax,%ecx
-}
-
-static inline void
-stosb(void *addr, int data, int cnt)
-{
-  asm volatile("cld; rep stosb" :
-    7dac:	b8 00 00 00 00       	mov    $0x0,%eax
-    7db1:	fc                   	cld    
-    7db2:	f3 aa                	rep stos %al,%es:(%edi)
-    return;  // let bootasm.S handle error
-
-  // Load each program segment (ignores ph flags).
-  ph = (struct proghdr*)((uchar*)elf + elf->phoff);
-  eph = ph + elf->phnum;
-  for(; ph < eph; ph++){
-    7db4:	83 c3 20             	add    $0x20,%ebx
-    7db7:	39 5d e4             	cmp    %ebx,-0x1c(%ebp)
-    7dba:	77 c8                	ja     7d84 <bootmain+0x50>
-  }
-
-  // Call the entry point from the ELF header.
-  // Does not return!
-  entry = (void(*)(void))(elf->entry);
-  entry();
-    7dbc:	ff 15 18 00 01 00    	call   *0x10018
-}
-    7dc2:	83 c4 2c             	add    $0x2c,%esp
-    7dc5:	5b                   	pop    %ebx
-    7dc6:	5e                   	pop    %esi
-    7dc7:	5f                   	pop    %edi
-    7dc8:	5d                   	pop    %ebp
-    7dc9:	c3                   	ret    
diff --git a/xv6/bootmain.c b/xv6/bootmain.c
deleted file mode 100644
index d24bf66..0000000
--- a/xv6/bootmain.c
+++ /dev/null
@@ -1,96 +0,0 @@
-// Boot loader.
-// 
-// Part of the boot sector, along with bootasm.S, which calls bootmain().
-// bootasm.S has put the processor into protected 32-bit mode.
-// bootmain() loads an ELF kernel image from the disk starting at
-// sector 1 and then jumps to the kernel entry routine.
-
-#include "types.h"
-#include "elf.h"
-#include "x86.h"
-#include "memlayout.h"
-
-#define SECTSIZE  512
-
-void readseg(uchar*, uint, uint);
-
-void
-bootmain(void)
-{
-  struct elfhdr *elf;
-  struct proghdr *ph, *eph;
-  void (*entry)(void);
-  uchar* pa;
-
-  elf = (struct elfhdr*)0x10000;  // scratch space
-
-  // Read 1st page off disk
-  readseg((uchar*)elf, 4096, 0);
-
-  // Is this an ELF executable?
-  if(elf->magic != ELF_MAGIC)
-    return;  // let bootasm.S handle error
-
-  // Load each program segment (ignores ph flags).
-  ph = (struct proghdr*)((uchar*)elf + elf->phoff);
-  eph = ph + elf->phnum;
-  for(; ph < eph; ph++){
-    pa = (uchar*)ph->paddr;
-    readseg(pa, ph->filesz, ph->off);
-    if(ph->memsz > ph->filesz)
-      stosb(pa + ph->filesz, 0, ph->memsz - ph->filesz);
-  }
-
-  // Call the entry point from the ELF header.
-  // Does not return!
-  entry = (void(*)(void))(elf->entry);
-  entry();
-}
-
-void
-waitdisk(void)
-{
-  // Wait for disk ready.
-  while((inb(0x1F7) & 0xC0) != 0x40)
-    ;
-}
-
-// Read a single sector at offset into dst.
-void
-readsect(void *dst, uint offset)
-{
-  // Issue command.
-  waitdisk();
-  outb(0x1F2, 1);   // count = 1
-  outb(0x1F3, offset);
-  outb(0x1F4, offset >> 8);
-  outb(0x1F5, offset >> 16);
-  outb(0x1F6, (offset >> 24) | 0xE0);
-  outb(0x1F7, 0x20);  // cmd 0x20 - read sectors
-
-  // Read data.
-  waitdisk();
-  insl(0x1F0, dst, SECTSIZE/4);
-}
-
-// Read 'count' bytes at 'offset' from kernel into physical address 'pa'.
-// Might copy more than asked.
-void
-readseg(uchar* pa, uint count, uint offset)
-{
-  uchar* epa;
-
-  epa = pa + count;
-
-  // Round down to sector boundary.
-  pa -= offset % SECTSIZE;
-
-  // Translate from bytes to sectors; kernel starts at sector 1.
-  offset = (offset / SECTSIZE) + 1;
-
-  // If this is too slow, we could read lots of sectors at a time.
-  // We'd write more to memory than asked, but it doesn't matter --
-  // we load in increasing order.
-  for(; pa < epa; pa += SECTSIZE, offset++)
-    readsect(pa, offset);
-}
diff --git a/xv6/bootmain.d b/xv6/bootmain.d
deleted file mode 100644
index b32eaf5..0000000
--- a/xv6/bootmain.d
+++ /dev/null
@@ -1 +0,0 @@
-bootmain.o: bootmain.c types.h elf.h x86.h memlayout.h
diff --git a/xv6/buf.h b/xv6/buf.h
deleted file mode 100644
index 9c586f2..0000000
--- a/xv6/buf.h
+++ /dev/null
@@ -1,13 +0,0 @@
-struct buf {
-  int flags;
-  uint dev;
-  uint sector;
-  struct buf *prev; // LRU cache list
-  struct buf *next;
-  struct buf *qnext; // disk queue
-  uchar data[512];
-};
-#define B_BUSY  0x1  // buffer is locked by some process
-#define B_VALID 0x2  // buffer has been read from disk
-#define B_DIRTY 0x4  // buffer needs to be written to disk
-
diff --git a/xv6/cat.asm b/xv6/cat.asm
deleted file mode 100644
index 0fbd5de..0000000
--- a/xv6/cat.asm
+++ /dev/null
@@ -1,1290 +0,0 @@
-
-_cat:     file format elf32-i386
-
-
-Disassembly of section .text:
-
-00000000 <cat>:
-
-char buf[512];
-
-void
-cat(int fd)
-{
-   0:	55                   	push   %ebp
-   1:	89 e5                	mov    %esp,%ebp
-   3:	83 ec 28             	sub    $0x28,%esp
-  int n;
-
-  while((n = read(fd, buf, sizeof(buf))) > 0)
-   6:	eb 1b                	jmp    23 <cat+0x23>
-    write(1, buf, n);
-   8:	8b 45 f4             	mov    -0xc(%ebp),%eax
-   b:	89 44 24 08          	mov    %eax,0x8(%esp)
-   f:	c7 44 24 04 c0 0b 00 	movl   $0xbc0,0x4(%esp)
-  16:	00 
-  17:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
-  1e:	e8 8d 03 00 00       	call   3b0 <write>
-void
-cat(int fd)
-{
-  int n;
-
-  while((n = read(fd, buf, sizeof(buf))) > 0)
-  23:	c7 44 24 08 00 02 00 	movl   $0x200,0x8(%esp)
-  2a:	00 
-  2b:	c7 44 24 04 c0 0b 00 	movl   $0xbc0,0x4(%esp)
-  32:	00 
-  33:	8b 45 08             	mov    0x8(%ebp),%eax
-  36:	89 04 24             	mov    %eax,(%esp)
-  39:	e8 6a 03 00 00       	call   3a8 <read>
-  3e:	89 45 f4             	mov    %eax,-0xc(%ebp)
-  41:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
-  45:	7f c1                	jg     8 <cat+0x8>
-    write(1, buf, n);
-  if(n < 0){
-  47:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
-  4b:	79 20                	jns    6d <cat+0x6d>
-    printf(1, "cat: read error\n");
-  4d:	c7 44 24 04 f3 08 00 	movl   $0x8f3,0x4(%esp)
-  54:	00 
-  55:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
-  5c:	e8 ce 04 00 00       	call   52f <printf>
-    exit(EXIT_STATUS_FAILURE);
-  61:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
-  68:	e8 23 03 00 00       	call   390 <exit>
-  }
-}
-  6d:	c9                   	leave  
-  6e:	c3                   	ret    
-
-0000006f <main>:
-
-int
-main(int argc, char *argv[])
-{
-  6f:	55                   	push   %ebp
-  70:	89 e5                	mov    %esp,%ebp
-  72:	83 e4 f0             	and    $0xfffffff0,%esp
-  75:	83 ec 20             	sub    $0x20,%esp
-  int fd, i;
-
-  if(argc <= 1){
-  78:	83 7d 08 01          	cmpl   $0x1,0x8(%ebp)
-  7c:	7f 18                	jg     96 <main+0x27>
-    cat(0);
-  7e:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
-  85:	e8 76 ff ff ff       	call   0 <cat>
-    exit(EXIT_STATUS_FAILURE);
-  8a:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
-  91:	e8 fa 02 00 00       	call   390 <exit>
-  }
-
-  for(i = 1; i < argc; i++){
-  96:	c7 44 24 1c 01 00 00 	movl   $0x1,0x1c(%esp)
-  9d:	00 
-  9e:	eb 74                	jmp    114 <main+0xa5>
-    if((fd = open(argv[i], 0)) < 0){
-  a0:	8b 44 24 1c          	mov    0x1c(%esp),%eax
-  a4:	c1 e0 02             	shl    $0x2,%eax
-  a7:	03 45 0c             	add    0xc(%ebp),%eax
-  aa:	8b 00                	mov    (%eax),%eax
-  ac:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
-  b3:	00 
-  b4:	89 04 24             	mov    %eax,(%esp)
-  b7:	e8 14 03 00 00       	call   3d0 <open>
-  bc:	89 44 24 18          	mov    %eax,0x18(%esp)
-  c0:	83 7c 24 18 00       	cmpl   $0x0,0x18(%esp)
-  c5:	79 30                	jns    f7 <main+0x88>
-      printf(1, "cat: cannot open %s\n", argv[i]);
-  c7:	8b 44 24 1c          	mov    0x1c(%esp),%eax
-  cb:	c1 e0 02             	shl    $0x2,%eax
-  ce:	03 45 0c             	add    0xc(%ebp),%eax
-  d1:	8b 00                	mov    (%eax),%eax
-  d3:	89 44 24 08          	mov    %eax,0x8(%esp)
-  d7:	c7 44 24 04 04 09 00 	movl   $0x904,0x4(%esp)
-  de:	00 
-  df:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
-  e6:	e8 44 04 00 00       	call   52f <printf>
-      exit(EXIT_STATUS_FAILURE);
-  eb:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
-  f2:	e8 99 02 00 00       	call   390 <exit>
-    }
-    cat(fd);
-  f7:	8b 44 24 18          	mov    0x18(%esp),%eax
-  fb:	89 04 24             	mov    %eax,(%esp)
-  fe:	e8 fd fe ff ff       	call   0 <cat>
-    close(fd);
- 103:	8b 44 24 18          	mov    0x18(%esp),%eax
- 107:	89 04 24             	mov    %eax,(%esp)
- 10a:	e8 a9 02 00 00       	call   3b8 <close>
-  if(argc <= 1){
-    cat(0);
-    exit(EXIT_STATUS_FAILURE);
-  }
-
-  for(i = 1; i < argc; i++){
- 10f:	83 44 24 1c 01       	addl   $0x1,0x1c(%esp)
- 114:	8b 44 24 1c          	mov    0x1c(%esp),%eax
- 118:	3b 45 08             	cmp    0x8(%ebp),%eax
- 11b:	7c 83                	jl     a0 <main+0x31>
-      exit(EXIT_STATUS_FAILURE);
-    }
-    cat(fd);
-    close(fd);
-  }
-  exit(EXIT_STATUS_SUCCESS);
- 11d:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
- 124:	e8 67 02 00 00       	call   390 <exit>
- 129:	90                   	nop
- 12a:	90                   	nop
- 12b:	90                   	nop
-
-0000012c <stosb>:
-               "cc");
-}
-
-static inline void
-stosb(void *addr, int data, int cnt)
-{
- 12c:	55                   	push   %ebp
- 12d:	89 e5                	mov    %esp,%ebp
- 12f:	57                   	push   %edi
- 130:	53                   	push   %ebx
-  asm volatile("cld; rep stosb" :
- 131:	8b 4d 08             	mov    0x8(%ebp),%ecx
- 134:	8b 55 10             	mov    0x10(%ebp),%edx
- 137:	8b 45 0c             	mov    0xc(%ebp),%eax
- 13a:	89 cb                	mov    %ecx,%ebx
- 13c:	89 df                	mov    %ebx,%edi
- 13e:	89 d1                	mov    %edx,%ecx
- 140:	fc                   	cld    
- 141:	f3 aa                	rep stos %al,%es:(%edi)
- 143:	89 ca                	mov    %ecx,%edx
- 145:	89 fb                	mov    %edi,%ebx
- 147:	89 5d 08             	mov    %ebx,0x8(%ebp)
- 14a:	89 55 10             	mov    %edx,0x10(%ebp)
-               "=D" (addr), "=c" (cnt) :
-               "0" (addr), "1" (cnt), "a" (data) :
-               "memory", "cc");
-}
- 14d:	5b                   	pop    %ebx
- 14e:	5f                   	pop    %edi
- 14f:	5d                   	pop    %ebp
- 150:	c3                   	ret    
-
-00000151 <strcpy>:
-#include "user.h"
-#include "x86.h"
-
-char*
-strcpy(char *s, char *t)
-{
- 151:	55                   	push   %ebp
- 152:	89 e5                	mov    %esp,%ebp
- 154:	83 ec 10             	sub    $0x10,%esp
-  char *os;
-
-  os = s;
- 157:	8b 45 08             	mov    0x8(%ebp),%eax
- 15a:	89 45 fc             	mov    %eax,-0x4(%ebp)
-  while((*s++ = *t++) != 0)
- 15d:	90                   	nop
- 15e:	8b 45 0c             	mov    0xc(%ebp),%eax
- 161:	0f b6 10             	movzbl (%eax),%edx
- 164:	8b 45 08             	mov    0x8(%ebp),%eax
- 167:	88 10                	mov    %dl,(%eax)
- 169:	8b 45 08             	mov    0x8(%ebp),%eax
- 16c:	0f b6 00             	movzbl (%eax),%eax
- 16f:	84 c0                	test   %al,%al
- 171:	0f 95 c0             	setne  %al
- 174:	83 45 08 01          	addl   $0x1,0x8(%ebp)
- 178:	83 45 0c 01          	addl   $0x1,0xc(%ebp)
- 17c:	84 c0                	test   %al,%al
- 17e:	75 de                	jne    15e <strcpy+0xd>
-    ;
-  return os;
- 180:	8b 45 fc             	mov    -0x4(%ebp),%eax
-}
- 183:	c9                   	leave  
- 184:	c3                   	ret    
-
-00000185 <strcmp>:
-
-int
-strcmp(const char *p, const char *q)
-{
- 185:	55                   	push   %ebp
- 186:	89 e5                	mov    %esp,%ebp
-  while(*p && *p == *q)
- 188:	eb 08                	jmp    192 <strcmp+0xd>
-    p++, q++;
- 18a:	83 45 08 01          	addl   $0x1,0x8(%ebp)
- 18e:	83 45 0c 01          	addl   $0x1,0xc(%ebp)
-}
-
-int
-strcmp(const char *p, const char *q)
-{
-  while(*p && *p == *q)
- 192:	8b 45 08             	mov    0x8(%ebp),%eax
- 195:	0f b6 00             	movzbl (%eax),%eax
- 198:	84 c0                	test   %al,%al
- 19a:	74 10                	je     1ac <strcmp+0x27>
- 19c:	8b 45 08             	mov    0x8(%ebp),%eax
- 19f:	0f b6 10             	movzbl (%eax),%edx
- 1a2:	8b 45 0c             	mov    0xc(%ebp),%eax
- 1a5:	0f b6 00             	movzbl (%eax),%eax
- 1a8:	38 c2                	cmp    %al,%dl
- 1aa:	74 de                	je     18a <strcmp+0x5>
-    p++, q++;
-  return (uchar)*p - (uchar)*q;
- 1ac:	8b 45 08             	mov    0x8(%ebp),%eax
- 1af:	0f b6 00             	movzbl (%eax),%eax
- 1b2:	0f b6 d0             	movzbl %al,%edx
- 1b5:	8b 45 0c             	mov    0xc(%ebp),%eax
- 1b8:	0f b6 00             	movzbl (%eax),%eax
- 1bb:	0f b6 c0             	movzbl %al,%eax
- 1be:	89 d1                	mov    %edx,%ecx
- 1c0:	29 c1                	sub    %eax,%ecx
- 1c2:	89 c8                	mov    %ecx,%eax
-}
- 1c4:	5d                   	pop    %ebp
- 1c5:	c3                   	ret    
-
-000001c6 <strlen>:
-
-uint
-strlen(char *s)
-{
- 1c6:	55                   	push   %ebp
- 1c7:	89 e5                	mov    %esp,%ebp
- 1c9:	83 ec 10             	sub    $0x10,%esp
-  int n;
-
-  for(n = 0; s[n]; n++)
- 1cc:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
- 1d3:	eb 04                	jmp    1d9 <strlen+0x13>
- 1d5:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
- 1d9:	8b 45 fc             	mov    -0x4(%ebp),%eax
- 1dc:	03 45 08             	add    0x8(%ebp),%eax
- 1df:	0f b6 00             	movzbl (%eax),%eax
- 1e2:	84 c0                	test   %al,%al
- 1e4:	75 ef                	jne    1d5 <strlen+0xf>
-    ;
-  return n;
- 1e6:	8b 45 fc             	mov    -0x4(%ebp),%eax
-}
- 1e9:	c9                   	leave  
- 1ea:	c3                   	ret    
-
-000001eb <memset>:
-
-void*
-memset(void *dst, int c, uint n)
-{
- 1eb:	55                   	push   %ebp
- 1ec:	89 e5                	mov    %esp,%ebp
- 1ee:	83 ec 0c             	sub    $0xc,%esp
-  stosb(dst, c, n);
- 1f1:	8b 45 10             	mov    0x10(%ebp),%eax
- 1f4:	89 44 24 08          	mov    %eax,0x8(%esp)
- 1f8:	8b 45 0c             	mov    0xc(%ebp),%eax
- 1fb:	89 44 24 04          	mov    %eax,0x4(%esp)
- 1ff:	8b 45 08             	mov    0x8(%ebp),%eax
- 202:	89 04 24             	mov    %eax,(%esp)
- 205:	e8 22 ff ff ff       	call   12c <stosb>
-  return dst;
- 20a:	8b 45 08             	mov    0x8(%ebp),%eax
-}
- 20d:	c9                   	leave  
- 20e:	c3                   	ret    
-
-0000020f <strchr>:
-
-char*
-strchr(const char *s, char c)
-{
- 20f:	55                   	push   %ebp
- 210:	89 e5                	mov    %esp,%ebp
- 212:	83 ec 04             	sub    $0x4,%esp
- 215:	8b 45 0c             	mov    0xc(%ebp),%eax
- 218:	88 45 fc             	mov    %al,-0x4(%ebp)
-  for(; *s; s++)
- 21b:	eb 14                	jmp    231 <strchr+0x22>
-    if(*s == c)
- 21d:	8b 45 08             	mov    0x8(%ebp),%eax
- 220:	0f b6 00             	movzbl (%eax),%eax
- 223:	3a 45 fc             	cmp    -0x4(%ebp),%al
- 226:	75 05                	jne    22d <strchr+0x1e>
-      return (char*)s;
- 228:	8b 45 08             	mov    0x8(%ebp),%eax
- 22b:	eb 13                	jmp    240 <strchr+0x31>
-}
-
-char*
-strchr(const char *s, char c)
-{
-  for(; *s; s++)
- 22d:	83 45 08 01          	addl   $0x1,0x8(%ebp)
- 231:	8b 45 08             	mov    0x8(%ebp),%eax
- 234:	0f b6 00             	movzbl (%eax),%eax
- 237:	84 c0                	test   %al,%al
- 239:	75 e2                	jne    21d <strchr+0xe>
-    if(*s == c)
-      return (char*)s;
-  return 0;
- 23b:	b8 00 00 00 00       	mov    $0x0,%eax
-}
- 240:	c9                   	leave  
- 241:	c3                   	ret    
-
-00000242 <gets>:
-
-char*
-gets(char *buf, int max)
-{
- 242:	55                   	push   %ebp
- 243:	89 e5                	mov    %esp,%ebp
- 245:	83 ec 28             	sub    $0x28,%esp
-  int i, cc;
-  char c;
-
-  for(i=0; i+1 < max; ){
- 248:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
- 24f:	eb 44                	jmp    295 <gets+0x53>
-    cc = read(0, &c, 1);
- 251:	c7 44 24 08 01 00 00 	movl   $0x1,0x8(%esp)
- 258:	00 
- 259:	8d 45 ef             	lea    -0x11(%ebp),%eax
- 25c:	89 44 24 04          	mov    %eax,0x4(%esp)
- 260:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
- 267:	e8 3c 01 00 00       	call   3a8 <read>
- 26c:	89 45 f0             	mov    %eax,-0x10(%ebp)
-    if(cc < 1)
- 26f:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
- 273:	7e 2d                	jle    2a2 <gets+0x60>
-      break;
-    buf[i++] = c;
- 275:	8b 45 f4             	mov    -0xc(%ebp),%eax
- 278:	03 45 08             	add    0x8(%ebp),%eax
- 27b:	0f b6 55 ef          	movzbl -0x11(%ebp),%edx
- 27f:	88 10                	mov    %dl,(%eax)
- 281:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
-    if(c == '\n' || c == '\r')
- 285:	0f b6 45 ef          	movzbl -0x11(%ebp),%eax
- 289:	3c 0a                	cmp    $0xa,%al
- 28b:	74 16                	je     2a3 <gets+0x61>
- 28d:	0f b6 45 ef          	movzbl -0x11(%ebp),%eax
- 291:	3c 0d                	cmp    $0xd,%al
- 293:	74 0e                	je     2a3 <gets+0x61>
-gets(char *buf, int max)
-{
-  int i, cc;
-  char c;
-
-  for(i=0; i+1 < max; ){
- 295:	8b 45 f4             	mov    -0xc(%ebp),%eax
- 298:	83 c0 01             	add    $0x1,%eax
- 29b:	3b 45 0c             	cmp    0xc(%ebp),%eax
- 29e:	7c b1                	jl     251 <gets+0xf>
- 2a0:	eb 01                	jmp    2a3 <gets+0x61>
-    cc = read(0, &c, 1);
-    if(cc < 1)
-      break;
- 2a2:	90                   	nop
-    buf[i++] = c;
-    if(c == '\n' || c == '\r')
-      break;
-  }
-  buf[i] = '\0';
- 2a3:	8b 45 f4             	mov    -0xc(%ebp),%eax
- 2a6:	03 45 08             	add    0x8(%ebp),%eax
- 2a9:	c6 00 00             	movb   $0x0,(%eax)
-  return buf;
- 2ac:	8b 45 08             	mov    0x8(%ebp),%eax
-}
- 2af:	c9                   	leave  
- 2b0:	c3                   	ret    
-
-000002b1 <stat>:
-
-int
-stat(char *n, struct stat *st)
-{
- 2b1:	55                   	push   %ebp
- 2b2:	89 e5                	mov    %esp,%ebp
- 2b4:	83 ec 28             	sub    $0x28,%esp
-  int fd;
-  int r;
-
-  fd = open(n, O_RDONLY);
- 2b7:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
- 2be:	00 
- 2bf:	8b 45 08             	mov    0x8(%ebp),%eax
- 2c2:	89 04 24             	mov    %eax,(%esp)
- 2c5:	e8 06 01 00 00       	call   3d0 <open>
- 2ca:	89 45 f4             	mov    %eax,-0xc(%ebp)
-  if(fd < 0)
- 2cd:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
- 2d1:	79 07                	jns    2da <stat+0x29>
-    return -1;
- 2d3:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
- 2d8:	eb 23                	jmp    2fd <stat+0x4c>
-  r = fstat(fd, st);
- 2da:	8b 45 0c             	mov    0xc(%ebp),%eax
- 2dd:	89 44 24 04          	mov    %eax,0x4(%esp)
- 2e1:	8b 45 f4             	mov    -0xc(%ebp),%eax
- 2e4:	89 04 24             	mov    %eax,(%esp)
- 2e7:	e8 fc 00 00 00       	call   3e8 <fstat>
- 2ec:	89 45 f0             	mov    %eax,-0x10(%ebp)
-  close(fd);
- 2ef:	8b 45 f4             	mov    -0xc(%ebp),%eax
- 2f2:	89 04 24             	mov    %eax,(%esp)
- 2f5:	e8 be 00 00 00       	call   3b8 <close>
-  return r;
- 2fa:	8b 45 f0             	mov    -0x10(%ebp),%eax
-}
- 2fd:	c9                   	leave  
- 2fe:	c3                   	ret    
-
-000002ff <atoi>:
-
-int
-atoi(const char *s)
-{
- 2ff:	55                   	push   %ebp
- 300:	89 e5                	mov    %esp,%ebp
- 302:	83 ec 10             	sub    $0x10,%esp
-  int n;
-
-  n = 0;
- 305:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
-  while('0' <= *s && *s <= '9')
- 30c:	eb 23                	jmp    331 <atoi+0x32>
-    n = n*10 + *s++ - '0';
- 30e:	8b 55 fc             	mov    -0x4(%ebp),%edx
- 311:	89 d0                	mov    %edx,%eax
- 313:	c1 e0 02             	shl    $0x2,%eax
- 316:	01 d0                	add    %edx,%eax
- 318:	01 c0                	add    %eax,%eax
- 31a:	89 c2                	mov    %eax,%edx
- 31c:	8b 45 08             	mov    0x8(%ebp),%eax
- 31f:	0f b6 00             	movzbl (%eax),%eax
- 322:	0f be c0             	movsbl %al,%eax
- 325:	01 d0                	add    %edx,%eax
- 327:	83 e8 30             	sub    $0x30,%eax
- 32a:	89 45 fc             	mov    %eax,-0x4(%ebp)
- 32d:	83 45 08 01          	addl   $0x1,0x8(%ebp)
-atoi(const char *s)
-{
-  int n;
-
-  n = 0;
-  while('0' <= *s && *s <= '9')
- 331:	8b 45 08             	mov    0x8(%ebp),%eax
- 334:	0f b6 00             	movzbl (%eax),%eax
- 337:	3c 2f                	cmp    $0x2f,%al
- 339:	7e 0a                	jle    345 <atoi+0x46>
- 33b:	8b 45 08             	mov    0x8(%ebp),%eax
- 33e:	0f b6 00             	movzbl (%eax),%eax
- 341:	3c 39                	cmp    $0x39,%al
- 343:	7e c9                	jle    30e <atoi+0xf>
-    n = n*10 + *s++ - '0';
-  return n;
- 345:	8b 45 fc             	mov    -0x4(%ebp),%eax
-}
- 348:	c9                   	leave  
- 349:	c3                   	ret    
-
-0000034a <memmove>:
-
-void*
-memmove(void *vdst, void *vsrc, int n)
-{
- 34a:	55                   	push   %ebp
- 34b:	89 e5                	mov    %esp,%ebp
- 34d:	83 ec 10             	sub    $0x10,%esp
-  char *dst, *src;
-  
-  dst = vdst;
- 350:	8b 45 08             	mov    0x8(%ebp),%eax
- 353:	89 45 fc             	mov    %eax,-0x4(%ebp)
-  src = vsrc;
- 356:	8b 45 0c             	mov    0xc(%ebp),%eax
- 359:	89 45 f8             	mov    %eax,-0x8(%ebp)
-  while(n-- > 0)
- 35c:	eb 13                	jmp    371 <memmove+0x27>
-    *dst++ = *src++;
- 35e:	8b 45 f8             	mov    -0x8(%ebp),%eax
- 361:	0f b6 10             	movzbl (%eax),%edx
- 364:	8b 45 fc             	mov    -0x4(%ebp),%eax
- 367:	88 10                	mov    %dl,(%eax)
- 369:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
- 36d:	83 45 f8 01          	addl   $0x1,-0x8(%ebp)
-{
-  char *dst, *src;
-  
-  dst = vdst;
-  src = vsrc;
-  while(n-- > 0)
- 371:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
- 375:	0f 9f c0             	setg   %al
- 378:	83 6d 10 01          	subl   $0x1,0x10(%ebp)
- 37c:	84 c0                	test   %al,%al
- 37e:	75 de                	jne    35e <memmove+0x14>
-    *dst++ = *src++;
-  return vdst;
- 380:	8b 45 08             	mov    0x8(%ebp),%eax
-}
- 383:	c9                   	leave  
- 384:	c3                   	ret    
- 385:	90                   	nop
- 386:	90                   	nop
- 387:	90                   	nop
-
-00000388 <fork>:
-  name: \
-    movl $SYS_ ## name, %eax; \
-    int $T_SYSCALL; \
-    ret
-
-SYSCALL(fork)
- 388:	b8 01 00 00 00       	mov    $0x1,%eax
- 38d:	cd 40                	int    $0x40
- 38f:	c3                   	ret    
-
-00000390 <exit>:
-SYSCALL(exit)
- 390:	b8 02 00 00 00       	mov    $0x2,%eax
- 395:	cd 40                	int    $0x40
- 397:	c3                   	ret    
-
-00000398 <wait>:
-SYSCALL(wait)
- 398:	b8 03 00 00 00       	mov    $0x3,%eax
- 39d:	cd 40                	int    $0x40
- 39f:	c3                   	ret    
-
-000003a0 <pipe>:
-SYSCALL(pipe)
- 3a0:	b8 04 00 00 00       	mov    $0x4,%eax
- 3a5:	cd 40                	int    $0x40
- 3a7:	c3                   	ret    
-
-000003a8 <read>:
-SYSCALL(read)
- 3a8:	b8 05 00 00 00       	mov    $0x5,%eax
- 3ad:	cd 40                	int    $0x40
- 3af:	c3                   	ret    
-
-000003b0 <write>:
-SYSCALL(write)
- 3b0:	b8 10 00 00 00       	mov    $0x10,%eax
- 3b5:	cd 40                	int    $0x40
- 3b7:	c3                   	ret    
-
-000003b8 <close>:
-SYSCALL(close)
- 3b8:	b8 15 00 00 00       	mov    $0x15,%eax
- 3bd:	cd 40                	int    $0x40
- 3bf:	c3                   	ret    
-
-000003c0 <kill>:
-SYSCALL(kill)
- 3c0:	b8 06 00 00 00       	mov    $0x6,%eax
- 3c5:	cd 40                	int    $0x40
- 3c7:	c3                   	ret    
-
-000003c8 <exec>:
-SYSCALL(exec)
- 3c8:	b8 07 00 00 00       	mov    $0x7,%eax
- 3cd:	cd 40                	int    $0x40
- 3cf:	c3                   	ret    
-
-000003d0 <open>:
-SYSCALL(open)
- 3d0:	b8 0f 00 00 00       	mov    $0xf,%eax
- 3d5:	cd 40                	int    $0x40
- 3d7:	c3                   	ret    
-
-000003d8 <mknod>:
-SYSCALL(mknod)
- 3d8:	b8 11 00 00 00       	mov    $0x11,%eax
- 3dd:	cd 40                	int    $0x40
- 3df:	c3                   	ret    
-
-000003e0 <unlink>:
-SYSCALL(unlink)
- 3e0:	b8 12 00 00 00       	mov    $0x12,%eax
- 3e5:	cd 40                	int    $0x40
- 3e7:	c3                   	ret    
-
-000003e8 <fstat>:
-SYSCALL(fstat)
- 3e8:	b8 08 00 00 00       	mov    $0x8,%eax
- 3ed:	cd 40                	int    $0x40
- 3ef:	c3                   	ret    
-
-000003f0 <link>:
-SYSCALL(link)
- 3f0:	b8 13 00 00 00       	mov    $0x13,%eax
- 3f5:	cd 40                	int    $0x40
- 3f7:	c3                   	ret    
-
-000003f8 <mkdir>:
-SYSCALL(mkdir)
- 3f8:	b8 14 00 00 00       	mov    $0x14,%eax
- 3fd:	cd 40                	int    $0x40
- 3ff:	c3                   	ret    
-
-00000400 <chdir>:
-SYSCALL(chdir)
- 400:	b8 09 00 00 00       	mov    $0x9,%eax
- 405:	cd 40                	int    $0x40
- 407:	c3                   	ret    
-
-00000408 <dup>:
-SYSCALL(dup)
- 408:	b8 0a 00 00 00       	mov    $0xa,%eax
- 40d:	cd 40                	int    $0x40
- 40f:	c3                   	ret    
-
-00000410 <getpid>:
-SYSCALL(getpid)
- 410:	b8 0b 00 00 00       	mov    $0xb,%eax
- 415:	cd 40                	int    $0x40
- 417:	c3                   	ret    
-
-00000418 <sbrk>:
-SYSCALL(sbrk)
- 418:	b8 0c 00 00 00       	mov    $0xc,%eax
- 41d:	cd 40                	int    $0x40
- 41f:	c3                   	ret    
-
-00000420 <sleep>:
-SYSCALL(sleep)
- 420:	b8 0d 00 00 00       	mov    $0xd,%eax
- 425:	cd 40                	int    $0x40
- 427:	c3                   	ret    
-
-00000428 <uptime>:
-SYSCALL(uptime)
- 428:	b8 0e 00 00 00       	mov    $0xe,%eax
- 42d:	cd 40                	int    $0x40
- 42f:	c3                   	ret    
-
-00000430 <waitpid>:
-SYSCALL(waitpid)
- 430:	b8 16 00 00 00       	mov    $0x16,%eax
- 435:	cd 40                	int    $0x40
- 437:	c3                   	ret    
-
-00000438 <wait_stat>:
-SYSCALL(wait_stat)
- 438:	b8 17 00 00 00       	mov    $0x17,%eax
- 43d:	cd 40                	int    $0x40
- 43f:	c3                   	ret    
-
-00000440 <list_pgroup>:
-SYSCALL(list_pgroup)
- 440:	b8 18 00 00 00       	mov    $0x18,%eax
- 445:	cd 40                	int    $0x40
- 447:	c3                   	ret    
-
-00000448 <foreground>:
-SYSCALL(foreground)
- 448:	b8 19 00 00 00       	mov    $0x19,%eax
- 44d:	cd 40                	int    $0x40
- 44f:	c3                   	ret    
-
-00000450 <set_priority>:
-SYSCALL(set_priority)
- 450:	b8 1a 00 00 00       	mov    $0x1a,%eax
- 455:	cd 40                	int    $0x40
- 457:	c3                   	ret    
-
-00000458 <putc>:
-#include "stat.h"
-#include "user.h"
-
-static void
-putc(int fd, char c)
-{
- 458:	55                   	push   %ebp
- 459:	89 e5                	mov    %esp,%ebp
- 45b:	83 ec 28             	sub    $0x28,%esp
- 45e:	8b 45 0c             	mov    0xc(%ebp),%eax
- 461:	88 45 f4             	mov    %al,-0xc(%ebp)
-  write(fd, &c, 1);
- 464:	c7 44 24 08 01 00 00 	movl   $0x1,0x8(%esp)
- 46b:	00 
- 46c:	8d 45 f4             	lea    -0xc(%ebp),%eax
- 46f:	89 44 24 04          	mov    %eax,0x4(%esp)
- 473:	8b 45 08             	mov    0x8(%ebp),%eax
- 476:	89 04 24             	mov    %eax,(%esp)
- 479:	e8 32 ff ff ff       	call   3b0 <write>
-}
- 47e:	c9                   	leave  
- 47f:	c3                   	ret    
-
-00000480 <printint>:
-
-static void
-printint(int fd, int xx, int base, int sgn)
-{
- 480:	55                   	push   %ebp
- 481:	89 e5                	mov    %esp,%ebp
- 483:	83 ec 48             	sub    $0x48,%esp
-  static char digits[] = "0123456789ABCDEF";
-  char buf[16];
-  int i, neg;
-  uint x;
-
-  neg = 0;
- 486:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
-  if(sgn && xx < 0){
- 48d:	83 7d 14 00          	cmpl   $0x0,0x14(%ebp)
- 491:	74 17                	je     4aa <printint+0x2a>
- 493:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
- 497:	79 11                	jns    4aa <printint+0x2a>
-    neg = 1;
- 499:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
-    x = -xx;
- 4a0:	8b 45 0c             	mov    0xc(%ebp),%eax
- 4a3:	f7 d8                	neg    %eax
- 4a5:	89 45 ec             	mov    %eax,-0x14(%ebp)
- 4a8:	eb 06                	jmp    4b0 <printint+0x30>
-  } else {
-    x = xx;
- 4aa:	8b 45 0c             	mov    0xc(%ebp),%eax
- 4ad:	89 45 ec             	mov    %eax,-0x14(%ebp)
-  }
-
-  i = 0;
- 4b0:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
-  do{
-    buf[i++] = digits[x % base];
- 4b7:	8b 4d 10             	mov    0x10(%ebp),%ecx
- 4ba:	8b 45 ec             	mov    -0x14(%ebp),%eax
- 4bd:	ba 00 00 00 00       	mov    $0x0,%edx
- 4c2:	f7 f1                	div    %ecx
- 4c4:	89 d0                	mov    %edx,%eax
- 4c6:	0f b6 90 7c 0b 00 00 	movzbl 0xb7c(%eax),%edx
- 4cd:	8d 45 dc             	lea    -0x24(%ebp),%eax
- 4d0:	03 45 f4             	add    -0xc(%ebp),%eax
- 4d3:	88 10                	mov    %dl,(%eax)
- 4d5:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
-  }while((x /= base) != 0);
- 4d9:	8b 55 10             	mov    0x10(%ebp),%edx
- 4dc:	89 55 d4             	mov    %edx,-0x2c(%ebp)
- 4df:	8b 45 ec             	mov    -0x14(%ebp),%eax
- 4e2:	ba 00 00 00 00       	mov    $0x0,%edx
- 4e7:	f7 75 d4             	divl   -0x2c(%ebp)
- 4ea:	89 45 ec             	mov    %eax,-0x14(%ebp)
- 4ed:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
- 4f1:	75 c4                	jne    4b7 <printint+0x37>
-  if(neg)
- 4f3:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
- 4f7:	74 2a                	je     523 <printint+0xa3>
-    buf[i++] = '-';
- 4f9:	8d 45 dc             	lea    -0x24(%ebp),%eax
- 4fc:	03 45 f4             	add    -0xc(%ebp),%eax
- 4ff:	c6 00 2d             	movb   $0x2d,(%eax)
- 502:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
-
-  while(--i >= 0)
- 506:	eb 1b                	jmp    523 <printint+0xa3>
-    putc(fd, buf[i]);
- 508:	8d 45 dc             	lea    -0x24(%ebp),%eax
- 50b:	03 45 f4             	add    -0xc(%ebp),%eax
- 50e:	0f b6 00             	movzbl (%eax),%eax
- 511:	0f be c0             	movsbl %al,%eax
- 514:	89 44 24 04          	mov    %eax,0x4(%esp)
- 518:	8b 45 08             	mov    0x8(%ebp),%eax
- 51b:	89 04 24             	mov    %eax,(%esp)
- 51e:	e8 35 ff ff ff       	call   458 <putc>
-    buf[i++] = digits[x % base];
-  }while((x /= base) != 0);
-  if(neg)
-    buf[i++] = '-';
-
-  while(--i >= 0)
- 523:	83 6d f4 01          	subl   $0x1,-0xc(%ebp)
- 527:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
- 52b:	79 db                	jns    508 <printint+0x88>
-    putc(fd, buf[i]);
-}
- 52d:	c9                   	leave  
- 52e:	c3                   	ret    
-
-0000052f <printf>:
-
-// Print to the given fd. Only understands %d, %x, %p, %s.
-void
-printf(int fd, char *fmt, ...)
-{
- 52f:	55                   	push   %ebp
- 530:	89 e5                	mov    %esp,%ebp
- 532:	83 ec 38             	sub    $0x38,%esp
-  char *s;
-  int c, i, state;
-  uint *ap;
-
-  state = 0;
- 535:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
-  ap = (uint*)(void*)&fmt + 1;
- 53c:	8d 45 0c             	lea    0xc(%ebp),%eax
- 53f:	83 c0 04             	add    $0x4,%eax
- 542:	89 45 e8             	mov    %eax,-0x18(%ebp)
-  for(i = 0; fmt[i]; i++){
- 545:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
- 54c:	e9 7d 01 00 00       	jmp    6ce <printf+0x19f>
-    c = fmt[i] & 0xff;
- 551:	8b 55 0c             	mov    0xc(%ebp),%edx
- 554:	8b 45 f0             	mov    -0x10(%ebp),%eax
- 557:	01 d0                	add    %edx,%eax
- 559:	0f b6 00             	movzbl (%eax),%eax
- 55c:	0f be c0             	movsbl %al,%eax
- 55f:	25 ff 00 00 00       	and    $0xff,%eax
- 564:	89 45 e4             	mov    %eax,-0x1c(%ebp)
-    if(state == 0){
- 567:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
- 56b:	75 2c                	jne    599 <printf+0x6a>
-      if(c == '%'){
- 56d:	83 7d e4 25          	cmpl   $0x25,-0x1c(%ebp)
- 571:	75 0c                	jne    57f <printf+0x50>
-        state = '%';
- 573:	c7 45 ec 25 00 00 00 	movl   $0x25,-0x14(%ebp)
- 57a:	e9 4b 01 00 00       	jmp    6ca <printf+0x19b>
-      } else {
-        putc(fd, c);
- 57f:	8b 45 e4             	mov    -0x1c(%ebp),%eax
- 582:	0f be c0             	movsbl %al,%eax
- 585:	89 44 24 04          	mov    %eax,0x4(%esp)
- 589:	8b 45 08             	mov    0x8(%ebp),%eax
- 58c:	89 04 24             	mov    %eax,(%esp)
- 58f:	e8 c4 fe ff ff       	call   458 <putc>
- 594:	e9 31 01 00 00       	jmp    6ca <printf+0x19b>
-      }
-    } else if(state == '%'){
- 599:	83 7d ec 25          	cmpl   $0x25,-0x14(%ebp)
- 59d:	0f 85 27 01 00 00    	jne    6ca <printf+0x19b>
-      if(c == 'd'){
- 5a3:	83 7d e4 64          	cmpl   $0x64,-0x1c(%ebp)
- 5a7:	75 2d                	jne    5d6 <printf+0xa7>
-        printint(fd, *ap, 10, 1);
- 5a9:	8b 45 e8             	mov    -0x18(%ebp),%eax
- 5ac:	8b 00                	mov    (%eax),%eax
- 5ae:	c7 44 24 0c 01 00 00 	movl   $0x1,0xc(%esp)
- 5b5:	00 
- 5b6:	c7 44 24 08 0a 00 00 	movl   $0xa,0x8(%esp)
- 5bd:	00 
- 5be:	89 44 24 04          	mov    %eax,0x4(%esp)
- 5c2:	8b 45 08             	mov    0x8(%ebp),%eax
- 5c5:	89 04 24             	mov    %eax,(%esp)
- 5c8:	e8 b3 fe ff ff       	call   480 <printint>
-        ap++;
- 5cd:	83 45 e8 04          	addl   $0x4,-0x18(%ebp)
- 5d1:	e9 ed 00 00 00       	jmp    6c3 <printf+0x194>
-      } else if(c == 'x' || c == 'p'){
- 5d6:	83 7d e4 78          	cmpl   $0x78,-0x1c(%ebp)
- 5da:	74 06                	je     5e2 <printf+0xb3>
- 5dc:	83 7d e4 70          	cmpl   $0x70,-0x1c(%ebp)
- 5e0:	75 2d                	jne    60f <printf+0xe0>
-        printint(fd, *ap, 16, 0);
- 5e2:	8b 45 e8             	mov    -0x18(%ebp),%eax
- 5e5:	8b 00                	mov    (%eax),%eax
- 5e7:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
- 5ee:	00 
- 5ef:	c7 44 24 08 10 00 00 	movl   $0x10,0x8(%esp)
- 5f6:	00 
- 5f7:	89 44 24 04          	mov    %eax,0x4(%esp)
- 5fb:	8b 45 08             	mov    0x8(%ebp),%eax
- 5fe:	89 04 24             	mov    %eax,(%esp)
- 601:	e8 7a fe ff ff       	call   480 <printint>
-        ap++;
- 606:	83 45 e8 04          	addl   $0x4,-0x18(%ebp)
- 60a:	e9 b4 00 00 00       	jmp    6c3 <printf+0x194>
-      } else if(c == 's'){
- 60f:	83 7d e4 73          	cmpl   $0x73,-0x1c(%ebp)
- 613:	75 46                	jne    65b <printf+0x12c>
-        s = (char*)*ap;
- 615:	8b 45 e8             	mov    -0x18(%ebp),%eax
- 618:	8b 00                	mov    (%eax),%eax
- 61a:	89 45 f4             	mov    %eax,-0xc(%ebp)
-        ap++;
- 61d:	83 45 e8 04          	addl   $0x4,-0x18(%ebp)
-        if(s == 0)
- 621:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
- 625:	75 27                	jne    64e <printf+0x11f>
-          s = "(null)";
- 627:	c7 45 f4 19 09 00 00 	movl   $0x919,-0xc(%ebp)
-        while(*s != 0){
- 62e:	eb 1e                	jmp    64e <printf+0x11f>
-          putc(fd, *s);
- 630:	8b 45 f4             	mov    -0xc(%ebp),%eax
- 633:	0f b6 00             	movzbl (%eax),%eax
- 636:	0f be c0             	movsbl %al,%eax
- 639:	89 44 24 04          	mov    %eax,0x4(%esp)
- 63d:	8b 45 08             	mov    0x8(%ebp),%eax
- 640:	89 04 24             	mov    %eax,(%esp)
- 643:	e8 10 fe ff ff       	call   458 <putc>
-          s++;
- 648:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
- 64c:	eb 01                	jmp    64f <printf+0x120>
-      } else if(c == 's'){
-        s = (char*)*ap;
-        ap++;
-        if(s == 0)
-          s = "(null)";
-        while(*s != 0){
- 64e:	90                   	nop
- 64f:	8b 45 f4             	mov    -0xc(%ebp),%eax
- 652:	0f b6 00             	movzbl (%eax),%eax
- 655:	84 c0                	test   %al,%al
- 657:	75 d7                	jne    630 <printf+0x101>
- 659:	eb 68                	jmp    6c3 <printf+0x194>
-          putc(fd, *s);
-          s++;
-        }
-      } else if(c == 'c'){
- 65b:	83 7d e4 63          	cmpl   $0x63,-0x1c(%ebp)
- 65f:	75 1d                	jne    67e <printf+0x14f>
-        putc(fd, *ap);
- 661:	8b 45 e8             	mov    -0x18(%ebp),%eax
- 664:	8b 00                	mov    (%eax),%eax
- 666:	0f be c0             	movsbl %al,%eax
- 669:	89 44 24 04          	mov    %eax,0x4(%esp)
- 66d:	8b 45 08             	mov    0x8(%ebp),%eax
- 670:	89 04 24             	mov    %eax,(%esp)
- 673:	e8 e0 fd ff ff       	call   458 <putc>
-        ap++;
- 678:	83 45 e8 04          	addl   $0x4,-0x18(%ebp)
- 67c:	eb 45                	jmp    6c3 <printf+0x194>
-      } else if(c == '%'){
- 67e:	83 7d e4 25          	cmpl   $0x25,-0x1c(%ebp)
- 682:	75 17                	jne    69b <printf+0x16c>
-        putc(fd, c);
- 684:	8b 45 e4             	mov    -0x1c(%ebp),%eax
- 687:	0f be c0             	movsbl %al,%eax
- 68a:	89 44 24 04          	mov    %eax,0x4(%esp)
- 68e:	8b 45 08             	mov    0x8(%ebp),%eax
- 691:	89 04 24             	mov    %eax,(%esp)
- 694:	e8 bf fd ff ff       	call   458 <putc>
- 699:	eb 28                	jmp    6c3 <printf+0x194>
-      } else {
-        // Unknown % sequence.  Print it to draw attention.
-        putc(fd, '%');
- 69b:	c7 44 24 04 25 00 00 	movl   $0x25,0x4(%esp)
- 6a2:	00 
- 6a3:	8b 45 08             	mov    0x8(%ebp),%eax
- 6a6:	89 04 24             	mov    %eax,(%esp)
- 6a9:	e8 aa fd ff ff       	call   458 <putc>
-        putc(fd, c);
- 6ae:	8b 45 e4             	mov    -0x1c(%ebp),%eax
- 6b1:	0f be c0             	movsbl %al,%eax
- 6b4:	89 44 24 04          	mov    %eax,0x4(%esp)
- 6b8:	8b 45 08             	mov    0x8(%ebp),%eax
- 6bb:	89 04 24             	mov    %eax,(%esp)
- 6be:	e8 95 fd ff ff       	call   458 <putc>
-      }
-      state = 0;
- 6c3:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
-  int c, i, state;
-  uint *ap;
-
-  state = 0;
-  ap = (uint*)(void*)&fmt + 1;
-  for(i = 0; fmt[i]; i++){
- 6ca:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)
- 6ce:	8b 55 0c             	mov    0xc(%ebp),%edx
- 6d1:	8b 45 f0             	mov    -0x10(%ebp),%eax
- 6d4:	01 d0                	add    %edx,%eax
- 6d6:	0f b6 00             	movzbl (%eax),%eax
- 6d9:	84 c0                	test   %al,%al
- 6db:	0f 85 70 fe ff ff    	jne    551 <printf+0x22>
-        putc(fd, c);
-      }
-      state = 0;
-    }
-  }
-}
- 6e1:	c9                   	leave  
- 6e2:	c3                   	ret    
- 6e3:	90                   	nop
-
-000006e4 <free>:
-static Header base;
-static Header *freep;
-
-void
-free(void *ap)
-{
- 6e4:	55                   	push   %ebp
- 6e5:	89 e5                	mov    %esp,%ebp
- 6e7:	83 ec 10             	sub    $0x10,%esp
-  Header *bp, *p;
-
-  bp = (Header*)ap - 1;
- 6ea:	8b 45 08             	mov    0x8(%ebp),%eax
- 6ed:	83 e8 08             	sub    $0x8,%eax
- 6f0:	89 45 f8             	mov    %eax,-0x8(%ebp)
-  for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
- 6f3:	a1 a8 0b 00 00       	mov    0xba8,%eax
- 6f8:	89 45 fc             	mov    %eax,-0x4(%ebp)
- 6fb:	eb 24                	jmp    721 <free+0x3d>
-    if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
- 6fd:	8b 45 fc             	mov    -0x4(%ebp),%eax
- 700:	8b 00                	mov    (%eax),%eax
- 702:	3b 45 fc             	cmp    -0x4(%ebp),%eax
- 705:	77 12                	ja     719 <free+0x35>
- 707:	8b 45 f8             	mov    -0x8(%ebp),%eax
- 70a:	3b 45 fc             	cmp    -0x4(%ebp),%eax
- 70d:	77 24                	ja     733 <free+0x4f>
- 70f:	8b 45 fc             	mov    -0x4(%ebp),%eax
- 712:	8b 00                	mov    (%eax),%eax
- 714:	3b 45 f8             	cmp    -0x8(%ebp),%eax
- 717:	77 1a                	ja     733 <free+0x4f>
-free(void *ap)
-{
-  Header *bp, *p;
-
-  bp = (Header*)ap - 1;
-  for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
- 719:	8b 45 fc             	mov    -0x4(%ebp),%eax
- 71c:	8b 00                	mov    (%eax),%eax
- 71e:	89 45 fc             	mov    %eax,-0x4(%ebp)
- 721:	8b 45 f8             	mov    -0x8(%ebp),%eax
- 724:	3b 45 fc             	cmp    -0x4(%ebp),%eax
- 727:	76 d4                	jbe    6fd <free+0x19>
- 729:	8b 45 fc             	mov    -0x4(%ebp),%eax
- 72c:	8b 00                	mov    (%eax),%eax
- 72e:	3b 45 f8             	cmp    -0x8(%ebp),%eax
- 731:	76 ca                	jbe    6fd <free+0x19>
-    if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
-      break;
-  if(bp + bp->s.size == p->s.ptr){
- 733:	8b 45 f8             	mov    -0x8(%ebp),%eax
- 736:	8b 40 04             	mov    0x4(%eax),%eax
- 739:	c1 e0 03             	shl    $0x3,%eax
- 73c:	89 c2                	mov    %eax,%edx
- 73e:	03 55 f8             	add    -0x8(%ebp),%edx
- 741:	8b 45 fc             	mov    -0x4(%ebp),%eax
- 744:	8b 00                	mov    (%eax),%eax
- 746:	39 c2                	cmp    %eax,%edx
- 748:	75 24                	jne    76e <free+0x8a>
-    bp->s.size += p->s.ptr->s.size;
- 74a:	8b 45 f8             	mov    -0x8(%ebp),%eax
- 74d:	8b 50 04             	mov    0x4(%eax),%edx
- 750:	8b 45 fc             	mov    -0x4(%ebp),%eax
- 753:	8b 00                	mov    (%eax),%eax
- 755:	8b 40 04             	mov    0x4(%eax),%eax
- 758:	01 c2                	add    %eax,%edx
- 75a:	8b 45 f8             	mov    -0x8(%ebp),%eax
- 75d:	89 50 04             	mov    %edx,0x4(%eax)
-    bp->s.ptr = p->s.ptr->s.ptr;
- 760:	8b 45 fc             	mov    -0x4(%ebp),%eax
- 763:	8b 00                	mov    (%eax),%eax
- 765:	8b 10                	mov    (%eax),%edx
- 767:	8b 45 f8             	mov    -0x8(%ebp),%eax
- 76a:	89 10                	mov    %edx,(%eax)
- 76c:	eb 0a                	jmp    778 <free+0x94>
-  } else
-    bp->s.ptr = p->s.ptr;
- 76e:	8b 45 fc             	mov    -0x4(%ebp),%eax
- 771:	8b 10                	mov    (%eax),%edx
- 773:	8b 45 f8             	mov    -0x8(%ebp),%eax
- 776:	89 10                	mov    %edx,(%eax)
-  if(p + p->s.size == bp){
- 778:	8b 45 fc             	mov    -0x4(%ebp),%eax
- 77b:	8b 40 04             	mov    0x4(%eax),%eax
- 77e:	c1 e0 03             	shl    $0x3,%eax
- 781:	03 45 fc             	add    -0x4(%ebp),%eax
- 784:	3b 45 f8             	cmp    -0x8(%ebp),%eax
- 787:	75 20                	jne    7a9 <free+0xc5>
-    p->s.size += bp->s.size;
- 789:	8b 45 fc             	mov    -0x4(%ebp),%eax
- 78c:	8b 50 04             	mov    0x4(%eax),%edx
- 78f:	8b 45 f8             	mov    -0x8(%ebp),%eax
- 792:	8b 40 04             	mov    0x4(%eax),%eax
- 795:	01 c2                	add    %eax,%edx
- 797:	8b 45 fc             	mov    -0x4(%ebp),%eax
- 79a:	89 50 04             	mov    %edx,0x4(%eax)
-    p->s.ptr = bp->s.ptr;
- 79d:	8b 45 f8             	mov    -0x8(%ebp),%eax
- 7a0:	8b 10                	mov    (%eax),%edx
- 7a2:	8b 45 fc             	mov    -0x4(%ebp),%eax
- 7a5:	89 10                	mov    %edx,(%eax)
- 7a7:	eb 08                	jmp    7b1 <free+0xcd>
-  } else
-    p->s.ptr = bp;
- 7a9:	8b 45 fc             	mov    -0x4(%ebp),%eax
- 7ac:	8b 55 f8             	mov    -0x8(%ebp),%edx
- 7af:	89 10                	mov    %edx,(%eax)
-  freep = p;
- 7b1:	8b 45 fc             	mov    -0x4(%ebp),%eax
- 7b4:	a3 a8 0b 00 00       	mov    %eax,0xba8
-}
- 7b9:	c9                   	leave  
- 7ba:	c3                   	ret    
-
-000007bb <morecore>:
-
-static Header*
-morecore(uint nu)
-{
- 7bb:	55                   	push   %ebp
- 7bc:	89 e5                	mov    %esp,%ebp
- 7be:	83 ec 28             	sub    $0x28,%esp
-  char *p;
-  Header *hp;
-
-  if(nu < 4096)
- 7c1:	81 7d 08 ff 0f 00 00 	cmpl   $0xfff,0x8(%ebp)
- 7c8:	77 07                	ja     7d1 <morecore+0x16>
-    nu = 4096;
- 7ca:	c7 45 08 00 10 00 00 	movl   $0x1000,0x8(%ebp)
-  p = sbrk(nu * sizeof(Header));
- 7d1:	8b 45 08             	mov    0x8(%ebp),%eax
- 7d4:	c1 e0 03             	shl    $0x3,%eax
- 7d7:	89 04 24             	mov    %eax,(%esp)
- 7da:	e8 39 fc ff ff       	call   418 <sbrk>
- 7df:	89 45 f4             	mov    %eax,-0xc(%ebp)
-  if(p == (char*)-1)
- 7e2:	83 7d f4 ff          	cmpl   $0xffffffff,-0xc(%ebp)
- 7e6:	75 07                	jne    7ef <morecore+0x34>
-    return 0;
- 7e8:	b8 00 00 00 00       	mov    $0x0,%eax
- 7ed:	eb 22                	jmp    811 <morecore+0x56>
-  hp = (Header*)p;
- 7ef:	8b 45 f4             	mov    -0xc(%ebp),%eax
- 7f2:	89 45 f0             	mov    %eax,-0x10(%ebp)
-  hp->s.size = nu;
- 7f5:	8b 45 f0             	mov    -0x10(%ebp),%eax
- 7f8:	8b 55 08             	mov    0x8(%ebp),%edx
- 7fb:	89 50 04             	mov    %edx,0x4(%eax)
-  free((void*)(hp + 1));
- 7fe:	8b 45 f0             	mov    -0x10(%ebp),%eax
- 801:	83 c0 08             	add    $0x8,%eax
- 804:	89 04 24             	mov    %eax,(%esp)
- 807:	e8 d8 fe ff ff       	call   6e4 <free>
-  return freep;
- 80c:	a1 a8 0b 00 00       	mov    0xba8,%eax
-}
- 811:	c9                   	leave  
- 812:	c3                   	ret    
-
-00000813 <malloc>:
-
-void*
-malloc(uint nbytes)
-{
- 813:	55                   	push   %ebp
- 814:	89 e5                	mov    %esp,%ebp
- 816:	83 ec 28             	sub    $0x28,%esp
-  Header *p, *prevp;
-  uint nunits;
-
-  nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;
- 819:	8b 45 08             	mov    0x8(%ebp),%eax
- 81c:	83 c0 07             	add    $0x7,%eax
- 81f:	c1 e8 03             	shr    $0x3,%eax
- 822:	83 c0 01             	add    $0x1,%eax
- 825:	89 45 ec             	mov    %eax,-0x14(%ebp)
-  if((prevp = freep) == 0){
- 828:	a1 a8 0b 00 00       	mov    0xba8,%eax
- 82d:	89 45 f0             	mov    %eax,-0x10(%ebp)
- 830:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
- 834:	75 23                	jne    859 <malloc+0x46>
-    base.s.ptr = freep = prevp = &base;
- 836:	c7 45 f0 a0 0b 00 00 	movl   $0xba0,-0x10(%ebp)
- 83d:	8b 45 f0             	mov    -0x10(%ebp),%eax
- 840:	a3 a8 0b 00 00       	mov    %eax,0xba8
- 845:	a1 a8 0b 00 00       	mov    0xba8,%eax
- 84a:	a3 a0 0b 00 00       	mov    %eax,0xba0
-    base.s.size = 0;
- 84f:	c7 05 a4 0b 00 00 00 	movl   $0x0,0xba4
- 856:	00 00 00 
-  }
-  for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
- 859:	8b 45 f0             	mov    -0x10(%ebp),%eax
- 85c:	8b 00                	mov    (%eax),%eax
- 85e:	89 45 f4             	mov    %eax,-0xc(%ebp)
-    if(p->s.size >= nunits){
- 861:	8b 45 f4             	mov    -0xc(%ebp),%eax
- 864:	8b 40 04             	mov    0x4(%eax),%eax
- 867:	3b 45 ec             	cmp    -0x14(%ebp),%eax
- 86a:	72 4d                	jb     8b9 <malloc+0xa6>
-      if(p->s.size == nunits)
- 86c:	8b 45 f4             	mov    -0xc(%ebp),%eax
- 86f:	8b 40 04             	mov    0x4(%eax),%eax
- 872:	3b 45 ec             	cmp    -0x14(%ebp),%eax
- 875:	75 0c                	jne    883 <malloc+0x70>
-        prevp->s.ptr = p->s.ptr;
- 877:	8b 45 f4             	mov    -0xc(%ebp),%eax
- 87a:	8b 10                	mov    (%eax),%edx
- 87c:	8b 45 f0             	mov    -0x10(%ebp),%eax
- 87f:	89 10                	mov    %edx,(%eax)
- 881:	eb 26                	jmp    8a9 <malloc+0x96>
-      else {
-        p->s.size -= nunits;
- 883:	8b 45 f4             	mov    -0xc(%ebp),%eax
- 886:	8b 40 04             	mov    0x4(%eax),%eax
- 889:	89 c2                	mov    %eax,%edx
- 88b:	2b 55 ec             	sub    -0x14(%ebp),%edx
- 88e:	8b 45 f4             	mov    -0xc(%ebp),%eax
- 891:	89 50 04             	mov    %edx,0x4(%eax)
-        p += p->s.size;
- 894:	8b 45 f4             	mov    -0xc(%ebp),%eax
- 897:	8b 40 04             	mov    0x4(%eax),%eax
- 89a:	c1 e0 03             	shl    $0x3,%eax
- 89d:	01 45 f4             	add    %eax,-0xc(%ebp)
-        p->s.size = nunits;
- 8a0:	8b 45 f4             	mov    -0xc(%ebp),%eax
- 8a3:	8b 55 ec             	mov    -0x14(%ebp),%edx
- 8a6:	89 50 04             	mov    %edx,0x4(%eax)
-      }
-      freep = prevp;
- 8a9:	8b 45 f0             	mov    -0x10(%ebp),%eax
- 8ac:	a3 a8 0b 00 00       	mov    %eax,0xba8
-      return (void*)(p + 1);
- 8b1:	8b 45 f4             	mov    -0xc(%ebp),%eax
- 8b4:	83 c0 08             	add    $0x8,%eax
- 8b7:	eb 38                	jmp    8f1 <malloc+0xde>
-    }
-    if(p == freep)
- 8b9:	a1 a8 0b 00 00       	mov    0xba8,%eax
- 8be:	39 45 f4             	cmp    %eax,-0xc(%ebp)
- 8c1:	75 1b                	jne    8de <malloc+0xcb>
-      if((p = morecore(nunits)) == 0)
- 8c3:	8b 45 ec             	mov    -0x14(%ebp),%eax
- 8c6:	89 04 24             	mov    %eax,(%esp)
- 8c9:	e8 ed fe ff ff       	call   7bb <morecore>
- 8ce:	89 45 f4             	mov    %eax,-0xc(%ebp)
- 8d1:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
- 8d5:	75 07                	jne    8de <malloc+0xcb>
-        return 0;
- 8d7:	b8 00 00 00 00       	mov    $0x0,%eax
- 8dc:	eb 13                	jmp    8f1 <malloc+0xde>
-  nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;
-  if((prevp = freep) == 0){
-    base.s.ptr = freep = prevp = &base;
-    base.s.size = 0;
-  }
-  for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
- 8de:	8b 45 f4             	mov    -0xc(%ebp),%eax
- 8e1:	89 45 f0             	mov    %eax,-0x10(%ebp)
- 8e4:	8b 45 f4             	mov    -0xc(%ebp),%eax
- 8e7:	8b 00                	mov    (%eax),%eax
- 8e9:	89 45 f4             	mov    %eax,-0xc(%ebp)
-      return (void*)(p + 1);
-    }
-    if(p == freep)
-      if((p = morecore(nunits)) == 0)
-        return 0;
-  }
- 8ec:	e9 70 ff ff ff       	jmp    861 <malloc+0x4e>
-}
- 8f1:	c9                   	leave  
- 8f2:	c3                   	ret    
diff --git a/xv6/cat.c b/xv6/cat.c
deleted file mode 100644
index f415c7e..0000000
--- a/xv6/cat.c
+++ /dev/null
@@ -1,39 +0,0 @@
-#include "types.h"
-#include "stat.h"
-#include "user.h"
-
-char buf[512];
-
-void
-cat(int fd)
-{
-  int n;
-
-  while((n = read(fd, buf, sizeof(buf))) > 0)
-    write(1, buf, n);
-  if(n < 0){
-    printf(1, "cat: read error\n");
-    exit(EXIT_STATUS_FAILURE);
-  }
-}
-
-int
-main(int argc, char *argv[])
-{
-  int fd, i;
-
-  if(argc <= 1){
-    cat(0);
-    exit(EXIT_STATUS_FAILURE);
-  }
-
-  for(i = 1; i < argc; i++){
-    if((fd = open(argv[i], 0)) < 0){
-      printf(1, "cat: cannot open %s\n", argv[i]);
-      exit(EXIT_STATUS_FAILURE);
-    }
-    cat(fd);
-    close(fd);
-  }
-  exit(EXIT_STATUS_SUCCESS);
-}
diff --git a/xv6/cat.d b/xv6/cat.d
deleted file mode 100644
index 9464b83..0000000
--- a/xv6/cat.d
+++ /dev/null
@@ -1 +0,0 @@
-cat.o: cat.c types.h stat.h user.h
diff --git a/xv6/cat.sym b/xv6/cat.sym
deleted file mode 100644
index 2e5514b..0000000
--- a/xv6/cat.sym
+++ /dev/null
@@ -1,67 +0,0 @@
-00000000 .text
-000008f3 .rodata
-00000920 .eh_frame
-00000b7c .data
-00000ba0 .bss
-00000000 .comment
-00000000 .debug_aranges
-00000000 .debug_info
-00000000 .debug_abbrev
-00000000 .debug_line
-00000000 .debug_str
-00000000 .debug_loc
-00000000 cat.c
-00000000 ulib.c
-0000012c stosb
-00000000 printf.c
-00000458 putc
-00000480 printint
-00000b7c digits.923
-00000000 umalloc.c
-00000ba0 base
-00000ba8 freep
-000007bb morecore
-00000151 strcpy
-00000430 waitpid
-0000052f printf
-0000034a memmove
-000003d8 mknod
-00000448 foreground
-00000242 gets
-00000410 getpid
-00000000 cat
-00000813 malloc
-00000420 sleep
-00000450 set_priority
-00000438 wait_stat
-000003a0 pipe
-000003b0 write
-000003e8 fstat
-000003c0 kill
-00000400 chdir
-000003c8 exec
-00000398 wait
-000003a8 read
-000003e0 unlink
-00000388 fork
-00000418 sbrk
-00000428 uptime
-00000b90 __bss_start
-000001eb memset
-0000006f main
-00000185 strcmp
-00000408 dup
-00000bc0 buf
-00000440 list_pgroup
-000002b1 stat
-00000b90 _edata
-00000dc0 _end
-000003f0 link
-00000390 exit
-000002ff atoi
-000001c6 strlen
-000003d0 open
-0000020f strchr
-000003f8 mkdir
-000003b8 close
-000006e4 free
diff --git a/xv6/console.c b/xv6/console.c
deleted file mode 100644
index 766dc30..0000000
--- a/xv6/console.c
+++ /dev/null
@@ -1,293 +0,0 @@
-// Console input and output.
-// Input is from the keyboard or serial port.
-// Output is written to the screen and serial port.
-
-#include "types.h"
-#include "defs.h"
-#include "param.h"
-#include "traps.h"
-#include "spinlock.h"
-#include "fs.h"
-#include "file.h"
-#include "memlayout.h"
-#include "mmu.h"
-#include "proc.h"
-#include "x86.h"
-
-static void consputc(int);
-
-static int panicked = 0;
-
-static struct {
-  struct spinlock lock;
-  int locking;
-} cons;
-
-static void
-printint(int xx, int base, int sign)
-{
-  static char digits[] = "0123456789abcdef";
-  char buf[16];
-  int i;
-  uint x;
-
-  if(sign && (sign = xx < 0))
-    x = -xx;
-  else
-    x = xx;
-
-  i = 0;
-  do{
-    buf[i++] = digits[x % base];
-  }while((x /= base) != 0);
-
-  if(sign)
-    buf[i++] = '-';
-
-  while(--i >= 0)
-    consputc(buf[i]);
-}
-//PAGEBREAK: 50
-
-// Print to the console. only understands %d, %x, %p, %s.
-void
-cprintf(char *fmt, ...)
-{
-  int i, c, locking;
-  uint *argp;
-  char *s;
-
-  locking = cons.locking;
-  if(locking)
-    acquire(&cons.lock);
-
-  if (fmt == 0)
-    panic("null fmt");
-
-  argp = (uint*)(void*)(&fmt + 1);
-  for(i = 0; (c = fmt[i] & 0xff) != 0; i++){
-    if(c != '%'){
-      consputc(c);
-      continue;
-    }
-    c = fmt[++i] & 0xff;
-    if(c == 0)
-      break;
-    switch(c){
-    case 'd':
-      printint(*argp++, 10, 1);
-      break;
-    case 'x':
-    case 'p':
-      printint(*argp++, 16, 0);
-      break;
-    case 's':
-      if((s = (char*)*argp++) == 0)
-        s = "(null)";
-      for(; *s; s++)
-        consputc(*s);
-      break;
-    case '%':
-      consputc('%');
-      break;
-    default:
-      // Print unknown % sequence to draw attention.
-      consputc('%');
-      consputc(c);
-      break;
-    }
-  }
-
-  if(locking)
-    release(&cons.lock);
-}
-
-void
-panic(char *s)
-{
-  int i;
-  uint pcs[10];
-  
-  cli();
-  cons.locking = 0;
-  cprintf("cpu%d: panic: ", cpu->id);
-  cprintf(s);
-  cprintf("\n");
-  getcallerpcs(&s, pcs);
-  for(i=0; i<10; i++)
-    cprintf(" %p", pcs[i]);
-  panicked = 1; // freeze other CPU
-  for(;;)
-    ;
-}
-
-//PAGEBREAK: 50
-#define BACKSPACE 0x100
-#define CRTPORT 0x3d4
-static ushort *crt = (ushort*)P2V(0xb8000);  // CGA memory
-
-static void
-cgaputc(int c)
-{
-  int pos;
-  
-  // Cursor position: col + 80*row.
-  outb(CRTPORT, 14);
-  pos = inb(CRTPORT+1) << 8;
-  outb(CRTPORT, 15);
-  pos |= inb(CRTPORT+1);
-
-  if(c == '\n')
-    pos += 80 - pos%80;
-  else if(c == BACKSPACE){
-    if(pos > 0) --pos;
-  } else
-    crt[pos++] = (c&0xff) | 0x0700;  // black on white
-  
-  if((pos/80) >= 24){  // Scroll up.
-    memmove(crt, crt+80, sizeof(crt[0])*23*80);
-    pos -= 80;
-    memset(crt+pos, 0, sizeof(crt[0])*(24*80 - pos));
-  }
-  
-  outb(CRTPORT, 14);
-  outb(CRTPORT+1, pos>>8);
-  outb(CRTPORT, 15);
-  outb(CRTPORT+1, pos);
-  crt[pos] = ' ' | 0x0700;
-}
-
-void
-consputc(int c)
-{
-  if(panicked){
-    cli();
-    for(;;)
-      ;
-  }
-
-  if(c == BACKSPACE){
-    uartputc('\b'); uartputc(' '); uartputc('\b');
-  } else
-    uartputc(c);
-  cgaputc(c);
-}
-
-#define INPUT_BUF 128
-struct {
-  struct spinlock lock;
-  char buf[INPUT_BUF];
-  uint r;  // Read index
-  uint w;  // Write index
-  uint e;  // Edit index
-} input;
-
-#define C(x)  ((x)-'@')  // Control-x
-
-void
-consoleintr(int (*getc)(void))
-{
-  int c;
-
-  acquire(&input.lock);
-  while((c = getc()) >= 0){
-    switch(c){
-    case C('P'):  // Process listing.
-      procdump();
-      break;
-    case C('U'):  // Kill line.
-      while(input.e != input.w &&
-            input.buf[(input.e-1) % INPUT_BUF] != '\n'){
-        input.e--;
-        consputc(BACKSPACE);
-      }
-      break;
-    case C('H'): case '\x7f':  // Backspace
-      if(input.e != input.w){
-        input.e--;
-        consputc(BACKSPACE);
-      }
-      break;
-    default:
-      if(c != 0 && input.e-input.r < INPUT_BUF){
-        c = (c == '\r') ? '\n' : c;
-        input.buf[input.e++ % INPUT_BUF] = c;
-        consputc(c);
-        if(c == '\n' || c == C('D') || input.e == input.r+INPUT_BUF){
-          input.w = input.e;
-          wakeup(&input.r);
-        }
-      }
-      break;
-    }
-  }
-  release(&input.lock);
-}
-
-int
-consoleread(struct inode *ip, char *dst, int n)
-{
-  uint target;
-  int c;
-
-  iunlock(ip);
-  target = n;
-  acquire(&input.lock);
-  while(n > 0){
-    while(input.r == input.w){
-      if(proc->killed){
-        release(&input.lock);
-        ilock(ip);
-        return -1;
-      }
-      sleep(&input.r, &input.lock);
-    }
-    c = input.buf[input.r++ % INPUT_BUF];
-    if(c == C('D')){  // EOF
-      if(n < target){
-        // Save ^D for next time, to make sure
-        // caller gets a 0-byte result.
-        input.r--;
-      }
-      break;
-    }
-    *dst++ = c;
-    --n;
-    if(c == '\n')
-      break;
-  }
-  release(&input.lock);
-  ilock(ip);
-
-  return target - n;
-}
-
-int
-consolewrite(struct inode *ip, char *buf, int n)
-{
-  int i;
-
-  iunlock(ip);
-  acquire(&cons.lock);
-  for(i = 0; i < n; i++)
-    consputc(buf[i] & 0xff);
-  release(&cons.lock);
-  ilock(ip);
-
-  return n;
-}
-
-void
-consoleinit(void)
-{
-  initlock(&cons.lock, "console");
-  initlock(&input.lock, "input");
-
-  devsw[CONSOLE].write = consolewrite;
-  devsw[CONSOLE].read = consoleread;
-  cons.locking = 1;
-
-  picenable(IRQ_KBD);
-  ioapicenable(IRQ_KBD, 0);
-}
-
diff --git a/xv6/console.d b/xv6/console.d
deleted file mode 100644
index 69a86b3..0000000
--- a/xv6/console.d
+++ /dev/null
@@ -1,2 +0,0 @@
-console.o: console.c types.h defs.h param.h traps.h spinlock.h fs.h \
- file.h memlayout.h mmu.h proc.h x86.h
diff --git a/xv6/cuth b/xv6/cuth
deleted file mode 100755
index cce8c0c..0000000
--- a/xv6/cuth
+++ /dev/null
@@ -1,48 +0,0 @@
-#!/usr/bin/perl
-
-$| = 1;
-
-sub writefile($@){
-	my ($file, @lines) = @_;
-	
-	sleep(1);
-	open(F, ">$file") || die "open >$file: $!";
-	print F @lines;
-	close(F);
-}
-
-# Cut out #include lines that don't contribute anything.
-for($i=0; $i<@ARGV; $i++){
-	$file = $ARGV[$i];
-	if(!open(F, $file)){
-		print STDERR "open $file: $!\n";
-		next;
-	}
-	@lines = <F>;
-	close(F);
-	
-	$obj = "$file.o";
-	$obj =~ s/\.c\.o$/.o/;
-	system("touch $file");
-
-	if(system("make CC='gcc -Werror' $obj >/dev/null 2>\&1") != 0){
-		print STDERR "make $obj failed: $rv\n";
-		next;
-	}
-
-	system("cp $file =$file");
-	for($j=@lines-1; $j>=0; $j--){
-		if($lines[$j] =~ /^#include/){
-			$old = $lines[$j];
-			$lines[$j] = "/* CUT-H */\n";
-			writefile($file, @lines);
-			if(system("make CC='gcc -Werror' $obj >/dev/null 2>\&1") != 0){
-				$lines[$j] = $old;
-			}else{
-				print STDERR "$file $old";
-			}
-		}
-	}
-	writefile($file, grep {!/CUT-H/} @lines);
-	system("rm =$file");
-}
diff --git a/xv6/date.h b/xv6/date.h
deleted file mode 100644
index dd8f4b0..0000000
--- a/xv6/date.h
+++ /dev/null
@@ -1,8 +0,0 @@
-struct rtcdate {
-	uint second;
-	uint minute;
-	uint hour;
-	uint day;
-	uint month;
-	uint year;
-};
diff --git a/xv6/defs.h b/xv6/defs.h
deleted file mode 100644
index 56e89f1..0000000
--- a/xv6/defs.h
+++ /dev/null
@@ -1,190 +0,0 @@
-struct buf;
-struct context;
-struct file;
-struct inode;
-struct pipe;
-struct proc;
-struct rtcdate;
-struct spinlock;
-struct stat;
-struct superblock;
-
-// bio.c
-void            binit(void);
-struct buf*     bread(uint, uint);
-void            brelse(struct buf*);
-void            bwrite(struct buf*);
-
-// console.c
-void            consoleinit(void);
-void            cprintf(char*, ...);
-void            consoleintr(int(*)(void));
-void            panic(char*) __attribute__((noreturn));
-
-// exec.c
-int             exec(char*, char**);
-
-// file.c
-struct file*    filealloc(void);
-void            fileclose(struct file*);
-struct file*    filedup(struct file*);
-void            fileinit(void);
-int             fileread(struct file*, char*, int n);
-int             filestat(struct file*, struct stat*);
-int             filewrite(struct file*, char*, int n);
-
-// fs.c
-void            readsb(int dev, struct superblock *sb);
-int             dirlink(struct inode*, char*, uint);
-struct inode*   dirlookup(struct inode*, char*, uint*);
-struct inode*   ialloc(uint, short);
-struct inode*   idup(struct inode*);
-void            iinit(void);
-void            ilock(struct inode*);
-void            iput(struct inode*);
-void            iunlock(struct inode*);
-void            iunlockput(struct inode*);
-void            iupdate(struct inode*);
-int             namecmp(const char*, const char*);
-struct inode*   namei(char*);
-struct inode*   nameiparent(char*, char*);
-int             readi(struct inode*, char*, uint, uint);
-void            stati(struct inode*, struct stat*);
-int             writei(struct inode*, char*, uint, uint);
-
-// ide.c
-void            ideinit(void);
-void            ideintr(void);
-void            iderw(struct buf*);
-
-// ioapic.c
-void            ioapicenable(int irq, int cpu);
-extern uchar    ioapicid;
-void            ioapicinit(void);
-
-// kalloc.c
-char*           kalloc(void);
-void            kfree(char*);
-void            kinit1(void*, void*);
-void            kinit2(void*, void*);
-
-// kbd.c
-void            kbdintr(void);
-
-// lapic.c
-void            cmostime(struct rtcdate *r);
-int             cpunum(void);
-extern volatile uint*    lapic;
-void            lapiceoi(void);
-void            lapicinit(void);
-void            lapicstartap(uchar, uint);
-void            microdelay(int);
-
-// log.c
-void            initlog(void);
-void            log_write(struct buf*);
-void            begin_op();
-void            end_op();
-
-// mp.c
-extern int      ismp;
-int             mpbcpu(void);
-void            mpinit(void);
-void            mpstartthem(void);
-
-// picirq.c
-void            picenable(int);
-void            picinit(void);
-
-// pipe.c
-int             pipealloc(struct file**, struct file**);
-void            pipeclose(struct pipe*, int);
-int             piperead(struct pipe*, char*, int);
-int             pipewrite(struct pipe*, char*, int);
-
-//PAGEBREAK: 16
-// proc.c
-struct proc*    copyproc(struct proc*);
-void            exit(int);
-int             fork(void);
-int             growproc(int);
-int             kill(int);
-void            pinit(void);
-void            procdump(void);
-void            scheduler(void) __attribute__((noreturn));
-void            sched(void);
-void            sleep(void*, struct spinlock*);
-void            userinit(void);
-int             wait(int*);
-int             waitpid(int, int*, int);
-int             wait_stat(int*, int*, int*, int*);
-int             list_pgroup(int, process_info_entry*, int* size);
-int             foreground(int);
-int 			set_priority(int);
-
-
-void            wakeup(void*);
-void            yield(void);
-
-// swtch.S
-void            swtch(struct context**, struct context*);
-
-// spinlock.c
-void            acquire(struct spinlock*);
-void            getcallerpcs(void*, uint*);
-int             holding(struct spinlock*);
-void            initlock(struct spinlock*, char*);
-void            release(struct spinlock*);
-void            pushcli(void);
-void            popcli(void);
-
-// string.c
-int             memcmp(const void*, const void*, uint);
-void*           memmove(void*, const void*, uint);
-void*           memset(void*, int, uint);
-char*           safestrcpy(char*, const char*, int);
-int             strlen(const char*);
-int             strncmp(const char*, const char*, uint);
-char*           strncpy(char*, const char*, int);
-
-// syscall.c
-int             argint(int, int*);
-int             argptr(int, char**, int);
-int             argstr(int, char**);
-int             fetchint(uint, int*);
-int             fetchstr(uint, char**);
-void            syscall(void);
-
-// timer.c
-void            timerinit(void);
-
-// trap.c
-void            idtinit(void);
-extern uint     ticks;
-void            tvinit(void);
-extern struct spinlock tickslock;
-
-// uart.c
-void            uartinit(void);
-void            uartintr(void);
-void            uartputc(int);
-
-// vm.c
-void            seginit(void);
-void            kvmalloc(void);
-void            vmenable(void);
-pde_t*          setupkvm(void);
-char*           uva2ka(pde_t*, char*);
-int             allocuvm(pde_t*, uint, uint);
-int             deallocuvm(pde_t*, uint, uint);
-void            freevm(pde_t*);
-void            inituvm(pde_t*, char*, uint);
-int             loaduvm(pde_t*, char*, struct inode*, uint, uint);
-pde_t*          copyuvm(pde_t*, uint);
-void            switchuvm(struct proc*);
-void            switchkvm(void);
-int             copyout(pde_t*, uint, void*, uint);
-void            clearpteu(pde_t *pgdir, char *uva);
-
-// number of elements in fixed-size array
-#define NELEM(x) (sizeof(x)/sizeof((x)[0]))
diff --git a/xv6/dot-bochsrc b/xv6/dot-bochsrc
deleted file mode 100755
index ba13db7..0000000
--- a/xv6/dot-bochsrc
+++ /dev/null
@@ -1,738 +0,0 @@
-# You may now use double quotes around pathnames, in case
-# your pathname includes spaces.
-
-#=======================================================================
-# CONFIG_INTERFACE
-#
-# The configuration interface is a series of menus or dialog boxes that
-# allows you to change all the settings that control Bochs's behavior.
-# There are two choices of configuration interface: a text mode version
-# called "textconfig" and a graphical version called "wx".  The text
-# mode version uses stdin/stdout and is always compiled in.  The graphical
-# version is only available when you use "--with-wx" on the configure 
-# command.  If you do not write a config_interface line, Bochs will 
-# choose a default for you.
-#
-# NOTE: if you use the "wx" configuration interface, you must also use
-# the "wx" display library.
-#=======================================================================
-#config_interface: textconfig
-#config_interface: wx
-
-#=======================================================================
-# DISPLAY_LIBRARY
-#
-# The display library is the code that displays the Bochs VGA screen.  Bochs 
-# has a selection of about 10 different display library implementations for 
-# different platforms.  If you run configure with multiple --with-* options, 
-# the display_library command lets you choose which one you want to run with.
-# If you do not write a display_library line, Bochs will choose a default for
-# you.
-#
-# The choices are: 
-#   x              use X windows interface, cross platform
-#   win32          use native win32 libraries
-#   carbon         use Carbon library (for MacOS X)
-#   beos           use native BeOS libraries
-#   macintosh      use MacOS pre-10
-#   amigaos        use native AmigaOS libraries
-#   sdl            use SDL library, cross platform
-#   svga           use SVGALIB library for Linux, allows graphics without X11
-#   term           text only, uses curses/ncurses library, cross platform
-#   rfb            provides an interface to AT&T's VNC viewer, cross platform
-#   wx             use wxWidgets library, cross platform
-#   nogui          no display at all
-#
-# NOTE: if you use the "wx" configuration interface, you must also use
-# the "wx" display library.
-#
-# Specific options:
-# Some display libraries now support specific option to control their
-# behaviour. See the examples below for currently supported options.
-#=======================================================================
-#display_library: amigaos
-#display_library: beos
-#display_library: carbon
-#display_library: macintosh
-#display_library: nogui
-#display_library: rfb, options="timeout=60" # time to wait for client
-#display_library: sdl, options="fullscreen" # startup in fullscreen mode
-#display_library: term
-#display_library: win32, options="legacyF12" # use F12 to toggle mouse
-#display_library: wx
-#display_library: x
-
-#=======================================================================
-# ROMIMAGE:
-# The ROM BIOS controls what the PC does when it first powers on.
-# Normally, you can use a precompiled BIOS in the source or binary
-# distribution called BIOS-bochs-latest. The ROM BIOS is usually loaded
-# starting at address 0xf0000, and it is exactly 64k long.
-# You can also use the environment variable $BXSHARE to specify the
-# location of the BIOS.
-# The usage of external large BIOS images (up to 512k) at memory top is
-# now supported, but we still recommend to use the BIOS distributed with
-# Bochs. Now the start address can be calculated from image size.
-#=======================================================================
-romimage: file=$BXSHARE/BIOS-bochs-latest
-#romimage: file=mybios.bin, address=0xfff80000 # 512k at memory top
-#romimage: file=mybios.bin # calculate start address from image size
-
-#=======================================================================
-# CPU:
-# This defines cpu-related parameters inside Bochs:
-#
-#  COUNT:
-#  Set the number of processors when Bochs is compiled for SMP emulation.
-#  Bochs currently supports up to 8 processors. If Bochs is compiled
-#  without SMP support, it won't accept values different from 1.
-#
-#  IPS:
-#  Emulated Instructions Per Second.  This is the number of IPS that bochs
-#  is capable of running on your machine. You can recompile Bochs with
-#  --enable-show-ips option enabled, to find your workstation's capability.
-#  Measured IPS value will then be logged into your log file or status bar
-#  (if supported by the gui).
-#
-#  IPS is used to calibrate many time-dependent events within the bochs 
-#  simulation.  For example, changing IPS affects the frequency of VGA
-#  updates, the duration of time before a key starts to autorepeat, and
-#  the measurement of BogoMips and other benchmarks.
-#
-#  Examples:
-#  Machine                                         Mips
-# ________________________________________________________________
-#  2.1Ghz Athlon XP with Linux 2.6/g++ 3.4         12 to 15 Mips
-#  1.6Ghz Intel P4 with Win2000/g++ 3.3             5 to  7 Mips
-#  650Mhz Athlon K-7 with Linux 2.4.4/egcs-2.91.66  2 to  2.5 Mips
-#  400Mhz Pentium II with Linux 2.0.36/egcs-1.0.3   1 to  1.8 Mips
-#=======================================================================
-cpu: count=2, ips=10000000
-
-#=======================================================================
-# MEGS
-# Set the number of Megabytes of physical memory you want to emulate. 
-# The default is 32MB, most OS's won't need more than that.
-# The maximum amount of memory supported is 2048Mb.
-#=======================================================================
-#megs: 256
-#megs: 128
-#megs: 64
-megs: 32
-#megs: 16
-#megs: 8
-
-#=======================================================================
-# OPTROMIMAGE[1-4]:
-# You may now load up to 4 optional ROM images. Be sure to use a 
-# read-only area, typically between C8000 and EFFFF. These optional
-# ROM images should not overwrite the rombios (located at
-# F0000-FFFFF) and the videobios (located at C0000-C7FFF).
-# Those ROM images will be initialized by the bios if they contain 
-# the right signature (0x55AA) and a valid checksum.
-# It can also be a convenient way to upload some arbitrary code/data
-# in the simulation, that can be retrieved by the boot loader
-#=======================================================================
-#optromimage1: file=optionalrom.bin, address=0xd0000
-#optromimage2: file=optionalrom.bin, address=0xd1000
-#optromimage3: file=optionalrom.bin, address=0xd2000
-#optromimage4: file=optionalrom.bin, address=0xd3000
-
-#optramimage1: file=/path/file1.img, address=0x0010000
-#optramimage2: file=/path/file2.img, address=0x0020000
-#optramimage3: file=/path/file3.img, address=0x0030000
-#optramimage4: file=/path/file4.img, address=0x0040000
-
-#=======================================================================
-# VGAROMIMAGE
-# You now need to load a VGA ROM BIOS into C0000.
-#=======================================================================
-#vgaromimage: file=bios/VGABIOS-elpin-2.40
-vgaromimage: file=$BXSHARE/VGABIOS-lgpl-latest
-#vgaromimage: file=bios/VGABIOS-lgpl-latest-cirrus
-
-#=======================================================================
-# VGA:
-# Here you can specify the display extension to be used. With the value
-# 'none' you can use standard VGA with no extension. Other supported
-# values are 'vbe' for Bochs VBE and 'cirrus' for Cirrus SVGA support.
-#=======================================================================
-#vga: extension=cirrus
-#vga: extension=vbe
-vga: extension=none
-
-#=======================================================================
-# FLOPPYA:
-# Point this to pathname of floppy image file or device
-# This should be of a bootable floppy(image/device) if you're
-# booting from 'a' (or 'floppy').
-#
-# You can set the initial status of the media to 'ejected' or 'inserted'.
-#   floppya: 2_88=path, status=ejected             (2.88M 3.5" floppy)
-#   floppya: 1_44=path, status=inserted            (1.44M 3.5" floppy)
-#   floppya: 1_2=path, status=ejected              (1.2M  5.25" floppy)
-#   floppya: 720k=path, status=inserted            (720K  3.5" floppy)
-#   floppya: 360k=path, status=inserted            (360K  5.25" floppy)
-#   floppya: 320k=path, status=inserted            (320K  5.25" floppy)
-#   floppya: 180k=path, status=inserted            (180K  5.25" floppy)
-#   floppya: 160k=path, status=inserted            (160K  5.25" floppy)
-#   floppya: image=path, status=inserted           (guess type from image size)
-#
-# The path should be the name of a disk image file.  On Unix, you can use a raw
-# device name such as /dev/fd0 on Linux.  On win32 platforms, use drive letters
-# such as a: or b: as the path.  The parameter 'image' works with image files
-# only. In that case the size must match one of the supported types.
-#=======================================================================
-floppya: 1_44=/dev/fd0, status=inserted
-#floppya: image=../1.44, status=inserted
-#floppya: 1_44=/dev/fd0H1440, status=inserted
-#floppya: 1_2=../1_2, status=inserted
-#floppya: 1_44=a:, status=inserted
-#floppya: 1_44=a.img, status=inserted
-#floppya: 1_44=/dev/rfd0a, status=inserted
-
-#=======================================================================
-# FLOPPYB:
-# See FLOPPYA above for syntax
-#=======================================================================
-#floppyb: 1_44=b:, status=inserted
-floppyb: 1_44=b.img, status=inserted
-
-#=======================================================================
-# ATA0, ATA1, ATA2, ATA3
-# ATA controller for hard disks and cdroms
-#
-# ata[0-3]: enabled=[0|1], ioaddr1=addr, ioaddr2=addr, irq=number
-# 
-# These options enables up to 4 ata channels. For each channel
-# the two base io addresses and the irq must be specified.
-# 
-# ata0 and ata1 are enabled by default with the values shown below
-#
-# Examples:
-#   ata0: enabled=1, ioaddr1=0x1f0, ioaddr2=0x3f0, irq=14
-#   ata1: enabled=1, ioaddr1=0x170, ioaddr2=0x370, irq=15
-#   ata2: enabled=1, ioaddr1=0x1e8, ioaddr2=0x3e0, irq=11
-#   ata3: enabled=1, ioaddr1=0x168, ioaddr2=0x360, irq=9
-#=======================================================================
-ata0: enabled=1, ioaddr1=0x1f0, ioaddr2=0x3f0, irq=14
-ata1: enabled=1, ioaddr1=0x170, ioaddr2=0x370, irq=15
-ata2: enabled=0, ioaddr1=0x1e8, ioaddr2=0x3e0, irq=11
-ata3: enabled=0, ioaddr1=0x168, ioaddr2=0x360, irq=9
-
-#=======================================================================
-# ATA[0-3]-MASTER, ATA[0-3]-SLAVE
-#
-# This defines the type and characteristics of all attached ata devices:
-#   type=       type of attached device [disk|cdrom] 
-#   mode=       only valid for disks [flat|concat|external|dll|sparse|vmware3]
-#   mode=       only valid for disks [undoable|growing|volatile]
-#   path=       path of the image
-#   cylinders=  only valid for disks
-#   heads=      only valid for disks
-#   spt=        only valid for disks
-#   status=     only valid for cdroms [inserted|ejected]
-#   biosdetect= type of biosdetection [none|auto], only for disks on ata0 [cmos]
-#   translation=type of translation of the bios, only for disks [none|lba|large|rechs|auto]
-#   model=      string returned by identify device command
-#   journal=    optional filename of the redolog for undoable and volatile disks
-#   
-# Point this at a hard disk image file, cdrom iso file, or physical cdrom
-# device.  To create a hard disk image, try running bximage.  It will help you
-# choose the size and then suggest a line that works with it.
-#
-# In UNIX it may be possible to use a raw device as a Bochs hard disk, 
-# but WE DON'T RECOMMEND IT.  In Windows there is no easy way.
-#
-# In windows, the drive letter + colon notation should be used for cdroms.
-# Depending on versions of windows and drivers, you may only be able to 
-# access the "first" cdrom in the system.  On MacOSX, use path="drive"
-# to access the physical drive.
-#
-# The path is always mandatory. For flat hard disk images created with
-# bximage geometry autodetection can be used (cylinders=0 -> cylinders are
-# calculated using heads=16 and spt=63). For other hard disk images and modes
-# the cylinders, heads, and spt are mandatory.
-#
-# Default values are:
-#   mode=flat, biosdetect=auto, translation=auto, model="Generic 1234"
-#
-# The biosdetect option has currently no effect on the bios
-#
-# Examples:
-#   ata0-master: type=disk, mode=flat, path=10M.sample, cylinders=306, heads=4, spt=17
-#   ata0-slave:  type=disk, mode=flat, path=20M.sample, cylinders=615, heads=4, spt=17
-#   ata1-master: type=disk, mode=flat, path=30M.sample, cylinders=615, heads=6, spt=17
-#   ata1-slave:  type=disk, mode=flat, path=46M.sample, cylinders=940, heads=6, spt=17
-#   ata2-master: type=disk, mode=flat, path=62M.sample, cylinders=940, heads=8, spt=17
-#   ata2-slave:  type=disk, mode=flat, path=112M.sample, cylinders=900, heads=15, spt=17
-#   ata3-master: type=disk, mode=flat, path=483M.sample, cylinders=1024, heads=15, spt=63
-#   ata3-slave:  type=cdrom, path=iso.sample, status=inserted
-#=======================================================================
-ata0-master: type=disk, mode=flat, path="xv6.img", cylinders=100, heads=10, spt=10
-ata0-slave: type=disk, mode=flat, path="fs.img", cylinders=1024, heads=1, spt=1
-#ata0-slave: type=cdrom, path=D:, status=inserted
-#ata0-slave: type=cdrom, path=/dev/cdrom, status=inserted
-#ata0-slave: type=cdrom, path="drive", status=inserted
-#ata0-slave: type=cdrom, path=/dev/rcd0d, status=inserted 
-
-#=======================================================================
-# BOOT:
-# This defines the boot sequence. Now you can specify up to 3 boot drives.
-# You can either boot from 'floppy', 'disk' or 'cdrom'
-# legacy 'a' and 'c' are also supported
-# Examples:
-#   boot: floppy
-#   boot: disk
-#   boot: cdrom
-#   boot: c
-#   boot: a
-#   boot: cdrom, floppy, disk
-#=======================================================================
-#boot: floppy
-boot: disk
-
-#=======================================================================
-# CLOCK:
-# This defines the parameters of the clock inside Bochs:
-#
-#  SYNC:
-#  TO BE COMPLETED (see Greg explanation in feature request #536329)
-#
-#  TIME0:
-#  Specifies the start (boot) time of the virtual machine. Use a time 
-#  value as returned by the time(2) system call. If no time0 value is 
-#  set or if time0 equal to 1 (special case) or if time0 equal 'local', 
-#  the simulation will be started at the current local host time.
-#  If time0 equal to 2 (special case) or if time0 equal 'utc',
-#  the simulation will be started at the current utc time.
-#
-# Syntax:
-#  clock: sync=[none|slowdown|realtime|both], time0=[timeValue|local|utc]
-#
-# Example:
-#   clock: sync=none,     time0=local       # Now (localtime)
-#   clock: sync=slowdown, time0=315529200   # Tue Jan  1 00:00:00 1980
-#   clock: sync=none,     time0=631148400   # Mon Jan  1 00:00:00 1990
-#   clock: sync=realtime, time0=938581955   # Wed Sep 29 07:12:35 1999
-#   clock: sync=realtime, time0=946681200   # Sat Jan  1 00:00:00 2000
-#   clock: sync=none,     time0=1           # Now (localtime)
-#   clock: sync=none,     time0=utc         # Now (utc/gmt)
-# 
-# Default value are sync=none, time0=local
-#=======================================================================
-#clock: sync=none, time0=local
-
-
-#=======================================================================
-# FLOPPY_BOOTSIG_CHECK: disabled=[0|1]
-# Enables or disables the 0xaa55 signature check on boot floppies
-# Defaults to disabled=0
-# Examples:
-#   floppy_bootsig_check: disabled=0
-#   floppy_bootsig_check: disabled=1
-#=======================================================================
-#floppy_bootsig_check: disabled=1
-floppy_bootsig_check: disabled=0
-
-#=======================================================================
-# LOG:
-# Give the path of the log file you'd like Bochs debug and misc. verbiage
-# to be written to. If you don't use this option or set the filename to
-# '-' the output is written to the console. If you really don't want it,
-# make it "/dev/null" (Unix) or "nul" (win32). :^(
-#
-# Examples:
-#   log: ./bochs.out
-#   log: /dev/tty
-#=======================================================================
-#log: /dev/null
-log: bochsout.txt
-
-#=======================================================================
-# LOGPREFIX:
-# This handles the format of the string prepended to each log line.
-# You may use those special tokens :
-#   %t : 11 decimal digits timer tick
-#   %i : 8 hexadecimal digits of cpu current eip (ignored in SMP configuration)
-#   %e : 1 character event type ('i'nfo, 'd'ebug, 'p'anic, 'e'rror)
-#   %d : 5 characters string of the device, between brackets
-# 
-# Default : %t%e%d
-# Examples:
-#   logprefix: %t-%e-@%i-%d
-#   logprefix: %i%e%d
-#=======================================================================
-#logprefix: %t%e%d
-
-#=======================================================================
-# LOG CONTROLS
-#
-# Bochs now has four severity levels for event logging.
-#   panic: cannot proceed.  If you choose to continue after a panic, 
-#          don't be surprised if you get strange behavior or crashes.
-#   error: something went wrong, but it is probably safe to continue the
-#          simulation.
-#   info: interesting or useful messages.
-#   debug: messages useful only when debugging the code.  This may
-#          spit out thousands per second.
-#
-# For events of each level, you can choose to crash, report, or ignore.
-# TODO: allow choice based on the facility: e.g. crash on panics from
-#       everything except the cdrom, and only report those.
-#
-# If you are experiencing many panics, it can be helpful to change
-# the panic action to report instead of fatal.  However, be aware
-# that anything executed after a panic is uncharted territory and can 
-# cause bochs to become unstable.  The panic is a "graceful exit," so
-# if you disable it you may get a spectacular disaster instead.
-#=======================================================================
-panic: action=ask
-error: action=report
-info: action=report
-debug: action=ignore
-#pass: action=fatal
-
-#=======================================================================
-# DEBUGGER_LOG:
-# Give the path of the log file you'd like Bochs to log debugger output.
-# If you really don't want it, make it /dev/null or '-'. :^(
-#
-# Examples:
-#   debugger_log: ./debugger.out
-#=======================================================================
-#debugger_log: /dev/null
-#debugger_log: debugger.out
-debugger_log: -
-
-#=======================================================================
-# COM1, COM2, COM3, COM4:
-# This defines a serial port (UART type 16550A). In the 'term' you can specify
-# a device to use as com1. This can be a real serial line, or a pty.  To use
-# a pty (under X/Unix), create two windows (xterms, usually).  One of them will
-# run bochs, and the other will act as com1. Find out the tty the com1
-# window using the `tty' command, and use that as the `dev' parameter.
-# Then do `sleep 1000000' in the com1 window to keep the shell from
-# messing with things, and run bochs in the other window.  Serial I/O to
-# com1 (port 0x3f8) will all go to the other window.
-# Other serial modes are 'null' (no input/output), 'file' (output to a file
-# specified as the 'dev' parameter), 'raw' (use the real serial port - under
-# construction for win32), 'mouse' (standard serial mouse - requires
-# mouse option setting 'type=serial' or 'type=serial_wheel') and 'socket'
-# (connect a networking socket).
-#
-# Examples:
-#   com1: enabled=1, mode=null
-#   com1: enabled=1, mode=mouse
-#   com2: enabled=1, mode=file, dev=serial.out
-#   com3: enabled=1, mode=raw, dev=com1
-#   com3: enabled=1, mode=socket, dev=localhost:8888
-#=======================================================================
-#com1: enabled=1, mode=term, dev=/dev/ttyp9
-
-
-#=======================================================================
-# PARPORT1, PARPORT2:
-# This defines a parallel (printer) port. When turned on and an output file is
-# defined the emulated printer port sends characters printed by the guest OS
-# into the output file. On some platforms a device filename can be used to
-# send the data to the real parallel port (e.g. "/dev/lp0" on Linux, "lpt1" on
-# win32 platforms).
-#
-# Examples:
-#   parport1: enabled=1, file="parport.out"
-#   parport2: enabled=1, file="/dev/lp0"
-#   parport1: enabled=0
-#=======================================================================
-parport1: enabled=1, file="/dev/stdout"
-
-#=======================================================================
-# SB16:
-# This defines the SB16 sound emulation. It can have several of the
-# following properties.
-# All properties are in the format sb16: property=value
-# midi: The filename is where the midi data is sent. This can be a
-#       device or just a file if you want to record the midi data.
-# midimode:
-#      0=no data
-#      1=output to device (system dependent. midi denotes the device driver)
-#      2=SMF file output, including headers
-#      3=output the midi data stream to the file (no midi headers and no
-#        delta times, just command and data bytes)
-# wave: This is the device/file where wave output is stored
-# wavemode:
-#      0=no data
-#      1=output to device (system dependent. wave denotes the device driver)
-#      2=VOC file output, incl. headers
-#      3=output the raw wave stream to the file
-# log:  The file to write the sb16 emulator messages to.
-# loglevel:
-#      0=no log
-#      1=resource changes, midi program and bank changes
-#      2=severe errors
-#      3=all errors
-#      4=all errors plus all port accesses
-#      5=all errors and port accesses plus a lot of extra info
-# dmatimer:
-#      microseconds per second for a DMA cycle.  Make it smaller to fix
-#      non-continuous sound.  750000 is usually a good value.  This needs a
-#      reasonably correct setting for the IPS parameter of the CPU option.
-#
-# For an example look at the next line:
-#=======================================================================
-
-#sb16: midimode=1, midi=/dev/midi00, wavemode=1, wave=/dev/dsp, loglevel=2, log=sb16.log, dmatimer=600000
-
-#=======================================================================
-# VGA_UPDATE_INTERVAL:
-# Video memory is scanned for updates and screen updated every so many
-# virtual seconds.  The default is 40000, about 25Hz. Keep in mind that
-# you must tweak the 'cpu: ips=N' directive to be as close to the number
-# of emulated instructions-per-second your workstation can do, for this
-# to be accurate.
-#
-# Examples:
-#   vga_update_interval: 250000
-#=======================================================================
-vga_update_interval: 300000
-
-# using for Winstone '98 tests
-#vga_update_interval:  100000
-
-#=======================================================================
-# KEYBOARD_SERIAL_DELAY:
-# Approximate time in microseconds that it takes one character to
-# be transfered from the keyboard to controller over the serial path.
-# Examples:
-#   keyboard_serial_delay: 200
-#=======================================================================
-keyboard_serial_delay: 250
-
-#=======================================================================
-# KEYBOARD_PASTE_DELAY:
-# Approximate time in microseconds between attempts to paste
-# characters to the keyboard controller. This leaves time for the
-# guest os to deal with the flow of characters.  The ideal setting
-# depends on how your operating system processes characters.  The
-# default of 100000 usec (.1 seconds) was chosen because it works 
-# consistently in Windows.
-#
-# If your OS is losing characters during a paste, increase the paste
-# delay until it stops losing characters.
-#
-# Examples:
-#   keyboard_paste_delay: 100000
-#=======================================================================
-keyboard_paste_delay: 100000
-
-#=======================================================================
-# MOUSE: 
-# This option prevents Bochs from creating mouse "events" unless a mouse
-# is  enabled. The hardware emulation itself is not disabled by this.
-# You can turn the mouse on by setting enabled to 1, or turn it off by
-# setting enabled to 0. Unless you have a particular reason for enabling
-# the mouse by default, it is recommended that you leave it off.
-# You can also toggle the mouse usage at runtime (control key + middle
-# mouse button on X11, SDL, wxWidgets and Win32).
-# With the mouse type option you can select the type of mouse to emulate.
-# The default value is 'ps2'. The other choices are 'imps2' (wheel mouse
-# on PS/2), 'serial', 'serial_wheel' (one com port requires setting
-# 'mode=mouse') and 'usb' (3-button mouse - one of the USB ports must be
-# connected with the 'mouse' device - requires PCI and USB support).
-#
-# Examples:
-#   mouse: enabled=1
-#   mouse: enabled=1, type=imps2
-#   mouse: enabled=1, type=serial
-#   mouse: enabled=0
-#=======================================================================
-mouse: enabled=0
-
-#=======================================================================
-# private_colormap: Request that the GUI create and use it's own
-#                   non-shared colormap.  This colormap will be used
-#                   when in the bochs window.  If not enabled, a
-#                   shared colormap scheme may be used.  Not implemented
-#                   on all GUI's.
-#
-# Examples:
-#   private_colormap: enabled=1
-#   private_colormap: enabled=0
-#=======================================================================
-private_colormap: enabled=0
-
-#=======================================================================
-# fullscreen: ONLY IMPLEMENTED ON AMIGA
-#             Request that Bochs occupy the entire screen instead of a 
-#             window.
-#
-# Examples:
-#   fullscreen: enabled=0
-#   fullscreen: enabled=1
-#=======================================================================
-#fullscreen: enabled=0
-#screenmode: name="sample"
-
-#=======================================================================
-# ne2k: NE2000 compatible ethernet adapter
-#
-# Examples:
-# ne2k: ioaddr=IOADDR, irq=IRQ, mac=MACADDR, ethmod=MODULE, ethdev=DEVICE, script=SCRIPT
-#
-# ioaddr, irq: You probably won't need to change ioaddr and irq, unless there
-# are IRQ conflicts.
-#
-# mac: The MAC address MUST NOT match the address of any machine on the net.
-# Also, the first byte must be an even number (bit 0 set means a multicast
-# address), and you cannot use ff:ff:ff:ff:ff:ff because that's the broadcast
-# address.  For the ethertap module, you must use fe:fd:00:00:00:01.  There may
-# be other restrictions too.  To be safe, just use the b0:c4... address.
-#
-# ethdev: The ethdev value is the name of the network interface on your host
-# platform.  On UNIX machines, you can get the name by running ifconfig.  On
-# Windows machines, you must run niclist to get the name of the ethdev.
-# Niclist source code is in misc/niclist.c and it is included in Windows 
-# binary releases.
-#
-# script: The script value is optional, and is the name of a script that 
-# is executed after bochs initialize the network interface. You can use 
-# this script to configure this network interface, or enable masquerading.
-# This is mainly useful for the tun/tap devices that only exist during
-# Bochs execution. The network interface name is supplied to the script
-# as first parameter
-#
-# If you don't want to make connections to any physical networks,
-# you can use the following 'ethmod's to simulate a virtual network.
-#   null: All packets are discarded, but logged to a few files.
-#   arpback: ARP is simulated. Disabled by default.
-#   vde:  Virtual Distributed Ethernet
-#   vnet: ARP, ICMP-echo(ping), DHCP and read/write TFTP are simulated.
-#         The virtual host uses 192.168.10.1.
-#         DHCP assigns 192.168.10.2 to the guest.
-#         TFTP uses the ethdev value for the root directory and doesn't
-#         overwrite files.
-#
-#=======================================================================
-# ne2k: ioaddr=0x240, irq=9, mac=fe:fd:00:00:00:01, ethmod=fbsd, ethdev=en0 #macosx
-# ne2k: ioaddr=0x240, irq=9, mac=b0:c4:20:00:00:00, ethmod=fbsd, ethdev=xl0
-# ne2k: ioaddr=0x240, irq=9, mac=b0:c4:20:00:00:00, ethmod=linux, ethdev=eth0
-# ne2k: ioaddr=0x240, irq=9, mac=b0:c4:20:00:00:01, ethmod=win32, ethdev=MYCARD
-# ne2k: ioaddr=0x240, irq=9, mac=fe:fd:00:00:00:01, ethmod=tap, ethdev=tap0
-# ne2k: ioaddr=0x240, irq=9, mac=fe:fd:00:00:00:01, ethmod=tuntap, ethdev=/dev/net/tun0, script=./tunconfig
-# ne2k: ioaddr=0x240, irq=9, mac=b0:c4:20:00:00:01, ethmod=null, ethdev=eth0
-# ne2k: ioaddr=0x240, irq=9, mac=b0:c4:20:00:00:01, ethmod=vde, ethdev="/tmp/vde.ctl"
-# ne2k: ioaddr=0x240, irq=9, mac=b0:c4:20:00:00:01, ethmod=vnet, ethdev="c:/temp"
-
-#=======================================================================
-# KEYBOARD_MAPPING:
-# This enables a remap of a physical localized keyboard to a 
-# virtualized us keyboard, as the PC architecture expects.
-# If enabled, the keymap file must be specified.
-# 
-# Examples:
-#   keyboard_mapping: enabled=1, map=gui/keymaps/x11-pc-de.map
-#=======================================================================
-keyboard_mapping: enabled=0, map=
-
-#=======================================================================
-# KEYBOARD_TYPE:
-# Type of keyboard return by a "identify keyboard" command to the
-# keyboard controler. It must be one of "xt", "at" or "mf".
-# Defaults to "mf". It should be ok for almost everybody. A known
-# exception is french macs, that do have a "at"-like keyboard.
-#
-# Examples:
-#   keyboard_type: mf
-#=======================================================================
-#keyboard_type: mf
-
-#=======================================================================
-# USER_SHORTCUT:
-# This defines the keyboard shortcut to be sent when you press the "user"
-# button in the headerbar. The shortcut string is a combination of maximum
-# 3 key names (listed below) separated with a '-' character. The old-style
-# syntax (without the '-') still works for the key combinations supported
-# in Bochs 2.2.1.
-# Valid key names:
-# "alt", "bksl", "bksp", "ctrl", "del", "down", "end", "enter", "esc",
-# "f1", ... "f12", "home", "ins", "left", "menu", "minus", "pgdwn", "pgup",
-# "plus", "right", "shift", "space", "tab", "up", and "win".
-#
-# Example:
-#   user_shortcut: keys=ctrl-alt-del
-#=======================================================================
-#user_shortcut: keys=ctrl-alt-del
-
-#=======================================================================
-# I440FXSUPPORT:
-# This option controls the presence of the i440FX PCI chipset. You can
-# also specify the devices connected to PCI slots. Up to 5 slots are
-# available now. These devices are currently supported: ne2k, pcivga,
-# pcidev and pcipnic. If Bochs is compiled with Cirrus SVGA support
-# you'll have the additional choice 'cirrus'.
-#
-# Example:
-#   i440fxsupport: enabled=1, slot1=pcivga, slot2=ne2k
-#=======================================================================
-#i440fxsupport: enabled=1
-
-#=======================================================================
-# USB1:
-# This option controls the presence of the USB root hub which is a part
-# of the i440FX PCI chipset. With the portX option you can connect devices
-# to the hub (currently supported: 'mouse' and 'keypad'). If you connect
-# the mouse to one of the ports and use the mouse option 'type=usb' you'll
-# have a 3-button USB mouse.
-#
-# Example:
-#   usb1: enabled=1, port1=mouse, port2=keypad
-#=======================================================================
-#usb1: enabled=1
-
-#=======================================================================
-# CMOSIMAGE:
-# This defines image file that can be loaded into the CMOS RAM at startup.
-# The rtc_init parameter controls whether initialize the RTC with values stored
-# in the image. By default the time0 argument given to the clock option is used.
-# With 'rtc_init=image' the image is the source for the initial time.
-#
-# Example:
-#   cmosimage: file=cmos.img, rtc_init=image
-#=======================================================================
-#cmosimage: file=cmos.img, rtc_init=time0
-
-#=======================================================================
-# other stuff
-#=======================================================================
-#magic_break: enabled=1
-#load32bitOSImage: os=nullkernel, path=../kernel.img, iolog=../vga_io.log
-#load32bitOSImage: os=linux, path=../linux.img, iolog=../vga_io.log, initrd=../initrd.img
-#text_snapshot_check: enable
-
-#-------------------------
-# PCI host device mapping
-#-------------------------
-#pcidev: vendor=0x1234, device=0x5678
-
-#=======================================================================
-# GDBSTUB:
-# Enable GDB stub. See user documentation for details.
-# Default value is enabled=0.
-#=======================================================================
-#gdbstub: enabled=0, port=1234, text_base=0, data_base=0, bss_base=0
-
-#=======================================================================
-# IPS:
-# The IPS directive is DEPRECATED. Use the parameter IPS of the CPU
-# directive instead.
-#=======================================================================
-#ips: 10000000
-
-#=======================================================================
-# for Macintosh, use the style of pathnames in the following
-# examples.
-#
-# vgaromimage: :bios:VGABIOS-elpin-2.40
-# romimage: file=:bios:BIOS-bochs-latest, address=0xf0000
-# floppya: 1_44=[fd:], status=inserted
-#=======================================================================
diff --git a/xv6/echo.asm b/xv6/echo.asm
deleted file mode 100644
index 0421f4e..0000000
--- a/xv6/echo.asm
+++ /dev/null
@@ -1,1207 +0,0 @@
-
-_echo:     file format elf32-i386
-
-
-Disassembly of section .text:
-
-00000000 <main>:
-#include "stat.h"
-#include "user.h"
-
-int
-main(int argc, char *argv[])
-{
-   0:	55                   	push   %ebp
-   1:	89 e5                	mov    %esp,%ebp
-   3:	83 e4 f0             	and    $0xfffffff0,%esp
-   6:	83 ec 20             	sub    $0x20,%esp
-  int i;
-
-  for(i = 1; i < argc; i++)
-   9:	c7 44 24 1c 01 00 00 	movl   $0x1,0x1c(%esp)
-  10:	00 
-  11:	eb 45                	jmp    58 <main+0x58>
-    printf(1, "%s%s", argv[i], i+1 < argc ? " " : "\n");
-  13:	8b 44 24 1c          	mov    0x1c(%esp),%eax
-  17:	83 c0 01             	add    $0x1,%eax
-  1a:	3b 45 08             	cmp    0x8(%ebp),%eax
-  1d:	7d 07                	jge    26 <main+0x26>
-  1f:	b8 37 08 00 00       	mov    $0x837,%eax
-  24:	eb 05                	jmp    2b <main+0x2b>
-  26:	b8 39 08 00 00       	mov    $0x839,%eax
-  2b:	8b 54 24 1c          	mov    0x1c(%esp),%edx
-  2f:	c1 e2 02             	shl    $0x2,%edx
-  32:	03 55 0c             	add    0xc(%ebp),%edx
-  35:	8b 12                	mov    (%edx),%edx
-  37:	89 44 24 0c          	mov    %eax,0xc(%esp)
-  3b:	89 54 24 08          	mov    %edx,0x8(%esp)
-  3f:	c7 44 24 04 3b 08 00 	movl   $0x83b,0x4(%esp)
-  46:	00 
-  47:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
-  4e:	e8 20 04 00 00       	call   473 <printf>
-int
-main(int argc, char *argv[])
-{
-  int i;
-
-  for(i = 1; i < argc; i++)
-  53:	83 44 24 1c 01       	addl   $0x1,0x1c(%esp)
-  58:	8b 44 24 1c          	mov    0x1c(%esp),%eax
-  5c:	3b 45 08             	cmp    0x8(%ebp),%eax
-  5f:	7c b2                	jl     13 <main+0x13>
-    printf(1, "%s%s", argv[i], i+1 < argc ? " " : "\n");
-  exit(EXIT_STATUS_SUCCESS);
-  61:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
-  68:	e8 67 02 00 00       	call   2d4 <exit>
-  6d:	90                   	nop
-  6e:	90                   	nop
-  6f:	90                   	nop
-
-00000070 <stosb>:
-               "cc");
-}
-
-static inline void
-stosb(void *addr, int data, int cnt)
-{
-  70:	55                   	push   %ebp
-  71:	89 e5                	mov    %esp,%ebp
-  73:	57                   	push   %edi
-  74:	53                   	push   %ebx
-  asm volatile("cld; rep stosb" :
-  75:	8b 4d 08             	mov    0x8(%ebp),%ecx
-  78:	8b 55 10             	mov    0x10(%ebp),%edx
-  7b:	8b 45 0c             	mov    0xc(%ebp),%eax
-  7e:	89 cb                	mov    %ecx,%ebx
-  80:	89 df                	mov    %ebx,%edi
-  82:	89 d1                	mov    %edx,%ecx
-  84:	fc                   	cld    
-  85:	f3 aa                	rep stos %al,%es:(%edi)
-  87:	89 ca                	mov    %ecx,%edx
-  89:	89 fb                	mov    %edi,%ebx
-  8b:	89 5d 08             	mov    %ebx,0x8(%ebp)
-  8e:	89 55 10             	mov    %edx,0x10(%ebp)
-               "=D" (addr), "=c" (cnt) :
-               "0" (addr), "1" (cnt), "a" (data) :
-               "memory", "cc");
-}
-  91:	5b                   	pop    %ebx
-  92:	5f                   	pop    %edi
-  93:	5d                   	pop    %ebp
-  94:	c3                   	ret    
-
-00000095 <strcpy>:
-#include "user.h"
-#include "x86.h"
-
-char*
-strcpy(char *s, char *t)
-{
-  95:	55                   	push   %ebp
-  96:	89 e5                	mov    %esp,%ebp
-  98:	83 ec 10             	sub    $0x10,%esp
-  char *os;
-
-  os = s;
-  9b:	8b 45 08             	mov    0x8(%ebp),%eax
-  9e:	89 45 fc             	mov    %eax,-0x4(%ebp)
-  while((*s++ = *t++) != 0)
-  a1:	90                   	nop
-  a2:	8b 45 0c             	mov    0xc(%ebp),%eax
-  a5:	0f b6 10             	movzbl (%eax),%edx
-  a8:	8b 45 08             	mov    0x8(%ebp),%eax
-  ab:	88 10                	mov    %dl,(%eax)
-  ad:	8b 45 08             	mov    0x8(%ebp),%eax
-  b0:	0f b6 00             	movzbl (%eax),%eax
-  b3:	84 c0                	test   %al,%al
-  b5:	0f 95 c0             	setne  %al
-  b8:	83 45 08 01          	addl   $0x1,0x8(%ebp)
-  bc:	83 45 0c 01          	addl   $0x1,0xc(%ebp)
-  c0:	84 c0                	test   %al,%al
-  c2:	75 de                	jne    a2 <strcpy+0xd>
-    ;
-  return os;
-  c4:	8b 45 fc             	mov    -0x4(%ebp),%eax
-}
-  c7:	c9                   	leave  
-  c8:	c3                   	ret    
-
-000000c9 <strcmp>:
-
-int
-strcmp(const char *p, const char *q)
-{
-  c9:	55                   	push   %ebp
-  ca:	89 e5                	mov    %esp,%ebp
-  while(*p && *p == *q)
-  cc:	eb 08                	jmp    d6 <strcmp+0xd>
-    p++, q++;
-  ce:	83 45 08 01          	addl   $0x1,0x8(%ebp)
-  d2:	83 45 0c 01          	addl   $0x1,0xc(%ebp)
-}
-
-int
-strcmp(const char *p, const char *q)
-{
-  while(*p && *p == *q)
-  d6:	8b 45 08             	mov    0x8(%ebp),%eax
-  d9:	0f b6 00             	movzbl (%eax),%eax
-  dc:	84 c0                	test   %al,%al
-  de:	74 10                	je     f0 <strcmp+0x27>
-  e0:	8b 45 08             	mov    0x8(%ebp),%eax
-  e3:	0f b6 10             	movzbl (%eax),%edx
-  e6:	8b 45 0c             	mov    0xc(%ebp),%eax
-  e9:	0f b6 00             	movzbl (%eax),%eax
-  ec:	38 c2                	cmp    %al,%dl
-  ee:	74 de                	je     ce <strcmp+0x5>
-    p++, q++;
-  return (uchar)*p - (uchar)*q;
-  f0:	8b 45 08             	mov    0x8(%ebp),%eax
-  f3:	0f b6 00             	movzbl (%eax),%eax
-  f6:	0f b6 d0             	movzbl %al,%edx
-  f9:	8b 45 0c             	mov    0xc(%ebp),%eax
-  fc:	0f b6 00             	movzbl (%eax),%eax
-  ff:	0f b6 c0             	movzbl %al,%eax
- 102:	89 d1                	mov    %edx,%ecx
- 104:	29 c1                	sub    %eax,%ecx
- 106:	89 c8                	mov    %ecx,%eax
-}
- 108:	5d                   	pop    %ebp
- 109:	c3                   	ret    
-
-0000010a <strlen>:
-
-uint
-strlen(char *s)
-{
- 10a:	55                   	push   %ebp
- 10b:	89 e5                	mov    %esp,%ebp
- 10d:	83 ec 10             	sub    $0x10,%esp
-  int n;
-
-  for(n = 0; s[n]; n++)
- 110:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
- 117:	eb 04                	jmp    11d <strlen+0x13>
- 119:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
- 11d:	8b 45 fc             	mov    -0x4(%ebp),%eax
- 120:	03 45 08             	add    0x8(%ebp),%eax
- 123:	0f b6 00             	movzbl (%eax),%eax
- 126:	84 c0                	test   %al,%al
- 128:	75 ef                	jne    119 <strlen+0xf>
-    ;
-  return n;
- 12a:	8b 45 fc             	mov    -0x4(%ebp),%eax
-}
- 12d:	c9                   	leave  
- 12e:	c3                   	ret    
-
-0000012f <memset>:
-
-void*
-memset(void *dst, int c, uint n)
-{
- 12f:	55                   	push   %ebp
- 130:	89 e5                	mov    %esp,%ebp
- 132:	83 ec 0c             	sub    $0xc,%esp
-  stosb(dst, c, n);
- 135:	8b 45 10             	mov    0x10(%ebp),%eax
- 138:	89 44 24 08          	mov    %eax,0x8(%esp)
- 13c:	8b 45 0c             	mov    0xc(%ebp),%eax
- 13f:	89 44 24 04          	mov    %eax,0x4(%esp)
- 143:	8b 45 08             	mov    0x8(%ebp),%eax
- 146:	89 04 24             	mov    %eax,(%esp)
- 149:	e8 22 ff ff ff       	call   70 <stosb>
-  return dst;
- 14e:	8b 45 08             	mov    0x8(%ebp),%eax
-}
- 151:	c9                   	leave  
- 152:	c3                   	ret    
-
-00000153 <strchr>:
-
-char*
-strchr(const char *s, char c)
-{
- 153:	55                   	push   %ebp
- 154:	89 e5                	mov    %esp,%ebp
- 156:	83 ec 04             	sub    $0x4,%esp
- 159:	8b 45 0c             	mov    0xc(%ebp),%eax
- 15c:	88 45 fc             	mov    %al,-0x4(%ebp)
-  for(; *s; s++)
- 15f:	eb 14                	jmp    175 <strchr+0x22>
-    if(*s == c)
- 161:	8b 45 08             	mov    0x8(%ebp),%eax
- 164:	0f b6 00             	movzbl (%eax),%eax
- 167:	3a 45 fc             	cmp    -0x4(%ebp),%al
- 16a:	75 05                	jne    171 <strchr+0x1e>
-      return (char*)s;
- 16c:	8b 45 08             	mov    0x8(%ebp),%eax
- 16f:	eb 13                	jmp    184 <strchr+0x31>
-}
-
-char*
-strchr(const char *s, char c)
-{
-  for(; *s; s++)
- 171:	83 45 08 01          	addl   $0x1,0x8(%ebp)
- 175:	8b 45 08             	mov    0x8(%ebp),%eax
- 178:	0f b6 00             	movzbl (%eax),%eax
- 17b:	84 c0                	test   %al,%al
- 17d:	75 e2                	jne    161 <strchr+0xe>
-    if(*s == c)
-      return (char*)s;
-  return 0;
- 17f:	b8 00 00 00 00       	mov    $0x0,%eax
-}
- 184:	c9                   	leave  
- 185:	c3                   	ret    
-
-00000186 <gets>:
-
-char*
-gets(char *buf, int max)
-{
- 186:	55                   	push   %ebp
- 187:	89 e5                	mov    %esp,%ebp
- 189:	83 ec 28             	sub    $0x28,%esp
-  int i, cc;
-  char c;
-
-  for(i=0; i+1 < max; ){
- 18c:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
- 193:	eb 44                	jmp    1d9 <gets+0x53>
-    cc = read(0, &c, 1);
- 195:	c7 44 24 08 01 00 00 	movl   $0x1,0x8(%esp)
- 19c:	00 
- 19d:	8d 45 ef             	lea    -0x11(%ebp),%eax
- 1a0:	89 44 24 04          	mov    %eax,0x4(%esp)
- 1a4:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
- 1ab:	e8 3c 01 00 00       	call   2ec <read>
- 1b0:	89 45 f0             	mov    %eax,-0x10(%ebp)
-    if(cc < 1)
- 1b3:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
- 1b7:	7e 2d                	jle    1e6 <gets+0x60>
-      break;
-    buf[i++] = c;
- 1b9:	8b 45 f4             	mov    -0xc(%ebp),%eax
- 1bc:	03 45 08             	add    0x8(%ebp),%eax
- 1bf:	0f b6 55 ef          	movzbl -0x11(%ebp),%edx
- 1c3:	88 10                	mov    %dl,(%eax)
- 1c5:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
-    if(c == '\n' || c == '\r')
- 1c9:	0f b6 45 ef          	movzbl -0x11(%ebp),%eax
- 1cd:	3c 0a                	cmp    $0xa,%al
- 1cf:	74 16                	je     1e7 <gets+0x61>
- 1d1:	0f b6 45 ef          	movzbl -0x11(%ebp),%eax
- 1d5:	3c 0d                	cmp    $0xd,%al
- 1d7:	74 0e                	je     1e7 <gets+0x61>
-gets(char *buf, int max)
-{
-  int i, cc;
-  char c;
-
-  for(i=0; i+1 < max; ){
- 1d9:	8b 45 f4             	mov    -0xc(%ebp),%eax
- 1dc:	83 c0 01             	add    $0x1,%eax
- 1df:	3b 45 0c             	cmp    0xc(%ebp),%eax
- 1e2:	7c b1                	jl     195 <gets+0xf>
- 1e4:	eb 01                	jmp    1e7 <gets+0x61>
-    cc = read(0, &c, 1);
-    if(cc < 1)
-      break;
- 1e6:	90                   	nop
-    buf[i++] = c;
-    if(c == '\n' || c == '\r')
-      break;
-  }
-  buf[i] = '\0';
- 1e7:	8b 45 f4             	mov    -0xc(%ebp),%eax
- 1ea:	03 45 08             	add    0x8(%ebp),%eax
- 1ed:	c6 00 00             	movb   $0x0,(%eax)
-  return buf;
- 1f0:	8b 45 08             	mov    0x8(%ebp),%eax
-}
- 1f3:	c9                   	leave  
- 1f4:	c3                   	ret    
-
-000001f5 <stat>:
-
-int
-stat(char *n, struct stat *st)
-{
- 1f5:	55                   	push   %ebp
- 1f6:	89 e5                	mov    %esp,%ebp
- 1f8:	83 ec 28             	sub    $0x28,%esp
-  int fd;
-  int r;
-
-  fd = open(n, O_RDONLY);
- 1fb:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
- 202:	00 
- 203:	8b 45 08             	mov    0x8(%ebp),%eax
- 206:	89 04 24             	mov    %eax,(%esp)
- 209:	e8 06 01 00 00       	call   314 <open>
- 20e:	89 45 f4             	mov    %eax,-0xc(%ebp)
-  if(fd < 0)
- 211:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
- 215:	79 07                	jns    21e <stat+0x29>
-    return -1;
- 217:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
- 21c:	eb 23                	jmp    241 <stat+0x4c>
-  r = fstat(fd, st);
- 21e:	8b 45 0c             	mov    0xc(%ebp),%eax
- 221:	89 44 24 04          	mov    %eax,0x4(%esp)
- 225:	8b 45 f4             	mov    -0xc(%ebp),%eax
- 228:	89 04 24             	mov    %eax,(%esp)
- 22b:	e8 fc 00 00 00       	call   32c <fstat>
- 230:	89 45 f0             	mov    %eax,-0x10(%ebp)
-  close(fd);
- 233:	8b 45 f4             	mov    -0xc(%ebp),%eax
- 236:	89 04 24             	mov    %eax,(%esp)
- 239:	e8 be 00 00 00       	call   2fc <close>
-  return r;
- 23e:	8b 45 f0             	mov    -0x10(%ebp),%eax
-}
- 241:	c9                   	leave  
- 242:	c3                   	ret    
-
-00000243 <atoi>:
-
-int
-atoi(const char *s)
-{
- 243:	55                   	push   %ebp
- 244:	89 e5                	mov    %esp,%ebp
- 246:	83 ec 10             	sub    $0x10,%esp
-  int n;
-
-  n = 0;
- 249:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
-  while('0' <= *s && *s <= '9')
- 250:	eb 23                	jmp    275 <atoi+0x32>
-    n = n*10 + *s++ - '0';
- 252:	8b 55 fc             	mov    -0x4(%ebp),%edx
- 255:	89 d0                	mov    %edx,%eax
- 257:	c1 e0 02             	shl    $0x2,%eax
- 25a:	01 d0                	add    %edx,%eax
- 25c:	01 c0                	add    %eax,%eax
- 25e:	89 c2                	mov    %eax,%edx
- 260:	8b 45 08             	mov    0x8(%ebp),%eax
- 263:	0f b6 00             	movzbl (%eax),%eax
- 266:	0f be c0             	movsbl %al,%eax
- 269:	01 d0                	add    %edx,%eax
- 26b:	83 e8 30             	sub    $0x30,%eax
- 26e:	89 45 fc             	mov    %eax,-0x4(%ebp)
- 271:	83 45 08 01          	addl   $0x1,0x8(%ebp)
-atoi(const char *s)
-{
-  int n;
-
-  n = 0;
-  while('0' <= *s && *s <= '9')
- 275:	8b 45 08             	mov    0x8(%ebp),%eax
- 278:	0f b6 00             	movzbl (%eax),%eax
- 27b:	3c 2f                	cmp    $0x2f,%al
- 27d:	7e 0a                	jle    289 <atoi+0x46>
- 27f:	8b 45 08             	mov    0x8(%ebp),%eax
- 282:	0f b6 00             	movzbl (%eax),%eax
- 285:	3c 39                	cmp    $0x39,%al
- 287:	7e c9                	jle    252 <atoi+0xf>
-    n = n*10 + *s++ - '0';
-  return n;
- 289:	8b 45 fc             	mov    -0x4(%ebp),%eax
-}
- 28c:	c9                   	leave  
- 28d:	c3                   	ret    
-
-0000028e <memmove>:
-
-void*
-memmove(void *vdst, void *vsrc, int n)
-{
- 28e:	55                   	push   %ebp
- 28f:	89 e5                	mov    %esp,%ebp
- 291:	83 ec 10             	sub    $0x10,%esp
-  char *dst, *src;
-  
-  dst = vdst;
- 294:	8b 45 08             	mov    0x8(%ebp),%eax
- 297:	89 45 fc             	mov    %eax,-0x4(%ebp)
-  src = vsrc;
- 29a:	8b 45 0c             	mov    0xc(%ebp),%eax
- 29d:	89 45 f8             	mov    %eax,-0x8(%ebp)
-  while(n-- > 0)
- 2a0:	eb 13                	jmp    2b5 <memmove+0x27>
-    *dst++ = *src++;
- 2a2:	8b 45 f8             	mov    -0x8(%ebp),%eax
- 2a5:	0f b6 10             	movzbl (%eax),%edx
- 2a8:	8b 45 fc             	mov    -0x4(%ebp),%eax
- 2ab:	88 10                	mov    %dl,(%eax)
- 2ad:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
- 2b1:	83 45 f8 01          	addl   $0x1,-0x8(%ebp)
-{
-  char *dst, *src;
-  
-  dst = vdst;
-  src = vsrc;
-  while(n-- > 0)
- 2b5:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
- 2b9:	0f 9f c0             	setg   %al
- 2bc:	83 6d 10 01          	subl   $0x1,0x10(%ebp)
- 2c0:	84 c0                	test   %al,%al
- 2c2:	75 de                	jne    2a2 <memmove+0x14>
-    *dst++ = *src++;
-  return vdst;
- 2c4:	8b 45 08             	mov    0x8(%ebp),%eax
-}
- 2c7:	c9                   	leave  
- 2c8:	c3                   	ret    
- 2c9:	90                   	nop
- 2ca:	90                   	nop
- 2cb:	90                   	nop
-
-000002cc <fork>:
-  name: \
-    movl $SYS_ ## name, %eax; \
-    int $T_SYSCALL; \
-    ret
-
-SYSCALL(fork)
- 2cc:	b8 01 00 00 00       	mov    $0x1,%eax
- 2d1:	cd 40                	int    $0x40
- 2d3:	c3                   	ret    
-
-000002d4 <exit>:
-SYSCALL(exit)
- 2d4:	b8 02 00 00 00       	mov    $0x2,%eax
- 2d9:	cd 40                	int    $0x40
- 2db:	c3                   	ret    
-
-000002dc <wait>:
-SYSCALL(wait)
- 2dc:	b8 03 00 00 00       	mov    $0x3,%eax
- 2e1:	cd 40                	int    $0x40
- 2e3:	c3                   	ret    
-
-000002e4 <pipe>:
-SYSCALL(pipe)
- 2e4:	b8 04 00 00 00       	mov    $0x4,%eax
- 2e9:	cd 40                	int    $0x40
- 2eb:	c3                   	ret    
-
-000002ec <read>:
-SYSCALL(read)
- 2ec:	b8 05 00 00 00       	mov    $0x5,%eax
- 2f1:	cd 40                	int    $0x40
- 2f3:	c3                   	ret    
-
-000002f4 <write>:
-SYSCALL(write)
- 2f4:	b8 10 00 00 00       	mov    $0x10,%eax
- 2f9:	cd 40                	int    $0x40
- 2fb:	c3                   	ret    
-
-000002fc <close>:
-SYSCALL(close)
- 2fc:	b8 15 00 00 00       	mov    $0x15,%eax
- 301:	cd 40                	int    $0x40
- 303:	c3                   	ret    
-
-00000304 <kill>:
-SYSCALL(kill)
- 304:	b8 06 00 00 00       	mov    $0x6,%eax
- 309:	cd 40                	int    $0x40
- 30b:	c3                   	ret    
-
-0000030c <exec>:
-SYSCALL(exec)
- 30c:	b8 07 00 00 00       	mov    $0x7,%eax
- 311:	cd 40                	int    $0x40
- 313:	c3                   	ret    
-
-00000314 <open>:
-SYSCALL(open)
- 314:	b8 0f 00 00 00       	mov    $0xf,%eax
- 319:	cd 40                	int    $0x40
- 31b:	c3                   	ret    
-
-0000031c <mknod>:
-SYSCALL(mknod)
- 31c:	b8 11 00 00 00       	mov    $0x11,%eax
- 321:	cd 40                	int    $0x40
- 323:	c3                   	ret    
-
-00000324 <unlink>:
-SYSCALL(unlink)
- 324:	b8 12 00 00 00       	mov    $0x12,%eax
- 329:	cd 40                	int    $0x40
- 32b:	c3                   	ret    
-
-0000032c <fstat>:
-SYSCALL(fstat)
- 32c:	b8 08 00 00 00       	mov    $0x8,%eax
- 331:	cd 40                	int    $0x40
- 333:	c3                   	ret    
-
-00000334 <link>:
-SYSCALL(link)
- 334:	b8 13 00 00 00       	mov    $0x13,%eax
- 339:	cd 40                	int    $0x40
- 33b:	c3                   	ret    
-
-0000033c <mkdir>:
-SYSCALL(mkdir)
- 33c:	b8 14 00 00 00       	mov    $0x14,%eax
- 341:	cd 40                	int    $0x40
- 343:	c3                   	ret    
-
-00000344 <chdir>:
-SYSCALL(chdir)
- 344:	b8 09 00 00 00       	mov    $0x9,%eax
- 349:	cd 40                	int    $0x40
- 34b:	c3                   	ret    
-
-0000034c <dup>:
-SYSCALL(dup)
- 34c:	b8 0a 00 00 00       	mov    $0xa,%eax
- 351:	cd 40                	int    $0x40
- 353:	c3                   	ret    
-
-00000354 <getpid>:
-SYSCALL(getpid)
- 354:	b8 0b 00 00 00       	mov    $0xb,%eax
- 359:	cd 40                	int    $0x40
- 35b:	c3                   	ret    
-
-0000035c <sbrk>:
-SYSCALL(sbrk)
- 35c:	b8 0c 00 00 00       	mov    $0xc,%eax
- 361:	cd 40                	int    $0x40
- 363:	c3                   	ret    
-
-00000364 <sleep>:
-SYSCALL(sleep)
- 364:	b8 0d 00 00 00       	mov    $0xd,%eax
- 369:	cd 40                	int    $0x40
- 36b:	c3                   	ret    
-
-0000036c <uptime>:
-SYSCALL(uptime)
- 36c:	b8 0e 00 00 00       	mov    $0xe,%eax
- 371:	cd 40                	int    $0x40
- 373:	c3                   	ret    
-
-00000374 <waitpid>:
-SYSCALL(waitpid)
- 374:	b8 16 00 00 00       	mov    $0x16,%eax
- 379:	cd 40                	int    $0x40
- 37b:	c3                   	ret    
-
-0000037c <wait_stat>:
-SYSCALL(wait_stat)
- 37c:	b8 17 00 00 00       	mov    $0x17,%eax
- 381:	cd 40                	int    $0x40
- 383:	c3                   	ret    
-
-00000384 <list_pgroup>:
-SYSCALL(list_pgroup)
- 384:	b8 18 00 00 00       	mov    $0x18,%eax
- 389:	cd 40                	int    $0x40
- 38b:	c3                   	ret    
-
-0000038c <foreground>:
-SYSCALL(foreground)
- 38c:	b8 19 00 00 00       	mov    $0x19,%eax
- 391:	cd 40                	int    $0x40
- 393:	c3                   	ret    
-
-00000394 <set_priority>:
-SYSCALL(set_priority)
- 394:	b8 1a 00 00 00       	mov    $0x1a,%eax
- 399:	cd 40                	int    $0x40
- 39b:	c3                   	ret    
-
-0000039c <putc>:
-#include "stat.h"
-#include "user.h"
-
-static void
-putc(int fd, char c)
-{
- 39c:	55                   	push   %ebp
- 39d:	89 e5                	mov    %esp,%ebp
- 39f:	83 ec 28             	sub    $0x28,%esp
- 3a2:	8b 45 0c             	mov    0xc(%ebp),%eax
- 3a5:	88 45 f4             	mov    %al,-0xc(%ebp)
-  write(fd, &c, 1);
- 3a8:	c7 44 24 08 01 00 00 	movl   $0x1,0x8(%esp)
- 3af:	00 
- 3b0:	8d 45 f4             	lea    -0xc(%ebp),%eax
- 3b3:	89 44 24 04          	mov    %eax,0x4(%esp)
- 3b7:	8b 45 08             	mov    0x8(%ebp),%eax
- 3ba:	89 04 24             	mov    %eax,(%esp)
- 3bd:	e8 32 ff ff ff       	call   2f4 <write>
-}
- 3c2:	c9                   	leave  
- 3c3:	c3                   	ret    
-
-000003c4 <printint>:
-
-static void
-printint(int fd, int xx, int base, int sgn)
-{
- 3c4:	55                   	push   %ebp
- 3c5:	89 e5                	mov    %esp,%ebp
- 3c7:	83 ec 48             	sub    $0x48,%esp
-  static char digits[] = "0123456789ABCDEF";
-  char buf[16];
-  int i, neg;
-  uint x;
-
-  neg = 0;
- 3ca:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
-  if(sgn && xx < 0){
- 3d1:	83 7d 14 00          	cmpl   $0x0,0x14(%ebp)
- 3d5:	74 17                	je     3ee <printint+0x2a>
- 3d7:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
- 3db:	79 11                	jns    3ee <printint+0x2a>
-    neg = 1;
- 3dd:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
-    x = -xx;
- 3e4:	8b 45 0c             	mov    0xc(%ebp),%eax
- 3e7:	f7 d8                	neg    %eax
- 3e9:	89 45 ec             	mov    %eax,-0x14(%ebp)
- 3ec:	eb 06                	jmp    3f4 <printint+0x30>
-  } else {
-    x = xx;
- 3ee:	8b 45 0c             	mov    0xc(%ebp),%eax
- 3f1:	89 45 ec             	mov    %eax,-0x14(%ebp)
-  }
-
-  i = 0;
- 3f4:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
-  do{
-    buf[i++] = digits[x % base];
- 3fb:	8b 4d 10             	mov    0x10(%ebp),%ecx
- 3fe:	8b 45 ec             	mov    -0x14(%ebp),%eax
- 401:	ba 00 00 00 00       	mov    $0x0,%edx
- 406:	f7 f1                	div    %ecx
- 408:	89 d0                	mov    %edx,%eax
- 40a:	0f b6 90 84 0a 00 00 	movzbl 0xa84(%eax),%edx
- 411:	8d 45 dc             	lea    -0x24(%ebp),%eax
- 414:	03 45 f4             	add    -0xc(%ebp),%eax
- 417:	88 10                	mov    %dl,(%eax)
- 419:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
-  }while((x /= base) != 0);
- 41d:	8b 55 10             	mov    0x10(%ebp),%edx
- 420:	89 55 d4             	mov    %edx,-0x2c(%ebp)
- 423:	8b 45 ec             	mov    -0x14(%ebp),%eax
- 426:	ba 00 00 00 00       	mov    $0x0,%edx
- 42b:	f7 75 d4             	divl   -0x2c(%ebp)
- 42e:	89 45 ec             	mov    %eax,-0x14(%ebp)
- 431:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
- 435:	75 c4                	jne    3fb <printint+0x37>
-  if(neg)
- 437:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
- 43b:	74 2a                	je     467 <printint+0xa3>
-    buf[i++] = '-';
- 43d:	8d 45 dc             	lea    -0x24(%ebp),%eax
- 440:	03 45 f4             	add    -0xc(%ebp),%eax
- 443:	c6 00 2d             	movb   $0x2d,(%eax)
- 446:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
-
-  while(--i >= 0)
- 44a:	eb 1b                	jmp    467 <printint+0xa3>
-    putc(fd, buf[i]);
- 44c:	8d 45 dc             	lea    -0x24(%ebp),%eax
- 44f:	03 45 f4             	add    -0xc(%ebp),%eax
- 452:	0f b6 00             	movzbl (%eax),%eax
- 455:	0f be c0             	movsbl %al,%eax
- 458:	89 44 24 04          	mov    %eax,0x4(%esp)
- 45c:	8b 45 08             	mov    0x8(%ebp),%eax
- 45f:	89 04 24             	mov    %eax,(%esp)
- 462:	e8 35 ff ff ff       	call   39c <putc>
-    buf[i++] = digits[x % base];
-  }while((x /= base) != 0);
-  if(neg)
-    buf[i++] = '-';
-
-  while(--i >= 0)
- 467:	83 6d f4 01          	subl   $0x1,-0xc(%ebp)
- 46b:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
- 46f:	79 db                	jns    44c <printint+0x88>
-    putc(fd, buf[i]);
-}
- 471:	c9                   	leave  
- 472:	c3                   	ret    
-
-00000473 <printf>:
-
-// Print to the given fd. Only understands %d, %x, %p, %s.
-void
-printf(int fd, char *fmt, ...)
-{
- 473:	55                   	push   %ebp
- 474:	89 e5                	mov    %esp,%ebp
- 476:	83 ec 38             	sub    $0x38,%esp
-  char *s;
-  int c, i, state;
-  uint *ap;
-
-  state = 0;
- 479:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
-  ap = (uint*)(void*)&fmt + 1;
- 480:	8d 45 0c             	lea    0xc(%ebp),%eax
- 483:	83 c0 04             	add    $0x4,%eax
- 486:	89 45 e8             	mov    %eax,-0x18(%ebp)
-  for(i = 0; fmt[i]; i++){
- 489:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
- 490:	e9 7d 01 00 00       	jmp    612 <printf+0x19f>
-    c = fmt[i] & 0xff;
- 495:	8b 55 0c             	mov    0xc(%ebp),%edx
- 498:	8b 45 f0             	mov    -0x10(%ebp),%eax
- 49b:	01 d0                	add    %edx,%eax
- 49d:	0f b6 00             	movzbl (%eax),%eax
- 4a0:	0f be c0             	movsbl %al,%eax
- 4a3:	25 ff 00 00 00       	and    $0xff,%eax
- 4a8:	89 45 e4             	mov    %eax,-0x1c(%ebp)
-    if(state == 0){
- 4ab:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
- 4af:	75 2c                	jne    4dd <printf+0x6a>
-      if(c == '%'){
- 4b1:	83 7d e4 25          	cmpl   $0x25,-0x1c(%ebp)
- 4b5:	75 0c                	jne    4c3 <printf+0x50>
-        state = '%';
- 4b7:	c7 45 ec 25 00 00 00 	movl   $0x25,-0x14(%ebp)
- 4be:	e9 4b 01 00 00       	jmp    60e <printf+0x19b>
-      } else {
-        putc(fd, c);
- 4c3:	8b 45 e4             	mov    -0x1c(%ebp),%eax
- 4c6:	0f be c0             	movsbl %al,%eax
- 4c9:	89 44 24 04          	mov    %eax,0x4(%esp)
- 4cd:	8b 45 08             	mov    0x8(%ebp),%eax
- 4d0:	89 04 24             	mov    %eax,(%esp)
- 4d3:	e8 c4 fe ff ff       	call   39c <putc>
- 4d8:	e9 31 01 00 00       	jmp    60e <printf+0x19b>
-      }
-    } else if(state == '%'){
- 4dd:	83 7d ec 25          	cmpl   $0x25,-0x14(%ebp)
- 4e1:	0f 85 27 01 00 00    	jne    60e <printf+0x19b>
-      if(c == 'd'){
- 4e7:	83 7d e4 64          	cmpl   $0x64,-0x1c(%ebp)
- 4eb:	75 2d                	jne    51a <printf+0xa7>
-        printint(fd, *ap, 10, 1);
- 4ed:	8b 45 e8             	mov    -0x18(%ebp),%eax
- 4f0:	8b 00                	mov    (%eax),%eax
- 4f2:	c7 44 24 0c 01 00 00 	movl   $0x1,0xc(%esp)
- 4f9:	00 
- 4fa:	c7 44 24 08 0a 00 00 	movl   $0xa,0x8(%esp)
- 501:	00 
- 502:	89 44 24 04          	mov    %eax,0x4(%esp)
- 506:	8b 45 08             	mov    0x8(%ebp),%eax
- 509:	89 04 24             	mov    %eax,(%esp)
- 50c:	e8 b3 fe ff ff       	call   3c4 <printint>
-        ap++;
- 511:	83 45 e8 04          	addl   $0x4,-0x18(%ebp)
- 515:	e9 ed 00 00 00       	jmp    607 <printf+0x194>
-      } else if(c == 'x' || c == 'p'){
- 51a:	83 7d e4 78          	cmpl   $0x78,-0x1c(%ebp)
- 51e:	74 06                	je     526 <printf+0xb3>
- 520:	83 7d e4 70          	cmpl   $0x70,-0x1c(%ebp)
- 524:	75 2d                	jne    553 <printf+0xe0>
-        printint(fd, *ap, 16, 0);
- 526:	8b 45 e8             	mov    -0x18(%ebp),%eax
- 529:	8b 00                	mov    (%eax),%eax
- 52b:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
- 532:	00 
- 533:	c7 44 24 08 10 00 00 	movl   $0x10,0x8(%esp)
- 53a:	00 
- 53b:	89 44 24 04          	mov    %eax,0x4(%esp)
- 53f:	8b 45 08             	mov    0x8(%ebp),%eax
- 542:	89 04 24             	mov    %eax,(%esp)
- 545:	e8 7a fe ff ff       	call   3c4 <printint>
-        ap++;
- 54a:	83 45 e8 04          	addl   $0x4,-0x18(%ebp)
- 54e:	e9 b4 00 00 00       	jmp    607 <printf+0x194>
-      } else if(c == 's'){
- 553:	83 7d e4 73          	cmpl   $0x73,-0x1c(%ebp)
- 557:	75 46                	jne    59f <printf+0x12c>
-        s = (char*)*ap;
- 559:	8b 45 e8             	mov    -0x18(%ebp),%eax
- 55c:	8b 00                	mov    (%eax),%eax
- 55e:	89 45 f4             	mov    %eax,-0xc(%ebp)
-        ap++;
- 561:	83 45 e8 04          	addl   $0x4,-0x18(%ebp)
-        if(s == 0)
- 565:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
- 569:	75 27                	jne    592 <printf+0x11f>
-          s = "(null)";
- 56b:	c7 45 f4 40 08 00 00 	movl   $0x840,-0xc(%ebp)
-        while(*s != 0){
- 572:	eb 1e                	jmp    592 <printf+0x11f>
-          putc(fd, *s);
- 574:	8b 45 f4             	mov    -0xc(%ebp),%eax
- 577:	0f b6 00             	movzbl (%eax),%eax
- 57a:	0f be c0             	movsbl %al,%eax
- 57d:	89 44 24 04          	mov    %eax,0x4(%esp)
- 581:	8b 45 08             	mov    0x8(%ebp),%eax
- 584:	89 04 24             	mov    %eax,(%esp)
- 587:	e8 10 fe ff ff       	call   39c <putc>
-          s++;
- 58c:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
- 590:	eb 01                	jmp    593 <printf+0x120>
-      } else if(c == 's'){
-        s = (char*)*ap;
-        ap++;
-        if(s == 0)
-          s = "(null)";
-        while(*s != 0){
- 592:	90                   	nop
- 593:	8b 45 f4             	mov    -0xc(%ebp),%eax
- 596:	0f b6 00             	movzbl (%eax),%eax
- 599:	84 c0                	test   %al,%al
- 59b:	75 d7                	jne    574 <printf+0x101>
- 59d:	eb 68                	jmp    607 <printf+0x194>
-          putc(fd, *s);
-          s++;
-        }
-      } else if(c == 'c'){
- 59f:	83 7d e4 63          	cmpl   $0x63,-0x1c(%ebp)
- 5a3:	75 1d                	jne    5c2 <printf+0x14f>
-        putc(fd, *ap);
- 5a5:	8b 45 e8             	mov    -0x18(%ebp),%eax
- 5a8:	8b 00                	mov    (%eax),%eax
- 5aa:	0f be c0             	movsbl %al,%eax
- 5ad:	89 44 24 04          	mov    %eax,0x4(%esp)
- 5b1:	8b 45 08             	mov    0x8(%ebp),%eax
- 5b4:	89 04 24             	mov    %eax,(%esp)
- 5b7:	e8 e0 fd ff ff       	call   39c <putc>
-        ap++;
- 5bc:	83 45 e8 04          	addl   $0x4,-0x18(%ebp)
- 5c0:	eb 45                	jmp    607 <printf+0x194>
-      } else if(c == '%'){
- 5c2:	83 7d e4 25          	cmpl   $0x25,-0x1c(%ebp)
- 5c6:	75 17                	jne    5df <printf+0x16c>
-        putc(fd, c);
- 5c8:	8b 45 e4             	mov    -0x1c(%ebp),%eax
- 5cb:	0f be c0             	movsbl %al,%eax
- 5ce:	89 44 24 04          	mov    %eax,0x4(%esp)
- 5d2:	8b 45 08             	mov    0x8(%ebp),%eax
- 5d5:	89 04 24             	mov    %eax,(%esp)
- 5d8:	e8 bf fd ff ff       	call   39c <putc>
- 5dd:	eb 28                	jmp    607 <printf+0x194>
-      } else {
-        // Unknown % sequence.  Print it to draw attention.
-        putc(fd, '%');
- 5df:	c7 44 24 04 25 00 00 	movl   $0x25,0x4(%esp)
- 5e6:	00 
- 5e7:	8b 45 08             	mov    0x8(%ebp),%eax
- 5ea:	89 04 24             	mov    %eax,(%esp)
- 5ed:	e8 aa fd ff ff       	call   39c <putc>
-        putc(fd, c);
- 5f2:	8b 45 e4             	mov    -0x1c(%ebp),%eax
- 5f5:	0f be c0             	movsbl %al,%eax
- 5f8:	89 44 24 04          	mov    %eax,0x4(%esp)
- 5fc:	8b 45 08             	mov    0x8(%ebp),%eax
- 5ff:	89 04 24             	mov    %eax,(%esp)
- 602:	e8 95 fd ff ff       	call   39c <putc>
-      }
-      state = 0;
- 607:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
-  int c, i, state;
-  uint *ap;
-
-  state = 0;
-  ap = (uint*)(void*)&fmt + 1;
-  for(i = 0; fmt[i]; i++){
- 60e:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)
- 612:	8b 55 0c             	mov    0xc(%ebp),%edx
- 615:	8b 45 f0             	mov    -0x10(%ebp),%eax
- 618:	01 d0                	add    %edx,%eax
- 61a:	0f b6 00             	movzbl (%eax),%eax
- 61d:	84 c0                	test   %al,%al
- 61f:	0f 85 70 fe ff ff    	jne    495 <printf+0x22>
-        putc(fd, c);
-      }
-      state = 0;
-    }
-  }
-}
- 625:	c9                   	leave  
- 626:	c3                   	ret    
- 627:	90                   	nop
-
-00000628 <free>:
-static Header base;
-static Header *freep;
-
-void
-free(void *ap)
-{
- 628:	55                   	push   %ebp
- 629:	89 e5                	mov    %esp,%ebp
- 62b:	83 ec 10             	sub    $0x10,%esp
-  Header *bp, *p;
-
-  bp = (Header*)ap - 1;
- 62e:	8b 45 08             	mov    0x8(%ebp),%eax
- 631:	83 e8 08             	sub    $0x8,%eax
- 634:	89 45 f8             	mov    %eax,-0x8(%ebp)
-  for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
- 637:	a1 a0 0a 00 00       	mov    0xaa0,%eax
- 63c:	89 45 fc             	mov    %eax,-0x4(%ebp)
- 63f:	eb 24                	jmp    665 <free+0x3d>
-    if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
- 641:	8b 45 fc             	mov    -0x4(%ebp),%eax
- 644:	8b 00                	mov    (%eax),%eax
- 646:	3b 45 fc             	cmp    -0x4(%ebp),%eax
- 649:	77 12                	ja     65d <free+0x35>
- 64b:	8b 45 f8             	mov    -0x8(%ebp),%eax
- 64e:	3b 45 fc             	cmp    -0x4(%ebp),%eax
- 651:	77 24                	ja     677 <free+0x4f>
- 653:	8b 45 fc             	mov    -0x4(%ebp),%eax
- 656:	8b 00                	mov    (%eax),%eax
- 658:	3b 45 f8             	cmp    -0x8(%ebp),%eax
- 65b:	77 1a                	ja     677 <free+0x4f>
-free(void *ap)
-{
-  Header *bp, *p;
-
-  bp = (Header*)ap - 1;
-  for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
- 65d:	8b 45 fc             	mov    -0x4(%ebp),%eax
- 660:	8b 00                	mov    (%eax),%eax
- 662:	89 45 fc             	mov    %eax,-0x4(%ebp)
- 665:	8b 45 f8             	mov    -0x8(%ebp),%eax
- 668:	3b 45 fc             	cmp    -0x4(%ebp),%eax
- 66b:	76 d4                	jbe    641 <free+0x19>
- 66d:	8b 45 fc             	mov    -0x4(%ebp),%eax
- 670:	8b 00                	mov    (%eax),%eax
- 672:	3b 45 f8             	cmp    -0x8(%ebp),%eax
- 675:	76 ca                	jbe    641 <free+0x19>
-    if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
-      break;
-  if(bp + bp->s.size == p->s.ptr){
- 677:	8b 45 f8             	mov    -0x8(%ebp),%eax
- 67a:	8b 40 04             	mov    0x4(%eax),%eax
- 67d:	c1 e0 03             	shl    $0x3,%eax
- 680:	89 c2                	mov    %eax,%edx
- 682:	03 55 f8             	add    -0x8(%ebp),%edx
- 685:	8b 45 fc             	mov    -0x4(%ebp),%eax
- 688:	8b 00                	mov    (%eax),%eax
- 68a:	39 c2                	cmp    %eax,%edx
- 68c:	75 24                	jne    6b2 <free+0x8a>
-    bp->s.size += p->s.ptr->s.size;
- 68e:	8b 45 f8             	mov    -0x8(%ebp),%eax
- 691:	8b 50 04             	mov    0x4(%eax),%edx
- 694:	8b 45 fc             	mov    -0x4(%ebp),%eax
- 697:	8b 00                	mov    (%eax),%eax
- 699:	8b 40 04             	mov    0x4(%eax),%eax
- 69c:	01 c2                	add    %eax,%edx
- 69e:	8b 45 f8             	mov    -0x8(%ebp),%eax
- 6a1:	89 50 04             	mov    %edx,0x4(%eax)
-    bp->s.ptr = p->s.ptr->s.ptr;
- 6a4:	8b 45 fc             	mov    -0x4(%ebp),%eax
- 6a7:	8b 00                	mov    (%eax),%eax
- 6a9:	8b 10                	mov    (%eax),%edx
- 6ab:	8b 45 f8             	mov    -0x8(%ebp),%eax
- 6ae:	89 10                	mov    %edx,(%eax)
- 6b0:	eb 0a                	jmp    6bc <free+0x94>
-  } else
-    bp->s.ptr = p->s.ptr;
- 6b2:	8b 45 fc             	mov    -0x4(%ebp),%eax
- 6b5:	8b 10                	mov    (%eax),%edx
- 6b7:	8b 45 f8             	mov    -0x8(%ebp),%eax
- 6ba:	89 10                	mov    %edx,(%eax)
-  if(p + p->s.size == bp){
- 6bc:	8b 45 fc             	mov    -0x4(%ebp),%eax
- 6bf:	8b 40 04             	mov    0x4(%eax),%eax
- 6c2:	c1 e0 03             	shl    $0x3,%eax
- 6c5:	03 45 fc             	add    -0x4(%ebp),%eax
- 6c8:	3b 45 f8             	cmp    -0x8(%ebp),%eax
- 6cb:	75 20                	jne    6ed <free+0xc5>
-    p->s.size += bp->s.size;
- 6cd:	8b 45 fc             	mov    -0x4(%ebp),%eax
- 6d0:	8b 50 04             	mov    0x4(%eax),%edx
- 6d3:	8b 45 f8             	mov    -0x8(%ebp),%eax
- 6d6:	8b 40 04             	mov    0x4(%eax),%eax
- 6d9:	01 c2                	add    %eax,%edx
- 6db:	8b 45 fc             	mov    -0x4(%ebp),%eax
- 6de:	89 50 04             	mov    %edx,0x4(%eax)
-    p->s.ptr = bp->s.ptr;
- 6e1:	8b 45 f8             	mov    -0x8(%ebp),%eax
- 6e4:	8b 10                	mov    (%eax),%edx
- 6e6:	8b 45 fc             	mov    -0x4(%ebp),%eax
- 6e9:	89 10                	mov    %edx,(%eax)
- 6eb:	eb 08                	jmp    6f5 <free+0xcd>
-  } else
-    p->s.ptr = bp;
- 6ed:	8b 45 fc             	mov    -0x4(%ebp),%eax
- 6f0:	8b 55 f8             	mov    -0x8(%ebp),%edx
- 6f3:	89 10                	mov    %edx,(%eax)
-  freep = p;
- 6f5:	8b 45 fc             	mov    -0x4(%ebp),%eax
- 6f8:	a3 a0 0a 00 00       	mov    %eax,0xaa0
-}
- 6fd:	c9                   	leave  
- 6fe:	c3                   	ret    
-
-000006ff <morecore>:
-
-static Header*
-morecore(uint nu)
-{
- 6ff:	55                   	push   %ebp
- 700:	89 e5                	mov    %esp,%ebp
- 702:	83 ec 28             	sub    $0x28,%esp
-  char *p;
-  Header *hp;
-
-  if(nu < 4096)
- 705:	81 7d 08 ff 0f 00 00 	cmpl   $0xfff,0x8(%ebp)
- 70c:	77 07                	ja     715 <morecore+0x16>
-    nu = 4096;
- 70e:	c7 45 08 00 10 00 00 	movl   $0x1000,0x8(%ebp)
-  p = sbrk(nu * sizeof(Header));
- 715:	8b 45 08             	mov    0x8(%ebp),%eax
- 718:	c1 e0 03             	shl    $0x3,%eax
- 71b:	89 04 24             	mov    %eax,(%esp)
- 71e:	e8 39 fc ff ff       	call   35c <sbrk>
- 723:	89 45 f4             	mov    %eax,-0xc(%ebp)
-  if(p == (char*)-1)
- 726:	83 7d f4 ff          	cmpl   $0xffffffff,-0xc(%ebp)
- 72a:	75 07                	jne    733 <morecore+0x34>
-    return 0;
- 72c:	b8 00 00 00 00       	mov    $0x0,%eax
- 731:	eb 22                	jmp    755 <morecore+0x56>
-  hp = (Header*)p;
- 733:	8b 45 f4             	mov    -0xc(%ebp),%eax
- 736:	89 45 f0             	mov    %eax,-0x10(%ebp)
-  hp->s.size = nu;
- 739:	8b 45 f0             	mov    -0x10(%ebp),%eax
- 73c:	8b 55 08             	mov    0x8(%ebp),%edx
- 73f:	89 50 04             	mov    %edx,0x4(%eax)
-  free((void*)(hp + 1));
- 742:	8b 45 f0             	mov    -0x10(%ebp),%eax
- 745:	83 c0 08             	add    $0x8,%eax
- 748:	89 04 24             	mov    %eax,(%esp)
- 74b:	e8 d8 fe ff ff       	call   628 <free>
-  return freep;
- 750:	a1 a0 0a 00 00       	mov    0xaa0,%eax
-}
- 755:	c9                   	leave  
- 756:	c3                   	ret    
-
-00000757 <malloc>:
-
-void*
-malloc(uint nbytes)
-{
- 757:	55                   	push   %ebp
- 758:	89 e5                	mov    %esp,%ebp
- 75a:	83 ec 28             	sub    $0x28,%esp
-  Header *p, *prevp;
-  uint nunits;
-
-  nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;
- 75d:	8b 45 08             	mov    0x8(%ebp),%eax
- 760:	83 c0 07             	add    $0x7,%eax
- 763:	c1 e8 03             	shr    $0x3,%eax
- 766:	83 c0 01             	add    $0x1,%eax
- 769:	89 45 ec             	mov    %eax,-0x14(%ebp)
-  if((prevp = freep) == 0){
- 76c:	a1 a0 0a 00 00       	mov    0xaa0,%eax
- 771:	89 45 f0             	mov    %eax,-0x10(%ebp)
- 774:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
- 778:	75 23                	jne    79d <malloc+0x46>
-    base.s.ptr = freep = prevp = &base;
- 77a:	c7 45 f0 98 0a 00 00 	movl   $0xa98,-0x10(%ebp)
- 781:	8b 45 f0             	mov    -0x10(%ebp),%eax
- 784:	a3 a0 0a 00 00       	mov    %eax,0xaa0
- 789:	a1 a0 0a 00 00       	mov    0xaa0,%eax
- 78e:	a3 98 0a 00 00       	mov    %eax,0xa98
-    base.s.size = 0;
- 793:	c7 05 9c 0a 00 00 00 	movl   $0x0,0xa9c
- 79a:	00 00 00 
-  }
-  for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
- 79d:	8b 45 f0             	mov    -0x10(%ebp),%eax
- 7a0:	8b 00                	mov    (%eax),%eax
- 7a2:	89 45 f4             	mov    %eax,-0xc(%ebp)
-    if(p->s.size >= nunits){
- 7a5:	8b 45 f4             	mov    -0xc(%ebp),%eax
- 7a8:	8b 40 04             	mov    0x4(%eax),%eax
- 7ab:	3b 45 ec             	cmp    -0x14(%ebp),%eax
- 7ae:	72 4d                	jb     7fd <malloc+0xa6>
-      if(p->s.size == nunits)
- 7b0:	8b 45 f4             	mov    -0xc(%ebp),%eax
- 7b3:	8b 40 04             	mov    0x4(%eax),%eax
- 7b6:	3b 45 ec             	cmp    -0x14(%ebp),%eax
- 7b9:	75 0c                	jne    7c7 <malloc+0x70>
-        prevp->s.ptr = p->s.ptr;
- 7bb:	8b 45 f4             	mov    -0xc(%ebp),%eax
- 7be:	8b 10                	mov    (%eax),%edx
- 7c0:	8b 45 f0             	mov    -0x10(%ebp),%eax
- 7c3:	89 10                	mov    %edx,(%eax)
- 7c5:	eb 26                	jmp    7ed <malloc+0x96>
-      else {
-        p->s.size -= nunits;
- 7c7:	8b 45 f4             	mov    -0xc(%ebp),%eax
- 7ca:	8b 40 04             	mov    0x4(%eax),%eax
- 7cd:	89 c2                	mov    %eax,%edx
- 7cf:	2b 55 ec             	sub    -0x14(%ebp),%edx
- 7d2:	8b 45 f4             	mov    -0xc(%ebp),%eax
- 7d5:	89 50 04             	mov    %edx,0x4(%eax)
-        p += p->s.size;
- 7d8:	8b 45 f4             	mov    -0xc(%ebp),%eax
- 7db:	8b 40 04             	mov    0x4(%eax),%eax
- 7de:	c1 e0 03             	shl    $0x3,%eax
- 7e1:	01 45 f4             	add    %eax,-0xc(%ebp)
-        p->s.size = nunits;
- 7e4:	8b 45 f4             	mov    -0xc(%ebp),%eax
- 7e7:	8b 55 ec             	mov    -0x14(%ebp),%edx
- 7ea:	89 50 04             	mov    %edx,0x4(%eax)
-      }
-      freep = prevp;
- 7ed:	8b 45 f0             	mov    -0x10(%ebp),%eax
- 7f0:	a3 a0 0a 00 00       	mov    %eax,0xaa0
-      return (void*)(p + 1);
- 7f5:	8b 45 f4             	mov    -0xc(%ebp),%eax
- 7f8:	83 c0 08             	add    $0x8,%eax
- 7fb:	eb 38                	jmp    835 <malloc+0xde>
-    }
-    if(p == freep)
- 7fd:	a1 a0 0a 00 00       	mov    0xaa0,%eax
- 802:	39 45 f4             	cmp    %eax,-0xc(%ebp)
- 805:	75 1b                	jne    822 <malloc+0xcb>
-      if((p = morecore(nunits)) == 0)
- 807:	8b 45 ec             	mov    -0x14(%ebp),%eax
- 80a:	89 04 24             	mov    %eax,(%esp)
- 80d:	e8 ed fe ff ff       	call   6ff <morecore>
- 812:	89 45 f4             	mov    %eax,-0xc(%ebp)
- 815:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
- 819:	75 07                	jne    822 <malloc+0xcb>
-        return 0;
- 81b:	b8 00 00 00 00       	mov    $0x0,%eax
- 820:	eb 13                	jmp    835 <malloc+0xde>
-  nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;
-  if((prevp = freep) == 0){
-    base.s.ptr = freep = prevp = &base;
-    base.s.size = 0;
-  }
-  for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
- 822:	8b 45 f4             	mov    -0xc(%ebp),%eax
- 825:	89 45 f0             	mov    %eax,-0x10(%ebp)
- 828:	8b 45 f4             	mov    -0xc(%ebp),%eax
- 82b:	8b 00                	mov    (%eax),%eax
- 82d:	89 45 f4             	mov    %eax,-0xc(%ebp)
-      return (void*)(p + 1);
-    }
-    if(p == freep)
-      if((p = morecore(nunits)) == 0)
-        return 0;
-  }
- 830:	e9 70 ff ff ff       	jmp    7a5 <malloc+0x4e>
-}
- 835:	c9                   	leave  
- 836:	c3                   	ret    
diff --git a/xv6/echo.c b/xv6/echo.c
deleted file mode 100644
index 04ff01d..0000000
--- a/xv6/echo.c
+++ /dev/null
@@ -1,13 +0,0 @@
-#include "types.h"
-#include "stat.h"
-#include "user.h"
-
-int
-main(int argc, char *argv[])
-{
-  int i;
-
-  for(i = 1; i < argc; i++)
-    printf(1, "%s%s", argv[i], i+1 < argc ? " " : "\n");
-  exit(EXIT_STATUS_SUCCESS);
-}
diff --git a/xv6/echo.d b/xv6/echo.d
deleted file mode 100644
index ef49e04..0000000
--- a/xv6/echo.d
+++ /dev/null
@@ -1 +0,0 @@
-echo.o: echo.c types.h stat.h user.h
diff --git a/xv6/echo.sym b/xv6/echo.sym
deleted file mode 100644
index 24c9d5a..0000000
--- a/xv6/echo.sym
+++ /dev/null
@@ -1,65 +0,0 @@
-00000000 .text
-00000837 .rodata
-00000848 .eh_frame
-00000a84 .data
-00000a98 .bss
-00000000 .comment
-00000000 .debug_aranges
-00000000 .debug_info
-00000000 .debug_abbrev
-00000000 .debug_line
-00000000 .debug_str
-00000000 .debug_loc
-00000000 echo.c
-00000000 ulib.c
-00000070 stosb
-00000000 printf.c
-0000039c putc
-000003c4 printint
-00000a84 digits.923
-00000000 umalloc.c
-00000a98 base
-00000aa0 freep
-000006ff morecore
-00000095 strcpy
-00000374 waitpid
-00000473 printf
-0000028e memmove
-0000031c mknod
-0000038c foreground
-00000186 gets
-00000354 getpid
-00000757 malloc
-00000364 sleep
-00000394 set_priority
-0000037c wait_stat
-000002e4 pipe
-000002f4 write
-0000032c fstat
-00000304 kill
-00000344 chdir
-0000030c exec
-000002dc wait
-000002ec read
-00000324 unlink
-000002cc fork
-0000035c sbrk
-0000036c uptime
-00000a98 __bss_start
-0000012f memset
-00000000 main
-000000c9 strcmp
-0000034c dup
-00000384 list_pgroup
-000001f5 stat
-00000a98 _edata
-00000aa4 _end
-00000334 link
-000002d4 exit
-00000243 atoi
-0000010a strlen
-00000314 open
-00000153 strchr
-0000033c mkdir
-000002fc close
-00000628 free
diff --git a/xv6/elf.h b/xv6/elf.h
deleted file mode 100644
index d16c967..0000000
--- a/xv6/elf.h
+++ /dev/null
@@ -1,42 +0,0 @@
-// Format of an ELF executable file
-
-#define ELF_MAGIC 0x464C457FU  // "\x7FELF" in little endian
-
-// File header
-struct elfhdr {
-  uint magic;  // must equal ELF_MAGIC
-  uchar elf[12];
-  ushort type;
-  ushort machine;
-  uint version;
-  uint entry;
-  uint phoff;
-  uint shoff;
-  uint flags;
-  ushort ehsize;
-  ushort phentsize;
-  ushort phnum;
-  ushort shentsize;
-  ushort shnum;
-  ushort shstrndx;
-};
-
-// Program section header
-struct proghdr {
-  uint type;
-  uint off;
-  uint vaddr;
-  uint paddr;
-  uint filesz;
-  uint memsz;
-  uint flags;
-  uint align;
-};
-
-// Values for Proghdr type
-#define ELF_PROG_LOAD           1
-
-// Flag bits for Proghdr flags
-#define ELF_PROG_FLAG_EXEC      1
-#define ELF_PROG_FLAG_WRITE     2
-#define ELF_PROG_FLAG_READ      4
diff --git a/xv6/entry.S b/xv6/entry.S
deleted file mode 100644
index 5f4e124..0000000
--- a/xv6/entry.S
+++ /dev/null
@@ -1,64 +0,0 @@
-# Multiboot header, for multiboot boot loaders like GNU Grub.
-# http://www.gnu.org/software/grub/manual/multiboot/multiboot.html
-#
-# Using GRUB 2, you can boot xv6 from a file stored in a
-# Linux file system by copying kernel or kernelmemfs to /boot
-# and then adding this menu entry:
-#
-# menuentry "xv6" {
-# 	insmod ext2
-# 	set root='(hd0,msdos1)'
-# 	set kernel='/boot/kernel'
-# 	echo "Loading ${kernel}..."
-# 	multiboot ${kernel} ${kernel}
-# 	boot
-# }
-
-#include "asm.h"
-#include "memlayout.h"
-#include "mmu.h"
-#include "param.h"
-
-# Multiboot header.  Data to direct multiboot loader.
-.p2align 2
-.text
-.globl multiboot_header
-multiboot_header:
-  #define magic 0x1badb002
-  #define flags 0
-  .long magic
-  .long flags
-  .long (-magic-flags)
-
-# By convention, the _start symbol specifies the ELF entry point.
-# Since we haven't set up virtual memory yet, our entry point is
-# the physical address of 'entry'.
-.globl _start
-_start = V2P_WO(entry)
-
-# Entering xv6 on boot processor, with paging off.
-.globl entry
-entry:
-  # Turn on page size extension for 4Mbyte pages
-  movl    %cr4, %eax
-  orl     $(CR4_PSE), %eax
-  movl    %eax, %cr4
-  # Set page directory
-  movl    $(V2P_WO(entrypgdir)), %eax
-  movl    %eax, %cr3
-  # Turn on paging.
-  movl    %cr0, %eax
-  orl     $(CR0_PG|CR0_WP), %eax
-  movl    %eax, %cr0
-
-  # Set up the stack pointer.
-  movl $(stack + KSTACKSIZE), %esp
-
-  # Jump to main(), and switch to executing at
-  # high addresses. The indirect call is needed because
-  # the assembler produces a PC-relative instruction
-  # for a direct jump.
-  mov $main, %eax
-  jmp *%eax
-
-.comm stack, KSTACKSIZE
diff --git a/xv6/entryother b/xv6/entryother
deleted file mode 100755
index a7673de..0000000
Binary files a/xv6/entryother and /dev/null differ
diff --git a/xv6/entryother.S b/xv6/entryother.S
deleted file mode 100644
index 9f94cd3..0000000
--- a/xv6/entryother.S
+++ /dev/null
@@ -1,87 +0,0 @@
-#include "asm.h"
-#include "memlayout.h"
-#include "mmu.h"
-	
-# Each non-boot CPU ("AP") is started up in response to a STARTUP
-# IPI from the boot CPU.  Section B.4.2 of the Multi-Processor
-# Specification says that the AP will start in real mode with CS:IP
-# set to XY00:0000, where XY is an 8-bit value sent with the
-# STARTUP. Thus this code must start at a 4096-byte boundary.
-#
-# Because this code sets DS to zero, it must sit
-# at an address in the low 2^16 bytes.
-#
-# Startothers (in main.c) sends the STARTUPs one at a time.
-# It copies this code (start) at 0x7000.  It puts the address of
-# a newly allocated per-core stack in start-4,the address of the
-# place to jump to (mpenter) in start-8, and the physical address
-# of entrypgdir in start-12.
-#
-# This code is identical to bootasm.S except:
-#   - it does not need to enable A20
-#   - it uses the address at start-4, start-8, and start-12
-
-.code16           
-.globl start
-start:
-  cli            
-
-  xorw    %ax,%ax
-  movw    %ax,%ds
-  movw    %ax,%es
-  movw    %ax,%ss
-
-  lgdt    gdtdesc
-  movl    %cr0, %eax
-  orl     $CR0_PE, %eax
-  movl    %eax, %cr0
-
-//PAGEBREAK!
-  ljmpl    $(SEG_KCODE<<3), $(start32)
-
-.code32
-start32:
-  movw    $(SEG_KDATA<<3), %ax
-  movw    %ax, %ds
-  movw    %ax, %es
-  movw    %ax, %ss
-  movw    $0, %ax
-  movw    %ax, %fs
-  movw    %ax, %gs
-
-  # Turn on page size extension for 4Mbyte pages
-  movl    %cr4, %eax
-  orl     $(CR4_PSE), %eax
-  movl    %eax, %cr4
-  # Use enterpgdir as our initial page table
-  movl    (start-12), %eax
-  movl    %eax, %cr3
-  # Turn on paging.
-  movl    %cr0, %eax
-  orl     $(CR0_PE|CR0_PG|CR0_WP), %eax
-  movl    %eax, %cr0
-
-  # Switch to the stack allocated by startothers()
-  movl    (start-4), %esp
-  # Call mpenter()
-  call	 *(start-8)
-
-  movw    $0x8a00, %ax
-  movw    %ax, %dx
-  outw    %ax, %dx
-  movw    $0x8ae0, %ax
-  outw    %ax, %dx
-spin:
-  jmp     spin
-
-.p2align 2
-gdt:
-  SEG_NULLASM
-  SEG_ASM(STA_X|STA_R, 0, 0xffffffff)
-  SEG_ASM(STA_W, 0, 0xffffffff)
-
-
-gdtdesc:
-  .word   (gdtdesc - gdt - 1)
-  .long   gdt
-
diff --git a/xv6/entryother.asm b/xv6/entryother.asm
deleted file mode 100644
index e70278c..0000000
--- a/xv6/entryother.asm
+++ /dev/null
@@ -1,114 +0,0 @@
-
-bootblockother.o:     file format elf32-i386
-
-
-Disassembly of section .text:
-
-00007000 <start>:
-#   - it uses the address at start-4, start-8, and start-12
-
-.code16           
-.globl start
-start:
-  cli            
-    7000:	fa                   	cli    
-
-  xorw    %ax,%ax
-    7001:	31 c0                	xor    %eax,%eax
-  movw    %ax,%ds
-    7003:	8e d8                	mov    %eax,%ds
-  movw    %ax,%es
-    7005:	8e c0                	mov    %eax,%es
-  movw    %ax,%ss
-    7007:	8e d0                	mov    %eax,%ss
-
-  lgdt    gdtdesc
-    7009:	0f 01 16             	lgdtl  (%esi)
-    700c:	84 70 0f             	test   %dh,0xf(%eax)
-  movl    %cr0, %eax
-    700f:	20 c0                	and    %al,%al
-  orl     $CR0_PE, %eax
-    7011:	66 83 c8 01          	or     $0x1,%ax
-  movl    %eax, %cr0
-    7015:	0f 22 c0             	mov    %eax,%cr0
-
-//PAGEBREAK!
-  ljmpl    $(SEG_KCODE<<3), $(start32)
-    7018:	66 ea 20 70 00 00    	ljmpw  $0x0,$0x7020
-    701e:	08 00                	or     %al,(%eax)
-
-00007020 <start32>:
-
-.code32
-start32:
-  movw    $(SEG_KDATA<<3), %ax
-    7020:	66 b8 10 00          	mov    $0x10,%ax
-  movw    %ax, %ds
-    7024:	8e d8                	mov    %eax,%ds
-  movw    %ax, %es
-    7026:	8e c0                	mov    %eax,%es
-  movw    %ax, %ss
-    7028:	8e d0                	mov    %eax,%ss
-  movw    $0, %ax
-    702a:	66 b8 00 00          	mov    $0x0,%ax
-  movw    %ax, %fs
-    702e:	8e e0                	mov    %eax,%fs
-  movw    %ax, %gs
-    7030:	8e e8                	mov    %eax,%gs
-
-  # Turn on page size extension for 4Mbyte pages
-  movl    %cr4, %eax
-    7032:	0f 20 e0             	mov    %cr4,%eax
-  orl     $(CR4_PSE), %eax
-    7035:	83 c8 10             	or     $0x10,%eax
-  movl    %eax, %cr4
-    7038:	0f 22 e0             	mov    %eax,%cr4
-  # Use enterpgdir as our initial page table
-  movl    (start-12), %eax
-    703b:	a1 f4 6f 00 00       	mov    0x6ff4,%eax
-  movl    %eax, %cr3
-    7040:	0f 22 d8             	mov    %eax,%cr3
-  # Turn on paging.
-  movl    %cr0, %eax
-    7043:	0f 20 c0             	mov    %cr0,%eax
-  orl     $(CR0_PE|CR0_PG|CR0_WP), %eax
-    7046:	0d 01 00 01 80       	or     $0x80010001,%eax
-  movl    %eax, %cr0
-    704b:	0f 22 c0             	mov    %eax,%cr0
-
-  # Switch to the stack allocated by startothers()
-  movl    (start-4), %esp
-    704e:	8b 25 fc 6f 00 00    	mov    0x6ffc,%esp
-  # Call mpenter()
-  call	 *(start-8)
-    7054:	ff 15 f8 6f 00 00    	call   *0x6ff8
-
-  movw    $0x8a00, %ax
-    705a:	66 b8 00 8a          	mov    $0x8a00,%ax
-  movw    %ax, %dx
-    705e:	66 89 c2             	mov    %ax,%dx
-  outw    %ax, %dx
-    7061:	66 ef                	out    %ax,(%dx)
-  movw    $0x8ae0, %ax
-    7063:	66 b8 e0 8a          	mov    $0x8ae0,%ax
-  outw    %ax, %dx
-    7067:	66 ef                	out    %ax,(%dx)
-
-00007069 <spin>:
-spin:
-  jmp     spin
-    7069:	eb fe                	jmp    7069 <spin>
-    706b:	90                   	nop
-
-0000706c <gdt>:
-	...
-    7074:	ff                   	(bad)  
-    7075:	ff 00                	incl   (%eax)
-    7077:	00 00                	add    %al,(%eax)
-    7079:	9a cf 00 ff ff 00 00 	lcall  $0x0,$0xffff00cf
-    7080:	00 92 cf 00 17 00    	add    %dl,0x1700cf(%edx)
-
-00007084 <gdtdesc>:
-    7084:	17                   	pop    %ss
-    7085:	00 6c 70 00          	add    %ch,0x0(%eax,%esi,2)
-	...
diff --git a/xv6/entryother.d b/xv6/entryother.d
deleted file mode 100644
index a140303..0000000
--- a/xv6/entryother.d
+++ /dev/null
@@ -1 +0,0 @@
-entryother.o: entryother.S asm.h memlayout.h mmu.h
diff --git a/xv6/exec.c b/xv6/exec.c
deleted file mode 100644
index c4261ed..0000000
--- a/xv6/exec.c
+++ /dev/null
@@ -1,122 +0,0 @@
-#include "types.h"
-#include "param.h"
-#include "memlayout.h"
-#include "mmu.h"
-#include "proc.h"
-#include "defs.h"
-#include "x86.h"
-#include "elf.h"
-
-extern void implicit_exit();
-extern void implicit_exit_end();
-
-int
-exec(char *path, char **argv)
-{
-//  char* TAG = "exec";
-  char *s, *last;
-  int i, off;
-  uint argc, sz, sp, ustack[3+MAXARG+1];
-  struct elfhdr elf;
-  struct inode *ip;
-  struct proghdr ph;
-  pde_t *pgdir, *oldpgdir;
-
-  begin_op();
-  if((ip = namei(path)) == 0){
-    end_op();
-    return -1;
-  }
-  ilock(ip);
-  pgdir = 0;
-
-  // Check ELF header
-  if(readi(ip, (char*)&elf, 0, sizeof(elf)) < sizeof(elf))
-    goto bad;
-  if(elf.magic != ELF_MAGIC)
-    goto bad;
-
-  if((pgdir = setupkvm()) == 0)
-    goto bad;
-
-  // Load program into memory.
-  sz = 0;
-  for(i=0, off=elf.phoff; i<elf.phnum; i++, off+=sizeof(ph)){
-    if(readi(ip, (char*)&ph, off, sizeof(ph)) != sizeof(ph))
-      goto bad;
-    if(ph.type != ELF_PROG_LOAD)
-      continue;
-    if(ph.memsz < ph.filesz)
-      goto bad;
-    if((sz = allocuvm(pgdir, sz, ph.vaddr + ph.memsz)) == 0)
-      goto bad;
-    if(loaduvm(pgdir, (char*)ph.vaddr, ip, ph.off, ph.filesz) < 0)
-      goto bad;
-  }
-  iunlockput(ip);
-  end_op();
-  ip = 0;
-
-
-  int retFuncSize = implicit_exit_end - implicit_exit;
-  // Allocate two pages at the next page boundary.
-  // Make the first inaccessible.  Use the second as the user stack.
-  sz = PGROUNDUP(sz);
-
-  if((sz = allocuvm(pgdir, sz, sz + (2*PGSIZE + retFuncSize))) == 0)
-    goto bad;
-  clearpteu(pgdir, (char*)(sz - (2*PGSIZE + retFuncSize)));
-
-
-  sp = sz - retFuncSize;
-  if(copyout(pgdir, sp, implicit_exit, retFuncSize) < 0)
-    goto bad;
-
-  uint userRetFuncAddress = sp;
-
-  // Push argument strings, prepare rest of stack in ustack.
-  for(argc = 0; argv[argc]; argc++) {
-    if(argc >= MAXARG)
-      goto bad;
-    sp = (sp - (strlen(argv[argc]) + 1)) & ~3;
-    if(copyout(pgdir, sp, argv[argc], strlen(argv[argc]) + 1) < 0)
-      goto bad;
-    ustack[3+argc] = sp;
-  }
-  ustack[3+argc] = 0;
-
-
-
-  ustack[0] = userRetFuncAddress;  // fake return PC
-  ustack[1] = argc;
-  ustack[2] = sp - (argc+1)*4;  // argv pointer
-
-  sp -= (3+argc+1) * 4;
-  if(copyout(pgdir, sp, ustack, (3+argc+1)*4) < 0)
-    goto bad;
-
-  // Save program name for debugging.
-  for(last=s=path; *s; s++)
-    if(*s == '/')
-      last = s+1;
-  safestrcpy(proc->name, last, sizeof(proc->name));
-//  cprintf("\n[debug] [%s] executing '%s' \n", TAG, last);
-  // Commit to the user image.
-  oldpgdir = proc->pgdir;
-  proc->pgdir = pgdir;
-  proc->sz = sz;
-  proc->tf->eip = elf.entry;  // main
-  proc->tf->esp = sp;
-  switchuvm(proc);
-  freevm(oldpgdir);
-  return 0;
-
- bad:
-  if(pgdir)
-    freevm(pgdir);
-  if(ip){
-    iunlockput(ip);
-    end_op();
-  }
-  return -1;
-}
diff --git a/xv6/exec.d b/xv6/exec.d
deleted file mode 100644
index 98be798..0000000
--- a/xv6/exec.d
+++ /dev/null
@@ -1,2 +0,0 @@
-exec.o: exec.c types.h param.h memlayout.h mmu.h proc.h defs.h x86.h \
- elf.h
diff --git a/xv6/fcntl.h b/xv6/fcntl.h
deleted file mode 100644
index d565483..0000000
--- a/xv6/fcntl.h
+++ /dev/null
@@ -1,4 +0,0 @@
-#define O_RDONLY  0x000
-#define O_WRONLY  0x001
-#define O_RDWR    0x002
-#define O_CREATE  0x200
diff --git a/xv6/file.c b/xv6/file.c
deleted file mode 100644
index 1b72b42..0000000
--- a/xv6/file.c
+++ /dev/null
@@ -1,157 +0,0 @@
-//
-// File descriptors
-//
-
-#include "types.h"
-#include "defs.h"
-#include "param.h"
-#include "fs.h"
-#include "file.h"
-#include "spinlock.h"
-
-struct devsw devsw[NDEV];
-struct {
-  struct spinlock lock;
-  struct file file[NFILE];
-} ftable;
-
-void
-fileinit(void)
-{
-  initlock(&ftable.lock, "ftable");
-}
-
-// Allocate a file structure.
-struct file*
-filealloc(void)
-{
-  struct file *f;
-
-  acquire(&ftable.lock);
-  for(f = ftable.file; f < ftable.file + NFILE; f++){
-    if(f->ref == 0){
-      f->ref = 1;
-      release(&ftable.lock);
-      return f;
-    }
-  }
-  release(&ftable.lock);
-  return 0;
-}
-
-// Increment ref count for file f.
-struct file*
-filedup(struct file *f)
-{
-  acquire(&ftable.lock);
-  if(f->ref < 1)
-    panic("filedup");
-  f->ref++;
-  release(&ftable.lock);
-  return f;
-}
-
-// Close file f.  (Decrement ref count, close when reaches 0.)
-void
-fileclose(struct file *f)
-{
-  struct file ff;
-
-  acquire(&ftable.lock);
-  if(f->ref < 1)
-    panic("fileclose");
-  if(--f->ref > 0){
-    release(&ftable.lock);
-    return;
-  }
-  ff = *f;
-  f->ref = 0;
-  f->type = FD_NONE;
-  release(&ftable.lock);
-  
-  if(ff.type == FD_PIPE)
-    pipeclose(ff.pipe, ff.writable);
-  else if(ff.type == FD_INODE){
-    begin_op();
-    iput(ff.ip);
-    end_op();
-  }
-}
-
-// Get metadata about file f.
-int
-filestat(struct file *f, struct stat *st)
-{
-  if(f->type == FD_INODE){
-    ilock(f->ip);
-    stati(f->ip, st);
-    iunlock(f->ip);
-    return 0;
-  }
-  return -1;
-}
-
-
-// Read from file f.
-int
-fileread(struct file *f, char *addr, int n)
-{
-  int r;
-
-  if(f->readable == 0)
-    return -1;
-  if(f->type == FD_PIPE)
-    return piperead(f->pipe, addr, n);
-  if(f->type == FD_INODE){
-    ilock(f->ip);
-    if((r = readi(f->ip, addr, f->off, n)) > 0)
-      f->off += r;
-    iunlock(f->ip);
-    return r;
-  }
-  panic("fileread");
-}
-
-//PAGEBREAK!
-// Write to file f.
-int
-filewrite(struct file *f, char *addr, int n)
-{
-  int r;
-
-  if(f->writable == 0)
-    return -1;
-  if(f->type == FD_PIPE)
-    return pipewrite(f->pipe, addr, n);
-  if(f->type == FD_INODE){
-    // write a few blocks at a time to avoid exceeding
-    // the maximum log transaction size, including
-    // i-node, indirect block, allocation blocks,
-    // and 2 blocks of slop for non-aligned writes.
-    // this really belongs lower down, since writei()
-    // might be writing a device like the console.
-    int max = ((LOGSIZE-1-1-2) / 2) * 512;
-    int i = 0;
-    while(i < n){
-      int n1 = n - i;
-      if(n1 > max)
-        n1 = max;
-
-      begin_op();
-      ilock(f->ip);
-      if ((r = writei(f->ip, addr + i, f->off, n1)) > 0)
-        f->off += r;
-      iunlock(f->ip);
-      end_op();
-
-      if(r < 0)
-        break;
-      if(r != n1)
-        panic("short filewrite");
-      i += r;
-    }
-    return i == n ? n : -1;
-  }
-  panic("filewrite");
-}
-
diff --git a/xv6/file.d b/xv6/file.d
deleted file mode 100644
index 21300d5..0000000
--- a/xv6/file.d
+++ /dev/null
@@ -1 +0,0 @@
-file.o: file.c types.h defs.h param.h fs.h file.h spinlock.h
diff --git a/xv6/file.h b/xv6/file.h
deleted file mode 100644
index 5a4a463..0000000
--- a/xv6/file.h
+++ /dev/null
@@ -1,41 +0,0 @@
-struct file {
-  enum { FD_NONE, FD_PIPE, FD_INODE } type;
-  int ref; // reference count
-  char readable;
-  char writable;
-  struct pipe *pipe;
-  struct inode *ip;
-  uint off;
-};
-
-
-// in-memory copy of an inode
-struct inode {
-  uint dev;           // Device number
-  uint inum;          // Inode number
-  int ref;            // Reference count
-  int flags;          // I_BUSY, I_VALID
-
-  short type;         // copy of disk inode
-  short major;
-  short minor;
-  short nlink;
-  uint size;
-  uint addrs[NDIRECT+1];
-};
-#define I_BUSY 0x1
-#define I_VALID 0x2
-
-// table mapping major device number to
-// device functions
-struct devsw {
-  int (*read)(struct inode*, char*, int);
-  int (*write)(struct inode*, char*, int);
-};
-
-extern struct devsw devsw[];
-
-#define CONSOLE 1
-
-//PAGEBREAK!
-// Blank page.
diff --git a/xv6/forktest.asm b/xv6/forktest.asm
deleted file mode 100644
index 996f904..0000000
--- a/xv6/forktest.asm
+++ /dev/null
@@ -1,725 +0,0 @@
-
-_forktest:     file format elf32-i386
-
-
-Disassembly of section .text:
-
-00000000 <printf>:
-
-#define N  1000
-
-void
-printf(int fd, char *s, ...)
-{
-   0:	55                   	push   %ebp
-   1:	89 e5                	mov    %esp,%ebp
-   3:	83 ec 18             	sub    $0x18,%esp
-  write(fd, s, strlen(s));
-   6:	8b 45 0c             	mov    0xc(%ebp),%eax
-   9:	89 04 24             	mov    %eax,(%esp)
-   c:	e8 d1 01 00 00       	call   1e2 <strlen>
-  11:	89 44 24 08          	mov    %eax,0x8(%esp)
-  15:	8b 45 0c             	mov    0xc(%ebp),%eax
-  18:	89 44 24 04          	mov    %eax,0x4(%esp)
-  1c:	8b 45 08             	mov    0x8(%ebp),%eax
-  1f:	89 04 24             	mov    %eax,(%esp)
-  22:	e8 a5 03 00 00       	call   3cc <write>
-}
-  27:	c9                   	leave  
-  28:	c3                   	ret    
-
-00000029 <forktest>:
-
-void
-forktest(void)
-{
-  29:	55                   	push   %ebp
-  2a:	89 e5                	mov    %esp,%ebp
-  2c:	83 ec 28             	sub    $0x28,%esp
-  int n, pid;
-
-  printf(1, "fork test\n");
-  2f:	c7 44 24 04 74 04 00 	movl   $0x474,0x4(%esp)
-  36:	00 
-  37:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
-  3e:	e8 bd ff ff ff       	call   0 <printf>
-
-  for(n=0; n<N; n++){
-  43:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
-  4a:	eb 24                	jmp    70 <forktest+0x47>
-    pid = fork();
-  4c:	e8 53 03 00 00       	call   3a4 <fork>
-  51:	89 45 f0             	mov    %eax,-0x10(%ebp)
-    if(pid < 0)
-  54:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
-  58:	78 21                	js     7b <forktest+0x52>
-      break;
-    if(pid == 0)
-  5a:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
-  5e:	75 0c                	jne    6c <forktest+0x43>
-      exit(EXIT_STATUS_DEFAULT);
-  60:	c7 04 24 02 00 00 00 	movl   $0x2,(%esp)
-  67:	e8 40 03 00 00       	call   3ac <exit>
-{
-  int n, pid;
-
-  printf(1, "fork test\n");
-
-  for(n=0; n<N; n++){
-  6c:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
-  70:	81 7d f4 e7 03 00 00 	cmpl   $0x3e7,-0xc(%ebp)
-  77:	7e d3                	jle    4c <forktest+0x23>
-  79:	eb 01                	jmp    7c <forktest+0x53>
-    pid = fork();
-    if(pid < 0)
-      break;
-  7b:	90                   	nop
-    if(pid == 0)
-      exit(EXIT_STATUS_DEFAULT);
-  }
-  
-  if(n == N){
-  7c:	81 7d f4 e8 03 00 00 	cmpl   $0x3e8,-0xc(%ebp)
-  83:	75 5c                	jne    e1 <forktest+0xb8>
-    printf(1, "fork claimed to work N times!\n", N);
-  85:	c7 44 24 08 e8 03 00 	movl   $0x3e8,0x8(%esp)
-  8c:	00 
-  8d:	c7 44 24 04 80 04 00 	movl   $0x480,0x4(%esp)
-  94:	00 
-  95:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
-  9c:	e8 5f ff ff ff       	call   0 <printf>
-    exit(EXIT_STATUS_DEFAULT);
-  a1:	c7 04 24 02 00 00 00 	movl   $0x2,(%esp)
-  a8:	e8 ff 02 00 00       	call   3ac <exit>
-  }
-  
-  for(; n > 0; n--){
-    if(wait(0) < 0){
-  ad:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
-  b4:	e8 fb 02 00 00       	call   3b4 <wait>
-  b9:	85 c0                	test   %eax,%eax
-  bb:	79 20                	jns    dd <forktest+0xb4>
-      printf(1, "wait stopped early\n");
-  bd:	c7 44 24 04 9f 04 00 	movl   $0x49f,0x4(%esp)
-  c4:	00 
-  c5:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
-  cc:	e8 2f ff ff ff       	call   0 <printf>
-      exit(EXIT_STATUS_DEFAULT);
-  d1:	c7 04 24 02 00 00 00 	movl   $0x2,(%esp)
-  d8:	e8 cf 02 00 00       	call   3ac <exit>
-  if(n == N){
-    printf(1, "fork claimed to work N times!\n", N);
-    exit(EXIT_STATUS_DEFAULT);
-  }
-  
-  for(; n > 0; n--){
-  dd:	83 6d f4 01          	subl   $0x1,-0xc(%ebp)
-  e1:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
-  e5:	7f c6                	jg     ad <forktest+0x84>
-      printf(1, "wait stopped early\n");
-      exit(EXIT_STATUS_DEFAULT);
-    }
-  }
-  
-  if(wait(0) != -1){
-  e7:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
-  ee:	e8 c1 02 00 00       	call   3b4 <wait>
-  f3:	83 f8 ff             	cmp    $0xffffffff,%eax
-  f6:	74 20                	je     118 <forktest+0xef>
-    printf(1, "wait got too many\n");
-  f8:	c7 44 24 04 b3 04 00 	movl   $0x4b3,0x4(%esp)
-  ff:	00 
- 100:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
- 107:	e8 f4 fe ff ff       	call   0 <printf>
-    exit(EXIT_STATUS_DEFAULT);
- 10c:	c7 04 24 02 00 00 00 	movl   $0x2,(%esp)
- 113:	e8 94 02 00 00       	call   3ac <exit>
-  }
-  
-  printf(1, "fork test OK\n");
- 118:	c7 44 24 04 c6 04 00 	movl   $0x4c6,0x4(%esp)
- 11f:	00 
- 120:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
- 127:	e8 d4 fe ff ff       	call   0 <printf>
-}
- 12c:	c9                   	leave  
- 12d:	c3                   	ret    
-
-0000012e <main>:
-
-int
-main(void)
-{
- 12e:	55                   	push   %ebp
- 12f:	89 e5                	mov    %esp,%ebp
- 131:	83 e4 f0             	and    $0xfffffff0,%esp
- 134:	83 ec 10             	sub    $0x10,%esp
-  forktest();
- 137:	e8 ed fe ff ff       	call   29 <forktest>
-  exit(EXIT_STATUS_DEFAULT);
- 13c:	c7 04 24 02 00 00 00 	movl   $0x2,(%esp)
- 143:	e8 64 02 00 00       	call   3ac <exit>
-
-00000148 <stosb>:
-               "cc");
-}
-
-static inline void
-stosb(void *addr, int data, int cnt)
-{
- 148:	55                   	push   %ebp
- 149:	89 e5                	mov    %esp,%ebp
- 14b:	57                   	push   %edi
- 14c:	53                   	push   %ebx
-  asm volatile("cld; rep stosb" :
- 14d:	8b 4d 08             	mov    0x8(%ebp),%ecx
- 150:	8b 55 10             	mov    0x10(%ebp),%edx
- 153:	8b 45 0c             	mov    0xc(%ebp),%eax
- 156:	89 cb                	mov    %ecx,%ebx
- 158:	89 df                	mov    %ebx,%edi
- 15a:	89 d1                	mov    %edx,%ecx
- 15c:	fc                   	cld    
- 15d:	f3 aa                	rep stos %al,%es:(%edi)
- 15f:	89 ca                	mov    %ecx,%edx
- 161:	89 fb                	mov    %edi,%ebx
- 163:	89 5d 08             	mov    %ebx,0x8(%ebp)
- 166:	89 55 10             	mov    %edx,0x10(%ebp)
-               "=D" (addr), "=c" (cnt) :
-               "0" (addr), "1" (cnt), "a" (data) :
-               "memory", "cc");
-}
- 169:	5b                   	pop    %ebx
- 16a:	5f                   	pop    %edi
- 16b:	5d                   	pop    %ebp
- 16c:	c3                   	ret    
-
-0000016d <strcpy>:
-#include "user.h"
-#include "x86.h"
-
-char*
-strcpy(char *s, char *t)
-{
- 16d:	55                   	push   %ebp
- 16e:	89 e5                	mov    %esp,%ebp
- 170:	83 ec 10             	sub    $0x10,%esp
-  char *os;
-
-  os = s;
- 173:	8b 45 08             	mov    0x8(%ebp),%eax
- 176:	89 45 fc             	mov    %eax,-0x4(%ebp)
-  while((*s++ = *t++) != 0)
- 179:	90                   	nop
- 17a:	8b 45 0c             	mov    0xc(%ebp),%eax
- 17d:	0f b6 10             	movzbl (%eax),%edx
- 180:	8b 45 08             	mov    0x8(%ebp),%eax
- 183:	88 10                	mov    %dl,(%eax)
- 185:	8b 45 08             	mov    0x8(%ebp),%eax
- 188:	0f b6 00             	movzbl (%eax),%eax
- 18b:	84 c0                	test   %al,%al
- 18d:	0f 95 c0             	setne  %al
- 190:	83 45 08 01          	addl   $0x1,0x8(%ebp)
- 194:	83 45 0c 01          	addl   $0x1,0xc(%ebp)
- 198:	84 c0                	test   %al,%al
- 19a:	75 de                	jne    17a <strcpy+0xd>
-    ;
-  return os;
- 19c:	8b 45 fc             	mov    -0x4(%ebp),%eax
-}
- 19f:	c9                   	leave  
- 1a0:	c3                   	ret    
-
-000001a1 <strcmp>:
-
-int
-strcmp(const char *p, const char *q)
-{
- 1a1:	55                   	push   %ebp
- 1a2:	89 e5                	mov    %esp,%ebp
-  while(*p && *p == *q)
- 1a4:	eb 08                	jmp    1ae <strcmp+0xd>
-    p++, q++;
- 1a6:	83 45 08 01          	addl   $0x1,0x8(%ebp)
- 1aa:	83 45 0c 01          	addl   $0x1,0xc(%ebp)
-}
-
-int
-strcmp(const char *p, const char *q)
-{
-  while(*p && *p == *q)
- 1ae:	8b 45 08             	mov    0x8(%ebp),%eax
- 1b1:	0f b6 00             	movzbl (%eax),%eax
- 1b4:	84 c0                	test   %al,%al
- 1b6:	74 10                	je     1c8 <strcmp+0x27>
- 1b8:	8b 45 08             	mov    0x8(%ebp),%eax
- 1bb:	0f b6 10             	movzbl (%eax),%edx
- 1be:	8b 45 0c             	mov    0xc(%ebp),%eax
- 1c1:	0f b6 00             	movzbl (%eax),%eax
- 1c4:	38 c2                	cmp    %al,%dl
- 1c6:	74 de                	je     1a6 <strcmp+0x5>
-    p++, q++;
-  return (uchar)*p - (uchar)*q;
- 1c8:	8b 45 08             	mov    0x8(%ebp),%eax
- 1cb:	0f b6 00             	movzbl (%eax),%eax
- 1ce:	0f b6 d0             	movzbl %al,%edx
- 1d1:	8b 45 0c             	mov    0xc(%ebp),%eax
- 1d4:	0f b6 00             	movzbl (%eax),%eax
- 1d7:	0f b6 c0             	movzbl %al,%eax
- 1da:	89 d1                	mov    %edx,%ecx
- 1dc:	29 c1                	sub    %eax,%ecx
- 1de:	89 c8                	mov    %ecx,%eax
-}
- 1e0:	5d                   	pop    %ebp
- 1e1:	c3                   	ret    
-
-000001e2 <strlen>:
-
-uint
-strlen(char *s)
-{
- 1e2:	55                   	push   %ebp
- 1e3:	89 e5                	mov    %esp,%ebp
- 1e5:	83 ec 10             	sub    $0x10,%esp
-  int n;
-
-  for(n = 0; s[n]; n++)
- 1e8:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
- 1ef:	eb 04                	jmp    1f5 <strlen+0x13>
- 1f1:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
- 1f5:	8b 45 fc             	mov    -0x4(%ebp),%eax
- 1f8:	03 45 08             	add    0x8(%ebp),%eax
- 1fb:	0f b6 00             	movzbl (%eax),%eax
- 1fe:	84 c0                	test   %al,%al
- 200:	75 ef                	jne    1f1 <strlen+0xf>
-    ;
-  return n;
- 202:	8b 45 fc             	mov    -0x4(%ebp),%eax
-}
- 205:	c9                   	leave  
- 206:	c3                   	ret    
-
-00000207 <memset>:
-
-void*
-memset(void *dst, int c, uint n)
-{
- 207:	55                   	push   %ebp
- 208:	89 e5                	mov    %esp,%ebp
- 20a:	83 ec 0c             	sub    $0xc,%esp
-  stosb(dst, c, n);
- 20d:	8b 45 10             	mov    0x10(%ebp),%eax
- 210:	89 44 24 08          	mov    %eax,0x8(%esp)
- 214:	8b 45 0c             	mov    0xc(%ebp),%eax
- 217:	89 44 24 04          	mov    %eax,0x4(%esp)
- 21b:	8b 45 08             	mov    0x8(%ebp),%eax
- 21e:	89 04 24             	mov    %eax,(%esp)
- 221:	e8 22 ff ff ff       	call   148 <stosb>
-  return dst;
- 226:	8b 45 08             	mov    0x8(%ebp),%eax
-}
- 229:	c9                   	leave  
- 22a:	c3                   	ret    
-
-0000022b <strchr>:
-
-char*
-strchr(const char *s, char c)
-{
- 22b:	55                   	push   %ebp
- 22c:	89 e5                	mov    %esp,%ebp
- 22e:	83 ec 04             	sub    $0x4,%esp
- 231:	8b 45 0c             	mov    0xc(%ebp),%eax
- 234:	88 45 fc             	mov    %al,-0x4(%ebp)
-  for(; *s; s++)
- 237:	eb 14                	jmp    24d <strchr+0x22>
-    if(*s == c)
- 239:	8b 45 08             	mov    0x8(%ebp),%eax
- 23c:	0f b6 00             	movzbl (%eax),%eax
- 23f:	3a 45 fc             	cmp    -0x4(%ebp),%al
- 242:	75 05                	jne    249 <strchr+0x1e>
-      return (char*)s;
- 244:	8b 45 08             	mov    0x8(%ebp),%eax
- 247:	eb 13                	jmp    25c <strchr+0x31>
-}
-
-char*
-strchr(const char *s, char c)
-{
-  for(; *s; s++)
- 249:	83 45 08 01          	addl   $0x1,0x8(%ebp)
- 24d:	8b 45 08             	mov    0x8(%ebp),%eax
- 250:	0f b6 00             	movzbl (%eax),%eax
- 253:	84 c0                	test   %al,%al
- 255:	75 e2                	jne    239 <strchr+0xe>
-    if(*s == c)
-      return (char*)s;
-  return 0;
- 257:	b8 00 00 00 00       	mov    $0x0,%eax
-}
- 25c:	c9                   	leave  
- 25d:	c3                   	ret    
-
-0000025e <gets>:
-
-char*
-gets(char *buf, int max)
-{
- 25e:	55                   	push   %ebp
- 25f:	89 e5                	mov    %esp,%ebp
- 261:	83 ec 28             	sub    $0x28,%esp
-  int i, cc;
-  char c;
-
-  for(i=0; i+1 < max; ){
- 264:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
- 26b:	eb 44                	jmp    2b1 <gets+0x53>
-    cc = read(0, &c, 1);
- 26d:	c7 44 24 08 01 00 00 	movl   $0x1,0x8(%esp)
- 274:	00 
- 275:	8d 45 ef             	lea    -0x11(%ebp),%eax
- 278:	89 44 24 04          	mov    %eax,0x4(%esp)
- 27c:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
- 283:	e8 3c 01 00 00       	call   3c4 <read>
- 288:	89 45 f0             	mov    %eax,-0x10(%ebp)
-    if(cc < 1)
- 28b:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
- 28f:	7e 2d                	jle    2be <gets+0x60>
-      break;
-    buf[i++] = c;
- 291:	8b 45 f4             	mov    -0xc(%ebp),%eax
- 294:	03 45 08             	add    0x8(%ebp),%eax
- 297:	0f b6 55 ef          	movzbl -0x11(%ebp),%edx
- 29b:	88 10                	mov    %dl,(%eax)
- 29d:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
-    if(c == '\n' || c == '\r')
- 2a1:	0f b6 45 ef          	movzbl -0x11(%ebp),%eax
- 2a5:	3c 0a                	cmp    $0xa,%al
- 2a7:	74 16                	je     2bf <gets+0x61>
- 2a9:	0f b6 45 ef          	movzbl -0x11(%ebp),%eax
- 2ad:	3c 0d                	cmp    $0xd,%al
- 2af:	74 0e                	je     2bf <gets+0x61>
-gets(char *buf, int max)
-{
-  int i, cc;
-  char c;
-
-  for(i=0; i+1 < max; ){
- 2b1:	8b 45 f4             	mov    -0xc(%ebp),%eax
- 2b4:	83 c0 01             	add    $0x1,%eax
- 2b7:	3b 45 0c             	cmp    0xc(%ebp),%eax
- 2ba:	7c b1                	jl     26d <gets+0xf>
- 2bc:	eb 01                	jmp    2bf <gets+0x61>
-    cc = read(0, &c, 1);
-    if(cc < 1)
-      break;
- 2be:	90                   	nop
-    buf[i++] = c;
-    if(c == '\n' || c == '\r')
-      break;
-  }
-  buf[i] = '\0';
- 2bf:	8b 45 f4             	mov    -0xc(%ebp),%eax
- 2c2:	03 45 08             	add    0x8(%ebp),%eax
- 2c5:	c6 00 00             	movb   $0x0,(%eax)
-  return buf;
- 2c8:	8b 45 08             	mov    0x8(%ebp),%eax
-}
- 2cb:	c9                   	leave  
- 2cc:	c3                   	ret    
-
-000002cd <stat>:
-
-int
-stat(char *n, struct stat *st)
-{
- 2cd:	55                   	push   %ebp
- 2ce:	89 e5                	mov    %esp,%ebp
- 2d0:	83 ec 28             	sub    $0x28,%esp
-  int fd;
-  int r;
-
-  fd = open(n, O_RDONLY);
- 2d3:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
- 2da:	00 
- 2db:	8b 45 08             	mov    0x8(%ebp),%eax
- 2de:	89 04 24             	mov    %eax,(%esp)
- 2e1:	e8 06 01 00 00       	call   3ec <open>
- 2e6:	89 45 f4             	mov    %eax,-0xc(%ebp)
-  if(fd < 0)
- 2e9:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
- 2ed:	79 07                	jns    2f6 <stat+0x29>
-    return -1;
- 2ef:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
- 2f4:	eb 23                	jmp    319 <stat+0x4c>
-  r = fstat(fd, st);
- 2f6:	8b 45 0c             	mov    0xc(%ebp),%eax
- 2f9:	89 44 24 04          	mov    %eax,0x4(%esp)
- 2fd:	8b 45 f4             	mov    -0xc(%ebp),%eax
- 300:	89 04 24             	mov    %eax,(%esp)
- 303:	e8 fc 00 00 00       	call   404 <fstat>
- 308:	89 45 f0             	mov    %eax,-0x10(%ebp)
-  close(fd);
- 30b:	8b 45 f4             	mov    -0xc(%ebp),%eax
- 30e:	89 04 24             	mov    %eax,(%esp)
- 311:	e8 be 00 00 00       	call   3d4 <close>
-  return r;
- 316:	8b 45 f0             	mov    -0x10(%ebp),%eax
-}
- 319:	c9                   	leave  
- 31a:	c3                   	ret    
-
-0000031b <atoi>:
-
-int
-atoi(const char *s)
-{
- 31b:	55                   	push   %ebp
- 31c:	89 e5                	mov    %esp,%ebp
- 31e:	83 ec 10             	sub    $0x10,%esp
-  int n;
-
-  n = 0;
- 321:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
-  while('0' <= *s && *s <= '9')
- 328:	eb 23                	jmp    34d <atoi+0x32>
-    n = n*10 + *s++ - '0';
- 32a:	8b 55 fc             	mov    -0x4(%ebp),%edx
- 32d:	89 d0                	mov    %edx,%eax
- 32f:	c1 e0 02             	shl    $0x2,%eax
- 332:	01 d0                	add    %edx,%eax
- 334:	01 c0                	add    %eax,%eax
- 336:	89 c2                	mov    %eax,%edx
- 338:	8b 45 08             	mov    0x8(%ebp),%eax
- 33b:	0f b6 00             	movzbl (%eax),%eax
- 33e:	0f be c0             	movsbl %al,%eax
- 341:	01 d0                	add    %edx,%eax
- 343:	83 e8 30             	sub    $0x30,%eax
- 346:	89 45 fc             	mov    %eax,-0x4(%ebp)
- 349:	83 45 08 01          	addl   $0x1,0x8(%ebp)
-atoi(const char *s)
-{
-  int n;
-
-  n = 0;
-  while('0' <= *s && *s <= '9')
- 34d:	8b 45 08             	mov    0x8(%ebp),%eax
- 350:	0f b6 00             	movzbl (%eax),%eax
- 353:	3c 2f                	cmp    $0x2f,%al
- 355:	7e 0a                	jle    361 <atoi+0x46>
- 357:	8b 45 08             	mov    0x8(%ebp),%eax
- 35a:	0f b6 00             	movzbl (%eax),%eax
- 35d:	3c 39                	cmp    $0x39,%al
- 35f:	7e c9                	jle    32a <atoi+0xf>
-    n = n*10 + *s++ - '0';
-  return n;
- 361:	8b 45 fc             	mov    -0x4(%ebp),%eax
-}
- 364:	c9                   	leave  
- 365:	c3                   	ret    
-
-00000366 <memmove>:
-
-void*
-memmove(void *vdst, void *vsrc, int n)
-{
- 366:	55                   	push   %ebp
- 367:	89 e5                	mov    %esp,%ebp
- 369:	83 ec 10             	sub    $0x10,%esp
-  char *dst, *src;
-  
-  dst = vdst;
- 36c:	8b 45 08             	mov    0x8(%ebp),%eax
- 36f:	89 45 fc             	mov    %eax,-0x4(%ebp)
-  src = vsrc;
- 372:	8b 45 0c             	mov    0xc(%ebp),%eax
- 375:	89 45 f8             	mov    %eax,-0x8(%ebp)
-  while(n-- > 0)
- 378:	eb 13                	jmp    38d <memmove+0x27>
-    *dst++ = *src++;
- 37a:	8b 45 f8             	mov    -0x8(%ebp),%eax
- 37d:	0f b6 10             	movzbl (%eax),%edx
- 380:	8b 45 fc             	mov    -0x4(%ebp),%eax
- 383:	88 10                	mov    %dl,(%eax)
- 385:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
- 389:	83 45 f8 01          	addl   $0x1,-0x8(%ebp)
-{
-  char *dst, *src;
-  
-  dst = vdst;
-  src = vsrc;
-  while(n-- > 0)
- 38d:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
- 391:	0f 9f c0             	setg   %al
- 394:	83 6d 10 01          	subl   $0x1,0x10(%ebp)
- 398:	84 c0                	test   %al,%al
- 39a:	75 de                	jne    37a <memmove+0x14>
-    *dst++ = *src++;
-  return vdst;
- 39c:	8b 45 08             	mov    0x8(%ebp),%eax
-}
- 39f:	c9                   	leave  
- 3a0:	c3                   	ret    
- 3a1:	90                   	nop
- 3a2:	90                   	nop
- 3a3:	90                   	nop
-
-000003a4 <fork>:
-  name: \
-    movl $SYS_ ## name, %eax; \
-    int $T_SYSCALL; \
-    ret
-
-SYSCALL(fork)
- 3a4:	b8 01 00 00 00       	mov    $0x1,%eax
- 3a9:	cd 40                	int    $0x40
- 3ab:	c3                   	ret    
-
-000003ac <exit>:
-SYSCALL(exit)
- 3ac:	b8 02 00 00 00       	mov    $0x2,%eax
- 3b1:	cd 40                	int    $0x40
- 3b3:	c3                   	ret    
-
-000003b4 <wait>:
-SYSCALL(wait)
- 3b4:	b8 03 00 00 00       	mov    $0x3,%eax
- 3b9:	cd 40                	int    $0x40
- 3bb:	c3                   	ret    
-
-000003bc <pipe>:
-SYSCALL(pipe)
- 3bc:	b8 04 00 00 00       	mov    $0x4,%eax
- 3c1:	cd 40                	int    $0x40
- 3c3:	c3                   	ret    
-
-000003c4 <read>:
-SYSCALL(read)
- 3c4:	b8 05 00 00 00       	mov    $0x5,%eax
- 3c9:	cd 40                	int    $0x40
- 3cb:	c3                   	ret    
-
-000003cc <write>:
-SYSCALL(write)
- 3cc:	b8 10 00 00 00       	mov    $0x10,%eax
- 3d1:	cd 40                	int    $0x40
- 3d3:	c3                   	ret    
-
-000003d4 <close>:
-SYSCALL(close)
- 3d4:	b8 15 00 00 00       	mov    $0x15,%eax
- 3d9:	cd 40                	int    $0x40
- 3db:	c3                   	ret    
-
-000003dc <kill>:
-SYSCALL(kill)
- 3dc:	b8 06 00 00 00       	mov    $0x6,%eax
- 3e1:	cd 40                	int    $0x40
- 3e3:	c3                   	ret    
-
-000003e4 <exec>:
-SYSCALL(exec)
- 3e4:	b8 07 00 00 00       	mov    $0x7,%eax
- 3e9:	cd 40                	int    $0x40
- 3eb:	c3                   	ret    
-
-000003ec <open>:
-SYSCALL(open)
- 3ec:	b8 0f 00 00 00       	mov    $0xf,%eax
- 3f1:	cd 40                	int    $0x40
- 3f3:	c3                   	ret    
-
-000003f4 <mknod>:
-SYSCALL(mknod)
- 3f4:	b8 11 00 00 00       	mov    $0x11,%eax
- 3f9:	cd 40                	int    $0x40
- 3fb:	c3                   	ret    
-
-000003fc <unlink>:
-SYSCALL(unlink)
- 3fc:	b8 12 00 00 00       	mov    $0x12,%eax
- 401:	cd 40                	int    $0x40
- 403:	c3                   	ret    
-
-00000404 <fstat>:
-SYSCALL(fstat)
- 404:	b8 08 00 00 00       	mov    $0x8,%eax
- 409:	cd 40                	int    $0x40
- 40b:	c3                   	ret    
-
-0000040c <link>:
-SYSCALL(link)
- 40c:	b8 13 00 00 00       	mov    $0x13,%eax
- 411:	cd 40                	int    $0x40
- 413:	c3                   	ret    
-
-00000414 <mkdir>:
-SYSCALL(mkdir)
- 414:	b8 14 00 00 00       	mov    $0x14,%eax
- 419:	cd 40                	int    $0x40
- 41b:	c3                   	ret    
-
-0000041c <chdir>:
-SYSCALL(chdir)
- 41c:	b8 09 00 00 00       	mov    $0x9,%eax
- 421:	cd 40                	int    $0x40
- 423:	c3                   	ret    
-
-00000424 <dup>:
-SYSCALL(dup)
- 424:	b8 0a 00 00 00       	mov    $0xa,%eax
- 429:	cd 40                	int    $0x40
- 42b:	c3                   	ret    
-
-0000042c <getpid>:
-SYSCALL(getpid)
- 42c:	b8 0b 00 00 00       	mov    $0xb,%eax
- 431:	cd 40                	int    $0x40
- 433:	c3                   	ret    
-
-00000434 <sbrk>:
-SYSCALL(sbrk)
- 434:	b8 0c 00 00 00       	mov    $0xc,%eax
- 439:	cd 40                	int    $0x40
- 43b:	c3                   	ret    
-
-0000043c <sleep>:
-SYSCALL(sleep)
- 43c:	b8 0d 00 00 00       	mov    $0xd,%eax
- 441:	cd 40                	int    $0x40
- 443:	c3                   	ret    
-
-00000444 <uptime>:
-SYSCALL(uptime)
- 444:	b8 0e 00 00 00       	mov    $0xe,%eax
- 449:	cd 40                	int    $0x40
- 44b:	c3                   	ret    
-
-0000044c <waitpid>:
-SYSCALL(waitpid)
- 44c:	b8 16 00 00 00       	mov    $0x16,%eax
- 451:	cd 40                	int    $0x40
- 453:	c3                   	ret    
-
-00000454 <wait_stat>:
-SYSCALL(wait_stat)
- 454:	b8 17 00 00 00       	mov    $0x17,%eax
- 459:	cd 40                	int    $0x40
- 45b:	c3                   	ret    
-
-0000045c <list_pgroup>:
-SYSCALL(list_pgroup)
- 45c:	b8 18 00 00 00       	mov    $0x18,%eax
- 461:	cd 40                	int    $0x40
- 463:	c3                   	ret    
-
-00000464 <foreground>:
-SYSCALL(foreground)
- 464:	b8 19 00 00 00       	mov    $0x19,%eax
- 469:	cd 40                	int    $0x40
- 46b:	c3                   	ret    
-
-0000046c <set_priority>:
-SYSCALL(set_priority)
- 46c:	b8 1a 00 00 00       	mov    $0x1a,%eax
- 471:	cd 40                	int    $0x40
- 473:	c3                   	ret    
diff --git a/xv6/forktest.c b/xv6/forktest.c
deleted file mode 100644
index bea40f5..0000000
--- a/xv6/forktest.c
+++ /dev/null
@@ -1,56 +0,0 @@
-// Test that fork fails gracefully.
-// Tiny executable so that the limit can be filling the proc table.
-
-#include "types.h"
-#include "stat.h"
-#include "user.h"
-
-#define N  1000
-
-void
-printf(int fd, char *s, ...)
-{
-  write(fd, s, strlen(s));
-}
-
-void
-forktest(void)
-{
-  int n, pid;
-
-  printf(1, "fork test\n");
-
-  for(n=0; n<N; n++){
-    pid = fork();
-    if(pid < 0)
-      break;
-    if(pid == 0)
-      exit(EXIT_STATUS_DEFAULT);
-  }
-  
-  if(n == N){
-    printf(1, "fork claimed to work N times!\n", N);
-    exit(EXIT_STATUS_DEFAULT);
-  }
-  
-  for(; n > 0; n--){
-    if(wait(0) < 0){
-      printf(1, "wait stopped early\n");
-      exit(EXIT_STATUS_DEFAULT);
-    }
-  }
-  
-  if(wait(0) != -1){
-    printf(1, "wait got too many\n");
-    exit(EXIT_STATUS_DEFAULT);
-  }
-  
-  printf(1, "fork test OK\n");
-}
-
-int
-main(void)
-{
-  forktest();
-  exit(EXIT_STATUS_DEFAULT);
-}
diff --git a/xv6/forktest.d b/xv6/forktest.d
deleted file mode 100644
index 3c322a3..0000000
--- a/xv6/forktest.d
+++ /dev/null
@@ -1 +0,0 @@
-forktest.o: forktest.c types.h stat.h user.h
diff --git a/xv6/fs.c b/xv6/fs.c
deleted file mode 100644
index 1803cb4..0000000
--- a/xv6/fs.c
+++ /dev/null
@@ -1,653 +0,0 @@
-// File system implementation.  Five layers:
-//   + Blocks: allocator for raw disk blocks.
-//   + Log: crash recovery for multi-step updates.
-//   + Files: inode allocator, reading, writing, metadata.
-//   + Directories: inode with special contents (list of other inodes!)
-//   + Names: paths like /usr/rtm/xv6/fs.c for convenient naming.
-//
-// This file contains the low-level file system manipulation 
-// routines.  The (higher-level) system call implementations
-// are in sysfile.c.
-
-#include "types.h"
-#include "defs.h"
-#include "param.h"
-#include "stat.h"
-#include "mmu.h"
-#include "proc.h"
-#include "spinlock.h"
-#include "buf.h"
-#include "fs.h"
-#include "file.h"
-
-#define min(a, b) ((a) < (b) ? (a) : (b))
-static void itrunc(struct inode*);
-
-// Read the super block.
-void
-readsb(int dev, struct superblock *sb)
-{
-  struct buf *bp;
-  
-  bp = bread(dev, 1);
-  memmove(sb, bp->data, sizeof(*sb));
-  brelse(bp);
-}
-
-// Zero a block.
-static void
-bzero(int dev, int bno)
-{
-  struct buf *bp;
-  
-  bp = bread(dev, bno);
-  memset(bp->data, 0, BSIZE);
-  log_write(bp);
-  brelse(bp);
-}
-
-// Blocks. 
-
-// Allocate a zeroed disk block.
-static uint
-balloc(uint dev)
-{
-  int b, bi, m;
-  struct buf *bp;
-  struct superblock sb;
-
-  bp = 0;
-  readsb(dev, &sb);
-  for(b = 0; b < sb.size; b += BPB){
-    bp = bread(dev, BBLOCK(b, sb.ninodes));
-    for(bi = 0; bi < BPB && b + bi < sb.size; bi++){
-      m = 1 << (bi % 8);
-      if((bp->data[bi/8] & m) == 0){  // Is block free?
-        bp->data[bi/8] |= m;  // Mark block in use.
-        log_write(bp);
-        brelse(bp);
-        bzero(dev, b + bi);
-        return b + bi;
-      }
-    }
-    brelse(bp);
-  }
-  panic("balloc: out of blocks");
-}
-
-// Free a disk block.
-static void
-bfree(int dev, uint b)
-{
-  struct buf *bp;
-  struct superblock sb;
-  int bi, m;
-
-  readsb(dev, &sb);
-  bp = bread(dev, BBLOCK(b, sb.ninodes));
-  bi = b % BPB;
-  m = 1 << (bi % 8);
-  if((bp->data[bi/8] & m) == 0)
-    panic("freeing free block");
-  bp->data[bi/8] &= ~m;
-  log_write(bp);
-  brelse(bp);
-}
-
-// Inodes.
-//
-// An inode describes a single unnamed file.
-// The inode disk structure holds metadata: the file's type,
-// its size, the number of links referring to it, and the
-// list of blocks holding the file's content.
-//
-// The inodes are laid out sequentially on disk immediately after
-// the superblock. Each inode has a number, indicating its
-// position on the disk.
-//
-// The kernel keeps a cache of in-use inodes in memory
-// to provide a place for synchronizing access
-// to inodes used by multiple processes. The cached
-// inodes include book-keeping information that is
-// not stored on disk: ip->ref and ip->flags.
-//
-// An inode and its in-memory represtative go through a
-// sequence of states before they can be used by the
-// rest of the file system code.
-//
-// * Allocation: an inode is allocated if its type (on disk)
-//   is non-zero. ialloc() allocates, iput() frees if
-//   the link count has fallen to zero.
-//
-// * Referencing in cache: an entry in the inode cache
-//   is free if ip->ref is zero. Otherwise ip->ref tracks
-//   the number of in-memory pointers to the entry (open
-//   files and current directories). iget() to find or
-//   create a cache entry and increment its ref, iput()
-//   to decrement ref.
-//
-// * Valid: the information (type, size, &c) in an inode
-//   cache entry is only correct when the I_VALID bit
-//   is set in ip->flags. ilock() reads the inode from
-//   the disk and sets I_VALID, while iput() clears
-//   I_VALID if ip->ref has fallen to zero.
-//
-// * Locked: file system code may only examine and modify
-//   the information in an inode and its content if it
-//   has first locked the inode. The I_BUSY flag indicates
-//   that the inode is locked. ilock() sets I_BUSY,
-//   while iunlock clears it.
-//
-// Thus a typical sequence is:
-//   ip = iget(dev, inum)
-//   ilock(ip)
-//   ... examine and modify ip->xxx ...
-//   iunlock(ip)
-//   iput(ip)
-//
-// ilock() is separate from iget() so that system calls can
-// get a long-term reference to an inode (as for an open file)
-// and only lock it for short periods (e.g., in read()).
-// The separation also helps avoid deadlock and races during
-// pathname lookup. iget() increments ip->ref so that the inode
-// stays cached and pointers to it remain valid.
-//
-// Many internal file system functions expect the caller to
-// have locked the inodes involved; this lets callers create
-// multi-step atomic operations.
-
-struct {
-  struct spinlock lock;
-  struct inode inode[NINODE];
-} icache;
-
-void
-iinit(void)
-{
-  initlock(&icache.lock, "icache");
-}
-
-static struct inode* iget(uint dev, uint inum);
-
-//PAGEBREAK!
-// Allocate a new inode with the given type on device dev.
-// A free inode has a type of zero.
-struct inode*
-ialloc(uint dev, short type)
-{
-  int inum;
-  struct buf *bp;
-  struct dinode *dip;
-  struct superblock sb;
-
-  readsb(dev, &sb);
-
-  for(inum = 1; inum < sb.ninodes; inum++){
-    bp = bread(dev, IBLOCK(inum));
-    dip = (struct dinode*)bp->data + inum%IPB;
-    if(dip->type == 0){  // a free inode
-      memset(dip, 0, sizeof(*dip));
-      dip->type = type;
-      log_write(bp);   // mark it allocated on the disk
-      brelse(bp);
-      return iget(dev, inum);
-    }
-    brelse(bp);
-  }
-  panic("ialloc: no inodes");
-}
-
-// Copy a modified in-memory inode to disk.
-void
-iupdate(struct inode *ip)
-{
-  struct buf *bp;
-  struct dinode *dip;
-
-  bp = bread(ip->dev, IBLOCK(ip->inum));
-  dip = (struct dinode*)bp->data + ip->inum%IPB;
-  dip->type = ip->type;
-  dip->major = ip->major;
-  dip->minor = ip->minor;
-  dip->nlink = ip->nlink;
-  dip->size = ip->size;
-  memmove(dip->addrs, ip->addrs, sizeof(ip->addrs));
-  log_write(bp);
-  brelse(bp);
-}
-
-// Find the inode with number inum on device dev
-// and return the in-memory copy. Does not lock
-// the inode and does not read it from disk.
-static struct inode*
-iget(uint dev, uint inum)
-{
-  struct inode *ip, *empty;
-
-  acquire(&icache.lock);
-
-  // Is the inode already cached?
-  empty = 0;
-  for(ip = &icache.inode[0]; ip < &icache.inode[NINODE]; ip++){
-    if(ip->ref > 0 && ip->dev == dev && ip->inum == inum){
-      ip->ref++;
-      release(&icache.lock);
-      return ip;
-    }
-    if(empty == 0 && ip->ref == 0)    // Remember empty slot.
-      empty = ip;
-  }
-
-  // Recycle an inode cache entry.
-  if(empty == 0)
-    panic("iget: no inodes");
-
-  ip = empty;
-  ip->dev = dev;
-  ip->inum = inum;
-  ip->ref = 1;
-  ip->flags = 0;
-  release(&icache.lock);
-
-  return ip;
-}
-
-// Increment reference count for ip.
-// Returns ip to enable ip = idup(ip1) idiom.
-struct inode*
-idup(struct inode *ip)
-{
-  acquire(&icache.lock);
-  ip->ref++;
-  release(&icache.lock);
-  return ip;
-}
-
-// Lock the given inode.
-// Reads the inode from disk if necessary.
-void
-ilock(struct inode *ip)
-{
-  struct buf *bp;
-  struct dinode *dip;
-
-  if(ip == 0 || ip->ref < 1)
-    panic("ilock");
-
-  acquire(&icache.lock);
-  while(ip->flags & I_BUSY)
-    sleep(ip, &icache.lock);
-  ip->flags |= I_BUSY;
-  release(&icache.lock);
-
-  if(!(ip->flags & I_VALID)){
-    bp = bread(ip->dev, IBLOCK(ip->inum));
-    dip = (struct dinode*)bp->data + ip->inum%IPB;
-    ip->type = dip->type;
-    ip->major = dip->major;
-    ip->minor = dip->minor;
-    ip->nlink = dip->nlink;
-    ip->size = dip->size;
-    memmove(ip->addrs, dip->addrs, sizeof(ip->addrs));
-    brelse(bp);
-    ip->flags |= I_VALID;
-    if(ip->type == 0)
-      panic("ilock: no type");
-  }
-}
-
-// Unlock the given inode.
-void
-iunlock(struct inode *ip)
-{
-  if(ip == 0 || !(ip->flags & I_BUSY) || ip->ref < 1)
-    panic("iunlock");
-
-  acquire(&icache.lock);
-  ip->flags &= ~I_BUSY;
-  wakeup(ip);
-  release(&icache.lock);
-}
-
-// Drop a reference to an in-memory inode.
-// If that was the last reference, the inode cache entry can
-// be recycled.
-// If that was the last reference and the inode has no links
-// to it, free the inode (and its content) on disk.
-// All calls to iput() must be inside a transaction in
-// case it has to free the inode.
-void
-iput(struct inode *ip)
-{
-  acquire(&icache.lock);
-  if(ip->ref == 1 && (ip->flags & I_VALID) && ip->nlink == 0){
-    // inode has no links and no other references: truncate and free.
-    if(ip->flags & I_BUSY)
-      panic("iput busy");
-    ip->flags |= I_BUSY;
-    release(&icache.lock);
-    itrunc(ip);
-    ip->type = 0;
-    iupdate(ip);
-    acquire(&icache.lock);
-    ip->flags = 0;
-    wakeup(ip);
-  }
-  ip->ref--;
-  release(&icache.lock);
-}
-
-// Common idiom: unlock, then put.
-void
-iunlockput(struct inode *ip)
-{
-  iunlock(ip);
-  iput(ip);
-}
-
-//PAGEBREAK!
-// Inode content
-//
-// The content (data) associated with each inode is stored
-// in blocks on the disk. The first NDIRECT block numbers
-// are listed in ip->addrs[].  The next NINDIRECT blocks are 
-// listed in block ip->addrs[NDIRECT].
-
-// Return the disk block address of the nth block in inode ip.
-// If there is no such block, bmap allocates one.
-static uint
-bmap(struct inode *ip, uint bn)
-{
-  uint addr, *a;
-  struct buf *bp;
-
-  if(bn < NDIRECT){
-    if((addr = ip->addrs[bn]) == 0)
-      ip->addrs[bn] = addr = balloc(ip->dev);
-    return addr;
-  }
-  bn -= NDIRECT;
-
-  if(bn < NINDIRECT){
-    // Load indirect block, allocating if necessary.
-    if((addr = ip->addrs[NDIRECT]) == 0)
-      ip->addrs[NDIRECT] = addr = balloc(ip->dev);
-    bp = bread(ip->dev, addr);
-    a = (uint*)bp->data;
-    if((addr = a[bn]) == 0){
-      a[bn] = addr = balloc(ip->dev);
-      log_write(bp);
-    }
-    brelse(bp);
-    return addr;
-  }
-
-  panic("bmap: out of range");
-}
-
-// Truncate inode (discard contents).
-// Only called when the inode has no links
-// to it (no directory entries referring to it)
-// and has no in-memory reference to it (is
-// not an open file or current directory).
-static void
-itrunc(struct inode *ip)
-{
-  int i, j;
-  struct buf *bp;
-  uint *a;
-
-  for(i = 0; i < NDIRECT; i++){
-    if(ip->addrs[i]){
-      bfree(ip->dev, ip->addrs[i]);
-      ip->addrs[i] = 0;
-    }
-  }
-  
-  if(ip->addrs[NDIRECT]){
-    bp = bread(ip->dev, ip->addrs[NDIRECT]);
-    a = (uint*)bp->data;
-    for(j = 0; j < NINDIRECT; j++){
-      if(a[j])
-        bfree(ip->dev, a[j]);
-    }
-    brelse(bp);
-    bfree(ip->dev, ip->addrs[NDIRECT]);
-    ip->addrs[NDIRECT] = 0;
-  }
-
-  ip->size = 0;
-  iupdate(ip);
-}
-
-// Copy stat information from inode.
-void
-stati(struct inode *ip, struct stat *st)
-{
-  st->dev = ip->dev;
-  st->ino = ip->inum;
-  st->type = ip->type;
-  st->nlink = ip->nlink;
-  st->size = ip->size;
-}
-
-//PAGEBREAK!
-// Read data from inode.
-int
-readi(struct inode *ip, char *dst, uint off, uint n)
-{
-  uint tot, m;
-  struct buf *bp;
-
-  if(ip->type == T_DEV){
-    if(ip->major < 0 || ip->major >= NDEV || !devsw[ip->major].read)
-      return -1;
-    return devsw[ip->major].read(ip, dst, n);
-  }
-
-  if(off > ip->size || off + n < off)
-    return -1;
-  if(off + n > ip->size)
-    n = ip->size - off;
-
-  for(tot=0; tot<n; tot+=m, off+=m, dst+=m){
-    bp = bread(ip->dev, bmap(ip, off/BSIZE));
-    m = min(n - tot, BSIZE - off%BSIZE);
-    memmove(dst, bp->data + off%BSIZE, m);
-    brelse(bp);
-  }
-  return n;
-}
-
-// PAGEBREAK!
-// Write data to inode.
-int
-writei(struct inode *ip, char *src, uint off, uint n)
-{
-  uint tot, m;
-  struct buf *bp;
-
-  if(ip->type == T_DEV){
-    if(ip->major < 0 || ip->major >= NDEV || !devsw[ip->major].write)
-      return -1;
-    return devsw[ip->major].write(ip, src, n);
-  }
-
-  if(off > ip->size || off + n < off)
-    return -1;
-  if(off + n > MAXFILE*BSIZE)
-    return -1;
-
-  for(tot=0; tot<n; tot+=m, off+=m, src+=m){
-    bp = bread(ip->dev, bmap(ip, off/BSIZE));
-    m = min(n - tot, BSIZE - off%BSIZE);
-    memmove(bp->data + off%BSIZE, src, m);
-    log_write(bp);
-    brelse(bp);
-  }
-
-  if(n > 0 && off > ip->size){
-    ip->size = off;
-    iupdate(ip);
-  }
-  return n;
-}
-
-//PAGEBREAK!
-// Directories
-
-int
-namecmp(const char *s, const char *t)
-{
-  return strncmp(s, t, DIRSIZ);
-}
-
-// Look for a directory entry in a directory.
-// If found, set *poff to byte offset of entry.
-struct inode*
-dirlookup(struct inode *dp, char *name, uint *poff)
-{
-  uint off, inum;
-  struct dirent de;
-
-  if(dp->type != T_DIR)
-    panic("dirlookup not DIR");
-
-  for(off = 0; off < dp->size; off += sizeof(de)){
-    if(readi(dp, (char*)&de, off, sizeof(de)) != sizeof(de))
-      panic("dirlink read");
-    if(de.inum == 0)
-      continue;
-    if(namecmp(name, de.name) == 0){
-      // entry matches path element
-      if(poff)
-        *poff = off;
-      inum = de.inum;
-      return iget(dp->dev, inum);
-    }
-  }
-
-  return 0;
-}
-
-// Write a new directory entry (name, inum) into the directory dp.
-int
-dirlink(struct inode *dp, char *name, uint inum)
-{
-  int off;
-  struct dirent de;
-  struct inode *ip;
-
-  // Check that name is not present.
-  if((ip = dirlookup(dp, name, 0)) != 0){
-    iput(ip);
-    return -1;
-  }
-
-  // Look for an empty dirent.
-  for(off = 0; off < dp->size; off += sizeof(de)){
-    if(readi(dp, (char*)&de, off, sizeof(de)) != sizeof(de))
-      panic("dirlink read");
-    if(de.inum == 0)
-      break;
-  }
-
-  strncpy(de.name, name, DIRSIZ);
-  de.inum = inum;
-  if(writei(dp, (char*)&de, off, sizeof(de)) != sizeof(de))
-    panic("dirlink");
-  
-  return 0;
-}
-
-//PAGEBREAK!
-// Paths
-
-// Copy the next path element from path into name.
-// Return a pointer to the element following the copied one.
-// The returned path has no leading slashes,
-// so the caller can check *path=='\0' to see if the name is the last one.
-// If no name to remove, return 0.
-//
-// Examples:
-//   skipelem("a/bb/c", name) = "bb/c", setting name = "a"
-//   skipelem("///a//bb", name) = "bb", setting name = "a"
-//   skipelem("a", name) = "", setting name = "a"
-//   skipelem("", name) = skipelem("////", name) = 0
-//
-static char*
-skipelem(char *path, char *name)
-{
-  char *s;
-  int len;
-
-  while(*path == '/')
-    path++;
-  if(*path == 0)
-    return 0;
-  s = path;
-  while(*path != '/' && *path != 0)
-    path++;
-  len = path - s;
-  if(len >= DIRSIZ)
-    memmove(name, s, DIRSIZ);
-  else {
-    memmove(name, s, len);
-    name[len] = 0;
-  }
-  while(*path == '/')
-    path++;
-  return path;
-}
-
-// Look up and return the inode for a path name.
-// If parent != 0, return the inode for the parent and copy the final
-// path element into name, which must have room for DIRSIZ bytes.
-// Must be called inside a transaction since it calls iput().
-static struct inode*
-namex(char *path, int nameiparent, char *name)
-{
-  struct inode *ip, *next;
-
-  if(*path == '/')
-    ip = iget(ROOTDEV, ROOTINO);
-  else
-    ip = idup(proc->cwd);
-
-  while((path = skipelem(path, name)) != 0){
-    ilock(ip);
-    if(ip->type != T_DIR){
-      iunlockput(ip);
-      return 0;
-    }
-    if(nameiparent && *path == '\0'){
-      // Stop one level early.
-      iunlock(ip);
-      return ip;
-    }
-    if((next = dirlookup(ip, name, 0)) == 0){
-      iunlockput(ip);
-      return 0;
-    }
-    iunlockput(ip);
-    ip = next;
-  }
-  if(nameiparent){
-    iput(ip);
-    return 0;
-  }
-  return ip;
-}
-
-struct inode*
-namei(char *path)
-{
-  char name[DIRSIZ];
-  return namex(path, 0, name);
-}
-
-struct inode*
-nameiparent(char *path, char *name)
-{
-  return namex(path, 1, name);
-}
diff --git a/xv6/fs.d b/xv6/fs.d
deleted file mode 100644
index 28c38f5..0000000
--- a/xv6/fs.d
+++ /dev/null
@@ -1,2 +0,0 @@
-fs.o: fs.c types.h defs.h param.h stat.h mmu.h proc.h spinlock.h buf.h \
- fs.h file.h
diff --git a/xv6/fs.h b/xv6/fs.h
deleted file mode 100644
index f191d43..0000000
--- a/xv6/fs.h
+++ /dev/null
@@ -1,55 +0,0 @@
-// On-disk file system format. 
-// Both the kernel and user programs use this header file.
-
-// Block 0 is unused.
-// Block 1 is super block.
-// Blocks 2 through sb.ninodes/IPB hold inodes.
-// Then free bitmap blocks holding sb.size bits.
-// Then sb.nblocks data blocks.
-// Then sb.nlog log blocks.
-
-#define ROOTINO 1  // root i-number
-#define BSIZE 512  // block size
-
-// File system super block
-struct superblock {
-  uint size;         // Size of file system image (blocks)
-  uint nblocks;      // Number of data blocks
-  uint ninodes;      // Number of inodes.
-  uint nlog;         // Number of log blocks
-};
-
-#define NDIRECT 12
-#define NINDIRECT (BSIZE / sizeof(uint))
-#define MAXFILE (NDIRECT + NINDIRECT)
-
-// On-disk inode structure
-struct dinode {
-  short type;           // File type
-  short major;          // Major device number (T_DEV only)
-  short minor;          // Minor device number (T_DEV only)
-  short nlink;          // Number of links to inode in file system
-  uint size;            // Size of file (bytes)
-  uint addrs[NDIRECT+1];   // Data block addresses
-};
-
-// Inodes per block.
-#define IPB           (BSIZE / sizeof(struct dinode))
-
-// Block containing inode i
-#define IBLOCK(i)     ((i) / IPB + 2)
-
-// Bitmap bits per block
-#define BPB           (BSIZE*8)
-
-// Block containing bit for block b
-#define BBLOCK(b, ninodes) (b/BPB + (ninodes)/IPB + 3)
-
-// Directory is a file containing a sequence of dirent structures.
-#define DIRSIZ 14
-
-struct dirent {
-  ushort inum;
-  char name[DIRSIZ];
-};
-
diff --git a/xv6/gdbutil b/xv6/gdbutil
deleted file mode 100644
index e0c362f..0000000
--- a/xv6/gdbutil
+++ /dev/null
@@ -1,291 +0,0 @@
-# -*- gdb-script -*-
-
-# Utility functions to pretty-print x86 segment/interrupt descriptors.
-# To load this file, run "source gdbutil" in gdb.
-# printdesc and printdescs are the main entry points.
-
-# IA32 2007, Volume 3A, Table 3-2
-set $STS_T16A = 0x1
-set $STS_LDT  = 0x2
-set $STS_T16B = 0x3
-set $STS_CG16 = 0x4
-set $STS_TG   = 0x5
-set $STS_IG16 = 0x6
-set $STS_TG16 = 0x7
-set $STS_T32A = 0x9
-set $STS_T32B = 0xB
-set $STS_CG32 = 0xC
-set $STS_IG32 = 0xE
-set $STS_TG32 = 0xF
-
-define outputsts
-  while 1
-    if $arg0 == $STS_T16A
-      echo STS_T16A
-      loop_break
-    end
-    if $arg0 == $STS_LDT
-      echo STS_LDT\ 
-      loop_break
-    end
-    if $arg0 == $STS_T16B
-      echo STS_T16B
-      loop_break
-    end
-    if $arg0 == $STS_CG16
-      echo STS_CG16
-      loop_break
-    end
-    if $arg0 == $STS_TG
-      echo STS_TG\ \ 
-      loop_break
-    end
-    if $arg0 == $STS_IG16
-      echo STS_IG16
-      loop_break
-    end
-    if $arg0 == $STS_TG16
-      echo STS_TG16
-      loop_break
-    end
-    if $arg0 == $STS_T32A
-      echo STS_T32A
-      loop_break
-    end
-    if $arg0 == $STS_T32B
-      echo STS_T32B
-      loop_break
-    end
-    if $arg0 == $STS_CG32
-      echo STS_CG32
-      loop_break
-    end
-    if $arg0 == $STS_IG32
-      echo STS_IG32
-      loop_break
-    end
-    if $arg0 == $STS_TG32
-      echo STS_TG32
-      loop_break
-    end
-    echo Reserved
-    loop_break
-  end
-end  
-
-# IA32 2007, Volume 3A, Table 3-1
-set $STA_X = 0x8
-set $STA_E = 0x4
-set $STA_C = 0x4
-set $STA_W = 0x2
-set $STA_R = 0x2
-set $STA_A = 0x1
-
-define outputsta
-  if $arg0 & $STA_X
-    # Code segment
-    echo code
-    if $arg0 & $STA_C
-      echo |STA_C
-    end
-    if $arg0 & $STA_R
-      echo |STA_R
-    end
-  else
-    # Data segment
-    echo data
-    if $arg0 & $STA_E
-      echo |STA_E
-    end
-    if $arg0 & $STA_W
-      echo |STA_W
-    end
-  end
-  if $arg0 & $STA_A
-    echo |STA_A
-  else
-    printf "      "
-  end
-end
-
-# xv6-specific
-set $SEG_KCODE = 1
-set $SEG_KDATA = 2
-set $SEG_KCPU  = 3
-set $SEG_UCODE = 4
-set $SEG_UDATA = 5
-set $SEG_TSS   = 6
-
-define outputcs
-  if ($arg0 & 4) == 0
-    if $arg0 >> 3 == $SEG_KCODE
-      printf "SEG_KCODE<<3"
-    end
-    if $arg0 >> 3 == $SEG_KDATA
-      printf "SEG_KDATA<<3"
-    end
-    if $arg0 >> 3 == $SEG_KCPU
-      printf "SEG_KCPU<<3"
-    end
-    if $arg0 >> 3 == $SEG_UCODE
-      printf "SEG_UCODE<<3"
-    end
-    if $arg0 >> 3 == $SEG_UDATA
-      printf "SEG_UDATA<<3"
-    end
-    if $arg0 >> 3 == $SEG_TSS
-      printf "SEG_TSS<<3"
-    end
-    if ($arg0 >> 3 < 1) + ($arg0 >> 3 > 6)
-      printf "GDT[%d]", $arg0 >> 3
-    end
-  else
-    printf "LDT[%d]", $arg0 >> 3
-  end
-  if ($arg0 & 3) > 0
-    printf "|"
-    outputdpl ($arg0&3)
-  end
-end
-
-define outputdpl
-  if $arg0 == 0
-    printf "DPL_KERN"
-  else
-    if $arg0 == 3
-      printf "DPL_USER"
-    else
-      printf "DPL%d", $arg0
-    end
-  end
-end
-
-define printdesc
-  if $argc != 1
-    echo Usage: printdesc expr
-  else
-    _printdesc ((uint*)&($arg0))[0] ((uint*)&($arg0))[1]
-    printf "\n"
-  end
-end
-
-document printdesc
-Print an x86 segment or gate descriptor.
-printdesc EXPR
-EXPR must evaluate to a descriptor value.  It can be of any C type.
-end
-
-define _printdesc
-  _printdesc1 $arg0 $arg1 ($arg1>>15&1) ($arg1>>13&3) ($arg1>>12&1) ($arg1>>8&15)
-end
-
-define _printdesc1
-  # 2:P 3:DPL 4:S 5:Type
-  if $arg2 == 0
-    printf "P = 0 (Not present)"
-  else
-    printf "type = "
-    if $arg4 == 0
-      # System segment
-      outputsts $arg5
-      printf " (0x%x)    ", $arg5
-      _printsysdesc $arg0 $arg1 $arg5
-    else
-      # Code/data segment
-      outputsta $arg5
-      printf "  "
-      _printsegdesc $arg0 $arg1
-    end
-
-    printf "  DPL = "
-    outputdpl $arg3
-    printf " (%d)", $arg3
-  end
-end
-
-define _printsysdesc
-  # 2:Type
-  # GDB's || is buggy
-  if ($arg2 == $STS_TG) + (($arg2&7) == $STS_IG16) + (($arg2&7) == $STS_TG16)
-    # Gate descriptor
-    _printgate $arg2 ($arg0>>16) ($arg0&0xFFFF) ($arg1>>16)
-  else
-    # System segment descriptor
-    _printsegdesc $arg0 $arg1
-  end
-end
-
-define _printgate
-  # IA32 2007, Voume 3A, Figure 5-2
-  # 0:Type 1:CS 2:Offset 15..0 3:Offset 31..16
-  printf "CS = "
-  outputcs $arg1
-  printf " (%d)", $arg1
-
-  if (($arg0&7) == $STS_IG16) + (($arg0&7) == $STS_TG16)
-    printf "  Offset = "
-    output/a $arg3 << 16 | $arg2
-  end
-end
-
-define _printsegdesc
-  # IA32 20007, Volume 3A, Figure 3-8 and Figure 4-1
-  _printsegdesc1 ($arg0>>16) ($arg1&0xFF) ($arg1>>24) ($arg0&0xFFFF) ($arg1>>16&15) ($arg1>>23&1)
-  if ($arg1>>12&1) == 1
-    printf "  AVL = %d", $arg1>>20&1
-    if ($arg1>>11&1) == 0
-      # Data segment
-      if ($arg1>>22&1) == 0
-        printf "  B = small (0) "
-      else
-        printf "  B = big (1)   "
-      end
-    else
-      # Code segment
-      printf "  D = "
-      if ($arg1>>22&1) == 0
-        printf "16-bit (0)"
-      else
-        printf "32-bit (1)"
-      end
-    end
-  end
-end
-
-define _printsegdesc1
-  # 0:Base 0..15  1:Base 16..23  2:Base 24..32  3:Limit 0..15  4:Limit 16..19  5:G
-  printf "base = 0x%08x", $arg0 | ($arg1<<16) | ($arg2<<24)
-  printf "  limit = 0x"
-  if $arg5 == 0
-    printf "%08x", $arg3 | ($arg4<<16)
-  else
-    printf "%08x", (($arg3 | ($arg4<<16)) << 12) | 0xFFF
-  end
-end
-
-define printdescs
-  if $argc < 1 || $argc > 2
-    echo Usage: printdescs expr [count]
-  else
-    if $argc == 1
-      _printdescs ($arg0) (sizeof($arg0)/sizeof(($arg0)[0]))
-    else
-      _printdescs ($arg0) ($arg1)
-    end
-  end
-end
-
-document printdescs
-Print an array of x86 segment or gate descriptors.
-printdescs EXPR [COUNT]
-EXPR must evaluate to an array of descriptors.
-end
-
-define _printdescs
-  set $i = 0
-  while $i < $arg1
-    printf "[%d] ", $i
-    printdesc $arg0[$i]
-    set $i = $i + 1
-  end
-end
diff --git a/xv6/grep.asm b/xv6/grep.asm
deleted file mode 100644
index 4562bfb..0000000
--- a/xv6/grep.asm
+++ /dev/null
@@ -1,1556 +0,0 @@
-
-_grep:     file format elf32-i386
-
-
-Disassembly of section .text:
-
-00000000 <grep>:
-char buf[1024];
-int match(char*, char*);
-
-void
-grep(char *pattern, int fd)
-{
-   0:	55                   	push   %ebp
-   1:	89 e5                	mov    %esp,%ebp
-   3:	83 ec 28             	sub    $0x28,%esp
-  int n, m;
-  char *p, *q;
-  
-  m = 0;
-   6:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
-  while((n = read(fd, buf+m, sizeof(buf)-m)) > 0){
-   d:	e9 bf 00 00 00       	jmp    d1 <grep+0xd1>
-    m += n;
-  12:	8b 45 ec             	mov    -0x14(%ebp),%eax
-  15:	01 45 f4             	add    %eax,-0xc(%ebp)
-    p = buf;
-  18:	c7 45 f0 80 0e 00 00 	movl   $0xe80,-0x10(%ebp)
-    while((q = strchr(p, '\n')) != 0){
-  1f:	eb 53                	jmp    74 <grep+0x74>
-      *q = 0;
-  21:	8b 45 e8             	mov    -0x18(%ebp),%eax
-  24:	c6 00 00             	movb   $0x0,(%eax)
-      if(match(pattern, p)){
-  27:	8b 45 f0             	mov    -0x10(%ebp),%eax
-  2a:	89 44 24 04          	mov    %eax,0x4(%esp)
-  2e:	8b 45 08             	mov    0x8(%ebp),%eax
-  31:	89 04 24             	mov    %eax,(%esp)
-  34:	e8 cf 01 00 00       	call   208 <match>
-  39:	85 c0                	test   %eax,%eax
-  3b:	74 2e                	je     6b <grep+0x6b>
-        *q = '\n';
-  3d:	8b 45 e8             	mov    -0x18(%ebp),%eax
-  40:	c6 00 0a             	movb   $0xa,(%eax)
-        write(1, p, q+1 - p);
-  43:	8b 45 e8             	mov    -0x18(%ebp),%eax
-  46:	83 c0 01             	add    $0x1,%eax
-  49:	89 c2                	mov    %eax,%edx
-  4b:	8b 45 f0             	mov    -0x10(%ebp),%eax
-  4e:	89 d1                	mov    %edx,%ecx
-  50:	29 c1                	sub    %eax,%ecx
-  52:	89 c8                	mov    %ecx,%eax
-  54:	89 44 24 08          	mov    %eax,0x8(%esp)
-  58:	8b 45 f0             	mov    -0x10(%ebp),%eax
-  5b:	89 44 24 04          	mov    %eax,0x4(%esp)
-  5f:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
-  66:	e8 89 05 00 00       	call   5f4 <write>
-      }
-      p = q+1;
-  6b:	8b 45 e8             	mov    -0x18(%ebp),%eax
-  6e:	83 c0 01             	add    $0x1,%eax
-  71:	89 45 f0             	mov    %eax,-0x10(%ebp)
-  
-  m = 0;
-  while((n = read(fd, buf+m, sizeof(buf)-m)) > 0){
-    m += n;
-    p = buf;
-    while((q = strchr(p, '\n')) != 0){
-  74:	c7 44 24 04 0a 00 00 	movl   $0xa,0x4(%esp)
-  7b:	00 
-  7c:	8b 45 f0             	mov    -0x10(%ebp),%eax
-  7f:	89 04 24             	mov    %eax,(%esp)
-  82:	e8 cc 03 00 00       	call   453 <strchr>
-  87:	89 45 e8             	mov    %eax,-0x18(%ebp)
-  8a:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
-  8e:	75 91                	jne    21 <grep+0x21>
-        *q = '\n';
-        write(1, p, q+1 - p);
-      }
-      p = q+1;
-    }
-    if(p == buf)
-  90:	81 7d f0 80 0e 00 00 	cmpl   $0xe80,-0x10(%ebp)
-  97:	75 07                	jne    a0 <grep+0xa0>
-      m = 0;
-  99:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
-    if(m > 0){
-  a0:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
-  a4:	7e 2b                	jle    d1 <grep+0xd1>
-      m -= p - buf;
-  a6:	ba 80 0e 00 00       	mov    $0xe80,%edx
-  ab:	8b 45 f0             	mov    -0x10(%ebp),%eax
-  ae:	89 d1                	mov    %edx,%ecx
-  b0:	29 c1                	sub    %eax,%ecx
-  b2:	89 c8                	mov    %ecx,%eax
-  b4:	01 45 f4             	add    %eax,-0xc(%ebp)
-      memmove(buf, p, m);
-  b7:	8b 45 f4             	mov    -0xc(%ebp),%eax
-  ba:	89 44 24 08          	mov    %eax,0x8(%esp)
-  be:	8b 45 f0             	mov    -0x10(%ebp),%eax
-  c1:	89 44 24 04          	mov    %eax,0x4(%esp)
-  c5:	c7 04 24 80 0e 00 00 	movl   $0xe80,(%esp)
-  cc:	e8 bd 04 00 00       	call   58e <memmove>
-{
-  int n, m;
-  char *p, *q;
-  
-  m = 0;
-  while((n = read(fd, buf+m, sizeof(buf)-m)) > 0){
-  d1:	8b 45 f4             	mov    -0xc(%ebp),%eax
-  d4:	ba 00 04 00 00       	mov    $0x400,%edx
-  d9:	89 d1                	mov    %edx,%ecx
-  db:	29 c1                	sub    %eax,%ecx
-  dd:	89 c8                	mov    %ecx,%eax
-  df:	8b 55 f4             	mov    -0xc(%ebp),%edx
-  e2:	81 c2 80 0e 00 00    	add    $0xe80,%edx
-  e8:	89 44 24 08          	mov    %eax,0x8(%esp)
-  ec:	89 54 24 04          	mov    %edx,0x4(%esp)
-  f0:	8b 45 0c             	mov    0xc(%ebp),%eax
-  f3:	89 04 24             	mov    %eax,(%esp)
-  f6:	e8 f1 04 00 00       	call   5ec <read>
-  fb:	89 45 ec             	mov    %eax,-0x14(%ebp)
-  fe:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
- 102:	0f 8f 0a ff ff ff    	jg     12 <grep+0x12>
-    if(m > 0){
-      m -= p - buf;
-      memmove(buf, p, m);
-    }
-  }
-}
- 108:	c9                   	leave  
- 109:	c3                   	ret    
-
-0000010a <main>:
-
-int
-main(int argc, char *argv[])
-{
- 10a:	55                   	push   %ebp
- 10b:	89 e5                	mov    %esp,%ebp
- 10d:	83 e4 f0             	and    $0xfffffff0,%esp
- 110:	83 ec 20             	sub    $0x20,%esp
-  int fd, i;
-  char *pattern;
-  
-  if(argc <= 1){
- 113:	83 7d 08 01          	cmpl   $0x1,0x8(%ebp)
- 117:	7f 20                	jg     139 <main+0x2f>
-    printf(2, "usage: grep pattern [file ...]\n");
- 119:	c7 44 24 04 38 0b 00 	movl   $0xb38,0x4(%esp)
- 120:	00 
- 121:	c7 04 24 02 00 00 00 	movl   $0x2,(%esp)
- 128:	e8 46 06 00 00       	call   773 <printf>
-    exit(EXIT_STATUS_DEFAULT);
- 12d:	c7 04 24 02 00 00 00 	movl   $0x2,(%esp)
- 134:	e8 9b 04 00 00       	call   5d4 <exit>
-  }
-  pattern = argv[1];
- 139:	8b 45 0c             	mov    0xc(%ebp),%eax
- 13c:	8b 40 04             	mov    0x4(%eax),%eax
- 13f:	89 44 24 18          	mov    %eax,0x18(%esp)
-  
-  if(argc <= 2){
- 143:	83 7d 08 02          	cmpl   $0x2,0x8(%ebp)
- 147:	7f 20                	jg     169 <main+0x5f>
-    grep(pattern, 0);
- 149:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
- 150:	00 
- 151:	8b 44 24 18          	mov    0x18(%esp),%eax
- 155:	89 04 24             	mov    %eax,(%esp)
- 158:	e8 a3 fe ff ff       	call   0 <grep>
-    exit(EXIT_STATUS_DEFAULT);
- 15d:	c7 04 24 02 00 00 00 	movl   $0x2,(%esp)
- 164:	e8 6b 04 00 00       	call   5d4 <exit>
-  }
-
-  for(i = 2; i < argc; i++){
- 169:	c7 44 24 1c 02 00 00 	movl   $0x2,0x1c(%esp)
- 170:	00 
- 171:	eb 7c                	jmp    1ef <main+0xe5>
-    if((fd = open(argv[i], 0)) < 0){
- 173:	8b 44 24 1c          	mov    0x1c(%esp),%eax
- 177:	c1 e0 02             	shl    $0x2,%eax
- 17a:	03 45 0c             	add    0xc(%ebp),%eax
- 17d:	8b 00                	mov    (%eax),%eax
- 17f:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
- 186:	00 
- 187:	89 04 24             	mov    %eax,(%esp)
- 18a:	e8 85 04 00 00       	call   614 <open>
- 18f:	89 44 24 14          	mov    %eax,0x14(%esp)
- 193:	83 7c 24 14 00       	cmpl   $0x0,0x14(%esp)
- 198:	79 30                	jns    1ca <main+0xc0>
-      printf(1, "grep: cannot open %s\n", argv[i]);
- 19a:	8b 44 24 1c          	mov    0x1c(%esp),%eax
- 19e:	c1 e0 02             	shl    $0x2,%eax
- 1a1:	03 45 0c             	add    0xc(%ebp),%eax
- 1a4:	8b 00                	mov    (%eax),%eax
- 1a6:	89 44 24 08          	mov    %eax,0x8(%esp)
- 1aa:	c7 44 24 04 58 0b 00 	movl   $0xb58,0x4(%esp)
- 1b1:	00 
- 1b2:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
- 1b9:	e8 b5 05 00 00       	call   773 <printf>
-      exit(EXIT_STATUS_DEFAULT);
- 1be:	c7 04 24 02 00 00 00 	movl   $0x2,(%esp)
- 1c5:	e8 0a 04 00 00       	call   5d4 <exit>
-    }
-    grep(pattern, fd);
- 1ca:	8b 44 24 14          	mov    0x14(%esp),%eax
- 1ce:	89 44 24 04          	mov    %eax,0x4(%esp)
- 1d2:	8b 44 24 18          	mov    0x18(%esp),%eax
- 1d6:	89 04 24             	mov    %eax,(%esp)
- 1d9:	e8 22 fe ff ff       	call   0 <grep>
-    close(fd);
- 1de:	8b 44 24 14          	mov    0x14(%esp),%eax
- 1e2:	89 04 24             	mov    %eax,(%esp)
- 1e5:	e8 12 04 00 00       	call   5fc <close>
-  if(argc <= 2){
-    grep(pattern, 0);
-    exit(EXIT_STATUS_DEFAULT);
-  }
-
-  for(i = 2; i < argc; i++){
- 1ea:	83 44 24 1c 01       	addl   $0x1,0x1c(%esp)
- 1ef:	8b 44 24 1c          	mov    0x1c(%esp),%eax
- 1f3:	3b 45 08             	cmp    0x8(%ebp),%eax
- 1f6:	0f 8c 77 ff ff ff    	jl     173 <main+0x69>
-      exit(EXIT_STATUS_DEFAULT);
-    }
-    grep(pattern, fd);
-    close(fd);
-  }
-  exit(EXIT_STATUS_DEFAULT);
- 1fc:	c7 04 24 02 00 00 00 	movl   $0x2,(%esp)
- 203:	e8 cc 03 00 00       	call   5d4 <exit>
-
-00000208 <match>:
-int matchhere(char*, char*);
-int matchstar(int, char*, char*);
-
-int
-match(char *re, char *text)
-{
- 208:	55                   	push   %ebp
- 209:	89 e5                	mov    %esp,%ebp
- 20b:	83 ec 18             	sub    $0x18,%esp
-  if(re[0] == '^')
- 20e:	8b 45 08             	mov    0x8(%ebp),%eax
- 211:	0f b6 00             	movzbl (%eax),%eax
- 214:	3c 5e                	cmp    $0x5e,%al
- 216:	75 17                	jne    22f <match+0x27>
-    return matchhere(re+1, text);
- 218:	8b 45 08             	mov    0x8(%ebp),%eax
- 21b:	8d 50 01             	lea    0x1(%eax),%edx
- 21e:	8b 45 0c             	mov    0xc(%ebp),%eax
- 221:	89 44 24 04          	mov    %eax,0x4(%esp)
- 225:	89 14 24             	mov    %edx,(%esp)
- 228:	e8 39 00 00 00       	call   266 <matchhere>
- 22d:	eb 35                	jmp    264 <match+0x5c>
-  do{  // must look at empty string
-    if(matchhere(re, text))
- 22f:	8b 45 0c             	mov    0xc(%ebp),%eax
- 232:	89 44 24 04          	mov    %eax,0x4(%esp)
- 236:	8b 45 08             	mov    0x8(%ebp),%eax
- 239:	89 04 24             	mov    %eax,(%esp)
- 23c:	e8 25 00 00 00       	call   266 <matchhere>
- 241:	85 c0                	test   %eax,%eax
- 243:	74 07                	je     24c <match+0x44>
-      return 1;
- 245:	b8 01 00 00 00       	mov    $0x1,%eax
- 24a:	eb 18                	jmp    264 <match+0x5c>
-  }while(*text++ != '\0');
- 24c:	8b 45 0c             	mov    0xc(%ebp),%eax
- 24f:	0f b6 00             	movzbl (%eax),%eax
- 252:	84 c0                	test   %al,%al
- 254:	0f 95 c0             	setne  %al
- 257:	83 45 0c 01          	addl   $0x1,0xc(%ebp)
- 25b:	84 c0                	test   %al,%al
- 25d:	75 d0                	jne    22f <match+0x27>
-  return 0;
- 25f:	b8 00 00 00 00       	mov    $0x0,%eax
-}
- 264:	c9                   	leave  
- 265:	c3                   	ret    
-
-00000266 <matchhere>:
-
-// matchhere: search for re at beginning of text
-int matchhere(char *re, char *text)
-{
- 266:	55                   	push   %ebp
- 267:	89 e5                	mov    %esp,%ebp
- 269:	83 ec 18             	sub    $0x18,%esp
-  if(re[0] == '\0')
- 26c:	8b 45 08             	mov    0x8(%ebp),%eax
- 26f:	0f b6 00             	movzbl (%eax),%eax
- 272:	84 c0                	test   %al,%al
- 274:	75 0a                	jne    280 <matchhere+0x1a>
-    return 1;
- 276:	b8 01 00 00 00       	mov    $0x1,%eax
- 27b:	e9 9b 00 00 00       	jmp    31b <matchhere+0xb5>
-  if(re[1] == '*')
- 280:	8b 45 08             	mov    0x8(%ebp),%eax
- 283:	83 c0 01             	add    $0x1,%eax
- 286:	0f b6 00             	movzbl (%eax),%eax
- 289:	3c 2a                	cmp    $0x2a,%al
- 28b:	75 24                	jne    2b1 <matchhere+0x4b>
-    return matchstar(re[0], re+2, text);
- 28d:	8b 45 08             	mov    0x8(%ebp),%eax
- 290:	8d 48 02             	lea    0x2(%eax),%ecx
- 293:	8b 45 08             	mov    0x8(%ebp),%eax
- 296:	0f b6 00             	movzbl (%eax),%eax
- 299:	0f be c0             	movsbl %al,%eax
- 29c:	8b 55 0c             	mov    0xc(%ebp),%edx
- 29f:	89 54 24 08          	mov    %edx,0x8(%esp)
- 2a3:	89 4c 24 04          	mov    %ecx,0x4(%esp)
- 2a7:	89 04 24             	mov    %eax,(%esp)
- 2aa:	e8 6e 00 00 00       	call   31d <matchstar>
- 2af:	eb 6a                	jmp    31b <matchhere+0xb5>
-  if(re[0] == '$' && re[1] == '\0')
- 2b1:	8b 45 08             	mov    0x8(%ebp),%eax
- 2b4:	0f b6 00             	movzbl (%eax),%eax
- 2b7:	3c 24                	cmp    $0x24,%al
- 2b9:	75 1d                	jne    2d8 <matchhere+0x72>
- 2bb:	8b 45 08             	mov    0x8(%ebp),%eax
- 2be:	83 c0 01             	add    $0x1,%eax
- 2c1:	0f b6 00             	movzbl (%eax),%eax
- 2c4:	84 c0                	test   %al,%al
- 2c6:	75 10                	jne    2d8 <matchhere+0x72>
-    return *text == '\0';
- 2c8:	8b 45 0c             	mov    0xc(%ebp),%eax
- 2cb:	0f b6 00             	movzbl (%eax),%eax
- 2ce:	84 c0                	test   %al,%al
- 2d0:	0f 94 c0             	sete   %al
- 2d3:	0f b6 c0             	movzbl %al,%eax
- 2d6:	eb 43                	jmp    31b <matchhere+0xb5>
-  if(*text!='\0' && (re[0]=='.' || re[0]==*text))
- 2d8:	8b 45 0c             	mov    0xc(%ebp),%eax
- 2db:	0f b6 00             	movzbl (%eax),%eax
- 2de:	84 c0                	test   %al,%al
- 2e0:	74 34                	je     316 <matchhere+0xb0>
- 2e2:	8b 45 08             	mov    0x8(%ebp),%eax
- 2e5:	0f b6 00             	movzbl (%eax),%eax
- 2e8:	3c 2e                	cmp    $0x2e,%al
- 2ea:	74 10                	je     2fc <matchhere+0x96>
- 2ec:	8b 45 08             	mov    0x8(%ebp),%eax
- 2ef:	0f b6 10             	movzbl (%eax),%edx
- 2f2:	8b 45 0c             	mov    0xc(%ebp),%eax
- 2f5:	0f b6 00             	movzbl (%eax),%eax
- 2f8:	38 c2                	cmp    %al,%dl
- 2fa:	75 1a                	jne    316 <matchhere+0xb0>
-    return matchhere(re+1, text+1);
- 2fc:	8b 45 0c             	mov    0xc(%ebp),%eax
- 2ff:	8d 50 01             	lea    0x1(%eax),%edx
- 302:	8b 45 08             	mov    0x8(%ebp),%eax
- 305:	83 c0 01             	add    $0x1,%eax
- 308:	89 54 24 04          	mov    %edx,0x4(%esp)
- 30c:	89 04 24             	mov    %eax,(%esp)
- 30f:	e8 52 ff ff ff       	call   266 <matchhere>
- 314:	eb 05                	jmp    31b <matchhere+0xb5>
-  return 0;
- 316:	b8 00 00 00 00       	mov    $0x0,%eax
-}
- 31b:	c9                   	leave  
- 31c:	c3                   	ret    
-
-0000031d <matchstar>:
-
-// matchstar: search for c*re at beginning of text
-int matchstar(int c, char *re, char *text)
-{
- 31d:	55                   	push   %ebp
- 31e:	89 e5                	mov    %esp,%ebp
- 320:	83 ec 18             	sub    $0x18,%esp
-  do{  // a * matches zero or more instances
-    if(matchhere(re, text))
- 323:	8b 45 10             	mov    0x10(%ebp),%eax
- 326:	89 44 24 04          	mov    %eax,0x4(%esp)
- 32a:	8b 45 0c             	mov    0xc(%ebp),%eax
- 32d:	89 04 24             	mov    %eax,(%esp)
- 330:	e8 31 ff ff ff       	call   266 <matchhere>
- 335:	85 c0                	test   %eax,%eax
- 337:	74 07                	je     340 <matchstar+0x23>
-      return 1;
- 339:	b8 01 00 00 00       	mov    $0x1,%eax
- 33e:	eb 2c                	jmp    36c <matchstar+0x4f>
-  }while(*text!='\0' && (*text++==c || c=='.'));
- 340:	8b 45 10             	mov    0x10(%ebp),%eax
- 343:	0f b6 00             	movzbl (%eax),%eax
- 346:	84 c0                	test   %al,%al
- 348:	74 1d                	je     367 <matchstar+0x4a>
- 34a:	8b 45 10             	mov    0x10(%ebp),%eax
- 34d:	0f b6 00             	movzbl (%eax),%eax
- 350:	0f be c0             	movsbl %al,%eax
- 353:	3b 45 08             	cmp    0x8(%ebp),%eax
- 356:	0f 94 c0             	sete   %al
- 359:	83 45 10 01          	addl   $0x1,0x10(%ebp)
- 35d:	84 c0                	test   %al,%al
- 35f:	75 c2                	jne    323 <matchstar+0x6>
- 361:	83 7d 08 2e          	cmpl   $0x2e,0x8(%ebp)
- 365:	74 bc                	je     323 <matchstar+0x6>
-  return 0;
- 367:	b8 00 00 00 00       	mov    $0x0,%eax
-}
- 36c:	c9                   	leave  
- 36d:	c3                   	ret    
- 36e:	90                   	nop
- 36f:	90                   	nop
-
-00000370 <stosb>:
-               "cc");
-}
-
-static inline void
-stosb(void *addr, int data, int cnt)
-{
- 370:	55                   	push   %ebp
- 371:	89 e5                	mov    %esp,%ebp
- 373:	57                   	push   %edi
- 374:	53                   	push   %ebx
-  asm volatile("cld; rep stosb" :
- 375:	8b 4d 08             	mov    0x8(%ebp),%ecx
- 378:	8b 55 10             	mov    0x10(%ebp),%edx
- 37b:	8b 45 0c             	mov    0xc(%ebp),%eax
- 37e:	89 cb                	mov    %ecx,%ebx
- 380:	89 df                	mov    %ebx,%edi
- 382:	89 d1                	mov    %edx,%ecx
- 384:	fc                   	cld    
- 385:	f3 aa                	rep stos %al,%es:(%edi)
- 387:	89 ca                	mov    %ecx,%edx
- 389:	89 fb                	mov    %edi,%ebx
- 38b:	89 5d 08             	mov    %ebx,0x8(%ebp)
- 38e:	89 55 10             	mov    %edx,0x10(%ebp)
-               "=D" (addr), "=c" (cnt) :
-               "0" (addr), "1" (cnt), "a" (data) :
-               "memory", "cc");
-}
- 391:	5b                   	pop    %ebx
- 392:	5f                   	pop    %edi
- 393:	5d                   	pop    %ebp
- 394:	c3                   	ret    
-
-00000395 <strcpy>:
-#include "user.h"
-#include "x86.h"
-
-char*
-strcpy(char *s, char *t)
-{
- 395:	55                   	push   %ebp
- 396:	89 e5                	mov    %esp,%ebp
- 398:	83 ec 10             	sub    $0x10,%esp
-  char *os;
-
-  os = s;
- 39b:	8b 45 08             	mov    0x8(%ebp),%eax
- 39e:	89 45 fc             	mov    %eax,-0x4(%ebp)
-  while((*s++ = *t++) != 0)
- 3a1:	90                   	nop
- 3a2:	8b 45 0c             	mov    0xc(%ebp),%eax
- 3a5:	0f b6 10             	movzbl (%eax),%edx
- 3a8:	8b 45 08             	mov    0x8(%ebp),%eax
- 3ab:	88 10                	mov    %dl,(%eax)
- 3ad:	8b 45 08             	mov    0x8(%ebp),%eax
- 3b0:	0f b6 00             	movzbl (%eax),%eax
- 3b3:	84 c0                	test   %al,%al
- 3b5:	0f 95 c0             	setne  %al
- 3b8:	83 45 08 01          	addl   $0x1,0x8(%ebp)
- 3bc:	83 45 0c 01          	addl   $0x1,0xc(%ebp)
- 3c0:	84 c0                	test   %al,%al
- 3c2:	75 de                	jne    3a2 <strcpy+0xd>
-    ;
-  return os;
- 3c4:	8b 45 fc             	mov    -0x4(%ebp),%eax
-}
- 3c7:	c9                   	leave  
- 3c8:	c3                   	ret    
-
-000003c9 <strcmp>:
-
-int
-strcmp(const char *p, const char *q)
-{
- 3c9:	55                   	push   %ebp
- 3ca:	89 e5                	mov    %esp,%ebp
-  while(*p && *p == *q)
- 3cc:	eb 08                	jmp    3d6 <strcmp+0xd>
-    p++, q++;
- 3ce:	83 45 08 01          	addl   $0x1,0x8(%ebp)
- 3d2:	83 45 0c 01          	addl   $0x1,0xc(%ebp)
-}
-
-int
-strcmp(const char *p, const char *q)
-{
-  while(*p && *p == *q)
- 3d6:	8b 45 08             	mov    0x8(%ebp),%eax
- 3d9:	0f b6 00             	movzbl (%eax),%eax
- 3dc:	84 c0                	test   %al,%al
- 3de:	74 10                	je     3f0 <strcmp+0x27>
- 3e0:	8b 45 08             	mov    0x8(%ebp),%eax
- 3e3:	0f b6 10             	movzbl (%eax),%edx
- 3e6:	8b 45 0c             	mov    0xc(%ebp),%eax
- 3e9:	0f b6 00             	movzbl (%eax),%eax
- 3ec:	38 c2                	cmp    %al,%dl
- 3ee:	74 de                	je     3ce <strcmp+0x5>
-    p++, q++;
-  return (uchar)*p - (uchar)*q;
- 3f0:	8b 45 08             	mov    0x8(%ebp),%eax
- 3f3:	0f b6 00             	movzbl (%eax),%eax
- 3f6:	0f b6 d0             	movzbl %al,%edx
- 3f9:	8b 45 0c             	mov    0xc(%ebp),%eax
- 3fc:	0f b6 00             	movzbl (%eax),%eax
- 3ff:	0f b6 c0             	movzbl %al,%eax
- 402:	89 d1                	mov    %edx,%ecx
- 404:	29 c1                	sub    %eax,%ecx
- 406:	89 c8                	mov    %ecx,%eax
-}
- 408:	5d                   	pop    %ebp
- 409:	c3                   	ret    
-
-0000040a <strlen>:
-
-uint
-strlen(char *s)
-{
- 40a:	55                   	push   %ebp
- 40b:	89 e5                	mov    %esp,%ebp
- 40d:	83 ec 10             	sub    $0x10,%esp
-  int n;
-
-  for(n = 0; s[n]; n++)
- 410:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
- 417:	eb 04                	jmp    41d <strlen+0x13>
- 419:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
- 41d:	8b 45 fc             	mov    -0x4(%ebp),%eax
- 420:	03 45 08             	add    0x8(%ebp),%eax
- 423:	0f b6 00             	movzbl (%eax),%eax
- 426:	84 c0                	test   %al,%al
- 428:	75 ef                	jne    419 <strlen+0xf>
-    ;
-  return n;
- 42a:	8b 45 fc             	mov    -0x4(%ebp),%eax
-}
- 42d:	c9                   	leave  
- 42e:	c3                   	ret    
-
-0000042f <memset>:
-
-void*
-memset(void *dst, int c, uint n)
-{
- 42f:	55                   	push   %ebp
- 430:	89 e5                	mov    %esp,%ebp
- 432:	83 ec 0c             	sub    $0xc,%esp
-  stosb(dst, c, n);
- 435:	8b 45 10             	mov    0x10(%ebp),%eax
- 438:	89 44 24 08          	mov    %eax,0x8(%esp)
- 43c:	8b 45 0c             	mov    0xc(%ebp),%eax
- 43f:	89 44 24 04          	mov    %eax,0x4(%esp)
- 443:	8b 45 08             	mov    0x8(%ebp),%eax
- 446:	89 04 24             	mov    %eax,(%esp)
- 449:	e8 22 ff ff ff       	call   370 <stosb>
-  return dst;
- 44e:	8b 45 08             	mov    0x8(%ebp),%eax
-}
- 451:	c9                   	leave  
- 452:	c3                   	ret    
-
-00000453 <strchr>:
-
-char*
-strchr(const char *s, char c)
-{
- 453:	55                   	push   %ebp
- 454:	89 e5                	mov    %esp,%ebp
- 456:	83 ec 04             	sub    $0x4,%esp
- 459:	8b 45 0c             	mov    0xc(%ebp),%eax
- 45c:	88 45 fc             	mov    %al,-0x4(%ebp)
-  for(; *s; s++)
- 45f:	eb 14                	jmp    475 <strchr+0x22>
-    if(*s == c)
- 461:	8b 45 08             	mov    0x8(%ebp),%eax
- 464:	0f b6 00             	movzbl (%eax),%eax
- 467:	3a 45 fc             	cmp    -0x4(%ebp),%al
- 46a:	75 05                	jne    471 <strchr+0x1e>
-      return (char*)s;
- 46c:	8b 45 08             	mov    0x8(%ebp),%eax
- 46f:	eb 13                	jmp    484 <strchr+0x31>
-}
-
-char*
-strchr(const char *s, char c)
-{
-  for(; *s; s++)
- 471:	83 45 08 01          	addl   $0x1,0x8(%ebp)
- 475:	8b 45 08             	mov    0x8(%ebp),%eax
- 478:	0f b6 00             	movzbl (%eax),%eax
- 47b:	84 c0                	test   %al,%al
- 47d:	75 e2                	jne    461 <strchr+0xe>
-    if(*s == c)
-      return (char*)s;
-  return 0;
- 47f:	b8 00 00 00 00       	mov    $0x0,%eax
-}
- 484:	c9                   	leave  
- 485:	c3                   	ret    
-
-00000486 <gets>:
-
-char*
-gets(char *buf, int max)
-{
- 486:	55                   	push   %ebp
- 487:	89 e5                	mov    %esp,%ebp
- 489:	83 ec 28             	sub    $0x28,%esp
-  int i, cc;
-  char c;
-
-  for(i=0; i+1 < max; ){
- 48c:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
- 493:	eb 44                	jmp    4d9 <gets+0x53>
-    cc = read(0, &c, 1);
- 495:	c7 44 24 08 01 00 00 	movl   $0x1,0x8(%esp)
- 49c:	00 
- 49d:	8d 45 ef             	lea    -0x11(%ebp),%eax
- 4a0:	89 44 24 04          	mov    %eax,0x4(%esp)
- 4a4:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
- 4ab:	e8 3c 01 00 00       	call   5ec <read>
- 4b0:	89 45 f0             	mov    %eax,-0x10(%ebp)
-    if(cc < 1)
- 4b3:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
- 4b7:	7e 2d                	jle    4e6 <gets+0x60>
-      break;
-    buf[i++] = c;
- 4b9:	8b 45 f4             	mov    -0xc(%ebp),%eax
- 4bc:	03 45 08             	add    0x8(%ebp),%eax
- 4bf:	0f b6 55 ef          	movzbl -0x11(%ebp),%edx
- 4c3:	88 10                	mov    %dl,(%eax)
- 4c5:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
-    if(c == '\n' || c == '\r')
- 4c9:	0f b6 45 ef          	movzbl -0x11(%ebp),%eax
- 4cd:	3c 0a                	cmp    $0xa,%al
- 4cf:	74 16                	je     4e7 <gets+0x61>
- 4d1:	0f b6 45 ef          	movzbl -0x11(%ebp),%eax
- 4d5:	3c 0d                	cmp    $0xd,%al
- 4d7:	74 0e                	je     4e7 <gets+0x61>
-gets(char *buf, int max)
-{
-  int i, cc;
-  char c;
-
-  for(i=0; i+1 < max; ){
- 4d9:	8b 45 f4             	mov    -0xc(%ebp),%eax
- 4dc:	83 c0 01             	add    $0x1,%eax
- 4df:	3b 45 0c             	cmp    0xc(%ebp),%eax
- 4e2:	7c b1                	jl     495 <gets+0xf>
- 4e4:	eb 01                	jmp    4e7 <gets+0x61>
-    cc = read(0, &c, 1);
-    if(cc < 1)
-      break;
- 4e6:	90                   	nop
-    buf[i++] = c;
-    if(c == '\n' || c == '\r')
-      break;
-  }
-  buf[i] = '\0';
- 4e7:	8b 45 f4             	mov    -0xc(%ebp),%eax
- 4ea:	03 45 08             	add    0x8(%ebp),%eax
- 4ed:	c6 00 00             	movb   $0x0,(%eax)
-  return buf;
- 4f0:	8b 45 08             	mov    0x8(%ebp),%eax
-}
- 4f3:	c9                   	leave  
- 4f4:	c3                   	ret    
-
-000004f5 <stat>:
-
-int
-stat(char *n, struct stat *st)
-{
- 4f5:	55                   	push   %ebp
- 4f6:	89 e5                	mov    %esp,%ebp
- 4f8:	83 ec 28             	sub    $0x28,%esp
-  int fd;
-  int r;
-
-  fd = open(n, O_RDONLY);
- 4fb:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
- 502:	00 
- 503:	8b 45 08             	mov    0x8(%ebp),%eax
- 506:	89 04 24             	mov    %eax,(%esp)
- 509:	e8 06 01 00 00       	call   614 <open>
- 50e:	89 45 f4             	mov    %eax,-0xc(%ebp)
-  if(fd < 0)
- 511:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
- 515:	79 07                	jns    51e <stat+0x29>
-    return -1;
- 517:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
- 51c:	eb 23                	jmp    541 <stat+0x4c>
-  r = fstat(fd, st);
- 51e:	8b 45 0c             	mov    0xc(%ebp),%eax
- 521:	89 44 24 04          	mov    %eax,0x4(%esp)
- 525:	8b 45 f4             	mov    -0xc(%ebp),%eax
- 528:	89 04 24             	mov    %eax,(%esp)
- 52b:	e8 fc 00 00 00       	call   62c <fstat>
- 530:	89 45 f0             	mov    %eax,-0x10(%ebp)
-  close(fd);
- 533:	8b 45 f4             	mov    -0xc(%ebp),%eax
- 536:	89 04 24             	mov    %eax,(%esp)
- 539:	e8 be 00 00 00       	call   5fc <close>
-  return r;
- 53e:	8b 45 f0             	mov    -0x10(%ebp),%eax
-}
- 541:	c9                   	leave  
- 542:	c3                   	ret    
-
-00000543 <atoi>:
-
-int
-atoi(const char *s)
-{
- 543:	55                   	push   %ebp
- 544:	89 e5                	mov    %esp,%ebp
- 546:	83 ec 10             	sub    $0x10,%esp
-  int n;
-
-  n = 0;
- 549:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
-  while('0' <= *s && *s <= '9')
- 550:	eb 23                	jmp    575 <atoi+0x32>
-    n = n*10 + *s++ - '0';
- 552:	8b 55 fc             	mov    -0x4(%ebp),%edx
- 555:	89 d0                	mov    %edx,%eax
- 557:	c1 e0 02             	shl    $0x2,%eax
- 55a:	01 d0                	add    %edx,%eax
- 55c:	01 c0                	add    %eax,%eax
- 55e:	89 c2                	mov    %eax,%edx
- 560:	8b 45 08             	mov    0x8(%ebp),%eax
- 563:	0f b6 00             	movzbl (%eax),%eax
- 566:	0f be c0             	movsbl %al,%eax
- 569:	01 d0                	add    %edx,%eax
- 56b:	83 e8 30             	sub    $0x30,%eax
- 56e:	89 45 fc             	mov    %eax,-0x4(%ebp)
- 571:	83 45 08 01          	addl   $0x1,0x8(%ebp)
-atoi(const char *s)
-{
-  int n;
-
-  n = 0;
-  while('0' <= *s && *s <= '9')
- 575:	8b 45 08             	mov    0x8(%ebp),%eax
- 578:	0f b6 00             	movzbl (%eax),%eax
- 57b:	3c 2f                	cmp    $0x2f,%al
- 57d:	7e 0a                	jle    589 <atoi+0x46>
- 57f:	8b 45 08             	mov    0x8(%ebp),%eax
- 582:	0f b6 00             	movzbl (%eax),%eax
- 585:	3c 39                	cmp    $0x39,%al
- 587:	7e c9                	jle    552 <atoi+0xf>
-    n = n*10 + *s++ - '0';
-  return n;
- 589:	8b 45 fc             	mov    -0x4(%ebp),%eax
-}
- 58c:	c9                   	leave  
- 58d:	c3                   	ret    
-
-0000058e <memmove>:
-
-void*
-memmove(void *vdst, void *vsrc, int n)
-{
- 58e:	55                   	push   %ebp
- 58f:	89 e5                	mov    %esp,%ebp
- 591:	83 ec 10             	sub    $0x10,%esp
-  char *dst, *src;
-  
-  dst = vdst;
- 594:	8b 45 08             	mov    0x8(%ebp),%eax
- 597:	89 45 fc             	mov    %eax,-0x4(%ebp)
-  src = vsrc;
- 59a:	8b 45 0c             	mov    0xc(%ebp),%eax
- 59d:	89 45 f8             	mov    %eax,-0x8(%ebp)
-  while(n-- > 0)
- 5a0:	eb 13                	jmp    5b5 <memmove+0x27>
-    *dst++ = *src++;
- 5a2:	8b 45 f8             	mov    -0x8(%ebp),%eax
- 5a5:	0f b6 10             	movzbl (%eax),%edx
- 5a8:	8b 45 fc             	mov    -0x4(%ebp),%eax
- 5ab:	88 10                	mov    %dl,(%eax)
- 5ad:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
- 5b1:	83 45 f8 01          	addl   $0x1,-0x8(%ebp)
-{
-  char *dst, *src;
-  
-  dst = vdst;
-  src = vsrc;
-  while(n-- > 0)
- 5b5:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
- 5b9:	0f 9f c0             	setg   %al
- 5bc:	83 6d 10 01          	subl   $0x1,0x10(%ebp)
- 5c0:	84 c0                	test   %al,%al
- 5c2:	75 de                	jne    5a2 <memmove+0x14>
-    *dst++ = *src++;
-  return vdst;
- 5c4:	8b 45 08             	mov    0x8(%ebp),%eax
-}
- 5c7:	c9                   	leave  
- 5c8:	c3                   	ret    
- 5c9:	90                   	nop
- 5ca:	90                   	nop
- 5cb:	90                   	nop
-
-000005cc <fork>:
-  name: \
-    movl $SYS_ ## name, %eax; \
-    int $T_SYSCALL; \
-    ret
-
-SYSCALL(fork)
- 5cc:	b8 01 00 00 00       	mov    $0x1,%eax
- 5d1:	cd 40                	int    $0x40
- 5d3:	c3                   	ret    
-
-000005d4 <exit>:
-SYSCALL(exit)
- 5d4:	b8 02 00 00 00       	mov    $0x2,%eax
- 5d9:	cd 40                	int    $0x40
- 5db:	c3                   	ret    
-
-000005dc <wait>:
-SYSCALL(wait)
- 5dc:	b8 03 00 00 00       	mov    $0x3,%eax
- 5e1:	cd 40                	int    $0x40
- 5e3:	c3                   	ret    
-
-000005e4 <pipe>:
-SYSCALL(pipe)
- 5e4:	b8 04 00 00 00       	mov    $0x4,%eax
- 5e9:	cd 40                	int    $0x40
- 5eb:	c3                   	ret    
-
-000005ec <read>:
-SYSCALL(read)
- 5ec:	b8 05 00 00 00       	mov    $0x5,%eax
- 5f1:	cd 40                	int    $0x40
- 5f3:	c3                   	ret    
-
-000005f4 <write>:
-SYSCALL(write)
- 5f4:	b8 10 00 00 00       	mov    $0x10,%eax
- 5f9:	cd 40                	int    $0x40
- 5fb:	c3                   	ret    
-
-000005fc <close>:
-SYSCALL(close)
- 5fc:	b8 15 00 00 00       	mov    $0x15,%eax
- 601:	cd 40                	int    $0x40
- 603:	c3                   	ret    
-
-00000604 <kill>:
-SYSCALL(kill)
- 604:	b8 06 00 00 00       	mov    $0x6,%eax
- 609:	cd 40                	int    $0x40
- 60b:	c3                   	ret    
-
-0000060c <exec>:
-SYSCALL(exec)
- 60c:	b8 07 00 00 00       	mov    $0x7,%eax
- 611:	cd 40                	int    $0x40
- 613:	c3                   	ret    
-
-00000614 <open>:
-SYSCALL(open)
- 614:	b8 0f 00 00 00       	mov    $0xf,%eax
- 619:	cd 40                	int    $0x40
- 61b:	c3                   	ret    
-
-0000061c <mknod>:
-SYSCALL(mknod)
- 61c:	b8 11 00 00 00       	mov    $0x11,%eax
- 621:	cd 40                	int    $0x40
- 623:	c3                   	ret    
-
-00000624 <unlink>:
-SYSCALL(unlink)
- 624:	b8 12 00 00 00       	mov    $0x12,%eax
- 629:	cd 40                	int    $0x40
- 62b:	c3                   	ret    
-
-0000062c <fstat>:
-SYSCALL(fstat)
- 62c:	b8 08 00 00 00       	mov    $0x8,%eax
- 631:	cd 40                	int    $0x40
- 633:	c3                   	ret    
-
-00000634 <link>:
-SYSCALL(link)
- 634:	b8 13 00 00 00       	mov    $0x13,%eax
- 639:	cd 40                	int    $0x40
- 63b:	c3                   	ret    
-
-0000063c <mkdir>:
-SYSCALL(mkdir)
- 63c:	b8 14 00 00 00       	mov    $0x14,%eax
- 641:	cd 40                	int    $0x40
- 643:	c3                   	ret    
-
-00000644 <chdir>:
-SYSCALL(chdir)
- 644:	b8 09 00 00 00       	mov    $0x9,%eax
- 649:	cd 40                	int    $0x40
- 64b:	c3                   	ret    
-
-0000064c <dup>:
-SYSCALL(dup)
- 64c:	b8 0a 00 00 00       	mov    $0xa,%eax
- 651:	cd 40                	int    $0x40
- 653:	c3                   	ret    
-
-00000654 <getpid>:
-SYSCALL(getpid)
- 654:	b8 0b 00 00 00       	mov    $0xb,%eax
- 659:	cd 40                	int    $0x40
- 65b:	c3                   	ret    
-
-0000065c <sbrk>:
-SYSCALL(sbrk)
- 65c:	b8 0c 00 00 00       	mov    $0xc,%eax
- 661:	cd 40                	int    $0x40
- 663:	c3                   	ret    
-
-00000664 <sleep>:
-SYSCALL(sleep)
- 664:	b8 0d 00 00 00       	mov    $0xd,%eax
- 669:	cd 40                	int    $0x40
- 66b:	c3                   	ret    
-
-0000066c <uptime>:
-SYSCALL(uptime)
- 66c:	b8 0e 00 00 00       	mov    $0xe,%eax
- 671:	cd 40                	int    $0x40
- 673:	c3                   	ret    
-
-00000674 <waitpid>:
-SYSCALL(waitpid)
- 674:	b8 16 00 00 00       	mov    $0x16,%eax
- 679:	cd 40                	int    $0x40
- 67b:	c3                   	ret    
-
-0000067c <wait_stat>:
-SYSCALL(wait_stat)
- 67c:	b8 17 00 00 00       	mov    $0x17,%eax
- 681:	cd 40                	int    $0x40
- 683:	c3                   	ret    
-
-00000684 <list_pgroup>:
-SYSCALL(list_pgroup)
- 684:	b8 18 00 00 00       	mov    $0x18,%eax
- 689:	cd 40                	int    $0x40
- 68b:	c3                   	ret    
-
-0000068c <foreground>:
-SYSCALL(foreground)
- 68c:	b8 19 00 00 00       	mov    $0x19,%eax
- 691:	cd 40                	int    $0x40
- 693:	c3                   	ret    
-
-00000694 <set_priority>:
-SYSCALL(set_priority)
- 694:	b8 1a 00 00 00       	mov    $0x1a,%eax
- 699:	cd 40                	int    $0x40
- 69b:	c3                   	ret    
-
-0000069c <putc>:
-#include "stat.h"
-#include "user.h"
-
-static void
-putc(int fd, char c)
-{
- 69c:	55                   	push   %ebp
- 69d:	89 e5                	mov    %esp,%ebp
- 69f:	83 ec 28             	sub    $0x28,%esp
- 6a2:	8b 45 0c             	mov    0xc(%ebp),%eax
- 6a5:	88 45 f4             	mov    %al,-0xc(%ebp)
-  write(fd, &c, 1);
- 6a8:	c7 44 24 08 01 00 00 	movl   $0x1,0x8(%esp)
- 6af:	00 
- 6b0:	8d 45 f4             	lea    -0xc(%ebp),%eax
- 6b3:	89 44 24 04          	mov    %eax,0x4(%esp)
- 6b7:	8b 45 08             	mov    0x8(%ebp),%eax
- 6ba:	89 04 24             	mov    %eax,(%esp)
- 6bd:	e8 32 ff ff ff       	call   5f4 <write>
-}
- 6c2:	c9                   	leave  
- 6c3:	c3                   	ret    
-
-000006c4 <printint>:
-
-static void
-printint(int fd, int xx, int base, int sgn)
-{
- 6c4:	55                   	push   %ebp
- 6c5:	89 e5                	mov    %esp,%ebp
- 6c7:	83 ec 48             	sub    $0x48,%esp
-  static char digits[] = "0123456789ABCDEF";
-  char buf[16];
-  int i, neg;
-  uint x;
-
-  neg = 0;
- 6ca:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
-  if(sgn && xx < 0){
- 6d1:	83 7d 14 00          	cmpl   $0x0,0x14(%ebp)
- 6d5:	74 17                	je     6ee <printint+0x2a>
- 6d7:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
- 6db:	79 11                	jns    6ee <printint+0x2a>
-    neg = 1;
- 6dd:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
-    x = -xx;
- 6e4:	8b 45 0c             	mov    0xc(%ebp),%eax
- 6e7:	f7 d8                	neg    %eax
- 6e9:	89 45 ec             	mov    %eax,-0x14(%ebp)
- 6ec:	eb 06                	jmp    6f4 <printint+0x30>
-  } else {
-    x = xx;
- 6ee:	8b 45 0c             	mov    0xc(%ebp),%eax
- 6f1:	89 45 ec             	mov    %eax,-0x14(%ebp)
-  }
-
-  i = 0;
- 6f4:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
-  do{
-    buf[i++] = digits[x % base];
- 6fb:	8b 4d 10             	mov    0x10(%ebp),%ecx
- 6fe:	8b 45 ec             	mov    -0x14(%ebp),%eax
- 701:	ba 00 00 00 00       	mov    $0x0,%edx
- 706:	f7 f1                	div    %ecx
- 708:	89 d0                	mov    %edx,%eax
- 70a:	0f b6 90 34 0e 00 00 	movzbl 0xe34(%eax),%edx
- 711:	8d 45 dc             	lea    -0x24(%ebp),%eax
- 714:	03 45 f4             	add    -0xc(%ebp),%eax
- 717:	88 10                	mov    %dl,(%eax)
- 719:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
-  }while((x /= base) != 0);
- 71d:	8b 55 10             	mov    0x10(%ebp),%edx
- 720:	89 55 d4             	mov    %edx,-0x2c(%ebp)
- 723:	8b 45 ec             	mov    -0x14(%ebp),%eax
- 726:	ba 00 00 00 00       	mov    $0x0,%edx
- 72b:	f7 75 d4             	divl   -0x2c(%ebp)
- 72e:	89 45 ec             	mov    %eax,-0x14(%ebp)
- 731:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
- 735:	75 c4                	jne    6fb <printint+0x37>
-  if(neg)
- 737:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
- 73b:	74 2a                	je     767 <printint+0xa3>
-    buf[i++] = '-';
- 73d:	8d 45 dc             	lea    -0x24(%ebp),%eax
- 740:	03 45 f4             	add    -0xc(%ebp),%eax
- 743:	c6 00 2d             	movb   $0x2d,(%eax)
- 746:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
-
-  while(--i >= 0)
- 74a:	eb 1b                	jmp    767 <printint+0xa3>
-    putc(fd, buf[i]);
- 74c:	8d 45 dc             	lea    -0x24(%ebp),%eax
- 74f:	03 45 f4             	add    -0xc(%ebp),%eax
- 752:	0f b6 00             	movzbl (%eax),%eax
- 755:	0f be c0             	movsbl %al,%eax
- 758:	89 44 24 04          	mov    %eax,0x4(%esp)
- 75c:	8b 45 08             	mov    0x8(%ebp),%eax
- 75f:	89 04 24             	mov    %eax,(%esp)
- 762:	e8 35 ff ff ff       	call   69c <putc>
-    buf[i++] = digits[x % base];
-  }while((x /= base) != 0);
-  if(neg)
-    buf[i++] = '-';
-
-  while(--i >= 0)
- 767:	83 6d f4 01          	subl   $0x1,-0xc(%ebp)
- 76b:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
- 76f:	79 db                	jns    74c <printint+0x88>
-    putc(fd, buf[i]);
-}
- 771:	c9                   	leave  
- 772:	c3                   	ret    
-
-00000773 <printf>:
-
-// Print to the given fd. Only understands %d, %x, %p, %s.
-void
-printf(int fd, char *fmt, ...)
-{
- 773:	55                   	push   %ebp
- 774:	89 e5                	mov    %esp,%ebp
- 776:	83 ec 38             	sub    $0x38,%esp
-  char *s;
-  int c, i, state;
-  uint *ap;
-
-  state = 0;
- 779:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
-  ap = (uint*)(void*)&fmt + 1;
- 780:	8d 45 0c             	lea    0xc(%ebp),%eax
- 783:	83 c0 04             	add    $0x4,%eax
- 786:	89 45 e8             	mov    %eax,-0x18(%ebp)
-  for(i = 0; fmt[i]; i++){
- 789:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
- 790:	e9 7d 01 00 00       	jmp    912 <printf+0x19f>
-    c = fmt[i] & 0xff;
- 795:	8b 55 0c             	mov    0xc(%ebp),%edx
- 798:	8b 45 f0             	mov    -0x10(%ebp),%eax
- 79b:	01 d0                	add    %edx,%eax
- 79d:	0f b6 00             	movzbl (%eax),%eax
- 7a0:	0f be c0             	movsbl %al,%eax
- 7a3:	25 ff 00 00 00       	and    $0xff,%eax
- 7a8:	89 45 e4             	mov    %eax,-0x1c(%ebp)
-    if(state == 0){
- 7ab:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
- 7af:	75 2c                	jne    7dd <printf+0x6a>
-      if(c == '%'){
- 7b1:	83 7d e4 25          	cmpl   $0x25,-0x1c(%ebp)
- 7b5:	75 0c                	jne    7c3 <printf+0x50>
-        state = '%';
- 7b7:	c7 45 ec 25 00 00 00 	movl   $0x25,-0x14(%ebp)
- 7be:	e9 4b 01 00 00       	jmp    90e <printf+0x19b>
-      } else {
-        putc(fd, c);
- 7c3:	8b 45 e4             	mov    -0x1c(%ebp),%eax
- 7c6:	0f be c0             	movsbl %al,%eax
- 7c9:	89 44 24 04          	mov    %eax,0x4(%esp)
- 7cd:	8b 45 08             	mov    0x8(%ebp),%eax
- 7d0:	89 04 24             	mov    %eax,(%esp)
- 7d3:	e8 c4 fe ff ff       	call   69c <putc>
- 7d8:	e9 31 01 00 00       	jmp    90e <printf+0x19b>
-      }
-    } else if(state == '%'){
- 7dd:	83 7d ec 25          	cmpl   $0x25,-0x14(%ebp)
- 7e1:	0f 85 27 01 00 00    	jne    90e <printf+0x19b>
-      if(c == 'd'){
- 7e7:	83 7d e4 64          	cmpl   $0x64,-0x1c(%ebp)
- 7eb:	75 2d                	jne    81a <printf+0xa7>
-        printint(fd, *ap, 10, 1);
- 7ed:	8b 45 e8             	mov    -0x18(%ebp),%eax
- 7f0:	8b 00                	mov    (%eax),%eax
- 7f2:	c7 44 24 0c 01 00 00 	movl   $0x1,0xc(%esp)
- 7f9:	00 
- 7fa:	c7 44 24 08 0a 00 00 	movl   $0xa,0x8(%esp)
- 801:	00 
- 802:	89 44 24 04          	mov    %eax,0x4(%esp)
- 806:	8b 45 08             	mov    0x8(%ebp),%eax
- 809:	89 04 24             	mov    %eax,(%esp)
- 80c:	e8 b3 fe ff ff       	call   6c4 <printint>
-        ap++;
- 811:	83 45 e8 04          	addl   $0x4,-0x18(%ebp)
- 815:	e9 ed 00 00 00       	jmp    907 <printf+0x194>
-      } else if(c == 'x' || c == 'p'){
- 81a:	83 7d e4 78          	cmpl   $0x78,-0x1c(%ebp)
- 81e:	74 06                	je     826 <printf+0xb3>
- 820:	83 7d e4 70          	cmpl   $0x70,-0x1c(%ebp)
- 824:	75 2d                	jne    853 <printf+0xe0>
-        printint(fd, *ap, 16, 0);
- 826:	8b 45 e8             	mov    -0x18(%ebp),%eax
- 829:	8b 00                	mov    (%eax),%eax
- 82b:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
- 832:	00 
- 833:	c7 44 24 08 10 00 00 	movl   $0x10,0x8(%esp)
- 83a:	00 
- 83b:	89 44 24 04          	mov    %eax,0x4(%esp)
- 83f:	8b 45 08             	mov    0x8(%ebp),%eax
- 842:	89 04 24             	mov    %eax,(%esp)
- 845:	e8 7a fe ff ff       	call   6c4 <printint>
-        ap++;
- 84a:	83 45 e8 04          	addl   $0x4,-0x18(%ebp)
- 84e:	e9 b4 00 00 00       	jmp    907 <printf+0x194>
-      } else if(c == 's'){
- 853:	83 7d e4 73          	cmpl   $0x73,-0x1c(%ebp)
- 857:	75 46                	jne    89f <printf+0x12c>
-        s = (char*)*ap;
- 859:	8b 45 e8             	mov    -0x18(%ebp),%eax
- 85c:	8b 00                	mov    (%eax),%eax
- 85e:	89 45 f4             	mov    %eax,-0xc(%ebp)
-        ap++;
- 861:	83 45 e8 04          	addl   $0x4,-0x18(%ebp)
-        if(s == 0)
- 865:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
- 869:	75 27                	jne    892 <printf+0x11f>
-          s = "(null)";
- 86b:	c7 45 f4 6e 0b 00 00 	movl   $0xb6e,-0xc(%ebp)
-        while(*s != 0){
- 872:	eb 1e                	jmp    892 <printf+0x11f>
-          putc(fd, *s);
- 874:	8b 45 f4             	mov    -0xc(%ebp),%eax
- 877:	0f b6 00             	movzbl (%eax),%eax
- 87a:	0f be c0             	movsbl %al,%eax
- 87d:	89 44 24 04          	mov    %eax,0x4(%esp)
- 881:	8b 45 08             	mov    0x8(%ebp),%eax
- 884:	89 04 24             	mov    %eax,(%esp)
- 887:	e8 10 fe ff ff       	call   69c <putc>
-          s++;
- 88c:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
- 890:	eb 01                	jmp    893 <printf+0x120>
-      } else if(c == 's'){
-        s = (char*)*ap;
-        ap++;
-        if(s == 0)
-          s = "(null)";
-        while(*s != 0){
- 892:	90                   	nop
- 893:	8b 45 f4             	mov    -0xc(%ebp),%eax
- 896:	0f b6 00             	movzbl (%eax),%eax
- 899:	84 c0                	test   %al,%al
- 89b:	75 d7                	jne    874 <printf+0x101>
- 89d:	eb 68                	jmp    907 <printf+0x194>
-          putc(fd, *s);
-          s++;
-        }
-      } else if(c == 'c'){
- 89f:	83 7d e4 63          	cmpl   $0x63,-0x1c(%ebp)
- 8a3:	75 1d                	jne    8c2 <printf+0x14f>
-        putc(fd, *ap);
- 8a5:	8b 45 e8             	mov    -0x18(%ebp),%eax
- 8a8:	8b 00                	mov    (%eax),%eax
- 8aa:	0f be c0             	movsbl %al,%eax
- 8ad:	89 44 24 04          	mov    %eax,0x4(%esp)
- 8b1:	8b 45 08             	mov    0x8(%ebp),%eax
- 8b4:	89 04 24             	mov    %eax,(%esp)
- 8b7:	e8 e0 fd ff ff       	call   69c <putc>
-        ap++;
- 8bc:	83 45 e8 04          	addl   $0x4,-0x18(%ebp)
- 8c0:	eb 45                	jmp    907 <printf+0x194>
-      } else if(c == '%'){
- 8c2:	83 7d e4 25          	cmpl   $0x25,-0x1c(%ebp)
- 8c6:	75 17                	jne    8df <printf+0x16c>
-        putc(fd, c);
- 8c8:	8b 45 e4             	mov    -0x1c(%ebp),%eax
- 8cb:	0f be c0             	movsbl %al,%eax
- 8ce:	89 44 24 04          	mov    %eax,0x4(%esp)
- 8d2:	8b 45 08             	mov    0x8(%ebp),%eax
- 8d5:	89 04 24             	mov    %eax,(%esp)
- 8d8:	e8 bf fd ff ff       	call   69c <putc>
- 8dd:	eb 28                	jmp    907 <printf+0x194>
-      } else {
-        // Unknown % sequence.  Print it to draw attention.
-        putc(fd, '%');
- 8df:	c7 44 24 04 25 00 00 	movl   $0x25,0x4(%esp)
- 8e6:	00 
- 8e7:	8b 45 08             	mov    0x8(%ebp),%eax
- 8ea:	89 04 24             	mov    %eax,(%esp)
- 8ed:	e8 aa fd ff ff       	call   69c <putc>
-        putc(fd, c);
- 8f2:	8b 45 e4             	mov    -0x1c(%ebp),%eax
- 8f5:	0f be c0             	movsbl %al,%eax
- 8f8:	89 44 24 04          	mov    %eax,0x4(%esp)
- 8fc:	8b 45 08             	mov    0x8(%ebp),%eax
- 8ff:	89 04 24             	mov    %eax,(%esp)
- 902:	e8 95 fd ff ff       	call   69c <putc>
-      }
-      state = 0;
- 907:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
-  int c, i, state;
-  uint *ap;
-
-  state = 0;
-  ap = (uint*)(void*)&fmt + 1;
-  for(i = 0; fmt[i]; i++){
- 90e:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)
- 912:	8b 55 0c             	mov    0xc(%ebp),%edx
- 915:	8b 45 f0             	mov    -0x10(%ebp),%eax
- 918:	01 d0                	add    %edx,%eax
- 91a:	0f b6 00             	movzbl (%eax),%eax
- 91d:	84 c0                	test   %al,%al
- 91f:	0f 85 70 fe ff ff    	jne    795 <printf+0x22>
-        putc(fd, c);
-      }
-      state = 0;
-    }
-  }
-}
- 925:	c9                   	leave  
- 926:	c3                   	ret    
- 927:	90                   	nop
-
-00000928 <free>:
-static Header base;
-static Header *freep;
-
-void
-free(void *ap)
-{
- 928:	55                   	push   %ebp
- 929:	89 e5                	mov    %esp,%ebp
- 92b:	83 ec 10             	sub    $0x10,%esp
-  Header *bp, *p;
-
-  bp = (Header*)ap - 1;
- 92e:	8b 45 08             	mov    0x8(%ebp),%eax
- 931:	83 e8 08             	sub    $0x8,%eax
- 934:	89 45 f8             	mov    %eax,-0x8(%ebp)
-  for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
- 937:	a1 68 0e 00 00       	mov    0xe68,%eax
- 93c:	89 45 fc             	mov    %eax,-0x4(%ebp)
- 93f:	eb 24                	jmp    965 <free+0x3d>
-    if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
- 941:	8b 45 fc             	mov    -0x4(%ebp),%eax
- 944:	8b 00                	mov    (%eax),%eax
- 946:	3b 45 fc             	cmp    -0x4(%ebp),%eax
- 949:	77 12                	ja     95d <free+0x35>
- 94b:	8b 45 f8             	mov    -0x8(%ebp),%eax
- 94e:	3b 45 fc             	cmp    -0x4(%ebp),%eax
- 951:	77 24                	ja     977 <free+0x4f>
- 953:	8b 45 fc             	mov    -0x4(%ebp),%eax
- 956:	8b 00                	mov    (%eax),%eax
- 958:	3b 45 f8             	cmp    -0x8(%ebp),%eax
- 95b:	77 1a                	ja     977 <free+0x4f>
-free(void *ap)
-{
-  Header *bp, *p;
-
-  bp = (Header*)ap - 1;
-  for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
- 95d:	8b 45 fc             	mov    -0x4(%ebp),%eax
- 960:	8b 00                	mov    (%eax),%eax
- 962:	89 45 fc             	mov    %eax,-0x4(%ebp)
- 965:	8b 45 f8             	mov    -0x8(%ebp),%eax
- 968:	3b 45 fc             	cmp    -0x4(%ebp),%eax
- 96b:	76 d4                	jbe    941 <free+0x19>
- 96d:	8b 45 fc             	mov    -0x4(%ebp),%eax
- 970:	8b 00                	mov    (%eax),%eax
- 972:	3b 45 f8             	cmp    -0x8(%ebp),%eax
- 975:	76 ca                	jbe    941 <free+0x19>
-    if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
-      break;
-  if(bp + bp->s.size == p->s.ptr){
- 977:	8b 45 f8             	mov    -0x8(%ebp),%eax
- 97a:	8b 40 04             	mov    0x4(%eax),%eax
- 97d:	c1 e0 03             	shl    $0x3,%eax
- 980:	89 c2                	mov    %eax,%edx
- 982:	03 55 f8             	add    -0x8(%ebp),%edx
- 985:	8b 45 fc             	mov    -0x4(%ebp),%eax
- 988:	8b 00                	mov    (%eax),%eax
- 98a:	39 c2                	cmp    %eax,%edx
- 98c:	75 24                	jne    9b2 <free+0x8a>
-    bp->s.size += p->s.ptr->s.size;
- 98e:	8b 45 f8             	mov    -0x8(%ebp),%eax
- 991:	8b 50 04             	mov    0x4(%eax),%edx
- 994:	8b 45 fc             	mov    -0x4(%ebp),%eax
- 997:	8b 00                	mov    (%eax),%eax
- 999:	8b 40 04             	mov    0x4(%eax),%eax
- 99c:	01 c2                	add    %eax,%edx
- 99e:	8b 45 f8             	mov    -0x8(%ebp),%eax
- 9a1:	89 50 04             	mov    %edx,0x4(%eax)
-    bp->s.ptr = p->s.ptr->s.ptr;
- 9a4:	8b 45 fc             	mov    -0x4(%ebp),%eax
- 9a7:	8b 00                	mov    (%eax),%eax
- 9a9:	8b 10                	mov    (%eax),%edx
- 9ab:	8b 45 f8             	mov    -0x8(%ebp),%eax
- 9ae:	89 10                	mov    %edx,(%eax)
- 9b0:	eb 0a                	jmp    9bc <free+0x94>
-  } else
-    bp->s.ptr = p->s.ptr;
- 9b2:	8b 45 fc             	mov    -0x4(%ebp),%eax
- 9b5:	8b 10                	mov    (%eax),%edx
- 9b7:	8b 45 f8             	mov    -0x8(%ebp),%eax
- 9ba:	89 10                	mov    %edx,(%eax)
-  if(p + p->s.size == bp){
- 9bc:	8b 45 fc             	mov    -0x4(%ebp),%eax
- 9bf:	8b 40 04             	mov    0x4(%eax),%eax
- 9c2:	c1 e0 03             	shl    $0x3,%eax
- 9c5:	03 45 fc             	add    -0x4(%ebp),%eax
- 9c8:	3b 45 f8             	cmp    -0x8(%ebp),%eax
- 9cb:	75 20                	jne    9ed <free+0xc5>
-    p->s.size += bp->s.size;
- 9cd:	8b 45 fc             	mov    -0x4(%ebp),%eax
- 9d0:	8b 50 04             	mov    0x4(%eax),%edx
- 9d3:	8b 45 f8             	mov    -0x8(%ebp),%eax
- 9d6:	8b 40 04             	mov    0x4(%eax),%eax
- 9d9:	01 c2                	add    %eax,%edx
- 9db:	8b 45 fc             	mov    -0x4(%ebp),%eax
- 9de:	89 50 04             	mov    %edx,0x4(%eax)
-    p->s.ptr = bp->s.ptr;
- 9e1:	8b 45 f8             	mov    -0x8(%ebp),%eax
- 9e4:	8b 10                	mov    (%eax),%edx
- 9e6:	8b 45 fc             	mov    -0x4(%ebp),%eax
- 9e9:	89 10                	mov    %edx,(%eax)
- 9eb:	eb 08                	jmp    9f5 <free+0xcd>
-  } else
-    p->s.ptr = bp;
- 9ed:	8b 45 fc             	mov    -0x4(%ebp),%eax
- 9f0:	8b 55 f8             	mov    -0x8(%ebp),%edx
- 9f3:	89 10                	mov    %edx,(%eax)
-  freep = p;
- 9f5:	8b 45 fc             	mov    -0x4(%ebp),%eax
- 9f8:	a3 68 0e 00 00       	mov    %eax,0xe68
-}
- 9fd:	c9                   	leave  
- 9fe:	c3                   	ret    
-
-000009ff <morecore>:
-
-static Header*
-morecore(uint nu)
-{
- 9ff:	55                   	push   %ebp
- a00:	89 e5                	mov    %esp,%ebp
- a02:	83 ec 28             	sub    $0x28,%esp
-  char *p;
-  Header *hp;
-
-  if(nu < 4096)
- a05:	81 7d 08 ff 0f 00 00 	cmpl   $0xfff,0x8(%ebp)
- a0c:	77 07                	ja     a15 <morecore+0x16>
-    nu = 4096;
- a0e:	c7 45 08 00 10 00 00 	movl   $0x1000,0x8(%ebp)
-  p = sbrk(nu * sizeof(Header));
- a15:	8b 45 08             	mov    0x8(%ebp),%eax
- a18:	c1 e0 03             	shl    $0x3,%eax
- a1b:	89 04 24             	mov    %eax,(%esp)
- a1e:	e8 39 fc ff ff       	call   65c <sbrk>
- a23:	89 45 f4             	mov    %eax,-0xc(%ebp)
-  if(p == (char*)-1)
- a26:	83 7d f4 ff          	cmpl   $0xffffffff,-0xc(%ebp)
- a2a:	75 07                	jne    a33 <morecore+0x34>
-    return 0;
- a2c:	b8 00 00 00 00       	mov    $0x0,%eax
- a31:	eb 22                	jmp    a55 <morecore+0x56>
-  hp = (Header*)p;
- a33:	8b 45 f4             	mov    -0xc(%ebp),%eax
- a36:	89 45 f0             	mov    %eax,-0x10(%ebp)
-  hp->s.size = nu;
- a39:	8b 45 f0             	mov    -0x10(%ebp),%eax
- a3c:	8b 55 08             	mov    0x8(%ebp),%edx
- a3f:	89 50 04             	mov    %edx,0x4(%eax)
-  free((void*)(hp + 1));
- a42:	8b 45 f0             	mov    -0x10(%ebp),%eax
- a45:	83 c0 08             	add    $0x8,%eax
- a48:	89 04 24             	mov    %eax,(%esp)
- a4b:	e8 d8 fe ff ff       	call   928 <free>
-  return freep;
- a50:	a1 68 0e 00 00       	mov    0xe68,%eax
-}
- a55:	c9                   	leave  
- a56:	c3                   	ret    
-
-00000a57 <malloc>:
-
-void*
-malloc(uint nbytes)
-{
- a57:	55                   	push   %ebp
- a58:	89 e5                	mov    %esp,%ebp
- a5a:	83 ec 28             	sub    $0x28,%esp
-  Header *p, *prevp;
-  uint nunits;
-
-  nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;
- a5d:	8b 45 08             	mov    0x8(%ebp),%eax
- a60:	83 c0 07             	add    $0x7,%eax
- a63:	c1 e8 03             	shr    $0x3,%eax
- a66:	83 c0 01             	add    $0x1,%eax
- a69:	89 45 ec             	mov    %eax,-0x14(%ebp)
-  if((prevp = freep) == 0){
- a6c:	a1 68 0e 00 00       	mov    0xe68,%eax
- a71:	89 45 f0             	mov    %eax,-0x10(%ebp)
- a74:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
- a78:	75 23                	jne    a9d <malloc+0x46>
-    base.s.ptr = freep = prevp = &base;
- a7a:	c7 45 f0 60 0e 00 00 	movl   $0xe60,-0x10(%ebp)
- a81:	8b 45 f0             	mov    -0x10(%ebp),%eax
- a84:	a3 68 0e 00 00       	mov    %eax,0xe68
- a89:	a1 68 0e 00 00       	mov    0xe68,%eax
- a8e:	a3 60 0e 00 00       	mov    %eax,0xe60
-    base.s.size = 0;
- a93:	c7 05 64 0e 00 00 00 	movl   $0x0,0xe64
- a9a:	00 00 00 
-  }
-  for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
- a9d:	8b 45 f0             	mov    -0x10(%ebp),%eax
- aa0:	8b 00                	mov    (%eax),%eax
- aa2:	89 45 f4             	mov    %eax,-0xc(%ebp)
-    if(p->s.size >= nunits){
- aa5:	8b 45 f4             	mov    -0xc(%ebp),%eax
- aa8:	8b 40 04             	mov    0x4(%eax),%eax
- aab:	3b 45 ec             	cmp    -0x14(%ebp),%eax
- aae:	72 4d                	jb     afd <malloc+0xa6>
-      if(p->s.size == nunits)
- ab0:	8b 45 f4             	mov    -0xc(%ebp),%eax
- ab3:	8b 40 04             	mov    0x4(%eax),%eax
- ab6:	3b 45 ec             	cmp    -0x14(%ebp),%eax
- ab9:	75 0c                	jne    ac7 <malloc+0x70>
-        prevp->s.ptr = p->s.ptr;
- abb:	8b 45 f4             	mov    -0xc(%ebp),%eax
- abe:	8b 10                	mov    (%eax),%edx
- ac0:	8b 45 f0             	mov    -0x10(%ebp),%eax
- ac3:	89 10                	mov    %edx,(%eax)
- ac5:	eb 26                	jmp    aed <malloc+0x96>
-      else {
-        p->s.size -= nunits;
- ac7:	8b 45 f4             	mov    -0xc(%ebp),%eax
- aca:	8b 40 04             	mov    0x4(%eax),%eax
- acd:	89 c2                	mov    %eax,%edx
- acf:	2b 55 ec             	sub    -0x14(%ebp),%edx
- ad2:	8b 45 f4             	mov    -0xc(%ebp),%eax
- ad5:	89 50 04             	mov    %edx,0x4(%eax)
-        p += p->s.size;
- ad8:	8b 45 f4             	mov    -0xc(%ebp),%eax
- adb:	8b 40 04             	mov    0x4(%eax),%eax
- ade:	c1 e0 03             	shl    $0x3,%eax
- ae1:	01 45 f4             	add    %eax,-0xc(%ebp)
-        p->s.size = nunits;
- ae4:	8b 45 f4             	mov    -0xc(%ebp),%eax
- ae7:	8b 55 ec             	mov    -0x14(%ebp),%edx
- aea:	89 50 04             	mov    %edx,0x4(%eax)
-      }
-      freep = prevp;
- aed:	8b 45 f0             	mov    -0x10(%ebp),%eax
- af0:	a3 68 0e 00 00       	mov    %eax,0xe68
-      return (void*)(p + 1);
- af5:	8b 45 f4             	mov    -0xc(%ebp),%eax
- af8:	83 c0 08             	add    $0x8,%eax
- afb:	eb 38                	jmp    b35 <malloc+0xde>
-    }
-    if(p == freep)
- afd:	a1 68 0e 00 00       	mov    0xe68,%eax
- b02:	39 45 f4             	cmp    %eax,-0xc(%ebp)
- b05:	75 1b                	jne    b22 <malloc+0xcb>
-      if((p = morecore(nunits)) == 0)
- b07:	8b 45 ec             	mov    -0x14(%ebp),%eax
- b0a:	89 04 24             	mov    %eax,(%esp)
- b0d:	e8 ed fe ff ff       	call   9ff <morecore>
- b12:	89 45 f4             	mov    %eax,-0xc(%ebp)
- b15:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
- b19:	75 07                	jne    b22 <malloc+0xcb>
-        return 0;
- b1b:	b8 00 00 00 00       	mov    $0x0,%eax
- b20:	eb 13                	jmp    b35 <malloc+0xde>
-  nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;
-  if((prevp = freep) == 0){
-    base.s.ptr = freep = prevp = &base;
-    base.s.size = 0;
-  }
-  for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
- b22:	8b 45 f4             	mov    -0xc(%ebp),%eax
- b25:	89 45 f0             	mov    %eax,-0x10(%ebp)
- b28:	8b 45 f4             	mov    -0xc(%ebp),%eax
- b2b:	8b 00                	mov    (%eax),%eax
- b2d:	89 45 f4             	mov    %eax,-0xc(%ebp)
-      return (void*)(p + 1);
-    }
-    if(p == freep)
-      if((p = morecore(nunits)) == 0)
-        return 0;
-  }
- b30:	e9 70 ff ff ff       	jmp    aa5 <malloc+0x4e>
-}
- b35:	c9                   	leave  
- b36:	c3                   	ret    
diff --git a/xv6/grep.c b/xv6/grep.c
deleted file mode 100644
index 9c1f0c9..0000000
--- a/xv6/grep.c
+++ /dev/null
@@ -1,106 +0,0 @@
-// Simple grep.  Only supports ^ . * $ operators.
-
-#include "types.h"
-#include "stat.h"
-#include "user.h"
-
-char buf[1024];
-int match(char*, char*);
-
-void
-grep(char *pattern, int fd)
-{
-  int n, m;
-  char *p, *q;
-  
-  m = 0;
-  while((n = read(fd, buf+m, sizeof(buf)-m)) > 0){
-    m += n;
-    p = buf;
-    while((q = strchr(p, '\n')) != 0){
-      *q = 0;
-      if(match(pattern, p)){
-        *q = '\n';
-        write(1, p, q+1 - p);
-      }
-      p = q+1;
-    }
-    if(p == buf)
-      m = 0;
-    if(m > 0){
-      m -= p - buf;
-      memmove(buf, p, m);
-    }
-  }
-}
-
-int
-main(int argc, char *argv[])
-{
-  int fd, i;
-  char *pattern;
-  
-  if(argc <= 1){
-    printf(2, "usage: grep pattern [file ...]\n");
-    exit(EXIT_STATUS_DEFAULT);
-  }
-  pattern = argv[1];
-  
-  if(argc <= 2){
-    grep(pattern, 0);
-    exit(EXIT_STATUS_DEFAULT);
-  }
-
-  for(i = 2; i < argc; i++){
-    if((fd = open(argv[i], 0)) < 0){
-      printf(1, "grep: cannot open %s\n", argv[i]);
-      exit(EXIT_STATUS_DEFAULT);
-    }
-    grep(pattern, fd);
-    close(fd);
-  }
-  exit(EXIT_STATUS_DEFAULT);
-}
-
-// Regexp matcher from Kernighan & Pike,
-// The Practice of Programming, Chapter 9.
-
-int matchhere(char*, char*);
-int matchstar(int, char*, char*);
-
-int
-match(char *re, char *text)
-{
-  if(re[0] == '^')
-    return matchhere(re+1, text);
-  do{  // must look at empty string
-    if(matchhere(re, text))
-      return 1;
-  }while(*text++ != '\0');
-  return 0;
-}
-
-// matchhere: search for re at beginning of text
-int matchhere(char *re, char *text)
-{
-  if(re[0] == '\0')
-    return 1;
-  if(re[1] == '*')
-    return matchstar(re[0], re+2, text);
-  if(re[0] == '$' && re[1] == '\0')
-    return *text == '\0';
-  if(*text!='\0' && (re[0]=='.' || re[0]==*text))
-    return matchhere(re+1, text+1);
-  return 0;
-}
-
-// matchstar: search for c*re at beginning of text
-int matchstar(int c, char *re, char *text)
-{
-  do{  // a * matches zero or more instances
-    if(matchhere(re, text))
-      return 1;
-  }while(*text!='\0' && (*text++==c || c=='.'));
-  return 0;
-}
-
diff --git a/xv6/grep.d b/xv6/grep.d
deleted file mode 100644
index d51e5a3..0000000
--- a/xv6/grep.d
+++ /dev/null
@@ -1 +0,0 @@
-grep.o: grep.c types.h stat.h user.h
diff --git a/xv6/grep.sym b/xv6/grep.sym
deleted file mode 100644
index 3658b0a..0000000
--- a/xv6/grep.sym
+++ /dev/null
@@ -1,70 +0,0 @@
-00000000 .text
-00000b38 .rodata
-00000b78 .eh_frame
-00000e34 .data
-00000e60 .bss
-00000000 .comment
-00000000 .debug_aranges
-00000000 .debug_info
-00000000 .debug_abbrev
-00000000 .debug_line
-00000000 .debug_str
-00000000 .debug_loc
-00000000 grep.c
-00000000 ulib.c
-00000370 stosb
-00000000 printf.c
-0000069c putc
-000006c4 printint
-00000e34 digits.923
-00000000 umalloc.c
-00000e60 base
-00000e68 freep
-000009ff morecore
-00000395 strcpy
-00000674 waitpid
-00000773 printf
-0000058e memmove
-00000266 matchhere
-0000061c mknod
-0000068c foreground
-00000486 gets
-00000654 getpid
-00000000 grep
-00000a57 malloc
-00000664 sleep
-00000694 set_priority
-0000067c wait_stat
-000005e4 pipe
-000005f4 write
-0000062c fstat
-00000604 kill
-00000644 chdir
-0000060c exec
-000005dc wait
-000005ec read
-00000624 unlink
-000005cc fork
-0000065c sbrk
-0000066c uptime
-00000e48 __bss_start
-0000042f memset
-0000010a main
-0000031d matchstar
-000003c9 strcmp
-0000064c dup
-00000e80 buf
-00000684 list_pgroup
-000004f5 stat
-00000e48 _edata
-00001280 _end
-00000208 match
-00000634 link
-000005d4 exit
-00000543 atoi
-0000040a strlen
-00000614 open
-00000453 strchr
-0000063c mkdir
-000005fc close
-00000928 free
diff --git a/xv6/ide.c b/xv6/ide.c
deleted file mode 100644
index 6850a09..0000000
--- a/xv6/ide.c
+++ /dev/null
@@ -1,155 +0,0 @@
-// Simple PIO-based (non-DMA) IDE driver code.
-
-#include "types.h"
-#include "defs.h"
-#include "param.h"
-#include "memlayout.h"
-#include "mmu.h"
-#include "proc.h"
-#include "x86.h"
-#include "traps.h"
-#include "spinlock.h"
-#include "buf.h"
-
-#define IDE_BSY       0x80
-#define IDE_DRDY      0x40
-#define IDE_DF        0x20
-#define IDE_ERR       0x01
-
-#define IDE_CMD_READ  0x20
-#define IDE_CMD_WRITE 0x30
-
-// idequeue points to the buf now being read/written to the disk.
-// idequeue->qnext points to the next buf to be processed.
-// You must hold idelock while manipulating queue.
-
-static struct spinlock idelock;
-static struct buf *idequeue;
-
-static int havedisk1;
-static void idestart(struct buf*);
-
-// Wait for IDE disk to become ready.
-static int
-idewait(int checkerr)
-{
-  int r;
-
-  while(((r = inb(0x1f7)) & (IDE_BSY|IDE_DRDY)) != IDE_DRDY) 
-    ;
-  if(checkerr && (r & (IDE_DF|IDE_ERR)) != 0)
-    return -1;
-  return 0;
-}
-
-void
-ideinit(void)
-{
-  int i;
-
-  initlock(&idelock, "ide");
-  picenable(IRQ_IDE);
-  ioapicenable(IRQ_IDE, ncpu - 1);
-  idewait(0);
-  
-  // Check if disk 1 is present
-  outb(0x1f6, 0xe0 | (1<<4));
-  for(i=0; i<1000; i++){
-    if(inb(0x1f7) != 0){
-      havedisk1 = 1;
-      break;
-    }
-  }
-  
-  // Switch back to disk 0.
-  outb(0x1f6, 0xe0 | (0<<4));
-}
-
-// Start the request for b.  Caller must hold idelock.
-static void
-idestart(struct buf *b)
-{
-  if(b == 0)
-    panic("idestart");
-
-  idewait(0);
-  outb(0x3f6, 0);  // generate interrupt
-  outb(0x1f2, 1);  // number of sectors
-  outb(0x1f3, b->sector & 0xff);
-  outb(0x1f4, (b->sector >> 8) & 0xff);
-  outb(0x1f5, (b->sector >> 16) & 0xff);
-  outb(0x1f6, 0xe0 | ((b->dev&1)<<4) | ((b->sector>>24)&0x0f));
-  if(b->flags & B_DIRTY){
-    outb(0x1f7, IDE_CMD_WRITE);
-    outsl(0x1f0, b->data, 512/4);
-  } else {
-    outb(0x1f7, IDE_CMD_READ);
-  }
-}
-
-// Interrupt handler.
-void
-ideintr(void)
-{
-  struct buf *b;
-
-  // First queued buffer is the active request.
-  acquire(&idelock);
-  if((b = idequeue) == 0){
-    release(&idelock);
-    // cprintf("spurious IDE interrupt\n");
-    return;
-  }
-  idequeue = b->qnext;
-
-  // Read data if needed.
-  if(!(b->flags & B_DIRTY) && idewait(1) >= 0)
-    insl(0x1f0, b->data, 512/4);
-  
-  // Wake process waiting for this buf.
-  b->flags |= B_VALID;
-  b->flags &= ~B_DIRTY;
-  wakeup(b);
-  
-  // Start disk on next buf in queue.
-  if(idequeue != 0)
-    idestart(idequeue);
-
-  release(&idelock);
-}
-
-//PAGEBREAK!
-// Sync buf with disk. 
-// If B_DIRTY is set, write buf to disk, clear B_DIRTY, set B_VALID.
-// Else if B_VALID is not set, read buf from disk, set B_VALID.
-void
-iderw(struct buf *b)
-{
-  struct buf **pp;
-
-  if(!(b->flags & B_BUSY))
-    panic("iderw: buf not busy");
-  if((b->flags & (B_VALID|B_DIRTY)) == B_VALID)
-    panic("iderw: nothing to do");
-  if(b->dev != 0 && !havedisk1)
-    panic("iderw: ide disk 1 not present");
-
-  acquire(&idelock);  //DOC:acquire-lock
-
-  // Append b to idequeue.
-  b->qnext = 0;
-  for(pp=&idequeue; *pp; pp=&(*pp)->qnext)  //DOC:insert-queue
-    ;
-  *pp = b;
-  
-  // Start disk if necessary.
-  if(idequeue == b)
-    idestart(b);
-  
-  // Wait for request to finish.
-  while((b->flags & (B_VALID|B_DIRTY)) != B_VALID){
-    sleep(b, &idelock);
-  }
-
-  release(&idelock);
-}
diff --git a/xv6/ide.d b/xv6/ide.d
deleted file mode 100644
index 2ffd97c..0000000
--- a/xv6/ide.d
+++ /dev/null
@@ -1,2 +0,0 @@
-ide.o: ide.c types.h defs.h param.h memlayout.h mmu.h proc.h x86.h \
- traps.h spinlock.h buf.h
diff --git a/xv6/implicit_return.S b/xv6/implicit_return.S
deleted file mode 100644
index 816cfd3..0000000
--- a/xv6/implicit_return.S
+++ /dev/null
@@ -1,13 +0,0 @@
-
-.code32
-.globl implicit_exit
-.globl implicit_exit_end
-
-implicit_exit:
-	push %eax
-	push $0xffffffff #fake address
-
-	movl $2, %eax;
-	int $64;
-
-implicit_exit_end:
diff --git a/xv6/init.asm b/xv6/init.asm
deleted file mode 100644
index 1e24cb4..0000000
--- a/xv6/init.asm
+++ /dev/null
@@ -1,1270 +0,0 @@
-
-_init:     file format elf32-i386
-
-
-Disassembly of section .text:
-
-00000000 <main>:
-
-char *argv[] = { "sh", 0 };
-
-int
-main(void)
-{
-   0:	55                   	push   %ebp
-   1:	89 e5                	mov    %esp,%ebp
-   3:	83 e4 f0             	and    $0xfffffff0,%esp
-   6:	83 ec 20             	sub    $0x20,%esp
-  int pid, wpid;
-
-  if(open("console", O_RDWR) < 0){
-   9:	c7 44 24 04 02 00 00 	movl   $0x2,0x4(%esp)
-  10:	00 
-  11:	c7 04 24 f6 08 00 00 	movl   $0x8f6,(%esp)
-  18:	e8 b3 03 00 00       	call   3d0 <open>
-  1d:	85 c0                	test   %eax,%eax
-  1f:	79 30                	jns    51 <main+0x51>
-    mknod("console", 1, 1);
-  21:	c7 44 24 08 01 00 00 	movl   $0x1,0x8(%esp)
-  28:	00 
-  29:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
-  30:	00 
-  31:	c7 04 24 f6 08 00 00 	movl   $0x8f6,(%esp)
-  38:	e8 9b 03 00 00       	call   3d8 <mknod>
-    open("console", O_RDWR);
-  3d:	c7 44 24 04 02 00 00 	movl   $0x2,0x4(%esp)
-  44:	00 
-  45:	c7 04 24 f6 08 00 00 	movl   $0x8f6,(%esp)
-  4c:	e8 7f 03 00 00       	call   3d0 <open>
-  }
-  dup(0);  // stdout
-  51:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
-  58:	e8 ab 03 00 00       	call   408 <dup>
-  dup(0);  // stderr
-  5d:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
-  64:	e8 9f 03 00 00       	call   408 <dup>
-  69:	eb 01                	jmp    6c <main+0x6c>
-      printf(1, "init: exec sh failed\n");
-      exit(EXIT_STATUS_DEFAULT);
-    }
-    while((wpid=wait(0)) >= 0 && wpid != pid)
-      printf(1, "zombie!\n");
-  }
-  6b:	90                   	nop
-  }
-  dup(0);  // stdout
-  dup(0);  // stderr
-
-  for(;;){
-    printf(1, "init: starting sh\n");
-  6c:	c7 44 24 04 fe 08 00 	movl   $0x8fe,0x4(%esp)
-  73:	00 
-  74:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
-  7b:	e8 af 04 00 00       	call   52f <printf>
-    pid = fork();
-  80:	e8 03 03 00 00       	call   388 <fork>
-  85:	89 44 24 1c          	mov    %eax,0x1c(%esp)
-    if(pid < 0){
-  89:	83 7c 24 1c 00       	cmpl   $0x0,0x1c(%esp)
-  8e:	79 20                	jns    b0 <main+0xb0>
-      printf(1, "init: fork failed\n");
-  90:	c7 44 24 04 11 09 00 	movl   $0x911,0x4(%esp)
-  97:	00 
-  98:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
-  9f:	e8 8b 04 00 00       	call   52f <printf>
-      exit(EXIT_STATUS_DEFAULT);
-  a4:	c7 04 24 02 00 00 00 	movl   $0x2,(%esp)
-  ab:	e8 e0 02 00 00       	call   390 <exit>
-    }
-    if(pid == 0){
-  b0:	83 7c 24 1c 00       	cmpl   $0x0,0x1c(%esp)
-  b5:	75 48                	jne    ff <main+0xff>
-      exec("sh", argv);
-  b7:	c7 44 24 04 88 0b 00 	movl   $0xb88,0x4(%esp)
-  be:	00 
-  bf:	c7 04 24 f3 08 00 00 	movl   $0x8f3,(%esp)
-  c6:	e8 fd 02 00 00       	call   3c8 <exec>
-      printf(1, "init: exec sh failed\n");
-  cb:	c7 44 24 04 24 09 00 	movl   $0x924,0x4(%esp)
-  d2:	00 
-  d3:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
-  da:	e8 50 04 00 00       	call   52f <printf>
-      exit(EXIT_STATUS_DEFAULT);
-  df:	c7 04 24 02 00 00 00 	movl   $0x2,(%esp)
-  e6:	e8 a5 02 00 00       	call   390 <exit>
-    }
-    while((wpid=wait(0)) >= 0 && wpid != pid)
-      printf(1, "zombie!\n");
-  eb:	c7 44 24 04 3a 09 00 	movl   $0x93a,0x4(%esp)
-  f2:	00 
-  f3:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
-  fa:	e8 30 04 00 00       	call   52f <printf>
-    if(pid == 0){
-      exec("sh", argv);
-      printf(1, "init: exec sh failed\n");
-      exit(EXIT_STATUS_DEFAULT);
-    }
-    while((wpid=wait(0)) >= 0 && wpid != pid)
-  ff:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
- 106:	e8 8d 02 00 00       	call   398 <wait>
- 10b:	89 44 24 18          	mov    %eax,0x18(%esp)
- 10f:	83 7c 24 18 00       	cmpl   $0x0,0x18(%esp)
- 114:	0f 88 51 ff ff ff    	js     6b <main+0x6b>
- 11a:	8b 44 24 18          	mov    0x18(%esp),%eax
- 11e:	3b 44 24 1c          	cmp    0x1c(%esp),%eax
- 122:	75 c7                	jne    eb <main+0xeb>
-      printf(1, "zombie!\n");
-  }
- 124:	e9 42 ff ff ff       	jmp    6b <main+0x6b>
- 129:	90                   	nop
- 12a:	90                   	nop
- 12b:	90                   	nop
-
-0000012c <stosb>:
-               "cc");
-}
-
-static inline void
-stosb(void *addr, int data, int cnt)
-{
- 12c:	55                   	push   %ebp
- 12d:	89 e5                	mov    %esp,%ebp
- 12f:	57                   	push   %edi
- 130:	53                   	push   %ebx
-  asm volatile("cld; rep stosb" :
- 131:	8b 4d 08             	mov    0x8(%ebp),%ecx
- 134:	8b 55 10             	mov    0x10(%ebp),%edx
- 137:	8b 45 0c             	mov    0xc(%ebp),%eax
- 13a:	89 cb                	mov    %ecx,%ebx
- 13c:	89 df                	mov    %ebx,%edi
- 13e:	89 d1                	mov    %edx,%ecx
- 140:	fc                   	cld    
- 141:	f3 aa                	rep stos %al,%es:(%edi)
- 143:	89 ca                	mov    %ecx,%edx
- 145:	89 fb                	mov    %edi,%ebx
- 147:	89 5d 08             	mov    %ebx,0x8(%ebp)
- 14a:	89 55 10             	mov    %edx,0x10(%ebp)
-               "=D" (addr), "=c" (cnt) :
-               "0" (addr), "1" (cnt), "a" (data) :
-               "memory", "cc");
-}
- 14d:	5b                   	pop    %ebx
- 14e:	5f                   	pop    %edi
- 14f:	5d                   	pop    %ebp
- 150:	c3                   	ret    
-
-00000151 <strcpy>:
-#include "user.h"
-#include "x86.h"
-
-char*
-strcpy(char *s, char *t)
-{
- 151:	55                   	push   %ebp
- 152:	89 e5                	mov    %esp,%ebp
- 154:	83 ec 10             	sub    $0x10,%esp
-  char *os;
-
-  os = s;
- 157:	8b 45 08             	mov    0x8(%ebp),%eax
- 15a:	89 45 fc             	mov    %eax,-0x4(%ebp)
-  while((*s++ = *t++) != 0)
- 15d:	90                   	nop
- 15e:	8b 45 0c             	mov    0xc(%ebp),%eax
- 161:	0f b6 10             	movzbl (%eax),%edx
- 164:	8b 45 08             	mov    0x8(%ebp),%eax
- 167:	88 10                	mov    %dl,(%eax)
- 169:	8b 45 08             	mov    0x8(%ebp),%eax
- 16c:	0f b6 00             	movzbl (%eax),%eax
- 16f:	84 c0                	test   %al,%al
- 171:	0f 95 c0             	setne  %al
- 174:	83 45 08 01          	addl   $0x1,0x8(%ebp)
- 178:	83 45 0c 01          	addl   $0x1,0xc(%ebp)
- 17c:	84 c0                	test   %al,%al
- 17e:	75 de                	jne    15e <strcpy+0xd>
-    ;
-  return os;
- 180:	8b 45 fc             	mov    -0x4(%ebp),%eax
-}
- 183:	c9                   	leave  
- 184:	c3                   	ret    
-
-00000185 <strcmp>:
-
-int
-strcmp(const char *p, const char *q)
-{
- 185:	55                   	push   %ebp
- 186:	89 e5                	mov    %esp,%ebp
-  while(*p && *p == *q)
- 188:	eb 08                	jmp    192 <strcmp+0xd>
-    p++, q++;
- 18a:	83 45 08 01          	addl   $0x1,0x8(%ebp)
- 18e:	83 45 0c 01          	addl   $0x1,0xc(%ebp)
-}
-
-int
-strcmp(const char *p, const char *q)
-{
-  while(*p && *p == *q)
- 192:	8b 45 08             	mov    0x8(%ebp),%eax
- 195:	0f b6 00             	movzbl (%eax),%eax
- 198:	84 c0                	test   %al,%al
- 19a:	74 10                	je     1ac <strcmp+0x27>
- 19c:	8b 45 08             	mov    0x8(%ebp),%eax
- 19f:	0f b6 10             	movzbl (%eax),%edx
- 1a2:	8b 45 0c             	mov    0xc(%ebp),%eax
- 1a5:	0f b6 00             	movzbl (%eax),%eax
- 1a8:	38 c2                	cmp    %al,%dl
- 1aa:	74 de                	je     18a <strcmp+0x5>
-    p++, q++;
-  return (uchar)*p - (uchar)*q;
- 1ac:	8b 45 08             	mov    0x8(%ebp),%eax
- 1af:	0f b6 00             	movzbl (%eax),%eax
- 1b2:	0f b6 d0             	movzbl %al,%edx
- 1b5:	8b 45 0c             	mov    0xc(%ebp),%eax
- 1b8:	0f b6 00             	movzbl (%eax),%eax
- 1bb:	0f b6 c0             	movzbl %al,%eax
- 1be:	89 d1                	mov    %edx,%ecx
- 1c0:	29 c1                	sub    %eax,%ecx
- 1c2:	89 c8                	mov    %ecx,%eax
-}
- 1c4:	5d                   	pop    %ebp
- 1c5:	c3                   	ret    
-
-000001c6 <strlen>:
-
-uint
-strlen(char *s)
-{
- 1c6:	55                   	push   %ebp
- 1c7:	89 e5                	mov    %esp,%ebp
- 1c9:	83 ec 10             	sub    $0x10,%esp
-  int n;
-
-  for(n = 0; s[n]; n++)
- 1cc:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
- 1d3:	eb 04                	jmp    1d9 <strlen+0x13>
- 1d5:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
- 1d9:	8b 45 fc             	mov    -0x4(%ebp),%eax
- 1dc:	03 45 08             	add    0x8(%ebp),%eax
- 1df:	0f b6 00             	movzbl (%eax),%eax
- 1e2:	84 c0                	test   %al,%al
- 1e4:	75 ef                	jne    1d5 <strlen+0xf>
-    ;
-  return n;
- 1e6:	8b 45 fc             	mov    -0x4(%ebp),%eax
-}
- 1e9:	c9                   	leave  
- 1ea:	c3                   	ret    
-
-000001eb <memset>:
-
-void*
-memset(void *dst, int c, uint n)
-{
- 1eb:	55                   	push   %ebp
- 1ec:	89 e5                	mov    %esp,%ebp
- 1ee:	83 ec 0c             	sub    $0xc,%esp
-  stosb(dst, c, n);
- 1f1:	8b 45 10             	mov    0x10(%ebp),%eax
- 1f4:	89 44 24 08          	mov    %eax,0x8(%esp)
- 1f8:	8b 45 0c             	mov    0xc(%ebp),%eax
- 1fb:	89 44 24 04          	mov    %eax,0x4(%esp)
- 1ff:	8b 45 08             	mov    0x8(%ebp),%eax
- 202:	89 04 24             	mov    %eax,(%esp)
- 205:	e8 22 ff ff ff       	call   12c <stosb>
-  return dst;
- 20a:	8b 45 08             	mov    0x8(%ebp),%eax
-}
- 20d:	c9                   	leave  
- 20e:	c3                   	ret    
-
-0000020f <strchr>:
-
-char*
-strchr(const char *s, char c)
-{
- 20f:	55                   	push   %ebp
- 210:	89 e5                	mov    %esp,%ebp
- 212:	83 ec 04             	sub    $0x4,%esp
- 215:	8b 45 0c             	mov    0xc(%ebp),%eax
- 218:	88 45 fc             	mov    %al,-0x4(%ebp)
-  for(; *s; s++)
- 21b:	eb 14                	jmp    231 <strchr+0x22>
-    if(*s == c)
- 21d:	8b 45 08             	mov    0x8(%ebp),%eax
- 220:	0f b6 00             	movzbl (%eax),%eax
- 223:	3a 45 fc             	cmp    -0x4(%ebp),%al
- 226:	75 05                	jne    22d <strchr+0x1e>
-      return (char*)s;
- 228:	8b 45 08             	mov    0x8(%ebp),%eax
- 22b:	eb 13                	jmp    240 <strchr+0x31>
-}
-
-char*
-strchr(const char *s, char c)
-{
-  for(; *s; s++)
- 22d:	83 45 08 01          	addl   $0x1,0x8(%ebp)
- 231:	8b 45 08             	mov    0x8(%ebp),%eax
- 234:	0f b6 00             	movzbl (%eax),%eax
- 237:	84 c0                	test   %al,%al
- 239:	75 e2                	jne    21d <strchr+0xe>
-    if(*s == c)
-      return (char*)s;
-  return 0;
- 23b:	b8 00 00 00 00       	mov    $0x0,%eax
-}
- 240:	c9                   	leave  
- 241:	c3                   	ret    
-
-00000242 <gets>:
-
-char*
-gets(char *buf, int max)
-{
- 242:	55                   	push   %ebp
- 243:	89 e5                	mov    %esp,%ebp
- 245:	83 ec 28             	sub    $0x28,%esp
-  int i, cc;
-  char c;
-
-  for(i=0; i+1 < max; ){
- 248:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
- 24f:	eb 44                	jmp    295 <gets+0x53>
-    cc = read(0, &c, 1);
- 251:	c7 44 24 08 01 00 00 	movl   $0x1,0x8(%esp)
- 258:	00 
- 259:	8d 45 ef             	lea    -0x11(%ebp),%eax
- 25c:	89 44 24 04          	mov    %eax,0x4(%esp)
- 260:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
- 267:	e8 3c 01 00 00       	call   3a8 <read>
- 26c:	89 45 f0             	mov    %eax,-0x10(%ebp)
-    if(cc < 1)
- 26f:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
- 273:	7e 2d                	jle    2a2 <gets+0x60>
-      break;
-    buf[i++] = c;
- 275:	8b 45 f4             	mov    -0xc(%ebp),%eax
- 278:	03 45 08             	add    0x8(%ebp),%eax
- 27b:	0f b6 55 ef          	movzbl -0x11(%ebp),%edx
- 27f:	88 10                	mov    %dl,(%eax)
- 281:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
-    if(c == '\n' || c == '\r')
- 285:	0f b6 45 ef          	movzbl -0x11(%ebp),%eax
- 289:	3c 0a                	cmp    $0xa,%al
- 28b:	74 16                	je     2a3 <gets+0x61>
- 28d:	0f b6 45 ef          	movzbl -0x11(%ebp),%eax
- 291:	3c 0d                	cmp    $0xd,%al
- 293:	74 0e                	je     2a3 <gets+0x61>
-gets(char *buf, int max)
-{
-  int i, cc;
-  char c;
-
-  for(i=0; i+1 < max; ){
- 295:	8b 45 f4             	mov    -0xc(%ebp),%eax
- 298:	83 c0 01             	add    $0x1,%eax
- 29b:	3b 45 0c             	cmp    0xc(%ebp),%eax
- 29e:	7c b1                	jl     251 <gets+0xf>
- 2a0:	eb 01                	jmp    2a3 <gets+0x61>
-    cc = read(0, &c, 1);
-    if(cc < 1)
-      break;
- 2a2:	90                   	nop
-    buf[i++] = c;
-    if(c == '\n' || c == '\r')
-      break;
-  }
-  buf[i] = '\0';
- 2a3:	8b 45 f4             	mov    -0xc(%ebp),%eax
- 2a6:	03 45 08             	add    0x8(%ebp),%eax
- 2a9:	c6 00 00             	movb   $0x0,(%eax)
-  return buf;
- 2ac:	8b 45 08             	mov    0x8(%ebp),%eax
-}
- 2af:	c9                   	leave  
- 2b0:	c3                   	ret    
-
-000002b1 <stat>:
-
-int
-stat(char *n, struct stat *st)
-{
- 2b1:	55                   	push   %ebp
- 2b2:	89 e5                	mov    %esp,%ebp
- 2b4:	83 ec 28             	sub    $0x28,%esp
-  int fd;
-  int r;
-
-  fd = open(n, O_RDONLY);
- 2b7:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
- 2be:	00 
- 2bf:	8b 45 08             	mov    0x8(%ebp),%eax
- 2c2:	89 04 24             	mov    %eax,(%esp)
- 2c5:	e8 06 01 00 00       	call   3d0 <open>
- 2ca:	89 45 f4             	mov    %eax,-0xc(%ebp)
-  if(fd < 0)
- 2cd:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
- 2d1:	79 07                	jns    2da <stat+0x29>
-    return -1;
- 2d3:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
- 2d8:	eb 23                	jmp    2fd <stat+0x4c>
-  r = fstat(fd, st);
- 2da:	8b 45 0c             	mov    0xc(%ebp),%eax
- 2dd:	89 44 24 04          	mov    %eax,0x4(%esp)
- 2e1:	8b 45 f4             	mov    -0xc(%ebp),%eax
- 2e4:	89 04 24             	mov    %eax,(%esp)
- 2e7:	e8 fc 00 00 00       	call   3e8 <fstat>
- 2ec:	89 45 f0             	mov    %eax,-0x10(%ebp)
-  close(fd);
- 2ef:	8b 45 f4             	mov    -0xc(%ebp),%eax
- 2f2:	89 04 24             	mov    %eax,(%esp)
- 2f5:	e8 be 00 00 00       	call   3b8 <close>
-  return r;
- 2fa:	8b 45 f0             	mov    -0x10(%ebp),%eax
-}
- 2fd:	c9                   	leave  
- 2fe:	c3                   	ret    
-
-000002ff <atoi>:
-
-int
-atoi(const char *s)
-{
- 2ff:	55                   	push   %ebp
- 300:	89 e5                	mov    %esp,%ebp
- 302:	83 ec 10             	sub    $0x10,%esp
-  int n;
-
-  n = 0;
- 305:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
-  while('0' <= *s && *s <= '9')
- 30c:	eb 23                	jmp    331 <atoi+0x32>
-    n = n*10 + *s++ - '0';
- 30e:	8b 55 fc             	mov    -0x4(%ebp),%edx
- 311:	89 d0                	mov    %edx,%eax
- 313:	c1 e0 02             	shl    $0x2,%eax
- 316:	01 d0                	add    %edx,%eax
- 318:	01 c0                	add    %eax,%eax
- 31a:	89 c2                	mov    %eax,%edx
- 31c:	8b 45 08             	mov    0x8(%ebp),%eax
- 31f:	0f b6 00             	movzbl (%eax),%eax
- 322:	0f be c0             	movsbl %al,%eax
- 325:	01 d0                	add    %edx,%eax
- 327:	83 e8 30             	sub    $0x30,%eax
- 32a:	89 45 fc             	mov    %eax,-0x4(%ebp)
- 32d:	83 45 08 01          	addl   $0x1,0x8(%ebp)
-atoi(const char *s)
-{
-  int n;
-
-  n = 0;
-  while('0' <= *s && *s <= '9')
- 331:	8b 45 08             	mov    0x8(%ebp),%eax
- 334:	0f b6 00             	movzbl (%eax),%eax
- 337:	3c 2f                	cmp    $0x2f,%al
- 339:	7e 0a                	jle    345 <atoi+0x46>
- 33b:	8b 45 08             	mov    0x8(%ebp),%eax
- 33e:	0f b6 00             	movzbl (%eax),%eax
- 341:	3c 39                	cmp    $0x39,%al
- 343:	7e c9                	jle    30e <atoi+0xf>
-    n = n*10 + *s++ - '0';
-  return n;
- 345:	8b 45 fc             	mov    -0x4(%ebp),%eax
-}
- 348:	c9                   	leave  
- 349:	c3                   	ret    
-
-0000034a <memmove>:
-
-void*
-memmove(void *vdst, void *vsrc, int n)
-{
- 34a:	55                   	push   %ebp
- 34b:	89 e5                	mov    %esp,%ebp
- 34d:	83 ec 10             	sub    $0x10,%esp
-  char *dst, *src;
-  
-  dst = vdst;
- 350:	8b 45 08             	mov    0x8(%ebp),%eax
- 353:	89 45 fc             	mov    %eax,-0x4(%ebp)
-  src = vsrc;
- 356:	8b 45 0c             	mov    0xc(%ebp),%eax
- 359:	89 45 f8             	mov    %eax,-0x8(%ebp)
-  while(n-- > 0)
- 35c:	eb 13                	jmp    371 <memmove+0x27>
-    *dst++ = *src++;
- 35e:	8b 45 f8             	mov    -0x8(%ebp),%eax
- 361:	0f b6 10             	movzbl (%eax),%edx
- 364:	8b 45 fc             	mov    -0x4(%ebp),%eax
- 367:	88 10                	mov    %dl,(%eax)
- 369:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
- 36d:	83 45 f8 01          	addl   $0x1,-0x8(%ebp)
-{
-  char *dst, *src;
-  
-  dst = vdst;
-  src = vsrc;
-  while(n-- > 0)
- 371:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
- 375:	0f 9f c0             	setg   %al
- 378:	83 6d 10 01          	subl   $0x1,0x10(%ebp)
- 37c:	84 c0                	test   %al,%al
- 37e:	75 de                	jne    35e <memmove+0x14>
-    *dst++ = *src++;
-  return vdst;
- 380:	8b 45 08             	mov    0x8(%ebp),%eax
-}
- 383:	c9                   	leave  
- 384:	c3                   	ret    
- 385:	90                   	nop
- 386:	90                   	nop
- 387:	90                   	nop
-
-00000388 <fork>:
-  name: \
-    movl $SYS_ ## name, %eax; \
-    int $T_SYSCALL; \
-    ret
-
-SYSCALL(fork)
- 388:	b8 01 00 00 00       	mov    $0x1,%eax
- 38d:	cd 40                	int    $0x40
- 38f:	c3                   	ret    
-
-00000390 <exit>:
-SYSCALL(exit)
- 390:	b8 02 00 00 00       	mov    $0x2,%eax
- 395:	cd 40                	int    $0x40
- 397:	c3                   	ret    
-
-00000398 <wait>:
-SYSCALL(wait)
- 398:	b8 03 00 00 00       	mov    $0x3,%eax
- 39d:	cd 40                	int    $0x40
- 39f:	c3                   	ret    
-
-000003a0 <pipe>:
-SYSCALL(pipe)
- 3a0:	b8 04 00 00 00       	mov    $0x4,%eax
- 3a5:	cd 40                	int    $0x40
- 3a7:	c3                   	ret    
-
-000003a8 <read>:
-SYSCALL(read)
- 3a8:	b8 05 00 00 00       	mov    $0x5,%eax
- 3ad:	cd 40                	int    $0x40
- 3af:	c3                   	ret    
-
-000003b0 <write>:
-SYSCALL(write)
- 3b0:	b8 10 00 00 00       	mov    $0x10,%eax
- 3b5:	cd 40                	int    $0x40
- 3b7:	c3                   	ret    
-
-000003b8 <close>:
-SYSCALL(close)
- 3b8:	b8 15 00 00 00       	mov    $0x15,%eax
- 3bd:	cd 40                	int    $0x40
- 3bf:	c3                   	ret    
-
-000003c0 <kill>:
-SYSCALL(kill)
- 3c0:	b8 06 00 00 00       	mov    $0x6,%eax
- 3c5:	cd 40                	int    $0x40
- 3c7:	c3                   	ret    
-
-000003c8 <exec>:
-SYSCALL(exec)
- 3c8:	b8 07 00 00 00       	mov    $0x7,%eax
- 3cd:	cd 40                	int    $0x40
- 3cf:	c3                   	ret    
-
-000003d0 <open>:
-SYSCALL(open)
- 3d0:	b8 0f 00 00 00       	mov    $0xf,%eax
- 3d5:	cd 40                	int    $0x40
- 3d7:	c3                   	ret    
-
-000003d8 <mknod>:
-SYSCALL(mknod)
- 3d8:	b8 11 00 00 00       	mov    $0x11,%eax
- 3dd:	cd 40                	int    $0x40
- 3df:	c3                   	ret    
-
-000003e0 <unlink>:
-SYSCALL(unlink)
- 3e0:	b8 12 00 00 00       	mov    $0x12,%eax
- 3e5:	cd 40                	int    $0x40
- 3e7:	c3                   	ret    
-
-000003e8 <fstat>:
-SYSCALL(fstat)
- 3e8:	b8 08 00 00 00       	mov    $0x8,%eax
- 3ed:	cd 40                	int    $0x40
- 3ef:	c3                   	ret    
-
-000003f0 <link>:
-SYSCALL(link)
- 3f0:	b8 13 00 00 00       	mov    $0x13,%eax
- 3f5:	cd 40                	int    $0x40
- 3f7:	c3                   	ret    
-
-000003f8 <mkdir>:
-SYSCALL(mkdir)
- 3f8:	b8 14 00 00 00       	mov    $0x14,%eax
- 3fd:	cd 40                	int    $0x40
- 3ff:	c3                   	ret    
-
-00000400 <chdir>:
-SYSCALL(chdir)
- 400:	b8 09 00 00 00       	mov    $0x9,%eax
- 405:	cd 40                	int    $0x40
- 407:	c3                   	ret    
-
-00000408 <dup>:
-SYSCALL(dup)
- 408:	b8 0a 00 00 00       	mov    $0xa,%eax
- 40d:	cd 40                	int    $0x40
- 40f:	c3                   	ret    
-
-00000410 <getpid>:
-SYSCALL(getpid)
- 410:	b8 0b 00 00 00       	mov    $0xb,%eax
- 415:	cd 40                	int    $0x40
- 417:	c3                   	ret    
-
-00000418 <sbrk>:
-SYSCALL(sbrk)
- 418:	b8 0c 00 00 00       	mov    $0xc,%eax
- 41d:	cd 40                	int    $0x40
- 41f:	c3                   	ret    
-
-00000420 <sleep>:
-SYSCALL(sleep)
- 420:	b8 0d 00 00 00       	mov    $0xd,%eax
- 425:	cd 40                	int    $0x40
- 427:	c3                   	ret    
-
-00000428 <uptime>:
-SYSCALL(uptime)
- 428:	b8 0e 00 00 00       	mov    $0xe,%eax
- 42d:	cd 40                	int    $0x40
- 42f:	c3                   	ret    
-
-00000430 <waitpid>:
-SYSCALL(waitpid)
- 430:	b8 16 00 00 00       	mov    $0x16,%eax
- 435:	cd 40                	int    $0x40
- 437:	c3                   	ret    
-
-00000438 <wait_stat>:
-SYSCALL(wait_stat)
- 438:	b8 17 00 00 00       	mov    $0x17,%eax
- 43d:	cd 40                	int    $0x40
- 43f:	c3                   	ret    
-
-00000440 <list_pgroup>:
-SYSCALL(list_pgroup)
- 440:	b8 18 00 00 00       	mov    $0x18,%eax
- 445:	cd 40                	int    $0x40
- 447:	c3                   	ret    
-
-00000448 <foreground>:
-SYSCALL(foreground)
- 448:	b8 19 00 00 00       	mov    $0x19,%eax
- 44d:	cd 40                	int    $0x40
- 44f:	c3                   	ret    
-
-00000450 <set_priority>:
-SYSCALL(set_priority)
- 450:	b8 1a 00 00 00       	mov    $0x1a,%eax
- 455:	cd 40                	int    $0x40
- 457:	c3                   	ret    
-
-00000458 <putc>:
-#include "stat.h"
-#include "user.h"
-
-static void
-putc(int fd, char c)
-{
- 458:	55                   	push   %ebp
- 459:	89 e5                	mov    %esp,%ebp
- 45b:	83 ec 28             	sub    $0x28,%esp
- 45e:	8b 45 0c             	mov    0xc(%ebp),%eax
- 461:	88 45 f4             	mov    %al,-0xc(%ebp)
-  write(fd, &c, 1);
- 464:	c7 44 24 08 01 00 00 	movl   $0x1,0x8(%esp)
- 46b:	00 
- 46c:	8d 45 f4             	lea    -0xc(%ebp),%eax
- 46f:	89 44 24 04          	mov    %eax,0x4(%esp)
- 473:	8b 45 08             	mov    0x8(%ebp),%eax
- 476:	89 04 24             	mov    %eax,(%esp)
- 479:	e8 32 ff ff ff       	call   3b0 <write>
-}
- 47e:	c9                   	leave  
- 47f:	c3                   	ret    
-
-00000480 <printint>:
-
-static void
-printint(int fd, int xx, int base, int sgn)
-{
- 480:	55                   	push   %ebp
- 481:	89 e5                	mov    %esp,%ebp
- 483:	83 ec 48             	sub    $0x48,%esp
-  static char digits[] = "0123456789ABCDEF";
-  char buf[16];
-  int i, neg;
-  uint x;
-
-  neg = 0;
- 486:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
-  if(sgn && xx < 0){
- 48d:	83 7d 14 00          	cmpl   $0x0,0x14(%ebp)
- 491:	74 17                	je     4aa <printint+0x2a>
- 493:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
- 497:	79 11                	jns    4aa <printint+0x2a>
-    neg = 1;
- 499:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
-    x = -xx;
- 4a0:	8b 45 0c             	mov    0xc(%ebp),%eax
- 4a3:	f7 d8                	neg    %eax
- 4a5:	89 45 ec             	mov    %eax,-0x14(%ebp)
- 4a8:	eb 06                	jmp    4b0 <printint+0x30>
-  } else {
-    x = xx;
- 4aa:	8b 45 0c             	mov    0xc(%ebp),%eax
- 4ad:	89 45 ec             	mov    %eax,-0x14(%ebp)
-  }
-
-  i = 0;
- 4b0:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
-  do{
-    buf[i++] = digits[x % base];
- 4b7:	8b 4d 10             	mov    0x10(%ebp),%ecx
- 4ba:	8b 45 ec             	mov    -0x14(%ebp),%eax
- 4bd:	ba 00 00 00 00       	mov    $0x0,%edx
- 4c2:	f7 f1                	div    %ecx
- 4c4:	89 d0                	mov    %edx,%eax
- 4c6:	0f b6 90 90 0b 00 00 	movzbl 0xb90(%eax),%edx
- 4cd:	8d 45 dc             	lea    -0x24(%ebp),%eax
- 4d0:	03 45 f4             	add    -0xc(%ebp),%eax
- 4d3:	88 10                	mov    %dl,(%eax)
- 4d5:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
-  }while((x /= base) != 0);
- 4d9:	8b 55 10             	mov    0x10(%ebp),%edx
- 4dc:	89 55 d4             	mov    %edx,-0x2c(%ebp)
- 4df:	8b 45 ec             	mov    -0x14(%ebp),%eax
- 4e2:	ba 00 00 00 00       	mov    $0x0,%edx
- 4e7:	f7 75 d4             	divl   -0x2c(%ebp)
- 4ea:	89 45 ec             	mov    %eax,-0x14(%ebp)
- 4ed:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
- 4f1:	75 c4                	jne    4b7 <printint+0x37>
-  if(neg)
- 4f3:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
- 4f7:	74 2a                	je     523 <printint+0xa3>
-    buf[i++] = '-';
- 4f9:	8d 45 dc             	lea    -0x24(%ebp),%eax
- 4fc:	03 45 f4             	add    -0xc(%ebp),%eax
- 4ff:	c6 00 2d             	movb   $0x2d,(%eax)
- 502:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
-
-  while(--i >= 0)
- 506:	eb 1b                	jmp    523 <printint+0xa3>
-    putc(fd, buf[i]);
- 508:	8d 45 dc             	lea    -0x24(%ebp),%eax
- 50b:	03 45 f4             	add    -0xc(%ebp),%eax
- 50e:	0f b6 00             	movzbl (%eax),%eax
- 511:	0f be c0             	movsbl %al,%eax
- 514:	89 44 24 04          	mov    %eax,0x4(%esp)
- 518:	8b 45 08             	mov    0x8(%ebp),%eax
- 51b:	89 04 24             	mov    %eax,(%esp)
- 51e:	e8 35 ff ff ff       	call   458 <putc>
-    buf[i++] = digits[x % base];
-  }while((x /= base) != 0);
-  if(neg)
-    buf[i++] = '-';
-
-  while(--i >= 0)
- 523:	83 6d f4 01          	subl   $0x1,-0xc(%ebp)
- 527:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
- 52b:	79 db                	jns    508 <printint+0x88>
-    putc(fd, buf[i]);
-}
- 52d:	c9                   	leave  
- 52e:	c3                   	ret    
-
-0000052f <printf>:
-
-// Print to the given fd. Only understands %d, %x, %p, %s.
-void
-printf(int fd, char *fmt, ...)
-{
- 52f:	55                   	push   %ebp
- 530:	89 e5                	mov    %esp,%ebp
- 532:	83 ec 38             	sub    $0x38,%esp
-  char *s;
-  int c, i, state;
-  uint *ap;
-
-  state = 0;
- 535:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
-  ap = (uint*)(void*)&fmt + 1;
- 53c:	8d 45 0c             	lea    0xc(%ebp),%eax
- 53f:	83 c0 04             	add    $0x4,%eax
- 542:	89 45 e8             	mov    %eax,-0x18(%ebp)
-  for(i = 0; fmt[i]; i++){
- 545:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
- 54c:	e9 7d 01 00 00       	jmp    6ce <printf+0x19f>
-    c = fmt[i] & 0xff;
- 551:	8b 55 0c             	mov    0xc(%ebp),%edx
- 554:	8b 45 f0             	mov    -0x10(%ebp),%eax
- 557:	01 d0                	add    %edx,%eax
- 559:	0f b6 00             	movzbl (%eax),%eax
- 55c:	0f be c0             	movsbl %al,%eax
- 55f:	25 ff 00 00 00       	and    $0xff,%eax
- 564:	89 45 e4             	mov    %eax,-0x1c(%ebp)
-    if(state == 0){
- 567:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
- 56b:	75 2c                	jne    599 <printf+0x6a>
-      if(c == '%'){
- 56d:	83 7d e4 25          	cmpl   $0x25,-0x1c(%ebp)
- 571:	75 0c                	jne    57f <printf+0x50>
-        state = '%';
- 573:	c7 45 ec 25 00 00 00 	movl   $0x25,-0x14(%ebp)
- 57a:	e9 4b 01 00 00       	jmp    6ca <printf+0x19b>
-      } else {
-        putc(fd, c);
- 57f:	8b 45 e4             	mov    -0x1c(%ebp),%eax
- 582:	0f be c0             	movsbl %al,%eax
- 585:	89 44 24 04          	mov    %eax,0x4(%esp)
- 589:	8b 45 08             	mov    0x8(%ebp),%eax
- 58c:	89 04 24             	mov    %eax,(%esp)
- 58f:	e8 c4 fe ff ff       	call   458 <putc>
- 594:	e9 31 01 00 00       	jmp    6ca <printf+0x19b>
-      }
-    } else if(state == '%'){
- 599:	83 7d ec 25          	cmpl   $0x25,-0x14(%ebp)
- 59d:	0f 85 27 01 00 00    	jne    6ca <printf+0x19b>
-      if(c == 'd'){
- 5a3:	83 7d e4 64          	cmpl   $0x64,-0x1c(%ebp)
- 5a7:	75 2d                	jne    5d6 <printf+0xa7>
-        printint(fd, *ap, 10, 1);
- 5a9:	8b 45 e8             	mov    -0x18(%ebp),%eax
- 5ac:	8b 00                	mov    (%eax),%eax
- 5ae:	c7 44 24 0c 01 00 00 	movl   $0x1,0xc(%esp)
- 5b5:	00 
- 5b6:	c7 44 24 08 0a 00 00 	movl   $0xa,0x8(%esp)
- 5bd:	00 
- 5be:	89 44 24 04          	mov    %eax,0x4(%esp)
- 5c2:	8b 45 08             	mov    0x8(%ebp),%eax
- 5c5:	89 04 24             	mov    %eax,(%esp)
- 5c8:	e8 b3 fe ff ff       	call   480 <printint>
-        ap++;
- 5cd:	83 45 e8 04          	addl   $0x4,-0x18(%ebp)
- 5d1:	e9 ed 00 00 00       	jmp    6c3 <printf+0x194>
-      } else if(c == 'x' || c == 'p'){
- 5d6:	83 7d e4 78          	cmpl   $0x78,-0x1c(%ebp)
- 5da:	74 06                	je     5e2 <printf+0xb3>
- 5dc:	83 7d e4 70          	cmpl   $0x70,-0x1c(%ebp)
- 5e0:	75 2d                	jne    60f <printf+0xe0>
-        printint(fd, *ap, 16, 0);
- 5e2:	8b 45 e8             	mov    -0x18(%ebp),%eax
- 5e5:	8b 00                	mov    (%eax),%eax
- 5e7:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
- 5ee:	00 
- 5ef:	c7 44 24 08 10 00 00 	movl   $0x10,0x8(%esp)
- 5f6:	00 
- 5f7:	89 44 24 04          	mov    %eax,0x4(%esp)
- 5fb:	8b 45 08             	mov    0x8(%ebp),%eax
- 5fe:	89 04 24             	mov    %eax,(%esp)
- 601:	e8 7a fe ff ff       	call   480 <printint>
-        ap++;
- 606:	83 45 e8 04          	addl   $0x4,-0x18(%ebp)
- 60a:	e9 b4 00 00 00       	jmp    6c3 <printf+0x194>
-      } else if(c == 's'){
- 60f:	83 7d e4 73          	cmpl   $0x73,-0x1c(%ebp)
- 613:	75 46                	jne    65b <printf+0x12c>
-        s = (char*)*ap;
- 615:	8b 45 e8             	mov    -0x18(%ebp),%eax
- 618:	8b 00                	mov    (%eax),%eax
- 61a:	89 45 f4             	mov    %eax,-0xc(%ebp)
-        ap++;
- 61d:	83 45 e8 04          	addl   $0x4,-0x18(%ebp)
-        if(s == 0)
- 621:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
- 625:	75 27                	jne    64e <printf+0x11f>
-          s = "(null)";
- 627:	c7 45 f4 43 09 00 00 	movl   $0x943,-0xc(%ebp)
-        while(*s != 0){
- 62e:	eb 1e                	jmp    64e <printf+0x11f>
-          putc(fd, *s);
- 630:	8b 45 f4             	mov    -0xc(%ebp),%eax
- 633:	0f b6 00             	movzbl (%eax),%eax
- 636:	0f be c0             	movsbl %al,%eax
- 639:	89 44 24 04          	mov    %eax,0x4(%esp)
- 63d:	8b 45 08             	mov    0x8(%ebp),%eax
- 640:	89 04 24             	mov    %eax,(%esp)
- 643:	e8 10 fe ff ff       	call   458 <putc>
-          s++;
- 648:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
- 64c:	eb 01                	jmp    64f <printf+0x120>
-      } else if(c == 's'){
-        s = (char*)*ap;
-        ap++;
-        if(s == 0)
-          s = "(null)";
-        while(*s != 0){
- 64e:	90                   	nop
- 64f:	8b 45 f4             	mov    -0xc(%ebp),%eax
- 652:	0f b6 00             	movzbl (%eax),%eax
- 655:	84 c0                	test   %al,%al
- 657:	75 d7                	jne    630 <printf+0x101>
- 659:	eb 68                	jmp    6c3 <printf+0x194>
-          putc(fd, *s);
-          s++;
-        }
-      } else if(c == 'c'){
- 65b:	83 7d e4 63          	cmpl   $0x63,-0x1c(%ebp)
- 65f:	75 1d                	jne    67e <printf+0x14f>
-        putc(fd, *ap);
- 661:	8b 45 e8             	mov    -0x18(%ebp),%eax
- 664:	8b 00                	mov    (%eax),%eax
- 666:	0f be c0             	movsbl %al,%eax
- 669:	89 44 24 04          	mov    %eax,0x4(%esp)
- 66d:	8b 45 08             	mov    0x8(%ebp),%eax
- 670:	89 04 24             	mov    %eax,(%esp)
- 673:	e8 e0 fd ff ff       	call   458 <putc>
-        ap++;
- 678:	83 45 e8 04          	addl   $0x4,-0x18(%ebp)
- 67c:	eb 45                	jmp    6c3 <printf+0x194>
-      } else if(c == '%'){
- 67e:	83 7d e4 25          	cmpl   $0x25,-0x1c(%ebp)
- 682:	75 17                	jne    69b <printf+0x16c>
-        putc(fd, c);
- 684:	8b 45 e4             	mov    -0x1c(%ebp),%eax
- 687:	0f be c0             	movsbl %al,%eax
- 68a:	89 44 24 04          	mov    %eax,0x4(%esp)
- 68e:	8b 45 08             	mov    0x8(%ebp),%eax
- 691:	89 04 24             	mov    %eax,(%esp)
- 694:	e8 bf fd ff ff       	call   458 <putc>
- 699:	eb 28                	jmp    6c3 <printf+0x194>
-      } else {
-        // Unknown % sequence.  Print it to draw attention.
-        putc(fd, '%');
- 69b:	c7 44 24 04 25 00 00 	movl   $0x25,0x4(%esp)
- 6a2:	00 
- 6a3:	8b 45 08             	mov    0x8(%ebp),%eax
- 6a6:	89 04 24             	mov    %eax,(%esp)
- 6a9:	e8 aa fd ff ff       	call   458 <putc>
-        putc(fd, c);
- 6ae:	8b 45 e4             	mov    -0x1c(%ebp),%eax
- 6b1:	0f be c0             	movsbl %al,%eax
- 6b4:	89 44 24 04          	mov    %eax,0x4(%esp)
- 6b8:	8b 45 08             	mov    0x8(%ebp),%eax
- 6bb:	89 04 24             	mov    %eax,(%esp)
- 6be:	e8 95 fd ff ff       	call   458 <putc>
-      }
-      state = 0;
- 6c3:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
-  int c, i, state;
-  uint *ap;
-
-  state = 0;
-  ap = (uint*)(void*)&fmt + 1;
-  for(i = 0; fmt[i]; i++){
- 6ca:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)
- 6ce:	8b 55 0c             	mov    0xc(%ebp),%edx
- 6d1:	8b 45 f0             	mov    -0x10(%ebp),%eax
- 6d4:	01 d0                	add    %edx,%eax
- 6d6:	0f b6 00             	movzbl (%eax),%eax
- 6d9:	84 c0                	test   %al,%al
- 6db:	0f 85 70 fe ff ff    	jne    551 <printf+0x22>
-        putc(fd, c);
-      }
-      state = 0;
-    }
-  }
-}
- 6e1:	c9                   	leave  
- 6e2:	c3                   	ret    
- 6e3:	90                   	nop
-
-000006e4 <free>:
-static Header base;
-static Header *freep;
-
-void
-free(void *ap)
-{
- 6e4:	55                   	push   %ebp
- 6e5:	89 e5                	mov    %esp,%ebp
- 6e7:	83 ec 10             	sub    $0x10,%esp
-  Header *bp, *p;
-
-  bp = (Header*)ap - 1;
- 6ea:	8b 45 08             	mov    0x8(%ebp),%eax
- 6ed:	83 e8 08             	sub    $0x8,%eax
- 6f0:	89 45 f8             	mov    %eax,-0x8(%ebp)
-  for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
- 6f3:	a1 ac 0b 00 00       	mov    0xbac,%eax
- 6f8:	89 45 fc             	mov    %eax,-0x4(%ebp)
- 6fb:	eb 24                	jmp    721 <free+0x3d>
-    if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
- 6fd:	8b 45 fc             	mov    -0x4(%ebp),%eax
- 700:	8b 00                	mov    (%eax),%eax
- 702:	3b 45 fc             	cmp    -0x4(%ebp),%eax
- 705:	77 12                	ja     719 <free+0x35>
- 707:	8b 45 f8             	mov    -0x8(%ebp),%eax
- 70a:	3b 45 fc             	cmp    -0x4(%ebp),%eax
- 70d:	77 24                	ja     733 <free+0x4f>
- 70f:	8b 45 fc             	mov    -0x4(%ebp),%eax
- 712:	8b 00                	mov    (%eax),%eax
- 714:	3b 45 f8             	cmp    -0x8(%ebp),%eax
- 717:	77 1a                	ja     733 <free+0x4f>
-free(void *ap)
-{
-  Header *bp, *p;
-
-  bp = (Header*)ap - 1;
-  for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
- 719:	8b 45 fc             	mov    -0x4(%ebp),%eax
- 71c:	8b 00                	mov    (%eax),%eax
- 71e:	89 45 fc             	mov    %eax,-0x4(%ebp)
- 721:	8b 45 f8             	mov    -0x8(%ebp),%eax
- 724:	3b 45 fc             	cmp    -0x4(%ebp),%eax
- 727:	76 d4                	jbe    6fd <free+0x19>
- 729:	8b 45 fc             	mov    -0x4(%ebp),%eax
- 72c:	8b 00                	mov    (%eax),%eax
- 72e:	3b 45 f8             	cmp    -0x8(%ebp),%eax
- 731:	76 ca                	jbe    6fd <free+0x19>
-    if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
-      break;
-  if(bp + bp->s.size == p->s.ptr){
- 733:	8b 45 f8             	mov    -0x8(%ebp),%eax
- 736:	8b 40 04             	mov    0x4(%eax),%eax
- 739:	c1 e0 03             	shl    $0x3,%eax
- 73c:	89 c2                	mov    %eax,%edx
- 73e:	03 55 f8             	add    -0x8(%ebp),%edx
- 741:	8b 45 fc             	mov    -0x4(%ebp),%eax
- 744:	8b 00                	mov    (%eax),%eax
- 746:	39 c2                	cmp    %eax,%edx
- 748:	75 24                	jne    76e <free+0x8a>
-    bp->s.size += p->s.ptr->s.size;
- 74a:	8b 45 f8             	mov    -0x8(%ebp),%eax
- 74d:	8b 50 04             	mov    0x4(%eax),%edx
- 750:	8b 45 fc             	mov    -0x4(%ebp),%eax
- 753:	8b 00                	mov    (%eax),%eax
- 755:	8b 40 04             	mov    0x4(%eax),%eax
- 758:	01 c2                	add    %eax,%edx
- 75a:	8b 45 f8             	mov    -0x8(%ebp),%eax
- 75d:	89 50 04             	mov    %edx,0x4(%eax)
-    bp->s.ptr = p->s.ptr->s.ptr;
- 760:	8b 45 fc             	mov    -0x4(%ebp),%eax
- 763:	8b 00                	mov    (%eax),%eax
- 765:	8b 10                	mov    (%eax),%edx
- 767:	8b 45 f8             	mov    -0x8(%ebp),%eax
- 76a:	89 10                	mov    %edx,(%eax)
- 76c:	eb 0a                	jmp    778 <free+0x94>
-  } else
-    bp->s.ptr = p->s.ptr;
- 76e:	8b 45 fc             	mov    -0x4(%ebp),%eax
- 771:	8b 10                	mov    (%eax),%edx
- 773:	8b 45 f8             	mov    -0x8(%ebp),%eax
- 776:	89 10                	mov    %edx,(%eax)
-  if(p + p->s.size == bp){
- 778:	8b 45 fc             	mov    -0x4(%ebp),%eax
- 77b:	8b 40 04             	mov    0x4(%eax),%eax
- 77e:	c1 e0 03             	shl    $0x3,%eax
- 781:	03 45 fc             	add    -0x4(%ebp),%eax
- 784:	3b 45 f8             	cmp    -0x8(%ebp),%eax
- 787:	75 20                	jne    7a9 <free+0xc5>
-    p->s.size += bp->s.size;
- 789:	8b 45 fc             	mov    -0x4(%ebp),%eax
- 78c:	8b 50 04             	mov    0x4(%eax),%edx
- 78f:	8b 45 f8             	mov    -0x8(%ebp),%eax
- 792:	8b 40 04             	mov    0x4(%eax),%eax
- 795:	01 c2                	add    %eax,%edx
- 797:	8b 45 fc             	mov    -0x4(%ebp),%eax
- 79a:	89 50 04             	mov    %edx,0x4(%eax)
-    p->s.ptr = bp->s.ptr;
- 79d:	8b 45 f8             	mov    -0x8(%ebp),%eax
- 7a0:	8b 10                	mov    (%eax),%edx
- 7a2:	8b 45 fc             	mov    -0x4(%ebp),%eax
- 7a5:	89 10                	mov    %edx,(%eax)
- 7a7:	eb 08                	jmp    7b1 <free+0xcd>
-  } else
-    p->s.ptr = bp;
- 7a9:	8b 45 fc             	mov    -0x4(%ebp),%eax
- 7ac:	8b 55 f8             	mov    -0x8(%ebp),%edx
- 7af:	89 10                	mov    %edx,(%eax)
-  freep = p;
- 7b1:	8b 45 fc             	mov    -0x4(%ebp),%eax
- 7b4:	a3 ac 0b 00 00       	mov    %eax,0xbac
-}
- 7b9:	c9                   	leave  
- 7ba:	c3                   	ret    
-
-000007bb <morecore>:
-
-static Header*
-morecore(uint nu)
-{
- 7bb:	55                   	push   %ebp
- 7bc:	89 e5                	mov    %esp,%ebp
- 7be:	83 ec 28             	sub    $0x28,%esp
-  char *p;
-  Header *hp;
-
-  if(nu < 4096)
- 7c1:	81 7d 08 ff 0f 00 00 	cmpl   $0xfff,0x8(%ebp)
- 7c8:	77 07                	ja     7d1 <morecore+0x16>
-    nu = 4096;
- 7ca:	c7 45 08 00 10 00 00 	movl   $0x1000,0x8(%ebp)
-  p = sbrk(nu * sizeof(Header));
- 7d1:	8b 45 08             	mov    0x8(%ebp),%eax
- 7d4:	c1 e0 03             	shl    $0x3,%eax
- 7d7:	89 04 24             	mov    %eax,(%esp)
- 7da:	e8 39 fc ff ff       	call   418 <sbrk>
- 7df:	89 45 f4             	mov    %eax,-0xc(%ebp)
-  if(p == (char*)-1)
- 7e2:	83 7d f4 ff          	cmpl   $0xffffffff,-0xc(%ebp)
- 7e6:	75 07                	jne    7ef <morecore+0x34>
-    return 0;
- 7e8:	b8 00 00 00 00       	mov    $0x0,%eax
- 7ed:	eb 22                	jmp    811 <morecore+0x56>
-  hp = (Header*)p;
- 7ef:	8b 45 f4             	mov    -0xc(%ebp),%eax
- 7f2:	89 45 f0             	mov    %eax,-0x10(%ebp)
-  hp->s.size = nu;
- 7f5:	8b 45 f0             	mov    -0x10(%ebp),%eax
- 7f8:	8b 55 08             	mov    0x8(%ebp),%edx
- 7fb:	89 50 04             	mov    %edx,0x4(%eax)
-  free((void*)(hp + 1));
- 7fe:	8b 45 f0             	mov    -0x10(%ebp),%eax
- 801:	83 c0 08             	add    $0x8,%eax
- 804:	89 04 24             	mov    %eax,(%esp)
- 807:	e8 d8 fe ff ff       	call   6e4 <free>
-  return freep;
- 80c:	a1 ac 0b 00 00       	mov    0xbac,%eax
-}
- 811:	c9                   	leave  
- 812:	c3                   	ret    
-
-00000813 <malloc>:
-
-void*
-malloc(uint nbytes)
-{
- 813:	55                   	push   %ebp
- 814:	89 e5                	mov    %esp,%ebp
- 816:	83 ec 28             	sub    $0x28,%esp
-  Header *p, *prevp;
-  uint nunits;
-
-  nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;
- 819:	8b 45 08             	mov    0x8(%ebp),%eax
- 81c:	83 c0 07             	add    $0x7,%eax
- 81f:	c1 e8 03             	shr    $0x3,%eax
- 822:	83 c0 01             	add    $0x1,%eax
- 825:	89 45 ec             	mov    %eax,-0x14(%ebp)
-  if((prevp = freep) == 0){
- 828:	a1 ac 0b 00 00       	mov    0xbac,%eax
- 82d:	89 45 f0             	mov    %eax,-0x10(%ebp)
- 830:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
- 834:	75 23                	jne    859 <malloc+0x46>
-    base.s.ptr = freep = prevp = &base;
- 836:	c7 45 f0 a4 0b 00 00 	movl   $0xba4,-0x10(%ebp)
- 83d:	8b 45 f0             	mov    -0x10(%ebp),%eax
- 840:	a3 ac 0b 00 00       	mov    %eax,0xbac
- 845:	a1 ac 0b 00 00       	mov    0xbac,%eax
- 84a:	a3 a4 0b 00 00       	mov    %eax,0xba4
-    base.s.size = 0;
- 84f:	c7 05 a8 0b 00 00 00 	movl   $0x0,0xba8
- 856:	00 00 00 
-  }
-  for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
- 859:	8b 45 f0             	mov    -0x10(%ebp),%eax
- 85c:	8b 00                	mov    (%eax),%eax
- 85e:	89 45 f4             	mov    %eax,-0xc(%ebp)
-    if(p->s.size >= nunits){
- 861:	8b 45 f4             	mov    -0xc(%ebp),%eax
- 864:	8b 40 04             	mov    0x4(%eax),%eax
- 867:	3b 45 ec             	cmp    -0x14(%ebp),%eax
- 86a:	72 4d                	jb     8b9 <malloc+0xa6>
-      if(p->s.size == nunits)
- 86c:	8b 45 f4             	mov    -0xc(%ebp),%eax
- 86f:	8b 40 04             	mov    0x4(%eax),%eax
- 872:	3b 45 ec             	cmp    -0x14(%ebp),%eax
- 875:	75 0c                	jne    883 <malloc+0x70>
-        prevp->s.ptr = p->s.ptr;
- 877:	8b 45 f4             	mov    -0xc(%ebp),%eax
- 87a:	8b 10                	mov    (%eax),%edx
- 87c:	8b 45 f0             	mov    -0x10(%ebp),%eax
- 87f:	89 10                	mov    %edx,(%eax)
- 881:	eb 26                	jmp    8a9 <malloc+0x96>
-      else {
-        p->s.size -= nunits;
- 883:	8b 45 f4             	mov    -0xc(%ebp),%eax
- 886:	8b 40 04             	mov    0x4(%eax),%eax
- 889:	89 c2                	mov    %eax,%edx
- 88b:	2b 55 ec             	sub    -0x14(%ebp),%edx
- 88e:	8b 45 f4             	mov    -0xc(%ebp),%eax
- 891:	89 50 04             	mov    %edx,0x4(%eax)
-        p += p->s.size;
- 894:	8b 45 f4             	mov    -0xc(%ebp),%eax
- 897:	8b 40 04             	mov    0x4(%eax),%eax
- 89a:	c1 e0 03             	shl    $0x3,%eax
- 89d:	01 45 f4             	add    %eax,-0xc(%ebp)
-        p->s.size = nunits;
- 8a0:	8b 45 f4             	mov    -0xc(%ebp),%eax
- 8a3:	8b 55 ec             	mov    -0x14(%ebp),%edx
- 8a6:	89 50 04             	mov    %edx,0x4(%eax)
-      }
-      freep = prevp;
- 8a9:	8b 45 f0             	mov    -0x10(%ebp),%eax
- 8ac:	a3 ac 0b 00 00       	mov    %eax,0xbac
-      return (void*)(p + 1);
- 8b1:	8b 45 f4             	mov    -0xc(%ebp),%eax
- 8b4:	83 c0 08             	add    $0x8,%eax
- 8b7:	eb 38                	jmp    8f1 <malloc+0xde>
-    }
-    if(p == freep)
- 8b9:	a1 ac 0b 00 00       	mov    0xbac,%eax
- 8be:	39 45 f4             	cmp    %eax,-0xc(%ebp)
- 8c1:	75 1b                	jne    8de <malloc+0xcb>
-      if((p = morecore(nunits)) == 0)
- 8c3:	8b 45 ec             	mov    -0x14(%ebp),%eax
- 8c6:	89 04 24             	mov    %eax,(%esp)
- 8c9:	e8 ed fe ff ff       	call   7bb <morecore>
- 8ce:	89 45 f4             	mov    %eax,-0xc(%ebp)
- 8d1:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
- 8d5:	75 07                	jne    8de <malloc+0xcb>
-        return 0;
- 8d7:	b8 00 00 00 00       	mov    $0x0,%eax
- 8dc:	eb 13                	jmp    8f1 <malloc+0xde>
-  nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;
-  if((prevp = freep) == 0){
-    base.s.ptr = freep = prevp = &base;
-    base.s.size = 0;
-  }
-  for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
- 8de:	8b 45 f4             	mov    -0xc(%ebp),%eax
- 8e1:	89 45 f0             	mov    %eax,-0x10(%ebp)
- 8e4:	8b 45 f4             	mov    -0xc(%ebp),%eax
- 8e7:	8b 00                	mov    (%eax),%eax
- 8e9:	89 45 f4             	mov    %eax,-0xc(%ebp)
-      return (void*)(p + 1);
-    }
-    if(p == freep)
-      if((p = morecore(nunits)) == 0)
-        return 0;
-  }
- 8ec:	e9 70 ff ff ff       	jmp    861 <malloc+0x4e>
-}
- 8f1:	c9                   	leave  
- 8f2:	c3                   	ret    
diff --git a/xv6/init.c b/xv6/init.c
deleted file mode 100644
index 1199333..0000000
--- a/xv6/init.c
+++ /dev/null
@@ -1,37 +0,0 @@
-// init: The initial user-level program
-
-#include "types.h"
-#include "stat.h"
-#include "user.h"
-#include "fcntl.h"
-
-char *argv[] = { "sh", 0 };
-
-int
-main(void)
-{
-  int pid, wpid;
-
-  if(open("console", O_RDWR) < 0){
-    mknod("console", 1, 1);
-    open("console", O_RDWR);
-  }
-  dup(0);  // stdout
-  dup(0);  // stderr
-
-  for(;;){
-    printf(1, "init: starting sh\n");
-    pid = fork();
-    if(pid < 0){
-      printf(1, "init: fork failed\n");
-      exit(EXIT_STATUS_DEFAULT);
-    }
-    if(pid == 0){
-      exec("sh", argv);
-      printf(1, "init: exec sh failed\n");
-      exit(EXIT_STATUS_DEFAULT);
-    }
-    while((wpid=wait(0)) >= 0 && wpid != pid)
-      printf(1, "zombie!\n");
-  }
-}
diff --git a/xv6/init.d b/xv6/init.d
deleted file mode 100644
index cc4751f..0000000
--- a/xv6/init.d
+++ /dev/null
@@ -1 +0,0 @@
-init.o: init.c types.h stat.h user.h fcntl.h
diff --git a/xv6/init.sym b/xv6/init.sym
deleted file mode 100644
index 983520e..0000000
--- a/xv6/init.sym
+++ /dev/null
@@ -1,66 +0,0 @@
-00000000 .text
-000008f3 .rodata
-0000094c .eh_frame
-00000b88 .data
-00000ba4 .bss
-00000000 .comment
-00000000 .debug_aranges
-00000000 .debug_info
-00000000 .debug_abbrev
-00000000 .debug_line
-00000000 .debug_str
-00000000 .debug_loc
-00000000 init.c
-00000000 ulib.c
-0000012c stosb
-00000000 printf.c
-00000458 putc
-00000480 printint
-00000b90 digits.923
-00000000 umalloc.c
-00000ba4 base
-00000bac freep
-000007bb morecore
-00000151 strcpy
-00000430 waitpid
-0000052f printf
-00000b88 argv
-0000034a memmove
-000003d8 mknod
-00000448 foreground
-00000242 gets
-00000410 getpid
-00000813 malloc
-00000420 sleep
-00000450 set_priority
-00000438 wait_stat
-000003a0 pipe
-000003b0 write
-000003e8 fstat
-000003c0 kill
-00000400 chdir
-000003c8 exec
-00000398 wait
-000003a8 read
-000003e0 unlink
-00000388 fork
-00000418 sbrk
-00000428 uptime
-00000ba4 __bss_start
-000001eb memset
-00000000 main
-00000185 strcmp
-00000408 dup
-00000440 list_pgroup
-000002b1 stat
-00000ba4 _edata
-00000bb0 _end
-000003f0 link
-00000390 exit
-000002ff atoi
-000001c6 strlen
-000003d0 open
-0000020f strchr
-000003f8 mkdir
-000003b8 close
-000006e4 free
diff --git a/xv6/initcode b/xv6/initcode
deleted file mode 100755
index 773d26c..0000000
Binary files a/xv6/initcode and /dev/null differ
diff --git a/xv6/initcode.S b/xv6/initcode.S
deleted file mode 100644
index 748b6a7..0000000
--- a/xv6/initcode.S
+++ /dev/null
@@ -1,31 +0,0 @@
-# Initial process execs /init.
-
-#include "syscall.h"
-#include "traps.h"
-
-
-# exec(init, argv)
-.globl start
-start:
-  pushl $argv
-  pushl $init
-  pushl $0  // where caller pc would be
-  movl $SYS_exec, %eax
-  int $T_SYSCALL
-
-# for(;;) exit(EXIT_STATUS_DEFAULT);
-exit:
-  movl $SYS_exit, %eax
-  int $T_SYSCALL
-  jmp exit
-
-# char init[] = "/init\0";
-init:
-  .string "/init\0"
-
-# char *argv[] = { init, 0 };
-.p2align 2
-argv:
-  .long init
-  .long 0
-
diff --git a/xv6/initcode.asm b/xv6/initcode.asm
deleted file mode 100644
index 19e919c..0000000
--- a/xv6/initcode.asm
+++ /dev/null
@@ -1,43 +0,0 @@
-
-initcode.o:     file format elf32-i386
-
-
-Disassembly of section .text:
-
-00000000 <start>:
-
-
-# exec(init, argv)
-.globl start
-start:
-  pushl $argv
-   0:	68 24 00 00 00       	push   $0x24
-  pushl $init
-   5:	68 1c 00 00 00       	push   $0x1c
-  pushl $0  // where caller pc would be
-   a:	6a 00                	push   $0x0
-  movl $SYS_exec, %eax
-   c:	b8 07 00 00 00       	mov    $0x7,%eax
-  int $T_SYSCALL
-  11:	cd 40                	int    $0x40
-
-00000013 <exit>:
-
-# for(;;) exit(EXIT_STATUS_DEFAULT);
-exit:
-  movl $SYS_exit, %eax
-  13:	b8 02 00 00 00       	mov    $0x2,%eax
-  int $T_SYSCALL
-  18:	cd 40                	int    $0x40
-  jmp exit
-  1a:	eb f7                	jmp    13 <exit>
-
-0000001c <init>:
-  1c:	2f                   	das    
-  1d:	69 6e 69 74 00 00 90 	imul   $0x90000074,0x69(%esi),%ebp
-
-00000024 <argv>:
-  24:	1c 00                	sbb    $0x0,%al
-  26:	00 00                	add    %al,(%eax)
-  28:	00 00                	add    %al,(%eax)
-	...
diff --git a/xv6/initcode.d b/xv6/initcode.d
deleted file mode 100644
index ab1af4d..0000000
--- a/xv6/initcode.d
+++ /dev/null
@@ -1 +0,0 @@
-initcode.o: initcode.S syscall.h traps.h
diff --git a/xv6/ioapic.c b/xv6/ioapic.c
deleted file mode 100644
index d343611..0000000
--- a/xv6/ioapic.c
+++ /dev/null
@@ -1,81 +0,0 @@
-// The I/O APIC manages hardware interrupts for an SMP system.
-// http://www.intel.com/design/chipsets/datashts/29056601.pdf
-// See also picirq.c.
-
-#include "types.h"
-#include "defs.h"
-#include "traps.h"
-
-#define IOAPIC  0xFEC00000   // Default physical address of IO APIC
-
-#define REG_ID     0x00  // Register index: ID
-#define REG_VER    0x01  // Register index: version
-#define REG_TABLE  0x10  // Redirection table base
-
-// The redirection table starts at REG_TABLE and uses
-// two registers to configure each interrupt.  
-// The first (low) register in a pair contains configuration bits.
-// The second (high) register contains a bitmask telling which
-// CPUs can serve that interrupt.
-#define INT_DISABLED   0x00010000  // Interrupt disabled
-#define INT_LEVEL      0x00008000  // Level-triggered (vs edge-)
-#define INT_ACTIVELOW  0x00002000  // Active low (vs high)
-#define INT_LOGICAL    0x00000800  // Destination is CPU id (vs APIC ID)
-
-volatile struct ioapic *ioapic;
-
-// IO APIC MMIO structure: write reg, then read or write data.
-struct ioapic {
-  uint reg;
-  uint pad[3];
-  uint data;
-};
-
-static uint
-ioapicread(int reg)
-{
-  ioapic->reg = reg;
-  return ioapic->data;
-}
-
-static void
-ioapicwrite(int reg, uint data)
-{
-  ioapic->reg = reg;
-  ioapic->data = data;
-}
-
-void
-ioapicinit(void)
-{
-  int i, id, maxintr;
-
-  if(!ismp)
-    return;
-
-  ioapic = (volatile struct ioapic*)IOAPIC;
-  maxintr = (ioapicread(REG_VER) >> 16) & 0xFF;
-  id = ioapicread(REG_ID) >> 24;
-  if(id != ioapicid)
-    cprintf("ioapicinit: id isn't equal to ioapicid; not a MP\n");
-
-  // Mark all interrupts edge-triggered, active high, disabled,
-  // and not routed to any CPUs.
-  for(i = 0; i <= maxintr; i++){
-    ioapicwrite(REG_TABLE+2*i, INT_DISABLED | (T_IRQ0 + i));
-    ioapicwrite(REG_TABLE+2*i+1, 0);
-  }
-}
-
-void
-ioapicenable(int irq, int cpunum)
-{
-  if(!ismp)
-    return;
-
-  // Mark interrupt edge-triggered, active high,
-  // enabled, and routed to the given cpunum,
-  // which happens to be that cpu's APIC ID.
-  ioapicwrite(REG_TABLE+2*irq, T_IRQ0 + irq);
-  ioapicwrite(REG_TABLE+2*irq+1, cpunum << 24);
-}
diff --git a/xv6/ioapic.d b/xv6/ioapic.d
deleted file mode 100644
index 1ee4aaf..0000000
--- a/xv6/ioapic.d
+++ /dev/null
@@ -1 +0,0 @@
-ioapic.o: ioapic.c types.h defs.h traps.h
diff --git a/xv6/kalloc.c b/xv6/kalloc.c
deleted file mode 100644
index 417c20f..0000000
--- a/xv6/kalloc.c
+++ /dev/null
@@ -1,96 +0,0 @@
-// Physical memory allocator, intended to allocate
-// memory for user processes, kernel stacks, page table pages,
-// and pipe buffers. Allocates 4096-byte pages.
-
-#include "types.h"
-#include "defs.h"
-#include "param.h"
-#include "memlayout.h"
-#include "mmu.h"
-#include "spinlock.h"
-
-void freerange(void *vstart, void *vend);
-extern char end[]; // first address after kernel loaded from ELF file
-
-struct run {
-  struct run *next;
-};
-
-struct {
-  struct spinlock lock;
-  int use_lock;
-  struct run *freelist;
-} kmem;
-
-// Initialization happens in two phases.
-// 1. main() calls kinit1() while still using entrypgdir to place just
-// the pages mapped by entrypgdir on free list.
-// 2. main() calls kinit2() with the rest of the physical pages
-// after installing a full page table that maps them on all cores.
-void
-kinit1(void *vstart, void *vend)
-{
-  initlock(&kmem.lock, "kmem");
-  kmem.use_lock = 0;
-  freerange(vstart, vend);
-}
-
-void
-kinit2(void *vstart, void *vend)
-{
-  freerange(vstart, vend);
-  kmem.use_lock = 1;
-}
-
-void
-freerange(void *vstart, void *vend)
-{
-  char *p;
-  p = (char*)PGROUNDUP((uint)vstart);
-  for(; p + PGSIZE <= (char*)vend; p += PGSIZE)
-    kfree(p);
-}
-
-//PAGEBREAK: 21
-// Free the page of physical memory pointed at by v,
-// which normally should have been returned by a
-// call to kalloc().  (The exception is when
-// initializing the allocator; see kinit above.)
-void
-kfree(char *v)
-{
-  struct run *r;
-
-  if((uint)v % PGSIZE || v < end || v2p(v) >= PHYSTOP)
-    panic("kfree");
-
-  // Fill with junk to catch dangling refs.
-  memset(v, 1, PGSIZE);
-
-  if(kmem.use_lock)
-    acquire(&kmem.lock);
-  r = (struct run*)v;
-  r->next = kmem.freelist;
-  kmem.freelist = r;
-  if(kmem.use_lock)
-    release(&kmem.lock);
-}
-
-// Allocate one 4096-byte page of physical memory.
-// Returns a pointer that the kernel can use.
-// Returns 0 if the memory cannot be allocated.
-char*
-kalloc(void)
-{
-  struct run *r;
-
-  if(kmem.use_lock)
-    acquire(&kmem.lock);
-  r = kmem.freelist;
-  if(r)
-    kmem.freelist = r->next;
-  if(kmem.use_lock)
-    release(&kmem.lock);
-  return (char*)r;
-}
-
diff --git a/xv6/kalloc.d b/xv6/kalloc.d
deleted file mode 100644
index 1b7ace8..0000000
--- a/xv6/kalloc.d
+++ /dev/null
@@ -1 +0,0 @@
-kalloc.o: kalloc.c types.h defs.h param.h memlayout.h mmu.h spinlock.h
diff --git a/xv6/kbd.c b/xv6/kbd.c
deleted file mode 100644
index 32c1463..0000000
--- a/xv6/kbd.c
+++ /dev/null
@@ -1,50 +0,0 @@
-#include "types.h"
-#include "x86.h"
-#include "defs.h"
-#include "kbd.h"
-
-int
-kbdgetc(void)
-{
-  static uint shift;
-  static uchar *charcode[4] = {
-    normalmap, shiftmap, ctlmap, ctlmap
-  };
-  uint st, data, c;
-
-  st = inb(KBSTATP);
-  if((st & KBS_DIB) == 0)
-    return -1;
-  data = inb(KBDATAP);
-
-  if(data == 0xE0){
-    shift |= E0ESC;
-    return 0;
-  } else if(data & 0x80){
-    // Key released
-    data = (shift & E0ESC ? data : data & 0x7F);
-    shift &= ~(shiftcode[data] | E0ESC);
-    return 0;
-  } else if(shift & E0ESC){
-    // Last character was an E0 escape; or with 0x80
-    data |= 0x80;
-    shift &= ~E0ESC;
-  }
-
-  shift |= shiftcode[data];
-  shift ^= togglecode[data];
-  c = charcode[shift & (CTL | SHIFT)][data];
-  if(shift & CAPSLOCK){
-    if('a' <= c && c <= 'z')
-      c += 'A' - 'a';
-    else if('A' <= c && c <= 'Z')
-      c += 'a' - 'A';
-  }
-  return c;
-}
-
-void
-kbdintr(void)
-{
-  consoleintr(kbdgetc);
-}
diff --git a/xv6/kbd.d b/xv6/kbd.d
deleted file mode 100644
index 49f7e65..0000000
--- a/xv6/kbd.d
+++ /dev/null
@@ -1 +0,0 @@
-kbd.o: kbd.c types.h x86.h defs.h kbd.h
diff --git a/xv6/kbd.h b/xv6/kbd.h
deleted file mode 100644
index babbd6e..0000000
--- a/xv6/kbd.h
+++ /dev/null
@@ -1,112 +0,0 @@
-// PC keyboard interface constants
-
-#define KBSTATP         0x64    // kbd controller status port(I)
-#define KBS_DIB         0x01    // kbd data in buffer
-#define KBDATAP         0x60    // kbd data port(I)
-
-#define NO              0
-
-#define SHIFT           (1<<0)
-#define CTL             (1<<1)
-#define ALT             (1<<2)
-
-#define CAPSLOCK        (1<<3)
-#define NUMLOCK         (1<<4)
-#define SCROLLLOCK      (1<<5)
-
-#define E0ESC           (1<<6)
-
-// Special keycodes
-#define KEY_HOME        0xE0
-#define KEY_END         0xE1
-#define KEY_UP          0xE2
-#define KEY_DN          0xE3
-#define KEY_LF          0xE4
-#define KEY_RT          0xE5
-#define KEY_PGUP        0xE6
-#define KEY_PGDN        0xE7
-#define KEY_INS         0xE8
-#define KEY_DEL         0xE9
-
-// C('A') == Control-A
-#define C(x) (x - '@')
-
-static uchar shiftcode[256] =
-{
-  [0x1D] CTL,
-  [0x2A] SHIFT,
-  [0x36] SHIFT,
-  [0x38] ALT,
-  [0x9D] CTL,
-  [0xB8] ALT
-};
-
-static uchar togglecode[256] =
-{
-  [0x3A] CAPSLOCK,
-  [0x45] NUMLOCK,
-  [0x46] SCROLLLOCK
-};
-
-static uchar normalmap[256] =
-{
-  NO,   0x1B, '1',  '2',  '3',  '4',  '5',  '6',  // 0x00
-  '7',  '8',  '9',  '0',  '-',  '=',  '\b', '\t',
-  'q',  'w',  'e',  'r',  't',  'y',  'u',  'i',  // 0x10
-  'o',  'p',  '[',  ']',  '\n', NO,   'a',  's',
-  'd',  'f',  'g',  'h',  'j',  'k',  'l',  ';',  // 0x20
-  '\'', '`',  NO,   '\\', 'z',  'x',  'c',  'v',
-  'b',  'n',  'm',  ',',  '.',  '/',  NO,   '*',  // 0x30
-  NO,   ' ',  NO,   NO,   NO,   NO,   NO,   NO,
-  NO,   NO,   NO,   NO,   NO,   NO,   NO,   '7',  // 0x40
-  '8',  '9',  '-',  '4',  '5',  '6',  '+',  '1',
-  '2',  '3',  '0',  '.',  NO,   NO,   NO,   NO,   // 0x50
-  [0x9C] '\n',      // KP_Enter
-  [0xB5] '/',       // KP_Div
-  [0xC8] KEY_UP,    [0xD0] KEY_DN,
-  [0xC9] KEY_PGUP,  [0xD1] KEY_PGDN,
-  [0xCB] KEY_LF,    [0xCD] KEY_RT,
-  [0x97] KEY_HOME,  [0xCF] KEY_END,
-  [0xD2] KEY_INS,   [0xD3] KEY_DEL
-};
-
-static uchar shiftmap[256] =
-{
-  NO,   033,  '!',  '@',  '#',  '$',  '%',  '^',  // 0x00
-  '&',  '*',  '(',  ')',  '_',  '+',  '\b', '\t',
-  'Q',  'W',  'E',  'R',  'T',  'Y',  'U',  'I',  // 0x10
-  'O',  'P',  '{',  '}',  '\n', NO,   'A',  'S',
-  'D',  'F',  'G',  'H',  'J',  'K',  'L',  ':',  // 0x20
-  '"',  '~',  NO,   '|',  'Z',  'X',  'C',  'V',
-  'B',  'N',  'M',  '<',  '>',  '?',  NO,   '*',  // 0x30
-  NO,   ' ',  NO,   NO,   NO,   NO,   NO,   NO,
-  NO,   NO,   NO,   NO,   NO,   NO,   NO,   '7',  // 0x40
-  '8',  '9',  '-',  '4',  '5',  '6',  '+',  '1',
-  '2',  '3',  '0',  '.',  NO,   NO,   NO,   NO,   // 0x50
-  [0x9C] '\n',      // KP_Enter
-  [0xB5] '/',       // KP_Div
-  [0xC8] KEY_UP,    [0xD0] KEY_DN,
-  [0xC9] KEY_PGUP,  [0xD1] KEY_PGDN,
-  [0xCB] KEY_LF,    [0xCD] KEY_RT,
-  [0x97] KEY_HOME,  [0xCF] KEY_END,
-  [0xD2] KEY_INS,   [0xD3] KEY_DEL
-};
-
-static uchar ctlmap[256] =
-{
-  NO,      NO,      NO,      NO,      NO,      NO,      NO,      NO,
-  NO,      NO,      NO,      NO,      NO,      NO,      NO,      NO,
-  C('Q'),  C('W'),  C('E'),  C('R'),  C('T'),  C('Y'),  C('U'),  C('I'),
-  C('O'),  C('P'),  NO,      NO,      '\r',    NO,      C('A'),  C('S'),
-  C('D'),  C('F'),  C('G'),  C('H'),  C('J'),  C('K'),  C('L'),  NO,
-  NO,      NO,      NO,      C('\\'), C('Z'),  C('X'),  C('C'),  C('V'),
-  C('B'),  C('N'),  C('M'),  NO,      NO,      C('/'),  NO,      NO,
-  [0x9C] '\r',      // KP_Enter
-  [0xB5] C('/'),    // KP_Div
-  [0xC8] KEY_UP,    [0xD0] KEY_DN,
-  [0xC9] KEY_PGUP,  [0xD1] KEY_PGDN,
-  [0xCB] KEY_LF,    [0xCD] KEY_RT,
-  [0x97] KEY_HOME,  [0xCF] KEY_END,
-  [0xD2] KEY_INS,   [0xD3] KEY_DEL
-};
-
diff --git a/xv6/kernel.asm b/xv6/kernel.asm
deleted file mode 100644
index af0dd7d..0000000
--- a/xv6/kernel.asm
+++ /dev/null
@@ -1,19468 +0,0 @@
-
-kernel:     file format elf32-i386
-
-
-Disassembly of section .text:
-
-80100000 <multiboot_header>:
-80100000:	02 b0 ad 1b 00 00    	add    0x1bad(%eax),%dh
-80100006:	00 00                	add    %al,(%eax)
-80100008:	fe 4f 52             	decb   0x52(%edi)
-8010000b:	e4 0f                	in     $0xf,%al
-
-8010000c <entry>:
-
-# Entering xv6 on boot processor, with paging off.
-.globl entry
-entry:
-  # Turn on page size extension for 4Mbyte pages
-  movl    %cr4, %eax
-8010000c:	0f 20 e0             	mov    %cr4,%eax
-  orl     $(CR4_PSE), %eax
-8010000f:	83 c8 10             	or     $0x10,%eax
-  movl    %eax, %cr4
-80100012:	0f 22 e0             	mov    %eax,%cr4
-  # Set page directory
-  movl    $(V2P_WO(entrypgdir)), %eax
-80100015:	b8 00 b0 10 00       	mov    $0x10b000,%eax
-  movl    %eax, %cr3
-8010001a:	0f 22 d8             	mov    %eax,%cr3
-  # Turn on paging.
-  movl    %cr0, %eax
-8010001d:	0f 20 c0             	mov    %cr0,%eax
-  orl     $(CR0_PG|CR0_WP), %eax
-80100020:	0d 00 00 01 80       	or     $0x80010000,%eax
-  movl    %eax, %cr0
-80100025:	0f 22 c0             	mov    %eax,%cr0
-
-  # Set up the stack pointer.
-  movl $(stack + KSTACKSIZE), %esp
-80100028:	bc 70 d6 10 80       	mov    $0x8010d670,%esp
-
-  # Jump to main(), and switch to executing at
-  # high addresses. The indirect call is needed because
-  # the assembler produces a PC-relative instruction
-  # for a direct jump.
-  mov $main, %eax
-8010002d:	b8 cb 37 10 80       	mov    $0x801037cb,%eax
-  jmp *%eax
-80100032:	ff e0                	jmp    *%eax
-
-80100034 <binit>:
-  struct buf head;
-} bcache;
-
-void
-binit(void)
-{
-80100034:	55                   	push   %ebp
-80100035:	89 e5                	mov    %esp,%ebp
-80100037:	83 ec 28             	sub    $0x28,%esp
-  struct buf *b;
-
-  initlock(&bcache.lock, "bcache");
-8010003a:	c7 44 24 04 a8 91 10 	movl   $0x801091a8,0x4(%esp)
-80100041:	80 
-80100042:	c7 04 24 80 d6 10 80 	movl   $0x8010d680,(%esp)
-80100049:	e8 b8 53 00 00       	call   80105406 <initlock>
-
-//PAGEBREAK!
-  // Create linked list of buffers
-  bcache.head.prev = &bcache.head;
-8010004e:	c7 05 90 15 11 80 84 	movl   $0x80111584,0x80111590
-80100055:	15 11 80 
-  bcache.head.next = &bcache.head;
-80100058:	c7 05 94 15 11 80 84 	movl   $0x80111584,0x80111594
-8010005f:	15 11 80 
-  for(b = bcache.buf; b < bcache.buf+NBUF; b++){
-80100062:	c7 45 f4 b4 d6 10 80 	movl   $0x8010d6b4,-0xc(%ebp)
-80100069:	eb 3a                	jmp    801000a5 <binit+0x71>
-    b->next = bcache.head.next;
-8010006b:	8b 15 94 15 11 80    	mov    0x80111594,%edx
-80100071:	8b 45 f4             	mov    -0xc(%ebp),%eax
-80100074:	89 50 10             	mov    %edx,0x10(%eax)
-    b->prev = &bcache.head;
-80100077:	8b 45 f4             	mov    -0xc(%ebp),%eax
-8010007a:	c7 40 0c 84 15 11 80 	movl   $0x80111584,0xc(%eax)
-    b->dev = -1;
-80100081:	8b 45 f4             	mov    -0xc(%ebp),%eax
-80100084:	c7 40 04 ff ff ff ff 	movl   $0xffffffff,0x4(%eax)
-    bcache.head.next->prev = b;
-8010008b:	a1 94 15 11 80       	mov    0x80111594,%eax
-80100090:	8b 55 f4             	mov    -0xc(%ebp),%edx
-80100093:	89 50 0c             	mov    %edx,0xc(%eax)
-    bcache.head.next = b;
-80100096:	8b 45 f4             	mov    -0xc(%ebp),%eax
-80100099:	a3 94 15 11 80       	mov    %eax,0x80111594
-
-//PAGEBREAK!
-  // Create linked list of buffers
-  bcache.head.prev = &bcache.head;
-  bcache.head.next = &bcache.head;
-  for(b = bcache.buf; b < bcache.buf+NBUF; b++){
-8010009e:	81 45 f4 18 02 00 00 	addl   $0x218,-0xc(%ebp)
-801000a5:	81 7d f4 84 15 11 80 	cmpl   $0x80111584,-0xc(%ebp)
-801000ac:	72 bd                	jb     8010006b <binit+0x37>
-    b->prev = &bcache.head;
-    b->dev = -1;
-    bcache.head.next->prev = b;
-    bcache.head.next = b;
-  }
-}
-801000ae:	c9                   	leave  
-801000af:	c3                   	ret    
-
-801000b0 <bget>:
-// Look through buffer cache for sector on device dev.
-// If not found, allocate a buffer.
-// In either case, return B_BUSY buffer.
-static struct buf*
-bget(uint dev, uint sector)
-{
-801000b0:	55                   	push   %ebp
-801000b1:	89 e5                	mov    %esp,%ebp
-801000b3:	83 ec 28             	sub    $0x28,%esp
-  struct buf *b;
-
-  acquire(&bcache.lock);
-801000b6:	c7 04 24 80 d6 10 80 	movl   $0x8010d680,(%esp)
-801000bd:	e8 65 53 00 00       	call   80105427 <acquire>
-
- loop:
-  // Is the sector already cached?
-  for(b = bcache.head.next; b != &bcache.head; b = b->next){
-801000c2:	a1 94 15 11 80       	mov    0x80111594,%eax
-801000c7:	89 45 f4             	mov    %eax,-0xc(%ebp)
-801000ca:	eb 63                	jmp    8010012f <bget+0x7f>
-    if(b->dev == dev && b->sector == sector){
-801000cc:	8b 45 f4             	mov    -0xc(%ebp),%eax
-801000cf:	8b 40 04             	mov    0x4(%eax),%eax
-801000d2:	3b 45 08             	cmp    0x8(%ebp),%eax
-801000d5:	75 4f                	jne    80100126 <bget+0x76>
-801000d7:	8b 45 f4             	mov    -0xc(%ebp),%eax
-801000da:	8b 40 08             	mov    0x8(%eax),%eax
-801000dd:	3b 45 0c             	cmp    0xc(%ebp),%eax
-801000e0:	75 44                	jne    80100126 <bget+0x76>
-      if(!(b->flags & B_BUSY)){
-801000e2:	8b 45 f4             	mov    -0xc(%ebp),%eax
-801000e5:	8b 00                	mov    (%eax),%eax
-801000e7:	83 e0 01             	and    $0x1,%eax
-801000ea:	85 c0                	test   %eax,%eax
-801000ec:	75 23                	jne    80100111 <bget+0x61>
-        b->flags |= B_BUSY;
-801000ee:	8b 45 f4             	mov    -0xc(%ebp),%eax
-801000f1:	8b 00                	mov    (%eax),%eax
-801000f3:	89 c2                	mov    %eax,%edx
-801000f5:	83 ca 01             	or     $0x1,%edx
-801000f8:	8b 45 f4             	mov    -0xc(%ebp),%eax
-801000fb:	89 10                	mov    %edx,(%eax)
-        release(&bcache.lock);
-801000fd:	c7 04 24 80 d6 10 80 	movl   $0x8010d680,(%esp)
-80100104:	e8 80 53 00 00       	call   80105489 <release>
-        return b;
-80100109:	8b 45 f4             	mov    -0xc(%ebp),%eax
-8010010c:	e9 93 00 00 00       	jmp    801001a4 <bget+0xf4>
-      }
-      sleep(b, &bcache.lock);
-80100111:	c7 44 24 04 80 d6 10 	movl   $0x8010d680,0x4(%esp)
-80100118:	80 
-80100119:	8b 45 f4             	mov    -0xc(%ebp),%eax
-8010011c:	89 04 24             	mov    %eax,(%esp)
-8010011f:	e8 1d 50 00 00       	call   80105141 <sleep>
-      goto loop;
-80100124:	eb 9c                	jmp    801000c2 <bget+0x12>
-
-  acquire(&bcache.lock);
-
- loop:
-  // Is the sector already cached?
-  for(b = bcache.head.next; b != &bcache.head; b = b->next){
-80100126:	8b 45 f4             	mov    -0xc(%ebp),%eax
-80100129:	8b 40 10             	mov    0x10(%eax),%eax
-8010012c:	89 45 f4             	mov    %eax,-0xc(%ebp)
-8010012f:	81 7d f4 84 15 11 80 	cmpl   $0x80111584,-0xc(%ebp)
-80100136:	75 94                	jne    801000cc <bget+0x1c>
-  }
-
-  // Not cached; recycle some non-busy and clean buffer.
-  // "clean" because B_DIRTY and !B_BUSY means log.c
-  // hasn't yet committed the changes to the buffer.
-  for(b = bcache.head.prev; b != &bcache.head; b = b->prev){
-80100138:	a1 90 15 11 80       	mov    0x80111590,%eax
-8010013d:	89 45 f4             	mov    %eax,-0xc(%ebp)
-80100140:	eb 4d                	jmp    8010018f <bget+0xdf>
-    if((b->flags & B_BUSY) == 0 && (b->flags & B_DIRTY) == 0){
-80100142:	8b 45 f4             	mov    -0xc(%ebp),%eax
-80100145:	8b 00                	mov    (%eax),%eax
-80100147:	83 e0 01             	and    $0x1,%eax
-8010014a:	85 c0                	test   %eax,%eax
-8010014c:	75 38                	jne    80100186 <bget+0xd6>
-8010014e:	8b 45 f4             	mov    -0xc(%ebp),%eax
-80100151:	8b 00                	mov    (%eax),%eax
-80100153:	83 e0 04             	and    $0x4,%eax
-80100156:	85 c0                	test   %eax,%eax
-80100158:	75 2c                	jne    80100186 <bget+0xd6>
-      b->dev = dev;
-8010015a:	8b 45 f4             	mov    -0xc(%ebp),%eax
-8010015d:	8b 55 08             	mov    0x8(%ebp),%edx
-80100160:	89 50 04             	mov    %edx,0x4(%eax)
-      b->sector = sector;
-80100163:	8b 45 f4             	mov    -0xc(%ebp),%eax
-80100166:	8b 55 0c             	mov    0xc(%ebp),%edx
-80100169:	89 50 08             	mov    %edx,0x8(%eax)
-      b->flags = B_BUSY;
-8010016c:	8b 45 f4             	mov    -0xc(%ebp),%eax
-8010016f:	c7 00 01 00 00 00    	movl   $0x1,(%eax)
-      release(&bcache.lock);
-80100175:	c7 04 24 80 d6 10 80 	movl   $0x8010d680,(%esp)
-8010017c:	e8 08 53 00 00       	call   80105489 <release>
-      return b;
-80100181:	8b 45 f4             	mov    -0xc(%ebp),%eax
-80100184:	eb 1e                	jmp    801001a4 <bget+0xf4>
-  }
-
-  // Not cached; recycle some non-busy and clean buffer.
-  // "clean" because B_DIRTY and !B_BUSY means log.c
-  // hasn't yet committed the changes to the buffer.
-  for(b = bcache.head.prev; b != &bcache.head; b = b->prev){
-80100186:	8b 45 f4             	mov    -0xc(%ebp),%eax
-80100189:	8b 40 0c             	mov    0xc(%eax),%eax
-8010018c:	89 45 f4             	mov    %eax,-0xc(%ebp)
-8010018f:	81 7d f4 84 15 11 80 	cmpl   $0x80111584,-0xc(%ebp)
-80100196:	75 aa                	jne    80100142 <bget+0x92>
-      b->flags = B_BUSY;
-      release(&bcache.lock);
-      return b;
-    }
-  }
-  panic("bget: no buffers");
-80100198:	c7 04 24 af 91 10 80 	movl   $0x801091af,(%esp)
-8010019f:	e8 99 03 00 00       	call   8010053d <panic>
-}
-801001a4:	c9                   	leave  
-801001a5:	c3                   	ret    
-
-801001a6 <bread>:
-
-// Return a B_BUSY buf with the contents of the indicated disk sector.
-struct buf*
-bread(uint dev, uint sector)
-{
-801001a6:	55                   	push   %ebp
-801001a7:	89 e5                	mov    %esp,%ebp
-801001a9:	83 ec 28             	sub    $0x28,%esp
-  struct buf *b;
-
-  b = bget(dev, sector);
-801001ac:	8b 45 0c             	mov    0xc(%ebp),%eax
-801001af:	89 44 24 04          	mov    %eax,0x4(%esp)
-801001b3:	8b 45 08             	mov    0x8(%ebp),%eax
-801001b6:	89 04 24             	mov    %eax,(%esp)
-801001b9:	e8 f2 fe ff ff       	call   801000b0 <bget>
-801001be:	89 45 f4             	mov    %eax,-0xc(%ebp)
-  if(!(b->flags & B_VALID))
-801001c1:	8b 45 f4             	mov    -0xc(%ebp),%eax
-801001c4:	8b 00                	mov    (%eax),%eax
-801001c6:	83 e0 02             	and    $0x2,%eax
-801001c9:	85 c0                	test   %eax,%eax
-801001cb:	75 0b                	jne    801001d8 <bread+0x32>
-    iderw(b);
-801001cd:	8b 45 f4             	mov    -0xc(%ebp),%eax
-801001d0:	89 04 24             	mov    %eax,(%esp)
-801001d3:	e8 44 26 00 00       	call   8010281c <iderw>
-  return b;
-801001d8:	8b 45 f4             	mov    -0xc(%ebp),%eax
-}
-801001db:	c9                   	leave  
-801001dc:	c3                   	ret    
-
-801001dd <bwrite>:
-
-// Write b's contents to disk.  Must be B_BUSY.
-void
-bwrite(struct buf *b)
-{
-801001dd:	55                   	push   %ebp
-801001de:	89 e5                	mov    %esp,%ebp
-801001e0:	83 ec 18             	sub    $0x18,%esp
-  if((b->flags & B_BUSY) == 0)
-801001e3:	8b 45 08             	mov    0x8(%ebp),%eax
-801001e6:	8b 00                	mov    (%eax),%eax
-801001e8:	83 e0 01             	and    $0x1,%eax
-801001eb:	85 c0                	test   %eax,%eax
-801001ed:	75 0c                	jne    801001fb <bwrite+0x1e>
-    panic("bwrite");
-801001ef:	c7 04 24 c0 91 10 80 	movl   $0x801091c0,(%esp)
-801001f6:	e8 42 03 00 00       	call   8010053d <panic>
-  b->flags |= B_DIRTY;
-801001fb:	8b 45 08             	mov    0x8(%ebp),%eax
-801001fe:	8b 00                	mov    (%eax),%eax
-80100200:	89 c2                	mov    %eax,%edx
-80100202:	83 ca 04             	or     $0x4,%edx
-80100205:	8b 45 08             	mov    0x8(%ebp),%eax
-80100208:	89 10                	mov    %edx,(%eax)
-  iderw(b);
-8010020a:	8b 45 08             	mov    0x8(%ebp),%eax
-8010020d:	89 04 24             	mov    %eax,(%esp)
-80100210:	e8 07 26 00 00       	call   8010281c <iderw>
-}
-80100215:	c9                   	leave  
-80100216:	c3                   	ret    
-
-80100217 <brelse>:
-
-// Release a B_BUSY buffer.
-// Move to the head of the MRU list.
-void
-brelse(struct buf *b)
-{
-80100217:	55                   	push   %ebp
-80100218:	89 e5                	mov    %esp,%ebp
-8010021a:	83 ec 18             	sub    $0x18,%esp
-  if((b->flags & B_BUSY) == 0)
-8010021d:	8b 45 08             	mov    0x8(%ebp),%eax
-80100220:	8b 00                	mov    (%eax),%eax
-80100222:	83 e0 01             	and    $0x1,%eax
-80100225:	85 c0                	test   %eax,%eax
-80100227:	75 0c                	jne    80100235 <brelse+0x1e>
-    panic("brelse");
-80100229:	c7 04 24 c7 91 10 80 	movl   $0x801091c7,(%esp)
-80100230:	e8 08 03 00 00       	call   8010053d <panic>
-
-  acquire(&bcache.lock);
-80100235:	c7 04 24 80 d6 10 80 	movl   $0x8010d680,(%esp)
-8010023c:	e8 e6 51 00 00       	call   80105427 <acquire>
-
-  b->next->prev = b->prev;
-80100241:	8b 45 08             	mov    0x8(%ebp),%eax
-80100244:	8b 40 10             	mov    0x10(%eax),%eax
-80100247:	8b 55 08             	mov    0x8(%ebp),%edx
-8010024a:	8b 52 0c             	mov    0xc(%edx),%edx
-8010024d:	89 50 0c             	mov    %edx,0xc(%eax)
-  b->prev->next = b->next;
-80100250:	8b 45 08             	mov    0x8(%ebp),%eax
-80100253:	8b 40 0c             	mov    0xc(%eax),%eax
-80100256:	8b 55 08             	mov    0x8(%ebp),%edx
-80100259:	8b 52 10             	mov    0x10(%edx),%edx
-8010025c:	89 50 10             	mov    %edx,0x10(%eax)
-  b->next = bcache.head.next;
-8010025f:	8b 15 94 15 11 80    	mov    0x80111594,%edx
-80100265:	8b 45 08             	mov    0x8(%ebp),%eax
-80100268:	89 50 10             	mov    %edx,0x10(%eax)
-  b->prev = &bcache.head;
-8010026b:	8b 45 08             	mov    0x8(%ebp),%eax
-8010026e:	c7 40 0c 84 15 11 80 	movl   $0x80111584,0xc(%eax)
-  bcache.head.next->prev = b;
-80100275:	a1 94 15 11 80       	mov    0x80111594,%eax
-8010027a:	8b 55 08             	mov    0x8(%ebp),%edx
-8010027d:	89 50 0c             	mov    %edx,0xc(%eax)
-  bcache.head.next = b;
-80100280:	8b 45 08             	mov    0x8(%ebp),%eax
-80100283:	a3 94 15 11 80       	mov    %eax,0x80111594
-
-  b->flags &= ~B_BUSY;
-80100288:	8b 45 08             	mov    0x8(%ebp),%eax
-8010028b:	8b 00                	mov    (%eax),%eax
-8010028d:	89 c2                	mov    %eax,%edx
-8010028f:	83 e2 fe             	and    $0xfffffffe,%edx
-80100292:	8b 45 08             	mov    0x8(%ebp),%eax
-80100295:	89 10                	mov    %edx,(%eax)
-  wakeup(b);
-80100297:	8b 45 08             	mov    0x8(%ebp),%eax
-8010029a:	89 04 24             	mov    %eax,(%esp)
-8010029d:	e8 7b 4f 00 00       	call   8010521d <wakeup>
-
-  release(&bcache.lock);
-801002a2:	c7 04 24 80 d6 10 80 	movl   $0x8010d680,(%esp)
-801002a9:	e8 db 51 00 00       	call   80105489 <release>
-}
-801002ae:	c9                   	leave  
-801002af:	c3                   	ret    
-
-801002b0 <inb>:
-// Routines to let C code use special x86 instructions.
-
-static inline uchar
-inb(ushort port)
-{
-801002b0:	55                   	push   %ebp
-801002b1:	89 e5                	mov    %esp,%ebp
-801002b3:	53                   	push   %ebx
-801002b4:	83 ec 14             	sub    $0x14,%esp
-801002b7:	8b 45 08             	mov    0x8(%ebp),%eax
-801002ba:	66 89 45 e8          	mov    %ax,-0x18(%ebp)
-  uchar data;
-
-  asm volatile("in %1,%0" : "=a" (data) : "d" (port));
-801002be:	0f b7 55 e8          	movzwl -0x18(%ebp),%edx
-801002c2:	66 89 55 ea          	mov    %dx,-0x16(%ebp)
-801002c6:	0f b7 55 ea          	movzwl -0x16(%ebp),%edx
-801002ca:	ec                   	in     (%dx),%al
-801002cb:	89 c3                	mov    %eax,%ebx
-801002cd:	88 5d fb             	mov    %bl,-0x5(%ebp)
-  return data;
-801002d0:	0f b6 45 fb          	movzbl -0x5(%ebp),%eax
-}
-801002d4:	83 c4 14             	add    $0x14,%esp
-801002d7:	5b                   	pop    %ebx
-801002d8:	5d                   	pop    %ebp
-801002d9:	c3                   	ret    
-
-801002da <outb>:
-               "memory", "cc");
-}
-
-static inline void
-outb(ushort port, uchar data)
-{
-801002da:	55                   	push   %ebp
-801002db:	89 e5                	mov    %esp,%ebp
-801002dd:	83 ec 08             	sub    $0x8,%esp
-801002e0:	8b 55 08             	mov    0x8(%ebp),%edx
-801002e3:	8b 45 0c             	mov    0xc(%ebp),%eax
-801002e6:	66 89 55 fc          	mov    %dx,-0x4(%ebp)
-801002ea:	88 45 f8             	mov    %al,-0x8(%ebp)
-  asm volatile("out %0,%1" : : "a" (data), "d" (port));
-801002ed:	0f b6 45 f8          	movzbl -0x8(%ebp),%eax
-801002f1:	0f b7 55 fc          	movzwl -0x4(%ebp),%edx
-801002f5:	ee                   	out    %al,(%dx)
-}
-801002f6:	c9                   	leave  
-801002f7:	c3                   	ret    
-
-801002f8 <cli>:
-  asm volatile("movw %0, %%gs" : : "r" (v));
-}
-
-static inline void
-cli(void)
-{
-801002f8:	55                   	push   %ebp
-801002f9:	89 e5                	mov    %esp,%ebp
-  asm volatile("cli");
-801002fb:	fa                   	cli    
-}
-801002fc:	5d                   	pop    %ebp
-801002fd:	c3                   	ret    
-
-801002fe <printint>:
-  int locking;
-} cons;
-
-static void
-printint(int xx, int base, int sign)
-{
-801002fe:	55                   	push   %ebp
-801002ff:	89 e5                	mov    %esp,%ebp
-80100301:	83 ec 48             	sub    $0x48,%esp
-  static char digits[] = "0123456789abcdef";
-  char buf[16];
-  int i;
-  uint x;
-
-  if(sign && (sign = xx < 0))
-80100304:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
-80100308:	74 19                	je     80100323 <printint+0x25>
-8010030a:	8b 45 08             	mov    0x8(%ebp),%eax
-8010030d:	c1 e8 1f             	shr    $0x1f,%eax
-80100310:	89 45 10             	mov    %eax,0x10(%ebp)
-80100313:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
-80100317:	74 0a                	je     80100323 <printint+0x25>
-    x = -xx;
-80100319:	8b 45 08             	mov    0x8(%ebp),%eax
-8010031c:	f7 d8                	neg    %eax
-8010031e:	89 45 f0             	mov    %eax,-0x10(%ebp)
-80100321:	eb 06                	jmp    80100329 <printint+0x2b>
-  else
-    x = xx;
-80100323:	8b 45 08             	mov    0x8(%ebp),%eax
-80100326:	89 45 f0             	mov    %eax,-0x10(%ebp)
-
-  i = 0;
-80100329:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
-  do{
-    buf[i++] = digits[x % base];
-80100330:	8b 4d 0c             	mov    0xc(%ebp),%ecx
-80100333:	8b 45 f0             	mov    -0x10(%ebp),%eax
-80100336:	ba 00 00 00 00       	mov    $0x0,%edx
-8010033b:	f7 f1                	div    %ecx
-8010033d:	89 d0                	mov    %edx,%eax
-8010033f:	0f b6 90 04 a0 10 80 	movzbl -0x7fef5ffc(%eax),%edx
-80100346:	8d 45 e0             	lea    -0x20(%ebp),%eax
-80100349:	03 45 f4             	add    -0xc(%ebp),%eax
-8010034c:	88 10                	mov    %dl,(%eax)
-8010034e:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
-  }while((x /= base) != 0);
-80100352:	8b 55 0c             	mov    0xc(%ebp),%edx
-80100355:	89 55 d4             	mov    %edx,-0x2c(%ebp)
-80100358:	8b 45 f0             	mov    -0x10(%ebp),%eax
-8010035b:	ba 00 00 00 00       	mov    $0x0,%edx
-80100360:	f7 75 d4             	divl   -0x2c(%ebp)
-80100363:	89 45 f0             	mov    %eax,-0x10(%ebp)
-80100366:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
-8010036a:	75 c4                	jne    80100330 <printint+0x32>
-
-  if(sign)
-8010036c:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
-80100370:	74 23                	je     80100395 <printint+0x97>
-    buf[i++] = '-';
-80100372:	8d 45 e0             	lea    -0x20(%ebp),%eax
-80100375:	03 45 f4             	add    -0xc(%ebp),%eax
-80100378:	c6 00 2d             	movb   $0x2d,(%eax)
-8010037b:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
-
-  while(--i >= 0)
-8010037f:	eb 14                	jmp    80100395 <printint+0x97>
-    consputc(buf[i]);
-80100381:	8d 45 e0             	lea    -0x20(%ebp),%eax
-80100384:	03 45 f4             	add    -0xc(%ebp),%eax
-80100387:	0f b6 00             	movzbl (%eax),%eax
-8010038a:	0f be c0             	movsbl %al,%eax
-8010038d:	89 04 24             	mov    %eax,(%esp)
-80100390:	e8 bb 03 00 00       	call   80100750 <consputc>
-  }while((x /= base) != 0);
-
-  if(sign)
-    buf[i++] = '-';
-
-  while(--i >= 0)
-80100395:	83 6d f4 01          	subl   $0x1,-0xc(%ebp)
-80100399:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
-8010039d:	79 e2                	jns    80100381 <printint+0x83>
-    consputc(buf[i]);
-}
-8010039f:	c9                   	leave  
-801003a0:	c3                   	ret    
-
-801003a1 <cprintf>:
-//PAGEBREAK: 50
-
-// Print to the console. only understands %d, %x, %p, %s.
-void
-cprintf(char *fmt, ...)
-{
-801003a1:	55                   	push   %ebp
-801003a2:	89 e5                	mov    %esp,%ebp
-801003a4:	83 ec 38             	sub    $0x38,%esp
-  int i, c, locking;
-  uint *argp;
-  char *s;
-
-  locking = cons.locking;
-801003a7:	a1 14 c6 10 80       	mov    0x8010c614,%eax
-801003ac:	89 45 e8             	mov    %eax,-0x18(%ebp)
-  if(locking)
-801003af:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
-801003b3:	74 0c                	je     801003c1 <cprintf+0x20>
-    acquire(&cons.lock);
-801003b5:	c7 04 24 e0 c5 10 80 	movl   $0x8010c5e0,(%esp)
-801003bc:	e8 66 50 00 00       	call   80105427 <acquire>
-
-  if (fmt == 0)
-801003c1:	8b 45 08             	mov    0x8(%ebp),%eax
-801003c4:	85 c0                	test   %eax,%eax
-801003c6:	75 0c                	jne    801003d4 <cprintf+0x33>
-    panic("null fmt");
-801003c8:	c7 04 24 ce 91 10 80 	movl   $0x801091ce,(%esp)
-801003cf:	e8 69 01 00 00       	call   8010053d <panic>
-
-  argp = (uint*)(void*)(&fmt + 1);
-801003d4:	8d 45 0c             	lea    0xc(%ebp),%eax
-801003d7:	89 45 f0             	mov    %eax,-0x10(%ebp)
-  for(i = 0; (c = fmt[i] & 0xff) != 0; i++){
-801003da:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
-801003e1:	e9 20 01 00 00       	jmp    80100506 <cprintf+0x165>
-    if(c != '%'){
-801003e6:	83 7d e4 25          	cmpl   $0x25,-0x1c(%ebp)
-801003ea:	74 10                	je     801003fc <cprintf+0x5b>
-      consputc(c);
-801003ec:	8b 45 e4             	mov    -0x1c(%ebp),%eax
-801003ef:	89 04 24             	mov    %eax,(%esp)
-801003f2:	e8 59 03 00 00       	call   80100750 <consputc>
-      continue;
-801003f7:	e9 06 01 00 00       	jmp    80100502 <cprintf+0x161>
-    }
-    c = fmt[++i] & 0xff;
-801003fc:	8b 55 08             	mov    0x8(%ebp),%edx
-801003ff:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
-80100403:	8b 45 f4             	mov    -0xc(%ebp),%eax
-80100406:	01 d0                	add    %edx,%eax
-80100408:	0f b6 00             	movzbl (%eax),%eax
-8010040b:	0f be c0             	movsbl %al,%eax
-8010040e:	25 ff 00 00 00       	and    $0xff,%eax
-80100413:	89 45 e4             	mov    %eax,-0x1c(%ebp)
-    if(c == 0)
-80100416:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
-8010041a:	0f 84 08 01 00 00    	je     80100528 <cprintf+0x187>
-      break;
-    switch(c){
-80100420:	8b 45 e4             	mov    -0x1c(%ebp),%eax
-80100423:	83 f8 70             	cmp    $0x70,%eax
-80100426:	74 4d                	je     80100475 <cprintf+0xd4>
-80100428:	83 f8 70             	cmp    $0x70,%eax
-8010042b:	7f 13                	jg     80100440 <cprintf+0x9f>
-8010042d:	83 f8 25             	cmp    $0x25,%eax
-80100430:	0f 84 a6 00 00 00    	je     801004dc <cprintf+0x13b>
-80100436:	83 f8 64             	cmp    $0x64,%eax
-80100439:	74 14                	je     8010044f <cprintf+0xae>
-8010043b:	e9 aa 00 00 00       	jmp    801004ea <cprintf+0x149>
-80100440:	83 f8 73             	cmp    $0x73,%eax
-80100443:	74 53                	je     80100498 <cprintf+0xf7>
-80100445:	83 f8 78             	cmp    $0x78,%eax
-80100448:	74 2b                	je     80100475 <cprintf+0xd4>
-8010044a:	e9 9b 00 00 00       	jmp    801004ea <cprintf+0x149>
-    case 'd':
-      printint(*argp++, 10, 1);
-8010044f:	8b 45 f0             	mov    -0x10(%ebp),%eax
-80100452:	8b 00                	mov    (%eax),%eax
-80100454:	83 45 f0 04          	addl   $0x4,-0x10(%ebp)
-80100458:	c7 44 24 08 01 00 00 	movl   $0x1,0x8(%esp)
-8010045f:	00 
-80100460:	c7 44 24 04 0a 00 00 	movl   $0xa,0x4(%esp)
-80100467:	00 
-80100468:	89 04 24             	mov    %eax,(%esp)
-8010046b:	e8 8e fe ff ff       	call   801002fe <printint>
-      break;
-80100470:	e9 8d 00 00 00       	jmp    80100502 <cprintf+0x161>
-    case 'x':
-    case 'p':
-      printint(*argp++, 16, 0);
-80100475:	8b 45 f0             	mov    -0x10(%ebp),%eax
-80100478:	8b 00                	mov    (%eax),%eax
-8010047a:	83 45 f0 04          	addl   $0x4,-0x10(%ebp)
-8010047e:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
-80100485:	00 
-80100486:	c7 44 24 04 10 00 00 	movl   $0x10,0x4(%esp)
-8010048d:	00 
-8010048e:	89 04 24             	mov    %eax,(%esp)
-80100491:	e8 68 fe ff ff       	call   801002fe <printint>
-      break;
-80100496:	eb 6a                	jmp    80100502 <cprintf+0x161>
-    case 's':
-      if((s = (char*)*argp++) == 0)
-80100498:	8b 45 f0             	mov    -0x10(%ebp),%eax
-8010049b:	8b 00                	mov    (%eax),%eax
-8010049d:	89 45 ec             	mov    %eax,-0x14(%ebp)
-801004a0:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
-801004a4:	0f 94 c0             	sete   %al
-801004a7:	83 45 f0 04          	addl   $0x4,-0x10(%ebp)
-801004ab:	84 c0                	test   %al,%al
-801004ad:	74 20                	je     801004cf <cprintf+0x12e>
-        s = "(null)";
-801004af:	c7 45 ec d7 91 10 80 	movl   $0x801091d7,-0x14(%ebp)
-      for(; *s; s++)
-801004b6:	eb 17                	jmp    801004cf <cprintf+0x12e>
-        consputc(*s);
-801004b8:	8b 45 ec             	mov    -0x14(%ebp),%eax
-801004bb:	0f b6 00             	movzbl (%eax),%eax
-801004be:	0f be c0             	movsbl %al,%eax
-801004c1:	89 04 24             	mov    %eax,(%esp)
-801004c4:	e8 87 02 00 00       	call   80100750 <consputc>
-      printint(*argp++, 16, 0);
-      break;
-    case 's':
-      if((s = (char*)*argp++) == 0)
-        s = "(null)";
-      for(; *s; s++)
-801004c9:	83 45 ec 01          	addl   $0x1,-0x14(%ebp)
-801004cd:	eb 01                	jmp    801004d0 <cprintf+0x12f>
-801004cf:	90                   	nop
-801004d0:	8b 45 ec             	mov    -0x14(%ebp),%eax
-801004d3:	0f b6 00             	movzbl (%eax),%eax
-801004d6:	84 c0                	test   %al,%al
-801004d8:	75 de                	jne    801004b8 <cprintf+0x117>
-        consputc(*s);
-      break;
-801004da:	eb 26                	jmp    80100502 <cprintf+0x161>
-    case '%':
-      consputc('%');
-801004dc:	c7 04 24 25 00 00 00 	movl   $0x25,(%esp)
-801004e3:	e8 68 02 00 00       	call   80100750 <consputc>
-      break;
-801004e8:	eb 18                	jmp    80100502 <cprintf+0x161>
-    default:
-      // Print unknown % sequence to draw attention.
-      consputc('%');
-801004ea:	c7 04 24 25 00 00 00 	movl   $0x25,(%esp)
-801004f1:	e8 5a 02 00 00       	call   80100750 <consputc>
-      consputc(c);
-801004f6:	8b 45 e4             	mov    -0x1c(%ebp),%eax
-801004f9:	89 04 24             	mov    %eax,(%esp)
-801004fc:	e8 4f 02 00 00       	call   80100750 <consputc>
-      break;
-80100501:	90                   	nop
-
-  if (fmt == 0)
-    panic("null fmt");
-
-  argp = (uint*)(void*)(&fmt + 1);
-  for(i = 0; (c = fmt[i] & 0xff) != 0; i++){
-80100502:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
-80100506:	8b 55 08             	mov    0x8(%ebp),%edx
-80100509:	8b 45 f4             	mov    -0xc(%ebp),%eax
-8010050c:	01 d0                	add    %edx,%eax
-8010050e:	0f b6 00             	movzbl (%eax),%eax
-80100511:	0f be c0             	movsbl %al,%eax
-80100514:	25 ff 00 00 00       	and    $0xff,%eax
-80100519:	89 45 e4             	mov    %eax,-0x1c(%ebp)
-8010051c:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
-80100520:	0f 85 c0 fe ff ff    	jne    801003e6 <cprintf+0x45>
-80100526:	eb 01                	jmp    80100529 <cprintf+0x188>
-      consputc(c);
-      continue;
-    }
-    c = fmt[++i] & 0xff;
-    if(c == 0)
-      break;
-80100528:	90                   	nop
-      consputc(c);
-      break;
-    }
-  }
-
-  if(locking)
-80100529:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
-8010052d:	74 0c                	je     8010053b <cprintf+0x19a>
-    release(&cons.lock);
-8010052f:	c7 04 24 e0 c5 10 80 	movl   $0x8010c5e0,(%esp)
-80100536:	e8 4e 4f 00 00       	call   80105489 <release>
-}
-8010053b:	c9                   	leave  
-8010053c:	c3                   	ret    
-
-8010053d <panic>:
-
-void
-panic(char *s)
-{
-8010053d:	55                   	push   %ebp
-8010053e:	89 e5                	mov    %esp,%ebp
-80100540:	83 ec 48             	sub    $0x48,%esp
-  int i;
-  uint pcs[10];
-  
-  cli();
-80100543:	e8 b0 fd ff ff       	call   801002f8 <cli>
-  cons.locking = 0;
-80100548:	c7 05 14 c6 10 80 00 	movl   $0x0,0x8010c614
-8010054f:	00 00 00 
-  cprintf("cpu%d: panic: ", cpu->id);
-80100552:	65 a1 00 00 00 00    	mov    %gs:0x0,%eax
-80100558:	0f b6 00             	movzbl (%eax),%eax
-8010055b:	0f b6 c0             	movzbl %al,%eax
-8010055e:	89 44 24 04          	mov    %eax,0x4(%esp)
-80100562:	c7 04 24 de 91 10 80 	movl   $0x801091de,(%esp)
-80100569:	e8 33 fe ff ff       	call   801003a1 <cprintf>
-  cprintf(s);
-8010056e:	8b 45 08             	mov    0x8(%ebp),%eax
-80100571:	89 04 24             	mov    %eax,(%esp)
-80100574:	e8 28 fe ff ff       	call   801003a1 <cprintf>
-  cprintf("\n");
-80100579:	c7 04 24 ed 91 10 80 	movl   $0x801091ed,(%esp)
-80100580:	e8 1c fe ff ff       	call   801003a1 <cprintf>
-  getcallerpcs(&s, pcs);
-80100585:	8d 45 cc             	lea    -0x34(%ebp),%eax
-80100588:	89 44 24 04          	mov    %eax,0x4(%esp)
-8010058c:	8d 45 08             	lea    0x8(%ebp),%eax
-8010058f:	89 04 24             	mov    %eax,(%esp)
-80100592:	e8 41 4f 00 00       	call   801054d8 <getcallerpcs>
-  for(i=0; i<10; i++)
-80100597:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
-8010059e:	eb 1b                	jmp    801005bb <panic+0x7e>
-    cprintf(" %p", pcs[i]);
-801005a0:	8b 45 f4             	mov    -0xc(%ebp),%eax
-801005a3:	8b 44 85 cc          	mov    -0x34(%ebp,%eax,4),%eax
-801005a7:	89 44 24 04          	mov    %eax,0x4(%esp)
-801005ab:	c7 04 24 ef 91 10 80 	movl   $0x801091ef,(%esp)
-801005b2:	e8 ea fd ff ff       	call   801003a1 <cprintf>
-  cons.locking = 0;
-  cprintf("cpu%d: panic: ", cpu->id);
-  cprintf(s);
-  cprintf("\n");
-  getcallerpcs(&s, pcs);
-  for(i=0; i<10; i++)
-801005b7:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
-801005bb:	83 7d f4 09          	cmpl   $0x9,-0xc(%ebp)
-801005bf:	7e df                	jle    801005a0 <panic+0x63>
-    cprintf(" %p", pcs[i]);
-  panicked = 1; // freeze other CPU
-801005c1:	c7 05 c0 c5 10 80 01 	movl   $0x1,0x8010c5c0
-801005c8:	00 00 00 
-  for(;;)
-    ;
-801005cb:	eb fe                	jmp    801005cb <panic+0x8e>
-
-801005cd <cgaputc>:
-#define CRTPORT 0x3d4
-static ushort *crt = (ushort*)P2V(0xb8000);  // CGA memory
-
-static void
-cgaputc(int c)
-{
-801005cd:	55                   	push   %ebp
-801005ce:	89 e5                	mov    %esp,%ebp
-801005d0:	83 ec 28             	sub    $0x28,%esp
-  int pos;
-  
-  // Cursor position: col + 80*row.
-  outb(CRTPORT, 14);
-801005d3:	c7 44 24 04 0e 00 00 	movl   $0xe,0x4(%esp)
-801005da:	00 
-801005db:	c7 04 24 d4 03 00 00 	movl   $0x3d4,(%esp)
-801005e2:	e8 f3 fc ff ff       	call   801002da <outb>
-  pos = inb(CRTPORT+1) << 8;
-801005e7:	c7 04 24 d5 03 00 00 	movl   $0x3d5,(%esp)
-801005ee:	e8 bd fc ff ff       	call   801002b0 <inb>
-801005f3:	0f b6 c0             	movzbl %al,%eax
-801005f6:	c1 e0 08             	shl    $0x8,%eax
-801005f9:	89 45 f4             	mov    %eax,-0xc(%ebp)
-  outb(CRTPORT, 15);
-801005fc:	c7 44 24 04 0f 00 00 	movl   $0xf,0x4(%esp)
-80100603:	00 
-80100604:	c7 04 24 d4 03 00 00 	movl   $0x3d4,(%esp)
-8010060b:	e8 ca fc ff ff       	call   801002da <outb>
-  pos |= inb(CRTPORT+1);
-80100610:	c7 04 24 d5 03 00 00 	movl   $0x3d5,(%esp)
-80100617:	e8 94 fc ff ff       	call   801002b0 <inb>
-8010061c:	0f b6 c0             	movzbl %al,%eax
-8010061f:	09 45 f4             	or     %eax,-0xc(%ebp)
-
-  if(c == '\n')
-80100622:	83 7d 08 0a          	cmpl   $0xa,0x8(%ebp)
-80100626:	75 30                	jne    80100658 <cgaputc+0x8b>
-    pos += 80 - pos%80;
-80100628:	8b 4d f4             	mov    -0xc(%ebp),%ecx
-8010062b:	ba 67 66 66 66       	mov    $0x66666667,%edx
-80100630:	89 c8                	mov    %ecx,%eax
-80100632:	f7 ea                	imul   %edx
-80100634:	c1 fa 05             	sar    $0x5,%edx
-80100637:	89 c8                	mov    %ecx,%eax
-80100639:	c1 f8 1f             	sar    $0x1f,%eax
-8010063c:	29 c2                	sub    %eax,%edx
-8010063e:	89 d0                	mov    %edx,%eax
-80100640:	c1 e0 02             	shl    $0x2,%eax
-80100643:	01 d0                	add    %edx,%eax
-80100645:	c1 e0 04             	shl    $0x4,%eax
-80100648:	89 ca                	mov    %ecx,%edx
-8010064a:	29 c2                	sub    %eax,%edx
-8010064c:	b8 50 00 00 00       	mov    $0x50,%eax
-80100651:	29 d0                	sub    %edx,%eax
-80100653:	01 45 f4             	add    %eax,-0xc(%ebp)
-80100656:	eb 32                	jmp    8010068a <cgaputc+0xbd>
-  else if(c == BACKSPACE){
-80100658:	81 7d 08 00 01 00 00 	cmpl   $0x100,0x8(%ebp)
-8010065f:	75 0c                	jne    8010066d <cgaputc+0xa0>
-    if(pos > 0) --pos;
-80100661:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
-80100665:	7e 23                	jle    8010068a <cgaputc+0xbd>
-80100667:	83 6d f4 01          	subl   $0x1,-0xc(%ebp)
-8010066b:	eb 1d                	jmp    8010068a <cgaputc+0xbd>
-  } else
-    crt[pos++] = (c&0xff) | 0x0700;  // black on white
-8010066d:	a1 00 a0 10 80       	mov    0x8010a000,%eax
-80100672:	8b 55 f4             	mov    -0xc(%ebp),%edx
-80100675:	01 d2                	add    %edx,%edx
-80100677:	01 c2                	add    %eax,%edx
-80100679:	8b 45 08             	mov    0x8(%ebp),%eax
-8010067c:	66 25 ff 00          	and    $0xff,%ax
-80100680:	80 cc 07             	or     $0x7,%ah
-80100683:	66 89 02             	mov    %ax,(%edx)
-80100686:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
-  
-  if((pos/80) >= 24){  // Scroll up.
-8010068a:	81 7d f4 7f 07 00 00 	cmpl   $0x77f,-0xc(%ebp)
-80100691:	7e 53                	jle    801006e6 <cgaputc+0x119>
-    memmove(crt, crt+80, sizeof(crt[0])*23*80);
-80100693:	a1 00 a0 10 80       	mov    0x8010a000,%eax
-80100698:	8d 90 a0 00 00 00    	lea    0xa0(%eax),%edx
-8010069e:	a1 00 a0 10 80       	mov    0x8010a000,%eax
-801006a3:	c7 44 24 08 60 0e 00 	movl   $0xe60,0x8(%esp)
-801006aa:	00 
-801006ab:	89 54 24 04          	mov    %edx,0x4(%esp)
-801006af:	89 04 24             	mov    %eax,(%esp)
-801006b2:	e8 92 50 00 00       	call   80105749 <memmove>
-    pos -= 80;
-801006b7:	83 6d f4 50          	subl   $0x50,-0xc(%ebp)
-    memset(crt+pos, 0, sizeof(crt[0])*(24*80 - pos));
-801006bb:	b8 80 07 00 00       	mov    $0x780,%eax
-801006c0:	2b 45 f4             	sub    -0xc(%ebp),%eax
-801006c3:	01 c0                	add    %eax,%eax
-801006c5:	8b 15 00 a0 10 80    	mov    0x8010a000,%edx
-801006cb:	8b 4d f4             	mov    -0xc(%ebp),%ecx
-801006ce:	01 c9                	add    %ecx,%ecx
-801006d0:	01 ca                	add    %ecx,%edx
-801006d2:	89 44 24 08          	mov    %eax,0x8(%esp)
-801006d6:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
-801006dd:	00 
-801006de:	89 14 24             	mov    %edx,(%esp)
-801006e1:	e8 90 4f 00 00       	call   80105676 <memset>
-  }
-  
-  outb(CRTPORT, 14);
-801006e6:	c7 44 24 04 0e 00 00 	movl   $0xe,0x4(%esp)
-801006ed:	00 
-801006ee:	c7 04 24 d4 03 00 00 	movl   $0x3d4,(%esp)
-801006f5:	e8 e0 fb ff ff       	call   801002da <outb>
-  outb(CRTPORT+1, pos>>8);
-801006fa:	8b 45 f4             	mov    -0xc(%ebp),%eax
-801006fd:	c1 f8 08             	sar    $0x8,%eax
-80100700:	0f b6 c0             	movzbl %al,%eax
-80100703:	89 44 24 04          	mov    %eax,0x4(%esp)
-80100707:	c7 04 24 d5 03 00 00 	movl   $0x3d5,(%esp)
-8010070e:	e8 c7 fb ff ff       	call   801002da <outb>
-  outb(CRTPORT, 15);
-80100713:	c7 44 24 04 0f 00 00 	movl   $0xf,0x4(%esp)
-8010071a:	00 
-8010071b:	c7 04 24 d4 03 00 00 	movl   $0x3d4,(%esp)
-80100722:	e8 b3 fb ff ff       	call   801002da <outb>
-  outb(CRTPORT+1, pos);
-80100727:	8b 45 f4             	mov    -0xc(%ebp),%eax
-8010072a:	0f b6 c0             	movzbl %al,%eax
-8010072d:	89 44 24 04          	mov    %eax,0x4(%esp)
-80100731:	c7 04 24 d5 03 00 00 	movl   $0x3d5,(%esp)
-80100738:	e8 9d fb ff ff       	call   801002da <outb>
-  crt[pos] = ' ' | 0x0700;
-8010073d:	a1 00 a0 10 80       	mov    0x8010a000,%eax
-80100742:	8b 55 f4             	mov    -0xc(%ebp),%edx
-80100745:	01 d2                	add    %edx,%edx
-80100747:	01 d0                	add    %edx,%eax
-80100749:	66 c7 00 20 07       	movw   $0x720,(%eax)
-}
-8010074e:	c9                   	leave  
-8010074f:	c3                   	ret    
-
-80100750 <consputc>:
-
-void
-consputc(int c)
-{
-80100750:	55                   	push   %ebp
-80100751:	89 e5                	mov    %esp,%ebp
-80100753:	83 ec 18             	sub    $0x18,%esp
-  if(panicked){
-80100756:	a1 c0 c5 10 80       	mov    0x8010c5c0,%eax
-8010075b:	85 c0                	test   %eax,%eax
-8010075d:	74 07                	je     80100766 <consputc+0x16>
-    cli();
-8010075f:	e8 94 fb ff ff       	call   801002f8 <cli>
-    for(;;)
-      ;
-80100764:	eb fe                	jmp    80100764 <consputc+0x14>
-  }
-
-  if(c == BACKSPACE){
-80100766:	81 7d 08 00 01 00 00 	cmpl   $0x100,0x8(%ebp)
-8010076d:	75 26                	jne    80100795 <consputc+0x45>
-    uartputc('\b'); uartputc(' '); uartputc('\b');
-8010076f:	c7 04 24 08 00 00 00 	movl   $0x8,(%esp)
-80100776:	e8 1e 6c 00 00       	call   80107399 <uartputc>
-8010077b:	c7 04 24 20 00 00 00 	movl   $0x20,(%esp)
-80100782:	e8 12 6c 00 00       	call   80107399 <uartputc>
-80100787:	c7 04 24 08 00 00 00 	movl   $0x8,(%esp)
-8010078e:	e8 06 6c 00 00       	call   80107399 <uartputc>
-80100793:	eb 0b                	jmp    801007a0 <consputc+0x50>
-  } else
-    uartputc(c);
-80100795:	8b 45 08             	mov    0x8(%ebp),%eax
-80100798:	89 04 24             	mov    %eax,(%esp)
-8010079b:	e8 f9 6b 00 00       	call   80107399 <uartputc>
-  cgaputc(c);
-801007a0:	8b 45 08             	mov    0x8(%ebp),%eax
-801007a3:	89 04 24             	mov    %eax,(%esp)
-801007a6:	e8 22 fe ff ff       	call   801005cd <cgaputc>
-}
-801007ab:	c9                   	leave  
-801007ac:	c3                   	ret    
-
-801007ad <consoleintr>:
-
-#define C(x)  ((x)-'@')  // Control-x
-
-void
-consoleintr(int (*getc)(void))
-{
-801007ad:	55                   	push   %ebp
-801007ae:	89 e5                	mov    %esp,%ebp
-801007b0:	83 ec 28             	sub    $0x28,%esp
-  int c;
-
-  acquire(&input.lock);
-801007b3:	c7 04 24 a0 17 11 80 	movl   $0x801117a0,(%esp)
-801007ba:	e8 68 4c 00 00       	call   80105427 <acquire>
-  while((c = getc()) >= 0){
-801007bf:	e9 41 01 00 00       	jmp    80100905 <consoleintr+0x158>
-    switch(c){
-801007c4:	8b 45 f4             	mov    -0xc(%ebp),%eax
-801007c7:	83 f8 10             	cmp    $0x10,%eax
-801007ca:	74 1e                	je     801007ea <consoleintr+0x3d>
-801007cc:	83 f8 10             	cmp    $0x10,%eax
-801007cf:	7f 0a                	jg     801007db <consoleintr+0x2e>
-801007d1:	83 f8 08             	cmp    $0x8,%eax
-801007d4:	74 68                	je     8010083e <consoleintr+0x91>
-801007d6:	e9 94 00 00 00       	jmp    8010086f <consoleintr+0xc2>
-801007db:	83 f8 15             	cmp    $0x15,%eax
-801007de:	74 2f                	je     8010080f <consoleintr+0x62>
-801007e0:	83 f8 7f             	cmp    $0x7f,%eax
-801007e3:	74 59                	je     8010083e <consoleintr+0x91>
-801007e5:	e9 85 00 00 00       	jmp    8010086f <consoleintr+0xc2>
-    case C('P'):  // Process listing.
-      procdump();
-801007ea:	e8 d4 4a 00 00       	call   801052c3 <procdump>
-      break;
-801007ef:	e9 11 01 00 00       	jmp    80100905 <consoleintr+0x158>
-    case C('U'):  // Kill line.
-      while(input.e != input.w &&
-            input.buf[(input.e-1) % INPUT_BUF] != '\n'){
-        input.e--;
-801007f4:	a1 5c 18 11 80       	mov    0x8011185c,%eax
-801007f9:	83 e8 01             	sub    $0x1,%eax
-801007fc:	a3 5c 18 11 80       	mov    %eax,0x8011185c
-        consputc(BACKSPACE);
-80100801:	c7 04 24 00 01 00 00 	movl   $0x100,(%esp)
-80100808:	e8 43 ff ff ff       	call   80100750 <consputc>
-8010080d:	eb 01                	jmp    80100810 <consoleintr+0x63>
-    switch(c){
-    case C('P'):  // Process listing.
-      procdump();
-      break;
-    case C('U'):  // Kill line.
-      while(input.e != input.w &&
-8010080f:	90                   	nop
-80100810:	8b 15 5c 18 11 80    	mov    0x8011185c,%edx
-80100816:	a1 58 18 11 80       	mov    0x80111858,%eax
-8010081b:	39 c2                	cmp    %eax,%edx
-8010081d:	0f 84 db 00 00 00    	je     801008fe <consoleintr+0x151>
-            input.buf[(input.e-1) % INPUT_BUF] != '\n'){
-80100823:	a1 5c 18 11 80       	mov    0x8011185c,%eax
-80100828:	83 e8 01             	sub    $0x1,%eax
-8010082b:	83 e0 7f             	and    $0x7f,%eax
-8010082e:	0f b6 80 d4 17 11 80 	movzbl -0x7feee82c(%eax),%eax
-    switch(c){
-    case C('P'):  // Process listing.
-      procdump();
-      break;
-    case C('U'):  // Kill line.
-      while(input.e != input.w &&
-80100835:	3c 0a                	cmp    $0xa,%al
-80100837:	75 bb                	jne    801007f4 <consoleintr+0x47>
-            input.buf[(input.e-1) % INPUT_BUF] != '\n'){
-        input.e--;
-        consputc(BACKSPACE);
-      }
-      break;
-80100839:	e9 c0 00 00 00       	jmp    801008fe <consoleintr+0x151>
-    case C('H'): case '\x7f':  // Backspace
-      if(input.e != input.w){
-8010083e:	8b 15 5c 18 11 80    	mov    0x8011185c,%edx
-80100844:	a1 58 18 11 80       	mov    0x80111858,%eax
-80100849:	39 c2                	cmp    %eax,%edx
-8010084b:	0f 84 b0 00 00 00    	je     80100901 <consoleintr+0x154>
-        input.e--;
-80100851:	a1 5c 18 11 80       	mov    0x8011185c,%eax
-80100856:	83 e8 01             	sub    $0x1,%eax
-80100859:	a3 5c 18 11 80       	mov    %eax,0x8011185c
-        consputc(BACKSPACE);
-8010085e:	c7 04 24 00 01 00 00 	movl   $0x100,(%esp)
-80100865:	e8 e6 fe ff ff       	call   80100750 <consputc>
-      }
-      break;
-8010086a:	e9 92 00 00 00       	jmp    80100901 <consoleintr+0x154>
-    default:
-      if(c != 0 && input.e-input.r < INPUT_BUF){
-8010086f:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
-80100873:	0f 84 8b 00 00 00    	je     80100904 <consoleintr+0x157>
-80100879:	8b 15 5c 18 11 80    	mov    0x8011185c,%edx
-8010087f:	a1 54 18 11 80       	mov    0x80111854,%eax
-80100884:	89 d1                	mov    %edx,%ecx
-80100886:	29 c1                	sub    %eax,%ecx
-80100888:	89 c8                	mov    %ecx,%eax
-8010088a:	83 f8 7f             	cmp    $0x7f,%eax
-8010088d:	77 75                	ja     80100904 <consoleintr+0x157>
-        c = (c == '\r') ? '\n' : c;
-8010088f:	83 7d f4 0d          	cmpl   $0xd,-0xc(%ebp)
-80100893:	74 05                	je     8010089a <consoleintr+0xed>
-80100895:	8b 45 f4             	mov    -0xc(%ebp),%eax
-80100898:	eb 05                	jmp    8010089f <consoleintr+0xf2>
-8010089a:	b8 0a 00 00 00       	mov    $0xa,%eax
-8010089f:	89 45 f4             	mov    %eax,-0xc(%ebp)
-        input.buf[input.e++ % INPUT_BUF] = c;
-801008a2:	a1 5c 18 11 80       	mov    0x8011185c,%eax
-801008a7:	89 c1                	mov    %eax,%ecx
-801008a9:	83 e1 7f             	and    $0x7f,%ecx
-801008ac:	8b 55 f4             	mov    -0xc(%ebp),%edx
-801008af:	88 91 d4 17 11 80    	mov    %dl,-0x7feee82c(%ecx)
-801008b5:	83 c0 01             	add    $0x1,%eax
-801008b8:	a3 5c 18 11 80       	mov    %eax,0x8011185c
-        consputc(c);
-801008bd:	8b 45 f4             	mov    -0xc(%ebp),%eax
-801008c0:	89 04 24             	mov    %eax,(%esp)
-801008c3:	e8 88 fe ff ff       	call   80100750 <consputc>
-        if(c == '\n' || c == C('D') || input.e == input.r+INPUT_BUF){
-801008c8:	83 7d f4 0a          	cmpl   $0xa,-0xc(%ebp)
-801008cc:	74 18                	je     801008e6 <consoleintr+0x139>
-801008ce:	83 7d f4 04          	cmpl   $0x4,-0xc(%ebp)
-801008d2:	74 12                	je     801008e6 <consoleintr+0x139>
-801008d4:	a1 5c 18 11 80       	mov    0x8011185c,%eax
-801008d9:	8b 15 54 18 11 80    	mov    0x80111854,%edx
-801008df:	83 ea 80             	sub    $0xffffff80,%edx
-801008e2:	39 d0                	cmp    %edx,%eax
-801008e4:	75 1e                	jne    80100904 <consoleintr+0x157>
-          input.w = input.e;
-801008e6:	a1 5c 18 11 80       	mov    0x8011185c,%eax
-801008eb:	a3 58 18 11 80       	mov    %eax,0x80111858
-          wakeup(&input.r);
-801008f0:	c7 04 24 54 18 11 80 	movl   $0x80111854,(%esp)
-801008f7:	e8 21 49 00 00       	call   8010521d <wakeup>
-        }
-      }
-      break;
-801008fc:	eb 06                	jmp    80100904 <consoleintr+0x157>
-      while(input.e != input.w &&
-            input.buf[(input.e-1) % INPUT_BUF] != '\n'){
-        input.e--;
-        consputc(BACKSPACE);
-      }
-      break;
-801008fe:	90                   	nop
-801008ff:	eb 04                	jmp    80100905 <consoleintr+0x158>
-    case C('H'): case '\x7f':  // Backspace
-      if(input.e != input.w){
-        input.e--;
-        consputc(BACKSPACE);
-      }
-      break;
-80100901:	90                   	nop
-80100902:	eb 01                	jmp    80100905 <consoleintr+0x158>
-        if(c == '\n' || c == C('D') || input.e == input.r+INPUT_BUF){
-          input.w = input.e;
-          wakeup(&input.r);
-        }
-      }
-      break;
-80100904:	90                   	nop
-consoleintr(int (*getc)(void))
-{
-  int c;
-
-  acquire(&input.lock);
-  while((c = getc()) >= 0){
-80100905:	8b 45 08             	mov    0x8(%ebp),%eax
-80100908:	ff d0                	call   *%eax
-8010090a:	89 45 f4             	mov    %eax,-0xc(%ebp)
-8010090d:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
-80100911:	0f 89 ad fe ff ff    	jns    801007c4 <consoleintr+0x17>
-        }
-      }
-      break;
-    }
-  }
-  release(&input.lock);
-80100917:	c7 04 24 a0 17 11 80 	movl   $0x801117a0,(%esp)
-8010091e:	e8 66 4b 00 00       	call   80105489 <release>
-}
-80100923:	c9                   	leave  
-80100924:	c3                   	ret    
-
-80100925 <consoleread>:
-
-int
-consoleread(struct inode *ip, char *dst, int n)
-{
-80100925:	55                   	push   %ebp
-80100926:	89 e5                	mov    %esp,%ebp
-80100928:	83 ec 28             	sub    $0x28,%esp
-  uint target;
-  int c;
-
-  iunlock(ip);
-8010092b:	8b 45 08             	mov    0x8(%ebp),%eax
-8010092e:	89 04 24             	mov    %eax,(%esp)
-80100931:	e8 e8 10 00 00       	call   80101a1e <iunlock>
-  target = n;
-80100936:	8b 45 10             	mov    0x10(%ebp),%eax
-80100939:	89 45 f4             	mov    %eax,-0xc(%ebp)
-  acquire(&input.lock);
-8010093c:	c7 04 24 a0 17 11 80 	movl   $0x801117a0,(%esp)
-80100943:	e8 df 4a 00 00       	call   80105427 <acquire>
-  while(n > 0){
-80100948:	e9 a8 00 00 00       	jmp    801009f5 <consoleread+0xd0>
-    while(input.r == input.w){
-      if(proc->killed){
-8010094d:	65 a1 04 00 00 00    	mov    %gs:0x4,%eax
-80100953:	8b 40 28             	mov    0x28(%eax),%eax
-80100956:	85 c0                	test   %eax,%eax
-80100958:	74 21                	je     8010097b <consoleread+0x56>
-        release(&input.lock);
-8010095a:	c7 04 24 a0 17 11 80 	movl   $0x801117a0,(%esp)
-80100961:	e8 23 4b 00 00       	call   80105489 <release>
-        ilock(ip);
-80100966:	8b 45 08             	mov    0x8(%ebp),%eax
-80100969:	89 04 24             	mov    %eax,(%esp)
-8010096c:	e8 5f 0f 00 00       	call   801018d0 <ilock>
-        return -1;
-80100971:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
-80100976:	e9 a9 00 00 00       	jmp    80100a24 <consoleread+0xff>
-      }
-      sleep(&input.r, &input.lock);
-8010097b:	c7 44 24 04 a0 17 11 	movl   $0x801117a0,0x4(%esp)
-80100982:	80 
-80100983:	c7 04 24 54 18 11 80 	movl   $0x80111854,(%esp)
-8010098a:	e8 b2 47 00 00       	call   80105141 <sleep>
-8010098f:	eb 01                	jmp    80100992 <consoleread+0x6d>
-
-  iunlock(ip);
-  target = n;
-  acquire(&input.lock);
-  while(n > 0){
-    while(input.r == input.w){
-80100991:	90                   	nop
-80100992:	8b 15 54 18 11 80    	mov    0x80111854,%edx
-80100998:	a1 58 18 11 80       	mov    0x80111858,%eax
-8010099d:	39 c2                	cmp    %eax,%edx
-8010099f:	74 ac                	je     8010094d <consoleread+0x28>
-        ilock(ip);
-        return -1;
-      }
-      sleep(&input.r, &input.lock);
-    }
-    c = input.buf[input.r++ % INPUT_BUF];
-801009a1:	a1 54 18 11 80       	mov    0x80111854,%eax
-801009a6:	89 c2                	mov    %eax,%edx
-801009a8:	83 e2 7f             	and    $0x7f,%edx
-801009ab:	0f b6 92 d4 17 11 80 	movzbl -0x7feee82c(%edx),%edx
-801009b2:	0f be d2             	movsbl %dl,%edx
-801009b5:	89 55 f0             	mov    %edx,-0x10(%ebp)
-801009b8:	83 c0 01             	add    $0x1,%eax
-801009bb:	a3 54 18 11 80       	mov    %eax,0x80111854
-    if(c == C('D')){  // EOF
-801009c0:	83 7d f0 04          	cmpl   $0x4,-0x10(%ebp)
-801009c4:	75 17                	jne    801009dd <consoleread+0xb8>
-      if(n < target){
-801009c6:	8b 45 10             	mov    0x10(%ebp),%eax
-801009c9:	3b 45 f4             	cmp    -0xc(%ebp),%eax
-801009cc:	73 2f                	jae    801009fd <consoleread+0xd8>
-        // Save ^D for next time, to make sure
-        // caller gets a 0-byte result.
-        input.r--;
-801009ce:	a1 54 18 11 80       	mov    0x80111854,%eax
-801009d3:	83 e8 01             	sub    $0x1,%eax
-801009d6:	a3 54 18 11 80       	mov    %eax,0x80111854
-      }
-      break;
-801009db:	eb 20                	jmp    801009fd <consoleread+0xd8>
-    }
-    *dst++ = c;
-801009dd:	8b 45 f0             	mov    -0x10(%ebp),%eax
-801009e0:	89 c2                	mov    %eax,%edx
-801009e2:	8b 45 0c             	mov    0xc(%ebp),%eax
-801009e5:	88 10                	mov    %dl,(%eax)
-801009e7:	83 45 0c 01          	addl   $0x1,0xc(%ebp)
-    --n;
-801009eb:	83 6d 10 01          	subl   $0x1,0x10(%ebp)
-    if(c == '\n')
-801009ef:	83 7d f0 0a          	cmpl   $0xa,-0x10(%ebp)
-801009f3:	74 0b                	je     80100a00 <consoleread+0xdb>
-  int c;
-
-  iunlock(ip);
-  target = n;
-  acquire(&input.lock);
-  while(n > 0){
-801009f5:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
-801009f9:	7f 96                	jg     80100991 <consoleread+0x6c>
-801009fb:	eb 04                	jmp    80100a01 <consoleread+0xdc>
-      if(n < target){
-        // Save ^D for next time, to make sure
-        // caller gets a 0-byte result.
-        input.r--;
-      }
-      break;
-801009fd:	90                   	nop
-801009fe:	eb 01                	jmp    80100a01 <consoleread+0xdc>
-    }
-    *dst++ = c;
-    --n;
-    if(c == '\n')
-      break;
-80100a00:	90                   	nop
-  }
-  release(&input.lock);
-80100a01:	c7 04 24 a0 17 11 80 	movl   $0x801117a0,(%esp)
-80100a08:	e8 7c 4a 00 00       	call   80105489 <release>
-  ilock(ip);
-80100a0d:	8b 45 08             	mov    0x8(%ebp),%eax
-80100a10:	89 04 24             	mov    %eax,(%esp)
-80100a13:	e8 b8 0e 00 00       	call   801018d0 <ilock>
-
-  return target - n;
-80100a18:	8b 45 10             	mov    0x10(%ebp),%eax
-80100a1b:	8b 55 f4             	mov    -0xc(%ebp),%edx
-80100a1e:	89 d1                	mov    %edx,%ecx
-80100a20:	29 c1                	sub    %eax,%ecx
-80100a22:	89 c8                	mov    %ecx,%eax
-}
-80100a24:	c9                   	leave  
-80100a25:	c3                   	ret    
-
-80100a26 <consolewrite>:
-
-int
-consolewrite(struct inode *ip, char *buf, int n)
-{
-80100a26:	55                   	push   %ebp
-80100a27:	89 e5                	mov    %esp,%ebp
-80100a29:	83 ec 28             	sub    $0x28,%esp
-  int i;
-
-  iunlock(ip);
-80100a2c:	8b 45 08             	mov    0x8(%ebp),%eax
-80100a2f:	89 04 24             	mov    %eax,(%esp)
-80100a32:	e8 e7 0f 00 00       	call   80101a1e <iunlock>
-  acquire(&cons.lock);
-80100a37:	c7 04 24 e0 c5 10 80 	movl   $0x8010c5e0,(%esp)
-80100a3e:	e8 e4 49 00 00       	call   80105427 <acquire>
-  for(i = 0; i < n; i++)
-80100a43:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
-80100a4a:	eb 1d                	jmp    80100a69 <consolewrite+0x43>
-    consputc(buf[i] & 0xff);
-80100a4c:	8b 45 f4             	mov    -0xc(%ebp),%eax
-80100a4f:	03 45 0c             	add    0xc(%ebp),%eax
-80100a52:	0f b6 00             	movzbl (%eax),%eax
-80100a55:	0f be c0             	movsbl %al,%eax
-80100a58:	25 ff 00 00 00       	and    $0xff,%eax
-80100a5d:	89 04 24             	mov    %eax,(%esp)
-80100a60:	e8 eb fc ff ff       	call   80100750 <consputc>
-{
-  int i;
-
-  iunlock(ip);
-  acquire(&cons.lock);
-  for(i = 0; i < n; i++)
-80100a65:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
-80100a69:	8b 45 f4             	mov    -0xc(%ebp),%eax
-80100a6c:	3b 45 10             	cmp    0x10(%ebp),%eax
-80100a6f:	7c db                	jl     80100a4c <consolewrite+0x26>
-    consputc(buf[i] & 0xff);
-  release(&cons.lock);
-80100a71:	c7 04 24 e0 c5 10 80 	movl   $0x8010c5e0,(%esp)
-80100a78:	e8 0c 4a 00 00       	call   80105489 <release>
-  ilock(ip);
-80100a7d:	8b 45 08             	mov    0x8(%ebp),%eax
-80100a80:	89 04 24             	mov    %eax,(%esp)
-80100a83:	e8 48 0e 00 00       	call   801018d0 <ilock>
-
-  return n;
-80100a88:	8b 45 10             	mov    0x10(%ebp),%eax
-}
-80100a8b:	c9                   	leave  
-80100a8c:	c3                   	ret    
-
-80100a8d <consoleinit>:
-
-void
-consoleinit(void)
-{
-80100a8d:	55                   	push   %ebp
-80100a8e:	89 e5                	mov    %esp,%ebp
-80100a90:	83 ec 18             	sub    $0x18,%esp
-  initlock(&cons.lock, "console");
-80100a93:	c7 44 24 04 f3 91 10 	movl   $0x801091f3,0x4(%esp)
-80100a9a:	80 
-80100a9b:	c7 04 24 e0 c5 10 80 	movl   $0x8010c5e0,(%esp)
-80100aa2:	e8 5f 49 00 00       	call   80105406 <initlock>
-  initlock(&input.lock, "input");
-80100aa7:	c7 44 24 04 fb 91 10 	movl   $0x801091fb,0x4(%esp)
-80100aae:	80 
-80100aaf:	c7 04 24 a0 17 11 80 	movl   $0x801117a0,(%esp)
-80100ab6:	e8 4b 49 00 00       	call   80105406 <initlock>
-
-  devsw[CONSOLE].write = consolewrite;
-80100abb:	c7 05 0c 22 11 80 26 	movl   $0x80100a26,0x8011220c
-80100ac2:	0a 10 80 
-  devsw[CONSOLE].read = consoleread;
-80100ac5:	c7 05 08 22 11 80 25 	movl   $0x80100925,0x80112208
-80100acc:	09 10 80 
-  cons.locking = 1;
-80100acf:	c7 05 14 c6 10 80 01 	movl   $0x1,0x8010c614
-80100ad6:	00 00 00 
-
-  picenable(IRQ_KBD);
-80100ad9:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
-80100ae0:	e8 90 33 00 00       	call   80103e75 <picenable>
-  ioapicenable(IRQ_KBD, 0);
-80100ae5:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
-80100aec:	00 
-80100aed:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
-80100af4:	e8 e5 1e 00 00       	call   801029de <ioapicenable>
-}
-80100af9:	c9                   	leave  
-80100afa:	c3                   	ret    
-	...
-
-80100afc <exec>:
-extern void implicit_exit();
-extern void implicit_exit_end();
-
-int
-exec(char *path, char **argv)
-{
-80100afc:	55                   	push   %ebp
-80100afd:	89 e5                	mov    %esp,%ebp
-80100aff:	81 ec 48 01 00 00    	sub    $0x148,%esp
-  struct elfhdr elf;
-  struct inode *ip;
-  struct proghdr ph;
-  pde_t *pgdir, *oldpgdir;
-
-  begin_op();
-80100b05:	e8 b3 29 00 00       	call   801034bd <begin_op>
-  if((ip = namei(path)) == 0){
-80100b0a:	8b 45 08             	mov    0x8(%ebp),%eax
-80100b0d:	89 04 24             	mov    %eax,(%esp)
-80100b10:	e8 5d 19 00 00       	call   80102472 <namei>
-80100b15:	89 45 d8             	mov    %eax,-0x28(%ebp)
-80100b18:	83 7d d8 00          	cmpl   $0x0,-0x28(%ebp)
-80100b1c:	75 0f                	jne    80100b2d <exec+0x31>
-    end_op();
-80100b1e:	e8 1b 2a 00 00       	call   8010353e <end_op>
-    return -1;
-80100b23:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
-80100b28:	e9 36 04 00 00       	jmp    80100f63 <exec+0x467>
-  }
-  ilock(ip);
-80100b2d:	8b 45 d8             	mov    -0x28(%ebp),%eax
-80100b30:	89 04 24             	mov    %eax,(%esp)
-80100b33:	e8 98 0d 00 00       	call   801018d0 <ilock>
-  pgdir = 0;
-80100b38:	c7 45 d4 00 00 00 00 	movl   $0x0,-0x2c(%ebp)
-
-  // Check ELF header
-  if(readi(ip, (char*)&elf, 0, sizeof(elf)) < sizeof(elf))
-80100b3f:	c7 44 24 0c 34 00 00 	movl   $0x34,0xc(%esp)
-80100b46:	00 
-80100b47:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
-80100b4e:	00 
-80100b4f:	8d 85 04 ff ff ff    	lea    -0xfc(%ebp),%eax
-80100b55:	89 44 24 04          	mov    %eax,0x4(%esp)
-80100b59:	8b 45 d8             	mov    -0x28(%ebp),%eax
-80100b5c:	89 04 24             	mov    %eax,(%esp)
-80100b5f:	e8 62 12 00 00       	call   80101dc6 <readi>
-80100b64:	83 f8 33             	cmp    $0x33,%eax
-80100b67:	0f 86 a8 03 00 00    	jbe    80100f15 <exec+0x419>
-    goto bad;
-  if(elf.magic != ELF_MAGIC)
-80100b6d:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
-80100b73:	3d 7f 45 4c 46       	cmp    $0x464c457f,%eax
-80100b78:	0f 85 9a 03 00 00    	jne    80100f18 <exec+0x41c>
-    goto bad;
-
-  if((pgdir = setupkvm()) == 0)
-80100b7e:	e8 5a 79 00 00       	call   801084dd <setupkvm>
-80100b83:	89 45 d4             	mov    %eax,-0x2c(%ebp)
-80100b86:	83 7d d4 00          	cmpl   $0x0,-0x2c(%ebp)
-80100b8a:	0f 84 8b 03 00 00    	je     80100f1b <exec+0x41f>
-    goto bad;
-
-  // Load program into memory.
-  sz = 0;
-80100b90:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
-  for(i=0, off=elf.phoff; i<elf.phnum; i++, off+=sizeof(ph)){
-80100b97:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
-80100b9e:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
-80100ba4:	89 45 e8             	mov    %eax,-0x18(%ebp)
-80100ba7:	e9 c5 00 00 00       	jmp    80100c71 <exec+0x175>
-    if(readi(ip, (char*)&ph, off, sizeof(ph)) != sizeof(ph))
-80100bac:	8b 45 e8             	mov    -0x18(%ebp),%eax
-80100baf:	c7 44 24 0c 20 00 00 	movl   $0x20,0xc(%esp)
-80100bb6:	00 
-80100bb7:	89 44 24 08          	mov    %eax,0x8(%esp)
-80100bbb:	8d 85 e4 fe ff ff    	lea    -0x11c(%ebp),%eax
-80100bc1:	89 44 24 04          	mov    %eax,0x4(%esp)
-80100bc5:	8b 45 d8             	mov    -0x28(%ebp),%eax
-80100bc8:	89 04 24             	mov    %eax,(%esp)
-80100bcb:	e8 f6 11 00 00       	call   80101dc6 <readi>
-80100bd0:	83 f8 20             	cmp    $0x20,%eax
-80100bd3:	0f 85 45 03 00 00    	jne    80100f1e <exec+0x422>
-      goto bad;
-    if(ph.type != ELF_PROG_LOAD)
-80100bd9:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
-80100bdf:	83 f8 01             	cmp    $0x1,%eax
-80100be2:	75 7f                	jne    80100c63 <exec+0x167>
-      continue;
-    if(ph.memsz < ph.filesz)
-80100be4:	8b 95 f8 fe ff ff    	mov    -0x108(%ebp),%edx
-80100bea:	8b 85 f4 fe ff ff    	mov    -0x10c(%ebp),%eax
-80100bf0:	39 c2                	cmp    %eax,%edx
-80100bf2:	0f 82 29 03 00 00    	jb     80100f21 <exec+0x425>
-      goto bad;
-    if((sz = allocuvm(pgdir, sz, ph.vaddr + ph.memsz)) == 0)
-80100bf8:	8b 95 ec fe ff ff    	mov    -0x114(%ebp),%edx
-80100bfe:	8b 85 f8 fe ff ff    	mov    -0x108(%ebp),%eax
-80100c04:	01 d0                	add    %edx,%eax
-80100c06:	89 44 24 08          	mov    %eax,0x8(%esp)
-80100c0a:	8b 45 e0             	mov    -0x20(%ebp),%eax
-80100c0d:	89 44 24 04          	mov    %eax,0x4(%esp)
-80100c11:	8b 45 d4             	mov    -0x2c(%ebp),%eax
-80100c14:	89 04 24             	mov    %eax,(%esp)
-80100c17:	e8 93 7c 00 00       	call   801088af <allocuvm>
-80100c1c:	89 45 e0             	mov    %eax,-0x20(%ebp)
-80100c1f:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
-80100c23:	0f 84 fb 02 00 00    	je     80100f24 <exec+0x428>
-      goto bad;
-    if(loaduvm(pgdir, (char*)ph.vaddr, ip, ph.off, ph.filesz) < 0)
-80100c29:	8b 8d f4 fe ff ff    	mov    -0x10c(%ebp),%ecx
-80100c2f:	8b 95 e8 fe ff ff    	mov    -0x118(%ebp),%edx
-80100c35:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
-80100c3b:	89 4c 24 10          	mov    %ecx,0x10(%esp)
-80100c3f:	89 54 24 0c          	mov    %edx,0xc(%esp)
-80100c43:	8b 55 d8             	mov    -0x28(%ebp),%edx
-80100c46:	89 54 24 08          	mov    %edx,0x8(%esp)
-80100c4a:	89 44 24 04          	mov    %eax,0x4(%esp)
-80100c4e:	8b 45 d4             	mov    -0x2c(%ebp),%eax
-80100c51:	89 04 24             	mov    %eax,(%esp)
-80100c54:	e8 67 7b 00 00       	call   801087c0 <loaduvm>
-80100c59:	85 c0                	test   %eax,%eax
-80100c5b:	0f 88 c6 02 00 00    	js     80100f27 <exec+0x42b>
-80100c61:	eb 01                	jmp    80100c64 <exec+0x168>
-  sz = 0;
-  for(i=0, off=elf.phoff; i<elf.phnum; i++, off+=sizeof(ph)){
-    if(readi(ip, (char*)&ph, off, sizeof(ph)) != sizeof(ph))
-      goto bad;
-    if(ph.type != ELF_PROG_LOAD)
-      continue;
-80100c63:	90                   	nop
-  if((pgdir = setupkvm()) == 0)
-    goto bad;
-
-  // Load program into memory.
-  sz = 0;
-  for(i=0, off=elf.phoff; i<elf.phnum; i++, off+=sizeof(ph)){
-80100c64:	83 45 ec 01          	addl   $0x1,-0x14(%ebp)
-80100c68:	8b 45 e8             	mov    -0x18(%ebp),%eax
-80100c6b:	83 c0 20             	add    $0x20,%eax
-80100c6e:	89 45 e8             	mov    %eax,-0x18(%ebp)
-80100c71:	0f b7 85 30 ff ff ff 	movzwl -0xd0(%ebp),%eax
-80100c78:	0f b7 c0             	movzwl %ax,%eax
-80100c7b:	3b 45 ec             	cmp    -0x14(%ebp),%eax
-80100c7e:	0f 8f 28 ff ff ff    	jg     80100bac <exec+0xb0>
-    if((sz = allocuvm(pgdir, sz, ph.vaddr + ph.memsz)) == 0)
-      goto bad;
-    if(loaduvm(pgdir, (char*)ph.vaddr, ip, ph.off, ph.filesz) < 0)
-      goto bad;
-  }
-  iunlockput(ip);
-80100c84:	8b 45 d8             	mov    -0x28(%ebp),%eax
-80100c87:	89 04 24             	mov    %eax,(%esp)
-80100c8a:	e8 c5 0e 00 00       	call   80101b54 <iunlockput>
-  end_op();
-80100c8f:	e8 aa 28 00 00       	call   8010353e <end_op>
-  ip = 0;
-80100c94:	c7 45 d8 00 00 00 00 	movl   $0x0,-0x28(%ebp)
-
-
-  int retFuncSize = implicit_exit_end - implicit_exit;
-80100c9b:	ba 52 8d 10 80       	mov    $0x80108d52,%edx
-80100ca0:	b8 48 8d 10 80       	mov    $0x80108d48,%eax
-80100ca5:	89 d1                	mov    %edx,%ecx
-80100ca7:	29 c1                	sub    %eax,%ecx
-80100ca9:	89 c8                	mov    %ecx,%eax
-80100cab:	89 45 d0             	mov    %eax,-0x30(%ebp)
-  // Allocate two pages at the next page boundary.
-  // Make the first inaccessible.  Use the second as the user stack.
-  sz = PGROUNDUP(sz);
-80100cae:	8b 45 e0             	mov    -0x20(%ebp),%eax
-80100cb1:	05 ff 0f 00 00       	add    $0xfff,%eax
-80100cb6:	25 00 f0 ff ff       	and    $0xfffff000,%eax
-80100cbb:	89 45 e0             	mov    %eax,-0x20(%ebp)
-
-  if((sz = allocuvm(pgdir, sz, sz + (2*PGSIZE + retFuncSize))) == 0)
-80100cbe:	8b 45 d0             	mov    -0x30(%ebp),%eax
-80100cc1:	03 45 e0             	add    -0x20(%ebp),%eax
-80100cc4:	05 00 20 00 00       	add    $0x2000,%eax
-80100cc9:	89 44 24 08          	mov    %eax,0x8(%esp)
-80100ccd:	8b 45 e0             	mov    -0x20(%ebp),%eax
-80100cd0:	89 44 24 04          	mov    %eax,0x4(%esp)
-80100cd4:	8b 45 d4             	mov    -0x2c(%ebp),%eax
-80100cd7:	89 04 24             	mov    %eax,(%esp)
-80100cda:	e8 d0 7b 00 00       	call   801088af <allocuvm>
-80100cdf:	89 45 e0             	mov    %eax,-0x20(%ebp)
-80100ce2:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
-80100ce6:	0f 84 3e 02 00 00    	je     80100f2a <exec+0x42e>
-    goto bad;
-  clearpteu(pgdir, (char*)(sz - (2*PGSIZE + retFuncSize)));
-80100cec:	8b 45 d0             	mov    -0x30(%ebp),%eax
-80100cef:	8b 55 e0             	mov    -0x20(%ebp),%edx
-80100cf2:	89 d1                	mov    %edx,%ecx
-80100cf4:	29 c1                	sub    %eax,%ecx
-80100cf6:	89 c8                	mov    %ecx,%eax
-80100cf8:	2d 00 20 00 00       	sub    $0x2000,%eax
-80100cfd:	89 44 24 04          	mov    %eax,0x4(%esp)
-80100d01:	8b 45 d4             	mov    -0x2c(%ebp),%eax
-80100d04:	89 04 24             	mov    %eax,(%esp)
-80100d07:	e8 c7 7d 00 00       	call   80108ad3 <clearpteu>
-
-
-  sp = sz - retFuncSize;
-80100d0c:	8b 45 d0             	mov    -0x30(%ebp),%eax
-80100d0f:	8b 55 e0             	mov    -0x20(%ebp),%edx
-80100d12:	89 d1                	mov    %edx,%ecx
-80100d14:	29 c1                	sub    %eax,%ecx
-80100d16:	89 c8                	mov    %ecx,%eax
-80100d18:	89 45 dc             	mov    %eax,-0x24(%ebp)
-  if(copyout(pgdir, sp, implicit_exit, retFuncSize) < 0)
-80100d1b:	8b 45 d0             	mov    -0x30(%ebp),%eax
-80100d1e:	89 44 24 0c          	mov    %eax,0xc(%esp)
-80100d22:	c7 44 24 08 48 8d 10 	movl   $0x80108d48,0x8(%esp)
-80100d29:	80 
-80100d2a:	8b 45 dc             	mov    -0x24(%ebp),%eax
-80100d2d:	89 44 24 04          	mov    %eax,0x4(%esp)
-80100d31:	8b 45 d4             	mov    -0x2c(%ebp),%eax
-80100d34:	89 04 24             	mov    %eax,(%esp)
-80100d37:	e8 5c 7f 00 00       	call   80108c98 <copyout>
-80100d3c:	85 c0                	test   %eax,%eax
-80100d3e:	0f 88 e9 01 00 00    	js     80100f2d <exec+0x431>
-    goto bad;
-
-  uint userRetFuncAddress = sp;
-80100d44:	8b 45 dc             	mov    -0x24(%ebp),%eax
-80100d47:	89 45 cc             	mov    %eax,-0x34(%ebp)
-
-  // Push argument strings, prepare rest of stack in ustack.
-  for(argc = 0; argv[argc]; argc++) {
-80100d4a:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
-80100d51:	e9 81 00 00 00       	jmp    80100dd7 <exec+0x2db>
-    if(argc >= MAXARG)
-80100d56:	83 7d e4 1f          	cmpl   $0x1f,-0x1c(%ebp)
-80100d5a:	0f 87 d0 01 00 00    	ja     80100f30 <exec+0x434>
-      goto bad;
-    sp = (sp - (strlen(argv[argc]) + 1)) & ~3;
-80100d60:	8b 45 e4             	mov    -0x1c(%ebp),%eax
-80100d63:	c1 e0 02             	shl    $0x2,%eax
-80100d66:	03 45 0c             	add    0xc(%ebp),%eax
-80100d69:	8b 00                	mov    (%eax),%eax
-80100d6b:	89 04 24             	mov    %eax,(%esp)
-80100d6e:	e8 81 4b 00 00       	call   801058f4 <strlen>
-80100d73:	f7 d0                	not    %eax
-80100d75:	03 45 dc             	add    -0x24(%ebp),%eax
-80100d78:	83 e0 fc             	and    $0xfffffffc,%eax
-80100d7b:	89 45 dc             	mov    %eax,-0x24(%ebp)
-    if(copyout(pgdir, sp, argv[argc], strlen(argv[argc]) + 1) < 0)
-80100d7e:	8b 45 e4             	mov    -0x1c(%ebp),%eax
-80100d81:	c1 e0 02             	shl    $0x2,%eax
-80100d84:	03 45 0c             	add    0xc(%ebp),%eax
-80100d87:	8b 00                	mov    (%eax),%eax
-80100d89:	89 04 24             	mov    %eax,(%esp)
-80100d8c:	e8 63 4b 00 00       	call   801058f4 <strlen>
-80100d91:	83 c0 01             	add    $0x1,%eax
-80100d94:	89 c2                	mov    %eax,%edx
-80100d96:	8b 45 e4             	mov    -0x1c(%ebp),%eax
-80100d99:	c1 e0 02             	shl    $0x2,%eax
-80100d9c:	03 45 0c             	add    0xc(%ebp),%eax
-80100d9f:	8b 00                	mov    (%eax),%eax
-80100da1:	89 54 24 0c          	mov    %edx,0xc(%esp)
-80100da5:	89 44 24 08          	mov    %eax,0x8(%esp)
-80100da9:	8b 45 dc             	mov    -0x24(%ebp),%eax
-80100dac:	89 44 24 04          	mov    %eax,0x4(%esp)
-80100db0:	8b 45 d4             	mov    -0x2c(%ebp),%eax
-80100db3:	89 04 24             	mov    %eax,(%esp)
-80100db6:	e8 dd 7e 00 00       	call   80108c98 <copyout>
-80100dbb:	85 c0                	test   %eax,%eax
-80100dbd:	0f 88 70 01 00 00    	js     80100f33 <exec+0x437>
-      goto bad;
-    ustack[3+argc] = sp;
-80100dc3:	8b 45 e4             	mov    -0x1c(%ebp),%eax
-80100dc6:	8d 50 03             	lea    0x3(%eax),%edx
-80100dc9:	8b 45 dc             	mov    -0x24(%ebp),%eax
-80100dcc:	89 84 95 38 ff ff ff 	mov    %eax,-0xc8(%ebp,%edx,4)
-    goto bad;
-
-  uint userRetFuncAddress = sp;
-
-  // Push argument strings, prepare rest of stack in ustack.
-  for(argc = 0; argv[argc]; argc++) {
-80100dd3:	83 45 e4 01          	addl   $0x1,-0x1c(%ebp)
-80100dd7:	8b 45 e4             	mov    -0x1c(%ebp),%eax
-80100dda:	c1 e0 02             	shl    $0x2,%eax
-80100ddd:	03 45 0c             	add    0xc(%ebp),%eax
-80100de0:	8b 00                	mov    (%eax),%eax
-80100de2:	85 c0                	test   %eax,%eax
-80100de4:	0f 85 6c ff ff ff    	jne    80100d56 <exec+0x25a>
-    sp = (sp - (strlen(argv[argc]) + 1)) & ~3;
-    if(copyout(pgdir, sp, argv[argc], strlen(argv[argc]) + 1) < 0)
-      goto bad;
-    ustack[3+argc] = sp;
-  }
-  ustack[3+argc] = 0;
-80100dea:	8b 45 e4             	mov    -0x1c(%ebp),%eax
-80100ded:	83 c0 03             	add    $0x3,%eax
-80100df0:	c7 84 85 38 ff ff ff 	movl   $0x0,-0xc8(%ebp,%eax,4)
-80100df7:	00 00 00 00 
-
-
-
-  ustack[0] = userRetFuncAddress;  // fake return PC
-80100dfb:	8b 45 cc             	mov    -0x34(%ebp),%eax
-80100dfe:	89 85 38 ff ff ff    	mov    %eax,-0xc8(%ebp)
-  ustack[1] = argc;
-80100e04:	8b 45 e4             	mov    -0x1c(%ebp),%eax
-80100e07:	89 85 3c ff ff ff    	mov    %eax,-0xc4(%ebp)
-  ustack[2] = sp - (argc+1)*4;  // argv pointer
-80100e0d:	8b 45 e4             	mov    -0x1c(%ebp),%eax
-80100e10:	83 c0 01             	add    $0x1,%eax
-80100e13:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
-80100e1a:	8b 45 dc             	mov    -0x24(%ebp),%eax
-80100e1d:	29 d0                	sub    %edx,%eax
-80100e1f:	89 85 40 ff ff ff    	mov    %eax,-0xc0(%ebp)
-
-  sp -= (3+argc+1) * 4;
-80100e25:	8b 45 e4             	mov    -0x1c(%ebp),%eax
-80100e28:	83 c0 04             	add    $0x4,%eax
-80100e2b:	c1 e0 02             	shl    $0x2,%eax
-80100e2e:	29 45 dc             	sub    %eax,-0x24(%ebp)
-  if(copyout(pgdir, sp, ustack, (3+argc+1)*4) < 0)
-80100e31:	8b 45 e4             	mov    -0x1c(%ebp),%eax
-80100e34:	83 c0 04             	add    $0x4,%eax
-80100e37:	c1 e0 02             	shl    $0x2,%eax
-80100e3a:	89 44 24 0c          	mov    %eax,0xc(%esp)
-80100e3e:	8d 85 38 ff ff ff    	lea    -0xc8(%ebp),%eax
-80100e44:	89 44 24 08          	mov    %eax,0x8(%esp)
-80100e48:	8b 45 dc             	mov    -0x24(%ebp),%eax
-80100e4b:	89 44 24 04          	mov    %eax,0x4(%esp)
-80100e4f:	8b 45 d4             	mov    -0x2c(%ebp),%eax
-80100e52:	89 04 24             	mov    %eax,(%esp)
-80100e55:	e8 3e 7e 00 00       	call   80108c98 <copyout>
-80100e5a:	85 c0                	test   %eax,%eax
-80100e5c:	0f 88 d4 00 00 00    	js     80100f36 <exec+0x43a>
-    goto bad;
-
-  // Save program name for debugging.
-  for(last=s=path; *s; s++)
-80100e62:	8b 45 08             	mov    0x8(%ebp),%eax
-80100e65:	89 45 f4             	mov    %eax,-0xc(%ebp)
-80100e68:	8b 45 f4             	mov    -0xc(%ebp),%eax
-80100e6b:	89 45 f0             	mov    %eax,-0x10(%ebp)
-80100e6e:	eb 17                	jmp    80100e87 <exec+0x38b>
-    if(*s == '/')
-80100e70:	8b 45 f4             	mov    -0xc(%ebp),%eax
-80100e73:	0f b6 00             	movzbl (%eax),%eax
-80100e76:	3c 2f                	cmp    $0x2f,%al
-80100e78:	75 09                	jne    80100e83 <exec+0x387>
-      last = s+1;
-80100e7a:	8b 45 f4             	mov    -0xc(%ebp),%eax
-80100e7d:	83 c0 01             	add    $0x1,%eax
-80100e80:	89 45 f0             	mov    %eax,-0x10(%ebp)
-  sp -= (3+argc+1) * 4;
-  if(copyout(pgdir, sp, ustack, (3+argc+1)*4) < 0)
-    goto bad;
-
-  // Save program name for debugging.
-  for(last=s=path; *s; s++)
-80100e83:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
-80100e87:	8b 45 f4             	mov    -0xc(%ebp),%eax
-80100e8a:	0f b6 00             	movzbl (%eax),%eax
-80100e8d:	84 c0                	test   %al,%al
-80100e8f:	75 df                	jne    80100e70 <exec+0x374>
-    if(*s == '/')
-      last = s+1;
-  safestrcpy(proc->name, last, sizeof(proc->name));
-80100e91:	65 a1 04 00 00 00    	mov    %gs:0x4,%eax
-80100e97:	8d 50 70             	lea    0x70(%eax),%edx
-80100e9a:	c7 44 24 08 10 00 00 	movl   $0x10,0x8(%esp)
-80100ea1:	00 
-80100ea2:	8b 45 f0             	mov    -0x10(%ebp),%eax
-80100ea5:	89 44 24 04          	mov    %eax,0x4(%esp)
-80100ea9:	89 14 24             	mov    %edx,(%esp)
-80100eac:	e8 f5 49 00 00       	call   801058a6 <safestrcpy>
-//  cprintf("\n[debug] [%s] executing '%s' \n", TAG, last);
-  // Commit to the user image.
-  oldpgdir = proc->pgdir;
-80100eb1:	65 a1 04 00 00 00    	mov    %gs:0x4,%eax
-80100eb7:	8b 40 04             	mov    0x4(%eax),%eax
-80100eba:	89 45 c8             	mov    %eax,-0x38(%ebp)
-  proc->pgdir = pgdir;
-80100ebd:	65 a1 04 00 00 00    	mov    %gs:0x4,%eax
-80100ec3:	8b 55 d4             	mov    -0x2c(%ebp),%edx
-80100ec6:	89 50 04             	mov    %edx,0x4(%eax)
-  proc->sz = sz;
-80100ec9:	65 a1 04 00 00 00    	mov    %gs:0x4,%eax
-80100ecf:	8b 55 e0             	mov    -0x20(%ebp),%edx
-80100ed2:	89 10                	mov    %edx,(%eax)
-  proc->tf->eip = elf.entry;  // main
-80100ed4:	65 a1 04 00 00 00    	mov    %gs:0x4,%eax
-80100eda:	8b 40 1c             	mov    0x1c(%eax),%eax
-80100edd:	8b 95 1c ff ff ff    	mov    -0xe4(%ebp),%edx
-80100ee3:	89 50 38             	mov    %edx,0x38(%eax)
-  proc->tf->esp = sp;
-80100ee6:	65 a1 04 00 00 00    	mov    %gs:0x4,%eax
-80100eec:	8b 40 1c             	mov    0x1c(%eax),%eax
-80100eef:	8b 55 dc             	mov    -0x24(%ebp),%edx
-80100ef2:	89 50 44             	mov    %edx,0x44(%eax)
-  switchuvm(proc);
-80100ef5:	65 a1 04 00 00 00    	mov    %gs:0x4,%eax
-80100efb:	89 04 24             	mov    %eax,(%esp)
-80100efe:	e8 cb 76 00 00       	call   801085ce <switchuvm>
-  freevm(oldpgdir);
-80100f03:	8b 45 c8             	mov    -0x38(%ebp),%eax
-80100f06:	89 04 24             	mov    %eax,(%esp)
-80100f09:	e8 37 7b 00 00       	call   80108a45 <freevm>
-  return 0;
-80100f0e:	b8 00 00 00 00       	mov    $0x0,%eax
-80100f13:	eb 4e                	jmp    80100f63 <exec+0x467>
-  ilock(ip);
-  pgdir = 0;
-
-  // Check ELF header
-  if(readi(ip, (char*)&elf, 0, sizeof(elf)) < sizeof(elf))
-    goto bad;
-80100f15:	90                   	nop
-80100f16:	eb 1f                	jmp    80100f37 <exec+0x43b>
-  if(elf.magic != ELF_MAGIC)
-    goto bad;
-80100f18:	90                   	nop
-80100f19:	eb 1c                	jmp    80100f37 <exec+0x43b>
-
-  if((pgdir = setupkvm()) == 0)
-    goto bad;
-80100f1b:	90                   	nop
-80100f1c:	eb 19                	jmp    80100f37 <exec+0x43b>
-
-  // Load program into memory.
-  sz = 0;
-  for(i=0, off=elf.phoff; i<elf.phnum; i++, off+=sizeof(ph)){
-    if(readi(ip, (char*)&ph, off, sizeof(ph)) != sizeof(ph))
-      goto bad;
-80100f1e:	90                   	nop
-80100f1f:	eb 16                	jmp    80100f37 <exec+0x43b>
-    if(ph.type != ELF_PROG_LOAD)
-      continue;
-    if(ph.memsz < ph.filesz)
-      goto bad;
-80100f21:	90                   	nop
-80100f22:	eb 13                	jmp    80100f37 <exec+0x43b>
-    if((sz = allocuvm(pgdir, sz, ph.vaddr + ph.memsz)) == 0)
-      goto bad;
-80100f24:	90                   	nop
-80100f25:	eb 10                	jmp    80100f37 <exec+0x43b>
-    if(loaduvm(pgdir, (char*)ph.vaddr, ip, ph.off, ph.filesz) < 0)
-      goto bad;
-80100f27:	90                   	nop
-80100f28:	eb 0d                	jmp    80100f37 <exec+0x43b>
-  // Allocate two pages at the next page boundary.
-  // Make the first inaccessible.  Use the second as the user stack.
-  sz = PGROUNDUP(sz);
-
-  if((sz = allocuvm(pgdir, sz, sz + (2*PGSIZE + retFuncSize))) == 0)
-    goto bad;
-80100f2a:	90                   	nop
-80100f2b:	eb 0a                	jmp    80100f37 <exec+0x43b>
-  clearpteu(pgdir, (char*)(sz - (2*PGSIZE + retFuncSize)));
-
-
-  sp = sz - retFuncSize;
-  if(copyout(pgdir, sp, implicit_exit, retFuncSize) < 0)
-    goto bad;
-80100f2d:	90                   	nop
-80100f2e:	eb 07                	jmp    80100f37 <exec+0x43b>
-  uint userRetFuncAddress = sp;
-
-  // Push argument strings, prepare rest of stack in ustack.
-  for(argc = 0; argv[argc]; argc++) {
-    if(argc >= MAXARG)
-      goto bad;
-80100f30:	90                   	nop
-80100f31:	eb 04                	jmp    80100f37 <exec+0x43b>
-    sp = (sp - (strlen(argv[argc]) + 1)) & ~3;
-    if(copyout(pgdir, sp, argv[argc], strlen(argv[argc]) + 1) < 0)
-      goto bad;
-80100f33:	90                   	nop
-80100f34:	eb 01                	jmp    80100f37 <exec+0x43b>
-  ustack[1] = argc;
-  ustack[2] = sp - (argc+1)*4;  // argv pointer
-
-  sp -= (3+argc+1) * 4;
-  if(copyout(pgdir, sp, ustack, (3+argc+1)*4) < 0)
-    goto bad;
-80100f36:	90                   	nop
-  switchuvm(proc);
-  freevm(oldpgdir);
-  return 0;
-
- bad:
-  if(pgdir)
-80100f37:	83 7d d4 00          	cmpl   $0x0,-0x2c(%ebp)
-80100f3b:	74 0b                	je     80100f48 <exec+0x44c>
-    freevm(pgdir);
-80100f3d:	8b 45 d4             	mov    -0x2c(%ebp),%eax
-80100f40:	89 04 24             	mov    %eax,(%esp)
-80100f43:	e8 fd 7a 00 00       	call   80108a45 <freevm>
-  if(ip){
-80100f48:	83 7d d8 00          	cmpl   $0x0,-0x28(%ebp)
-80100f4c:	74 10                	je     80100f5e <exec+0x462>
-    iunlockput(ip);
-80100f4e:	8b 45 d8             	mov    -0x28(%ebp),%eax
-80100f51:	89 04 24             	mov    %eax,(%esp)
-80100f54:	e8 fb 0b 00 00       	call   80101b54 <iunlockput>
-    end_op();
-80100f59:	e8 e0 25 00 00       	call   8010353e <end_op>
-  }
-  return -1;
-80100f5e:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
-}
-80100f63:	c9                   	leave  
-80100f64:	c3                   	ret    
-80100f65:	00 00                	add    %al,(%eax)
-	...
-
-80100f68 <fileinit>:
-  struct file file[NFILE];
-} ftable;
-
-void
-fileinit(void)
-{
-80100f68:	55                   	push   %ebp
-80100f69:	89 e5                	mov    %esp,%ebp
-80100f6b:	83 ec 18             	sub    $0x18,%esp
-  initlock(&ftable.lock, "ftable");
-80100f6e:	c7 44 24 04 01 92 10 	movl   $0x80109201,0x4(%esp)
-80100f75:	80 
-80100f76:	c7 04 24 60 18 11 80 	movl   $0x80111860,(%esp)
-80100f7d:	e8 84 44 00 00       	call   80105406 <initlock>
-}
-80100f82:	c9                   	leave  
-80100f83:	c3                   	ret    
-
-80100f84 <filealloc>:
-
-// Allocate a file structure.
-struct file*
-filealloc(void)
-{
-80100f84:	55                   	push   %ebp
-80100f85:	89 e5                	mov    %esp,%ebp
-80100f87:	83 ec 28             	sub    $0x28,%esp
-  struct file *f;
-
-  acquire(&ftable.lock);
-80100f8a:	c7 04 24 60 18 11 80 	movl   $0x80111860,(%esp)
-80100f91:	e8 91 44 00 00       	call   80105427 <acquire>
-  for(f = ftable.file; f < ftable.file + NFILE; f++){
-80100f96:	c7 45 f4 94 18 11 80 	movl   $0x80111894,-0xc(%ebp)
-80100f9d:	eb 29                	jmp    80100fc8 <filealloc+0x44>
-    if(f->ref == 0){
-80100f9f:	8b 45 f4             	mov    -0xc(%ebp),%eax
-80100fa2:	8b 40 04             	mov    0x4(%eax),%eax
-80100fa5:	85 c0                	test   %eax,%eax
-80100fa7:	75 1b                	jne    80100fc4 <filealloc+0x40>
-      f->ref = 1;
-80100fa9:	8b 45 f4             	mov    -0xc(%ebp),%eax
-80100fac:	c7 40 04 01 00 00 00 	movl   $0x1,0x4(%eax)
-      release(&ftable.lock);
-80100fb3:	c7 04 24 60 18 11 80 	movl   $0x80111860,(%esp)
-80100fba:	e8 ca 44 00 00       	call   80105489 <release>
-      return f;
-80100fbf:	8b 45 f4             	mov    -0xc(%ebp),%eax
-80100fc2:	eb 1e                	jmp    80100fe2 <filealloc+0x5e>
-filealloc(void)
-{
-  struct file *f;
-
-  acquire(&ftable.lock);
-  for(f = ftable.file; f < ftable.file + NFILE; f++){
-80100fc4:	83 45 f4 18          	addl   $0x18,-0xc(%ebp)
-80100fc8:	81 7d f4 f4 21 11 80 	cmpl   $0x801121f4,-0xc(%ebp)
-80100fcf:	72 ce                	jb     80100f9f <filealloc+0x1b>
-      f->ref = 1;
-      release(&ftable.lock);
-      return f;
-    }
-  }
-  release(&ftable.lock);
-80100fd1:	c7 04 24 60 18 11 80 	movl   $0x80111860,(%esp)
-80100fd8:	e8 ac 44 00 00       	call   80105489 <release>
-  return 0;
-80100fdd:	b8 00 00 00 00       	mov    $0x0,%eax
-}
-80100fe2:	c9                   	leave  
-80100fe3:	c3                   	ret    
-
-80100fe4 <filedup>:
-
-// Increment ref count for file f.
-struct file*
-filedup(struct file *f)
-{
-80100fe4:	55                   	push   %ebp
-80100fe5:	89 e5                	mov    %esp,%ebp
-80100fe7:	83 ec 18             	sub    $0x18,%esp
-  acquire(&ftable.lock);
-80100fea:	c7 04 24 60 18 11 80 	movl   $0x80111860,(%esp)
-80100ff1:	e8 31 44 00 00       	call   80105427 <acquire>
-  if(f->ref < 1)
-80100ff6:	8b 45 08             	mov    0x8(%ebp),%eax
-80100ff9:	8b 40 04             	mov    0x4(%eax),%eax
-80100ffc:	85 c0                	test   %eax,%eax
-80100ffe:	7f 0c                	jg     8010100c <filedup+0x28>
-    panic("filedup");
-80101000:	c7 04 24 08 92 10 80 	movl   $0x80109208,(%esp)
-80101007:	e8 31 f5 ff ff       	call   8010053d <panic>
-  f->ref++;
-8010100c:	8b 45 08             	mov    0x8(%ebp),%eax
-8010100f:	8b 40 04             	mov    0x4(%eax),%eax
-80101012:	8d 50 01             	lea    0x1(%eax),%edx
-80101015:	8b 45 08             	mov    0x8(%ebp),%eax
-80101018:	89 50 04             	mov    %edx,0x4(%eax)
-  release(&ftable.lock);
-8010101b:	c7 04 24 60 18 11 80 	movl   $0x80111860,(%esp)
-80101022:	e8 62 44 00 00       	call   80105489 <release>
-  return f;
-80101027:	8b 45 08             	mov    0x8(%ebp),%eax
-}
-8010102a:	c9                   	leave  
-8010102b:	c3                   	ret    
-
-8010102c <fileclose>:
-
-// Close file f.  (Decrement ref count, close when reaches 0.)
-void
-fileclose(struct file *f)
-{
-8010102c:	55                   	push   %ebp
-8010102d:	89 e5                	mov    %esp,%ebp
-8010102f:	83 ec 38             	sub    $0x38,%esp
-  struct file ff;
-
-  acquire(&ftable.lock);
-80101032:	c7 04 24 60 18 11 80 	movl   $0x80111860,(%esp)
-80101039:	e8 e9 43 00 00       	call   80105427 <acquire>
-  if(f->ref < 1)
-8010103e:	8b 45 08             	mov    0x8(%ebp),%eax
-80101041:	8b 40 04             	mov    0x4(%eax),%eax
-80101044:	85 c0                	test   %eax,%eax
-80101046:	7f 0c                	jg     80101054 <fileclose+0x28>
-    panic("fileclose");
-80101048:	c7 04 24 10 92 10 80 	movl   $0x80109210,(%esp)
-8010104f:	e8 e9 f4 ff ff       	call   8010053d <panic>
-  if(--f->ref > 0){
-80101054:	8b 45 08             	mov    0x8(%ebp),%eax
-80101057:	8b 40 04             	mov    0x4(%eax),%eax
-8010105a:	8d 50 ff             	lea    -0x1(%eax),%edx
-8010105d:	8b 45 08             	mov    0x8(%ebp),%eax
-80101060:	89 50 04             	mov    %edx,0x4(%eax)
-80101063:	8b 45 08             	mov    0x8(%ebp),%eax
-80101066:	8b 40 04             	mov    0x4(%eax),%eax
-80101069:	85 c0                	test   %eax,%eax
-8010106b:	7e 11                	jle    8010107e <fileclose+0x52>
-    release(&ftable.lock);
-8010106d:	c7 04 24 60 18 11 80 	movl   $0x80111860,(%esp)
-80101074:	e8 10 44 00 00       	call   80105489 <release>
-    return;
-80101079:	e9 82 00 00 00       	jmp    80101100 <fileclose+0xd4>
-  }
-  ff = *f;
-8010107e:	8b 45 08             	mov    0x8(%ebp),%eax
-80101081:	8b 10                	mov    (%eax),%edx
-80101083:	89 55 e0             	mov    %edx,-0x20(%ebp)
-80101086:	8b 50 04             	mov    0x4(%eax),%edx
-80101089:	89 55 e4             	mov    %edx,-0x1c(%ebp)
-8010108c:	8b 50 08             	mov    0x8(%eax),%edx
-8010108f:	89 55 e8             	mov    %edx,-0x18(%ebp)
-80101092:	8b 50 0c             	mov    0xc(%eax),%edx
-80101095:	89 55 ec             	mov    %edx,-0x14(%ebp)
-80101098:	8b 50 10             	mov    0x10(%eax),%edx
-8010109b:	89 55 f0             	mov    %edx,-0x10(%ebp)
-8010109e:	8b 40 14             	mov    0x14(%eax),%eax
-801010a1:	89 45 f4             	mov    %eax,-0xc(%ebp)
-  f->ref = 0;
-801010a4:	8b 45 08             	mov    0x8(%ebp),%eax
-801010a7:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
-  f->type = FD_NONE;
-801010ae:	8b 45 08             	mov    0x8(%ebp),%eax
-801010b1:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
-  release(&ftable.lock);
-801010b7:	c7 04 24 60 18 11 80 	movl   $0x80111860,(%esp)
-801010be:	e8 c6 43 00 00       	call   80105489 <release>
-  
-  if(ff.type == FD_PIPE)
-801010c3:	8b 45 e0             	mov    -0x20(%ebp),%eax
-801010c6:	83 f8 01             	cmp    $0x1,%eax
-801010c9:	75 18                	jne    801010e3 <fileclose+0xb7>
-    pipeclose(ff.pipe, ff.writable);
-801010cb:	0f b6 45 e9          	movzbl -0x17(%ebp),%eax
-801010cf:	0f be d0             	movsbl %al,%edx
-801010d2:	8b 45 ec             	mov    -0x14(%ebp),%eax
-801010d5:	89 54 24 04          	mov    %edx,0x4(%esp)
-801010d9:	89 04 24             	mov    %eax,(%esp)
-801010dc:	e8 4e 30 00 00       	call   8010412f <pipeclose>
-801010e1:	eb 1d                	jmp    80101100 <fileclose+0xd4>
-  else if(ff.type == FD_INODE){
-801010e3:	8b 45 e0             	mov    -0x20(%ebp),%eax
-801010e6:	83 f8 02             	cmp    $0x2,%eax
-801010e9:	75 15                	jne    80101100 <fileclose+0xd4>
-    begin_op();
-801010eb:	e8 cd 23 00 00       	call   801034bd <begin_op>
-    iput(ff.ip);
-801010f0:	8b 45 f0             	mov    -0x10(%ebp),%eax
-801010f3:	89 04 24             	mov    %eax,(%esp)
-801010f6:	e8 88 09 00 00       	call   80101a83 <iput>
-    end_op();
-801010fb:	e8 3e 24 00 00       	call   8010353e <end_op>
-  }
-}
-80101100:	c9                   	leave  
-80101101:	c3                   	ret    
-
-80101102 <filestat>:
-
-// Get metadata about file f.
-int
-filestat(struct file *f, struct stat *st)
-{
-80101102:	55                   	push   %ebp
-80101103:	89 e5                	mov    %esp,%ebp
-80101105:	83 ec 18             	sub    $0x18,%esp
-  if(f->type == FD_INODE){
-80101108:	8b 45 08             	mov    0x8(%ebp),%eax
-8010110b:	8b 00                	mov    (%eax),%eax
-8010110d:	83 f8 02             	cmp    $0x2,%eax
-80101110:	75 38                	jne    8010114a <filestat+0x48>
-    ilock(f->ip);
-80101112:	8b 45 08             	mov    0x8(%ebp),%eax
-80101115:	8b 40 10             	mov    0x10(%eax),%eax
-80101118:	89 04 24             	mov    %eax,(%esp)
-8010111b:	e8 b0 07 00 00       	call   801018d0 <ilock>
-    stati(f->ip, st);
-80101120:	8b 45 08             	mov    0x8(%ebp),%eax
-80101123:	8b 40 10             	mov    0x10(%eax),%eax
-80101126:	8b 55 0c             	mov    0xc(%ebp),%edx
-80101129:	89 54 24 04          	mov    %edx,0x4(%esp)
-8010112d:	89 04 24             	mov    %eax,(%esp)
-80101130:	e8 4c 0c 00 00       	call   80101d81 <stati>
-    iunlock(f->ip);
-80101135:	8b 45 08             	mov    0x8(%ebp),%eax
-80101138:	8b 40 10             	mov    0x10(%eax),%eax
-8010113b:	89 04 24             	mov    %eax,(%esp)
-8010113e:	e8 db 08 00 00       	call   80101a1e <iunlock>
-    return 0;
-80101143:	b8 00 00 00 00       	mov    $0x0,%eax
-80101148:	eb 05                	jmp    8010114f <filestat+0x4d>
-  }
-  return -1;
-8010114a:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
-}
-8010114f:	c9                   	leave  
-80101150:	c3                   	ret    
-
-80101151 <fileread>:
-
-
-// Read from file f.
-int
-fileread(struct file *f, char *addr, int n)
-{
-80101151:	55                   	push   %ebp
-80101152:	89 e5                	mov    %esp,%ebp
-80101154:	83 ec 28             	sub    $0x28,%esp
-  int r;
-
-  if(f->readable == 0)
-80101157:	8b 45 08             	mov    0x8(%ebp),%eax
-8010115a:	0f b6 40 08          	movzbl 0x8(%eax),%eax
-8010115e:	84 c0                	test   %al,%al
-80101160:	75 0a                	jne    8010116c <fileread+0x1b>
-    return -1;
-80101162:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
-80101167:	e9 9f 00 00 00       	jmp    8010120b <fileread+0xba>
-  if(f->type == FD_PIPE)
-8010116c:	8b 45 08             	mov    0x8(%ebp),%eax
-8010116f:	8b 00                	mov    (%eax),%eax
-80101171:	83 f8 01             	cmp    $0x1,%eax
-80101174:	75 1e                	jne    80101194 <fileread+0x43>
-    return piperead(f->pipe, addr, n);
-80101176:	8b 45 08             	mov    0x8(%ebp),%eax
-80101179:	8b 40 0c             	mov    0xc(%eax),%eax
-8010117c:	8b 55 10             	mov    0x10(%ebp),%edx
-8010117f:	89 54 24 08          	mov    %edx,0x8(%esp)
-80101183:	8b 55 0c             	mov    0xc(%ebp),%edx
-80101186:	89 54 24 04          	mov    %edx,0x4(%esp)
-8010118a:	89 04 24             	mov    %eax,(%esp)
-8010118d:	e8 1f 31 00 00       	call   801042b1 <piperead>
-80101192:	eb 77                	jmp    8010120b <fileread+0xba>
-  if(f->type == FD_INODE){
-80101194:	8b 45 08             	mov    0x8(%ebp),%eax
-80101197:	8b 00                	mov    (%eax),%eax
-80101199:	83 f8 02             	cmp    $0x2,%eax
-8010119c:	75 61                	jne    801011ff <fileread+0xae>
-    ilock(f->ip);
-8010119e:	8b 45 08             	mov    0x8(%ebp),%eax
-801011a1:	8b 40 10             	mov    0x10(%eax),%eax
-801011a4:	89 04 24             	mov    %eax,(%esp)
-801011a7:	e8 24 07 00 00       	call   801018d0 <ilock>
-    if((r = readi(f->ip, addr, f->off, n)) > 0)
-801011ac:	8b 4d 10             	mov    0x10(%ebp),%ecx
-801011af:	8b 45 08             	mov    0x8(%ebp),%eax
-801011b2:	8b 50 14             	mov    0x14(%eax),%edx
-801011b5:	8b 45 08             	mov    0x8(%ebp),%eax
-801011b8:	8b 40 10             	mov    0x10(%eax),%eax
-801011bb:	89 4c 24 0c          	mov    %ecx,0xc(%esp)
-801011bf:	89 54 24 08          	mov    %edx,0x8(%esp)
-801011c3:	8b 55 0c             	mov    0xc(%ebp),%edx
-801011c6:	89 54 24 04          	mov    %edx,0x4(%esp)
-801011ca:	89 04 24             	mov    %eax,(%esp)
-801011cd:	e8 f4 0b 00 00       	call   80101dc6 <readi>
-801011d2:	89 45 f4             	mov    %eax,-0xc(%ebp)
-801011d5:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
-801011d9:	7e 11                	jle    801011ec <fileread+0x9b>
-      f->off += r;
-801011db:	8b 45 08             	mov    0x8(%ebp),%eax
-801011de:	8b 50 14             	mov    0x14(%eax),%edx
-801011e1:	8b 45 f4             	mov    -0xc(%ebp),%eax
-801011e4:	01 c2                	add    %eax,%edx
-801011e6:	8b 45 08             	mov    0x8(%ebp),%eax
-801011e9:	89 50 14             	mov    %edx,0x14(%eax)
-    iunlock(f->ip);
-801011ec:	8b 45 08             	mov    0x8(%ebp),%eax
-801011ef:	8b 40 10             	mov    0x10(%eax),%eax
-801011f2:	89 04 24             	mov    %eax,(%esp)
-801011f5:	e8 24 08 00 00       	call   80101a1e <iunlock>
-    return r;
-801011fa:	8b 45 f4             	mov    -0xc(%ebp),%eax
-801011fd:	eb 0c                	jmp    8010120b <fileread+0xba>
-  }
-  panic("fileread");
-801011ff:	c7 04 24 1a 92 10 80 	movl   $0x8010921a,(%esp)
-80101206:	e8 32 f3 ff ff       	call   8010053d <panic>
-}
-8010120b:	c9                   	leave  
-8010120c:	c3                   	ret    
-
-8010120d <filewrite>:
-
-//PAGEBREAK!
-// Write to file f.
-int
-filewrite(struct file *f, char *addr, int n)
-{
-8010120d:	55                   	push   %ebp
-8010120e:	89 e5                	mov    %esp,%ebp
-80101210:	53                   	push   %ebx
-80101211:	83 ec 24             	sub    $0x24,%esp
-  int r;
-
-  if(f->writable == 0)
-80101214:	8b 45 08             	mov    0x8(%ebp),%eax
-80101217:	0f b6 40 09          	movzbl 0x9(%eax),%eax
-8010121b:	84 c0                	test   %al,%al
-8010121d:	75 0a                	jne    80101229 <filewrite+0x1c>
-    return -1;
-8010121f:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
-80101224:	e9 23 01 00 00       	jmp    8010134c <filewrite+0x13f>
-  if(f->type == FD_PIPE)
-80101229:	8b 45 08             	mov    0x8(%ebp),%eax
-8010122c:	8b 00                	mov    (%eax),%eax
-8010122e:	83 f8 01             	cmp    $0x1,%eax
-80101231:	75 21                	jne    80101254 <filewrite+0x47>
-    return pipewrite(f->pipe, addr, n);
-80101233:	8b 45 08             	mov    0x8(%ebp),%eax
-80101236:	8b 40 0c             	mov    0xc(%eax),%eax
-80101239:	8b 55 10             	mov    0x10(%ebp),%edx
-8010123c:	89 54 24 08          	mov    %edx,0x8(%esp)
-80101240:	8b 55 0c             	mov    0xc(%ebp),%edx
-80101243:	89 54 24 04          	mov    %edx,0x4(%esp)
-80101247:	89 04 24             	mov    %eax,(%esp)
-8010124a:	e8 72 2f 00 00       	call   801041c1 <pipewrite>
-8010124f:	e9 f8 00 00 00       	jmp    8010134c <filewrite+0x13f>
-  if(f->type == FD_INODE){
-80101254:	8b 45 08             	mov    0x8(%ebp),%eax
-80101257:	8b 00                	mov    (%eax),%eax
-80101259:	83 f8 02             	cmp    $0x2,%eax
-8010125c:	0f 85 de 00 00 00    	jne    80101340 <filewrite+0x133>
-    // the maximum log transaction size, including
-    // i-node, indirect block, allocation blocks,
-    // and 2 blocks of slop for non-aligned writes.
-    // this really belongs lower down, since writei()
-    // might be writing a device like the console.
-    int max = ((LOGSIZE-1-1-2) / 2) * 512;
-80101262:	c7 45 ec 00 1a 00 00 	movl   $0x1a00,-0x14(%ebp)
-    int i = 0;
-80101269:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
-    while(i < n){
-80101270:	e9 a8 00 00 00       	jmp    8010131d <filewrite+0x110>
-      int n1 = n - i;
-80101275:	8b 45 f4             	mov    -0xc(%ebp),%eax
-80101278:	8b 55 10             	mov    0x10(%ebp),%edx
-8010127b:	89 d1                	mov    %edx,%ecx
-8010127d:	29 c1                	sub    %eax,%ecx
-8010127f:	89 c8                	mov    %ecx,%eax
-80101281:	89 45 f0             	mov    %eax,-0x10(%ebp)
-      if(n1 > max)
-80101284:	8b 45 f0             	mov    -0x10(%ebp),%eax
-80101287:	3b 45 ec             	cmp    -0x14(%ebp),%eax
-8010128a:	7e 06                	jle    80101292 <filewrite+0x85>
-        n1 = max;
-8010128c:	8b 45 ec             	mov    -0x14(%ebp),%eax
-8010128f:	89 45 f0             	mov    %eax,-0x10(%ebp)
-
-      begin_op();
-80101292:	e8 26 22 00 00       	call   801034bd <begin_op>
-      ilock(f->ip);
-80101297:	8b 45 08             	mov    0x8(%ebp),%eax
-8010129a:	8b 40 10             	mov    0x10(%eax),%eax
-8010129d:	89 04 24             	mov    %eax,(%esp)
-801012a0:	e8 2b 06 00 00       	call   801018d0 <ilock>
-      if ((r = writei(f->ip, addr + i, f->off, n1)) > 0)
-801012a5:	8b 5d f0             	mov    -0x10(%ebp),%ebx
-801012a8:	8b 45 08             	mov    0x8(%ebp),%eax
-801012ab:	8b 48 14             	mov    0x14(%eax),%ecx
-801012ae:	8b 45 f4             	mov    -0xc(%ebp),%eax
-801012b1:	89 c2                	mov    %eax,%edx
-801012b3:	03 55 0c             	add    0xc(%ebp),%edx
-801012b6:	8b 45 08             	mov    0x8(%ebp),%eax
-801012b9:	8b 40 10             	mov    0x10(%eax),%eax
-801012bc:	89 5c 24 0c          	mov    %ebx,0xc(%esp)
-801012c0:	89 4c 24 08          	mov    %ecx,0x8(%esp)
-801012c4:	89 54 24 04          	mov    %edx,0x4(%esp)
-801012c8:	89 04 24             	mov    %eax,(%esp)
-801012cb:	e8 61 0c 00 00       	call   80101f31 <writei>
-801012d0:	89 45 e8             	mov    %eax,-0x18(%ebp)
-801012d3:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
-801012d7:	7e 11                	jle    801012ea <filewrite+0xdd>
-        f->off += r;
-801012d9:	8b 45 08             	mov    0x8(%ebp),%eax
-801012dc:	8b 50 14             	mov    0x14(%eax),%edx
-801012df:	8b 45 e8             	mov    -0x18(%ebp),%eax
-801012e2:	01 c2                	add    %eax,%edx
-801012e4:	8b 45 08             	mov    0x8(%ebp),%eax
-801012e7:	89 50 14             	mov    %edx,0x14(%eax)
-      iunlock(f->ip);
-801012ea:	8b 45 08             	mov    0x8(%ebp),%eax
-801012ed:	8b 40 10             	mov    0x10(%eax),%eax
-801012f0:	89 04 24             	mov    %eax,(%esp)
-801012f3:	e8 26 07 00 00       	call   80101a1e <iunlock>
-      end_op();
-801012f8:	e8 41 22 00 00       	call   8010353e <end_op>
-
-      if(r < 0)
-801012fd:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
-80101301:	78 28                	js     8010132b <filewrite+0x11e>
-        break;
-      if(r != n1)
-80101303:	8b 45 e8             	mov    -0x18(%ebp),%eax
-80101306:	3b 45 f0             	cmp    -0x10(%ebp),%eax
-80101309:	74 0c                	je     80101317 <filewrite+0x10a>
-        panic("short filewrite");
-8010130b:	c7 04 24 23 92 10 80 	movl   $0x80109223,(%esp)
-80101312:	e8 26 f2 ff ff       	call   8010053d <panic>
-      i += r;
-80101317:	8b 45 e8             	mov    -0x18(%ebp),%eax
-8010131a:	01 45 f4             	add    %eax,-0xc(%ebp)
-    // and 2 blocks of slop for non-aligned writes.
-    // this really belongs lower down, since writei()
-    // might be writing a device like the console.
-    int max = ((LOGSIZE-1-1-2) / 2) * 512;
-    int i = 0;
-    while(i < n){
-8010131d:	8b 45 f4             	mov    -0xc(%ebp),%eax
-80101320:	3b 45 10             	cmp    0x10(%ebp),%eax
-80101323:	0f 8c 4c ff ff ff    	jl     80101275 <filewrite+0x68>
-80101329:	eb 01                	jmp    8010132c <filewrite+0x11f>
-        f->off += r;
-      iunlock(f->ip);
-      end_op();
-
-      if(r < 0)
-        break;
-8010132b:	90                   	nop
-      if(r != n1)
-        panic("short filewrite");
-      i += r;
-    }
-    return i == n ? n : -1;
-8010132c:	8b 45 f4             	mov    -0xc(%ebp),%eax
-8010132f:	3b 45 10             	cmp    0x10(%ebp),%eax
-80101332:	75 05                	jne    80101339 <filewrite+0x12c>
-80101334:	8b 45 10             	mov    0x10(%ebp),%eax
-80101337:	eb 05                	jmp    8010133e <filewrite+0x131>
-80101339:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
-8010133e:	eb 0c                	jmp    8010134c <filewrite+0x13f>
-  }
-  panic("filewrite");
-80101340:	c7 04 24 33 92 10 80 	movl   $0x80109233,(%esp)
-80101347:	e8 f1 f1 ff ff       	call   8010053d <panic>
-}
-8010134c:	83 c4 24             	add    $0x24,%esp
-8010134f:	5b                   	pop    %ebx
-80101350:	5d                   	pop    %ebp
-80101351:	c3                   	ret    
-	...
-
-80101354 <readsb>:
-static void itrunc(struct inode*);
-
-// Read the super block.
-void
-readsb(int dev, struct superblock *sb)
-{
-80101354:	55                   	push   %ebp
-80101355:	89 e5                	mov    %esp,%ebp
-80101357:	83 ec 28             	sub    $0x28,%esp
-  struct buf *bp;
-  
-  bp = bread(dev, 1);
-8010135a:	8b 45 08             	mov    0x8(%ebp),%eax
-8010135d:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
-80101364:	00 
-80101365:	89 04 24             	mov    %eax,(%esp)
-80101368:	e8 39 ee ff ff       	call   801001a6 <bread>
-8010136d:	89 45 f4             	mov    %eax,-0xc(%ebp)
-  memmove(sb, bp->data, sizeof(*sb));
-80101370:	8b 45 f4             	mov    -0xc(%ebp),%eax
-80101373:	83 c0 18             	add    $0x18,%eax
-80101376:	c7 44 24 08 10 00 00 	movl   $0x10,0x8(%esp)
-8010137d:	00 
-8010137e:	89 44 24 04          	mov    %eax,0x4(%esp)
-80101382:	8b 45 0c             	mov    0xc(%ebp),%eax
-80101385:	89 04 24             	mov    %eax,(%esp)
-80101388:	e8 bc 43 00 00       	call   80105749 <memmove>
-  brelse(bp);
-8010138d:	8b 45 f4             	mov    -0xc(%ebp),%eax
-80101390:	89 04 24             	mov    %eax,(%esp)
-80101393:	e8 7f ee ff ff       	call   80100217 <brelse>
-}
-80101398:	c9                   	leave  
-80101399:	c3                   	ret    
-
-8010139a <bzero>:
-
-// Zero a block.
-static void
-bzero(int dev, int bno)
-{
-8010139a:	55                   	push   %ebp
-8010139b:	89 e5                	mov    %esp,%ebp
-8010139d:	83 ec 28             	sub    $0x28,%esp
-  struct buf *bp;
-  
-  bp = bread(dev, bno);
-801013a0:	8b 55 0c             	mov    0xc(%ebp),%edx
-801013a3:	8b 45 08             	mov    0x8(%ebp),%eax
-801013a6:	89 54 24 04          	mov    %edx,0x4(%esp)
-801013aa:	89 04 24             	mov    %eax,(%esp)
-801013ad:	e8 f4 ed ff ff       	call   801001a6 <bread>
-801013b2:	89 45 f4             	mov    %eax,-0xc(%ebp)
-  memset(bp->data, 0, BSIZE);
-801013b5:	8b 45 f4             	mov    -0xc(%ebp),%eax
-801013b8:	83 c0 18             	add    $0x18,%eax
-801013bb:	c7 44 24 08 00 02 00 	movl   $0x200,0x8(%esp)
-801013c2:	00 
-801013c3:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
-801013ca:	00 
-801013cb:	89 04 24             	mov    %eax,(%esp)
-801013ce:	e8 a3 42 00 00       	call   80105676 <memset>
-  log_write(bp);
-801013d3:	8b 45 f4             	mov    -0xc(%ebp),%eax
-801013d6:	89 04 24             	mov    %eax,(%esp)
-801013d9:	e8 e4 22 00 00       	call   801036c2 <log_write>
-  brelse(bp);
-801013de:	8b 45 f4             	mov    -0xc(%ebp),%eax
-801013e1:	89 04 24             	mov    %eax,(%esp)
-801013e4:	e8 2e ee ff ff       	call   80100217 <brelse>
-}
-801013e9:	c9                   	leave  
-801013ea:	c3                   	ret    
-
-801013eb <balloc>:
-// Blocks. 
-
-// Allocate a zeroed disk block.
-static uint
-balloc(uint dev)
-{
-801013eb:	55                   	push   %ebp
-801013ec:	89 e5                	mov    %esp,%ebp
-801013ee:	53                   	push   %ebx
-801013ef:	83 ec 34             	sub    $0x34,%esp
-  int b, bi, m;
-  struct buf *bp;
-  struct superblock sb;
-
-  bp = 0;
-801013f2:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
-  readsb(dev, &sb);
-801013f9:	8b 45 08             	mov    0x8(%ebp),%eax
-801013fc:	8d 55 d8             	lea    -0x28(%ebp),%edx
-801013ff:	89 54 24 04          	mov    %edx,0x4(%esp)
-80101403:	89 04 24             	mov    %eax,(%esp)
-80101406:	e8 49 ff ff ff       	call   80101354 <readsb>
-  for(b = 0; b < sb.size; b += BPB){
-8010140b:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
-80101412:	e9 11 01 00 00       	jmp    80101528 <balloc+0x13d>
-    bp = bread(dev, BBLOCK(b, sb.ninodes));
-80101417:	8b 45 f4             	mov    -0xc(%ebp),%eax
-8010141a:	8d 90 ff 0f 00 00    	lea    0xfff(%eax),%edx
-80101420:	85 c0                	test   %eax,%eax
-80101422:	0f 48 c2             	cmovs  %edx,%eax
-80101425:	c1 f8 0c             	sar    $0xc,%eax
-80101428:	8b 55 e0             	mov    -0x20(%ebp),%edx
-8010142b:	c1 ea 03             	shr    $0x3,%edx
-8010142e:	01 d0                	add    %edx,%eax
-80101430:	83 c0 03             	add    $0x3,%eax
-80101433:	89 44 24 04          	mov    %eax,0x4(%esp)
-80101437:	8b 45 08             	mov    0x8(%ebp),%eax
-8010143a:	89 04 24             	mov    %eax,(%esp)
-8010143d:	e8 64 ed ff ff       	call   801001a6 <bread>
-80101442:	89 45 ec             	mov    %eax,-0x14(%ebp)
-    for(bi = 0; bi < BPB && b + bi < sb.size; bi++){
-80101445:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
-8010144c:	e9 a7 00 00 00       	jmp    801014f8 <balloc+0x10d>
-      m = 1 << (bi % 8);
-80101451:	8b 45 f0             	mov    -0x10(%ebp),%eax
-80101454:	89 c2                	mov    %eax,%edx
-80101456:	c1 fa 1f             	sar    $0x1f,%edx
-80101459:	c1 ea 1d             	shr    $0x1d,%edx
-8010145c:	01 d0                	add    %edx,%eax
-8010145e:	83 e0 07             	and    $0x7,%eax
-80101461:	29 d0                	sub    %edx,%eax
-80101463:	ba 01 00 00 00       	mov    $0x1,%edx
-80101468:	89 d3                	mov    %edx,%ebx
-8010146a:	89 c1                	mov    %eax,%ecx
-8010146c:	d3 e3                	shl    %cl,%ebx
-8010146e:	89 d8                	mov    %ebx,%eax
-80101470:	89 45 e8             	mov    %eax,-0x18(%ebp)
-      if((bp->data[bi/8] & m) == 0){  // Is block free?
-80101473:	8b 45 f0             	mov    -0x10(%ebp),%eax
-80101476:	8d 50 07             	lea    0x7(%eax),%edx
-80101479:	85 c0                	test   %eax,%eax
-8010147b:	0f 48 c2             	cmovs  %edx,%eax
-8010147e:	c1 f8 03             	sar    $0x3,%eax
-80101481:	8b 55 ec             	mov    -0x14(%ebp),%edx
-80101484:	0f b6 44 02 18       	movzbl 0x18(%edx,%eax,1),%eax
-80101489:	0f b6 c0             	movzbl %al,%eax
-8010148c:	23 45 e8             	and    -0x18(%ebp),%eax
-8010148f:	85 c0                	test   %eax,%eax
-80101491:	75 61                	jne    801014f4 <balloc+0x109>
-        bp->data[bi/8] |= m;  // Mark block in use.
-80101493:	8b 45 f0             	mov    -0x10(%ebp),%eax
-80101496:	8d 50 07             	lea    0x7(%eax),%edx
-80101499:	85 c0                	test   %eax,%eax
-8010149b:	0f 48 c2             	cmovs  %edx,%eax
-8010149e:	c1 f8 03             	sar    $0x3,%eax
-801014a1:	8b 55 ec             	mov    -0x14(%ebp),%edx
-801014a4:	0f b6 54 02 18       	movzbl 0x18(%edx,%eax,1),%edx
-801014a9:	89 d1                	mov    %edx,%ecx
-801014ab:	8b 55 e8             	mov    -0x18(%ebp),%edx
-801014ae:	09 ca                	or     %ecx,%edx
-801014b0:	89 d1                	mov    %edx,%ecx
-801014b2:	8b 55 ec             	mov    -0x14(%ebp),%edx
-801014b5:	88 4c 02 18          	mov    %cl,0x18(%edx,%eax,1)
-        log_write(bp);
-801014b9:	8b 45 ec             	mov    -0x14(%ebp),%eax
-801014bc:	89 04 24             	mov    %eax,(%esp)
-801014bf:	e8 fe 21 00 00       	call   801036c2 <log_write>
-        brelse(bp);
-801014c4:	8b 45 ec             	mov    -0x14(%ebp),%eax
-801014c7:	89 04 24             	mov    %eax,(%esp)
-801014ca:	e8 48 ed ff ff       	call   80100217 <brelse>
-        bzero(dev, b + bi);
-801014cf:	8b 45 f0             	mov    -0x10(%ebp),%eax
-801014d2:	8b 55 f4             	mov    -0xc(%ebp),%edx
-801014d5:	01 c2                	add    %eax,%edx
-801014d7:	8b 45 08             	mov    0x8(%ebp),%eax
-801014da:	89 54 24 04          	mov    %edx,0x4(%esp)
-801014de:	89 04 24             	mov    %eax,(%esp)
-801014e1:	e8 b4 fe ff ff       	call   8010139a <bzero>
-        return b + bi;
-801014e6:	8b 45 f0             	mov    -0x10(%ebp),%eax
-801014e9:	8b 55 f4             	mov    -0xc(%ebp),%edx
-801014ec:	01 d0                	add    %edx,%eax
-      }
-    }
-    brelse(bp);
-  }
-  panic("balloc: out of blocks");
-}
-801014ee:	83 c4 34             	add    $0x34,%esp
-801014f1:	5b                   	pop    %ebx
-801014f2:	5d                   	pop    %ebp
-801014f3:	c3                   	ret    
-
-  bp = 0;
-  readsb(dev, &sb);
-  for(b = 0; b < sb.size; b += BPB){
-    bp = bread(dev, BBLOCK(b, sb.ninodes));
-    for(bi = 0; bi < BPB && b + bi < sb.size; bi++){
-801014f4:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)
-801014f8:	81 7d f0 ff 0f 00 00 	cmpl   $0xfff,-0x10(%ebp)
-801014ff:	7f 15                	jg     80101516 <balloc+0x12b>
-80101501:	8b 45 f0             	mov    -0x10(%ebp),%eax
-80101504:	8b 55 f4             	mov    -0xc(%ebp),%edx
-80101507:	01 d0                	add    %edx,%eax
-80101509:	89 c2                	mov    %eax,%edx
-8010150b:	8b 45 d8             	mov    -0x28(%ebp),%eax
-8010150e:	39 c2                	cmp    %eax,%edx
-80101510:	0f 82 3b ff ff ff    	jb     80101451 <balloc+0x66>
-        brelse(bp);
-        bzero(dev, b + bi);
-        return b + bi;
-      }
-    }
-    brelse(bp);
-80101516:	8b 45 ec             	mov    -0x14(%ebp),%eax
-80101519:	89 04 24             	mov    %eax,(%esp)
-8010151c:	e8 f6 ec ff ff       	call   80100217 <brelse>
-  struct buf *bp;
-  struct superblock sb;
-
-  bp = 0;
-  readsb(dev, &sb);
-  for(b = 0; b < sb.size; b += BPB){
-80101521:	81 45 f4 00 10 00 00 	addl   $0x1000,-0xc(%ebp)
-80101528:	8b 55 f4             	mov    -0xc(%ebp),%edx
-8010152b:	8b 45 d8             	mov    -0x28(%ebp),%eax
-8010152e:	39 c2                	cmp    %eax,%edx
-80101530:	0f 82 e1 fe ff ff    	jb     80101417 <balloc+0x2c>
-        return b + bi;
-      }
-    }
-    brelse(bp);
-  }
-  panic("balloc: out of blocks");
-80101536:	c7 04 24 3d 92 10 80 	movl   $0x8010923d,(%esp)
-8010153d:	e8 fb ef ff ff       	call   8010053d <panic>
-
-80101542 <bfree>:
-}
-
-// Free a disk block.
-static void
-bfree(int dev, uint b)
-{
-80101542:	55                   	push   %ebp
-80101543:	89 e5                	mov    %esp,%ebp
-80101545:	53                   	push   %ebx
-80101546:	83 ec 34             	sub    $0x34,%esp
-  struct buf *bp;
-  struct superblock sb;
-  int bi, m;
-
-  readsb(dev, &sb);
-80101549:	8d 45 dc             	lea    -0x24(%ebp),%eax
-8010154c:	89 44 24 04          	mov    %eax,0x4(%esp)
-80101550:	8b 45 08             	mov    0x8(%ebp),%eax
-80101553:	89 04 24             	mov    %eax,(%esp)
-80101556:	e8 f9 fd ff ff       	call   80101354 <readsb>
-  bp = bread(dev, BBLOCK(b, sb.ninodes));
-8010155b:	8b 45 0c             	mov    0xc(%ebp),%eax
-8010155e:	89 c2                	mov    %eax,%edx
-80101560:	c1 ea 0c             	shr    $0xc,%edx
-80101563:	8b 45 e4             	mov    -0x1c(%ebp),%eax
-80101566:	c1 e8 03             	shr    $0x3,%eax
-80101569:	01 d0                	add    %edx,%eax
-8010156b:	8d 50 03             	lea    0x3(%eax),%edx
-8010156e:	8b 45 08             	mov    0x8(%ebp),%eax
-80101571:	89 54 24 04          	mov    %edx,0x4(%esp)
-80101575:	89 04 24             	mov    %eax,(%esp)
-80101578:	e8 29 ec ff ff       	call   801001a6 <bread>
-8010157d:	89 45 f4             	mov    %eax,-0xc(%ebp)
-  bi = b % BPB;
-80101580:	8b 45 0c             	mov    0xc(%ebp),%eax
-80101583:	25 ff 0f 00 00       	and    $0xfff,%eax
-80101588:	89 45 f0             	mov    %eax,-0x10(%ebp)
-  m = 1 << (bi % 8);
-8010158b:	8b 45 f0             	mov    -0x10(%ebp),%eax
-8010158e:	89 c2                	mov    %eax,%edx
-80101590:	c1 fa 1f             	sar    $0x1f,%edx
-80101593:	c1 ea 1d             	shr    $0x1d,%edx
-80101596:	01 d0                	add    %edx,%eax
-80101598:	83 e0 07             	and    $0x7,%eax
-8010159b:	29 d0                	sub    %edx,%eax
-8010159d:	ba 01 00 00 00       	mov    $0x1,%edx
-801015a2:	89 d3                	mov    %edx,%ebx
-801015a4:	89 c1                	mov    %eax,%ecx
-801015a6:	d3 e3                	shl    %cl,%ebx
-801015a8:	89 d8                	mov    %ebx,%eax
-801015aa:	89 45 ec             	mov    %eax,-0x14(%ebp)
-  if((bp->data[bi/8] & m) == 0)
-801015ad:	8b 45 f0             	mov    -0x10(%ebp),%eax
-801015b0:	8d 50 07             	lea    0x7(%eax),%edx
-801015b3:	85 c0                	test   %eax,%eax
-801015b5:	0f 48 c2             	cmovs  %edx,%eax
-801015b8:	c1 f8 03             	sar    $0x3,%eax
-801015bb:	8b 55 f4             	mov    -0xc(%ebp),%edx
-801015be:	0f b6 44 02 18       	movzbl 0x18(%edx,%eax,1),%eax
-801015c3:	0f b6 c0             	movzbl %al,%eax
-801015c6:	23 45 ec             	and    -0x14(%ebp),%eax
-801015c9:	85 c0                	test   %eax,%eax
-801015cb:	75 0c                	jne    801015d9 <bfree+0x97>
-    panic("freeing free block");
-801015cd:	c7 04 24 53 92 10 80 	movl   $0x80109253,(%esp)
-801015d4:	e8 64 ef ff ff       	call   8010053d <panic>
-  bp->data[bi/8] &= ~m;
-801015d9:	8b 45 f0             	mov    -0x10(%ebp),%eax
-801015dc:	8d 50 07             	lea    0x7(%eax),%edx
-801015df:	85 c0                	test   %eax,%eax
-801015e1:	0f 48 c2             	cmovs  %edx,%eax
-801015e4:	c1 f8 03             	sar    $0x3,%eax
-801015e7:	8b 55 f4             	mov    -0xc(%ebp),%edx
-801015ea:	0f b6 54 02 18       	movzbl 0x18(%edx,%eax,1),%edx
-801015ef:	8b 4d ec             	mov    -0x14(%ebp),%ecx
-801015f2:	f7 d1                	not    %ecx
-801015f4:	21 ca                	and    %ecx,%edx
-801015f6:	89 d1                	mov    %edx,%ecx
-801015f8:	8b 55 f4             	mov    -0xc(%ebp),%edx
-801015fb:	88 4c 02 18          	mov    %cl,0x18(%edx,%eax,1)
-  log_write(bp);
-801015ff:	8b 45 f4             	mov    -0xc(%ebp),%eax
-80101602:	89 04 24             	mov    %eax,(%esp)
-80101605:	e8 b8 20 00 00       	call   801036c2 <log_write>
-  brelse(bp);
-8010160a:	8b 45 f4             	mov    -0xc(%ebp),%eax
-8010160d:	89 04 24             	mov    %eax,(%esp)
-80101610:	e8 02 ec ff ff       	call   80100217 <brelse>
-}
-80101615:	83 c4 34             	add    $0x34,%esp
-80101618:	5b                   	pop    %ebx
-80101619:	5d                   	pop    %ebp
-8010161a:	c3                   	ret    
-
-8010161b <iinit>:
-  struct inode inode[NINODE];
-} icache;
-
-void
-iinit(void)
-{
-8010161b:	55                   	push   %ebp
-8010161c:	89 e5                	mov    %esp,%ebp
-8010161e:	83 ec 18             	sub    $0x18,%esp
-  initlock(&icache.lock, "icache");
-80101621:	c7 44 24 04 66 92 10 	movl   $0x80109266,0x4(%esp)
-80101628:	80 
-80101629:	c7 04 24 60 22 11 80 	movl   $0x80112260,(%esp)
-80101630:	e8 d1 3d 00 00       	call   80105406 <initlock>
-}
-80101635:	c9                   	leave  
-80101636:	c3                   	ret    
-
-80101637 <ialloc>:
-//PAGEBREAK!
-// Allocate a new inode with the given type on device dev.
-// A free inode has a type of zero.
-struct inode*
-ialloc(uint dev, short type)
-{
-80101637:	55                   	push   %ebp
-80101638:	89 e5                	mov    %esp,%ebp
-8010163a:	83 ec 48             	sub    $0x48,%esp
-8010163d:	8b 45 0c             	mov    0xc(%ebp),%eax
-80101640:	66 89 45 d4          	mov    %ax,-0x2c(%ebp)
-  int inum;
-  struct buf *bp;
-  struct dinode *dip;
-  struct superblock sb;
-
-  readsb(dev, &sb);
-80101644:	8b 45 08             	mov    0x8(%ebp),%eax
-80101647:	8d 55 dc             	lea    -0x24(%ebp),%edx
-8010164a:	89 54 24 04          	mov    %edx,0x4(%esp)
-8010164e:	89 04 24             	mov    %eax,(%esp)
-80101651:	e8 fe fc ff ff       	call   80101354 <readsb>
-
-  for(inum = 1; inum < sb.ninodes; inum++){
-80101656:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
-8010165d:	e9 98 00 00 00       	jmp    801016fa <ialloc+0xc3>
-    bp = bread(dev, IBLOCK(inum));
-80101662:	8b 45 f4             	mov    -0xc(%ebp),%eax
-80101665:	c1 e8 03             	shr    $0x3,%eax
-80101668:	83 c0 02             	add    $0x2,%eax
-8010166b:	89 44 24 04          	mov    %eax,0x4(%esp)
-8010166f:	8b 45 08             	mov    0x8(%ebp),%eax
-80101672:	89 04 24             	mov    %eax,(%esp)
-80101675:	e8 2c eb ff ff       	call   801001a6 <bread>
-8010167a:	89 45 f0             	mov    %eax,-0x10(%ebp)
-    dip = (struct dinode*)bp->data + inum%IPB;
-8010167d:	8b 45 f0             	mov    -0x10(%ebp),%eax
-80101680:	8d 50 18             	lea    0x18(%eax),%edx
-80101683:	8b 45 f4             	mov    -0xc(%ebp),%eax
-80101686:	83 e0 07             	and    $0x7,%eax
-80101689:	c1 e0 06             	shl    $0x6,%eax
-8010168c:	01 d0                	add    %edx,%eax
-8010168e:	89 45 ec             	mov    %eax,-0x14(%ebp)
-    if(dip->type == 0){  // a free inode
-80101691:	8b 45 ec             	mov    -0x14(%ebp),%eax
-80101694:	0f b7 00             	movzwl (%eax),%eax
-80101697:	66 85 c0             	test   %ax,%ax
-8010169a:	75 4f                	jne    801016eb <ialloc+0xb4>
-      memset(dip, 0, sizeof(*dip));
-8010169c:	c7 44 24 08 40 00 00 	movl   $0x40,0x8(%esp)
-801016a3:	00 
-801016a4:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
-801016ab:	00 
-801016ac:	8b 45 ec             	mov    -0x14(%ebp),%eax
-801016af:	89 04 24             	mov    %eax,(%esp)
-801016b2:	e8 bf 3f 00 00       	call   80105676 <memset>
-      dip->type = type;
-801016b7:	8b 45 ec             	mov    -0x14(%ebp),%eax
-801016ba:	0f b7 55 d4          	movzwl -0x2c(%ebp),%edx
-801016be:	66 89 10             	mov    %dx,(%eax)
-      log_write(bp);   // mark it allocated on the disk
-801016c1:	8b 45 f0             	mov    -0x10(%ebp),%eax
-801016c4:	89 04 24             	mov    %eax,(%esp)
-801016c7:	e8 f6 1f 00 00       	call   801036c2 <log_write>
-      brelse(bp);
-801016cc:	8b 45 f0             	mov    -0x10(%ebp),%eax
-801016cf:	89 04 24             	mov    %eax,(%esp)
-801016d2:	e8 40 eb ff ff       	call   80100217 <brelse>
-      return iget(dev, inum);
-801016d7:	8b 45 f4             	mov    -0xc(%ebp),%eax
-801016da:	89 44 24 04          	mov    %eax,0x4(%esp)
-801016de:	8b 45 08             	mov    0x8(%ebp),%eax
-801016e1:	89 04 24             	mov    %eax,(%esp)
-801016e4:	e8 e3 00 00 00       	call   801017cc <iget>
-    }
-    brelse(bp);
-  }
-  panic("ialloc: no inodes");
-}
-801016e9:	c9                   	leave  
-801016ea:	c3                   	ret    
-      dip->type = type;
-      log_write(bp);   // mark it allocated on the disk
-      brelse(bp);
-      return iget(dev, inum);
-    }
-    brelse(bp);
-801016eb:	8b 45 f0             	mov    -0x10(%ebp),%eax
-801016ee:	89 04 24             	mov    %eax,(%esp)
-801016f1:	e8 21 eb ff ff       	call   80100217 <brelse>
-  struct dinode *dip;
-  struct superblock sb;
-
-  readsb(dev, &sb);
-
-  for(inum = 1; inum < sb.ninodes; inum++){
-801016f6:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
-801016fa:	8b 55 f4             	mov    -0xc(%ebp),%edx
-801016fd:	8b 45 e4             	mov    -0x1c(%ebp),%eax
-80101700:	39 c2                	cmp    %eax,%edx
-80101702:	0f 82 5a ff ff ff    	jb     80101662 <ialloc+0x2b>
-      brelse(bp);
-      return iget(dev, inum);
-    }
-    brelse(bp);
-  }
-  panic("ialloc: no inodes");
-80101708:	c7 04 24 6d 92 10 80 	movl   $0x8010926d,(%esp)
-8010170f:	e8 29 ee ff ff       	call   8010053d <panic>
-
-80101714 <iupdate>:
-}
-
-// Copy a modified in-memory inode to disk.
-void
-iupdate(struct inode *ip)
-{
-80101714:	55                   	push   %ebp
-80101715:	89 e5                	mov    %esp,%ebp
-80101717:	83 ec 28             	sub    $0x28,%esp
-  struct buf *bp;
-  struct dinode *dip;
-
-  bp = bread(ip->dev, IBLOCK(ip->inum));
-8010171a:	8b 45 08             	mov    0x8(%ebp),%eax
-8010171d:	8b 40 04             	mov    0x4(%eax),%eax
-80101720:	c1 e8 03             	shr    $0x3,%eax
-80101723:	8d 50 02             	lea    0x2(%eax),%edx
-80101726:	8b 45 08             	mov    0x8(%ebp),%eax
-80101729:	8b 00                	mov    (%eax),%eax
-8010172b:	89 54 24 04          	mov    %edx,0x4(%esp)
-8010172f:	89 04 24             	mov    %eax,(%esp)
-80101732:	e8 6f ea ff ff       	call   801001a6 <bread>
-80101737:	89 45 f4             	mov    %eax,-0xc(%ebp)
-  dip = (struct dinode*)bp->data + ip->inum%IPB;
-8010173a:	8b 45 f4             	mov    -0xc(%ebp),%eax
-8010173d:	8d 50 18             	lea    0x18(%eax),%edx
-80101740:	8b 45 08             	mov    0x8(%ebp),%eax
-80101743:	8b 40 04             	mov    0x4(%eax),%eax
-80101746:	83 e0 07             	and    $0x7,%eax
-80101749:	c1 e0 06             	shl    $0x6,%eax
-8010174c:	01 d0                	add    %edx,%eax
-8010174e:	89 45 f0             	mov    %eax,-0x10(%ebp)
-  dip->type = ip->type;
-80101751:	8b 45 08             	mov    0x8(%ebp),%eax
-80101754:	0f b7 50 10          	movzwl 0x10(%eax),%edx
-80101758:	8b 45 f0             	mov    -0x10(%ebp),%eax
-8010175b:	66 89 10             	mov    %dx,(%eax)
-  dip->major = ip->major;
-8010175e:	8b 45 08             	mov    0x8(%ebp),%eax
-80101761:	0f b7 50 12          	movzwl 0x12(%eax),%edx
-80101765:	8b 45 f0             	mov    -0x10(%ebp),%eax
-80101768:	66 89 50 02          	mov    %dx,0x2(%eax)
-  dip->minor = ip->minor;
-8010176c:	8b 45 08             	mov    0x8(%ebp),%eax
-8010176f:	0f b7 50 14          	movzwl 0x14(%eax),%edx
-80101773:	8b 45 f0             	mov    -0x10(%ebp),%eax
-80101776:	66 89 50 04          	mov    %dx,0x4(%eax)
-  dip->nlink = ip->nlink;
-8010177a:	8b 45 08             	mov    0x8(%ebp),%eax
-8010177d:	0f b7 50 16          	movzwl 0x16(%eax),%edx
-80101781:	8b 45 f0             	mov    -0x10(%ebp),%eax
-80101784:	66 89 50 06          	mov    %dx,0x6(%eax)
-  dip->size = ip->size;
-80101788:	8b 45 08             	mov    0x8(%ebp),%eax
-8010178b:	8b 50 18             	mov    0x18(%eax),%edx
-8010178e:	8b 45 f0             	mov    -0x10(%ebp),%eax
-80101791:	89 50 08             	mov    %edx,0x8(%eax)
-  memmove(dip->addrs, ip->addrs, sizeof(ip->addrs));
-80101794:	8b 45 08             	mov    0x8(%ebp),%eax
-80101797:	8d 50 1c             	lea    0x1c(%eax),%edx
-8010179a:	8b 45 f0             	mov    -0x10(%ebp),%eax
-8010179d:	83 c0 0c             	add    $0xc,%eax
-801017a0:	c7 44 24 08 34 00 00 	movl   $0x34,0x8(%esp)
-801017a7:	00 
-801017a8:	89 54 24 04          	mov    %edx,0x4(%esp)
-801017ac:	89 04 24             	mov    %eax,(%esp)
-801017af:	e8 95 3f 00 00       	call   80105749 <memmove>
-  log_write(bp);
-801017b4:	8b 45 f4             	mov    -0xc(%ebp),%eax
-801017b7:	89 04 24             	mov    %eax,(%esp)
-801017ba:	e8 03 1f 00 00       	call   801036c2 <log_write>
-  brelse(bp);
-801017bf:	8b 45 f4             	mov    -0xc(%ebp),%eax
-801017c2:	89 04 24             	mov    %eax,(%esp)
-801017c5:	e8 4d ea ff ff       	call   80100217 <brelse>
-}
-801017ca:	c9                   	leave  
-801017cb:	c3                   	ret    
-
-801017cc <iget>:
-// Find the inode with number inum on device dev
-// and return the in-memory copy. Does not lock
-// the inode and does not read it from disk.
-static struct inode*
-iget(uint dev, uint inum)
-{
-801017cc:	55                   	push   %ebp
-801017cd:	89 e5                	mov    %esp,%ebp
-801017cf:	83 ec 28             	sub    $0x28,%esp
-  struct inode *ip, *empty;
-
-  acquire(&icache.lock);
-801017d2:	c7 04 24 60 22 11 80 	movl   $0x80112260,(%esp)
-801017d9:	e8 49 3c 00 00       	call   80105427 <acquire>
-
-  // Is the inode already cached?
-  empty = 0;
-801017de:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
-  for(ip = &icache.inode[0]; ip < &icache.inode[NINODE]; ip++){
-801017e5:	c7 45 f4 94 22 11 80 	movl   $0x80112294,-0xc(%ebp)
-801017ec:	eb 59                	jmp    80101847 <iget+0x7b>
-    if(ip->ref > 0 && ip->dev == dev && ip->inum == inum){
-801017ee:	8b 45 f4             	mov    -0xc(%ebp),%eax
-801017f1:	8b 40 08             	mov    0x8(%eax),%eax
-801017f4:	85 c0                	test   %eax,%eax
-801017f6:	7e 35                	jle    8010182d <iget+0x61>
-801017f8:	8b 45 f4             	mov    -0xc(%ebp),%eax
-801017fb:	8b 00                	mov    (%eax),%eax
-801017fd:	3b 45 08             	cmp    0x8(%ebp),%eax
-80101800:	75 2b                	jne    8010182d <iget+0x61>
-80101802:	8b 45 f4             	mov    -0xc(%ebp),%eax
-80101805:	8b 40 04             	mov    0x4(%eax),%eax
-80101808:	3b 45 0c             	cmp    0xc(%ebp),%eax
-8010180b:	75 20                	jne    8010182d <iget+0x61>
-      ip->ref++;
-8010180d:	8b 45 f4             	mov    -0xc(%ebp),%eax
-80101810:	8b 40 08             	mov    0x8(%eax),%eax
-80101813:	8d 50 01             	lea    0x1(%eax),%edx
-80101816:	8b 45 f4             	mov    -0xc(%ebp),%eax
-80101819:	89 50 08             	mov    %edx,0x8(%eax)
-      release(&icache.lock);
-8010181c:	c7 04 24 60 22 11 80 	movl   $0x80112260,(%esp)
-80101823:	e8 61 3c 00 00       	call   80105489 <release>
-      return ip;
-80101828:	8b 45 f4             	mov    -0xc(%ebp),%eax
-8010182b:	eb 6f                	jmp    8010189c <iget+0xd0>
-    }
-    if(empty == 0 && ip->ref == 0)    // Remember empty slot.
-8010182d:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
-80101831:	75 10                	jne    80101843 <iget+0x77>
-80101833:	8b 45 f4             	mov    -0xc(%ebp),%eax
-80101836:	8b 40 08             	mov    0x8(%eax),%eax
-80101839:	85 c0                	test   %eax,%eax
-8010183b:	75 06                	jne    80101843 <iget+0x77>
-      empty = ip;
-8010183d:	8b 45 f4             	mov    -0xc(%ebp),%eax
-80101840:	89 45 f0             	mov    %eax,-0x10(%ebp)
-
-  acquire(&icache.lock);
-
-  // Is the inode already cached?
-  empty = 0;
-  for(ip = &icache.inode[0]; ip < &icache.inode[NINODE]; ip++){
-80101843:	83 45 f4 50          	addl   $0x50,-0xc(%ebp)
-80101847:	81 7d f4 34 32 11 80 	cmpl   $0x80113234,-0xc(%ebp)
-8010184e:	72 9e                	jb     801017ee <iget+0x22>
-    if(empty == 0 && ip->ref == 0)    // Remember empty slot.
-      empty = ip;
-  }
-
-  // Recycle an inode cache entry.
-  if(empty == 0)
-80101850:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
-80101854:	75 0c                	jne    80101862 <iget+0x96>
-    panic("iget: no inodes");
-80101856:	c7 04 24 7f 92 10 80 	movl   $0x8010927f,(%esp)
-8010185d:	e8 db ec ff ff       	call   8010053d <panic>
-
-  ip = empty;
-80101862:	8b 45 f0             	mov    -0x10(%ebp),%eax
-80101865:	89 45 f4             	mov    %eax,-0xc(%ebp)
-  ip->dev = dev;
-80101868:	8b 45 f4             	mov    -0xc(%ebp),%eax
-8010186b:	8b 55 08             	mov    0x8(%ebp),%edx
-8010186e:	89 10                	mov    %edx,(%eax)
-  ip->inum = inum;
-80101870:	8b 45 f4             	mov    -0xc(%ebp),%eax
-80101873:	8b 55 0c             	mov    0xc(%ebp),%edx
-80101876:	89 50 04             	mov    %edx,0x4(%eax)
-  ip->ref = 1;
-80101879:	8b 45 f4             	mov    -0xc(%ebp),%eax
-8010187c:	c7 40 08 01 00 00 00 	movl   $0x1,0x8(%eax)
-  ip->flags = 0;
-80101883:	8b 45 f4             	mov    -0xc(%ebp),%eax
-80101886:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%eax)
-  release(&icache.lock);
-8010188d:	c7 04 24 60 22 11 80 	movl   $0x80112260,(%esp)
-80101894:	e8 f0 3b 00 00       	call   80105489 <release>
-
-  return ip;
-80101899:	8b 45 f4             	mov    -0xc(%ebp),%eax
-}
-8010189c:	c9                   	leave  
-8010189d:	c3                   	ret    
-
-8010189e <idup>:
-
-// Increment reference count for ip.
-// Returns ip to enable ip = idup(ip1) idiom.
-struct inode*
-idup(struct inode *ip)
-{
-8010189e:	55                   	push   %ebp
-8010189f:	89 e5                	mov    %esp,%ebp
-801018a1:	83 ec 18             	sub    $0x18,%esp
-  acquire(&icache.lock);
-801018a4:	c7 04 24 60 22 11 80 	movl   $0x80112260,(%esp)
-801018ab:	e8 77 3b 00 00       	call   80105427 <acquire>
-  ip->ref++;
-801018b0:	8b 45 08             	mov    0x8(%ebp),%eax
-801018b3:	8b 40 08             	mov    0x8(%eax),%eax
-801018b6:	8d 50 01             	lea    0x1(%eax),%edx
-801018b9:	8b 45 08             	mov    0x8(%ebp),%eax
-801018bc:	89 50 08             	mov    %edx,0x8(%eax)
-  release(&icache.lock);
-801018bf:	c7 04 24 60 22 11 80 	movl   $0x80112260,(%esp)
-801018c6:	e8 be 3b 00 00       	call   80105489 <release>
-  return ip;
-801018cb:	8b 45 08             	mov    0x8(%ebp),%eax
-}
-801018ce:	c9                   	leave  
-801018cf:	c3                   	ret    
-
-801018d0 <ilock>:
-
-// Lock the given inode.
-// Reads the inode from disk if necessary.
-void
-ilock(struct inode *ip)
-{
-801018d0:	55                   	push   %ebp
-801018d1:	89 e5                	mov    %esp,%ebp
-801018d3:	83 ec 28             	sub    $0x28,%esp
-  struct buf *bp;
-  struct dinode *dip;
-
-  if(ip == 0 || ip->ref < 1)
-801018d6:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
-801018da:	74 0a                	je     801018e6 <ilock+0x16>
-801018dc:	8b 45 08             	mov    0x8(%ebp),%eax
-801018df:	8b 40 08             	mov    0x8(%eax),%eax
-801018e2:	85 c0                	test   %eax,%eax
-801018e4:	7f 0c                	jg     801018f2 <ilock+0x22>
-    panic("ilock");
-801018e6:	c7 04 24 8f 92 10 80 	movl   $0x8010928f,(%esp)
-801018ed:	e8 4b ec ff ff       	call   8010053d <panic>
-
-  acquire(&icache.lock);
-801018f2:	c7 04 24 60 22 11 80 	movl   $0x80112260,(%esp)
-801018f9:	e8 29 3b 00 00       	call   80105427 <acquire>
-  while(ip->flags & I_BUSY)
-801018fe:	eb 13                	jmp    80101913 <ilock+0x43>
-    sleep(ip, &icache.lock);
-80101900:	c7 44 24 04 60 22 11 	movl   $0x80112260,0x4(%esp)
-80101907:	80 
-80101908:	8b 45 08             	mov    0x8(%ebp),%eax
-8010190b:	89 04 24             	mov    %eax,(%esp)
-8010190e:	e8 2e 38 00 00       	call   80105141 <sleep>
-
-  if(ip == 0 || ip->ref < 1)
-    panic("ilock");
-
-  acquire(&icache.lock);
-  while(ip->flags & I_BUSY)
-80101913:	8b 45 08             	mov    0x8(%ebp),%eax
-80101916:	8b 40 0c             	mov    0xc(%eax),%eax
-80101919:	83 e0 01             	and    $0x1,%eax
-8010191c:	84 c0                	test   %al,%al
-8010191e:	75 e0                	jne    80101900 <ilock+0x30>
-    sleep(ip, &icache.lock);
-  ip->flags |= I_BUSY;
-80101920:	8b 45 08             	mov    0x8(%ebp),%eax
-80101923:	8b 40 0c             	mov    0xc(%eax),%eax
-80101926:	89 c2                	mov    %eax,%edx
-80101928:	83 ca 01             	or     $0x1,%edx
-8010192b:	8b 45 08             	mov    0x8(%ebp),%eax
-8010192e:	89 50 0c             	mov    %edx,0xc(%eax)
-  release(&icache.lock);
-80101931:	c7 04 24 60 22 11 80 	movl   $0x80112260,(%esp)
-80101938:	e8 4c 3b 00 00       	call   80105489 <release>
-
-  if(!(ip->flags & I_VALID)){
-8010193d:	8b 45 08             	mov    0x8(%ebp),%eax
-80101940:	8b 40 0c             	mov    0xc(%eax),%eax
-80101943:	83 e0 02             	and    $0x2,%eax
-80101946:	85 c0                	test   %eax,%eax
-80101948:	0f 85 ce 00 00 00    	jne    80101a1c <ilock+0x14c>
-    bp = bread(ip->dev, IBLOCK(ip->inum));
-8010194e:	8b 45 08             	mov    0x8(%ebp),%eax
-80101951:	8b 40 04             	mov    0x4(%eax),%eax
-80101954:	c1 e8 03             	shr    $0x3,%eax
-80101957:	8d 50 02             	lea    0x2(%eax),%edx
-8010195a:	8b 45 08             	mov    0x8(%ebp),%eax
-8010195d:	8b 00                	mov    (%eax),%eax
-8010195f:	89 54 24 04          	mov    %edx,0x4(%esp)
-80101963:	89 04 24             	mov    %eax,(%esp)
-80101966:	e8 3b e8 ff ff       	call   801001a6 <bread>
-8010196b:	89 45 f4             	mov    %eax,-0xc(%ebp)
-    dip = (struct dinode*)bp->data + ip->inum%IPB;
-8010196e:	8b 45 f4             	mov    -0xc(%ebp),%eax
-80101971:	8d 50 18             	lea    0x18(%eax),%edx
-80101974:	8b 45 08             	mov    0x8(%ebp),%eax
-80101977:	8b 40 04             	mov    0x4(%eax),%eax
-8010197a:	83 e0 07             	and    $0x7,%eax
-8010197d:	c1 e0 06             	shl    $0x6,%eax
-80101980:	01 d0                	add    %edx,%eax
-80101982:	89 45 f0             	mov    %eax,-0x10(%ebp)
-    ip->type = dip->type;
-80101985:	8b 45 f0             	mov    -0x10(%ebp),%eax
-80101988:	0f b7 10             	movzwl (%eax),%edx
-8010198b:	8b 45 08             	mov    0x8(%ebp),%eax
-8010198e:	66 89 50 10          	mov    %dx,0x10(%eax)
-    ip->major = dip->major;
-80101992:	8b 45 f0             	mov    -0x10(%ebp),%eax
-80101995:	0f b7 50 02          	movzwl 0x2(%eax),%edx
-80101999:	8b 45 08             	mov    0x8(%ebp),%eax
-8010199c:	66 89 50 12          	mov    %dx,0x12(%eax)
-    ip->minor = dip->minor;
-801019a0:	8b 45 f0             	mov    -0x10(%ebp),%eax
-801019a3:	0f b7 50 04          	movzwl 0x4(%eax),%edx
-801019a7:	8b 45 08             	mov    0x8(%ebp),%eax
-801019aa:	66 89 50 14          	mov    %dx,0x14(%eax)
-    ip->nlink = dip->nlink;
-801019ae:	8b 45 f0             	mov    -0x10(%ebp),%eax
-801019b1:	0f b7 50 06          	movzwl 0x6(%eax),%edx
-801019b5:	8b 45 08             	mov    0x8(%ebp),%eax
-801019b8:	66 89 50 16          	mov    %dx,0x16(%eax)
-    ip->size = dip->size;
-801019bc:	8b 45 f0             	mov    -0x10(%ebp),%eax
-801019bf:	8b 50 08             	mov    0x8(%eax),%edx
-801019c2:	8b 45 08             	mov    0x8(%ebp),%eax
-801019c5:	89 50 18             	mov    %edx,0x18(%eax)
-    memmove(ip->addrs, dip->addrs, sizeof(ip->addrs));
-801019c8:	8b 45 f0             	mov    -0x10(%ebp),%eax
-801019cb:	8d 50 0c             	lea    0xc(%eax),%edx
-801019ce:	8b 45 08             	mov    0x8(%ebp),%eax
-801019d1:	83 c0 1c             	add    $0x1c,%eax
-801019d4:	c7 44 24 08 34 00 00 	movl   $0x34,0x8(%esp)
-801019db:	00 
-801019dc:	89 54 24 04          	mov    %edx,0x4(%esp)
-801019e0:	89 04 24             	mov    %eax,(%esp)
-801019e3:	e8 61 3d 00 00       	call   80105749 <memmove>
-    brelse(bp);
-801019e8:	8b 45 f4             	mov    -0xc(%ebp),%eax
-801019eb:	89 04 24             	mov    %eax,(%esp)
-801019ee:	e8 24 e8 ff ff       	call   80100217 <brelse>
-    ip->flags |= I_VALID;
-801019f3:	8b 45 08             	mov    0x8(%ebp),%eax
-801019f6:	8b 40 0c             	mov    0xc(%eax),%eax
-801019f9:	89 c2                	mov    %eax,%edx
-801019fb:	83 ca 02             	or     $0x2,%edx
-801019fe:	8b 45 08             	mov    0x8(%ebp),%eax
-80101a01:	89 50 0c             	mov    %edx,0xc(%eax)
-    if(ip->type == 0)
-80101a04:	8b 45 08             	mov    0x8(%ebp),%eax
-80101a07:	0f b7 40 10          	movzwl 0x10(%eax),%eax
-80101a0b:	66 85 c0             	test   %ax,%ax
-80101a0e:	75 0c                	jne    80101a1c <ilock+0x14c>
-      panic("ilock: no type");
-80101a10:	c7 04 24 95 92 10 80 	movl   $0x80109295,(%esp)
-80101a17:	e8 21 eb ff ff       	call   8010053d <panic>
-  }
-}
-80101a1c:	c9                   	leave  
-80101a1d:	c3                   	ret    
-
-80101a1e <iunlock>:
-
-// Unlock the given inode.
-void
-iunlock(struct inode *ip)
-{
-80101a1e:	55                   	push   %ebp
-80101a1f:	89 e5                	mov    %esp,%ebp
-80101a21:	83 ec 18             	sub    $0x18,%esp
-  if(ip == 0 || !(ip->flags & I_BUSY) || ip->ref < 1)
-80101a24:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
-80101a28:	74 17                	je     80101a41 <iunlock+0x23>
-80101a2a:	8b 45 08             	mov    0x8(%ebp),%eax
-80101a2d:	8b 40 0c             	mov    0xc(%eax),%eax
-80101a30:	83 e0 01             	and    $0x1,%eax
-80101a33:	85 c0                	test   %eax,%eax
-80101a35:	74 0a                	je     80101a41 <iunlock+0x23>
-80101a37:	8b 45 08             	mov    0x8(%ebp),%eax
-80101a3a:	8b 40 08             	mov    0x8(%eax),%eax
-80101a3d:	85 c0                	test   %eax,%eax
-80101a3f:	7f 0c                	jg     80101a4d <iunlock+0x2f>
-    panic("iunlock");
-80101a41:	c7 04 24 a4 92 10 80 	movl   $0x801092a4,(%esp)
-80101a48:	e8 f0 ea ff ff       	call   8010053d <panic>
-
-  acquire(&icache.lock);
-80101a4d:	c7 04 24 60 22 11 80 	movl   $0x80112260,(%esp)
-80101a54:	e8 ce 39 00 00       	call   80105427 <acquire>
-  ip->flags &= ~I_BUSY;
-80101a59:	8b 45 08             	mov    0x8(%ebp),%eax
-80101a5c:	8b 40 0c             	mov    0xc(%eax),%eax
-80101a5f:	89 c2                	mov    %eax,%edx
-80101a61:	83 e2 fe             	and    $0xfffffffe,%edx
-80101a64:	8b 45 08             	mov    0x8(%ebp),%eax
-80101a67:	89 50 0c             	mov    %edx,0xc(%eax)
-  wakeup(ip);
-80101a6a:	8b 45 08             	mov    0x8(%ebp),%eax
-80101a6d:	89 04 24             	mov    %eax,(%esp)
-80101a70:	e8 a8 37 00 00       	call   8010521d <wakeup>
-  release(&icache.lock);
-80101a75:	c7 04 24 60 22 11 80 	movl   $0x80112260,(%esp)
-80101a7c:	e8 08 3a 00 00       	call   80105489 <release>
-}
-80101a81:	c9                   	leave  
-80101a82:	c3                   	ret    
-
-80101a83 <iput>:
-// to it, free the inode (and its content) on disk.
-// All calls to iput() must be inside a transaction in
-// case it has to free the inode.
-void
-iput(struct inode *ip)
-{
-80101a83:	55                   	push   %ebp
-80101a84:	89 e5                	mov    %esp,%ebp
-80101a86:	83 ec 18             	sub    $0x18,%esp
-  acquire(&icache.lock);
-80101a89:	c7 04 24 60 22 11 80 	movl   $0x80112260,(%esp)
-80101a90:	e8 92 39 00 00       	call   80105427 <acquire>
-  if(ip->ref == 1 && (ip->flags & I_VALID) && ip->nlink == 0){
-80101a95:	8b 45 08             	mov    0x8(%ebp),%eax
-80101a98:	8b 40 08             	mov    0x8(%eax),%eax
-80101a9b:	83 f8 01             	cmp    $0x1,%eax
-80101a9e:	0f 85 93 00 00 00    	jne    80101b37 <iput+0xb4>
-80101aa4:	8b 45 08             	mov    0x8(%ebp),%eax
-80101aa7:	8b 40 0c             	mov    0xc(%eax),%eax
-80101aaa:	83 e0 02             	and    $0x2,%eax
-80101aad:	85 c0                	test   %eax,%eax
-80101aaf:	0f 84 82 00 00 00    	je     80101b37 <iput+0xb4>
-80101ab5:	8b 45 08             	mov    0x8(%ebp),%eax
-80101ab8:	0f b7 40 16          	movzwl 0x16(%eax),%eax
-80101abc:	66 85 c0             	test   %ax,%ax
-80101abf:	75 76                	jne    80101b37 <iput+0xb4>
-    // inode has no links and no other references: truncate and free.
-    if(ip->flags & I_BUSY)
-80101ac1:	8b 45 08             	mov    0x8(%ebp),%eax
-80101ac4:	8b 40 0c             	mov    0xc(%eax),%eax
-80101ac7:	83 e0 01             	and    $0x1,%eax
-80101aca:	84 c0                	test   %al,%al
-80101acc:	74 0c                	je     80101ada <iput+0x57>
-      panic("iput busy");
-80101ace:	c7 04 24 ac 92 10 80 	movl   $0x801092ac,(%esp)
-80101ad5:	e8 63 ea ff ff       	call   8010053d <panic>
-    ip->flags |= I_BUSY;
-80101ada:	8b 45 08             	mov    0x8(%ebp),%eax
-80101add:	8b 40 0c             	mov    0xc(%eax),%eax
-80101ae0:	89 c2                	mov    %eax,%edx
-80101ae2:	83 ca 01             	or     $0x1,%edx
-80101ae5:	8b 45 08             	mov    0x8(%ebp),%eax
-80101ae8:	89 50 0c             	mov    %edx,0xc(%eax)
-    release(&icache.lock);
-80101aeb:	c7 04 24 60 22 11 80 	movl   $0x80112260,(%esp)
-80101af2:	e8 92 39 00 00       	call   80105489 <release>
-    itrunc(ip);
-80101af7:	8b 45 08             	mov    0x8(%ebp),%eax
-80101afa:	89 04 24             	mov    %eax,(%esp)
-80101afd:	e8 72 01 00 00       	call   80101c74 <itrunc>
-    ip->type = 0;
-80101b02:	8b 45 08             	mov    0x8(%ebp),%eax
-80101b05:	66 c7 40 10 00 00    	movw   $0x0,0x10(%eax)
-    iupdate(ip);
-80101b0b:	8b 45 08             	mov    0x8(%ebp),%eax
-80101b0e:	89 04 24             	mov    %eax,(%esp)
-80101b11:	e8 fe fb ff ff       	call   80101714 <iupdate>
-    acquire(&icache.lock);
-80101b16:	c7 04 24 60 22 11 80 	movl   $0x80112260,(%esp)
-80101b1d:	e8 05 39 00 00       	call   80105427 <acquire>
-    ip->flags = 0;
-80101b22:	8b 45 08             	mov    0x8(%ebp),%eax
-80101b25:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%eax)
-    wakeup(ip);
-80101b2c:	8b 45 08             	mov    0x8(%ebp),%eax
-80101b2f:	89 04 24             	mov    %eax,(%esp)
-80101b32:	e8 e6 36 00 00       	call   8010521d <wakeup>
-  }
-  ip->ref--;
-80101b37:	8b 45 08             	mov    0x8(%ebp),%eax
-80101b3a:	8b 40 08             	mov    0x8(%eax),%eax
-80101b3d:	8d 50 ff             	lea    -0x1(%eax),%edx
-80101b40:	8b 45 08             	mov    0x8(%ebp),%eax
-80101b43:	89 50 08             	mov    %edx,0x8(%eax)
-  release(&icache.lock);
-80101b46:	c7 04 24 60 22 11 80 	movl   $0x80112260,(%esp)
-80101b4d:	e8 37 39 00 00       	call   80105489 <release>
-}
-80101b52:	c9                   	leave  
-80101b53:	c3                   	ret    
-
-80101b54 <iunlockput>:
-
-// Common idiom: unlock, then put.
-void
-iunlockput(struct inode *ip)
-{
-80101b54:	55                   	push   %ebp
-80101b55:	89 e5                	mov    %esp,%ebp
-80101b57:	83 ec 18             	sub    $0x18,%esp
-  iunlock(ip);
-80101b5a:	8b 45 08             	mov    0x8(%ebp),%eax
-80101b5d:	89 04 24             	mov    %eax,(%esp)
-80101b60:	e8 b9 fe ff ff       	call   80101a1e <iunlock>
-  iput(ip);
-80101b65:	8b 45 08             	mov    0x8(%ebp),%eax
-80101b68:	89 04 24             	mov    %eax,(%esp)
-80101b6b:	e8 13 ff ff ff       	call   80101a83 <iput>
-}
-80101b70:	c9                   	leave  
-80101b71:	c3                   	ret    
-
-80101b72 <bmap>:
-
-// Return the disk block address of the nth block in inode ip.
-// If there is no such block, bmap allocates one.
-static uint
-bmap(struct inode *ip, uint bn)
-{
-80101b72:	55                   	push   %ebp
-80101b73:	89 e5                	mov    %esp,%ebp
-80101b75:	53                   	push   %ebx
-80101b76:	83 ec 24             	sub    $0x24,%esp
-  uint addr, *a;
-  struct buf *bp;
-
-  if(bn < NDIRECT){
-80101b79:	83 7d 0c 0b          	cmpl   $0xb,0xc(%ebp)
-80101b7d:	77 3e                	ja     80101bbd <bmap+0x4b>
-    if((addr = ip->addrs[bn]) == 0)
-80101b7f:	8b 45 08             	mov    0x8(%ebp),%eax
-80101b82:	8b 55 0c             	mov    0xc(%ebp),%edx
-80101b85:	83 c2 04             	add    $0x4,%edx
-80101b88:	8b 44 90 0c          	mov    0xc(%eax,%edx,4),%eax
-80101b8c:	89 45 f4             	mov    %eax,-0xc(%ebp)
-80101b8f:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
-80101b93:	75 20                	jne    80101bb5 <bmap+0x43>
-      ip->addrs[bn] = addr = balloc(ip->dev);
-80101b95:	8b 45 08             	mov    0x8(%ebp),%eax
-80101b98:	8b 00                	mov    (%eax),%eax
-80101b9a:	89 04 24             	mov    %eax,(%esp)
-80101b9d:	e8 49 f8 ff ff       	call   801013eb <balloc>
-80101ba2:	89 45 f4             	mov    %eax,-0xc(%ebp)
-80101ba5:	8b 45 08             	mov    0x8(%ebp),%eax
-80101ba8:	8b 55 0c             	mov    0xc(%ebp),%edx
-80101bab:	8d 4a 04             	lea    0x4(%edx),%ecx
-80101bae:	8b 55 f4             	mov    -0xc(%ebp),%edx
-80101bb1:	89 54 88 0c          	mov    %edx,0xc(%eax,%ecx,4)
-    return addr;
-80101bb5:	8b 45 f4             	mov    -0xc(%ebp),%eax
-80101bb8:	e9 b1 00 00 00       	jmp    80101c6e <bmap+0xfc>
-  }
-  bn -= NDIRECT;
-80101bbd:	83 6d 0c 0c          	subl   $0xc,0xc(%ebp)
-
-  if(bn < NINDIRECT){
-80101bc1:	83 7d 0c 7f          	cmpl   $0x7f,0xc(%ebp)
-80101bc5:	0f 87 97 00 00 00    	ja     80101c62 <bmap+0xf0>
-    // Load indirect block, allocating if necessary.
-    if((addr = ip->addrs[NDIRECT]) == 0)
-80101bcb:	8b 45 08             	mov    0x8(%ebp),%eax
-80101bce:	8b 40 4c             	mov    0x4c(%eax),%eax
-80101bd1:	89 45 f4             	mov    %eax,-0xc(%ebp)
-80101bd4:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
-80101bd8:	75 19                	jne    80101bf3 <bmap+0x81>
-      ip->addrs[NDIRECT] = addr = balloc(ip->dev);
-80101bda:	8b 45 08             	mov    0x8(%ebp),%eax
-80101bdd:	8b 00                	mov    (%eax),%eax
-80101bdf:	89 04 24             	mov    %eax,(%esp)
-80101be2:	e8 04 f8 ff ff       	call   801013eb <balloc>
-80101be7:	89 45 f4             	mov    %eax,-0xc(%ebp)
-80101bea:	8b 45 08             	mov    0x8(%ebp),%eax
-80101bed:	8b 55 f4             	mov    -0xc(%ebp),%edx
-80101bf0:	89 50 4c             	mov    %edx,0x4c(%eax)
-    bp = bread(ip->dev, addr);
-80101bf3:	8b 45 08             	mov    0x8(%ebp),%eax
-80101bf6:	8b 00                	mov    (%eax),%eax
-80101bf8:	8b 55 f4             	mov    -0xc(%ebp),%edx
-80101bfb:	89 54 24 04          	mov    %edx,0x4(%esp)
-80101bff:	89 04 24             	mov    %eax,(%esp)
-80101c02:	e8 9f e5 ff ff       	call   801001a6 <bread>
-80101c07:	89 45 f0             	mov    %eax,-0x10(%ebp)
-    a = (uint*)bp->data;
-80101c0a:	8b 45 f0             	mov    -0x10(%ebp),%eax
-80101c0d:	83 c0 18             	add    $0x18,%eax
-80101c10:	89 45 ec             	mov    %eax,-0x14(%ebp)
-    if((addr = a[bn]) == 0){
-80101c13:	8b 45 0c             	mov    0xc(%ebp),%eax
-80101c16:	c1 e0 02             	shl    $0x2,%eax
-80101c19:	03 45 ec             	add    -0x14(%ebp),%eax
-80101c1c:	8b 00                	mov    (%eax),%eax
-80101c1e:	89 45 f4             	mov    %eax,-0xc(%ebp)
-80101c21:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
-80101c25:	75 2b                	jne    80101c52 <bmap+0xe0>
-      a[bn] = addr = balloc(ip->dev);
-80101c27:	8b 45 0c             	mov    0xc(%ebp),%eax
-80101c2a:	c1 e0 02             	shl    $0x2,%eax
-80101c2d:	89 c3                	mov    %eax,%ebx
-80101c2f:	03 5d ec             	add    -0x14(%ebp),%ebx
-80101c32:	8b 45 08             	mov    0x8(%ebp),%eax
-80101c35:	8b 00                	mov    (%eax),%eax
-80101c37:	89 04 24             	mov    %eax,(%esp)
-80101c3a:	e8 ac f7 ff ff       	call   801013eb <balloc>
-80101c3f:	89 45 f4             	mov    %eax,-0xc(%ebp)
-80101c42:	8b 45 f4             	mov    -0xc(%ebp),%eax
-80101c45:	89 03                	mov    %eax,(%ebx)
-      log_write(bp);
-80101c47:	8b 45 f0             	mov    -0x10(%ebp),%eax
-80101c4a:	89 04 24             	mov    %eax,(%esp)
-80101c4d:	e8 70 1a 00 00       	call   801036c2 <log_write>
-    }
-    brelse(bp);
-80101c52:	8b 45 f0             	mov    -0x10(%ebp),%eax
-80101c55:	89 04 24             	mov    %eax,(%esp)
-80101c58:	e8 ba e5 ff ff       	call   80100217 <brelse>
-    return addr;
-80101c5d:	8b 45 f4             	mov    -0xc(%ebp),%eax
-80101c60:	eb 0c                	jmp    80101c6e <bmap+0xfc>
-  }
-
-  panic("bmap: out of range");
-80101c62:	c7 04 24 b6 92 10 80 	movl   $0x801092b6,(%esp)
-80101c69:	e8 cf e8 ff ff       	call   8010053d <panic>
-}
-80101c6e:	83 c4 24             	add    $0x24,%esp
-80101c71:	5b                   	pop    %ebx
-80101c72:	5d                   	pop    %ebp
-80101c73:	c3                   	ret    
-
-80101c74 <itrunc>:
-// to it (no directory entries referring to it)
-// and has no in-memory reference to it (is
-// not an open file or current directory).
-static void
-itrunc(struct inode *ip)
-{
-80101c74:	55                   	push   %ebp
-80101c75:	89 e5                	mov    %esp,%ebp
-80101c77:	83 ec 28             	sub    $0x28,%esp
-  int i, j;
-  struct buf *bp;
-  uint *a;
-
-  for(i = 0; i < NDIRECT; i++){
-80101c7a:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
-80101c81:	eb 44                	jmp    80101cc7 <itrunc+0x53>
-    if(ip->addrs[i]){
-80101c83:	8b 45 08             	mov    0x8(%ebp),%eax
-80101c86:	8b 55 f4             	mov    -0xc(%ebp),%edx
-80101c89:	83 c2 04             	add    $0x4,%edx
-80101c8c:	8b 44 90 0c          	mov    0xc(%eax,%edx,4),%eax
-80101c90:	85 c0                	test   %eax,%eax
-80101c92:	74 2f                	je     80101cc3 <itrunc+0x4f>
-      bfree(ip->dev, ip->addrs[i]);
-80101c94:	8b 45 08             	mov    0x8(%ebp),%eax
-80101c97:	8b 55 f4             	mov    -0xc(%ebp),%edx
-80101c9a:	83 c2 04             	add    $0x4,%edx
-80101c9d:	8b 54 90 0c          	mov    0xc(%eax,%edx,4),%edx
-80101ca1:	8b 45 08             	mov    0x8(%ebp),%eax
-80101ca4:	8b 00                	mov    (%eax),%eax
-80101ca6:	89 54 24 04          	mov    %edx,0x4(%esp)
-80101caa:	89 04 24             	mov    %eax,(%esp)
-80101cad:	e8 90 f8 ff ff       	call   80101542 <bfree>
-      ip->addrs[i] = 0;
-80101cb2:	8b 45 08             	mov    0x8(%ebp),%eax
-80101cb5:	8b 55 f4             	mov    -0xc(%ebp),%edx
-80101cb8:	83 c2 04             	add    $0x4,%edx
-80101cbb:	c7 44 90 0c 00 00 00 	movl   $0x0,0xc(%eax,%edx,4)
-80101cc2:	00 
-{
-  int i, j;
-  struct buf *bp;
-  uint *a;
-
-  for(i = 0; i < NDIRECT; i++){
-80101cc3:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
-80101cc7:	83 7d f4 0b          	cmpl   $0xb,-0xc(%ebp)
-80101ccb:	7e b6                	jle    80101c83 <itrunc+0xf>
-      bfree(ip->dev, ip->addrs[i]);
-      ip->addrs[i] = 0;
-    }
-  }
-  
-  if(ip->addrs[NDIRECT]){
-80101ccd:	8b 45 08             	mov    0x8(%ebp),%eax
-80101cd0:	8b 40 4c             	mov    0x4c(%eax),%eax
-80101cd3:	85 c0                	test   %eax,%eax
-80101cd5:	0f 84 8f 00 00 00    	je     80101d6a <itrunc+0xf6>
-    bp = bread(ip->dev, ip->addrs[NDIRECT]);
-80101cdb:	8b 45 08             	mov    0x8(%ebp),%eax
-80101cde:	8b 50 4c             	mov    0x4c(%eax),%edx
-80101ce1:	8b 45 08             	mov    0x8(%ebp),%eax
-80101ce4:	8b 00                	mov    (%eax),%eax
-80101ce6:	89 54 24 04          	mov    %edx,0x4(%esp)
-80101cea:	89 04 24             	mov    %eax,(%esp)
-80101ced:	e8 b4 e4 ff ff       	call   801001a6 <bread>
-80101cf2:	89 45 ec             	mov    %eax,-0x14(%ebp)
-    a = (uint*)bp->data;
-80101cf5:	8b 45 ec             	mov    -0x14(%ebp),%eax
-80101cf8:	83 c0 18             	add    $0x18,%eax
-80101cfb:	89 45 e8             	mov    %eax,-0x18(%ebp)
-    for(j = 0; j < NINDIRECT; j++){
-80101cfe:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
-80101d05:	eb 2f                	jmp    80101d36 <itrunc+0xc2>
-      if(a[j])
-80101d07:	8b 45 f0             	mov    -0x10(%ebp),%eax
-80101d0a:	c1 e0 02             	shl    $0x2,%eax
-80101d0d:	03 45 e8             	add    -0x18(%ebp),%eax
-80101d10:	8b 00                	mov    (%eax),%eax
-80101d12:	85 c0                	test   %eax,%eax
-80101d14:	74 1c                	je     80101d32 <itrunc+0xbe>
-        bfree(ip->dev, a[j]);
-80101d16:	8b 45 f0             	mov    -0x10(%ebp),%eax
-80101d19:	c1 e0 02             	shl    $0x2,%eax
-80101d1c:	03 45 e8             	add    -0x18(%ebp),%eax
-80101d1f:	8b 10                	mov    (%eax),%edx
-80101d21:	8b 45 08             	mov    0x8(%ebp),%eax
-80101d24:	8b 00                	mov    (%eax),%eax
-80101d26:	89 54 24 04          	mov    %edx,0x4(%esp)
-80101d2a:	89 04 24             	mov    %eax,(%esp)
-80101d2d:	e8 10 f8 ff ff       	call   80101542 <bfree>
-  }
-  
-  if(ip->addrs[NDIRECT]){
-    bp = bread(ip->dev, ip->addrs[NDIRECT]);
-    a = (uint*)bp->data;
-    for(j = 0; j < NINDIRECT; j++){
-80101d32:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)
-80101d36:	8b 45 f0             	mov    -0x10(%ebp),%eax
-80101d39:	83 f8 7f             	cmp    $0x7f,%eax
-80101d3c:	76 c9                	jbe    80101d07 <itrunc+0x93>
-      if(a[j])
-        bfree(ip->dev, a[j]);
-    }
-    brelse(bp);
-80101d3e:	8b 45 ec             	mov    -0x14(%ebp),%eax
-80101d41:	89 04 24             	mov    %eax,(%esp)
-80101d44:	e8 ce e4 ff ff       	call   80100217 <brelse>
-    bfree(ip->dev, ip->addrs[NDIRECT]);
-80101d49:	8b 45 08             	mov    0x8(%ebp),%eax
-80101d4c:	8b 50 4c             	mov    0x4c(%eax),%edx
-80101d4f:	8b 45 08             	mov    0x8(%ebp),%eax
-80101d52:	8b 00                	mov    (%eax),%eax
-80101d54:	89 54 24 04          	mov    %edx,0x4(%esp)
-80101d58:	89 04 24             	mov    %eax,(%esp)
-80101d5b:	e8 e2 f7 ff ff       	call   80101542 <bfree>
-    ip->addrs[NDIRECT] = 0;
-80101d60:	8b 45 08             	mov    0x8(%ebp),%eax
-80101d63:	c7 40 4c 00 00 00 00 	movl   $0x0,0x4c(%eax)
-  }
-
-  ip->size = 0;
-80101d6a:	8b 45 08             	mov    0x8(%ebp),%eax
-80101d6d:	c7 40 18 00 00 00 00 	movl   $0x0,0x18(%eax)
-  iupdate(ip);
-80101d74:	8b 45 08             	mov    0x8(%ebp),%eax
-80101d77:	89 04 24             	mov    %eax,(%esp)
-80101d7a:	e8 95 f9 ff ff       	call   80101714 <iupdate>
-}
-80101d7f:	c9                   	leave  
-80101d80:	c3                   	ret    
-
-80101d81 <stati>:
-
-// Copy stat information from inode.
-void
-stati(struct inode *ip, struct stat *st)
-{
-80101d81:	55                   	push   %ebp
-80101d82:	89 e5                	mov    %esp,%ebp
-  st->dev = ip->dev;
-80101d84:	8b 45 08             	mov    0x8(%ebp),%eax
-80101d87:	8b 00                	mov    (%eax),%eax
-80101d89:	89 c2                	mov    %eax,%edx
-80101d8b:	8b 45 0c             	mov    0xc(%ebp),%eax
-80101d8e:	89 50 04             	mov    %edx,0x4(%eax)
-  st->ino = ip->inum;
-80101d91:	8b 45 08             	mov    0x8(%ebp),%eax
-80101d94:	8b 50 04             	mov    0x4(%eax),%edx
-80101d97:	8b 45 0c             	mov    0xc(%ebp),%eax
-80101d9a:	89 50 08             	mov    %edx,0x8(%eax)
-  st->type = ip->type;
-80101d9d:	8b 45 08             	mov    0x8(%ebp),%eax
-80101da0:	0f b7 50 10          	movzwl 0x10(%eax),%edx
-80101da4:	8b 45 0c             	mov    0xc(%ebp),%eax
-80101da7:	66 89 10             	mov    %dx,(%eax)
-  st->nlink = ip->nlink;
-80101daa:	8b 45 08             	mov    0x8(%ebp),%eax
-80101dad:	0f b7 50 16          	movzwl 0x16(%eax),%edx
-80101db1:	8b 45 0c             	mov    0xc(%ebp),%eax
-80101db4:	66 89 50 0c          	mov    %dx,0xc(%eax)
-  st->size = ip->size;
-80101db8:	8b 45 08             	mov    0x8(%ebp),%eax
-80101dbb:	8b 50 18             	mov    0x18(%eax),%edx
-80101dbe:	8b 45 0c             	mov    0xc(%ebp),%eax
-80101dc1:	89 50 10             	mov    %edx,0x10(%eax)
-}
-80101dc4:	5d                   	pop    %ebp
-80101dc5:	c3                   	ret    
-
-80101dc6 <readi>:
-
-//PAGEBREAK!
-// Read data from inode.
-int
-readi(struct inode *ip, char *dst, uint off, uint n)
-{
-80101dc6:	55                   	push   %ebp
-80101dc7:	89 e5                	mov    %esp,%ebp
-80101dc9:	53                   	push   %ebx
-80101dca:	83 ec 24             	sub    $0x24,%esp
-  uint tot, m;
-  struct buf *bp;
-
-  if(ip->type == T_DEV){
-80101dcd:	8b 45 08             	mov    0x8(%ebp),%eax
-80101dd0:	0f b7 40 10          	movzwl 0x10(%eax),%eax
-80101dd4:	66 83 f8 03          	cmp    $0x3,%ax
-80101dd8:	75 60                	jne    80101e3a <readi+0x74>
-    if(ip->major < 0 || ip->major >= NDEV || !devsw[ip->major].read)
-80101dda:	8b 45 08             	mov    0x8(%ebp),%eax
-80101ddd:	0f b7 40 12          	movzwl 0x12(%eax),%eax
-80101de1:	66 85 c0             	test   %ax,%ax
-80101de4:	78 20                	js     80101e06 <readi+0x40>
-80101de6:	8b 45 08             	mov    0x8(%ebp),%eax
-80101de9:	0f b7 40 12          	movzwl 0x12(%eax),%eax
-80101ded:	66 83 f8 09          	cmp    $0x9,%ax
-80101df1:	7f 13                	jg     80101e06 <readi+0x40>
-80101df3:	8b 45 08             	mov    0x8(%ebp),%eax
-80101df6:	0f b7 40 12          	movzwl 0x12(%eax),%eax
-80101dfa:	98                   	cwtl   
-80101dfb:	8b 04 c5 00 22 11 80 	mov    -0x7feede00(,%eax,8),%eax
-80101e02:	85 c0                	test   %eax,%eax
-80101e04:	75 0a                	jne    80101e10 <readi+0x4a>
-      return -1;
-80101e06:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
-80101e0b:	e9 1b 01 00 00       	jmp    80101f2b <readi+0x165>
-    return devsw[ip->major].read(ip, dst, n);
-80101e10:	8b 45 08             	mov    0x8(%ebp),%eax
-80101e13:	0f b7 40 12          	movzwl 0x12(%eax),%eax
-80101e17:	98                   	cwtl   
-80101e18:	8b 14 c5 00 22 11 80 	mov    -0x7feede00(,%eax,8),%edx
-80101e1f:	8b 45 14             	mov    0x14(%ebp),%eax
-80101e22:	89 44 24 08          	mov    %eax,0x8(%esp)
-80101e26:	8b 45 0c             	mov    0xc(%ebp),%eax
-80101e29:	89 44 24 04          	mov    %eax,0x4(%esp)
-80101e2d:	8b 45 08             	mov    0x8(%ebp),%eax
-80101e30:	89 04 24             	mov    %eax,(%esp)
-80101e33:	ff d2                	call   *%edx
-80101e35:	e9 f1 00 00 00       	jmp    80101f2b <readi+0x165>
-  }
-
-  if(off > ip->size || off + n < off)
-80101e3a:	8b 45 08             	mov    0x8(%ebp),%eax
-80101e3d:	8b 40 18             	mov    0x18(%eax),%eax
-80101e40:	3b 45 10             	cmp    0x10(%ebp),%eax
-80101e43:	72 0d                	jb     80101e52 <readi+0x8c>
-80101e45:	8b 45 14             	mov    0x14(%ebp),%eax
-80101e48:	8b 55 10             	mov    0x10(%ebp),%edx
-80101e4b:	01 d0                	add    %edx,%eax
-80101e4d:	3b 45 10             	cmp    0x10(%ebp),%eax
-80101e50:	73 0a                	jae    80101e5c <readi+0x96>
-    return -1;
-80101e52:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
-80101e57:	e9 cf 00 00 00       	jmp    80101f2b <readi+0x165>
-  if(off + n > ip->size)
-80101e5c:	8b 45 14             	mov    0x14(%ebp),%eax
-80101e5f:	8b 55 10             	mov    0x10(%ebp),%edx
-80101e62:	01 c2                	add    %eax,%edx
-80101e64:	8b 45 08             	mov    0x8(%ebp),%eax
-80101e67:	8b 40 18             	mov    0x18(%eax),%eax
-80101e6a:	39 c2                	cmp    %eax,%edx
-80101e6c:	76 0c                	jbe    80101e7a <readi+0xb4>
-    n = ip->size - off;
-80101e6e:	8b 45 08             	mov    0x8(%ebp),%eax
-80101e71:	8b 40 18             	mov    0x18(%eax),%eax
-80101e74:	2b 45 10             	sub    0x10(%ebp),%eax
-80101e77:	89 45 14             	mov    %eax,0x14(%ebp)
-
-  for(tot=0; tot<n; tot+=m, off+=m, dst+=m){
-80101e7a:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
-80101e81:	e9 96 00 00 00       	jmp    80101f1c <readi+0x156>
-    bp = bread(ip->dev, bmap(ip, off/BSIZE));
-80101e86:	8b 45 10             	mov    0x10(%ebp),%eax
-80101e89:	c1 e8 09             	shr    $0x9,%eax
-80101e8c:	89 44 24 04          	mov    %eax,0x4(%esp)
-80101e90:	8b 45 08             	mov    0x8(%ebp),%eax
-80101e93:	89 04 24             	mov    %eax,(%esp)
-80101e96:	e8 d7 fc ff ff       	call   80101b72 <bmap>
-80101e9b:	8b 55 08             	mov    0x8(%ebp),%edx
-80101e9e:	8b 12                	mov    (%edx),%edx
-80101ea0:	89 44 24 04          	mov    %eax,0x4(%esp)
-80101ea4:	89 14 24             	mov    %edx,(%esp)
-80101ea7:	e8 fa e2 ff ff       	call   801001a6 <bread>
-80101eac:	89 45 f0             	mov    %eax,-0x10(%ebp)
-    m = min(n - tot, BSIZE - off%BSIZE);
-80101eaf:	8b 45 10             	mov    0x10(%ebp),%eax
-80101eb2:	89 c2                	mov    %eax,%edx
-80101eb4:	81 e2 ff 01 00 00    	and    $0x1ff,%edx
-80101eba:	b8 00 02 00 00       	mov    $0x200,%eax
-80101ebf:	89 c1                	mov    %eax,%ecx
-80101ec1:	29 d1                	sub    %edx,%ecx
-80101ec3:	89 ca                	mov    %ecx,%edx
-80101ec5:	8b 45 f4             	mov    -0xc(%ebp),%eax
-80101ec8:	8b 4d 14             	mov    0x14(%ebp),%ecx
-80101ecb:	89 cb                	mov    %ecx,%ebx
-80101ecd:	29 c3                	sub    %eax,%ebx
-80101ecf:	89 d8                	mov    %ebx,%eax
-80101ed1:	39 c2                	cmp    %eax,%edx
-80101ed3:	0f 46 c2             	cmovbe %edx,%eax
-80101ed6:	89 45 ec             	mov    %eax,-0x14(%ebp)
-    memmove(dst, bp->data + off%BSIZE, m);
-80101ed9:	8b 45 f0             	mov    -0x10(%ebp),%eax
-80101edc:	8d 50 18             	lea    0x18(%eax),%edx
-80101edf:	8b 45 10             	mov    0x10(%ebp),%eax
-80101ee2:	25 ff 01 00 00       	and    $0x1ff,%eax
-80101ee7:	01 c2                	add    %eax,%edx
-80101ee9:	8b 45 ec             	mov    -0x14(%ebp),%eax
-80101eec:	89 44 24 08          	mov    %eax,0x8(%esp)
-80101ef0:	89 54 24 04          	mov    %edx,0x4(%esp)
-80101ef4:	8b 45 0c             	mov    0xc(%ebp),%eax
-80101ef7:	89 04 24             	mov    %eax,(%esp)
-80101efa:	e8 4a 38 00 00       	call   80105749 <memmove>
-    brelse(bp);
-80101eff:	8b 45 f0             	mov    -0x10(%ebp),%eax
-80101f02:	89 04 24             	mov    %eax,(%esp)
-80101f05:	e8 0d e3 ff ff       	call   80100217 <brelse>
-  if(off > ip->size || off + n < off)
-    return -1;
-  if(off + n > ip->size)
-    n = ip->size - off;
-
-  for(tot=0; tot<n; tot+=m, off+=m, dst+=m){
-80101f0a:	8b 45 ec             	mov    -0x14(%ebp),%eax
-80101f0d:	01 45 f4             	add    %eax,-0xc(%ebp)
-80101f10:	8b 45 ec             	mov    -0x14(%ebp),%eax
-80101f13:	01 45 10             	add    %eax,0x10(%ebp)
-80101f16:	8b 45 ec             	mov    -0x14(%ebp),%eax
-80101f19:	01 45 0c             	add    %eax,0xc(%ebp)
-80101f1c:	8b 45 f4             	mov    -0xc(%ebp),%eax
-80101f1f:	3b 45 14             	cmp    0x14(%ebp),%eax
-80101f22:	0f 82 5e ff ff ff    	jb     80101e86 <readi+0xc0>
-    bp = bread(ip->dev, bmap(ip, off/BSIZE));
-    m = min(n - tot, BSIZE - off%BSIZE);
-    memmove(dst, bp->data + off%BSIZE, m);
-    brelse(bp);
-  }
-  return n;
-80101f28:	8b 45 14             	mov    0x14(%ebp),%eax
-}
-80101f2b:	83 c4 24             	add    $0x24,%esp
-80101f2e:	5b                   	pop    %ebx
-80101f2f:	5d                   	pop    %ebp
-80101f30:	c3                   	ret    
-
-80101f31 <writei>:
-
-// PAGEBREAK!
-// Write data to inode.
-int
-writei(struct inode *ip, char *src, uint off, uint n)
-{
-80101f31:	55                   	push   %ebp
-80101f32:	89 e5                	mov    %esp,%ebp
-80101f34:	53                   	push   %ebx
-80101f35:	83 ec 24             	sub    $0x24,%esp
-  uint tot, m;
-  struct buf *bp;
-
-  if(ip->type == T_DEV){
-80101f38:	8b 45 08             	mov    0x8(%ebp),%eax
-80101f3b:	0f b7 40 10          	movzwl 0x10(%eax),%eax
-80101f3f:	66 83 f8 03          	cmp    $0x3,%ax
-80101f43:	75 60                	jne    80101fa5 <writei+0x74>
-    if(ip->major < 0 || ip->major >= NDEV || !devsw[ip->major].write)
-80101f45:	8b 45 08             	mov    0x8(%ebp),%eax
-80101f48:	0f b7 40 12          	movzwl 0x12(%eax),%eax
-80101f4c:	66 85 c0             	test   %ax,%ax
-80101f4f:	78 20                	js     80101f71 <writei+0x40>
-80101f51:	8b 45 08             	mov    0x8(%ebp),%eax
-80101f54:	0f b7 40 12          	movzwl 0x12(%eax),%eax
-80101f58:	66 83 f8 09          	cmp    $0x9,%ax
-80101f5c:	7f 13                	jg     80101f71 <writei+0x40>
-80101f5e:	8b 45 08             	mov    0x8(%ebp),%eax
-80101f61:	0f b7 40 12          	movzwl 0x12(%eax),%eax
-80101f65:	98                   	cwtl   
-80101f66:	8b 04 c5 04 22 11 80 	mov    -0x7feeddfc(,%eax,8),%eax
-80101f6d:	85 c0                	test   %eax,%eax
-80101f6f:	75 0a                	jne    80101f7b <writei+0x4a>
-      return -1;
-80101f71:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
-80101f76:	e9 46 01 00 00       	jmp    801020c1 <writei+0x190>
-    return devsw[ip->major].write(ip, src, n);
-80101f7b:	8b 45 08             	mov    0x8(%ebp),%eax
-80101f7e:	0f b7 40 12          	movzwl 0x12(%eax),%eax
-80101f82:	98                   	cwtl   
-80101f83:	8b 14 c5 04 22 11 80 	mov    -0x7feeddfc(,%eax,8),%edx
-80101f8a:	8b 45 14             	mov    0x14(%ebp),%eax
-80101f8d:	89 44 24 08          	mov    %eax,0x8(%esp)
-80101f91:	8b 45 0c             	mov    0xc(%ebp),%eax
-80101f94:	89 44 24 04          	mov    %eax,0x4(%esp)
-80101f98:	8b 45 08             	mov    0x8(%ebp),%eax
-80101f9b:	89 04 24             	mov    %eax,(%esp)
-80101f9e:	ff d2                	call   *%edx
-80101fa0:	e9 1c 01 00 00       	jmp    801020c1 <writei+0x190>
-  }
-
-  if(off > ip->size || off + n < off)
-80101fa5:	8b 45 08             	mov    0x8(%ebp),%eax
-80101fa8:	8b 40 18             	mov    0x18(%eax),%eax
-80101fab:	3b 45 10             	cmp    0x10(%ebp),%eax
-80101fae:	72 0d                	jb     80101fbd <writei+0x8c>
-80101fb0:	8b 45 14             	mov    0x14(%ebp),%eax
-80101fb3:	8b 55 10             	mov    0x10(%ebp),%edx
-80101fb6:	01 d0                	add    %edx,%eax
-80101fb8:	3b 45 10             	cmp    0x10(%ebp),%eax
-80101fbb:	73 0a                	jae    80101fc7 <writei+0x96>
-    return -1;
-80101fbd:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
-80101fc2:	e9 fa 00 00 00       	jmp    801020c1 <writei+0x190>
-  if(off + n > MAXFILE*BSIZE)
-80101fc7:	8b 45 14             	mov    0x14(%ebp),%eax
-80101fca:	8b 55 10             	mov    0x10(%ebp),%edx
-80101fcd:	01 d0                	add    %edx,%eax
-80101fcf:	3d 00 18 01 00       	cmp    $0x11800,%eax
-80101fd4:	76 0a                	jbe    80101fe0 <writei+0xaf>
-    return -1;
-80101fd6:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
-80101fdb:	e9 e1 00 00 00       	jmp    801020c1 <writei+0x190>
-
-  for(tot=0; tot<n; tot+=m, off+=m, src+=m){
-80101fe0:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
-80101fe7:	e9 a1 00 00 00       	jmp    8010208d <writei+0x15c>
-    bp = bread(ip->dev, bmap(ip, off/BSIZE));
-80101fec:	8b 45 10             	mov    0x10(%ebp),%eax
-80101fef:	c1 e8 09             	shr    $0x9,%eax
-80101ff2:	89 44 24 04          	mov    %eax,0x4(%esp)
-80101ff6:	8b 45 08             	mov    0x8(%ebp),%eax
-80101ff9:	89 04 24             	mov    %eax,(%esp)
-80101ffc:	e8 71 fb ff ff       	call   80101b72 <bmap>
-80102001:	8b 55 08             	mov    0x8(%ebp),%edx
-80102004:	8b 12                	mov    (%edx),%edx
-80102006:	89 44 24 04          	mov    %eax,0x4(%esp)
-8010200a:	89 14 24             	mov    %edx,(%esp)
-8010200d:	e8 94 e1 ff ff       	call   801001a6 <bread>
-80102012:	89 45 f0             	mov    %eax,-0x10(%ebp)
-    m = min(n - tot, BSIZE - off%BSIZE);
-80102015:	8b 45 10             	mov    0x10(%ebp),%eax
-80102018:	89 c2                	mov    %eax,%edx
-8010201a:	81 e2 ff 01 00 00    	and    $0x1ff,%edx
-80102020:	b8 00 02 00 00       	mov    $0x200,%eax
-80102025:	89 c1                	mov    %eax,%ecx
-80102027:	29 d1                	sub    %edx,%ecx
-80102029:	89 ca                	mov    %ecx,%edx
-8010202b:	8b 45 f4             	mov    -0xc(%ebp),%eax
-8010202e:	8b 4d 14             	mov    0x14(%ebp),%ecx
-80102031:	89 cb                	mov    %ecx,%ebx
-80102033:	29 c3                	sub    %eax,%ebx
-80102035:	89 d8                	mov    %ebx,%eax
-80102037:	39 c2                	cmp    %eax,%edx
-80102039:	0f 46 c2             	cmovbe %edx,%eax
-8010203c:	89 45 ec             	mov    %eax,-0x14(%ebp)
-    memmove(bp->data + off%BSIZE, src, m);
-8010203f:	8b 45 f0             	mov    -0x10(%ebp),%eax
-80102042:	8d 50 18             	lea    0x18(%eax),%edx
-80102045:	8b 45 10             	mov    0x10(%ebp),%eax
-80102048:	25 ff 01 00 00       	and    $0x1ff,%eax
-8010204d:	01 c2                	add    %eax,%edx
-8010204f:	8b 45 ec             	mov    -0x14(%ebp),%eax
-80102052:	89 44 24 08          	mov    %eax,0x8(%esp)
-80102056:	8b 45 0c             	mov    0xc(%ebp),%eax
-80102059:	89 44 24 04          	mov    %eax,0x4(%esp)
-8010205d:	89 14 24             	mov    %edx,(%esp)
-80102060:	e8 e4 36 00 00       	call   80105749 <memmove>
-    log_write(bp);
-80102065:	8b 45 f0             	mov    -0x10(%ebp),%eax
-80102068:	89 04 24             	mov    %eax,(%esp)
-8010206b:	e8 52 16 00 00       	call   801036c2 <log_write>
-    brelse(bp);
-80102070:	8b 45 f0             	mov    -0x10(%ebp),%eax
-80102073:	89 04 24             	mov    %eax,(%esp)
-80102076:	e8 9c e1 ff ff       	call   80100217 <brelse>
-  if(off > ip->size || off + n < off)
-    return -1;
-  if(off + n > MAXFILE*BSIZE)
-    return -1;
-
-  for(tot=0; tot<n; tot+=m, off+=m, src+=m){
-8010207b:	8b 45 ec             	mov    -0x14(%ebp),%eax
-8010207e:	01 45 f4             	add    %eax,-0xc(%ebp)
-80102081:	8b 45 ec             	mov    -0x14(%ebp),%eax
-80102084:	01 45 10             	add    %eax,0x10(%ebp)
-80102087:	8b 45 ec             	mov    -0x14(%ebp),%eax
-8010208a:	01 45 0c             	add    %eax,0xc(%ebp)
-8010208d:	8b 45 f4             	mov    -0xc(%ebp),%eax
-80102090:	3b 45 14             	cmp    0x14(%ebp),%eax
-80102093:	0f 82 53 ff ff ff    	jb     80101fec <writei+0xbb>
-    memmove(bp->data + off%BSIZE, src, m);
-    log_write(bp);
-    brelse(bp);
-  }
-
-  if(n > 0 && off > ip->size){
-80102099:	83 7d 14 00          	cmpl   $0x0,0x14(%ebp)
-8010209d:	74 1f                	je     801020be <writei+0x18d>
-8010209f:	8b 45 08             	mov    0x8(%ebp),%eax
-801020a2:	8b 40 18             	mov    0x18(%eax),%eax
-801020a5:	3b 45 10             	cmp    0x10(%ebp),%eax
-801020a8:	73 14                	jae    801020be <writei+0x18d>
-    ip->size = off;
-801020aa:	8b 45 08             	mov    0x8(%ebp),%eax
-801020ad:	8b 55 10             	mov    0x10(%ebp),%edx
-801020b0:	89 50 18             	mov    %edx,0x18(%eax)
-    iupdate(ip);
-801020b3:	8b 45 08             	mov    0x8(%ebp),%eax
-801020b6:	89 04 24             	mov    %eax,(%esp)
-801020b9:	e8 56 f6 ff ff       	call   80101714 <iupdate>
-  }
-  return n;
-801020be:	8b 45 14             	mov    0x14(%ebp),%eax
-}
-801020c1:	83 c4 24             	add    $0x24,%esp
-801020c4:	5b                   	pop    %ebx
-801020c5:	5d                   	pop    %ebp
-801020c6:	c3                   	ret    
-
-801020c7 <namecmp>:
-//PAGEBREAK!
-// Directories
-
-int
-namecmp(const char *s, const char *t)
-{
-801020c7:	55                   	push   %ebp
-801020c8:	89 e5                	mov    %esp,%ebp
-801020ca:	83 ec 18             	sub    $0x18,%esp
-  return strncmp(s, t, DIRSIZ);
-801020cd:	c7 44 24 08 0e 00 00 	movl   $0xe,0x8(%esp)
-801020d4:	00 
-801020d5:	8b 45 0c             	mov    0xc(%ebp),%eax
-801020d8:	89 44 24 04          	mov    %eax,0x4(%esp)
-801020dc:	8b 45 08             	mov    0x8(%ebp),%eax
-801020df:	89 04 24             	mov    %eax,(%esp)
-801020e2:	e8 06 37 00 00       	call   801057ed <strncmp>
-}
-801020e7:	c9                   	leave  
-801020e8:	c3                   	ret    
-
-801020e9 <dirlookup>:
-
-// Look for a directory entry in a directory.
-// If found, set *poff to byte offset of entry.
-struct inode*
-dirlookup(struct inode *dp, char *name, uint *poff)
-{
-801020e9:	55                   	push   %ebp
-801020ea:	89 e5                	mov    %esp,%ebp
-801020ec:	83 ec 38             	sub    $0x38,%esp
-  uint off, inum;
-  struct dirent de;
-
-  if(dp->type != T_DIR)
-801020ef:	8b 45 08             	mov    0x8(%ebp),%eax
-801020f2:	0f b7 40 10          	movzwl 0x10(%eax),%eax
-801020f6:	66 83 f8 01          	cmp    $0x1,%ax
-801020fa:	74 0c                	je     80102108 <dirlookup+0x1f>
-    panic("dirlookup not DIR");
-801020fc:	c7 04 24 c9 92 10 80 	movl   $0x801092c9,(%esp)
-80102103:	e8 35 e4 ff ff       	call   8010053d <panic>
-
-  for(off = 0; off < dp->size; off += sizeof(de)){
-80102108:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
-8010210f:	e9 87 00 00 00       	jmp    8010219b <dirlookup+0xb2>
-    if(readi(dp, (char*)&de, off, sizeof(de)) != sizeof(de))
-80102114:	c7 44 24 0c 10 00 00 	movl   $0x10,0xc(%esp)
-8010211b:	00 
-8010211c:	8b 45 f4             	mov    -0xc(%ebp),%eax
-8010211f:	89 44 24 08          	mov    %eax,0x8(%esp)
-80102123:	8d 45 e0             	lea    -0x20(%ebp),%eax
-80102126:	89 44 24 04          	mov    %eax,0x4(%esp)
-8010212a:	8b 45 08             	mov    0x8(%ebp),%eax
-8010212d:	89 04 24             	mov    %eax,(%esp)
-80102130:	e8 91 fc ff ff       	call   80101dc6 <readi>
-80102135:	83 f8 10             	cmp    $0x10,%eax
-80102138:	74 0c                	je     80102146 <dirlookup+0x5d>
-      panic("dirlink read");
-8010213a:	c7 04 24 db 92 10 80 	movl   $0x801092db,(%esp)
-80102141:	e8 f7 e3 ff ff       	call   8010053d <panic>
-    if(de.inum == 0)
-80102146:	0f b7 45 e0          	movzwl -0x20(%ebp),%eax
-8010214a:	66 85 c0             	test   %ax,%ax
-8010214d:	74 47                	je     80102196 <dirlookup+0xad>
-      continue;
-    if(namecmp(name, de.name) == 0){
-8010214f:	8d 45 e0             	lea    -0x20(%ebp),%eax
-80102152:	83 c0 02             	add    $0x2,%eax
-80102155:	89 44 24 04          	mov    %eax,0x4(%esp)
-80102159:	8b 45 0c             	mov    0xc(%ebp),%eax
-8010215c:	89 04 24             	mov    %eax,(%esp)
-8010215f:	e8 63 ff ff ff       	call   801020c7 <namecmp>
-80102164:	85 c0                	test   %eax,%eax
-80102166:	75 2f                	jne    80102197 <dirlookup+0xae>
-      // entry matches path element
-      if(poff)
-80102168:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
-8010216c:	74 08                	je     80102176 <dirlookup+0x8d>
-        *poff = off;
-8010216e:	8b 45 10             	mov    0x10(%ebp),%eax
-80102171:	8b 55 f4             	mov    -0xc(%ebp),%edx
-80102174:	89 10                	mov    %edx,(%eax)
-      inum = de.inum;
-80102176:	0f b7 45 e0          	movzwl -0x20(%ebp),%eax
-8010217a:	0f b7 c0             	movzwl %ax,%eax
-8010217d:	89 45 f0             	mov    %eax,-0x10(%ebp)
-      return iget(dp->dev, inum);
-80102180:	8b 45 08             	mov    0x8(%ebp),%eax
-80102183:	8b 00                	mov    (%eax),%eax
-80102185:	8b 55 f0             	mov    -0x10(%ebp),%edx
-80102188:	89 54 24 04          	mov    %edx,0x4(%esp)
-8010218c:	89 04 24             	mov    %eax,(%esp)
-8010218f:	e8 38 f6 ff ff       	call   801017cc <iget>
-80102194:	eb 19                	jmp    801021af <dirlookup+0xc6>
-
-  for(off = 0; off < dp->size; off += sizeof(de)){
-    if(readi(dp, (char*)&de, off, sizeof(de)) != sizeof(de))
-      panic("dirlink read");
-    if(de.inum == 0)
-      continue;
-80102196:	90                   	nop
-  struct dirent de;
-
-  if(dp->type != T_DIR)
-    panic("dirlookup not DIR");
-
-  for(off = 0; off < dp->size; off += sizeof(de)){
-80102197:	83 45 f4 10          	addl   $0x10,-0xc(%ebp)
-8010219b:	8b 45 08             	mov    0x8(%ebp),%eax
-8010219e:	8b 40 18             	mov    0x18(%eax),%eax
-801021a1:	3b 45 f4             	cmp    -0xc(%ebp),%eax
-801021a4:	0f 87 6a ff ff ff    	ja     80102114 <dirlookup+0x2b>
-      inum = de.inum;
-      return iget(dp->dev, inum);
-    }
-  }
-
-  return 0;
-801021aa:	b8 00 00 00 00       	mov    $0x0,%eax
-}
-801021af:	c9                   	leave  
-801021b0:	c3                   	ret    
-
-801021b1 <dirlink>:
-
-// Write a new directory entry (name, inum) into the directory dp.
-int
-dirlink(struct inode *dp, char *name, uint inum)
-{
-801021b1:	55                   	push   %ebp
-801021b2:	89 e5                	mov    %esp,%ebp
-801021b4:	83 ec 38             	sub    $0x38,%esp
-  int off;
-  struct dirent de;
-  struct inode *ip;
-
-  // Check that name is not present.
-  if((ip = dirlookup(dp, name, 0)) != 0){
-801021b7:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
-801021be:	00 
-801021bf:	8b 45 0c             	mov    0xc(%ebp),%eax
-801021c2:	89 44 24 04          	mov    %eax,0x4(%esp)
-801021c6:	8b 45 08             	mov    0x8(%ebp),%eax
-801021c9:	89 04 24             	mov    %eax,(%esp)
-801021cc:	e8 18 ff ff ff       	call   801020e9 <dirlookup>
-801021d1:	89 45 f0             	mov    %eax,-0x10(%ebp)
-801021d4:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
-801021d8:	74 15                	je     801021ef <dirlink+0x3e>
-    iput(ip);
-801021da:	8b 45 f0             	mov    -0x10(%ebp),%eax
-801021dd:	89 04 24             	mov    %eax,(%esp)
-801021e0:	e8 9e f8 ff ff       	call   80101a83 <iput>
-    return -1;
-801021e5:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
-801021ea:	e9 b8 00 00 00       	jmp    801022a7 <dirlink+0xf6>
-  }
-
-  // Look for an empty dirent.
-  for(off = 0; off < dp->size; off += sizeof(de)){
-801021ef:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
-801021f6:	eb 44                	jmp    8010223c <dirlink+0x8b>
-    if(readi(dp, (char*)&de, off, sizeof(de)) != sizeof(de))
-801021f8:	8b 45 f4             	mov    -0xc(%ebp),%eax
-801021fb:	c7 44 24 0c 10 00 00 	movl   $0x10,0xc(%esp)
-80102202:	00 
-80102203:	89 44 24 08          	mov    %eax,0x8(%esp)
-80102207:	8d 45 e0             	lea    -0x20(%ebp),%eax
-8010220a:	89 44 24 04          	mov    %eax,0x4(%esp)
-8010220e:	8b 45 08             	mov    0x8(%ebp),%eax
-80102211:	89 04 24             	mov    %eax,(%esp)
-80102214:	e8 ad fb ff ff       	call   80101dc6 <readi>
-80102219:	83 f8 10             	cmp    $0x10,%eax
-8010221c:	74 0c                	je     8010222a <dirlink+0x79>
-      panic("dirlink read");
-8010221e:	c7 04 24 db 92 10 80 	movl   $0x801092db,(%esp)
-80102225:	e8 13 e3 ff ff       	call   8010053d <panic>
-    if(de.inum == 0)
-8010222a:	0f b7 45 e0          	movzwl -0x20(%ebp),%eax
-8010222e:	66 85 c0             	test   %ax,%ax
-80102231:	74 18                	je     8010224b <dirlink+0x9a>
-    iput(ip);
-    return -1;
-  }
-
-  // Look for an empty dirent.
-  for(off = 0; off < dp->size; off += sizeof(de)){
-80102233:	8b 45 f4             	mov    -0xc(%ebp),%eax
-80102236:	83 c0 10             	add    $0x10,%eax
-80102239:	89 45 f4             	mov    %eax,-0xc(%ebp)
-8010223c:	8b 55 f4             	mov    -0xc(%ebp),%edx
-8010223f:	8b 45 08             	mov    0x8(%ebp),%eax
-80102242:	8b 40 18             	mov    0x18(%eax),%eax
-80102245:	39 c2                	cmp    %eax,%edx
-80102247:	72 af                	jb     801021f8 <dirlink+0x47>
-80102249:	eb 01                	jmp    8010224c <dirlink+0x9b>
-    if(readi(dp, (char*)&de, off, sizeof(de)) != sizeof(de))
-      panic("dirlink read");
-    if(de.inum == 0)
-      break;
-8010224b:	90                   	nop
-  }
-
-  strncpy(de.name, name, DIRSIZ);
-8010224c:	c7 44 24 08 0e 00 00 	movl   $0xe,0x8(%esp)
-80102253:	00 
-80102254:	8b 45 0c             	mov    0xc(%ebp),%eax
-80102257:	89 44 24 04          	mov    %eax,0x4(%esp)
-8010225b:	8d 45 e0             	lea    -0x20(%ebp),%eax
-8010225e:	83 c0 02             	add    $0x2,%eax
-80102261:	89 04 24             	mov    %eax,(%esp)
-80102264:	e8 dc 35 00 00       	call   80105845 <strncpy>
-  de.inum = inum;
-80102269:	8b 45 10             	mov    0x10(%ebp),%eax
-8010226c:	66 89 45 e0          	mov    %ax,-0x20(%ebp)
-  if(writei(dp, (char*)&de, off, sizeof(de)) != sizeof(de))
-80102270:	8b 45 f4             	mov    -0xc(%ebp),%eax
-80102273:	c7 44 24 0c 10 00 00 	movl   $0x10,0xc(%esp)
-8010227a:	00 
-8010227b:	89 44 24 08          	mov    %eax,0x8(%esp)
-8010227f:	8d 45 e0             	lea    -0x20(%ebp),%eax
-80102282:	89 44 24 04          	mov    %eax,0x4(%esp)
-80102286:	8b 45 08             	mov    0x8(%ebp),%eax
-80102289:	89 04 24             	mov    %eax,(%esp)
-8010228c:	e8 a0 fc ff ff       	call   80101f31 <writei>
-80102291:	83 f8 10             	cmp    $0x10,%eax
-80102294:	74 0c                	je     801022a2 <dirlink+0xf1>
-    panic("dirlink");
-80102296:	c7 04 24 e8 92 10 80 	movl   $0x801092e8,(%esp)
-8010229d:	e8 9b e2 ff ff       	call   8010053d <panic>
-  
-  return 0;
-801022a2:	b8 00 00 00 00       	mov    $0x0,%eax
-}
-801022a7:	c9                   	leave  
-801022a8:	c3                   	ret    
-
-801022a9 <skipelem>:
-//   skipelem("a", name) = "", setting name = "a"
-//   skipelem("", name) = skipelem("////", name) = 0
-//
-static char*
-skipelem(char *path, char *name)
-{
-801022a9:	55                   	push   %ebp
-801022aa:	89 e5                	mov    %esp,%ebp
-801022ac:	83 ec 28             	sub    $0x28,%esp
-  char *s;
-  int len;
-
-  while(*path == '/')
-801022af:	eb 04                	jmp    801022b5 <skipelem+0xc>
-    path++;
-801022b1:	83 45 08 01          	addl   $0x1,0x8(%ebp)
-skipelem(char *path, char *name)
-{
-  char *s;
-  int len;
-
-  while(*path == '/')
-801022b5:	8b 45 08             	mov    0x8(%ebp),%eax
-801022b8:	0f b6 00             	movzbl (%eax),%eax
-801022bb:	3c 2f                	cmp    $0x2f,%al
-801022bd:	74 f2                	je     801022b1 <skipelem+0x8>
-    path++;
-  if(*path == 0)
-801022bf:	8b 45 08             	mov    0x8(%ebp),%eax
-801022c2:	0f b6 00             	movzbl (%eax),%eax
-801022c5:	84 c0                	test   %al,%al
-801022c7:	75 0a                	jne    801022d3 <skipelem+0x2a>
-    return 0;
-801022c9:	b8 00 00 00 00       	mov    $0x0,%eax
-801022ce:	e9 86 00 00 00       	jmp    80102359 <skipelem+0xb0>
-  s = path;
-801022d3:	8b 45 08             	mov    0x8(%ebp),%eax
-801022d6:	89 45 f4             	mov    %eax,-0xc(%ebp)
-  while(*path != '/' && *path != 0)
-801022d9:	eb 04                	jmp    801022df <skipelem+0x36>
-    path++;
-801022db:	83 45 08 01          	addl   $0x1,0x8(%ebp)
-  while(*path == '/')
-    path++;
-  if(*path == 0)
-    return 0;
-  s = path;
-  while(*path != '/' && *path != 0)
-801022df:	8b 45 08             	mov    0x8(%ebp),%eax
-801022e2:	0f b6 00             	movzbl (%eax),%eax
-801022e5:	3c 2f                	cmp    $0x2f,%al
-801022e7:	74 0a                	je     801022f3 <skipelem+0x4a>
-801022e9:	8b 45 08             	mov    0x8(%ebp),%eax
-801022ec:	0f b6 00             	movzbl (%eax),%eax
-801022ef:	84 c0                	test   %al,%al
-801022f1:	75 e8                	jne    801022db <skipelem+0x32>
-    path++;
-  len = path - s;
-801022f3:	8b 55 08             	mov    0x8(%ebp),%edx
-801022f6:	8b 45 f4             	mov    -0xc(%ebp),%eax
-801022f9:	89 d1                	mov    %edx,%ecx
-801022fb:	29 c1                	sub    %eax,%ecx
-801022fd:	89 c8                	mov    %ecx,%eax
-801022ff:	89 45 f0             	mov    %eax,-0x10(%ebp)
-  if(len >= DIRSIZ)
-80102302:	83 7d f0 0d          	cmpl   $0xd,-0x10(%ebp)
-80102306:	7e 1c                	jle    80102324 <skipelem+0x7b>
-    memmove(name, s, DIRSIZ);
-80102308:	c7 44 24 08 0e 00 00 	movl   $0xe,0x8(%esp)
-8010230f:	00 
-80102310:	8b 45 f4             	mov    -0xc(%ebp),%eax
-80102313:	89 44 24 04          	mov    %eax,0x4(%esp)
-80102317:	8b 45 0c             	mov    0xc(%ebp),%eax
-8010231a:	89 04 24             	mov    %eax,(%esp)
-8010231d:	e8 27 34 00 00       	call   80105749 <memmove>
-  else {
-    memmove(name, s, len);
-    name[len] = 0;
-  }
-  while(*path == '/')
-80102322:	eb 28                	jmp    8010234c <skipelem+0xa3>
-    path++;
-  len = path - s;
-  if(len >= DIRSIZ)
-    memmove(name, s, DIRSIZ);
-  else {
-    memmove(name, s, len);
-80102324:	8b 45 f0             	mov    -0x10(%ebp),%eax
-80102327:	89 44 24 08          	mov    %eax,0x8(%esp)
-8010232b:	8b 45 f4             	mov    -0xc(%ebp),%eax
-8010232e:	89 44 24 04          	mov    %eax,0x4(%esp)
-80102332:	8b 45 0c             	mov    0xc(%ebp),%eax
-80102335:	89 04 24             	mov    %eax,(%esp)
-80102338:	e8 0c 34 00 00       	call   80105749 <memmove>
-    name[len] = 0;
-8010233d:	8b 45 f0             	mov    -0x10(%ebp),%eax
-80102340:	03 45 0c             	add    0xc(%ebp),%eax
-80102343:	c6 00 00             	movb   $0x0,(%eax)
-  }
-  while(*path == '/')
-80102346:	eb 04                	jmp    8010234c <skipelem+0xa3>
-    path++;
-80102348:	83 45 08 01          	addl   $0x1,0x8(%ebp)
-    memmove(name, s, DIRSIZ);
-  else {
-    memmove(name, s, len);
-    name[len] = 0;
-  }
-  while(*path == '/')
-8010234c:	8b 45 08             	mov    0x8(%ebp),%eax
-8010234f:	0f b6 00             	movzbl (%eax),%eax
-80102352:	3c 2f                	cmp    $0x2f,%al
-80102354:	74 f2                	je     80102348 <skipelem+0x9f>
-    path++;
-  return path;
-80102356:	8b 45 08             	mov    0x8(%ebp),%eax
-}
-80102359:	c9                   	leave  
-8010235a:	c3                   	ret    
-
-8010235b <namex>:
-// If parent != 0, return the inode for the parent and copy the final
-// path element into name, which must have room for DIRSIZ bytes.
-// Must be called inside a transaction since it calls iput().
-static struct inode*
-namex(char *path, int nameiparent, char *name)
-{
-8010235b:	55                   	push   %ebp
-8010235c:	89 e5                	mov    %esp,%ebp
-8010235e:	83 ec 28             	sub    $0x28,%esp
-  struct inode *ip, *next;
-
-  if(*path == '/')
-80102361:	8b 45 08             	mov    0x8(%ebp),%eax
-80102364:	0f b6 00             	movzbl (%eax),%eax
-80102367:	3c 2f                	cmp    $0x2f,%al
-80102369:	75 1c                	jne    80102387 <namex+0x2c>
-    ip = iget(ROOTDEV, ROOTINO);
-8010236b:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
-80102372:	00 
-80102373:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
-8010237a:	e8 4d f4 ff ff       	call   801017cc <iget>
-8010237f:	89 45 f4             	mov    %eax,-0xc(%ebp)
-  else
-    ip = idup(proc->cwd);
-
-  while((path = skipelem(path, name)) != 0){
-80102382:	e9 af 00 00 00       	jmp    80102436 <namex+0xdb>
-  struct inode *ip, *next;
-
-  if(*path == '/')
-    ip = iget(ROOTDEV, ROOTINO);
-  else
-    ip = idup(proc->cwd);
-80102387:	65 a1 04 00 00 00    	mov    %gs:0x4,%eax
-8010238d:	8b 40 6c             	mov    0x6c(%eax),%eax
-80102390:	89 04 24             	mov    %eax,(%esp)
-80102393:	e8 06 f5 ff ff       	call   8010189e <idup>
-80102398:	89 45 f4             	mov    %eax,-0xc(%ebp)
-
-  while((path = skipelem(path, name)) != 0){
-8010239b:	e9 96 00 00 00       	jmp    80102436 <namex+0xdb>
-    ilock(ip);
-801023a0:	8b 45 f4             	mov    -0xc(%ebp),%eax
-801023a3:	89 04 24             	mov    %eax,(%esp)
-801023a6:	e8 25 f5 ff ff       	call   801018d0 <ilock>
-    if(ip->type != T_DIR){
-801023ab:	8b 45 f4             	mov    -0xc(%ebp),%eax
-801023ae:	0f b7 40 10          	movzwl 0x10(%eax),%eax
-801023b2:	66 83 f8 01          	cmp    $0x1,%ax
-801023b6:	74 15                	je     801023cd <namex+0x72>
-      iunlockput(ip);
-801023b8:	8b 45 f4             	mov    -0xc(%ebp),%eax
-801023bb:	89 04 24             	mov    %eax,(%esp)
-801023be:	e8 91 f7 ff ff       	call   80101b54 <iunlockput>
-      return 0;
-801023c3:	b8 00 00 00 00       	mov    $0x0,%eax
-801023c8:	e9 a3 00 00 00       	jmp    80102470 <namex+0x115>
-    }
-    if(nameiparent && *path == '\0'){
-801023cd:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
-801023d1:	74 1d                	je     801023f0 <namex+0x95>
-801023d3:	8b 45 08             	mov    0x8(%ebp),%eax
-801023d6:	0f b6 00             	movzbl (%eax),%eax
-801023d9:	84 c0                	test   %al,%al
-801023db:	75 13                	jne    801023f0 <namex+0x95>
-      // Stop one level early.
-      iunlock(ip);
-801023dd:	8b 45 f4             	mov    -0xc(%ebp),%eax
-801023e0:	89 04 24             	mov    %eax,(%esp)
-801023e3:	e8 36 f6 ff ff       	call   80101a1e <iunlock>
-      return ip;
-801023e8:	8b 45 f4             	mov    -0xc(%ebp),%eax
-801023eb:	e9 80 00 00 00       	jmp    80102470 <namex+0x115>
-    }
-    if((next = dirlookup(ip, name, 0)) == 0){
-801023f0:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
-801023f7:	00 
-801023f8:	8b 45 10             	mov    0x10(%ebp),%eax
-801023fb:	89 44 24 04          	mov    %eax,0x4(%esp)
-801023ff:	8b 45 f4             	mov    -0xc(%ebp),%eax
-80102402:	89 04 24             	mov    %eax,(%esp)
-80102405:	e8 df fc ff ff       	call   801020e9 <dirlookup>
-8010240a:	89 45 f0             	mov    %eax,-0x10(%ebp)
-8010240d:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
-80102411:	75 12                	jne    80102425 <namex+0xca>
-      iunlockput(ip);
-80102413:	8b 45 f4             	mov    -0xc(%ebp),%eax
-80102416:	89 04 24             	mov    %eax,(%esp)
-80102419:	e8 36 f7 ff ff       	call   80101b54 <iunlockput>
-      return 0;
-8010241e:	b8 00 00 00 00       	mov    $0x0,%eax
-80102423:	eb 4b                	jmp    80102470 <namex+0x115>
-    }
-    iunlockput(ip);
-80102425:	8b 45 f4             	mov    -0xc(%ebp),%eax
-80102428:	89 04 24             	mov    %eax,(%esp)
-8010242b:	e8 24 f7 ff ff       	call   80101b54 <iunlockput>
-    ip = next;
-80102430:	8b 45 f0             	mov    -0x10(%ebp),%eax
-80102433:	89 45 f4             	mov    %eax,-0xc(%ebp)
-  if(*path == '/')
-    ip = iget(ROOTDEV, ROOTINO);
-  else
-    ip = idup(proc->cwd);
-
-  while((path = skipelem(path, name)) != 0){
-80102436:	8b 45 10             	mov    0x10(%ebp),%eax
-80102439:	89 44 24 04          	mov    %eax,0x4(%esp)
-8010243d:	8b 45 08             	mov    0x8(%ebp),%eax
-80102440:	89 04 24             	mov    %eax,(%esp)
-80102443:	e8 61 fe ff ff       	call   801022a9 <skipelem>
-80102448:	89 45 08             	mov    %eax,0x8(%ebp)
-8010244b:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
-8010244f:	0f 85 4b ff ff ff    	jne    801023a0 <namex+0x45>
-      return 0;
-    }
-    iunlockput(ip);
-    ip = next;
-  }
-  if(nameiparent){
-80102455:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
-80102459:	74 12                	je     8010246d <namex+0x112>
-    iput(ip);
-8010245b:	8b 45 f4             	mov    -0xc(%ebp),%eax
-8010245e:	89 04 24             	mov    %eax,(%esp)
-80102461:	e8 1d f6 ff ff       	call   80101a83 <iput>
-    return 0;
-80102466:	b8 00 00 00 00       	mov    $0x0,%eax
-8010246b:	eb 03                	jmp    80102470 <namex+0x115>
-  }
-  return ip;
-8010246d:	8b 45 f4             	mov    -0xc(%ebp),%eax
-}
-80102470:	c9                   	leave  
-80102471:	c3                   	ret    
-
-80102472 <namei>:
-
-struct inode*
-namei(char *path)
-{
-80102472:	55                   	push   %ebp
-80102473:	89 e5                	mov    %esp,%ebp
-80102475:	83 ec 28             	sub    $0x28,%esp
-  char name[DIRSIZ];
-  return namex(path, 0, name);
-80102478:	8d 45 ea             	lea    -0x16(%ebp),%eax
-8010247b:	89 44 24 08          	mov    %eax,0x8(%esp)
-8010247f:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
-80102486:	00 
-80102487:	8b 45 08             	mov    0x8(%ebp),%eax
-8010248a:	89 04 24             	mov    %eax,(%esp)
-8010248d:	e8 c9 fe ff ff       	call   8010235b <namex>
-}
-80102492:	c9                   	leave  
-80102493:	c3                   	ret    
-
-80102494 <nameiparent>:
-
-struct inode*
-nameiparent(char *path, char *name)
-{
-80102494:	55                   	push   %ebp
-80102495:	89 e5                	mov    %esp,%ebp
-80102497:	83 ec 18             	sub    $0x18,%esp
-  return namex(path, 1, name);
-8010249a:	8b 45 0c             	mov    0xc(%ebp),%eax
-8010249d:	89 44 24 08          	mov    %eax,0x8(%esp)
-801024a1:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
-801024a8:	00 
-801024a9:	8b 45 08             	mov    0x8(%ebp),%eax
-801024ac:	89 04 24             	mov    %eax,(%esp)
-801024af:	e8 a7 fe ff ff       	call   8010235b <namex>
-}
-801024b4:	c9                   	leave  
-801024b5:	c3                   	ret    
-	...
-
-801024b8 <inb>:
-// Routines to let C code use special x86 instructions.
-
-static inline uchar
-inb(ushort port)
-{
-801024b8:	55                   	push   %ebp
-801024b9:	89 e5                	mov    %esp,%ebp
-801024bb:	53                   	push   %ebx
-801024bc:	83 ec 14             	sub    $0x14,%esp
-801024bf:	8b 45 08             	mov    0x8(%ebp),%eax
-801024c2:	66 89 45 e8          	mov    %ax,-0x18(%ebp)
-  uchar data;
-
-  asm volatile("in %1,%0" : "=a" (data) : "d" (port));
-801024c6:	0f b7 55 e8          	movzwl -0x18(%ebp),%edx
-801024ca:	66 89 55 ea          	mov    %dx,-0x16(%ebp)
-801024ce:	0f b7 55 ea          	movzwl -0x16(%ebp),%edx
-801024d2:	ec                   	in     (%dx),%al
-801024d3:	89 c3                	mov    %eax,%ebx
-801024d5:	88 5d fb             	mov    %bl,-0x5(%ebp)
-  return data;
-801024d8:	0f b6 45 fb          	movzbl -0x5(%ebp),%eax
-}
-801024dc:	83 c4 14             	add    $0x14,%esp
-801024df:	5b                   	pop    %ebx
-801024e0:	5d                   	pop    %ebp
-801024e1:	c3                   	ret    
-
-801024e2 <insl>:
-
-static inline void
-insl(int port, void *addr, int cnt)
-{
-801024e2:	55                   	push   %ebp
-801024e3:	89 e5                	mov    %esp,%ebp
-801024e5:	57                   	push   %edi
-801024e6:	53                   	push   %ebx
-  asm volatile("cld; rep insl" :
-801024e7:	8b 55 08             	mov    0x8(%ebp),%edx
-801024ea:	8b 4d 0c             	mov    0xc(%ebp),%ecx
-801024ed:	8b 45 10             	mov    0x10(%ebp),%eax
-801024f0:	89 cb                	mov    %ecx,%ebx
-801024f2:	89 df                	mov    %ebx,%edi
-801024f4:	89 c1                	mov    %eax,%ecx
-801024f6:	fc                   	cld    
-801024f7:	f3 6d                	rep insl (%dx),%es:(%edi)
-801024f9:	89 c8                	mov    %ecx,%eax
-801024fb:	89 fb                	mov    %edi,%ebx
-801024fd:	89 5d 0c             	mov    %ebx,0xc(%ebp)
-80102500:	89 45 10             	mov    %eax,0x10(%ebp)
-               "=D" (addr), "=c" (cnt) :
-               "d" (port), "0" (addr), "1" (cnt) :
-               "memory", "cc");
-}
-80102503:	5b                   	pop    %ebx
-80102504:	5f                   	pop    %edi
-80102505:	5d                   	pop    %ebp
-80102506:	c3                   	ret    
-
-80102507 <outb>:
-
-static inline void
-outb(ushort port, uchar data)
-{
-80102507:	55                   	push   %ebp
-80102508:	89 e5                	mov    %esp,%ebp
-8010250a:	83 ec 08             	sub    $0x8,%esp
-8010250d:	8b 55 08             	mov    0x8(%ebp),%edx
-80102510:	8b 45 0c             	mov    0xc(%ebp),%eax
-80102513:	66 89 55 fc          	mov    %dx,-0x4(%ebp)
-80102517:	88 45 f8             	mov    %al,-0x8(%ebp)
-  asm volatile("out %0,%1" : : "a" (data), "d" (port));
-8010251a:	0f b6 45 f8          	movzbl -0x8(%ebp),%eax
-8010251e:	0f b7 55 fc          	movzwl -0x4(%ebp),%edx
-80102522:	ee                   	out    %al,(%dx)
-}
-80102523:	c9                   	leave  
-80102524:	c3                   	ret    
-
-80102525 <outsl>:
-  asm volatile("out %0,%1" : : "a" (data), "d" (port));
-}
-
-static inline void
-outsl(int port, const void *addr, int cnt)
-{
-80102525:	55                   	push   %ebp
-80102526:	89 e5                	mov    %esp,%ebp
-80102528:	56                   	push   %esi
-80102529:	53                   	push   %ebx
-  asm volatile("cld; rep outsl" :
-8010252a:	8b 55 08             	mov    0x8(%ebp),%edx
-8010252d:	8b 4d 0c             	mov    0xc(%ebp),%ecx
-80102530:	8b 45 10             	mov    0x10(%ebp),%eax
-80102533:	89 cb                	mov    %ecx,%ebx
-80102535:	89 de                	mov    %ebx,%esi
-80102537:	89 c1                	mov    %eax,%ecx
-80102539:	fc                   	cld    
-8010253a:	f3 6f                	rep outsl %ds:(%esi),(%dx)
-8010253c:	89 c8                	mov    %ecx,%eax
-8010253e:	89 f3                	mov    %esi,%ebx
-80102540:	89 5d 0c             	mov    %ebx,0xc(%ebp)
-80102543:	89 45 10             	mov    %eax,0x10(%ebp)
-               "=S" (addr), "=c" (cnt) :
-               "d" (port), "0" (addr), "1" (cnt) :
-               "cc");
-}
-80102546:	5b                   	pop    %ebx
-80102547:	5e                   	pop    %esi
-80102548:	5d                   	pop    %ebp
-80102549:	c3                   	ret    
-
-8010254a <idewait>:
-static void idestart(struct buf*);
-
-// Wait for IDE disk to become ready.
-static int
-idewait(int checkerr)
-{
-8010254a:	55                   	push   %ebp
-8010254b:	89 e5                	mov    %esp,%ebp
-8010254d:	83 ec 14             	sub    $0x14,%esp
-  int r;
-
-  while(((r = inb(0x1f7)) & (IDE_BSY|IDE_DRDY)) != IDE_DRDY) 
-80102550:	90                   	nop
-80102551:	c7 04 24 f7 01 00 00 	movl   $0x1f7,(%esp)
-80102558:	e8 5b ff ff ff       	call   801024b8 <inb>
-8010255d:	0f b6 c0             	movzbl %al,%eax
-80102560:	89 45 fc             	mov    %eax,-0x4(%ebp)
-80102563:	8b 45 fc             	mov    -0x4(%ebp),%eax
-80102566:	25 c0 00 00 00       	and    $0xc0,%eax
-8010256b:	83 f8 40             	cmp    $0x40,%eax
-8010256e:	75 e1                	jne    80102551 <idewait+0x7>
-    ;
-  if(checkerr && (r & (IDE_DF|IDE_ERR)) != 0)
-80102570:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
-80102574:	74 11                	je     80102587 <idewait+0x3d>
-80102576:	8b 45 fc             	mov    -0x4(%ebp),%eax
-80102579:	83 e0 21             	and    $0x21,%eax
-8010257c:	85 c0                	test   %eax,%eax
-8010257e:	74 07                	je     80102587 <idewait+0x3d>
-    return -1;
-80102580:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
-80102585:	eb 05                	jmp    8010258c <idewait+0x42>
-  return 0;
-80102587:	b8 00 00 00 00       	mov    $0x0,%eax
-}
-8010258c:	c9                   	leave  
-8010258d:	c3                   	ret    
-
-8010258e <ideinit>:
-
-void
-ideinit(void)
-{
-8010258e:	55                   	push   %ebp
-8010258f:	89 e5                	mov    %esp,%ebp
-80102591:	83 ec 28             	sub    $0x28,%esp
-  int i;
-
-  initlock(&idelock, "ide");
-80102594:	c7 44 24 04 f0 92 10 	movl   $0x801092f0,0x4(%esp)
-8010259b:	80 
-8010259c:	c7 04 24 20 c6 10 80 	movl   $0x8010c620,(%esp)
-801025a3:	e8 5e 2e 00 00       	call   80105406 <initlock>
-  picenable(IRQ_IDE);
-801025a8:	c7 04 24 0e 00 00 00 	movl   $0xe,(%esp)
-801025af:	e8 c1 18 00 00       	call   80103e75 <picenable>
-  ioapicenable(IRQ_IDE, ncpu - 1);
-801025b4:	a1 60 39 11 80       	mov    0x80113960,%eax
-801025b9:	83 e8 01             	sub    $0x1,%eax
-801025bc:	89 44 24 04          	mov    %eax,0x4(%esp)
-801025c0:	c7 04 24 0e 00 00 00 	movl   $0xe,(%esp)
-801025c7:	e8 12 04 00 00       	call   801029de <ioapicenable>
-  idewait(0);
-801025cc:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
-801025d3:	e8 72 ff ff ff       	call   8010254a <idewait>
-  
-  // Check if disk 1 is present
-  outb(0x1f6, 0xe0 | (1<<4));
-801025d8:	c7 44 24 04 f0 00 00 	movl   $0xf0,0x4(%esp)
-801025df:	00 
-801025e0:	c7 04 24 f6 01 00 00 	movl   $0x1f6,(%esp)
-801025e7:	e8 1b ff ff ff       	call   80102507 <outb>
-  for(i=0; i<1000; i++){
-801025ec:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
-801025f3:	eb 20                	jmp    80102615 <ideinit+0x87>
-    if(inb(0x1f7) != 0){
-801025f5:	c7 04 24 f7 01 00 00 	movl   $0x1f7,(%esp)
-801025fc:	e8 b7 fe ff ff       	call   801024b8 <inb>
-80102601:	84 c0                	test   %al,%al
-80102603:	74 0c                	je     80102611 <ideinit+0x83>
-      havedisk1 = 1;
-80102605:	c7 05 58 c6 10 80 01 	movl   $0x1,0x8010c658
-8010260c:	00 00 00 
-      break;
-8010260f:	eb 0d                	jmp    8010261e <ideinit+0x90>
-  ioapicenable(IRQ_IDE, ncpu - 1);
-  idewait(0);
-  
-  // Check if disk 1 is present
-  outb(0x1f6, 0xe0 | (1<<4));
-  for(i=0; i<1000; i++){
-80102611:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
-80102615:	81 7d f4 e7 03 00 00 	cmpl   $0x3e7,-0xc(%ebp)
-8010261c:	7e d7                	jle    801025f5 <ideinit+0x67>
-      break;
-    }
-  }
-  
-  // Switch back to disk 0.
-  outb(0x1f6, 0xe0 | (0<<4));
-8010261e:	c7 44 24 04 e0 00 00 	movl   $0xe0,0x4(%esp)
-80102625:	00 
-80102626:	c7 04 24 f6 01 00 00 	movl   $0x1f6,(%esp)
-8010262d:	e8 d5 fe ff ff       	call   80102507 <outb>
-}
-80102632:	c9                   	leave  
-80102633:	c3                   	ret    
-
-80102634 <idestart>:
-
-// Start the request for b.  Caller must hold idelock.
-static void
-idestart(struct buf *b)
-{
-80102634:	55                   	push   %ebp
-80102635:	89 e5                	mov    %esp,%ebp
-80102637:	83 ec 18             	sub    $0x18,%esp
-  if(b == 0)
-8010263a:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
-8010263e:	75 0c                	jne    8010264c <idestart+0x18>
-    panic("idestart");
-80102640:	c7 04 24 f4 92 10 80 	movl   $0x801092f4,(%esp)
-80102647:	e8 f1 de ff ff       	call   8010053d <panic>
-
-  idewait(0);
-8010264c:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
-80102653:	e8 f2 fe ff ff       	call   8010254a <idewait>
-  outb(0x3f6, 0);  // generate interrupt
-80102658:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
-8010265f:	00 
-80102660:	c7 04 24 f6 03 00 00 	movl   $0x3f6,(%esp)
-80102667:	e8 9b fe ff ff       	call   80102507 <outb>
-  outb(0x1f2, 1);  // number of sectors
-8010266c:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
-80102673:	00 
-80102674:	c7 04 24 f2 01 00 00 	movl   $0x1f2,(%esp)
-8010267b:	e8 87 fe ff ff       	call   80102507 <outb>
-  outb(0x1f3, b->sector & 0xff);
-80102680:	8b 45 08             	mov    0x8(%ebp),%eax
-80102683:	8b 40 08             	mov    0x8(%eax),%eax
-80102686:	0f b6 c0             	movzbl %al,%eax
-80102689:	89 44 24 04          	mov    %eax,0x4(%esp)
-8010268d:	c7 04 24 f3 01 00 00 	movl   $0x1f3,(%esp)
-80102694:	e8 6e fe ff ff       	call   80102507 <outb>
-  outb(0x1f4, (b->sector >> 8) & 0xff);
-80102699:	8b 45 08             	mov    0x8(%ebp),%eax
-8010269c:	8b 40 08             	mov    0x8(%eax),%eax
-8010269f:	c1 e8 08             	shr    $0x8,%eax
-801026a2:	0f b6 c0             	movzbl %al,%eax
-801026a5:	89 44 24 04          	mov    %eax,0x4(%esp)
-801026a9:	c7 04 24 f4 01 00 00 	movl   $0x1f4,(%esp)
-801026b0:	e8 52 fe ff ff       	call   80102507 <outb>
-  outb(0x1f5, (b->sector >> 16) & 0xff);
-801026b5:	8b 45 08             	mov    0x8(%ebp),%eax
-801026b8:	8b 40 08             	mov    0x8(%eax),%eax
-801026bb:	c1 e8 10             	shr    $0x10,%eax
-801026be:	0f b6 c0             	movzbl %al,%eax
-801026c1:	89 44 24 04          	mov    %eax,0x4(%esp)
-801026c5:	c7 04 24 f5 01 00 00 	movl   $0x1f5,(%esp)
-801026cc:	e8 36 fe ff ff       	call   80102507 <outb>
-  outb(0x1f6, 0xe0 | ((b->dev&1)<<4) | ((b->sector>>24)&0x0f));
-801026d1:	8b 45 08             	mov    0x8(%ebp),%eax
-801026d4:	8b 40 04             	mov    0x4(%eax),%eax
-801026d7:	83 e0 01             	and    $0x1,%eax
-801026da:	89 c2                	mov    %eax,%edx
-801026dc:	c1 e2 04             	shl    $0x4,%edx
-801026df:	8b 45 08             	mov    0x8(%ebp),%eax
-801026e2:	8b 40 08             	mov    0x8(%eax),%eax
-801026e5:	c1 e8 18             	shr    $0x18,%eax
-801026e8:	83 e0 0f             	and    $0xf,%eax
-801026eb:	09 d0                	or     %edx,%eax
-801026ed:	83 c8 e0             	or     $0xffffffe0,%eax
-801026f0:	0f b6 c0             	movzbl %al,%eax
-801026f3:	89 44 24 04          	mov    %eax,0x4(%esp)
-801026f7:	c7 04 24 f6 01 00 00 	movl   $0x1f6,(%esp)
-801026fe:	e8 04 fe ff ff       	call   80102507 <outb>
-  if(b->flags & B_DIRTY){
-80102703:	8b 45 08             	mov    0x8(%ebp),%eax
-80102706:	8b 00                	mov    (%eax),%eax
-80102708:	83 e0 04             	and    $0x4,%eax
-8010270b:	85 c0                	test   %eax,%eax
-8010270d:	74 34                	je     80102743 <idestart+0x10f>
-    outb(0x1f7, IDE_CMD_WRITE);
-8010270f:	c7 44 24 04 30 00 00 	movl   $0x30,0x4(%esp)
-80102716:	00 
-80102717:	c7 04 24 f7 01 00 00 	movl   $0x1f7,(%esp)
-8010271e:	e8 e4 fd ff ff       	call   80102507 <outb>
-    outsl(0x1f0, b->data, 512/4);
-80102723:	8b 45 08             	mov    0x8(%ebp),%eax
-80102726:	83 c0 18             	add    $0x18,%eax
-80102729:	c7 44 24 08 80 00 00 	movl   $0x80,0x8(%esp)
-80102730:	00 
-80102731:	89 44 24 04          	mov    %eax,0x4(%esp)
-80102735:	c7 04 24 f0 01 00 00 	movl   $0x1f0,(%esp)
-8010273c:	e8 e4 fd ff ff       	call   80102525 <outsl>
-80102741:	eb 14                	jmp    80102757 <idestart+0x123>
-  } else {
-    outb(0x1f7, IDE_CMD_READ);
-80102743:	c7 44 24 04 20 00 00 	movl   $0x20,0x4(%esp)
-8010274a:	00 
-8010274b:	c7 04 24 f7 01 00 00 	movl   $0x1f7,(%esp)
-80102752:	e8 b0 fd ff ff       	call   80102507 <outb>
-  }
-}
-80102757:	c9                   	leave  
-80102758:	c3                   	ret    
-
-80102759 <ideintr>:
-
-// Interrupt handler.
-void
-ideintr(void)
-{
-80102759:	55                   	push   %ebp
-8010275a:	89 e5                	mov    %esp,%ebp
-8010275c:	83 ec 28             	sub    $0x28,%esp
-  struct buf *b;
-
-  // First queued buffer is the active request.
-  acquire(&idelock);
-8010275f:	c7 04 24 20 c6 10 80 	movl   $0x8010c620,(%esp)
-80102766:	e8 bc 2c 00 00       	call   80105427 <acquire>
-  if((b = idequeue) == 0){
-8010276b:	a1 54 c6 10 80       	mov    0x8010c654,%eax
-80102770:	89 45 f4             	mov    %eax,-0xc(%ebp)
-80102773:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
-80102777:	75 11                	jne    8010278a <ideintr+0x31>
-    release(&idelock);
-80102779:	c7 04 24 20 c6 10 80 	movl   $0x8010c620,(%esp)
-80102780:	e8 04 2d 00 00       	call   80105489 <release>
-    // cprintf("spurious IDE interrupt\n");
-    return;
-80102785:	e9 90 00 00 00       	jmp    8010281a <ideintr+0xc1>
-  }
-  idequeue = b->qnext;
-8010278a:	8b 45 f4             	mov    -0xc(%ebp),%eax
-8010278d:	8b 40 14             	mov    0x14(%eax),%eax
-80102790:	a3 54 c6 10 80       	mov    %eax,0x8010c654
-
-  // Read data if needed.
-  if(!(b->flags & B_DIRTY) && idewait(1) >= 0)
-80102795:	8b 45 f4             	mov    -0xc(%ebp),%eax
-80102798:	8b 00                	mov    (%eax),%eax
-8010279a:	83 e0 04             	and    $0x4,%eax
-8010279d:	85 c0                	test   %eax,%eax
-8010279f:	75 2e                	jne    801027cf <ideintr+0x76>
-801027a1:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
-801027a8:	e8 9d fd ff ff       	call   8010254a <idewait>
-801027ad:	85 c0                	test   %eax,%eax
-801027af:	78 1e                	js     801027cf <ideintr+0x76>
-    insl(0x1f0, b->data, 512/4);
-801027b1:	8b 45 f4             	mov    -0xc(%ebp),%eax
-801027b4:	83 c0 18             	add    $0x18,%eax
-801027b7:	c7 44 24 08 80 00 00 	movl   $0x80,0x8(%esp)
-801027be:	00 
-801027bf:	89 44 24 04          	mov    %eax,0x4(%esp)
-801027c3:	c7 04 24 f0 01 00 00 	movl   $0x1f0,(%esp)
-801027ca:	e8 13 fd ff ff       	call   801024e2 <insl>
-  
-  // Wake process waiting for this buf.
-  b->flags |= B_VALID;
-801027cf:	8b 45 f4             	mov    -0xc(%ebp),%eax
-801027d2:	8b 00                	mov    (%eax),%eax
-801027d4:	89 c2                	mov    %eax,%edx
-801027d6:	83 ca 02             	or     $0x2,%edx
-801027d9:	8b 45 f4             	mov    -0xc(%ebp),%eax
-801027dc:	89 10                	mov    %edx,(%eax)
-  b->flags &= ~B_DIRTY;
-801027de:	8b 45 f4             	mov    -0xc(%ebp),%eax
-801027e1:	8b 00                	mov    (%eax),%eax
-801027e3:	89 c2                	mov    %eax,%edx
-801027e5:	83 e2 fb             	and    $0xfffffffb,%edx
-801027e8:	8b 45 f4             	mov    -0xc(%ebp),%eax
-801027eb:	89 10                	mov    %edx,(%eax)
-  wakeup(b);
-801027ed:	8b 45 f4             	mov    -0xc(%ebp),%eax
-801027f0:	89 04 24             	mov    %eax,(%esp)
-801027f3:	e8 25 2a 00 00       	call   8010521d <wakeup>
-  
-  // Start disk on next buf in queue.
-  if(idequeue != 0)
-801027f8:	a1 54 c6 10 80       	mov    0x8010c654,%eax
-801027fd:	85 c0                	test   %eax,%eax
-801027ff:	74 0d                	je     8010280e <ideintr+0xb5>
-    idestart(idequeue);
-80102801:	a1 54 c6 10 80       	mov    0x8010c654,%eax
-80102806:	89 04 24             	mov    %eax,(%esp)
-80102809:	e8 26 fe ff ff       	call   80102634 <idestart>
-
-  release(&idelock);
-8010280e:	c7 04 24 20 c6 10 80 	movl   $0x8010c620,(%esp)
-80102815:	e8 6f 2c 00 00       	call   80105489 <release>
-}
-8010281a:	c9                   	leave  
-8010281b:	c3                   	ret    
-
-8010281c <iderw>:
-// Sync buf with disk. 
-// If B_DIRTY is set, write buf to disk, clear B_DIRTY, set B_VALID.
-// Else if B_VALID is not set, read buf from disk, set B_VALID.
-void
-iderw(struct buf *b)
-{
-8010281c:	55                   	push   %ebp
-8010281d:	89 e5                	mov    %esp,%ebp
-8010281f:	83 ec 28             	sub    $0x28,%esp
-  struct buf **pp;
-
-  if(!(b->flags & B_BUSY))
-80102822:	8b 45 08             	mov    0x8(%ebp),%eax
-80102825:	8b 00                	mov    (%eax),%eax
-80102827:	83 e0 01             	and    $0x1,%eax
-8010282a:	85 c0                	test   %eax,%eax
-8010282c:	75 0c                	jne    8010283a <iderw+0x1e>
-    panic("iderw: buf not busy");
-8010282e:	c7 04 24 fd 92 10 80 	movl   $0x801092fd,(%esp)
-80102835:	e8 03 dd ff ff       	call   8010053d <panic>
-  if((b->flags & (B_VALID|B_DIRTY)) == B_VALID)
-8010283a:	8b 45 08             	mov    0x8(%ebp),%eax
-8010283d:	8b 00                	mov    (%eax),%eax
-8010283f:	83 e0 06             	and    $0x6,%eax
-80102842:	83 f8 02             	cmp    $0x2,%eax
-80102845:	75 0c                	jne    80102853 <iderw+0x37>
-    panic("iderw: nothing to do");
-80102847:	c7 04 24 11 93 10 80 	movl   $0x80109311,(%esp)
-8010284e:	e8 ea dc ff ff       	call   8010053d <panic>
-  if(b->dev != 0 && !havedisk1)
-80102853:	8b 45 08             	mov    0x8(%ebp),%eax
-80102856:	8b 40 04             	mov    0x4(%eax),%eax
-80102859:	85 c0                	test   %eax,%eax
-8010285b:	74 15                	je     80102872 <iderw+0x56>
-8010285d:	a1 58 c6 10 80       	mov    0x8010c658,%eax
-80102862:	85 c0                	test   %eax,%eax
-80102864:	75 0c                	jne    80102872 <iderw+0x56>
-    panic("iderw: ide disk 1 not present");
-80102866:	c7 04 24 26 93 10 80 	movl   $0x80109326,(%esp)
-8010286d:	e8 cb dc ff ff       	call   8010053d <panic>
-
-  acquire(&idelock);  //DOC:acquire-lock
-80102872:	c7 04 24 20 c6 10 80 	movl   $0x8010c620,(%esp)
-80102879:	e8 a9 2b 00 00       	call   80105427 <acquire>
-
-  // Append b to idequeue.
-  b->qnext = 0;
-8010287e:	8b 45 08             	mov    0x8(%ebp),%eax
-80102881:	c7 40 14 00 00 00 00 	movl   $0x0,0x14(%eax)
-  for(pp=&idequeue; *pp; pp=&(*pp)->qnext)  //DOC:insert-queue
-80102888:	c7 45 f4 54 c6 10 80 	movl   $0x8010c654,-0xc(%ebp)
-8010288f:	eb 0b                	jmp    8010289c <iderw+0x80>
-80102891:	8b 45 f4             	mov    -0xc(%ebp),%eax
-80102894:	8b 00                	mov    (%eax),%eax
-80102896:	83 c0 14             	add    $0x14,%eax
-80102899:	89 45 f4             	mov    %eax,-0xc(%ebp)
-8010289c:	8b 45 f4             	mov    -0xc(%ebp),%eax
-8010289f:	8b 00                	mov    (%eax),%eax
-801028a1:	85 c0                	test   %eax,%eax
-801028a3:	75 ec                	jne    80102891 <iderw+0x75>
-    ;
-  *pp = b;
-801028a5:	8b 45 f4             	mov    -0xc(%ebp),%eax
-801028a8:	8b 55 08             	mov    0x8(%ebp),%edx
-801028ab:	89 10                	mov    %edx,(%eax)
-  
-  // Start disk if necessary.
-  if(idequeue == b)
-801028ad:	a1 54 c6 10 80       	mov    0x8010c654,%eax
-801028b2:	3b 45 08             	cmp    0x8(%ebp),%eax
-801028b5:	75 22                	jne    801028d9 <iderw+0xbd>
-    idestart(b);
-801028b7:	8b 45 08             	mov    0x8(%ebp),%eax
-801028ba:	89 04 24             	mov    %eax,(%esp)
-801028bd:	e8 72 fd ff ff       	call   80102634 <idestart>
-  
-  // Wait for request to finish.
-  while((b->flags & (B_VALID|B_DIRTY)) != B_VALID){
-801028c2:	eb 15                	jmp    801028d9 <iderw+0xbd>
-    sleep(b, &idelock);
-801028c4:	c7 44 24 04 20 c6 10 	movl   $0x8010c620,0x4(%esp)
-801028cb:	80 
-801028cc:	8b 45 08             	mov    0x8(%ebp),%eax
-801028cf:	89 04 24             	mov    %eax,(%esp)
-801028d2:	e8 6a 28 00 00       	call   80105141 <sleep>
-801028d7:	eb 01                	jmp    801028da <iderw+0xbe>
-  // Start disk if necessary.
-  if(idequeue == b)
-    idestart(b);
-  
-  // Wait for request to finish.
-  while((b->flags & (B_VALID|B_DIRTY)) != B_VALID){
-801028d9:	90                   	nop
-801028da:	8b 45 08             	mov    0x8(%ebp),%eax
-801028dd:	8b 00                	mov    (%eax),%eax
-801028df:	83 e0 06             	and    $0x6,%eax
-801028e2:	83 f8 02             	cmp    $0x2,%eax
-801028e5:	75 dd                	jne    801028c4 <iderw+0xa8>
-    sleep(b, &idelock);
-  }
-
-  release(&idelock);
-801028e7:	c7 04 24 20 c6 10 80 	movl   $0x8010c620,(%esp)
-801028ee:	e8 96 2b 00 00       	call   80105489 <release>
-}
-801028f3:	c9                   	leave  
-801028f4:	c3                   	ret    
-801028f5:	00 00                	add    %al,(%eax)
-	...
-
-801028f8 <ioapicread>:
-  uint data;
-};
-
-static uint
-ioapicread(int reg)
-{
-801028f8:	55                   	push   %ebp
-801028f9:	89 e5                	mov    %esp,%ebp
-  ioapic->reg = reg;
-801028fb:	a1 34 32 11 80       	mov    0x80113234,%eax
-80102900:	8b 55 08             	mov    0x8(%ebp),%edx
-80102903:	89 10                	mov    %edx,(%eax)
-  return ioapic->data;
-80102905:	a1 34 32 11 80       	mov    0x80113234,%eax
-8010290a:	8b 40 10             	mov    0x10(%eax),%eax
-}
-8010290d:	5d                   	pop    %ebp
-8010290e:	c3                   	ret    
-
-8010290f <ioapicwrite>:
-
-static void
-ioapicwrite(int reg, uint data)
-{
-8010290f:	55                   	push   %ebp
-80102910:	89 e5                	mov    %esp,%ebp
-  ioapic->reg = reg;
-80102912:	a1 34 32 11 80       	mov    0x80113234,%eax
-80102917:	8b 55 08             	mov    0x8(%ebp),%edx
-8010291a:	89 10                	mov    %edx,(%eax)
-  ioapic->data = data;
-8010291c:	a1 34 32 11 80       	mov    0x80113234,%eax
-80102921:	8b 55 0c             	mov    0xc(%ebp),%edx
-80102924:	89 50 10             	mov    %edx,0x10(%eax)
-}
-80102927:	5d                   	pop    %ebp
-80102928:	c3                   	ret    
-
-80102929 <ioapicinit>:
-
-void
-ioapicinit(void)
-{
-80102929:	55                   	push   %ebp
-8010292a:	89 e5                	mov    %esp,%ebp
-8010292c:	83 ec 28             	sub    $0x28,%esp
-  int i, id, maxintr;
-
-  if(!ismp)
-8010292f:	a1 64 33 11 80       	mov    0x80113364,%eax
-80102934:	85 c0                	test   %eax,%eax
-80102936:	0f 84 9f 00 00 00    	je     801029db <ioapicinit+0xb2>
-    return;
-
-  ioapic = (volatile struct ioapic*)IOAPIC;
-8010293c:	c7 05 34 32 11 80 00 	movl   $0xfec00000,0x80113234
-80102943:	00 c0 fe 
-  maxintr = (ioapicread(REG_VER) >> 16) & 0xFF;
-80102946:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
-8010294d:	e8 a6 ff ff ff       	call   801028f8 <ioapicread>
-80102952:	c1 e8 10             	shr    $0x10,%eax
-80102955:	25 ff 00 00 00       	and    $0xff,%eax
-8010295a:	89 45 f0             	mov    %eax,-0x10(%ebp)
-  id = ioapicread(REG_ID) >> 24;
-8010295d:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
-80102964:	e8 8f ff ff ff       	call   801028f8 <ioapicread>
-80102969:	c1 e8 18             	shr    $0x18,%eax
-8010296c:	89 45 ec             	mov    %eax,-0x14(%ebp)
-  if(id != ioapicid)
-8010296f:	0f b6 05 60 33 11 80 	movzbl 0x80113360,%eax
-80102976:	0f b6 c0             	movzbl %al,%eax
-80102979:	3b 45 ec             	cmp    -0x14(%ebp),%eax
-8010297c:	74 0c                	je     8010298a <ioapicinit+0x61>
-    cprintf("ioapicinit: id isn't equal to ioapicid; not a MP\n");
-8010297e:	c7 04 24 44 93 10 80 	movl   $0x80109344,(%esp)
-80102985:	e8 17 da ff ff       	call   801003a1 <cprintf>
-
-  // Mark all interrupts edge-triggered, active high, disabled,
-  // and not routed to any CPUs.
-  for(i = 0; i <= maxintr; i++){
-8010298a:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
-80102991:	eb 3e                	jmp    801029d1 <ioapicinit+0xa8>
-    ioapicwrite(REG_TABLE+2*i, INT_DISABLED | (T_IRQ0 + i));
-80102993:	8b 45 f4             	mov    -0xc(%ebp),%eax
-80102996:	83 c0 20             	add    $0x20,%eax
-80102999:	0d 00 00 01 00       	or     $0x10000,%eax
-8010299e:	8b 55 f4             	mov    -0xc(%ebp),%edx
-801029a1:	83 c2 08             	add    $0x8,%edx
-801029a4:	01 d2                	add    %edx,%edx
-801029a6:	89 44 24 04          	mov    %eax,0x4(%esp)
-801029aa:	89 14 24             	mov    %edx,(%esp)
-801029ad:	e8 5d ff ff ff       	call   8010290f <ioapicwrite>
-    ioapicwrite(REG_TABLE+2*i+1, 0);
-801029b2:	8b 45 f4             	mov    -0xc(%ebp),%eax
-801029b5:	83 c0 08             	add    $0x8,%eax
-801029b8:	01 c0                	add    %eax,%eax
-801029ba:	83 c0 01             	add    $0x1,%eax
-801029bd:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
-801029c4:	00 
-801029c5:	89 04 24             	mov    %eax,(%esp)
-801029c8:	e8 42 ff ff ff       	call   8010290f <ioapicwrite>
-  if(id != ioapicid)
-    cprintf("ioapicinit: id isn't equal to ioapicid; not a MP\n");
-
-  // Mark all interrupts edge-triggered, active high, disabled,
-  // and not routed to any CPUs.
-  for(i = 0; i <= maxintr; i++){
-801029cd:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
-801029d1:	8b 45 f4             	mov    -0xc(%ebp),%eax
-801029d4:	3b 45 f0             	cmp    -0x10(%ebp),%eax
-801029d7:	7e ba                	jle    80102993 <ioapicinit+0x6a>
-801029d9:	eb 01                	jmp    801029dc <ioapicinit+0xb3>
-ioapicinit(void)
-{
-  int i, id, maxintr;
-
-  if(!ismp)
-    return;
-801029db:	90                   	nop
-  // and not routed to any CPUs.
-  for(i = 0; i <= maxintr; i++){
-    ioapicwrite(REG_TABLE+2*i, INT_DISABLED | (T_IRQ0 + i));
-    ioapicwrite(REG_TABLE+2*i+1, 0);
-  }
-}
-801029dc:	c9                   	leave  
-801029dd:	c3                   	ret    
-
-801029de <ioapicenable>:
-
-void
-ioapicenable(int irq, int cpunum)
-{
-801029de:	55                   	push   %ebp
-801029df:	89 e5                	mov    %esp,%ebp
-801029e1:	83 ec 08             	sub    $0x8,%esp
-  if(!ismp)
-801029e4:	a1 64 33 11 80       	mov    0x80113364,%eax
-801029e9:	85 c0                	test   %eax,%eax
-801029eb:	74 39                	je     80102a26 <ioapicenable+0x48>
-    return;
-
-  // Mark interrupt edge-triggered, active high,
-  // enabled, and routed to the given cpunum,
-  // which happens to be that cpu's APIC ID.
-  ioapicwrite(REG_TABLE+2*irq, T_IRQ0 + irq);
-801029ed:	8b 45 08             	mov    0x8(%ebp),%eax
-801029f0:	83 c0 20             	add    $0x20,%eax
-801029f3:	8b 55 08             	mov    0x8(%ebp),%edx
-801029f6:	83 c2 08             	add    $0x8,%edx
-801029f9:	01 d2                	add    %edx,%edx
-801029fb:	89 44 24 04          	mov    %eax,0x4(%esp)
-801029ff:	89 14 24             	mov    %edx,(%esp)
-80102a02:	e8 08 ff ff ff       	call   8010290f <ioapicwrite>
-  ioapicwrite(REG_TABLE+2*irq+1, cpunum << 24);
-80102a07:	8b 45 0c             	mov    0xc(%ebp),%eax
-80102a0a:	c1 e0 18             	shl    $0x18,%eax
-80102a0d:	8b 55 08             	mov    0x8(%ebp),%edx
-80102a10:	83 c2 08             	add    $0x8,%edx
-80102a13:	01 d2                	add    %edx,%edx
-80102a15:	83 c2 01             	add    $0x1,%edx
-80102a18:	89 44 24 04          	mov    %eax,0x4(%esp)
-80102a1c:	89 14 24             	mov    %edx,(%esp)
-80102a1f:	e8 eb fe ff ff       	call   8010290f <ioapicwrite>
-80102a24:	eb 01                	jmp    80102a27 <ioapicenable+0x49>
-
-void
-ioapicenable(int irq, int cpunum)
-{
-  if(!ismp)
-    return;
-80102a26:	90                   	nop
-  // Mark interrupt edge-triggered, active high,
-  // enabled, and routed to the given cpunum,
-  // which happens to be that cpu's APIC ID.
-  ioapicwrite(REG_TABLE+2*irq, T_IRQ0 + irq);
-  ioapicwrite(REG_TABLE+2*irq+1, cpunum << 24);
-}
-80102a27:	c9                   	leave  
-80102a28:	c3                   	ret    
-80102a29:	00 00                	add    %al,(%eax)
-	...
-
-80102a2c <v2p>:
-#define KERNBASE 0x80000000         // First kernel virtual address
-#define KERNLINK (KERNBASE+EXTMEM)  // Address where kernel is linked
-
-#ifndef __ASSEMBLER__
-
-static inline uint v2p(void *a) { return ((uint) (a))  - KERNBASE; }
-80102a2c:	55                   	push   %ebp
-80102a2d:	89 e5                	mov    %esp,%ebp
-80102a2f:	8b 45 08             	mov    0x8(%ebp),%eax
-80102a32:	05 00 00 00 80       	add    $0x80000000,%eax
-80102a37:	5d                   	pop    %ebp
-80102a38:	c3                   	ret    
-
-80102a39 <kinit1>:
-// the pages mapped by entrypgdir on free list.
-// 2. main() calls kinit2() with the rest of the physical pages
-// after installing a full page table that maps them on all cores.
-void
-kinit1(void *vstart, void *vend)
-{
-80102a39:	55                   	push   %ebp
-80102a3a:	89 e5                	mov    %esp,%ebp
-80102a3c:	83 ec 18             	sub    $0x18,%esp
-  initlock(&kmem.lock, "kmem");
-80102a3f:	c7 44 24 04 76 93 10 	movl   $0x80109376,0x4(%esp)
-80102a46:	80 
-80102a47:	c7 04 24 40 32 11 80 	movl   $0x80113240,(%esp)
-80102a4e:	e8 b3 29 00 00       	call   80105406 <initlock>
-  kmem.use_lock = 0;
-80102a53:	c7 05 74 32 11 80 00 	movl   $0x0,0x80113274
-80102a5a:	00 00 00 
-  freerange(vstart, vend);
-80102a5d:	8b 45 0c             	mov    0xc(%ebp),%eax
-80102a60:	89 44 24 04          	mov    %eax,0x4(%esp)
-80102a64:	8b 45 08             	mov    0x8(%ebp),%eax
-80102a67:	89 04 24             	mov    %eax,(%esp)
-80102a6a:	e8 26 00 00 00       	call   80102a95 <freerange>
-}
-80102a6f:	c9                   	leave  
-80102a70:	c3                   	ret    
-
-80102a71 <kinit2>:
-
-void
-kinit2(void *vstart, void *vend)
-{
-80102a71:	55                   	push   %ebp
-80102a72:	89 e5                	mov    %esp,%ebp
-80102a74:	83 ec 18             	sub    $0x18,%esp
-  freerange(vstart, vend);
-80102a77:	8b 45 0c             	mov    0xc(%ebp),%eax
-80102a7a:	89 44 24 04          	mov    %eax,0x4(%esp)
-80102a7e:	8b 45 08             	mov    0x8(%ebp),%eax
-80102a81:	89 04 24             	mov    %eax,(%esp)
-80102a84:	e8 0c 00 00 00       	call   80102a95 <freerange>
-  kmem.use_lock = 1;
-80102a89:	c7 05 74 32 11 80 01 	movl   $0x1,0x80113274
-80102a90:	00 00 00 
-}
-80102a93:	c9                   	leave  
-80102a94:	c3                   	ret    
-
-80102a95 <freerange>:
-
-void
-freerange(void *vstart, void *vend)
-{
-80102a95:	55                   	push   %ebp
-80102a96:	89 e5                	mov    %esp,%ebp
-80102a98:	83 ec 28             	sub    $0x28,%esp
-  char *p;
-  p = (char*)PGROUNDUP((uint)vstart);
-80102a9b:	8b 45 08             	mov    0x8(%ebp),%eax
-80102a9e:	05 ff 0f 00 00       	add    $0xfff,%eax
-80102aa3:	25 00 f0 ff ff       	and    $0xfffff000,%eax
-80102aa8:	89 45 f4             	mov    %eax,-0xc(%ebp)
-  for(; p + PGSIZE <= (char*)vend; p += PGSIZE)
-80102aab:	eb 12                	jmp    80102abf <freerange+0x2a>
-    kfree(p);
-80102aad:	8b 45 f4             	mov    -0xc(%ebp),%eax
-80102ab0:	89 04 24             	mov    %eax,(%esp)
-80102ab3:	e8 16 00 00 00       	call   80102ace <kfree>
-void
-freerange(void *vstart, void *vend)
-{
-  char *p;
-  p = (char*)PGROUNDUP((uint)vstart);
-  for(; p + PGSIZE <= (char*)vend; p += PGSIZE)
-80102ab8:	81 45 f4 00 10 00 00 	addl   $0x1000,-0xc(%ebp)
-80102abf:	8b 45 f4             	mov    -0xc(%ebp),%eax
-80102ac2:	05 00 10 00 00       	add    $0x1000,%eax
-80102ac7:	3b 45 0c             	cmp    0xc(%ebp),%eax
-80102aca:	76 e1                	jbe    80102aad <freerange+0x18>
-    kfree(p);
-}
-80102acc:	c9                   	leave  
-80102acd:	c3                   	ret    
-
-80102ace <kfree>:
-// which normally should have been returned by a
-// call to kalloc().  (The exception is when
-// initializing the allocator; see kinit above.)
-void
-kfree(char *v)
-{
-80102ace:	55                   	push   %ebp
-80102acf:	89 e5                	mov    %esp,%ebp
-80102ad1:	83 ec 28             	sub    $0x28,%esp
-  struct run *r;
-
-  if((uint)v % PGSIZE || v < end || v2p(v) >= PHYSTOP)
-80102ad4:	8b 45 08             	mov    0x8(%ebp),%eax
-80102ad7:	25 ff 0f 00 00       	and    $0xfff,%eax
-80102adc:	85 c0                	test   %eax,%eax
-80102ade:	75 1b                	jne    80102afb <kfree+0x2d>
-80102ae0:	81 7d 08 5c 6a 11 80 	cmpl   $0x80116a5c,0x8(%ebp)
-80102ae7:	72 12                	jb     80102afb <kfree+0x2d>
-80102ae9:	8b 45 08             	mov    0x8(%ebp),%eax
-80102aec:	89 04 24             	mov    %eax,(%esp)
-80102aef:	e8 38 ff ff ff       	call   80102a2c <v2p>
-80102af4:	3d ff ff ff 0d       	cmp    $0xdffffff,%eax
-80102af9:	76 0c                	jbe    80102b07 <kfree+0x39>
-    panic("kfree");
-80102afb:	c7 04 24 7b 93 10 80 	movl   $0x8010937b,(%esp)
-80102b02:	e8 36 da ff ff       	call   8010053d <panic>
-
-  // Fill with junk to catch dangling refs.
-  memset(v, 1, PGSIZE);
-80102b07:	c7 44 24 08 00 10 00 	movl   $0x1000,0x8(%esp)
-80102b0e:	00 
-80102b0f:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
-80102b16:	00 
-80102b17:	8b 45 08             	mov    0x8(%ebp),%eax
-80102b1a:	89 04 24             	mov    %eax,(%esp)
-80102b1d:	e8 54 2b 00 00       	call   80105676 <memset>
-
-  if(kmem.use_lock)
-80102b22:	a1 74 32 11 80       	mov    0x80113274,%eax
-80102b27:	85 c0                	test   %eax,%eax
-80102b29:	74 0c                	je     80102b37 <kfree+0x69>
-    acquire(&kmem.lock);
-80102b2b:	c7 04 24 40 32 11 80 	movl   $0x80113240,(%esp)
-80102b32:	e8 f0 28 00 00       	call   80105427 <acquire>
-  r = (struct run*)v;
-80102b37:	8b 45 08             	mov    0x8(%ebp),%eax
-80102b3a:	89 45 f4             	mov    %eax,-0xc(%ebp)
-  r->next = kmem.freelist;
-80102b3d:	8b 15 78 32 11 80    	mov    0x80113278,%edx
-80102b43:	8b 45 f4             	mov    -0xc(%ebp),%eax
-80102b46:	89 10                	mov    %edx,(%eax)
-  kmem.freelist = r;
-80102b48:	8b 45 f4             	mov    -0xc(%ebp),%eax
-80102b4b:	a3 78 32 11 80       	mov    %eax,0x80113278
-  if(kmem.use_lock)
-80102b50:	a1 74 32 11 80       	mov    0x80113274,%eax
-80102b55:	85 c0                	test   %eax,%eax
-80102b57:	74 0c                	je     80102b65 <kfree+0x97>
-    release(&kmem.lock);
-80102b59:	c7 04 24 40 32 11 80 	movl   $0x80113240,(%esp)
-80102b60:	e8 24 29 00 00       	call   80105489 <release>
-}
-80102b65:	c9                   	leave  
-80102b66:	c3                   	ret    
-
-80102b67 <kalloc>:
-// Allocate one 4096-byte page of physical memory.
-// Returns a pointer that the kernel can use.
-// Returns 0 if the memory cannot be allocated.
-char*
-kalloc(void)
-{
-80102b67:	55                   	push   %ebp
-80102b68:	89 e5                	mov    %esp,%ebp
-80102b6a:	83 ec 28             	sub    $0x28,%esp
-  struct run *r;
-
-  if(kmem.use_lock)
-80102b6d:	a1 74 32 11 80       	mov    0x80113274,%eax
-80102b72:	85 c0                	test   %eax,%eax
-80102b74:	74 0c                	je     80102b82 <kalloc+0x1b>
-    acquire(&kmem.lock);
-80102b76:	c7 04 24 40 32 11 80 	movl   $0x80113240,(%esp)
-80102b7d:	e8 a5 28 00 00       	call   80105427 <acquire>
-  r = kmem.freelist;
-80102b82:	a1 78 32 11 80       	mov    0x80113278,%eax
-80102b87:	89 45 f4             	mov    %eax,-0xc(%ebp)
-  if(r)
-80102b8a:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
-80102b8e:	74 0a                	je     80102b9a <kalloc+0x33>
-    kmem.freelist = r->next;
-80102b90:	8b 45 f4             	mov    -0xc(%ebp),%eax
-80102b93:	8b 00                	mov    (%eax),%eax
-80102b95:	a3 78 32 11 80       	mov    %eax,0x80113278
-  if(kmem.use_lock)
-80102b9a:	a1 74 32 11 80       	mov    0x80113274,%eax
-80102b9f:	85 c0                	test   %eax,%eax
-80102ba1:	74 0c                	je     80102baf <kalloc+0x48>
-    release(&kmem.lock);
-80102ba3:	c7 04 24 40 32 11 80 	movl   $0x80113240,(%esp)
-80102baa:	e8 da 28 00 00       	call   80105489 <release>
-  return (char*)r;
-80102baf:	8b 45 f4             	mov    -0xc(%ebp),%eax
-}
-80102bb2:	c9                   	leave  
-80102bb3:	c3                   	ret    
-
-80102bb4 <inb>:
-// Routines to let C code use special x86 instructions.
-
-static inline uchar
-inb(ushort port)
-{
-80102bb4:	55                   	push   %ebp
-80102bb5:	89 e5                	mov    %esp,%ebp
-80102bb7:	53                   	push   %ebx
-80102bb8:	83 ec 14             	sub    $0x14,%esp
-80102bbb:	8b 45 08             	mov    0x8(%ebp),%eax
-80102bbe:	66 89 45 e8          	mov    %ax,-0x18(%ebp)
-  uchar data;
-
-  asm volatile("in %1,%0" : "=a" (data) : "d" (port));
-80102bc2:	0f b7 55 e8          	movzwl -0x18(%ebp),%edx
-80102bc6:	66 89 55 ea          	mov    %dx,-0x16(%ebp)
-80102bca:	0f b7 55 ea          	movzwl -0x16(%ebp),%edx
-80102bce:	ec                   	in     (%dx),%al
-80102bcf:	89 c3                	mov    %eax,%ebx
-80102bd1:	88 5d fb             	mov    %bl,-0x5(%ebp)
-  return data;
-80102bd4:	0f b6 45 fb          	movzbl -0x5(%ebp),%eax
-}
-80102bd8:	83 c4 14             	add    $0x14,%esp
-80102bdb:	5b                   	pop    %ebx
-80102bdc:	5d                   	pop    %ebp
-80102bdd:	c3                   	ret    
-
-80102bde <kbdgetc>:
-#include "defs.h"
-#include "kbd.h"
-
-int
-kbdgetc(void)
-{
-80102bde:	55                   	push   %ebp
-80102bdf:	89 e5                	mov    %esp,%ebp
-80102be1:	83 ec 14             	sub    $0x14,%esp
-  static uchar *charcode[4] = {
-    normalmap, shiftmap, ctlmap, ctlmap
-  };
-  uint st, data, c;
-
-  st = inb(KBSTATP);
-80102be4:	c7 04 24 64 00 00 00 	movl   $0x64,(%esp)
-80102beb:	e8 c4 ff ff ff       	call   80102bb4 <inb>
-80102bf0:	0f b6 c0             	movzbl %al,%eax
-80102bf3:	89 45 f4             	mov    %eax,-0xc(%ebp)
-  if((st & KBS_DIB) == 0)
-80102bf6:	8b 45 f4             	mov    -0xc(%ebp),%eax
-80102bf9:	83 e0 01             	and    $0x1,%eax
-80102bfc:	85 c0                	test   %eax,%eax
-80102bfe:	75 0a                	jne    80102c0a <kbdgetc+0x2c>
-    return -1;
-80102c00:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
-80102c05:	e9 23 01 00 00       	jmp    80102d2d <kbdgetc+0x14f>
-  data = inb(KBDATAP);
-80102c0a:	c7 04 24 60 00 00 00 	movl   $0x60,(%esp)
-80102c11:	e8 9e ff ff ff       	call   80102bb4 <inb>
-80102c16:	0f b6 c0             	movzbl %al,%eax
-80102c19:	89 45 fc             	mov    %eax,-0x4(%ebp)
-
-  if(data == 0xE0){
-80102c1c:	81 7d fc e0 00 00 00 	cmpl   $0xe0,-0x4(%ebp)
-80102c23:	75 17                	jne    80102c3c <kbdgetc+0x5e>
-    shift |= E0ESC;
-80102c25:	a1 5c c6 10 80       	mov    0x8010c65c,%eax
-80102c2a:	83 c8 40             	or     $0x40,%eax
-80102c2d:	a3 5c c6 10 80       	mov    %eax,0x8010c65c
-    return 0;
-80102c32:	b8 00 00 00 00       	mov    $0x0,%eax
-80102c37:	e9 f1 00 00 00       	jmp    80102d2d <kbdgetc+0x14f>
-  } else if(data & 0x80){
-80102c3c:	8b 45 fc             	mov    -0x4(%ebp),%eax
-80102c3f:	25 80 00 00 00       	and    $0x80,%eax
-80102c44:	85 c0                	test   %eax,%eax
-80102c46:	74 45                	je     80102c8d <kbdgetc+0xaf>
-    // Key released
-    data = (shift & E0ESC ? data : data & 0x7F);
-80102c48:	a1 5c c6 10 80       	mov    0x8010c65c,%eax
-80102c4d:	83 e0 40             	and    $0x40,%eax
-80102c50:	85 c0                	test   %eax,%eax
-80102c52:	75 08                	jne    80102c5c <kbdgetc+0x7e>
-80102c54:	8b 45 fc             	mov    -0x4(%ebp),%eax
-80102c57:	83 e0 7f             	and    $0x7f,%eax
-80102c5a:	eb 03                	jmp    80102c5f <kbdgetc+0x81>
-80102c5c:	8b 45 fc             	mov    -0x4(%ebp),%eax
-80102c5f:	89 45 fc             	mov    %eax,-0x4(%ebp)
-    shift &= ~(shiftcode[data] | E0ESC);
-80102c62:	8b 45 fc             	mov    -0x4(%ebp),%eax
-80102c65:	05 20 a0 10 80       	add    $0x8010a020,%eax
-80102c6a:	0f b6 00             	movzbl (%eax),%eax
-80102c6d:	83 c8 40             	or     $0x40,%eax
-80102c70:	0f b6 c0             	movzbl %al,%eax
-80102c73:	f7 d0                	not    %eax
-80102c75:	89 c2                	mov    %eax,%edx
-80102c77:	a1 5c c6 10 80       	mov    0x8010c65c,%eax
-80102c7c:	21 d0                	and    %edx,%eax
-80102c7e:	a3 5c c6 10 80       	mov    %eax,0x8010c65c
-    return 0;
-80102c83:	b8 00 00 00 00       	mov    $0x0,%eax
-80102c88:	e9 a0 00 00 00       	jmp    80102d2d <kbdgetc+0x14f>
-  } else if(shift & E0ESC){
-80102c8d:	a1 5c c6 10 80       	mov    0x8010c65c,%eax
-80102c92:	83 e0 40             	and    $0x40,%eax
-80102c95:	85 c0                	test   %eax,%eax
-80102c97:	74 14                	je     80102cad <kbdgetc+0xcf>
-    // Last character was an E0 escape; or with 0x80
-    data |= 0x80;
-80102c99:	81 4d fc 80 00 00 00 	orl    $0x80,-0x4(%ebp)
-    shift &= ~E0ESC;
-80102ca0:	a1 5c c6 10 80       	mov    0x8010c65c,%eax
-80102ca5:	83 e0 bf             	and    $0xffffffbf,%eax
-80102ca8:	a3 5c c6 10 80       	mov    %eax,0x8010c65c
-  }
-
-  shift |= shiftcode[data];
-80102cad:	8b 45 fc             	mov    -0x4(%ebp),%eax
-80102cb0:	05 20 a0 10 80       	add    $0x8010a020,%eax
-80102cb5:	0f b6 00             	movzbl (%eax),%eax
-80102cb8:	0f b6 d0             	movzbl %al,%edx
-80102cbb:	a1 5c c6 10 80       	mov    0x8010c65c,%eax
-80102cc0:	09 d0                	or     %edx,%eax
-80102cc2:	a3 5c c6 10 80       	mov    %eax,0x8010c65c
-  shift ^= togglecode[data];
-80102cc7:	8b 45 fc             	mov    -0x4(%ebp),%eax
-80102cca:	05 20 a1 10 80       	add    $0x8010a120,%eax
-80102ccf:	0f b6 00             	movzbl (%eax),%eax
-80102cd2:	0f b6 d0             	movzbl %al,%edx
-80102cd5:	a1 5c c6 10 80       	mov    0x8010c65c,%eax
-80102cda:	31 d0                	xor    %edx,%eax
-80102cdc:	a3 5c c6 10 80       	mov    %eax,0x8010c65c
-  c = charcode[shift & (CTL | SHIFT)][data];
-80102ce1:	a1 5c c6 10 80       	mov    0x8010c65c,%eax
-80102ce6:	83 e0 03             	and    $0x3,%eax
-80102ce9:	8b 04 85 20 a5 10 80 	mov    -0x7fef5ae0(,%eax,4),%eax
-80102cf0:	03 45 fc             	add    -0x4(%ebp),%eax
-80102cf3:	0f b6 00             	movzbl (%eax),%eax
-80102cf6:	0f b6 c0             	movzbl %al,%eax
-80102cf9:	89 45 f8             	mov    %eax,-0x8(%ebp)
-  if(shift & CAPSLOCK){
-80102cfc:	a1 5c c6 10 80       	mov    0x8010c65c,%eax
-80102d01:	83 e0 08             	and    $0x8,%eax
-80102d04:	85 c0                	test   %eax,%eax
-80102d06:	74 22                	je     80102d2a <kbdgetc+0x14c>
-    if('a' <= c && c <= 'z')
-80102d08:	83 7d f8 60          	cmpl   $0x60,-0x8(%ebp)
-80102d0c:	76 0c                	jbe    80102d1a <kbdgetc+0x13c>
-80102d0e:	83 7d f8 7a          	cmpl   $0x7a,-0x8(%ebp)
-80102d12:	77 06                	ja     80102d1a <kbdgetc+0x13c>
-      c += 'A' - 'a';
-80102d14:	83 6d f8 20          	subl   $0x20,-0x8(%ebp)
-80102d18:	eb 10                	jmp    80102d2a <kbdgetc+0x14c>
-    else if('A' <= c && c <= 'Z')
-80102d1a:	83 7d f8 40          	cmpl   $0x40,-0x8(%ebp)
-80102d1e:	76 0a                	jbe    80102d2a <kbdgetc+0x14c>
-80102d20:	83 7d f8 5a          	cmpl   $0x5a,-0x8(%ebp)
-80102d24:	77 04                	ja     80102d2a <kbdgetc+0x14c>
-      c += 'a' - 'A';
-80102d26:	83 45 f8 20          	addl   $0x20,-0x8(%ebp)
-  }
-  return c;
-80102d2a:	8b 45 f8             	mov    -0x8(%ebp),%eax
-}
-80102d2d:	c9                   	leave  
-80102d2e:	c3                   	ret    
-
-80102d2f <kbdintr>:
-
-void
-kbdintr(void)
-{
-80102d2f:	55                   	push   %ebp
-80102d30:	89 e5                	mov    %esp,%ebp
-80102d32:	83 ec 18             	sub    $0x18,%esp
-  consoleintr(kbdgetc);
-80102d35:	c7 04 24 de 2b 10 80 	movl   $0x80102bde,(%esp)
-80102d3c:	e8 6c da ff ff       	call   801007ad <consoleintr>
-}
-80102d41:	c9                   	leave  
-80102d42:	c3                   	ret    
-	...
-
-80102d44 <inb>:
-// Routines to let C code use special x86 instructions.
-
-static inline uchar
-inb(ushort port)
-{
-80102d44:	55                   	push   %ebp
-80102d45:	89 e5                	mov    %esp,%ebp
-80102d47:	53                   	push   %ebx
-80102d48:	83 ec 14             	sub    $0x14,%esp
-80102d4b:	8b 45 08             	mov    0x8(%ebp),%eax
-80102d4e:	66 89 45 e8          	mov    %ax,-0x18(%ebp)
-  uchar data;
-
-  asm volatile("in %1,%0" : "=a" (data) : "d" (port));
-80102d52:	0f b7 55 e8          	movzwl -0x18(%ebp),%edx
-80102d56:	66 89 55 ea          	mov    %dx,-0x16(%ebp)
-80102d5a:	0f b7 55 ea          	movzwl -0x16(%ebp),%edx
-80102d5e:	ec                   	in     (%dx),%al
-80102d5f:	89 c3                	mov    %eax,%ebx
-80102d61:	88 5d fb             	mov    %bl,-0x5(%ebp)
-  return data;
-80102d64:	0f b6 45 fb          	movzbl -0x5(%ebp),%eax
-}
-80102d68:	83 c4 14             	add    $0x14,%esp
-80102d6b:	5b                   	pop    %ebx
-80102d6c:	5d                   	pop    %ebp
-80102d6d:	c3                   	ret    
-
-80102d6e <outb>:
-               "memory", "cc");
-}
-
-static inline void
-outb(ushort port, uchar data)
-{
-80102d6e:	55                   	push   %ebp
-80102d6f:	89 e5                	mov    %esp,%ebp
-80102d71:	83 ec 08             	sub    $0x8,%esp
-80102d74:	8b 55 08             	mov    0x8(%ebp),%edx
-80102d77:	8b 45 0c             	mov    0xc(%ebp),%eax
-80102d7a:	66 89 55 fc          	mov    %dx,-0x4(%ebp)
-80102d7e:	88 45 f8             	mov    %al,-0x8(%ebp)
-  asm volatile("out %0,%1" : : "a" (data), "d" (port));
-80102d81:	0f b6 45 f8          	movzbl -0x8(%ebp),%eax
-80102d85:	0f b7 55 fc          	movzwl -0x4(%ebp),%edx
-80102d89:	ee                   	out    %al,(%dx)
-}
-80102d8a:	c9                   	leave  
-80102d8b:	c3                   	ret    
-
-80102d8c <readeflags>:
-  asm volatile("ltr %0" : : "r" (sel));
-}
-
-static inline uint
-readeflags(void)
-{
-80102d8c:	55                   	push   %ebp
-80102d8d:	89 e5                	mov    %esp,%ebp
-80102d8f:	53                   	push   %ebx
-80102d90:	83 ec 10             	sub    $0x10,%esp
-  uint eflags;
-  asm volatile("pushfl; popl %0" : "=r" (eflags));
-80102d93:	9c                   	pushf  
-80102d94:	5b                   	pop    %ebx
-80102d95:	89 5d f8             	mov    %ebx,-0x8(%ebp)
-  return eflags;
-80102d98:	8b 45 f8             	mov    -0x8(%ebp),%eax
-}
-80102d9b:	83 c4 10             	add    $0x10,%esp
-80102d9e:	5b                   	pop    %ebx
-80102d9f:	5d                   	pop    %ebp
-80102da0:	c3                   	ret    
-
-80102da1 <lapicw>:
-
-volatile uint *lapic;  // Initialized in mp.c
-
-static void
-lapicw(int index, int value)
-{
-80102da1:	55                   	push   %ebp
-80102da2:	89 e5                	mov    %esp,%ebp
-  lapic[index] = value;
-80102da4:	a1 7c 32 11 80       	mov    0x8011327c,%eax
-80102da9:	8b 55 08             	mov    0x8(%ebp),%edx
-80102dac:	c1 e2 02             	shl    $0x2,%edx
-80102daf:	01 c2                	add    %eax,%edx
-80102db1:	8b 45 0c             	mov    0xc(%ebp),%eax
-80102db4:	89 02                	mov    %eax,(%edx)
-  lapic[ID];  // wait for write to finish, by reading
-80102db6:	a1 7c 32 11 80       	mov    0x8011327c,%eax
-80102dbb:	83 c0 20             	add    $0x20,%eax
-80102dbe:	8b 00                	mov    (%eax),%eax
-}
-80102dc0:	5d                   	pop    %ebp
-80102dc1:	c3                   	ret    
-
-80102dc2 <lapicinit>:
-//PAGEBREAK!
-
-void
-lapicinit(void)
-{
-80102dc2:	55                   	push   %ebp
-80102dc3:	89 e5                	mov    %esp,%ebp
-80102dc5:	83 ec 08             	sub    $0x8,%esp
-  if(!lapic) 
-80102dc8:	a1 7c 32 11 80       	mov    0x8011327c,%eax
-80102dcd:	85 c0                	test   %eax,%eax
-80102dcf:	0f 84 47 01 00 00    	je     80102f1c <lapicinit+0x15a>
-    return;
-
-  // Enable local APIC; set spurious interrupt vector.
-  lapicw(SVR, ENABLE | (T_IRQ0 + IRQ_SPURIOUS));
-80102dd5:	c7 44 24 04 3f 01 00 	movl   $0x13f,0x4(%esp)
-80102ddc:	00 
-80102ddd:	c7 04 24 3c 00 00 00 	movl   $0x3c,(%esp)
-80102de4:	e8 b8 ff ff ff       	call   80102da1 <lapicw>
-
-  // The timer repeatedly counts down at bus frequency
-  // from lapic[TICR] and then issues an interrupt.  
-  // If xv6 cared more about precise timekeeping,
-  // TICR would be calibrated using an external time source.
-  lapicw(TDCR, X1);
-80102de9:	c7 44 24 04 0b 00 00 	movl   $0xb,0x4(%esp)
-80102df0:	00 
-80102df1:	c7 04 24 f8 00 00 00 	movl   $0xf8,(%esp)
-80102df8:	e8 a4 ff ff ff       	call   80102da1 <lapicw>
-  lapicw(TIMER, PERIODIC | (T_IRQ0 + IRQ_TIMER));
-80102dfd:	c7 44 24 04 20 00 02 	movl   $0x20020,0x4(%esp)
-80102e04:	00 
-80102e05:	c7 04 24 c8 00 00 00 	movl   $0xc8,(%esp)
-80102e0c:	e8 90 ff ff ff       	call   80102da1 <lapicw>
-  lapicw(TICR, 10000000); 
-80102e11:	c7 44 24 04 80 96 98 	movl   $0x989680,0x4(%esp)
-80102e18:	00 
-80102e19:	c7 04 24 e0 00 00 00 	movl   $0xe0,(%esp)
-80102e20:	e8 7c ff ff ff       	call   80102da1 <lapicw>
-
-  // Disable logical interrupt lines.
-  lapicw(LINT0, MASKED);
-80102e25:	c7 44 24 04 00 00 01 	movl   $0x10000,0x4(%esp)
-80102e2c:	00 
-80102e2d:	c7 04 24 d4 00 00 00 	movl   $0xd4,(%esp)
-80102e34:	e8 68 ff ff ff       	call   80102da1 <lapicw>
-  lapicw(LINT1, MASKED);
-80102e39:	c7 44 24 04 00 00 01 	movl   $0x10000,0x4(%esp)
-80102e40:	00 
-80102e41:	c7 04 24 d8 00 00 00 	movl   $0xd8,(%esp)
-80102e48:	e8 54 ff ff ff       	call   80102da1 <lapicw>
-
-  // Disable performance counter overflow interrupts
-  // on machines that provide that interrupt entry.
-  if(((lapic[VER]>>16) & 0xFF) >= 4)
-80102e4d:	a1 7c 32 11 80       	mov    0x8011327c,%eax
-80102e52:	83 c0 30             	add    $0x30,%eax
-80102e55:	8b 00                	mov    (%eax),%eax
-80102e57:	c1 e8 10             	shr    $0x10,%eax
-80102e5a:	25 ff 00 00 00       	and    $0xff,%eax
-80102e5f:	83 f8 03             	cmp    $0x3,%eax
-80102e62:	76 14                	jbe    80102e78 <lapicinit+0xb6>
-    lapicw(PCINT, MASKED);
-80102e64:	c7 44 24 04 00 00 01 	movl   $0x10000,0x4(%esp)
-80102e6b:	00 
-80102e6c:	c7 04 24 d0 00 00 00 	movl   $0xd0,(%esp)
-80102e73:	e8 29 ff ff ff       	call   80102da1 <lapicw>
-
-  // Map error interrupt to IRQ_ERROR.
-  lapicw(ERROR, T_IRQ0 + IRQ_ERROR);
-80102e78:	c7 44 24 04 33 00 00 	movl   $0x33,0x4(%esp)
-80102e7f:	00 
-80102e80:	c7 04 24 dc 00 00 00 	movl   $0xdc,(%esp)
-80102e87:	e8 15 ff ff ff       	call   80102da1 <lapicw>
-
-  // Clear error status register (requires back-to-back writes).
-  lapicw(ESR, 0);
-80102e8c:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
-80102e93:	00 
-80102e94:	c7 04 24 a0 00 00 00 	movl   $0xa0,(%esp)
-80102e9b:	e8 01 ff ff ff       	call   80102da1 <lapicw>
-  lapicw(ESR, 0);
-80102ea0:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
-80102ea7:	00 
-80102ea8:	c7 04 24 a0 00 00 00 	movl   $0xa0,(%esp)
-80102eaf:	e8 ed fe ff ff       	call   80102da1 <lapicw>
-
-  // Ack any outstanding interrupts.
-  lapicw(EOI, 0);
-80102eb4:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
-80102ebb:	00 
-80102ebc:	c7 04 24 2c 00 00 00 	movl   $0x2c,(%esp)
-80102ec3:	e8 d9 fe ff ff       	call   80102da1 <lapicw>
-
-  // Send an Init Level De-Assert to synchronise arbitration ID's.
-  lapicw(ICRHI, 0);
-80102ec8:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
-80102ecf:	00 
-80102ed0:	c7 04 24 c4 00 00 00 	movl   $0xc4,(%esp)
-80102ed7:	e8 c5 fe ff ff       	call   80102da1 <lapicw>
-  lapicw(ICRLO, BCAST | INIT | LEVEL);
-80102edc:	c7 44 24 04 00 85 08 	movl   $0x88500,0x4(%esp)
-80102ee3:	00 
-80102ee4:	c7 04 24 c0 00 00 00 	movl   $0xc0,(%esp)
-80102eeb:	e8 b1 fe ff ff       	call   80102da1 <lapicw>
-  while(lapic[ICRLO] & DELIVS)
-80102ef0:	90                   	nop
-80102ef1:	a1 7c 32 11 80       	mov    0x8011327c,%eax
-80102ef6:	05 00 03 00 00       	add    $0x300,%eax
-80102efb:	8b 00                	mov    (%eax),%eax
-80102efd:	25 00 10 00 00       	and    $0x1000,%eax
-80102f02:	85 c0                	test   %eax,%eax
-80102f04:	75 eb                	jne    80102ef1 <lapicinit+0x12f>
-    ;
-
-  // Enable interrupts on the APIC (but not on the processor).
-  lapicw(TPR, 0);
-80102f06:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
-80102f0d:	00 
-80102f0e:	c7 04 24 20 00 00 00 	movl   $0x20,(%esp)
-80102f15:	e8 87 fe ff ff       	call   80102da1 <lapicw>
-80102f1a:	eb 01                	jmp    80102f1d <lapicinit+0x15b>
-
-void
-lapicinit(void)
-{
-  if(!lapic) 
-    return;
-80102f1c:	90                   	nop
-  while(lapic[ICRLO] & DELIVS)
-    ;
-
-  // Enable interrupts on the APIC (but not on the processor).
-  lapicw(TPR, 0);
-}
-80102f1d:	c9                   	leave  
-80102f1e:	c3                   	ret    
-
-80102f1f <cpunum>:
-
-int
-cpunum(void)
-{
-80102f1f:	55                   	push   %ebp
-80102f20:	89 e5                	mov    %esp,%ebp
-80102f22:	83 ec 18             	sub    $0x18,%esp
-  // Cannot call cpu when interrupts are enabled:
-  // result not guaranteed to last long enough to be used!
-  // Would prefer to panic but even printing is chancy here:
-  // almost everything, including cprintf and panic, calls cpu,
-  // often indirectly through acquire and release.
-  if(readeflags()&FL_IF){
-80102f25:	e8 62 fe ff ff       	call   80102d8c <readeflags>
-80102f2a:	25 00 02 00 00       	and    $0x200,%eax
-80102f2f:	85 c0                	test   %eax,%eax
-80102f31:	74 29                	je     80102f5c <cpunum+0x3d>
-    static int n;
-    if(n++ == 0)
-80102f33:	a1 60 c6 10 80       	mov    0x8010c660,%eax
-80102f38:	85 c0                	test   %eax,%eax
-80102f3a:	0f 94 c2             	sete   %dl
-80102f3d:	83 c0 01             	add    $0x1,%eax
-80102f40:	a3 60 c6 10 80       	mov    %eax,0x8010c660
-80102f45:	84 d2                	test   %dl,%dl
-80102f47:	74 13                	je     80102f5c <cpunum+0x3d>
-      cprintf("cpu called from %x with interrupts enabled\n",
-80102f49:	8b 45 04             	mov    0x4(%ebp),%eax
-80102f4c:	89 44 24 04          	mov    %eax,0x4(%esp)
-80102f50:	c7 04 24 84 93 10 80 	movl   $0x80109384,(%esp)
-80102f57:	e8 45 d4 ff ff       	call   801003a1 <cprintf>
-        __builtin_return_address(0));
-  }
-
-  if(lapic)
-80102f5c:	a1 7c 32 11 80       	mov    0x8011327c,%eax
-80102f61:	85 c0                	test   %eax,%eax
-80102f63:	74 0f                	je     80102f74 <cpunum+0x55>
-    return lapic[ID]>>24;
-80102f65:	a1 7c 32 11 80       	mov    0x8011327c,%eax
-80102f6a:	83 c0 20             	add    $0x20,%eax
-80102f6d:	8b 00                	mov    (%eax),%eax
-80102f6f:	c1 e8 18             	shr    $0x18,%eax
-80102f72:	eb 05                	jmp    80102f79 <cpunum+0x5a>
-  return 0;
-80102f74:	b8 00 00 00 00       	mov    $0x0,%eax
-}
-80102f79:	c9                   	leave  
-80102f7a:	c3                   	ret    
-
-80102f7b <lapiceoi>:
-
-// Acknowledge interrupt.
-void
-lapiceoi(void)
-{
-80102f7b:	55                   	push   %ebp
-80102f7c:	89 e5                	mov    %esp,%ebp
-80102f7e:	83 ec 08             	sub    $0x8,%esp
-  if(lapic)
-80102f81:	a1 7c 32 11 80       	mov    0x8011327c,%eax
-80102f86:	85 c0                	test   %eax,%eax
-80102f88:	74 14                	je     80102f9e <lapiceoi+0x23>
-    lapicw(EOI, 0);
-80102f8a:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
-80102f91:	00 
-80102f92:	c7 04 24 2c 00 00 00 	movl   $0x2c,(%esp)
-80102f99:	e8 03 fe ff ff       	call   80102da1 <lapicw>
-}
-80102f9e:	c9                   	leave  
-80102f9f:	c3                   	ret    
-
-80102fa0 <microdelay>:
-
-// Spin for a given number of microseconds.
-// On real hardware would want to tune this dynamically.
-void
-microdelay(int us)
-{
-80102fa0:	55                   	push   %ebp
-80102fa1:	89 e5                	mov    %esp,%ebp
-}
-80102fa3:	5d                   	pop    %ebp
-80102fa4:	c3                   	ret    
-
-80102fa5 <lapicstartap>:
-
-// Start additional processor running entry code at addr.
-// See Appendix B of MultiProcessor Specification.
-void
-lapicstartap(uchar apicid, uint addr)
-{
-80102fa5:	55                   	push   %ebp
-80102fa6:	89 e5                	mov    %esp,%ebp
-80102fa8:	83 ec 1c             	sub    $0x1c,%esp
-80102fab:	8b 45 08             	mov    0x8(%ebp),%eax
-80102fae:	88 45 ec             	mov    %al,-0x14(%ebp)
-  ushort *wrv;
-  
-  // "The BSP must initialize CMOS shutdown code to 0AH
-  // and the warm reset vector (DWORD based at 40:67) to point at
-  // the AP startup code prior to the [universal startup algorithm]."
-  outb(CMOS_PORT, 0xF);  // offset 0xF is shutdown code
-80102fb1:	c7 44 24 04 0f 00 00 	movl   $0xf,0x4(%esp)
-80102fb8:	00 
-80102fb9:	c7 04 24 70 00 00 00 	movl   $0x70,(%esp)
-80102fc0:	e8 a9 fd ff ff       	call   80102d6e <outb>
-  outb(CMOS_PORT+1, 0x0A);
-80102fc5:	c7 44 24 04 0a 00 00 	movl   $0xa,0x4(%esp)
-80102fcc:	00 
-80102fcd:	c7 04 24 71 00 00 00 	movl   $0x71,(%esp)
-80102fd4:	e8 95 fd ff ff       	call   80102d6e <outb>
-  wrv = (ushort*)P2V((0x40<<4 | 0x67));  // Warm reset vector
-80102fd9:	c7 45 f8 67 04 00 80 	movl   $0x80000467,-0x8(%ebp)
-  wrv[0] = 0;
-80102fe0:	8b 45 f8             	mov    -0x8(%ebp),%eax
-80102fe3:	66 c7 00 00 00       	movw   $0x0,(%eax)
-  wrv[1] = addr >> 4;
-80102fe8:	8b 45 f8             	mov    -0x8(%ebp),%eax
-80102feb:	8d 50 02             	lea    0x2(%eax),%edx
-80102fee:	8b 45 0c             	mov    0xc(%ebp),%eax
-80102ff1:	c1 e8 04             	shr    $0x4,%eax
-80102ff4:	66 89 02             	mov    %ax,(%edx)
-
-  // "Universal startup algorithm."
-  // Send INIT (level-triggered) interrupt to reset other CPU.
-  lapicw(ICRHI, apicid<<24);
-80102ff7:	0f b6 45 ec          	movzbl -0x14(%ebp),%eax
-80102ffb:	c1 e0 18             	shl    $0x18,%eax
-80102ffe:	89 44 24 04          	mov    %eax,0x4(%esp)
-80103002:	c7 04 24 c4 00 00 00 	movl   $0xc4,(%esp)
-80103009:	e8 93 fd ff ff       	call   80102da1 <lapicw>
-  lapicw(ICRLO, INIT | LEVEL | ASSERT);
-8010300e:	c7 44 24 04 00 c5 00 	movl   $0xc500,0x4(%esp)
-80103015:	00 
-80103016:	c7 04 24 c0 00 00 00 	movl   $0xc0,(%esp)
-8010301d:	e8 7f fd ff ff       	call   80102da1 <lapicw>
-  microdelay(200);
-80103022:	c7 04 24 c8 00 00 00 	movl   $0xc8,(%esp)
-80103029:	e8 72 ff ff ff       	call   80102fa0 <microdelay>
-  lapicw(ICRLO, INIT | LEVEL);
-8010302e:	c7 44 24 04 00 85 00 	movl   $0x8500,0x4(%esp)
-80103035:	00 
-80103036:	c7 04 24 c0 00 00 00 	movl   $0xc0,(%esp)
-8010303d:	e8 5f fd ff ff       	call   80102da1 <lapicw>
-  microdelay(100);    // should be 10ms, but too slow in Bochs!
-80103042:	c7 04 24 64 00 00 00 	movl   $0x64,(%esp)
-80103049:	e8 52 ff ff ff       	call   80102fa0 <microdelay>
-  // Send startup IPI (twice!) to enter code.
-  // Regular hardware is supposed to only accept a STARTUP
-  // when it is in the halted state due to an INIT.  So the second
-  // should be ignored, but it is part of the official Intel algorithm.
-  // Bochs complains about the second one.  Too bad for Bochs.
-  for(i = 0; i < 2; i++){
-8010304e:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
-80103055:	eb 40                	jmp    80103097 <lapicstartap+0xf2>
-    lapicw(ICRHI, apicid<<24);
-80103057:	0f b6 45 ec          	movzbl -0x14(%ebp),%eax
-8010305b:	c1 e0 18             	shl    $0x18,%eax
-8010305e:	89 44 24 04          	mov    %eax,0x4(%esp)
-80103062:	c7 04 24 c4 00 00 00 	movl   $0xc4,(%esp)
-80103069:	e8 33 fd ff ff       	call   80102da1 <lapicw>
-    lapicw(ICRLO, STARTUP | (addr>>12));
-8010306e:	8b 45 0c             	mov    0xc(%ebp),%eax
-80103071:	c1 e8 0c             	shr    $0xc,%eax
-80103074:	80 cc 06             	or     $0x6,%ah
-80103077:	89 44 24 04          	mov    %eax,0x4(%esp)
-8010307b:	c7 04 24 c0 00 00 00 	movl   $0xc0,(%esp)
-80103082:	e8 1a fd ff ff       	call   80102da1 <lapicw>
-    microdelay(200);
-80103087:	c7 04 24 c8 00 00 00 	movl   $0xc8,(%esp)
-8010308e:	e8 0d ff ff ff       	call   80102fa0 <microdelay>
-  // Send startup IPI (twice!) to enter code.
-  // Regular hardware is supposed to only accept a STARTUP
-  // when it is in the halted state due to an INIT.  So the second
-  // should be ignored, but it is part of the official Intel algorithm.
-  // Bochs complains about the second one.  Too bad for Bochs.
-  for(i = 0; i < 2; i++){
-80103093:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
-80103097:	83 7d fc 01          	cmpl   $0x1,-0x4(%ebp)
-8010309b:	7e ba                	jle    80103057 <lapicstartap+0xb2>
-    lapicw(ICRHI, apicid<<24);
-    lapicw(ICRLO, STARTUP | (addr>>12));
-    microdelay(200);
-  }
-}
-8010309d:	c9                   	leave  
-8010309e:	c3                   	ret    
-
-8010309f <cmos_read>:
-#define DAY     0x07
-#define MONTH   0x08
-#define YEAR    0x09
-
-static uint cmos_read(uint reg)
-{
-8010309f:	55                   	push   %ebp
-801030a0:	89 e5                	mov    %esp,%ebp
-801030a2:	83 ec 08             	sub    $0x8,%esp
-  outb(CMOS_PORT,  reg);
-801030a5:	8b 45 08             	mov    0x8(%ebp),%eax
-801030a8:	0f b6 c0             	movzbl %al,%eax
-801030ab:	89 44 24 04          	mov    %eax,0x4(%esp)
-801030af:	c7 04 24 70 00 00 00 	movl   $0x70,(%esp)
-801030b6:	e8 b3 fc ff ff       	call   80102d6e <outb>
-  microdelay(200);
-801030bb:	c7 04 24 c8 00 00 00 	movl   $0xc8,(%esp)
-801030c2:	e8 d9 fe ff ff       	call   80102fa0 <microdelay>
-
-  return inb(CMOS_RETURN);
-801030c7:	c7 04 24 71 00 00 00 	movl   $0x71,(%esp)
-801030ce:	e8 71 fc ff ff       	call   80102d44 <inb>
-801030d3:	0f b6 c0             	movzbl %al,%eax
-}
-801030d6:	c9                   	leave  
-801030d7:	c3                   	ret    
-
-801030d8 <fill_rtcdate>:
-
-static void fill_rtcdate(struct rtcdate *r)
-{
-801030d8:	55                   	push   %ebp
-801030d9:	89 e5                	mov    %esp,%ebp
-801030db:	83 ec 04             	sub    $0x4,%esp
-  r->second = cmos_read(SECS);
-801030de:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
-801030e5:	e8 b5 ff ff ff       	call   8010309f <cmos_read>
-801030ea:	8b 55 08             	mov    0x8(%ebp),%edx
-801030ed:	89 02                	mov    %eax,(%edx)
-  r->minute = cmos_read(MINS);
-801030ef:	c7 04 24 02 00 00 00 	movl   $0x2,(%esp)
-801030f6:	e8 a4 ff ff ff       	call   8010309f <cmos_read>
-801030fb:	8b 55 08             	mov    0x8(%ebp),%edx
-801030fe:	89 42 04             	mov    %eax,0x4(%edx)
-  r->hour   = cmos_read(HOURS);
-80103101:	c7 04 24 04 00 00 00 	movl   $0x4,(%esp)
-80103108:	e8 92 ff ff ff       	call   8010309f <cmos_read>
-8010310d:	8b 55 08             	mov    0x8(%ebp),%edx
-80103110:	89 42 08             	mov    %eax,0x8(%edx)
-  r->day    = cmos_read(DAY);
-80103113:	c7 04 24 07 00 00 00 	movl   $0x7,(%esp)
-8010311a:	e8 80 ff ff ff       	call   8010309f <cmos_read>
-8010311f:	8b 55 08             	mov    0x8(%ebp),%edx
-80103122:	89 42 0c             	mov    %eax,0xc(%edx)
-  r->month  = cmos_read(MONTH);
-80103125:	c7 04 24 08 00 00 00 	movl   $0x8,(%esp)
-8010312c:	e8 6e ff ff ff       	call   8010309f <cmos_read>
-80103131:	8b 55 08             	mov    0x8(%ebp),%edx
-80103134:	89 42 10             	mov    %eax,0x10(%edx)
-  r->year   = cmos_read(YEAR);
-80103137:	c7 04 24 09 00 00 00 	movl   $0x9,(%esp)
-8010313e:	e8 5c ff ff ff       	call   8010309f <cmos_read>
-80103143:	8b 55 08             	mov    0x8(%ebp),%edx
-80103146:	89 42 14             	mov    %eax,0x14(%edx)
-}
-80103149:	c9                   	leave  
-8010314a:	c3                   	ret    
-
-8010314b <cmostime>:
-
-// qemu seems to use 24-hour GWT and the values are BCD encoded
-void cmostime(struct rtcdate *r)
-{
-8010314b:	55                   	push   %ebp
-8010314c:	89 e5                	mov    %esp,%ebp
-8010314e:	83 ec 58             	sub    $0x58,%esp
-  struct rtcdate t1, t2;
-  int sb, bcd;
-
-  sb = cmos_read(CMOS_STATB);
-80103151:	c7 04 24 0b 00 00 00 	movl   $0xb,(%esp)
-80103158:	e8 42 ff ff ff       	call   8010309f <cmos_read>
-8010315d:	89 45 f4             	mov    %eax,-0xc(%ebp)
-
-  bcd = (sb & (1 << 2)) == 0;
-80103160:	8b 45 f4             	mov    -0xc(%ebp),%eax
-80103163:	83 e0 04             	and    $0x4,%eax
-80103166:	85 c0                	test   %eax,%eax
-80103168:	0f 94 c0             	sete   %al
-8010316b:	0f b6 c0             	movzbl %al,%eax
-8010316e:	89 45 f0             	mov    %eax,-0x10(%ebp)
-80103171:	eb 01                	jmp    80103174 <cmostime+0x29>
-    if (cmos_read(CMOS_STATA) & CMOS_UIP)
-        continue;
-    fill_rtcdate(&t2);
-    if (memcmp(&t1, &t2, sizeof(t1)) == 0)
-      break;
-  }
-80103173:	90                   	nop
-
-  bcd = (sb & (1 << 2)) == 0;
-
-  // make sure CMOS doesn't modify time while we read it
-  for (;;) {
-    fill_rtcdate(&t1);
-80103174:	8d 45 d8             	lea    -0x28(%ebp),%eax
-80103177:	89 04 24             	mov    %eax,(%esp)
-8010317a:	e8 59 ff ff ff       	call   801030d8 <fill_rtcdate>
-    if (cmos_read(CMOS_STATA) & CMOS_UIP)
-8010317f:	c7 04 24 0a 00 00 00 	movl   $0xa,(%esp)
-80103186:	e8 14 ff ff ff       	call   8010309f <cmos_read>
-8010318b:	25 80 00 00 00       	and    $0x80,%eax
-80103190:	85 c0                	test   %eax,%eax
-80103192:	75 2b                	jne    801031bf <cmostime+0x74>
-        continue;
-    fill_rtcdate(&t2);
-80103194:	8d 45 c0             	lea    -0x40(%ebp),%eax
-80103197:	89 04 24             	mov    %eax,(%esp)
-8010319a:	e8 39 ff ff ff       	call   801030d8 <fill_rtcdate>
-    if (memcmp(&t1, &t2, sizeof(t1)) == 0)
-8010319f:	c7 44 24 08 18 00 00 	movl   $0x18,0x8(%esp)
-801031a6:	00 
-801031a7:	8d 45 c0             	lea    -0x40(%ebp),%eax
-801031aa:	89 44 24 04          	mov    %eax,0x4(%esp)
-801031ae:	8d 45 d8             	lea    -0x28(%ebp),%eax
-801031b1:	89 04 24             	mov    %eax,(%esp)
-801031b4:	e8 34 25 00 00       	call   801056ed <memcmp>
-801031b9:	85 c0                	test   %eax,%eax
-801031bb:	75 b6                	jne    80103173 <cmostime+0x28>
-      break;
-801031bd:	eb 03                	jmp    801031c2 <cmostime+0x77>
-
-  // make sure CMOS doesn't modify time while we read it
-  for (;;) {
-    fill_rtcdate(&t1);
-    if (cmos_read(CMOS_STATA) & CMOS_UIP)
-        continue;
-801031bf:	90                   	nop
-    fill_rtcdate(&t2);
-    if (memcmp(&t1, &t2, sizeof(t1)) == 0)
-      break;
-  }
-801031c0:	eb b1                	jmp    80103173 <cmostime+0x28>
-
-  // convert
-  if (bcd) {
-801031c2:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
-801031c6:	0f 84 a8 00 00 00    	je     80103274 <cmostime+0x129>
-#define    CONV(x)     (t1.x = ((t1.x >> 4) * 10) + (t1.x & 0xf))
-    CONV(second);
-801031cc:	8b 45 d8             	mov    -0x28(%ebp),%eax
-801031cf:	89 c2                	mov    %eax,%edx
-801031d1:	c1 ea 04             	shr    $0x4,%edx
-801031d4:	89 d0                	mov    %edx,%eax
-801031d6:	c1 e0 02             	shl    $0x2,%eax
-801031d9:	01 d0                	add    %edx,%eax
-801031db:	01 c0                	add    %eax,%eax
-801031dd:	8b 55 d8             	mov    -0x28(%ebp),%edx
-801031e0:	83 e2 0f             	and    $0xf,%edx
-801031e3:	01 d0                	add    %edx,%eax
-801031e5:	89 45 d8             	mov    %eax,-0x28(%ebp)
-    CONV(minute);
-801031e8:	8b 45 dc             	mov    -0x24(%ebp),%eax
-801031eb:	89 c2                	mov    %eax,%edx
-801031ed:	c1 ea 04             	shr    $0x4,%edx
-801031f0:	89 d0                	mov    %edx,%eax
-801031f2:	c1 e0 02             	shl    $0x2,%eax
-801031f5:	01 d0                	add    %edx,%eax
-801031f7:	01 c0                	add    %eax,%eax
-801031f9:	8b 55 dc             	mov    -0x24(%ebp),%edx
-801031fc:	83 e2 0f             	and    $0xf,%edx
-801031ff:	01 d0                	add    %edx,%eax
-80103201:	89 45 dc             	mov    %eax,-0x24(%ebp)
-    CONV(hour  );
-80103204:	8b 45 e0             	mov    -0x20(%ebp),%eax
-80103207:	89 c2                	mov    %eax,%edx
-80103209:	c1 ea 04             	shr    $0x4,%edx
-8010320c:	89 d0                	mov    %edx,%eax
-8010320e:	c1 e0 02             	shl    $0x2,%eax
-80103211:	01 d0                	add    %edx,%eax
-80103213:	01 c0                	add    %eax,%eax
-80103215:	8b 55 e0             	mov    -0x20(%ebp),%edx
-80103218:	83 e2 0f             	and    $0xf,%edx
-8010321b:	01 d0                	add    %edx,%eax
-8010321d:	89 45 e0             	mov    %eax,-0x20(%ebp)
-    CONV(day   );
-80103220:	8b 45 e4             	mov    -0x1c(%ebp),%eax
-80103223:	89 c2                	mov    %eax,%edx
-80103225:	c1 ea 04             	shr    $0x4,%edx
-80103228:	89 d0                	mov    %edx,%eax
-8010322a:	c1 e0 02             	shl    $0x2,%eax
-8010322d:	01 d0                	add    %edx,%eax
-8010322f:	01 c0                	add    %eax,%eax
-80103231:	8b 55 e4             	mov    -0x1c(%ebp),%edx
-80103234:	83 e2 0f             	and    $0xf,%edx
-80103237:	01 d0                	add    %edx,%eax
-80103239:	89 45 e4             	mov    %eax,-0x1c(%ebp)
-    CONV(month );
-8010323c:	8b 45 e8             	mov    -0x18(%ebp),%eax
-8010323f:	89 c2                	mov    %eax,%edx
-80103241:	c1 ea 04             	shr    $0x4,%edx
-80103244:	89 d0                	mov    %edx,%eax
-80103246:	c1 e0 02             	shl    $0x2,%eax
-80103249:	01 d0                	add    %edx,%eax
-8010324b:	01 c0                	add    %eax,%eax
-8010324d:	8b 55 e8             	mov    -0x18(%ebp),%edx
-80103250:	83 e2 0f             	and    $0xf,%edx
-80103253:	01 d0                	add    %edx,%eax
-80103255:	89 45 e8             	mov    %eax,-0x18(%ebp)
-    CONV(year  );
-80103258:	8b 45 ec             	mov    -0x14(%ebp),%eax
-8010325b:	89 c2                	mov    %eax,%edx
-8010325d:	c1 ea 04             	shr    $0x4,%edx
-80103260:	89 d0                	mov    %edx,%eax
-80103262:	c1 e0 02             	shl    $0x2,%eax
-80103265:	01 d0                	add    %edx,%eax
-80103267:	01 c0                	add    %eax,%eax
-80103269:	8b 55 ec             	mov    -0x14(%ebp),%edx
-8010326c:	83 e2 0f             	and    $0xf,%edx
-8010326f:	01 d0                	add    %edx,%eax
-80103271:	89 45 ec             	mov    %eax,-0x14(%ebp)
-#undef     CONV
-  }
-
-  *r = t1;
-80103274:	8b 45 08             	mov    0x8(%ebp),%eax
-80103277:	8b 55 d8             	mov    -0x28(%ebp),%edx
-8010327a:	89 10                	mov    %edx,(%eax)
-8010327c:	8b 55 dc             	mov    -0x24(%ebp),%edx
-8010327f:	89 50 04             	mov    %edx,0x4(%eax)
-80103282:	8b 55 e0             	mov    -0x20(%ebp),%edx
-80103285:	89 50 08             	mov    %edx,0x8(%eax)
-80103288:	8b 55 e4             	mov    -0x1c(%ebp),%edx
-8010328b:	89 50 0c             	mov    %edx,0xc(%eax)
-8010328e:	8b 55 e8             	mov    -0x18(%ebp),%edx
-80103291:	89 50 10             	mov    %edx,0x10(%eax)
-80103294:	8b 55 ec             	mov    -0x14(%ebp),%edx
-80103297:	89 50 14             	mov    %edx,0x14(%eax)
-  r->year += 2000;
-8010329a:	8b 45 08             	mov    0x8(%ebp),%eax
-8010329d:	8b 40 14             	mov    0x14(%eax),%eax
-801032a0:	8d 90 d0 07 00 00    	lea    0x7d0(%eax),%edx
-801032a6:	8b 45 08             	mov    0x8(%ebp),%eax
-801032a9:	89 50 14             	mov    %edx,0x14(%eax)
-}
-801032ac:	c9                   	leave  
-801032ad:	c3                   	ret    
-	...
-
-801032b0 <initlog>:
-static void recover_from_log(void);
-static void commit();
-
-void
-initlog(void)
-{
-801032b0:	55                   	push   %ebp
-801032b1:	89 e5                	mov    %esp,%ebp
-801032b3:	83 ec 28             	sub    $0x28,%esp
-  if (sizeof(struct logheader) >= BSIZE)
-    panic("initlog: too big logheader");
-
-  struct superblock sb;
-  initlock(&log.lock, "log");
-801032b6:	c7 44 24 04 b0 93 10 	movl   $0x801093b0,0x4(%esp)
-801032bd:	80 
-801032be:	c7 04 24 80 32 11 80 	movl   $0x80113280,(%esp)
-801032c5:	e8 3c 21 00 00       	call   80105406 <initlock>
-  readsb(ROOTDEV, &sb);
-801032ca:	8d 45 e8             	lea    -0x18(%ebp),%eax
-801032cd:	89 44 24 04          	mov    %eax,0x4(%esp)
-801032d1:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
-801032d8:	e8 77 e0 ff ff       	call   80101354 <readsb>
-  log.start = sb.size - sb.nlog;
-801032dd:	8b 55 e8             	mov    -0x18(%ebp),%edx
-801032e0:	8b 45 f4             	mov    -0xc(%ebp),%eax
-801032e3:	89 d1                	mov    %edx,%ecx
-801032e5:	29 c1                	sub    %eax,%ecx
-801032e7:	89 c8                	mov    %ecx,%eax
-801032e9:	a3 b4 32 11 80       	mov    %eax,0x801132b4
-  log.size = sb.nlog;
-801032ee:	8b 45 f4             	mov    -0xc(%ebp),%eax
-801032f1:	a3 b8 32 11 80       	mov    %eax,0x801132b8
-  log.dev = ROOTDEV;
-801032f6:	c7 05 c4 32 11 80 01 	movl   $0x1,0x801132c4
-801032fd:	00 00 00 
-  recover_from_log();
-80103300:	e8 97 01 00 00       	call   8010349c <recover_from_log>
-}
-80103305:	c9                   	leave  
-80103306:	c3                   	ret    
-
-80103307 <install_trans>:
-
-// Copy committed blocks from log to their home location
-static void 
-install_trans(void)
-{
-80103307:	55                   	push   %ebp
-80103308:	89 e5                	mov    %esp,%ebp
-8010330a:	83 ec 28             	sub    $0x28,%esp
-  int tail;
-
-  for (tail = 0; tail < log.lh.n; tail++) {
-8010330d:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
-80103314:	e9 89 00 00 00       	jmp    801033a2 <install_trans+0x9b>
-    struct buf *lbuf = bread(log.dev, log.start+tail+1); // read log block
-80103319:	a1 b4 32 11 80       	mov    0x801132b4,%eax
-8010331e:	03 45 f4             	add    -0xc(%ebp),%eax
-80103321:	83 c0 01             	add    $0x1,%eax
-80103324:	89 c2                	mov    %eax,%edx
-80103326:	a1 c4 32 11 80       	mov    0x801132c4,%eax
-8010332b:	89 54 24 04          	mov    %edx,0x4(%esp)
-8010332f:	89 04 24             	mov    %eax,(%esp)
-80103332:	e8 6f ce ff ff       	call   801001a6 <bread>
-80103337:	89 45 f0             	mov    %eax,-0x10(%ebp)
-    struct buf *dbuf = bread(log.dev, log.lh.sector[tail]); // read dst
-8010333a:	8b 45 f4             	mov    -0xc(%ebp),%eax
-8010333d:	83 c0 10             	add    $0x10,%eax
-80103340:	8b 04 85 8c 32 11 80 	mov    -0x7feecd74(,%eax,4),%eax
-80103347:	89 c2                	mov    %eax,%edx
-80103349:	a1 c4 32 11 80       	mov    0x801132c4,%eax
-8010334e:	89 54 24 04          	mov    %edx,0x4(%esp)
-80103352:	89 04 24             	mov    %eax,(%esp)
-80103355:	e8 4c ce ff ff       	call   801001a6 <bread>
-8010335a:	89 45 ec             	mov    %eax,-0x14(%ebp)
-    memmove(dbuf->data, lbuf->data, BSIZE);  // copy block to dst
-8010335d:	8b 45 f0             	mov    -0x10(%ebp),%eax
-80103360:	8d 50 18             	lea    0x18(%eax),%edx
-80103363:	8b 45 ec             	mov    -0x14(%ebp),%eax
-80103366:	83 c0 18             	add    $0x18,%eax
-80103369:	c7 44 24 08 00 02 00 	movl   $0x200,0x8(%esp)
-80103370:	00 
-80103371:	89 54 24 04          	mov    %edx,0x4(%esp)
-80103375:	89 04 24             	mov    %eax,(%esp)
-80103378:	e8 cc 23 00 00       	call   80105749 <memmove>
-    bwrite(dbuf);  // write dst to disk
-8010337d:	8b 45 ec             	mov    -0x14(%ebp),%eax
-80103380:	89 04 24             	mov    %eax,(%esp)
-80103383:	e8 55 ce ff ff       	call   801001dd <bwrite>
-    brelse(lbuf); 
-80103388:	8b 45 f0             	mov    -0x10(%ebp),%eax
-8010338b:	89 04 24             	mov    %eax,(%esp)
-8010338e:	e8 84 ce ff ff       	call   80100217 <brelse>
-    brelse(dbuf);
-80103393:	8b 45 ec             	mov    -0x14(%ebp),%eax
-80103396:	89 04 24             	mov    %eax,(%esp)
-80103399:	e8 79 ce ff ff       	call   80100217 <brelse>
-static void 
-install_trans(void)
-{
-  int tail;
-
-  for (tail = 0; tail < log.lh.n; tail++) {
-8010339e:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
-801033a2:	a1 c8 32 11 80       	mov    0x801132c8,%eax
-801033a7:	3b 45 f4             	cmp    -0xc(%ebp),%eax
-801033aa:	0f 8f 69 ff ff ff    	jg     80103319 <install_trans+0x12>
-    memmove(dbuf->data, lbuf->data, BSIZE);  // copy block to dst
-    bwrite(dbuf);  // write dst to disk
-    brelse(lbuf); 
-    brelse(dbuf);
-  }
-}
-801033b0:	c9                   	leave  
-801033b1:	c3                   	ret    
-
-801033b2 <read_head>:
-
-// Read the log header from disk into the in-memory log header
-static void
-read_head(void)
-{
-801033b2:	55                   	push   %ebp
-801033b3:	89 e5                	mov    %esp,%ebp
-801033b5:	83 ec 28             	sub    $0x28,%esp
-  struct buf *buf = bread(log.dev, log.start);
-801033b8:	a1 b4 32 11 80       	mov    0x801132b4,%eax
-801033bd:	89 c2                	mov    %eax,%edx
-801033bf:	a1 c4 32 11 80       	mov    0x801132c4,%eax
-801033c4:	89 54 24 04          	mov    %edx,0x4(%esp)
-801033c8:	89 04 24             	mov    %eax,(%esp)
-801033cb:	e8 d6 cd ff ff       	call   801001a6 <bread>
-801033d0:	89 45 f0             	mov    %eax,-0x10(%ebp)
-  struct logheader *lh = (struct logheader *) (buf->data);
-801033d3:	8b 45 f0             	mov    -0x10(%ebp),%eax
-801033d6:	83 c0 18             	add    $0x18,%eax
-801033d9:	89 45 ec             	mov    %eax,-0x14(%ebp)
-  int i;
-  log.lh.n = lh->n;
-801033dc:	8b 45 ec             	mov    -0x14(%ebp),%eax
-801033df:	8b 00                	mov    (%eax),%eax
-801033e1:	a3 c8 32 11 80       	mov    %eax,0x801132c8
-  for (i = 0; i < log.lh.n; i++) {
-801033e6:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
-801033ed:	eb 1b                	jmp    8010340a <read_head+0x58>
-    log.lh.sector[i] = lh->sector[i];
-801033ef:	8b 45 ec             	mov    -0x14(%ebp),%eax
-801033f2:	8b 55 f4             	mov    -0xc(%ebp),%edx
-801033f5:	8b 44 90 04          	mov    0x4(%eax,%edx,4),%eax
-801033f9:	8b 55 f4             	mov    -0xc(%ebp),%edx
-801033fc:	83 c2 10             	add    $0x10,%edx
-801033ff:	89 04 95 8c 32 11 80 	mov    %eax,-0x7feecd74(,%edx,4)
-{
-  struct buf *buf = bread(log.dev, log.start);
-  struct logheader *lh = (struct logheader *) (buf->data);
-  int i;
-  log.lh.n = lh->n;
-  for (i = 0; i < log.lh.n; i++) {
-80103406:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
-8010340a:	a1 c8 32 11 80       	mov    0x801132c8,%eax
-8010340f:	3b 45 f4             	cmp    -0xc(%ebp),%eax
-80103412:	7f db                	jg     801033ef <read_head+0x3d>
-    log.lh.sector[i] = lh->sector[i];
-  }
-  brelse(buf);
-80103414:	8b 45 f0             	mov    -0x10(%ebp),%eax
-80103417:	89 04 24             	mov    %eax,(%esp)
-8010341a:	e8 f8 cd ff ff       	call   80100217 <brelse>
-}
-8010341f:	c9                   	leave  
-80103420:	c3                   	ret    
-
-80103421 <write_head>:
-// Write in-memory log header to disk.
-// This is the true point at which the
-// current transaction commits.
-static void
-write_head(void)
-{
-80103421:	55                   	push   %ebp
-80103422:	89 e5                	mov    %esp,%ebp
-80103424:	83 ec 28             	sub    $0x28,%esp
-  struct buf *buf = bread(log.dev, log.start);
-80103427:	a1 b4 32 11 80       	mov    0x801132b4,%eax
-8010342c:	89 c2                	mov    %eax,%edx
-8010342e:	a1 c4 32 11 80       	mov    0x801132c4,%eax
-80103433:	89 54 24 04          	mov    %edx,0x4(%esp)
-80103437:	89 04 24             	mov    %eax,(%esp)
-8010343a:	e8 67 cd ff ff       	call   801001a6 <bread>
-8010343f:	89 45 f0             	mov    %eax,-0x10(%ebp)
-  struct logheader *hb = (struct logheader *) (buf->data);
-80103442:	8b 45 f0             	mov    -0x10(%ebp),%eax
-80103445:	83 c0 18             	add    $0x18,%eax
-80103448:	89 45 ec             	mov    %eax,-0x14(%ebp)
-  int i;
-  hb->n = log.lh.n;
-8010344b:	8b 15 c8 32 11 80    	mov    0x801132c8,%edx
-80103451:	8b 45 ec             	mov    -0x14(%ebp),%eax
-80103454:	89 10                	mov    %edx,(%eax)
-  for (i = 0; i < log.lh.n; i++) {
-80103456:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
-8010345d:	eb 1b                	jmp    8010347a <write_head+0x59>
-    hb->sector[i] = log.lh.sector[i];
-8010345f:	8b 45 f4             	mov    -0xc(%ebp),%eax
-80103462:	83 c0 10             	add    $0x10,%eax
-80103465:	8b 0c 85 8c 32 11 80 	mov    -0x7feecd74(,%eax,4),%ecx
-8010346c:	8b 45 ec             	mov    -0x14(%ebp),%eax
-8010346f:	8b 55 f4             	mov    -0xc(%ebp),%edx
-80103472:	89 4c 90 04          	mov    %ecx,0x4(%eax,%edx,4)
-{
-  struct buf *buf = bread(log.dev, log.start);
-  struct logheader *hb = (struct logheader *) (buf->data);
-  int i;
-  hb->n = log.lh.n;
-  for (i = 0; i < log.lh.n; i++) {
-80103476:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
-8010347a:	a1 c8 32 11 80       	mov    0x801132c8,%eax
-8010347f:	3b 45 f4             	cmp    -0xc(%ebp),%eax
-80103482:	7f db                	jg     8010345f <write_head+0x3e>
-    hb->sector[i] = log.lh.sector[i];
-  }
-  bwrite(buf);
-80103484:	8b 45 f0             	mov    -0x10(%ebp),%eax
-80103487:	89 04 24             	mov    %eax,(%esp)
-8010348a:	e8 4e cd ff ff       	call   801001dd <bwrite>
-  brelse(buf);
-8010348f:	8b 45 f0             	mov    -0x10(%ebp),%eax
-80103492:	89 04 24             	mov    %eax,(%esp)
-80103495:	e8 7d cd ff ff       	call   80100217 <brelse>
-}
-8010349a:	c9                   	leave  
-8010349b:	c3                   	ret    
-
-8010349c <recover_from_log>:
-
-static void
-recover_from_log(void)
-{
-8010349c:	55                   	push   %ebp
-8010349d:	89 e5                	mov    %esp,%ebp
-8010349f:	83 ec 08             	sub    $0x8,%esp
-  read_head();      
-801034a2:	e8 0b ff ff ff       	call   801033b2 <read_head>
-  install_trans(); // if committed, copy from log to disk
-801034a7:	e8 5b fe ff ff       	call   80103307 <install_trans>
-  log.lh.n = 0;
-801034ac:	c7 05 c8 32 11 80 00 	movl   $0x0,0x801132c8
-801034b3:	00 00 00 
-  write_head(); // clear the log
-801034b6:	e8 66 ff ff ff       	call   80103421 <write_head>
-}
-801034bb:	c9                   	leave  
-801034bc:	c3                   	ret    
-
-801034bd <begin_op>:
-
-// called at the start of each FS system call.
-void
-begin_op(void)
-{
-801034bd:	55                   	push   %ebp
-801034be:	89 e5                	mov    %esp,%ebp
-801034c0:	83 ec 18             	sub    $0x18,%esp
-  acquire(&log.lock);
-801034c3:	c7 04 24 80 32 11 80 	movl   $0x80113280,(%esp)
-801034ca:	e8 58 1f 00 00       	call   80105427 <acquire>
-  while(1){
-    if(log.committing){
-801034cf:	a1 c0 32 11 80       	mov    0x801132c0,%eax
-801034d4:	85 c0                	test   %eax,%eax
-801034d6:	74 16                	je     801034ee <begin_op+0x31>
-      sleep(&log, &log.lock);
-801034d8:	c7 44 24 04 80 32 11 	movl   $0x80113280,0x4(%esp)
-801034df:	80 
-801034e0:	c7 04 24 80 32 11 80 	movl   $0x80113280,(%esp)
-801034e7:	e8 55 1c 00 00       	call   80105141 <sleep>
-    } else {
-      log.outstanding += 1;
-      release(&log.lock);
-      break;
-    }
-  }
-801034ec:	eb e1                	jmp    801034cf <begin_op+0x12>
-{
-  acquire(&log.lock);
-  while(1){
-    if(log.committing){
-      sleep(&log, &log.lock);
-    } else if(log.lh.n + (log.outstanding+1)*MAXOPBLOCKS > LOGSIZE){
-801034ee:	8b 0d c8 32 11 80    	mov    0x801132c8,%ecx
-801034f4:	a1 bc 32 11 80       	mov    0x801132bc,%eax
-801034f9:	8d 50 01             	lea    0x1(%eax),%edx
-801034fc:	89 d0                	mov    %edx,%eax
-801034fe:	c1 e0 02             	shl    $0x2,%eax
-80103501:	01 d0                	add    %edx,%eax
-80103503:	01 c0                	add    %eax,%eax
-80103505:	01 c8                	add    %ecx,%eax
-80103507:	83 f8 1e             	cmp    $0x1e,%eax
-8010350a:	7e 16                	jle    80103522 <begin_op+0x65>
-      // this op might exhaust log space; wait for commit.
-      sleep(&log, &log.lock);
-8010350c:	c7 44 24 04 80 32 11 	movl   $0x80113280,0x4(%esp)
-80103513:	80 
-80103514:	c7 04 24 80 32 11 80 	movl   $0x80113280,(%esp)
-8010351b:	e8 21 1c 00 00       	call   80105141 <sleep>
-    } else {
-      log.outstanding += 1;
-      release(&log.lock);
-      break;
-    }
-  }
-80103520:	eb ad                	jmp    801034cf <begin_op+0x12>
-      sleep(&log, &log.lock);
-    } else if(log.lh.n + (log.outstanding+1)*MAXOPBLOCKS > LOGSIZE){
-      // this op might exhaust log space; wait for commit.
-      sleep(&log, &log.lock);
-    } else {
-      log.outstanding += 1;
-80103522:	a1 bc 32 11 80       	mov    0x801132bc,%eax
-80103527:	83 c0 01             	add    $0x1,%eax
-8010352a:	a3 bc 32 11 80       	mov    %eax,0x801132bc
-      release(&log.lock);
-8010352f:	c7 04 24 80 32 11 80 	movl   $0x80113280,(%esp)
-80103536:	e8 4e 1f 00 00       	call   80105489 <release>
-      break;
-8010353b:	90                   	nop
-    }
-  }
-}
-8010353c:	c9                   	leave  
-8010353d:	c3                   	ret    
-
-8010353e <end_op>:
-
-// called at the end of each FS system call.
-// commits if this was the last outstanding operation.
-void
-end_op(void)
-{
-8010353e:	55                   	push   %ebp
-8010353f:	89 e5                	mov    %esp,%ebp
-80103541:	83 ec 28             	sub    $0x28,%esp
-  int do_commit = 0;
-80103544:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
-
-  acquire(&log.lock);
-8010354b:	c7 04 24 80 32 11 80 	movl   $0x80113280,(%esp)
-80103552:	e8 d0 1e 00 00       	call   80105427 <acquire>
-  log.outstanding -= 1;
-80103557:	a1 bc 32 11 80       	mov    0x801132bc,%eax
-8010355c:	83 e8 01             	sub    $0x1,%eax
-8010355f:	a3 bc 32 11 80       	mov    %eax,0x801132bc
-  if(log.committing)
-80103564:	a1 c0 32 11 80       	mov    0x801132c0,%eax
-80103569:	85 c0                	test   %eax,%eax
-8010356b:	74 0c                	je     80103579 <end_op+0x3b>
-    panic("log.committing");
-8010356d:	c7 04 24 b4 93 10 80 	movl   $0x801093b4,(%esp)
-80103574:	e8 c4 cf ff ff       	call   8010053d <panic>
-  if(log.outstanding == 0){
-80103579:	a1 bc 32 11 80       	mov    0x801132bc,%eax
-8010357e:	85 c0                	test   %eax,%eax
-80103580:	75 13                	jne    80103595 <end_op+0x57>
-    do_commit = 1;
-80103582:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
-    log.committing = 1;
-80103589:	c7 05 c0 32 11 80 01 	movl   $0x1,0x801132c0
-80103590:	00 00 00 
-80103593:	eb 0c                	jmp    801035a1 <end_op+0x63>
-  } else {
-    // begin_op() may be waiting for log space.
-    wakeup(&log);
-80103595:	c7 04 24 80 32 11 80 	movl   $0x80113280,(%esp)
-8010359c:	e8 7c 1c 00 00       	call   8010521d <wakeup>
-  }
-  release(&log.lock);
-801035a1:	c7 04 24 80 32 11 80 	movl   $0x80113280,(%esp)
-801035a8:	e8 dc 1e 00 00       	call   80105489 <release>
-
-  if(do_commit){
-801035ad:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
-801035b1:	74 33                	je     801035e6 <end_op+0xa8>
-    // call commit w/o holding locks, since not allowed
-    // to sleep with locks.
-    commit();
-801035b3:	e8 db 00 00 00       	call   80103693 <commit>
-    acquire(&log.lock);
-801035b8:	c7 04 24 80 32 11 80 	movl   $0x80113280,(%esp)
-801035bf:	e8 63 1e 00 00       	call   80105427 <acquire>
-    log.committing = 0;
-801035c4:	c7 05 c0 32 11 80 00 	movl   $0x0,0x801132c0
-801035cb:	00 00 00 
-    wakeup(&log);
-801035ce:	c7 04 24 80 32 11 80 	movl   $0x80113280,(%esp)
-801035d5:	e8 43 1c 00 00       	call   8010521d <wakeup>
-    release(&log.lock);
-801035da:	c7 04 24 80 32 11 80 	movl   $0x80113280,(%esp)
-801035e1:	e8 a3 1e 00 00       	call   80105489 <release>
-  }
-}
-801035e6:	c9                   	leave  
-801035e7:	c3                   	ret    
-
-801035e8 <write_log>:
-
-// Copy modified blocks from cache to log.
-static void 
-write_log(void)
-{
-801035e8:	55                   	push   %ebp
-801035e9:	89 e5                	mov    %esp,%ebp
-801035eb:	83 ec 28             	sub    $0x28,%esp
-  int tail;
-
-  for (tail = 0; tail < log.lh.n; tail++) {
-801035ee:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
-801035f5:	e9 89 00 00 00       	jmp    80103683 <write_log+0x9b>
-    struct buf *to = bread(log.dev, log.start+tail+1); // log block
-801035fa:	a1 b4 32 11 80       	mov    0x801132b4,%eax
-801035ff:	03 45 f4             	add    -0xc(%ebp),%eax
-80103602:	83 c0 01             	add    $0x1,%eax
-80103605:	89 c2                	mov    %eax,%edx
-80103607:	a1 c4 32 11 80       	mov    0x801132c4,%eax
-8010360c:	89 54 24 04          	mov    %edx,0x4(%esp)
-80103610:	89 04 24             	mov    %eax,(%esp)
-80103613:	e8 8e cb ff ff       	call   801001a6 <bread>
-80103618:	89 45 f0             	mov    %eax,-0x10(%ebp)
-    struct buf *from = bread(log.dev, log.lh.sector[tail]); // cache block
-8010361b:	8b 45 f4             	mov    -0xc(%ebp),%eax
-8010361e:	83 c0 10             	add    $0x10,%eax
-80103621:	8b 04 85 8c 32 11 80 	mov    -0x7feecd74(,%eax,4),%eax
-80103628:	89 c2                	mov    %eax,%edx
-8010362a:	a1 c4 32 11 80       	mov    0x801132c4,%eax
-8010362f:	89 54 24 04          	mov    %edx,0x4(%esp)
-80103633:	89 04 24             	mov    %eax,(%esp)
-80103636:	e8 6b cb ff ff       	call   801001a6 <bread>
-8010363b:	89 45 ec             	mov    %eax,-0x14(%ebp)
-    memmove(to->data, from->data, BSIZE);
-8010363e:	8b 45 ec             	mov    -0x14(%ebp),%eax
-80103641:	8d 50 18             	lea    0x18(%eax),%edx
-80103644:	8b 45 f0             	mov    -0x10(%ebp),%eax
-80103647:	83 c0 18             	add    $0x18,%eax
-8010364a:	c7 44 24 08 00 02 00 	movl   $0x200,0x8(%esp)
-80103651:	00 
-80103652:	89 54 24 04          	mov    %edx,0x4(%esp)
-80103656:	89 04 24             	mov    %eax,(%esp)
-80103659:	e8 eb 20 00 00       	call   80105749 <memmove>
-    bwrite(to);  // write the log
-8010365e:	8b 45 f0             	mov    -0x10(%ebp),%eax
-80103661:	89 04 24             	mov    %eax,(%esp)
-80103664:	e8 74 cb ff ff       	call   801001dd <bwrite>
-    brelse(from); 
-80103669:	8b 45 ec             	mov    -0x14(%ebp),%eax
-8010366c:	89 04 24             	mov    %eax,(%esp)
-8010366f:	e8 a3 cb ff ff       	call   80100217 <brelse>
-    brelse(to);
-80103674:	8b 45 f0             	mov    -0x10(%ebp),%eax
-80103677:	89 04 24             	mov    %eax,(%esp)
-8010367a:	e8 98 cb ff ff       	call   80100217 <brelse>
-static void 
-write_log(void)
-{
-  int tail;
-
-  for (tail = 0; tail < log.lh.n; tail++) {
-8010367f:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
-80103683:	a1 c8 32 11 80       	mov    0x801132c8,%eax
-80103688:	3b 45 f4             	cmp    -0xc(%ebp),%eax
-8010368b:	0f 8f 69 ff ff ff    	jg     801035fa <write_log+0x12>
-    memmove(to->data, from->data, BSIZE);
-    bwrite(to);  // write the log
-    brelse(from); 
-    brelse(to);
-  }
-}
-80103691:	c9                   	leave  
-80103692:	c3                   	ret    
-
-80103693 <commit>:
-
-static void
-commit()
-{
-80103693:	55                   	push   %ebp
-80103694:	89 e5                	mov    %esp,%ebp
-80103696:	83 ec 08             	sub    $0x8,%esp
-  if (log.lh.n > 0) {
-80103699:	a1 c8 32 11 80       	mov    0x801132c8,%eax
-8010369e:	85 c0                	test   %eax,%eax
-801036a0:	7e 1e                	jle    801036c0 <commit+0x2d>
-    write_log();     // Write modified blocks from cache to log
-801036a2:	e8 41 ff ff ff       	call   801035e8 <write_log>
-    write_head();    // Write header to disk -- the real commit
-801036a7:	e8 75 fd ff ff       	call   80103421 <write_head>
-    install_trans(); // Now install writes to home locations
-801036ac:	e8 56 fc ff ff       	call   80103307 <install_trans>
-    log.lh.n = 0; 
-801036b1:	c7 05 c8 32 11 80 00 	movl   $0x0,0x801132c8
-801036b8:	00 00 00 
-    write_head();    // Erase the transaction from the log
-801036bb:	e8 61 fd ff ff       	call   80103421 <write_head>
-  }
-}
-801036c0:	c9                   	leave  
-801036c1:	c3                   	ret    
-
-801036c2 <log_write>:
-//   modify bp->data[]
-//   log_write(bp)
-//   brelse(bp)
-void
-log_write(struct buf *b)
-{
-801036c2:	55                   	push   %ebp
-801036c3:	89 e5                	mov    %esp,%ebp
-801036c5:	83 ec 28             	sub    $0x28,%esp
-  int i;
-
-  if (log.lh.n >= LOGSIZE || log.lh.n >= log.size - 1)
-801036c8:	a1 c8 32 11 80       	mov    0x801132c8,%eax
-801036cd:	83 f8 1d             	cmp    $0x1d,%eax
-801036d0:	7f 12                	jg     801036e4 <log_write+0x22>
-801036d2:	a1 c8 32 11 80       	mov    0x801132c8,%eax
-801036d7:	8b 15 b8 32 11 80    	mov    0x801132b8,%edx
-801036dd:	83 ea 01             	sub    $0x1,%edx
-801036e0:	39 d0                	cmp    %edx,%eax
-801036e2:	7c 0c                	jl     801036f0 <log_write+0x2e>
-    panic("too big a transaction");
-801036e4:	c7 04 24 c3 93 10 80 	movl   $0x801093c3,(%esp)
-801036eb:	e8 4d ce ff ff       	call   8010053d <panic>
-  if (log.outstanding < 1)
-801036f0:	a1 bc 32 11 80       	mov    0x801132bc,%eax
-801036f5:	85 c0                	test   %eax,%eax
-801036f7:	7f 0c                	jg     80103705 <log_write+0x43>
-    panic("log_write outside of trans");
-801036f9:	c7 04 24 d9 93 10 80 	movl   $0x801093d9,(%esp)
-80103700:	e8 38 ce ff ff       	call   8010053d <panic>
-
-  acquire(&log.lock);
-80103705:	c7 04 24 80 32 11 80 	movl   $0x80113280,(%esp)
-8010370c:	e8 16 1d 00 00       	call   80105427 <acquire>
-  for (i = 0; i < log.lh.n; i++) {
-80103711:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
-80103718:	eb 1d                	jmp    80103737 <log_write+0x75>
-    if (log.lh.sector[i] == b->sector)   // log absorbtion
-8010371a:	8b 45 f4             	mov    -0xc(%ebp),%eax
-8010371d:	83 c0 10             	add    $0x10,%eax
-80103720:	8b 04 85 8c 32 11 80 	mov    -0x7feecd74(,%eax,4),%eax
-80103727:	89 c2                	mov    %eax,%edx
-80103729:	8b 45 08             	mov    0x8(%ebp),%eax
-8010372c:	8b 40 08             	mov    0x8(%eax),%eax
-8010372f:	39 c2                	cmp    %eax,%edx
-80103731:	74 10                	je     80103743 <log_write+0x81>
-    panic("too big a transaction");
-  if (log.outstanding < 1)
-    panic("log_write outside of trans");
-
-  acquire(&log.lock);
-  for (i = 0; i < log.lh.n; i++) {
-80103733:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
-80103737:	a1 c8 32 11 80       	mov    0x801132c8,%eax
-8010373c:	3b 45 f4             	cmp    -0xc(%ebp),%eax
-8010373f:	7f d9                	jg     8010371a <log_write+0x58>
-80103741:	eb 01                	jmp    80103744 <log_write+0x82>
-    if (log.lh.sector[i] == b->sector)   // log absorbtion
-      break;
-80103743:	90                   	nop
-  }
-  log.lh.sector[i] = b->sector;
-80103744:	8b 45 08             	mov    0x8(%ebp),%eax
-80103747:	8b 40 08             	mov    0x8(%eax),%eax
-8010374a:	8b 55 f4             	mov    -0xc(%ebp),%edx
-8010374d:	83 c2 10             	add    $0x10,%edx
-80103750:	89 04 95 8c 32 11 80 	mov    %eax,-0x7feecd74(,%edx,4)
-  if (i == log.lh.n)
-80103757:	a1 c8 32 11 80       	mov    0x801132c8,%eax
-8010375c:	3b 45 f4             	cmp    -0xc(%ebp),%eax
-8010375f:	75 0d                	jne    8010376e <log_write+0xac>
-    log.lh.n++;
-80103761:	a1 c8 32 11 80       	mov    0x801132c8,%eax
-80103766:	83 c0 01             	add    $0x1,%eax
-80103769:	a3 c8 32 11 80       	mov    %eax,0x801132c8
-  b->flags |= B_DIRTY; // prevent eviction
-8010376e:	8b 45 08             	mov    0x8(%ebp),%eax
-80103771:	8b 00                	mov    (%eax),%eax
-80103773:	89 c2                	mov    %eax,%edx
-80103775:	83 ca 04             	or     $0x4,%edx
-80103778:	8b 45 08             	mov    0x8(%ebp),%eax
-8010377b:	89 10                	mov    %edx,(%eax)
-  release(&log.lock);
-8010377d:	c7 04 24 80 32 11 80 	movl   $0x80113280,(%esp)
-80103784:	e8 00 1d 00 00       	call   80105489 <release>
-}
-80103789:	c9                   	leave  
-8010378a:	c3                   	ret    
-	...
-
-8010378c <v2p>:
-8010378c:	55                   	push   %ebp
-8010378d:	89 e5                	mov    %esp,%ebp
-8010378f:	8b 45 08             	mov    0x8(%ebp),%eax
-80103792:	05 00 00 00 80       	add    $0x80000000,%eax
-80103797:	5d                   	pop    %ebp
-80103798:	c3                   	ret    
-
-80103799 <p2v>:
-static inline void *p2v(uint a) { return (void *) ((a) + KERNBASE); }
-80103799:	55                   	push   %ebp
-8010379a:	89 e5                	mov    %esp,%ebp
-8010379c:	8b 45 08             	mov    0x8(%ebp),%eax
-8010379f:	05 00 00 00 80       	add    $0x80000000,%eax
-801037a4:	5d                   	pop    %ebp
-801037a5:	c3                   	ret    
-
-801037a6 <xchg>:
-  asm volatile("sti");
-}
-
-static inline uint
-xchg(volatile uint *addr, uint newval)
-{
-801037a6:	55                   	push   %ebp
-801037a7:	89 e5                	mov    %esp,%ebp
-801037a9:	53                   	push   %ebx
-801037aa:	83 ec 10             	sub    $0x10,%esp
-  uint result;
-  
-  // The + in "+m" denotes a read-modify-write operand.
-  asm volatile("lock; xchgl %0, %1" :
-               "+m" (*addr), "=a" (result) :
-801037ad:	8b 55 08             	mov    0x8(%ebp),%edx
-xchg(volatile uint *addr, uint newval)
-{
-  uint result;
-  
-  // The + in "+m" denotes a read-modify-write operand.
-  asm volatile("lock; xchgl %0, %1" :
-801037b0:	8b 45 0c             	mov    0xc(%ebp),%eax
-               "+m" (*addr), "=a" (result) :
-801037b3:	8b 4d 08             	mov    0x8(%ebp),%ecx
-xchg(volatile uint *addr, uint newval)
-{
-  uint result;
-  
-  // The + in "+m" denotes a read-modify-write operand.
-  asm volatile("lock; xchgl %0, %1" :
-801037b6:	89 c3                	mov    %eax,%ebx
-801037b8:	89 d8                	mov    %ebx,%eax
-801037ba:	f0 87 02             	lock xchg %eax,(%edx)
-801037bd:	89 c3                	mov    %eax,%ebx
-801037bf:	89 5d f8             	mov    %ebx,-0x8(%ebp)
-               "+m" (*addr), "=a" (result) :
-               "1" (newval) :
-               "cc");
-  return result;
-801037c2:	8b 45 f8             	mov    -0x8(%ebp),%eax
-}
-801037c5:	83 c4 10             	add    $0x10,%esp
-801037c8:	5b                   	pop    %ebx
-801037c9:	5d                   	pop    %ebp
-801037ca:	c3                   	ret    
-
-801037cb <main>:
-// Bootstrap processor starts running C code here.
-// Allocate a real stack and switch to it, first
-// doing some setup required for memory allocator to work.
-int
-main(void)
-{
-801037cb:	55                   	push   %ebp
-801037cc:	89 e5                	mov    %esp,%ebp
-801037ce:	83 e4 f0             	and    $0xfffffff0,%esp
-801037d1:	83 ec 10             	sub    $0x10,%esp
-  kinit1(end, P2V(4*1024*1024)); // phys page allocator
-801037d4:	c7 44 24 04 00 00 40 	movl   $0x80400000,0x4(%esp)
-801037db:	80 
-801037dc:	c7 04 24 5c 6a 11 80 	movl   $0x80116a5c,(%esp)
-801037e3:	e8 51 f2 ff ff       	call   80102a39 <kinit1>
-  kvmalloc();      // kernel page table
-801037e8:	e8 ad 4d 00 00       	call   8010859a <kvmalloc>
-  mpinit();        // collect info about this machine
-801037ed:	e8 53 04 00 00       	call   80103c45 <mpinit>
-  lapicinit();
-801037f2:	e8 cb f5 ff ff       	call   80102dc2 <lapicinit>
-  seginit();       // set up segments
-801037f7:	e8 41 47 00 00       	call   80107f3d <seginit>
-  cprintf("\ncpu%d: starting xv6\n\n", cpu->id);
-801037fc:	65 a1 00 00 00 00    	mov    %gs:0x0,%eax
-80103802:	0f b6 00             	movzbl (%eax),%eax
-80103805:	0f b6 c0             	movzbl %al,%eax
-80103808:	89 44 24 04          	mov    %eax,0x4(%esp)
-8010380c:	c7 04 24 f4 93 10 80 	movl   $0x801093f4,(%esp)
-80103813:	e8 89 cb ff ff       	call   801003a1 <cprintf>
-  picinit();       // interrupt controller
-80103818:	e8 8d 06 00 00       	call   80103eaa <picinit>
-  ioapicinit();    // another interrupt controller
-8010381d:	e8 07 f1 ff ff       	call   80102929 <ioapicinit>
-  consoleinit();   // I/O devices & their interrupts
-80103822:	e8 66 d2 ff ff       	call   80100a8d <consoleinit>
-  uartinit();      // serial port
-80103827:	e8 5c 3a 00 00       	call   80107288 <uartinit>
-  pinit();         // process table
-8010382c:	e8 8e 0b 00 00       	call   801043bf <pinit>
-  tvinit();        // trap vectors
-80103831:	e8 15 35 00 00       	call   80106d4b <tvinit>
-  binit();         // buffer cache
-80103836:	e8 f9 c7 ff ff       	call   80100034 <binit>
-  fileinit();      // file table
-8010383b:	e8 28 d7 ff ff       	call   80100f68 <fileinit>
-  iinit();         // inode cache
-80103840:	e8 d6 dd ff ff       	call   8010161b <iinit>
-  ideinit();       // disk
-80103845:	e8 44 ed ff ff       	call   8010258e <ideinit>
-  if(!ismp)
-8010384a:	a1 64 33 11 80       	mov    0x80113364,%eax
-8010384f:	85 c0                	test   %eax,%eax
-80103851:	75 05                	jne    80103858 <main+0x8d>
-    timerinit();   // uniprocessor timer
-80103853:	e8 36 34 00 00       	call   80106c8e <timerinit>
-  startothers();   // start other processors
-80103858:	e8 7f 00 00 00       	call   801038dc <startothers>
-  kinit2(P2V(4*1024*1024), P2V(PHYSTOP)); // must come after startothers()
-8010385d:	c7 44 24 04 00 00 00 	movl   $0x8e000000,0x4(%esp)
-80103864:	8e 
-80103865:	c7 04 24 00 00 40 80 	movl   $0x80400000,(%esp)
-8010386c:	e8 00 f2 ff ff       	call   80102a71 <kinit2>
-  userinit();      // first user process
-80103871:	e8 84 0c 00 00       	call   801044fa <userinit>
-  // Finish setting up this processor in mpmain.
-  mpmain();
-80103876:	e8 1a 00 00 00       	call   80103895 <mpmain>
-
-8010387b <mpenter>:
-}
-
-// Other CPUs jump here from entryother.S.
-static void
-mpenter(void)
-{
-8010387b:	55                   	push   %ebp
-8010387c:	89 e5                	mov    %esp,%ebp
-8010387e:	83 ec 08             	sub    $0x8,%esp
-  switchkvm(); 
-80103881:	e8 2b 4d 00 00       	call   801085b1 <switchkvm>
-  seginit();
-80103886:	e8 b2 46 00 00       	call   80107f3d <seginit>
-  lapicinit();
-8010388b:	e8 32 f5 ff ff       	call   80102dc2 <lapicinit>
-  mpmain();
-80103890:	e8 00 00 00 00       	call   80103895 <mpmain>
-
-80103895 <mpmain>:
-}
-
-// Common CPU setup code.
-static void
-mpmain(void)
-{
-80103895:	55                   	push   %ebp
-80103896:	89 e5                	mov    %esp,%ebp
-80103898:	83 ec 18             	sub    $0x18,%esp
-  cprintf("cpu%d: starting\n", cpu->id);
-8010389b:	65 a1 00 00 00 00    	mov    %gs:0x0,%eax
-801038a1:	0f b6 00             	movzbl (%eax),%eax
-801038a4:	0f b6 c0             	movzbl %al,%eax
-801038a7:	89 44 24 04          	mov    %eax,0x4(%esp)
-801038ab:	c7 04 24 0b 94 10 80 	movl   $0x8010940b,(%esp)
-801038b2:	e8 ea ca ff ff       	call   801003a1 <cprintf>
-  idtinit();       // load idt register
-801038b7:	e8 03 36 00 00       	call   80106ebf <idtinit>
-  xchg(&cpu->started, 1); // tell startothers() we're up
-801038bc:	65 a1 00 00 00 00    	mov    %gs:0x0,%eax
-801038c2:	05 a8 00 00 00       	add    $0xa8,%eax
-801038c7:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
-801038ce:	00 
-801038cf:	89 04 24             	mov    %eax,(%esp)
-801038d2:	e8 cf fe ff ff       	call   801037a6 <xchg>
-
-  scheduler();     // start running processes
-801038d7:	e8 3c 17 00 00       	call   80105018 <scheduler>
-
-801038dc <startothers>:
-pde_t entrypgdir[];  // For entry.S
-
-// Start the non-boot (AP) processors.
-static void
-startothers(void)
-{
-801038dc:	55                   	push   %ebp
-801038dd:	89 e5                	mov    %esp,%ebp
-801038df:	53                   	push   %ebx
-801038e0:	83 ec 24             	sub    $0x24,%esp
-  char *stack;
-
-  // Write entry code to unused memory at 0x7000.
-  // The linker has placed the image of entryother.S in
-  // _binary_entryother_start.
-  code = p2v(0x7000);
-801038e3:	c7 04 24 00 70 00 00 	movl   $0x7000,(%esp)
-801038ea:	e8 aa fe ff ff       	call   80103799 <p2v>
-801038ef:	89 45 f0             	mov    %eax,-0x10(%ebp)
-  memmove(code, _binary_entryother_start, (uint)_binary_entryother_size);
-801038f2:	b8 8a 00 00 00       	mov    $0x8a,%eax
-801038f7:	89 44 24 08          	mov    %eax,0x8(%esp)
-801038fb:	c7 44 24 04 2c c5 10 	movl   $0x8010c52c,0x4(%esp)
-80103902:	80 
-80103903:	8b 45 f0             	mov    -0x10(%ebp),%eax
-80103906:	89 04 24             	mov    %eax,(%esp)
-80103909:	e8 3b 1e 00 00       	call   80105749 <memmove>
-
-  for(c = cpus; c < cpus+ncpu; c++){
-8010390e:	c7 45 f4 80 33 11 80 	movl   $0x80113380,-0xc(%ebp)
-80103915:	e9 86 00 00 00       	jmp    801039a0 <startothers+0xc4>
-    if(c == cpus+cpunum())  // We've started already.
-8010391a:	e8 00 f6 ff ff       	call   80102f1f <cpunum>
-8010391f:	69 c0 bc 00 00 00    	imul   $0xbc,%eax,%eax
-80103925:	05 80 33 11 80       	add    $0x80113380,%eax
-8010392a:	3b 45 f4             	cmp    -0xc(%ebp),%eax
-8010392d:	74 69                	je     80103998 <startothers+0xbc>
-      continue;
-
-    // Tell entryother.S what stack to use, where to enter, and what 
-    // pgdir to use. We cannot use kpgdir yet, because the AP processor
-    // is running in low  memory, so we use entrypgdir for the APs too.
-    stack = kalloc();
-8010392f:	e8 33 f2 ff ff       	call   80102b67 <kalloc>
-80103934:	89 45 ec             	mov    %eax,-0x14(%ebp)
-    *(void**)(code-4) = stack + KSTACKSIZE;
-80103937:	8b 45 f0             	mov    -0x10(%ebp),%eax
-8010393a:	83 e8 04             	sub    $0x4,%eax
-8010393d:	8b 55 ec             	mov    -0x14(%ebp),%edx
-80103940:	81 c2 00 10 00 00    	add    $0x1000,%edx
-80103946:	89 10                	mov    %edx,(%eax)
-    *(void**)(code-8) = mpenter;
-80103948:	8b 45 f0             	mov    -0x10(%ebp),%eax
-8010394b:	83 e8 08             	sub    $0x8,%eax
-8010394e:	c7 00 7b 38 10 80    	movl   $0x8010387b,(%eax)
-    *(int**)(code-12) = (void *) v2p(entrypgdir);
-80103954:	8b 45 f0             	mov    -0x10(%ebp),%eax
-80103957:	8d 58 f4             	lea    -0xc(%eax),%ebx
-8010395a:	c7 04 24 00 b0 10 80 	movl   $0x8010b000,(%esp)
-80103961:	e8 26 fe ff ff       	call   8010378c <v2p>
-80103966:	89 03                	mov    %eax,(%ebx)
-
-    lapicstartap(c->id, v2p(code));
-80103968:	8b 45 f0             	mov    -0x10(%ebp),%eax
-8010396b:	89 04 24             	mov    %eax,(%esp)
-8010396e:	e8 19 fe ff ff       	call   8010378c <v2p>
-80103973:	8b 55 f4             	mov    -0xc(%ebp),%edx
-80103976:	0f b6 12             	movzbl (%edx),%edx
-80103979:	0f b6 d2             	movzbl %dl,%edx
-8010397c:	89 44 24 04          	mov    %eax,0x4(%esp)
-80103980:	89 14 24             	mov    %edx,(%esp)
-80103983:	e8 1d f6 ff ff       	call   80102fa5 <lapicstartap>
-
-    // wait for cpu to finish mpmain()
-    while(c->started == 0)
-80103988:	90                   	nop
-80103989:	8b 45 f4             	mov    -0xc(%ebp),%eax
-8010398c:	8b 80 a8 00 00 00    	mov    0xa8(%eax),%eax
-80103992:	85 c0                	test   %eax,%eax
-80103994:	74 f3                	je     80103989 <startothers+0xad>
-80103996:	eb 01                	jmp    80103999 <startothers+0xbd>
-  code = p2v(0x7000);
-  memmove(code, _binary_entryother_start, (uint)_binary_entryother_size);
-
-  for(c = cpus; c < cpus+ncpu; c++){
-    if(c == cpus+cpunum())  // We've started already.
-      continue;
-80103998:	90                   	nop
-  // The linker has placed the image of entryother.S in
-  // _binary_entryother_start.
-  code = p2v(0x7000);
-  memmove(code, _binary_entryother_start, (uint)_binary_entryother_size);
-
-  for(c = cpus; c < cpus+ncpu; c++){
-80103999:	81 45 f4 bc 00 00 00 	addl   $0xbc,-0xc(%ebp)
-801039a0:	a1 60 39 11 80       	mov    0x80113960,%eax
-801039a5:	69 c0 bc 00 00 00    	imul   $0xbc,%eax,%eax
-801039ab:	05 80 33 11 80       	add    $0x80113380,%eax
-801039b0:	3b 45 f4             	cmp    -0xc(%ebp),%eax
-801039b3:	0f 87 61 ff ff ff    	ja     8010391a <startothers+0x3e>
-
-    // wait for cpu to finish mpmain()
-    while(c->started == 0)
-      ;
-  }
-}
-801039b9:	83 c4 24             	add    $0x24,%esp
-801039bc:	5b                   	pop    %ebx
-801039bd:	5d                   	pop    %ebp
-801039be:	c3                   	ret    
-	...
-
-801039c0 <p2v>:
-801039c0:	55                   	push   %ebp
-801039c1:	89 e5                	mov    %esp,%ebp
-801039c3:	8b 45 08             	mov    0x8(%ebp),%eax
-801039c6:	05 00 00 00 80       	add    $0x80000000,%eax
-801039cb:	5d                   	pop    %ebp
-801039cc:	c3                   	ret    
-
-801039cd <inb>:
-// Routines to let C code use special x86 instructions.
-
-static inline uchar
-inb(ushort port)
-{
-801039cd:	55                   	push   %ebp
-801039ce:	89 e5                	mov    %esp,%ebp
-801039d0:	53                   	push   %ebx
-801039d1:	83 ec 14             	sub    $0x14,%esp
-801039d4:	8b 45 08             	mov    0x8(%ebp),%eax
-801039d7:	66 89 45 e8          	mov    %ax,-0x18(%ebp)
-  uchar data;
-
-  asm volatile("in %1,%0" : "=a" (data) : "d" (port));
-801039db:	0f b7 55 e8          	movzwl -0x18(%ebp),%edx
-801039df:	66 89 55 ea          	mov    %dx,-0x16(%ebp)
-801039e3:	0f b7 55 ea          	movzwl -0x16(%ebp),%edx
-801039e7:	ec                   	in     (%dx),%al
-801039e8:	89 c3                	mov    %eax,%ebx
-801039ea:	88 5d fb             	mov    %bl,-0x5(%ebp)
-  return data;
-801039ed:	0f b6 45 fb          	movzbl -0x5(%ebp),%eax
-}
-801039f1:	83 c4 14             	add    $0x14,%esp
-801039f4:	5b                   	pop    %ebx
-801039f5:	5d                   	pop    %ebp
-801039f6:	c3                   	ret    
-
-801039f7 <outb>:
-               "memory", "cc");
-}
-
-static inline void
-outb(ushort port, uchar data)
-{
-801039f7:	55                   	push   %ebp
-801039f8:	89 e5                	mov    %esp,%ebp
-801039fa:	83 ec 08             	sub    $0x8,%esp
-801039fd:	8b 55 08             	mov    0x8(%ebp),%edx
-80103a00:	8b 45 0c             	mov    0xc(%ebp),%eax
-80103a03:	66 89 55 fc          	mov    %dx,-0x4(%ebp)
-80103a07:	88 45 f8             	mov    %al,-0x8(%ebp)
-  asm volatile("out %0,%1" : : "a" (data), "d" (port));
-80103a0a:	0f b6 45 f8          	movzbl -0x8(%ebp),%eax
-80103a0e:	0f b7 55 fc          	movzwl -0x4(%ebp),%edx
-80103a12:	ee                   	out    %al,(%dx)
-}
-80103a13:	c9                   	leave  
-80103a14:	c3                   	ret    
-
-80103a15 <mpbcpu>:
-int ncpu;
-uchar ioapicid;
-
-int
-mpbcpu(void)
-{
-80103a15:	55                   	push   %ebp
-80103a16:	89 e5                	mov    %esp,%ebp
-  return bcpu-cpus;
-80103a18:	a1 64 c6 10 80       	mov    0x8010c664,%eax
-80103a1d:	89 c2                	mov    %eax,%edx
-80103a1f:	b8 80 33 11 80       	mov    $0x80113380,%eax
-80103a24:	89 d1                	mov    %edx,%ecx
-80103a26:	29 c1                	sub    %eax,%ecx
-80103a28:	89 c8                	mov    %ecx,%eax
-80103a2a:	c1 f8 02             	sar    $0x2,%eax
-80103a2d:	69 c0 cf 46 7d 67    	imul   $0x677d46cf,%eax,%eax
-}
-80103a33:	5d                   	pop    %ebp
-80103a34:	c3                   	ret    
-
-80103a35 <sum>:
-
-static uchar
-sum(uchar *addr, int len)
-{
-80103a35:	55                   	push   %ebp
-80103a36:	89 e5                	mov    %esp,%ebp
-80103a38:	83 ec 10             	sub    $0x10,%esp
-  int i, sum;
-  
-  sum = 0;
-80103a3b:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
-  for(i=0; i<len; i++)
-80103a42:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
-80103a49:	eb 13                	jmp    80103a5e <sum+0x29>
-    sum += addr[i];
-80103a4b:	8b 45 fc             	mov    -0x4(%ebp),%eax
-80103a4e:	03 45 08             	add    0x8(%ebp),%eax
-80103a51:	0f b6 00             	movzbl (%eax),%eax
-80103a54:	0f b6 c0             	movzbl %al,%eax
-80103a57:	01 45 f8             	add    %eax,-0x8(%ebp)
-sum(uchar *addr, int len)
-{
-  int i, sum;
-  
-  sum = 0;
-  for(i=0; i<len; i++)
-80103a5a:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
-80103a5e:	8b 45 fc             	mov    -0x4(%ebp),%eax
-80103a61:	3b 45 0c             	cmp    0xc(%ebp),%eax
-80103a64:	7c e5                	jl     80103a4b <sum+0x16>
-    sum += addr[i];
-  return sum;
-80103a66:	8b 45 f8             	mov    -0x8(%ebp),%eax
-}
-80103a69:	c9                   	leave  
-80103a6a:	c3                   	ret    
-
-80103a6b <mpsearch1>:
-
-// Look for an MP structure in the len bytes at addr.
-static struct mp*
-mpsearch1(uint a, int len)
-{
-80103a6b:	55                   	push   %ebp
-80103a6c:	89 e5                	mov    %esp,%ebp
-80103a6e:	83 ec 28             	sub    $0x28,%esp
-  uchar *e, *p, *addr;
-
-  addr = p2v(a);
-80103a71:	8b 45 08             	mov    0x8(%ebp),%eax
-80103a74:	89 04 24             	mov    %eax,(%esp)
-80103a77:	e8 44 ff ff ff       	call   801039c0 <p2v>
-80103a7c:	89 45 f0             	mov    %eax,-0x10(%ebp)
-  e = addr+len;
-80103a7f:	8b 45 0c             	mov    0xc(%ebp),%eax
-80103a82:	03 45 f0             	add    -0x10(%ebp),%eax
-80103a85:	89 45 ec             	mov    %eax,-0x14(%ebp)
-  for(p = addr; p < e; p += sizeof(struct mp))
-80103a88:	8b 45 f0             	mov    -0x10(%ebp),%eax
-80103a8b:	89 45 f4             	mov    %eax,-0xc(%ebp)
-80103a8e:	eb 3f                	jmp    80103acf <mpsearch1+0x64>
-    if(memcmp(p, "_MP_", 4) == 0 && sum(p, sizeof(struct mp)) == 0)
-80103a90:	c7 44 24 08 04 00 00 	movl   $0x4,0x8(%esp)
-80103a97:	00 
-80103a98:	c7 44 24 04 1c 94 10 	movl   $0x8010941c,0x4(%esp)
-80103a9f:	80 
-80103aa0:	8b 45 f4             	mov    -0xc(%ebp),%eax
-80103aa3:	89 04 24             	mov    %eax,(%esp)
-80103aa6:	e8 42 1c 00 00       	call   801056ed <memcmp>
-80103aab:	85 c0                	test   %eax,%eax
-80103aad:	75 1c                	jne    80103acb <mpsearch1+0x60>
-80103aaf:	c7 44 24 04 10 00 00 	movl   $0x10,0x4(%esp)
-80103ab6:	00 
-80103ab7:	8b 45 f4             	mov    -0xc(%ebp),%eax
-80103aba:	89 04 24             	mov    %eax,(%esp)
-80103abd:	e8 73 ff ff ff       	call   80103a35 <sum>
-80103ac2:	84 c0                	test   %al,%al
-80103ac4:	75 05                	jne    80103acb <mpsearch1+0x60>
-      return (struct mp*)p;
-80103ac6:	8b 45 f4             	mov    -0xc(%ebp),%eax
-80103ac9:	eb 11                	jmp    80103adc <mpsearch1+0x71>
-{
-  uchar *e, *p, *addr;
-
-  addr = p2v(a);
-  e = addr+len;
-  for(p = addr; p < e; p += sizeof(struct mp))
-80103acb:	83 45 f4 10          	addl   $0x10,-0xc(%ebp)
-80103acf:	8b 45 f4             	mov    -0xc(%ebp),%eax
-80103ad2:	3b 45 ec             	cmp    -0x14(%ebp),%eax
-80103ad5:	72 b9                	jb     80103a90 <mpsearch1+0x25>
-    if(memcmp(p, "_MP_", 4) == 0 && sum(p, sizeof(struct mp)) == 0)
-      return (struct mp*)p;
-  return 0;
-80103ad7:	b8 00 00 00 00       	mov    $0x0,%eax
-}
-80103adc:	c9                   	leave  
-80103add:	c3                   	ret    
-
-80103ade <mpsearch>:
-// 1) in the first KB of the EBDA;
-// 2) in the last KB of system base memory;
-// 3) in the BIOS ROM between 0xE0000 and 0xFFFFF.
-static struct mp*
-mpsearch(void)
-{
-80103ade:	55                   	push   %ebp
-80103adf:	89 e5                	mov    %esp,%ebp
-80103ae1:	83 ec 28             	sub    $0x28,%esp
-  uchar *bda;
-  uint p;
-  struct mp *mp;
-
-  bda = (uchar *) P2V(0x400);
-80103ae4:	c7 45 f4 00 04 00 80 	movl   $0x80000400,-0xc(%ebp)
-  if((p = ((bda[0x0F]<<8)| bda[0x0E]) << 4)){
-80103aeb:	8b 45 f4             	mov    -0xc(%ebp),%eax
-80103aee:	83 c0 0f             	add    $0xf,%eax
-80103af1:	0f b6 00             	movzbl (%eax),%eax
-80103af4:	0f b6 c0             	movzbl %al,%eax
-80103af7:	89 c2                	mov    %eax,%edx
-80103af9:	c1 e2 08             	shl    $0x8,%edx
-80103afc:	8b 45 f4             	mov    -0xc(%ebp),%eax
-80103aff:	83 c0 0e             	add    $0xe,%eax
-80103b02:	0f b6 00             	movzbl (%eax),%eax
-80103b05:	0f b6 c0             	movzbl %al,%eax
-80103b08:	09 d0                	or     %edx,%eax
-80103b0a:	c1 e0 04             	shl    $0x4,%eax
-80103b0d:	89 45 f0             	mov    %eax,-0x10(%ebp)
-80103b10:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
-80103b14:	74 21                	je     80103b37 <mpsearch+0x59>
-    if((mp = mpsearch1(p, 1024)))
-80103b16:	c7 44 24 04 00 04 00 	movl   $0x400,0x4(%esp)
-80103b1d:	00 
-80103b1e:	8b 45 f0             	mov    -0x10(%ebp),%eax
-80103b21:	89 04 24             	mov    %eax,(%esp)
-80103b24:	e8 42 ff ff ff       	call   80103a6b <mpsearch1>
-80103b29:	89 45 ec             	mov    %eax,-0x14(%ebp)
-80103b2c:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
-80103b30:	74 50                	je     80103b82 <mpsearch+0xa4>
-      return mp;
-80103b32:	8b 45 ec             	mov    -0x14(%ebp),%eax
-80103b35:	eb 5f                	jmp    80103b96 <mpsearch+0xb8>
-  } else {
-    p = ((bda[0x14]<<8)|bda[0x13])*1024;
-80103b37:	8b 45 f4             	mov    -0xc(%ebp),%eax
-80103b3a:	83 c0 14             	add    $0x14,%eax
-80103b3d:	0f b6 00             	movzbl (%eax),%eax
-80103b40:	0f b6 c0             	movzbl %al,%eax
-80103b43:	89 c2                	mov    %eax,%edx
-80103b45:	c1 e2 08             	shl    $0x8,%edx
-80103b48:	8b 45 f4             	mov    -0xc(%ebp),%eax
-80103b4b:	83 c0 13             	add    $0x13,%eax
-80103b4e:	0f b6 00             	movzbl (%eax),%eax
-80103b51:	0f b6 c0             	movzbl %al,%eax
-80103b54:	09 d0                	or     %edx,%eax
-80103b56:	c1 e0 0a             	shl    $0xa,%eax
-80103b59:	89 45 f0             	mov    %eax,-0x10(%ebp)
-    if((mp = mpsearch1(p-1024, 1024)))
-80103b5c:	8b 45 f0             	mov    -0x10(%ebp),%eax
-80103b5f:	2d 00 04 00 00       	sub    $0x400,%eax
-80103b64:	c7 44 24 04 00 04 00 	movl   $0x400,0x4(%esp)
-80103b6b:	00 
-80103b6c:	89 04 24             	mov    %eax,(%esp)
-80103b6f:	e8 f7 fe ff ff       	call   80103a6b <mpsearch1>
-80103b74:	89 45 ec             	mov    %eax,-0x14(%ebp)
-80103b77:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
-80103b7b:	74 05                	je     80103b82 <mpsearch+0xa4>
-      return mp;
-80103b7d:	8b 45 ec             	mov    -0x14(%ebp),%eax
-80103b80:	eb 14                	jmp    80103b96 <mpsearch+0xb8>
-  }
-  return mpsearch1(0xF0000, 0x10000);
-80103b82:	c7 44 24 04 00 00 01 	movl   $0x10000,0x4(%esp)
-80103b89:	00 
-80103b8a:	c7 04 24 00 00 0f 00 	movl   $0xf0000,(%esp)
-80103b91:	e8 d5 fe ff ff       	call   80103a6b <mpsearch1>
-}
-80103b96:	c9                   	leave  
-80103b97:	c3                   	ret    
-
-80103b98 <mpconfig>:
-// Check for correct signature, calculate the checksum and,
-// if correct, check the version.
-// To do: check extended table checksum.
-static struct mpconf*
-mpconfig(struct mp **pmp)
-{
-80103b98:	55                   	push   %ebp
-80103b99:	89 e5                	mov    %esp,%ebp
-80103b9b:	83 ec 28             	sub    $0x28,%esp
-  struct mpconf *conf;
-  struct mp *mp;
-
-  if((mp = mpsearch()) == 0 || mp->physaddr == 0)
-80103b9e:	e8 3b ff ff ff       	call   80103ade <mpsearch>
-80103ba3:	89 45 f4             	mov    %eax,-0xc(%ebp)
-80103ba6:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
-80103baa:	74 0a                	je     80103bb6 <mpconfig+0x1e>
-80103bac:	8b 45 f4             	mov    -0xc(%ebp),%eax
-80103baf:	8b 40 04             	mov    0x4(%eax),%eax
-80103bb2:	85 c0                	test   %eax,%eax
-80103bb4:	75 0a                	jne    80103bc0 <mpconfig+0x28>
-    return 0;
-80103bb6:	b8 00 00 00 00       	mov    $0x0,%eax
-80103bbb:	e9 83 00 00 00       	jmp    80103c43 <mpconfig+0xab>
-  conf = (struct mpconf*) p2v((uint) mp->physaddr);
-80103bc0:	8b 45 f4             	mov    -0xc(%ebp),%eax
-80103bc3:	8b 40 04             	mov    0x4(%eax),%eax
-80103bc6:	89 04 24             	mov    %eax,(%esp)
-80103bc9:	e8 f2 fd ff ff       	call   801039c0 <p2v>
-80103bce:	89 45 f0             	mov    %eax,-0x10(%ebp)
-  if(memcmp(conf, "PCMP", 4) != 0)
-80103bd1:	c7 44 24 08 04 00 00 	movl   $0x4,0x8(%esp)
-80103bd8:	00 
-80103bd9:	c7 44 24 04 21 94 10 	movl   $0x80109421,0x4(%esp)
-80103be0:	80 
-80103be1:	8b 45 f0             	mov    -0x10(%ebp),%eax
-80103be4:	89 04 24             	mov    %eax,(%esp)
-80103be7:	e8 01 1b 00 00       	call   801056ed <memcmp>
-80103bec:	85 c0                	test   %eax,%eax
-80103bee:	74 07                	je     80103bf7 <mpconfig+0x5f>
-    return 0;
-80103bf0:	b8 00 00 00 00       	mov    $0x0,%eax
-80103bf5:	eb 4c                	jmp    80103c43 <mpconfig+0xab>
-  if(conf->version != 1 && conf->version != 4)
-80103bf7:	8b 45 f0             	mov    -0x10(%ebp),%eax
-80103bfa:	0f b6 40 06          	movzbl 0x6(%eax),%eax
-80103bfe:	3c 01                	cmp    $0x1,%al
-80103c00:	74 12                	je     80103c14 <mpconfig+0x7c>
-80103c02:	8b 45 f0             	mov    -0x10(%ebp),%eax
-80103c05:	0f b6 40 06          	movzbl 0x6(%eax),%eax
-80103c09:	3c 04                	cmp    $0x4,%al
-80103c0b:	74 07                	je     80103c14 <mpconfig+0x7c>
-    return 0;
-80103c0d:	b8 00 00 00 00       	mov    $0x0,%eax
-80103c12:	eb 2f                	jmp    80103c43 <mpconfig+0xab>
-  if(sum((uchar*)conf, conf->length) != 0)
-80103c14:	8b 45 f0             	mov    -0x10(%ebp),%eax
-80103c17:	0f b7 40 04          	movzwl 0x4(%eax),%eax
-80103c1b:	0f b7 c0             	movzwl %ax,%eax
-80103c1e:	89 44 24 04          	mov    %eax,0x4(%esp)
-80103c22:	8b 45 f0             	mov    -0x10(%ebp),%eax
-80103c25:	89 04 24             	mov    %eax,(%esp)
-80103c28:	e8 08 fe ff ff       	call   80103a35 <sum>
-80103c2d:	84 c0                	test   %al,%al
-80103c2f:	74 07                	je     80103c38 <mpconfig+0xa0>
-    return 0;
-80103c31:	b8 00 00 00 00       	mov    $0x0,%eax
-80103c36:	eb 0b                	jmp    80103c43 <mpconfig+0xab>
-  *pmp = mp;
-80103c38:	8b 45 08             	mov    0x8(%ebp),%eax
-80103c3b:	8b 55 f4             	mov    -0xc(%ebp),%edx
-80103c3e:	89 10                	mov    %edx,(%eax)
-  return conf;
-80103c40:	8b 45 f0             	mov    -0x10(%ebp),%eax
-}
-80103c43:	c9                   	leave  
-80103c44:	c3                   	ret    
-
-80103c45 <mpinit>:
-
-void
-mpinit(void)
-{
-80103c45:	55                   	push   %ebp
-80103c46:	89 e5                	mov    %esp,%ebp
-80103c48:	83 ec 38             	sub    $0x38,%esp
-  struct mp *mp;
-  struct mpconf *conf;
-  struct mpproc *proc;
-  struct mpioapic *ioapic;
-
-  bcpu = &cpus[0];
-80103c4b:	c7 05 64 c6 10 80 80 	movl   $0x80113380,0x8010c664
-80103c52:	33 11 80 
-  if((conf = mpconfig(&mp)) == 0)
-80103c55:	8d 45 e0             	lea    -0x20(%ebp),%eax
-80103c58:	89 04 24             	mov    %eax,(%esp)
-80103c5b:	e8 38 ff ff ff       	call   80103b98 <mpconfig>
-80103c60:	89 45 f0             	mov    %eax,-0x10(%ebp)
-80103c63:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
-80103c67:	0f 84 9c 01 00 00    	je     80103e09 <mpinit+0x1c4>
-    return;
-  ismp = 1;
-80103c6d:	c7 05 64 33 11 80 01 	movl   $0x1,0x80113364
-80103c74:	00 00 00 
-  lapic = (uint*)conf->lapicaddr;
-80103c77:	8b 45 f0             	mov    -0x10(%ebp),%eax
-80103c7a:	8b 40 24             	mov    0x24(%eax),%eax
-80103c7d:	a3 7c 32 11 80       	mov    %eax,0x8011327c
-  for(p=(uchar*)(conf+1), e=(uchar*)conf+conf->length; p<e; ){
-80103c82:	8b 45 f0             	mov    -0x10(%ebp),%eax
-80103c85:	83 c0 2c             	add    $0x2c,%eax
-80103c88:	89 45 f4             	mov    %eax,-0xc(%ebp)
-80103c8b:	8b 45 f0             	mov    -0x10(%ebp),%eax
-80103c8e:	0f b7 40 04          	movzwl 0x4(%eax),%eax
-80103c92:	0f b7 c0             	movzwl %ax,%eax
-80103c95:	03 45 f0             	add    -0x10(%ebp),%eax
-80103c98:	89 45 ec             	mov    %eax,-0x14(%ebp)
-80103c9b:	e9 f4 00 00 00       	jmp    80103d94 <mpinit+0x14f>
-    switch(*p){
-80103ca0:	8b 45 f4             	mov    -0xc(%ebp),%eax
-80103ca3:	0f b6 00             	movzbl (%eax),%eax
-80103ca6:	0f b6 c0             	movzbl %al,%eax
-80103ca9:	83 f8 04             	cmp    $0x4,%eax
-80103cac:	0f 87 bf 00 00 00    	ja     80103d71 <mpinit+0x12c>
-80103cb2:	8b 04 85 64 94 10 80 	mov    -0x7fef6b9c(,%eax,4),%eax
-80103cb9:	ff e0                	jmp    *%eax
-    case MPPROC:
-      proc = (struct mpproc*)p;
-80103cbb:	8b 45 f4             	mov    -0xc(%ebp),%eax
-80103cbe:	89 45 e8             	mov    %eax,-0x18(%ebp)
-      if(ncpu != proc->apicid){
-80103cc1:	8b 45 e8             	mov    -0x18(%ebp),%eax
-80103cc4:	0f b6 40 01          	movzbl 0x1(%eax),%eax
-80103cc8:	0f b6 d0             	movzbl %al,%edx
-80103ccb:	a1 60 39 11 80       	mov    0x80113960,%eax
-80103cd0:	39 c2                	cmp    %eax,%edx
-80103cd2:	74 2d                	je     80103d01 <mpinit+0xbc>
-        cprintf("mpinit: ncpu=%d apicid=%d\n", ncpu, proc->apicid);
-80103cd4:	8b 45 e8             	mov    -0x18(%ebp),%eax
-80103cd7:	0f b6 40 01          	movzbl 0x1(%eax),%eax
-80103cdb:	0f b6 d0             	movzbl %al,%edx
-80103cde:	a1 60 39 11 80       	mov    0x80113960,%eax
-80103ce3:	89 54 24 08          	mov    %edx,0x8(%esp)
-80103ce7:	89 44 24 04          	mov    %eax,0x4(%esp)
-80103ceb:	c7 04 24 26 94 10 80 	movl   $0x80109426,(%esp)
-80103cf2:	e8 aa c6 ff ff       	call   801003a1 <cprintf>
-        ismp = 0;
-80103cf7:	c7 05 64 33 11 80 00 	movl   $0x0,0x80113364
-80103cfe:	00 00 00 
-      }
-      if(proc->flags & MPBOOT)
-80103d01:	8b 45 e8             	mov    -0x18(%ebp),%eax
-80103d04:	0f b6 40 03          	movzbl 0x3(%eax),%eax
-80103d08:	0f b6 c0             	movzbl %al,%eax
-80103d0b:	83 e0 02             	and    $0x2,%eax
-80103d0e:	85 c0                	test   %eax,%eax
-80103d10:	74 15                	je     80103d27 <mpinit+0xe2>
-        bcpu = &cpus[ncpu];
-80103d12:	a1 60 39 11 80       	mov    0x80113960,%eax
-80103d17:	69 c0 bc 00 00 00    	imul   $0xbc,%eax,%eax
-80103d1d:	05 80 33 11 80       	add    $0x80113380,%eax
-80103d22:	a3 64 c6 10 80       	mov    %eax,0x8010c664
-      cpus[ncpu].id = ncpu;
-80103d27:	8b 15 60 39 11 80    	mov    0x80113960,%edx
-80103d2d:	a1 60 39 11 80       	mov    0x80113960,%eax
-80103d32:	69 d2 bc 00 00 00    	imul   $0xbc,%edx,%edx
-80103d38:	81 c2 80 33 11 80    	add    $0x80113380,%edx
-80103d3e:	88 02                	mov    %al,(%edx)
-      ncpu++;
-80103d40:	a1 60 39 11 80       	mov    0x80113960,%eax
-80103d45:	83 c0 01             	add    $0x1,%eax
-80103d48:	a3 60 39 11 80       	mov    %eax,0x80113960
-      p += sizeof(struct mpproc);
-80103d4d:	83 45 f4 14          	addl   $0x14,-0xc(%ebp)
-      continue;
-80103d51:	eb 41                	jmp    80103d94 <mpinit+0x14f>
-    case MPIOAPIC:
-      ioapic = (struct mpioapic*)p;
-80103d53:	8b 45 f4             	mov    -0xc(%ebp),%eax
-80103d56:	89 45 e4             	mov    %eax,-0x1c(%ebp)
-      ioapicid = ioapic->apicno;
-80103d59:	8b 45 e4             	mov    -0x1c(%ebp),%eax
-80103d5c:	0f b6 40 01          	movzbl 0x1(%eax),%eax
-80103d60:	a2 60 33 11 80       	mov    %al,0x80113360
-      p += sizeof(struct mpioapic);
-80103d65:	83 45 f4 08          	addl   $0x8,-0xc(%ebp)
-      continue;
-80103d69:	eb 29                	jmp    80103d94 <mpinit+0x14f>
-    case MPBUS:
-    case MPIOINTR:
-    case MPLINTR:
-      p += 8;
-80103d6b:	83 45 f4 08          	addl   $0x8,-0xc(%ebp)
-      continue;
-80103d6f:	eb 23                	jmp    80103d94 <mpinit+0x14f>
-    default:
-      cprintf("mpinit: unknown config type %x\n", *p);
-80103d71:	8b 45 f4             	mov    -0xc(%ebp),%eax
-80103d74:	0f b6 00             	movzbl (%eax),%eax
-80103d77:	0f b6 c0             	movzbl %al,%eax
-80103d7a:	89 44 24 04          	mov    %eax,0x4(%esp)
-80103d7e:	c7 04 24 44 94 10 80 	movl   $0x80109444,(%esp)
-80103d85:	e8 17 c6 ff ff       	call   801003a1 <cprintf>
-      ismp = 0;
-80103d8a:	c7 05 64 33 11 80 00 	movl   $0x0,0x80113364
-80103d91:	00 00 00 
-  bcpu = &cpus[0];
-  if((conf = mpconfig(&mp)) == 0)
-    return;
-  ismp = 1;
-  lapic = (uint*)conf->lapicaddr;
-  for(p=(uchar*)(conf+1), e=(uchar*)conf+conf->length; p<e; ){
-80103d94:	8b 45 f4             	mov    -0xc(%ebp),%eax
-80103d97:	3b 45 ec             	cmp    -0x14(%ebp),%eax
-80103d9a:	0f 82 00 ff ff ff    	jb     80103ca0 <mpinit+0x5b>
-    default:
-      cprintf("mpinit: unknown config type %x\n", *p);
-      ismp = 0;
-    }
-  }
-  if(!ismp){
-80103da0:	a1 64 33 11 80       	mov    0x80113364,%eax
-80103da5:	85 c0                	test   %eax,%eax
-80103da7:	75 1d                	jne    80103dc6 <mpinit+0x181>
-    // Didn't like what we found; fall back to no MP.
-    ncpu = 1;
-80103da9:	c7 05 60 39 11 80 01 	movl   $0x1,0x80113960
-80103db0:	00 00 00 
-    lapic = 0;
-80103db3:	c7 05 7c 32 11 80 00 	movl   $0x0,0x8011327c
-80103dba:	00 00 00 
-    ioapicid = 0;
-80103dbd:	c6 05 60 33 11 80 00 	movb   $0x0,0x80113360
-    return;
-80103dc4:	eb 44                	jmp    80103e0a <mpinit+0x1c5>
-  }
-
-  if(mp->imcrp){
-80103dc6:	8b 45 e0             	mov    -0x20(%ebp),%eax
-80103dc9:	0f b6 40 0c          	movzbl 0xc(%eax),%eax
-80103dcd:	84 c0                	test   %al,%al
-80103dcf:	74 39                	je     80103e0a <mpinit+0x1c5>
-    // Bochs doesn't support IMCR, so this doesn't run on Bochs.
-    // But it would on real hardware.
-    outb(0x22, 0x70);   // Select IMCR
-80103dd1:	c7 44 24 04 70 00 00 	movl   $0x70,0x4(%esp)
-80103dd8:	00 
-80103dd9:	c7 04 24 22 00 00 00 	movl   $0x22,(%esp)
-80103de0:	e8 12 fc ff ff       	call   801039f7 <outb>
-    outb(0x23, inb(0x23) | 1);  // Mask external interrupts.
-80103de5:	c7 04 24 23 00 00 00 	movl   $0x23,(%esp)
-80103dec:	e8 dc fb ff ff       	call   801039cd <inb>
-80103df1:	83 c8 01             	or     $0x1,%eax
-80103df4:	0f b6 c0             	movzbl %al,%eax
-80103df7:	89 44 24 04          	mov    %eax,0x4(%esp)
-80103dfb:	c7 04 24 23 00 00 00 	movl   $0x23,(%esp)
-80103e02:	e8 f0 fb ff ff       	call   801039f7 <outb>
-80103e07:	eb 01                	jmp    80103e0a <mpinit+0x1c5>
-  struct mpproc *proc;
-  struct mpioapic *ioapic;
-
-  bcpu = &cpus[0];
-  if((conf = mpconfig(&mp)) == 0)
-    return;
-80103e09:	90                   	nop
-    // Bochs doesn't support IMCR, so this doesn't run on Bochs.
-    // But it would on real hardware.
-    outb(0x22, 0x70);   // Select IMCR
-    outb(0x23, inb(0x23) | 1);  // Mask external interrupts.
-  }
-}
-80103e0a:	c9                   	leave  
-80103e0b:	c3                   	ret    
-
-80103e0c <outb>:
-               "memory", "cc");
-}
-
-static inline void
-outb(ushort port, uchar data)
-{
-80103e0c:	55                   	push   %ebp
-80103e0d:	89 e5                	mov    %esp,%ebp
-80103e0f:	83 ec 08             	sub    $0x8,%esp
-80103e12:	8b 55 08             	mov    0x8(%ebp),%edx
-80103e15:	8b 45 0c             	mov    0xc(%ebp),%eax
-80103e18:	66 89 55 fc          	mov    %dx,-0x4(%ebp)
-80103e1c:	88 45 f8             	mov    %al,-0x8(%ebp)
-  asm volatile("out %0,%1" : : "a" (data), "d" (port));
-80103e1f:	0f b6 45 f8          	movzbl -0x8(%ebp),%eax
-80103e23:	0f b7 55 fc          	movzwl -0x4(%ebp),%edx
-80103e27:	ee                   	out    %al,(%dx)
-}
-80103e28:	c9                   	leave  
-80103e29:	c3                   	ret    
-
-80103e2a <picsetmask>:
-// Initial IRQ mask has interrupt 2 enabled (for slave 8259A).
-static ushort irqmask = 0xFFFF & ~(1<<IRQ_SLAVE);
-
-static void
-picsetmask(ushort mask)
-{
-80103e2a:	55                   	push   %ebp
-80103e2b:	89 e5                	mov    %esp,%ebp
-80103e2d:	83 ec 0c             	sub    $0xc,%esp
-80103e30:	8b 45 08             	mov    0x8(%ebp),%eax
-80103e33:	66 89 45 fc          	mov    %ax,-0x4(%ebp)
-  irqmask = mask;
-80103e37:	0f b7 45 fc          	movzwl -0x4(%ebp),%eax
-80103e3b:	66 a3 00 c0 10 80    	mov    %ax,0x8010c000
-  outb(IO_PIC1+1, mask);
-80103e41:	0f b7 45 fc          	movzwl -0x4(%ebp),%eax
-80103e45:	0f b6 c0             	movzbl %al,%eax
-80103e48:	89 44 24 04          	mov    %eax,0x4(%esp)
-80103e4c:	c7 04 24 21 00 00 00 	movl   $0x21,(%esp)
-80103e53:	e8 b4 ff ff ff       	call   80103e0c <outb>
-  outb(IO_PIC2+1, mask >> 8);
-80103e58:	0f b7 45 fc          	movzwl -0x4(%ebp),%eax
-80103e5c:	66 c1 e8 08          	shr    $0x8,%ax
-80103e60:	0f b6 c0             	movzbl %al,%eax
-80103e63:	89 44 24 04          	mov    %eax,0x4(%esp)
-80103e67:	c7 04 24 a1 00 00 00 	movl   $0xa1,(%esp)
-80103e6e:	e8 99 ff ff ff       	call   80103e0c <outb>
-}
-80103e73:	c9                   	leave  
-80103e74:	c3                   	ret    
-
-80103e75 <picenable>:
-
-void
-picenable(int irq)
-{
-80103e75:	55                   	push   %ebp
-80103e76:	89 e5                	mov    %esp,%ebp
-80103e78:	53                   	push   %ebx
-80103e79:	83 ec 04             	sub    $0x4,%esp
-  picsetmask(irqmask & ~(1<<irq));
-80103e7c:	8b 45 08             	mov    0x8(%ebp),%eax
-80103e7f:	ba 01 00 00 00       	mov    $0x1,%edx
-80103e84:	89 d3                	mov    %edx,%ebx
-80103e86:	89 c1                	mov    %eax,%ecx
-80103e88:	d3 e3                	shl    %cl,%ebx
-80103e8a:	89 d8                	mov    %ebx,%eax
-80103e8c:	89 c2                	mov    %eax,%edx
-80103e8e:	f7 d2                	not    %edx
-80103e90:	0f b7 05 00 c0 10 80 	movzwl 0x8010c000,%eax
-80103e97:	21 d0                	and    %edx,%eax
-80103e99:	0f b7 c0             	movzwl %ax,%eax
-80103e9c:	89 04 24             	mov    %eax,(%esp)
-80103e9f:	e8 86 ff ff ff       	call   80103e2a <picsetmask>
-}
-80103ea4:	83 c4 04             	add    $0x4,%esp
-80103ea7:	5b                   	pop    %ebx
-80103ea8:	5d                   	pop    %ebp
-80103ea9:	c3                   	ret    
-
-80103eaa <picinit>:
-
-// Initialize the 8259A interrupt controllers.
-void
-picinit(void)
-{
-80103eaa:	55                   	push   %ebp
-80103eab:	89 e5                	mov    %esp,%ebp
-80103ead:	83 ec 08             	sub    $0x8,%esp
-  // mask all interrupts
-  outb(IO_PIC1+1, 0xFF);
-80103eb0:	c7 44 24 04 ff 00 00 	movl   $0xff,0x4(%esp)
-80103eb7:	00 
-80103eb8:	c7 04 24 21 00 00 00 	movl   $0x21,(%esp)
-80103ebf:	e8 48 ff ff ff       	call   80103e0c <outb>
-  outb(IO_PIC2+1, 0xFF);
-80103ec4:	c7 44 24 04 ff 00 00 	movl   $0xff,0x4(%esp)
-80103ecb:	00 
-80103ecc:	c7 04 24 a1 00 00 00 	movl   $0xa1,(%esp)
-80103ed3:	e8 34 ff ff ff       	call   80103e0c <outb>
-
-  // ICW1:  0001g0hi
-  //    g:  0 = edge triggering, 1 = level triggering
-  //    h:  0 = cascaded PICs, 1 = master only
-  //    i:  0 = no ICW4, 1 = ICW4 required
-  outb(IO_PIC1, 0x11);
-80103ed8:	c7 44 24 04 11 00 00 	movl   $0x11,0x4(%esp)
-80103edf:	00 
-80103ee0:	c7 04 24 20 00 00 00 	movl   $0x20,(%esp)
-80103ee7:	e8 20 ff ff ff       	call   80103e0c <outb>
-
-  // ICW2:  Vector offset
-  outb(IO_PIC1+1, T_IRQ0);
-80103eec:	c7 44 24 04 20 00 00 	movl   $0x20,0x4(%esp)
-80103ef3:	00 
-80103ef4:	c7 04 24 21 00 00 00 	movl   $0x21,(%esp)
-80103efb:	e8 0c ff ff ff       	call   80103e0c <outb>
-
-  // ICW3:  (master PIC) bit mask of IR lines connected to slaves
-  //        (slave PIC) 3-bit # of slave's connection to master
-  outb(IO_PIC1+1, 1<<IRQ_SLAVE);
-80103f00:	c7 44 24 04 04 00 00 	movl   $0x4,0x4(%esp)
-80103f07:	00 
-80103f08:	c7 04 24 21 00 00 00 	movl   $0x21,(%esp)
-80103f0f:	e8 f8 fe ff ff       	call   80103e0c <outb>
-  //    m:  0 = slave PIC, 1 = master PIC
-  //      (ignored when b is 0, as the master/slave role
-  //      can be hardwired).
-  //    a:  1 = Automatic EOI mode
-  //    p:  0 = MCS-80/85 mode, 1 = intel x86 mode
-  outb(IO_PIC1+1, 0x3);
-80103f14:	c7 44 24 04 03 00 00 	movl   $0x3,0x4(%esp)
-80103f1b:	00 
-80103f1c:	c7 04 24 21 00 00 00 	movl   $0x21,(%esp)
-80103f23:	e8 e4 fe ff ff       	call   80103e0c <outb>
-
-  // Set up slave (8259A-2)
-  outb(IO_PIC2, 0x11);                  // ICW1
-80103f28:	c7 44 24 04 11 00 00 	movl   $0x11,0x4(%esp)
-80103f2f:	00 
-80103f30:	c7 04 24 a0 00 00 00 	movl   $0xa0,(%esp)
-80103f37:	e8 d0 fe ff ff       	call   80103e0c <outb>
-  outb(IO_PIC2+1, T_IRQ0 + 8);      // ICW2
-80103f3c:	c7 44 24 04 28 00 00 	movl   $0x28,0x4(%esp)
-80103f43:	00 
-80103f44:	c7 04 24 a1 00 00 00 	movl   $0xa1,(%esp)
-80103f4b:	e8 bc fe ff ff       	call   80103e0c <outb>
-  outb(IO_PIC2+1, IRQ_SLAVE);           // ICW3
-80103f50:	c7 44 24 04 02 00 00 	movl   $0x2,0x4(%esp)
-80103f57:	00 
-80103f58:	c7 04 24 a1 00 00 00 	movl   $0xa1,(%esp)
-80103f5f:	e8 a8 fe ff ff       	call   80103e0c <outb>
-  // NB Automatic EOI mode doesn't tend to work on the slave.
-  // Linux source code says it's "to be investigated".
-  outb(IO_PIC2+1, 0x3);                 // ICW4
-80103f64:	c7 44 24 04 03 00 00 	movl   $0x3,0x4(%esp)
-80103f6b:	00 
-80103f6c:	c7 04 24 a1 00 00 00 	movl   $0xa1,(%esp)
-80103f73:	e8 94 fe ff ff       	call   80103e0c <outb>
-
-  // OCW3:  0ef01prs
-  //   ef:  0x = NOP, 10 = clear specific mask, 11 = set specific mask
-  //    p:  0 = no polling, 1 = polling mode
-  //   rs:  0x = NOP, 10 = read IRR, 11 = read ISR
-  outb(IO_PIC1, 0x68);             // clear specific mask
-80103f78:	c7 44 24 04 68 00 00 	movl   $0x68,0x4(%esp)
-80103f7f:	00 
-80103f80:	c7 04 24 20 00 00 00 	movl   $0x20,(%esp)
-80103f87:	e8 80 fe ff ff       	call   80103e0c <outb>
-  outb(IO_PIC1, 0x0a);             // read IRR by default
-80103f8c:	c7 44 24 04 0a 00 00 	movl   $0xa,0x4(%esp)
-80103f93:	00 
-80103f94:	c7 04 24 20 00 00 00 	movl   $0x20,(%esp)
-80103f9b:	e8 6c fe ff ff       	call   80103e0c <outb>
-
-  outb(IO_PIC2, 0x68);             // OCW3
-80103fa0:	c7 44 24 04 68 00 00 	movl   $0x68,0x4(%esp)
-80103fa7:	00 
-80103fa8:	c7 04 24 a0 00 00 00 	movl   $0xa0,(%esp)
-80103faf:	e8 58 fe ff ff       	call   80103e0c <outb>
-  outb(IO_PIC2, 0x0a);             // OCW3
-80103fb4:	c7 44 24 04 0a 00 00 	movl   $0xa,0x4(%esp)
-80103fbb:	00 
-80103fbc:	c7 04 24 a0 00 00 00 	movl   $0xa0,(%esp)
-80103fc3:	e8 44 fe ff ff       	call   80103e0c <outb>
-
-  if(irqmask != 0xFFFF)
-80103fc8:	0f b7 05 00 c0 10 80 	movzwl 0x8010c000,%eax
-80103fcf:	66 83 f8 ff          	cmp    $0xffff,%ax
-80103fd3:	74 12                	je     80103fe7 <picinit+0x13d>
-    picsetmask(irqmask);
-80103fd5:	0f b7 05 00 c0 10 80 	movzwl 0x8010c000,%eax
-80103fdc:	0f b7 c0             	movzwl %ax,%eax
-80103fdf:	89 04 24             	mov    %eax,(%esp)
-80103fe2:	e8 43 fe ff ff       	call   80103e2a <picsetmask>
-}
-80103fe7:	c9                   	leave  
-80103fe8:	c3                   	ret    
-80103fe9:	00 00                	add    %al,(%eax)
-	...
-
-80103fec <pipealloc>:
-  int writeopen;  // write fd is still open
-};
-
-int
-pipealloc(struct file **f0, struct file **f1)
-{
-80103fec:	55                   	push   %ebp
-80103fed:	89 e5                	mov    %esp,%ebp
-80103fef:	83 ec 28             	sub    $0x28,%esp
-  struct pipe *p;
-
-  p = 0;
-80103ff2:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
-  *f0 = *f1 = 0;
-80103ff9:	8b 45 0c             	mov    0xc(%ebp),%eax
-80103ffc:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
-80104002:	8b 45 0c             	mov    0xc(%ebp),%eax
-80104005:	8b 10                	mov    (%eax),%edx
-80104007:	8b 45 08             	mov    0x8(%ebp),%eax
-8010400a:	89 10                	mov    %edx,(%eax)
-  if((*f0 = filealloc()) == 0 || (*f1 = filealloc()) == 0)
-8010400c:	e8 73 cf ff ff       	call   80100f84 <filealloc>
-80104011:	8b 55 08             	mov    0x8(%ebp),%edx
-80104014:	89 02                	mov    %eax,(%edx)
-80104016:	8b 45 08             	mov    0x8(%ebp),%eax
-80104019:	8b 00                	mov    (%eax),%eax
-8010401b:	85 c0                	test   %eax,%eax
-8010401d:	0f 84 c8 00 00 00    	je     801040eb <pipealloc+0xff>
-80104023:	e8 5c cf ff ff       	call   80100f84 <filealloc>
-80104028:	8b 55 0c             	mov    0xc(%ebp),%edx
-8010402b:	89 02                	mov    %eax,(%edx)
-8010402d:	8b 45 0c             	mov    0xc(%ebp),%eax
-80104030:	8b 00                	mov    (%eax),%eax
-80104032:	85 c0                	test   %eax,%eax
-80104034:	0f 84 b1 00 00 00    	je     801040eb <pipealloc+0xff>
-    goto bad;
-  if((p = (struct pipe*)kalloc()) == 0)
-8010403a:	e8 28 eb ff ff       	call   80102b67 <kalloc>
-8010403f:	89 45 f4             	mov    %eax,-0xc(%ebp)
-80104042:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
-80104046:	0f 84 9e 00 00 00    	je     801040ea <pipealloc+0xfe>
-    goto bad;
-  p->readopen = 1;
-8010404c:	8b 45 f4             	mov    -0xc(%ebp),%eax
-8010404f:	c7 80 3c 02 00 00 01 	movl   $0x1,0x23c(%eax)
-80104056:	00 00 00 
-  p->writeopen = 1;
-80104059:	8b 45 f4             	mov    -0xc(%ebp),%eax
-8010405c:	c7 80 40 02 00 00 01 	movl   $0x1,0x240(%eax)
-80104063:	00 00 00 
-  p->nwrite = 0;
-80104066:	8b 45 f4             	mov    -0xc(%ebp),%eax
-80104069:	c7 80 38 02 00 00 00 	movl   $0x0,0x238(%eax)
-80104070:	00 00 00 
-  p->nread = 0;
-80104073:	8b 45 f4             	mov    -0xc(%ebp),%eax
-80104076:	c7 80 34 02 00 00 00 	movl   $0x0,0x234(%eax)
-8010407d:	00 00 00 
-  initlock(&p->lock, "pipe");
-80104080:	8b 45 f4             	mov    -0xc(%ebp),%eax
-80104083:	c7 44 24 04 78 94 10 	movl   $0x80109478,0x4(%esp)
-8010408a:	80 
-8010408b:	89 04 24             	mov    %eax,(%esp)
-8010408e:	e8 73 13 00 00       	call   80105406 <initlock>
-  (*f0)->type = FD_PIPE;
-80104093:	8b 45 08             	mov    0x8(%ebp),%eax
-80104096:	8b 00                	mov    (%eax),%eax
-80104098:	c7 00 01 00 00 00    	movl   $0x1,(%eax)
-  (*f0)->readable = 1;
-8010409e:	8b 45 08             	mov    0x8(%ebp),%eax
-801040a1:	8b 00                	mov    (%eax),%eax
-801040a3:	c6 40 08 01          	movb   $0x1,0x8(%eax)
-  (*f0)->writable = 0;
-801040a7:	8b 45 08             	mov    0x8(%ebp),%eax
-801040aa:	8b 00                	mov    (%eax),%eax
-801040ac:	c6 40 09 00          	movb   $0x0,0x9(%eax)
-  (*f0)->pipe = p;
-801040b0:	8b 45 08             	mov    0x8(%ebp),%eax
-801040b3:	8b 00                	mov    (%eax),%eax
-801040b5:	8b 55 f4             	mov    -0xc(%ebp),%edx
-801040b8:	89 50 0c             	mov    %edx,0xc(%eax)
-  (*f1)->type = FD_PIPE;
-801040bb:	8b 45 0c             	mov    0xc(%ebp),%eax
-801040be:	8b 00                	mov    (%eax),%eax
-801040c0:	c7 00 01 00 00 00    	movl   $0x1,(%eax)
-  (*f1)->readable = 0;
-801040c6:	8b 45 0c             	mov    0xc(%ebp),%eax
-801040c9:	8b 00                	mov    (%eax),%eax
-801040cb:	c6 40 08 00          	movb   $0x0,0x8(%eax)
-  (*f1)->writable = 1;
-801040cf:	8b 45 0c             	mov    0xc(%ebp),%eax
-801040d2:	8b 00                	mov    (%eax),%eax
-801040d4:	c6 40 09 01          	movb   $0x1,0x9(%eax)
-  (*f1)->pipe = p;
-801040d8:	8b 45 0c             	mov    0xc(%ebp),%eax
-801040db:	8b 00                	mov    (%eax),%eax
-801040dd:	8b 55 f4             	mov    -0xc(%ebp),%edx
-801040e0:	89 50 0c             	mov    %edx,0xc(%eax)
-  return 0;
-801040e3:	b8 00 00 00 00       	mov    $0x0,%eax
-801040e8:	eb 43                	jmp    8010412d <pipealloc+0x141>
-  p = 0;
-  *f0 = *f1 = 0;
-  if((*f0 = filealloc()) == 0 || (*f1 = filealloc()) == 0)
-    goto bad;
-  if((p = (struct pipe*)kalloc()) == 0)
-    goto bad;
-801040ea:	90                   	nop
-  (*f1)->pipe = p;
-  return 0;
-
-//PAGEBREAK: 20
- bad:
-  if(p)
-801040eb:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
-801040ef:	74 0b                	je     801040fc <pipealloc+0x110>
-    kfree((char*)p);
-801040f1:	8b 45 f4             	mov    -0xc(%ebp),%eax
-801040f4:	89 04 24             	mov    %eax,(%esp)
-801040f7:	e8 d2 e9 ff ff       	call   80102ace <kfree>
-  if(*f0)
-801040fc:	8b 45 08             	mov    0x8(%ebp),%eax
-801040ff:	8b 00                	mov    (%eax),%eax
-80104101:	85 c0                	test   %eax,%eax
-80104103:	74 0d                	je     80104112 <pipealloc+0x126>
-    fileclose(*f0);
-80104105:	8b 45 08             	mov    0x8(%ebp),%eax
-80104108:	8b 00                	mov    (%eax),%eax
-8010410a:	89 04 24             	mov    %eax,(%esp)
-8010410d:	e8 1a cf ff ff       	call   8010102c <fileclose>
-  if(*f1)
-80104112:	8b 45 0c             	mov    0xc(%ebp),%eax
-80104115:	8b 00                	mov    (%eax),%eax
-80104117:	85 c0                	test   %eax,%eax
-80104119:	74 0d                	je     80104128 <pipealloc+0x13c>
-    fileclose(*f1);
-8010411b:	8b 45 0c             	mov    0xc(%ebp),%eax
-8010411e:	8b 00                	mov    (%eax),%eax
-80104120:	89 04 24             	mov    %eax,(%esp)
-80104123:	e8 04 cf ff ff       	call   8010102c <fileclose>
-  return -1;
-80104128:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
-}
-8010412d:	c9                   	leave  
-8010412e:	c3                   	ret    
-
-8010412f <pipeclose>:
-
-void
-pipeclose(struct pipe *p, int writable)
-{
-8010412f:	55                   	push   %ebp
-80104130:	89 e5                	mov    %esp,%ebp
-80104132:	83 ec 18             	sub    $0x18,%esp
-  acquire(&p->lock);
-80104135:	8b 45 08             	mov    0x8(%ebp),%eax
-80104138:	89 04 24             	mov    %eax,(%esp)
-8010413b:	e8 e7 12 00 00       	call   80105427 <acquire>
-  if(writable){
-80104140:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
-80104144:	74 1f                	je     80104165 <pipeclose+0x36>
-    p->writeopen = 0;
-80104146:	8b 45 08             	mov    0x8(%ebp),%eax
-80104149:	c7 80 40 02 00 00 00 	movl   $0x0,0x240(%eax)
-80104150:	00 00 00 
-    wakeup(&p->nread);
-80104153:	8b 45 08             	mov    0x8(%ebp),%eax
-80104156:	05 34 02 00 00       	add    $0x234,%eax
-8010415b:	89 04 24             	mov    %eax,(%esp)
-8010415e:	e8 ba 10 00 00       	call   8010521d <wakeup>
-80104163:	eb 1d                	jmp    80104182 <pipeclose+0x53>
-  } else {
-    p->readopen = 0;
-80104165:	8b 45 08             	mov    0x8(%ebp),%eax
-80104168:	c7 80 3c 02 00 00 00 	movl   $0x0,0x23c(%eax)
-8010416f:	00 00 00 
-    wakeup(&p->nwrite);
-80104172:	8b 45 08             	mov    0x8(%ebp),%eax
-80104175:	05 38 02 00 00       	add    $0x238,%eax
-8010417a:	89 04 24             	mov    %eax,(%esp)
-8010417d:	e8 9b 10 00 00       	call   8010521d <wakeup>
-  }
-  if(p->readopen == 0 && p->writeopen == 0){
-80104182:	8b 45 08             	mov    0x8(%ebp),%eax
-80104185:	8b 80 3c 02 00 00    	mov    0x23c(%eax),%eax
-8010418b:	85 c0                	test   %eax,%eax
-8010418d:	75 25                	jne    801041b4 <pipeclose+0x85>
-8010418f:	8b 45 08             	mov    0x8(%ebp),%eax
-80104192:	8b 80 40 02 00 00    	mov    0x240(%eax),%eax
-80104198:	85 c0                	test   %eax,%eax
-8010419a:	75 18                	jne    801041b4 <pipeclose+0x85>
-    release(&p->lock);
-8010419c:	8b 45 08             	mov    0x8(%ebp),%eax
-8010419f:	89 04 24             	mov    %eax,(%esp)
-801041a2:	e8 e2 12 00 00       	call   80105489 <release>
-    kfree((char*)p);
-801041a7:	8b 45 08             	mov    0x8(%ebp),%eax
-801041aa:	89 04 24             	mov    %eax,(%esp)
-801041ad:	e8 1c e9 ff ff       	call   80102ace <kfree>
-801041b2:	eb 0b                	jmp    801041bf <pipeclose+0x90>
-  } else
-    release(&p->lock);
-801041b4:	8b 45 08             	mov    0x8(%ebp),%eax
-801041b7:	89 04 24             	mov    %eax,(%esp)
-801041ba:	e8 ca 12 00 00       	call   80105489 <release>
-}
-801041bf:	c9                   	leave  
-801041c0:	c3                   	ret    
-
-801041c1 <pipewrite>:
-
-//PAGEBREAK: 40
-int
-pipewrite(struct pipe *p, char *addr, int n)
-{
-801041c1:	55                   	push   %ebp
-801041c2:	89 e5                	mov    %esp,%ebp
-801041c4:	53                   	push   %ebx
-801041c5:	83 ec 24             	sub    $0x24,%esp
-  int i;
-
-  acquire(&p->lock);
-801041c8:	8b 45 08             	mov    0x8(%ebp),%eax
-801041cb:	89 04 24             	mov    %eax,(%esp)
-801041ce:	e8 54 12 00 00       	call   80105427 <acquire>
-  for(i = 0; i < n; i++){
-801041d3:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
-801041da:	e9 a6 00 00 00       	jmp    80104285 <pipewrite+0xc4>
-    while(p->nwrite == p->nread + PIPESIZE){  //DOC: pipewrite-full
-      if(p->readopen == 0 || proc->killed){
-801041df:	8b 45 08             	mov    0x8(%ebp),%eax
-801041e2:	8b 80 3c 02 00 00    	mov    0x23c(%eax),%eax
-801041e8:	85 c0                	test   %eax,%eax
-801041ea:	74 0d                	je     801041f9 <pipewrite+0x38>
-801041ec:	65 a1 04 00 00 00    	mov    %gs:0x4,%eax
-801041f2:	8b 40 28             	mov    0x28(%eax),%eax
-801041f5:	85 c0                	test   %eax,%eax
-801041f7:	74 15                	je     8010420e <pipewrite+0x4d>
-        release(&p->lock);
-801041f9:	8b 45 08             	mov    0x8(%ebp),%eax
-801041fc:	89 04 24             	mov    %eax,(%esp)
-801041ff:	e8 85 12 00 00       	call   80105489 <release>
-        return -1;
-80104204:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
-80104209:	e9 9d 00 00 00       	jmp    801042ab <pipewrite+0xea>
-      }
-      wakeup(&p->nread);
-8010420e:	8b 45 08             	mov    0x8(%ebp),%eax
-80104211:	05 34 02 00 00       	add    $0x234,%eax
-80104216:	89 04 24             	mov    %eax,(%esp)
-80104219:	e8 ff 0f 00 00       	call   8010521d <wakeup>
-      sleep(&p->nwrite, &p->lock);  //DOC: pipewrite-sleep
-8010421e:	8b 45 08             	mov    0x8(%ebp),%eax
-80104221:	8b 55 08             	mov    0x8(%ebp),%edx
-80104224:	81 c2 38 02 00 00    	add    $0x238,%edx
-8010422a:	89 44 24 04          	mov    %eax,0x4(%esp)
-8010422e:	89 14 24             	mov    %edx,(%esp)
-80104231:	e8 0b 0f 00 00       	call   80105141 <sleep>
-80104236:	eb 01                	jmp    80104239 <pipewrite+0x78>
-{
-  int i;
-
-  acquire(&p->lock);
-  for(i = 0; i < n; i++){
-    while(p->nwrite == p->nread + PIPESIZE){  //DOC: pipewrite-full
-80104238:	90                   	nop
-80104239:	8b 45 08             	mov    0x8(%ebp),%eax
-8010423c:	8b 90 38 02 00 00    	mov    0x238(%eax),%edx
-80104242:	8b 45 08             	mov    0x8(%ebp),%eax
-80104245:	8b 80 34 02 00 00    	mov    0x234(%eax),%eax
-8010424b:	05 00 02 00 00       	add    $0x200,%eax
-80104250:	39 c2                	cmp    %eax,%edx
-80104252:	74 8b                	je     801041df <pipewrite+0x1e>
-        return -1;
-      }
-      wakeup(&p->nread);
-      sleep(&p->nwrite, &p->lock);  //DOC: pipewrite-sleep
-    }
-    p->data[p->nwrite++ % PIPESIZE] = addr[i];
-80104254:	8b 45 08             	mov    0x8(%ebp),%eax
-80104257:	8b 80 38 02 00 00    	mov    0x238(%eax),%eax
-8010425d:	89 c3                	mov    %eax,%ebx
-8010425f:	81 e3 ff 01 00 00    	and    $0x1ff,%ebx
-80104265:	8b 55 f4             	mov    -0xc(%ebp),%edx
-80104268:	03 55 0c             	add    0xc(%ebp),%edx
-8010426b:	0f b6 0a             	movzbl (%edx),%ecx
-8010426e:	8b 55 08             	mov    0x8(%ebp),%edx
-80104271:	88 4c 1a 34          	mov    %cl,0x34(%edx,%ebx,1)
-80104275:	8d 50 01             	lea    0x1(%eax),%edx
-80104278:	8b 45 08             	mov    0x8(%ebp),%eax
-8010427b:	89 90 38 02 00 00    	mov    %edx,0x238(%eax)
-pipewrite(struct pipe *p, char *addr, int n)
-{
-  int i;
-
-  acquire(&p->lock);
-  for(i = 0; i < n; i++){
-80104281:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
-80104285:	8b 45 f4             	mov    -0xc(%ebp),%eax
-80104288:	3b 45 10             	cmp    0x10(%ebp),%eax
-8010428b:	7c ab                	jl     80104238 <pipewrite+0x77>
-      wakeup(&p->nread);
-      sleep(&p->nwrite, &p->lock);  //DOC: pipewrite-sleep
-    }
-    p->data[p->nwrite++ % PIPESIZE] = addr[i];
-  }
-  wakeup(&p->nread);  //DOC: pipewrite-wakeup1
-8010428d:	8b 45 08             	mov    0x8(%ebp),%eax
-80104290:	05 34 02 00 00       	add    $0x234,%eax
-80104295:	89 04 24             	mov    %eax,(%esp)
-80104298:	e8 80 0f 00 00       	call   8010521d <wakeup>
-  release(&p->lock);
-8010429d:	8b 45 08             	mov    0x8(%ebp),%eax
-801042a0:	89 04 24             	mov    %eax,(%esp)
-801042a3:	e8 e1 11 00 00       	call   80105489 <release>
-  return n;
-801042a8:	8b 45 10             	mov    0x10(%ebp),%eax
-}
-801042ab:	83 c4 24             	add    $0x24,%esp
-801042ae:	5b                   	pop    %ebx
-801042af:	5d                   	pop    %ebp
-801042b0:	c3                   	ret    
-
-801042b1 <piperead>:
-
-int
-piperead(struct pipe *p, char *addr, int n)
-{
-801042b1:	55                   	push   %ebp
-801042b2:	89 e5                	mov    %esp,%ebp
-801042b4:	53                   	push   %ebx
-801042b5:	83 ec 24             	sub    $0x24,%esp
-  int i;
-
-  acquire(&p->lock);
-801042b8:	8b 45 08             	mov    0x8(%ebp),%eax
-801042bb:	89 04 24             	mov    %eax,(%esp)
-801042be:	e8 64 11 00 00       	call   80105427 <acquire>
-  while(p->nread == p->nwrite && p->writeopen){  //DOC: pipe-empty
-801042c3:	eb 3a                	jmp    801042ff <piperead+0x4e>
-    if(proc->killed){
-801042c5:	65 a1 04 00 00 00    	mov    %gs:0x4,%eax
-801042cb:	8b 40 28             	mov    0x28(%eax),%eax
-801042ce:	85 c0                	test   %eax,%eax
-801042d0:	74 15                	je     801042e7 <piperead+0x36>
-      release(&p->lock);
-801042d2:	8b 45 08             	mov    0x8(%ebp),%eax
-801042d5:	89 04 24             	mov    %eax,(%esp)
-801042d8:	e8 ac 11 00 00       	call   80105489 <release>
-      return -1;
-801042dd:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
-801042e2:	e9 b6 00 00 00       	jmp    8010439d <piperead+0xec>
-    }
-    sleep(&p->nread, &p->lock); //DOC: piperead-sleep
-801042e7:	8b 45 08             	mov    0x8(%ebp),%eax
-801042ea:	8b 55 08             	mov    0x8(%ebp),%edx
-801042ed:	81 c2 34 02 00 00    	add    $0x234,%edx
-801042f3:	89 44 24 04          	mov    %eax,0x4(%esp)
-801042f7:	89 14 24             	mov    %edx,(%esp)
-801042fa:	e8 42 0e 00 00       	call   80105141 <sleep>
-piperead(struct pipe *p, char *addr, int n)
-{
-  int i;
-
-  acquire(&p->lock);
-  while(p->nread == p->nwrite && p->writeopen){  //DOC: pipe-empty
-801042ff:	8b 45 08             	mov    0x8(%ebp),%eax
-80104302:	8b 90 34 02 00 00    	mov    0x234(%eax),%edx
-80104308:	8b 45 08             	mov    0x8(%ebp),%eax
-8010430b:	8b 80 38 02 00 00    	mov    0x238(%eax),%eax
-80104311:	39 c2                	cmp    %eax,%edx
-80104313:	75 0d                	jne    80104322 <piperead+0x71>
-80104315:	8b 45 08             	mov    0x8(%ebp),%eax
-80104318:	8b 80 40 02 00 00    	mov    0x240(%eax),%eax
-8010431e:	85 c0                	test   %eax,%eax
-80104320:	75 a3                	jne    801042c5 <piperead+0x14>
-      release(&p->lock);
-      return -1;
-    }
-    sleep(&p->nread, &p->lock); //DOC: piperead-sleep
-  }
-  for(i = 0; i < n; i++){  //DOC: piperead-copy
-80104322:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
-80104329:	eb 49                	jmp    80104374 <piperead+0xc3>
-    if(p->nread == p->nwrite)
-8010432b:	8b 45 08             	mov    0x8(%ebp),%eax
-8010432e:	8b 90 34 02 00 00    	mov    0x234(%eax),%edx
-80104334:	8b 45 08             	mov    0x8(%ebp),%eax
-80104337:	8b 80 38 02 00 00    	mov    0x238(%eax),%eax
-8010433d:	39 c2                	cmp    %eax,%edx
-8010433f:	74 3d                	je     8010437e <piperead+0xcd>
-      break;
-    addr[i] = p->data[p->nread++ % PIPESIZE];
-80104341:	8b 45 f4             	mov    -0xc(%ebp),%eax
-80104344:	89 c2                	mov    %eax,%edx
-80104346:	03 55 0c             	add    0xc(%ebp),%edx
-80104349:	8b 45 08             	mov    0x8(%ebp),%eax
-8010434c:	8b 80 34 02 00 00    	mov    0x234(%eax),%eax
-80104352:	89 c3                	mov    %eax,%ebx
-80104354:	81 e3 ff 01 00 00    	and    $0x1ff,%ebx
-8010435a:	8b 4d 08             	mov    0x8(%ebp),%ecx
-8010435d:	0f b6 4c 19 34       	movzbl 0x34(%ecx,%ebx,1),%ecx
-80104362:	88 0a                	mov    %cl,(%edx)
-80104364:	8d 50 01             	lea    0x1(%eax),%edx
-80104367:	8b 45 08             	mov    0x8(%ebp),%eax
-8010436a:	89 90 34 02 00 00    	mov    %edx,0x234(%eax)
-      release(&p->lock);
-      return -1;
-    }
-    sleep(&p->nread, &p->lock); //DOC: piperead-sleep
-  }
-  for(i = 0; i < n; i++){  //DOC: piperead-copy
-80104370:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
-80104374:	8b 45 f4             	mov    -0xc(%ebp),%eax
-80104377:	3b 45 10             	cmp    0x10(%ebp),%eax
-8010437a:	7c af                	jl     8010432b <piperead+0x7a>
-8010437c:	eb 01                	jmp    8010437f <piperead+0xce>
-    if(p->nread == p->nwrite)
-      break;
-8010437e:	90                   	nop
-    addr[i] = p->data[p->nread++ % PIPESIZE];
-  }
-  wakeup(&p->nwrite);  //DOC: piperead-wakeup
-8010437f:	8b 45 08             	mov    0x8(%ebp),%eax
-80104382:	05 38 02 00 00       	add    $0x238,%eax
-80104387:	89 04 24             	mov    %eax,(%esp)
-8010438a:	e8 8e 0e 00 00       	call   8010521d <wakeup>
-  release(&p->lock);
-8010438f:	8b 45 08             	mov    0x8(%ebp),%eax
-80104392:	89 04 24             	mov    %eax,(%esp)
-80104395:	e8 ef 10 00 00       	call   80105489 <release>
-  return i;
-8010439a:	8b 45 f4             	mov    -0xc(%ebp),%eax
-}
-8010439d:	83 c4 24             	add    $0x24,%esp
-801043a0:	5b                   	pop    %ebx
-801043a1:	5d                   	pop    %ebp
-801043a2:	c3                   	ret    
-	...
-
-801043a4 <readeflags>:
-  asm volatile("ltr %0" : : "r" (sel));
-}
-
-static inline uint
-readeflags(void)
-{
-801043a4:	55                   	push   %ebp
-801043a5:	89 e5                	mov    %esp,%ebp
-801043a7:	53                   	push   %ebx
-801043a8:	83 ec 10             	sub    $0x10,%esp
-  uint eflags;
-  asm volatile("pushfl; popl %0" : "=r" (eflags));
-801043ab:	9c                   	pushf  
-801043ac:	5b                   	pop    %ebx
-801043ad:	89 5d f8             	mov    %ebx,-0x8(%ebp)
-  return eflags;
-801043b0:	8b 45 f8             	mov    -0x8(%ebp),%eax
-}
-801043b3:	83 c4 10             	add    $0x10,%esp
-801043b6:	5b                   	pop    %ebx
-801043b7:	5d                   	pop    %ebp
-801043b8:	c3                   	ret    
-
-801043b9 <sti>:
-  asm volatile("cli");
-}
-
-static inline void
-sti(void)
-{
-801043b9:	55                   	push   %ebp
-801043ba:	89 e5                	mov    %esp,%ebp
-  asm volatile("sti");
-801043bc:	fb                   	sti    
-}
-801043bd:	5d                   	pop    %ebp
-801043be:	c3                   	ret    
-
-801043bf <pinit>:
-
-static void wakeup1(void *chan);
-
-void
-pinit(void)
-{
-801043bf:	55                   	push   %ebp
-801043c0:	89 e5                	mov    %esp,%ebp
-801043c2:	83 ec 18             	sub    $0x18,%esp
-  initlock(&ptable.lock, "ptable");
-801043c5:	c7 44 24 04 7d 94 10 	movl   $0x8010947d,0x4(%esp)
-801043cc:	80 
-801043cd:	c7 04 24 80 39 11 80 	movl   $0x80113980,(%esp)
-801043d4:	e8 2d 10 00 00       	call   80105406 <initlock>
-	#if defined(FRR) || defined(FCFS)
-	  init_linkedList(&plist,NPROC);
-	#endif
-}
-801043d9:	c9                   	leave  
-801043da:	c3                   	ret    
-
-801043db <allocproc>:
-// If found, change state to EMBRYO and initialize
-// state required to run in the kernel.
-// Otherwise return 0.
-static struct proc*
-allocproc(void)
-{
-801043db:	55                   	push   %ebp
-801043dc:	89 e5                	mov    %esp,%ebp
-801043de:	83 ec 28             	sub    $0x28,%esp
-  struct proc *p;
-  char *sp;
-
-  acquire(&ptable.lock);
-801043e1:	c7 04 24 80 39 11 80 	movl   $0x80113980,(%esp)
-801043e8:	e8 3a 10 00 00       	call   80105427 <acquire>
-  for(p = ptable.proc; p < &ptable.proc[NPROC]; p++)
-801043ed:	c7 45 f4 b4 39 11 80 	movl   $0x801139b4,-0xc(%ebp)
-801043f4:	eb 11                	jmp    80104407 <allocproc+0x2c>
-    if(p->state == UNUSED)
-801043f6:	8b 45 f4             	mov    -0xc(%ebp),%eax
-801043f9:	8b 40 0c             	mov    0xc(%eax),%eax
-801043fc:	85 c0                	test   %eax,%eax
-801043fe:	74 26                	je     80104426 <allocproc+0x4b>
-{
-  struct proc *p;
-  char *sp;
-
-  acquire(&ptable.lock);
-  for(p = ptable.proc; p < &ptable.proc[NPROC]; p++)
-80104400:	81 45 f4 a0 00 00 00 	addl   $0xa0,-0xc(%ebp)
-80104407:	81 7d f4 b4 61 11 80 	cmpl   $0x801161b4,-0xc(%ebp)
-8010440e:	72 e6                	jb     801043f6 <allocproc+0x1b>
-    if(p->state == UNUSED)
-      goto found;
-  release(&ptable.lock);
-80104410:	c7 04 24 80 39 11 80 	movl   $0x80113980,(%esp)
-80104417:	e8 6d 10 00 00       	call   80105489 <release>
-  return 0;
-8010441c:	b8 00 00 00 00       	mov    $0x0,%eax
-80104421:	e9 d2 00 00 00       	jmp    801044f8 <allocproc+0x11d>
-  char *sp;
-
-  acquire(&ptable.lock);
-  for(p = ptable.proc; p < &ptable.proc[NPROC]; p++)
-    if(p->state == UNUSED)
-      goto found;
-80104426:	90                   	nop
-  release(&ptable.lock);
-  return 0;
-
-found:
-  p->state = EMBRYO;
-80104427:	8b 45 f4             	mov    -0xc(%ebp),%eax
-8010442a:	c7 40 0c 01 00 00 00 	movl   $0x1,0xc(%eax)
-  p->pid = nextpid++;
-80104431:	a1 04 c0 10 80       	mov    0x8010c004,%eax
-80104436:	8b 55 f4             	mov    -0xc(%ebp),%edx
-80104439:	89 42 10             	mov    %eax,0x10(%edx)
-8010443c:	83 c0 01             	add    $0x1,%eax
-8010443f:	a3 04 c0 10 80       	mov    %eax,0x8010c004
-  p->ctime = ticks;
-80104444:	a1 00 6a 11 80       	mov    0x80116a00,%eax
-80104449:	89 c2                	mov    %eax,%edx
-8010444b:	8b 45 f4             	mov    -0xc(%ebp),%eax
-8010444e:	89 90 84 00 00 00    	mov    %edx,0x84(%eax)
-  p->priority = PRIORITY_MEDIUM;
-80104454:	8b 45 f4             	mov    -0xc(%ebp),%eax
-80104457:	c7 80 98 00 00 00 02 	movl   $0x2,0x98(%eax)
-8010445e:	00 00 00 
-  release(&ptable.lock);
-80104461:	c7 04 24 80 39 11 80 	movl   $0x80113980,(%esp)
-80104468:	e8 1c 10 00 00       	call   80105489 <release>
-
-  // Allocate kernel stack.
-  if((p->kstack = kalloc()) == 0){
-8010446d:	e8 f5 e6 ff ff       	call   80102b67 <kalloc>
-80104472:	8b 55 f4             	mov    -0xc(%ebp),%edx
-80104475:	89 42 08             	mov    %eax,0x8(%edx)
-80104478:	8b 45 f4             	mov    -0xc(%ebp),%eax
-8010447b:	8b 40 08             	mov    0x8(%eax),%eax
-8010447e:	85 c0                	test   %eax,%eax
-80104480:	75 11                	jne    80104493 <allocproc+0xb8>
-    p->state = UNUSED;
-80104482:	8b 45 f4             	mov    -0xc(%ebp),%eax
-80104485:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%eax)
-    return 0;
-8010448c:	b8 00 00 00 00       	mov    $0x0,%eax
-80104491:	eb 65                	jmp    801044f8 <allocproc+0x11d>
-  }
-  sp = p->kstack + KSTACKSIZE;
-80104493:	8b 45 f4             	mov    -0xc(%ebp),%eax
-80104496:	8b 40 08             	mov    0x8(%eax),%eax
-80104499:	05 00 10 00 00       	add    $0x1000,%eax
-8010449e:	89 45 f0             	mov    %eax,-0x10(%ebp)
-  
-  // Leave room for trap frame.
-  sp -= sizeof *p->tf;
-801044a1:	83 6d f0 4c          	subl   $0x4c,-0x10(%ebp)
-  p->tf = (struct trapframe*)sp;
-801044a5:	8b 45 f4             	mov    -0xc(%ebp),%eax
-801044a8:	8b 55 f0             	mov    -0x10(%ebp),%edx
-801044ab:	89 50 1c             	mov    %edx,0x1c(%eax)
-  
-  // Set up new context to start executing at forkret,
-  // which returns to trapret.
-  sp -= 4;
-801044ae:	83 6d f0 04          	subl   $0x4,-0x10(%ebp)
-  *(uint*)sp = (uint)trapret;
-801044b2:	ba 00 6d 10 80       	mov    $0x80106d00,%edx
-801044b7:	8b 45 f0             	mov    -0x10(%ebp),%eax
-801044ba:	89 10                	mov    %edx,(%eax)
-
-  sp -= sizeof *p->context;
-801044bc:	83 6d f0 14          	subl   $0x14,-0x10(%ebp)
-  p->context = (struct context*)sp;
-801044c0:	8b 45 f4             	mov    -0xc(%ebp),%eax
-801044c3:	8b 55 f0             	mov    -0x10(%ebp),%edx
-801044c6:	89 50 20             	mov    %edx,0x20(%eax)
-  memset(p->context, 0, sizeof *p->context);
-801044c9:	8b 45 f4             	mov    -0xc(%ebp),%eax
-801044cc:	8b 40 20             	mov    0x20(%eax),%eax
-801044cf:	c7 44 24 08 14 00 00 	movl   $0x14,0x8(%esp)
-801044d6:	00 
-801044d7:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
-801044de:	00 
-801044df:	89 04 24             	mov    %eax,(%esp)
-801044e2:	e8 8f 11 00 00       	call   80105676 <memset>
-  p->context->eip = (uint)forkret;
-801044e7:	8b 45 f4             	mov    -0xc(%ebp),%eax
-801044ea:	8b 40 20             	mov    0x20(%eax),%eax
-801044ed:	ba 15 51 10 80       	mov    $0x80105115,%edx
-801044f2:	89 50 10             	mov    %edx,0x10(%eax)
-
-  return p;
-801044f5:	8b 45 f4             	mov    -0xc(%ebp),%eax
-}
-801044f8:	c9                   	leave  
-801044f9:	c3                   	ret    
-
-801044fa <userinit>:
-
-//PAGEBREAK: 32
-// Set up first user process.
-void
-userinit(void)
-{
-801044fa:	55                   	push   %ebp
-801044fb:	89 e5                	mov    %esp,%ebp
-801044fd:	83 ec 28             	sub    $0x28,%esp
-  struct proc *p;
-  extern char _binary_initcode_start[], _binary_initcode_size[];
-  
-  p = allocproc();
-80104500:	e8 d6 fe ff ff       	call   801043db <allocproc>
-80104505:	89 45 f4             	mov    %eax,-0xc(%ebp)
-  initproc = p;
-80104508:	8b 45 f4             	mov    -0xc(%ebp),%eax
-8010450b:	a3 68 c6 10 80       	mov    %eax,0x8010c668
-  if((p->pgdir = setupkvm()) == 0)
-80104510:	e8 c8 3f 00 00       	call   801084dd <setupkvm>
-80104515:	8b 55 f4             	mov    -0xc(%ebp),%edx
-80104518:	89 42 04             	mov    %eax,0x4(%edx)
-8010451b:	8b 45 f4             	mov    -0xc(%ebp),%eax
-8010451e:	8b 40 04             	mov    0x4(%eax),%eax
-80104521:	85 c0                	test   %eax,%eax
-80104523:	75 0c                	jne    80104531 <userinit+0x37>
-    panic("userinit: out of memory?");
-80104525:	c7 04 24 84 94 10 80 	movl   $0x80109484,(%esp)
-8010452c:	e8 0c c0 ff ff       	call   8010053d <panic>
-  inituvm(p->pgdir, _binary_initcode_start, (int)_binary_initcode_size);
-80104531:	ba 2c 00 00 00       	mov    $0x2c,%edx
-80104536:	8b 45 f4             	mov    -0xc(%ebp),%eax
-80104539:	8b 40 04             	mov    0x4(%eax),%eax
-8010453c:	89 54 24 08          	mov    %edx,0x8(%esp)
-80104540:	c7 44 24 04 00 c5 10 	movl   $0x8010c500,0x4(%esp)
-80104547:	80 
-80104548:	89 04 24             	mov    %eax,(%esp)
-8010454b:	e8 e5 41 00 00       	call   80108735 <inituvm>
-  p->sz = PGSIZE;
-80104550:	8b 45 f4             	mov    -0xc(%ebp),%eax
-80104553:	c7 00 00 10 00 00    	movl   $0x1000,(%eax)
-  memset(p->tf, 0, sizeof(*p->tf));
-80104559:	8b 45 f4             	mov    -0xc(%ebp),%eax
-8010455c:	8b 40 1c             	mov    0x1c(%eax),%eax
-8010455f:	c7 44 24 08 4c 00 00 	movl   $0x4c,0x8(%esp)
-80104566:	00 
-80104567:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
-8010456e:	00 
-8010456f:	89 04 24             	mov    %eax,(%esp)
-80104572:	e8 ff 10 00 00       	call   80105676 <memset>
-  p->tf->cs = (SEG_UCODE << 3) | DPL_USER;
-80104577:	8b 45 f4             	mov    -0xc(%ebp),%eax
-8010457a:	8b 40 1c             	mov    0x1c(%eax),%eax
-8010457d:	66 c7 40 3c 23 00    	movw   $0x23,0x3c(%eax)
-  p->tf->ds = (SEG_UDATA << 3) | DPL_USER;
-80104583:	8b 45 f4             	mov    -0xc(%ebp),%eax
-80104586:	8b 40 1c             	mov    0x1c(%eax),%eax
-80104589:	66 c7 40 2c 2b 00    	movw   $0x2b,0x2c(%eax)
-  p->tf->es = p->tf->ds;
-8010458f:	8b 45 f4             	mov    -0xc(%ebp),%eax
-80104592:	8b 40 1c             	mov    0x1c(%eax),%eax
-80104595:	8b 55 f4             	mov    -0xc(%ebp),%edx
-80104598:	8b 52 1c             	mov    0x1c(%edx),%edx
-8010459b:	0f b7 52 2c          	movzwl 0x2c(%edx),%edx
-8010459f:	66 89 50 28          	mov    %dx,0x28(%eax)
-  p->tf->ss = p->tf->ds;
-801045a3:	8b 45 f4             	mov    -0xc(%ebp),%eax
-801045a6:	8b 40 1c             	mov    0x1c(%eax),%eax
-801045a9:	8b 55 f4             	mov    -0xc(%ebp),%edx
-801045ac:	8b 52 1c             	mov    0x1c(%edx),%edx
-801045af:	0f b7 52 2c          	movzwl 0x2c(%edx),%edx
-801045b3:	66 89 50 48          	mov    %dx,0x48(%eax)
-  p->tf->eflags = FL_IF;
-801045b7:	8b 45 f4             	mov    -0xc(%ebp),%eax
-801045ba:	8b 40 1c             	mov    0x1c(%eax),%eax
-801045bd:	c7 40 40 00 02 00 00 	movl   $0x200,0x40(%eax)
-  p->tf->esp = PGSIZE;
-801045c4:	8b 45 f4             	mov    -0xc(%ebp),%eax
-801045c7:	8b 40 1c             	mov    0x1c(%eax),%eax
-801045ca:	c7 40 44 00 10 00 00 	movl   $0x1000,0x44(%eax)
-  p->tf->eip = 0;  // beginning of initcode.S
-801045d1:	8b 45 f4             	mov    -0xc(%ebp),%eax
-801045d4:	8b 40 1c             	mov    0x1c(%eax),%eax
-801045d7:	c7 40 38 00 00 00 00 	movl   $0x0,0x38(%eax)
-
-  safestrcpy(p->name, "initcode", sizeof(p->name));
-801045de:	8b 45 f4             	mov    -0xc(%ebp),%eax
-801045e1:	83 c0 70             	add    $0x70,%eax
-801045e4:	c7 44 24 08 10 00 00 	movl   $0x10,0x8(%esp)
-801045eb:	00 
-801045ec:	c7 44 24 04 9d 94 10 	movl   $0x8010949d,0x4(%esp)
-801045f3:	80 
-801045f4:	89 04 24             	mov    %eax,(%esp)
-801045f7:	e8 aa 12 00 00       	call   801058a6 <safestrcpy>
-  p->cwd = namei("/");
-801045fc:	c7 04 24 a6 94 10 80 	movl   $0x801094a6,(%esp)
-80104603:	e8 6a de ff ff       	call   80102472 <namei>
-80104608:	8b 55 f4             	mov    -0xc(%ebp),%edx
-8010460b:	89 42 6c             	mov    %eax,0x6c(%edx)
-
-  p->state = RUNNABLE;
-8010460e:	8b 45 f4             	mov    -0xc(%ebp),%eax
-80104611:	c7 40 0c 03 00 00 00 	movl   $0x3,0xc(%eax)
-	  acquire(&ptable.lock);	//wasnt here
-	  plist.add(&plist, p->pid, p);
-	  release(&ptable.lock);
-  #endif
-
-}
-80104618:	c9                   	leave  
-80104619:	c3                   	ret    
-
-8010461a <growproc>:
-
-// Grow current process's memory by n bytes.
-// Return 0 on success, -1 on failure.
-int
-growproc(int n)
-{
-8010461a:	55                   	push   %ebp
-8010461b:	89 e5                	mov    %esp,%ebp
-8010461d:	83 ec 28             	sub    $0x28,%esp
-  uint sz;
-  
-  sz = proc->sz;
-80104620:	65 a1 04 00 00 00    	mov    %gs:0x4,%eax
-80104626:	8b 00                	mov    (%eax),%eax
-80104628:	89 45 f4             	mov    %eax,-0xc(%ebp)
-  if(n > 0){
-8010462b:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
-8010462f:	7e 34                	jle    80104665 <growproc+0x4b>
-    if((sz = allocuvm(proc->pgdir, sz, sz + n)) == 0)
-80104631:	8b 45 08             	mov    0x8(%ebp),%eax
-80104634:	89 c2                	mov    %eax,%edx
-80104636:	03 55 f4             	add    -0xc(%ebp),%edx
-80104639:	65 a1 04 00 00 00    	mov    %gs:0x4,%eax
-8010463f:	8b 40 04             	mov    0x4(%eax),%eax
-80104642:	89 54 24 08          	mov    %edx,0x8(%esp)
-80104646:	8b 55 f4             	mov    -0xc(%ebp),%edx
-80104649:	89 54 24 04          	mov    %edx,0x4(%esp)
-8010464d:	89 04 24             	mov    %eax,(%esp)
-80104650:	e8 5a 42 00 00       	call   801088af <allocuvm>
-80104655:	89 45 f4             	mov    %eax,-0xc(%ebp)
-80104658:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
-8010465c:	75 41                	jne    8010469f <growproc+0x85>
-      return -1;
-8010465e:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
-80104663:	eb 58                	jmp    801046bd <growproc+0xa3>
-  } else if(n < 0){
-80104665:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
-80104669:	79 34                	jns    8010469f <growproc+0x85>
-    if((sz = deallocuvm(proc->pgdir, sz, sz + n)) == 0)
-8010466b:	8b 45 08             	mov    0x8(%ebp),%eax
-8010466e:	89 c2                	mov    %eax,%edx
-80104670:	03 55 f4             	add    -0xc(%ebp),%edx
-80104673:	65 a1 04 00 00 00    	mov    %gs:0x4,%eax
-80104679:	8b 40 04             	mov    0x4(%eax),%eax
-8010467c:	89 54 24 08          	mov    %edx,0x8(%esp)
-80104680:	8b 55 f4             	mov    -0xc(%ebp),%edx
-80104683:	89 54 24 04          	mov    %edx,0x4(%esp)
-80104687:	89 04 24             	mov    %eax,(%esp)
-8010468a:	e8 fa 42 00 00       	call   80108989 <deallocuvm>
-8010468f:	89 45 f4             	mov    %eax,-0xc(%ebp)
-80104692:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
-80104696:	75 07                	jne    8010469f <growproc+0x85>
-      return -1;
-80104698:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
-8010469d:	eb 1e                	jmp    801046bd <growproc+0xa3>
-  }
-  proc->sz = sz;
-8010469f:	65 a1 04 00 00 00    	mov    %gs:0x4,%eax
-801046a5:	8b 55 f4             	mov    -0xc(%ebp),%edx
-801046a8:	89 10                	mov    %edx,(%eax)
-  switchuvm(proc);
-801046aa:	65 a1 04 00 00 00    	mov    %gs:0x4,%eax
-801046b0:	89 04 24             	mov    %eax,(%esp)
-801046b3:	e8 16 3f 00 00       	call   801085ce <switchuvm>
-  return 0;
-801046b8:	b8 00 00 00 00       	mov    $0x0,%eax
-}
-801046bd:	c9                   	leave  
-801046be:	c3                   	ret    
-
-801046bf <fork>:
-// Create a new process copying p as the parent.
-// Sets up stack to return as if from system call.
-// Caller must set state of returned proc to RUNNABLE.
-int
-fork(void)
-{
-801046bf:	55                   	push   %ebp
-801046c0:	89 e5                	mov    %esp,%ebp
-801046c2:	57                   	push   %edi
-801046c3:	56                   	push   %esi
-801046c4:	53                   	push   %ebx
-801046c5:	83 ec 2c             	sub    $0x2c,%esp
-//  char* TAG = "fork";
-  int i, pid, gid;
-  struct proc *np;
-
-  // Allocate process.
-  if((np = allocproc()) == 0)
-801046c8:	e8 0e fd ff ff       	call   801043db <allocproc>
-801046cd:	89 45 dc             	mov    %eax,-0x24(%ebp)
-801046d0:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
-801046d4:	75 0a                	jne    801046e0 <fork+0x21>
-    return -1;
-801046d6:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
-801046db:	e9 7d 01 00 00       	jmp    8010485d <fork+0x19e>
-
-  // Copy process state from p.
-  if((np->pgdir = copyuvm(proc->pgdir, proc->sz)) == 0){
-801046e0:	65 a1 04 00 00 00    	mov    %gs:0x4,%eax
-801046e6:	8b 10                	mov    (%eax),%edx
-801046e8:	65 a1 04 00 00 00    	mov    %gs:0x4,%eax
-801046ee:	8b 40 04             	mov    0x4(%eax),%eax
-801046f1:	89 54 24 04          	mov    %edx,0x4(%esp)
-801046f5:	89 04 24             	mov    %eax,(%esp)
-801046f8:	e8 1c 44 00 00       	call   80108b19 <copyuvm>
-801046fd:	8b 55 dc             	mov    -0x24(%ebp),%edx
-80104700:	89 42 04             	mov    %eax,0x4(%edx)
-80104703:	8b 45 dc             	mov    -0x24(%ebp),%eax
-80104706:	8b 40 04             	mov    0x4(%eax),%eax
-80104709:	85 c0                	test   %eax,%eax
-8010470b:	75 2c                	jne    80104739 <fork+0x7a>
-    kfree(np->kstack);
-8010470d:	8b 45 dc             	mov    -0x24(%ebp),%eax
-80104710:	8b 40 08             	mov    0x8(%eax),%eax
-80104713:	89 04 24             	mov    %eax,(%esp)
-80104716:	e8 b3 e3 ff ff       	call   80102ace <kfree>
-    np->kstack = 0;
-8010471b:	8b 45 dc             	mov    -0x24(%ebp),%eax
-8010471e:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
-    np->state = UNUSED;
-80104725:	8b 45 dc             	mov    -0x24(%ebp),%eax
-80104728:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%eax)
-    return -1;
-8010472f:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
-80104734:	e9 24 01 00 00       	jmp    8010485d <fork+0x19e>
-  }
-  np->sz = proc->sz;
-80104739:	65 a1 04 00 00 00    	mov    %gs:0x4,%eax
-8010473f:	8b 10                	mov    (%eax),%edx
-80104741:	8b 45 dc             	mov    -0x24(%ebp),%eax
-80104744:	89 10                	mov    %edx,(%eax)
-  np->parent = proc;
-80104746:	65 8b 15 04 00 00 00 	mov    %gs:0x4,%edx
-8010474d:	8b 45 dc             	mov    -0x24(%ebp),%eax
-80104750:	89 50 18             	mov    %edx,0x18(%eax)
-  *np->tf = *proc->tf;
-80104753:	8b 45 dc             	mov    -0x24(%ebp),%eax
-80104756:	8b 50 1c             	mov    0x1c(%eax),%edx
-80104759:	65 a1 04 00 00 00    	mov    %gs:0x4,%eax
-8010475f:	8b 40 1c             	mov    0x1c(%eax),%eax
-80104762:	89 c3                	mov    %eax,%ebx
-80104764:	b8 13 00 00 00       	mov    $0x13,%eax
-80104769:	89 d7                	mov    %edx,%edi
-8010476b:	89 de                	mov    %ebx,%esi
-8010476d:	89 c1                	mov    %eax,%ecx
-8010476f:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
-
-  // Clear %eax so that fork returns 0 in the child.
-  np->tf->eax = 0;
-80104771:	8b 45 dc             	mov    -0x24(%ebp),%eax
-80104774:	8b 40 1c             	mov    0x1c(%eax),%eax
-80104777:	c7 40 1c 00 00 00 00 	movl   $0x0,0x1c(%eax)
-
-  for(i = 0; i < NOFILE; i++)
-8010477e:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
-80104785:	eb 3d                	jmp    801047c4 <fork+0x105>
-    if(proc->ofile[i])
-80104787:	65 a1 04 00 00 00    	mov    %gs:0x4,%eax
-8010478d:	8b 55 e4             	mov    -0x1c(%ebp),%edx
-80104790:	83 c2 08             	add    $0x8,%edx
-80104793:	8b 44 90 0c          	mov    0xc(%eax,%edx,4),%eax
-80104797:	85 c0                	test   %eax,%eax
-80104799:	74 25                	je     801047c0 <fork+0x101>
-      np->ofile[i] = filedup(proc->ofile[i]);
-8010479b:	65 a1 04 00 00 00    	mov    %gs:0x4,%eax
-801047a1:	8b 55 e4             	mov    -0x1c(%ebp),%edx
-801047a4:	83 c2 08             	add    $0x8,%edx
-801047a7:	8b 44 90 0c          	mov    0xc(%eax,%edx,4),%eax
-801047ab:	89 04 24             	mov    %eax,(%esp)
-801047ae:	e8 31 c8 ff ff       	call   80100fe4 <filedup>
-801047b3:	8b 55 dc             	mov    -0x24(%ebp),%edx
-801047b6:	8b 4d e4             	mov    -0x1c(%ebp),%ecx
-801047b9:	83 c1 08             	add    $0x8,%ecx
-801047bc:	89 44 8a 0c          	mov    %eax,0xc(%edx,%ecx,4)
-  *np->tf = *proc->tf;
-
-  // Clear %eax so that fork returns 0 in the child.
-  np->tf->eax = 0;
-
-  for(i = 0; i < NOFILE; i++)
-801047c0:	83 45 e4 01          	addl   $0x1,-0x1c(%ebp)
-801047c4:	83 7d e4 0f          	cmpl   $0xf,-0x1c(%ebp)
-801047c8:	7e bd                	jle    80104787 <fork+0xc8>
-    if(proc->ofile[i])
-      np->ofile[i] = filedup(proc->ofile[i]);
-  np->cwd = idup(proc->cwd);
-801047ca:	65 a1 04 00 00 00    	mov    %gs:0x4,%eax
-801047d0:	8b 40 6c             	mov    0x6c(%eax),%eax
-801047d3:	89 04 24             	mov    %eax,(%esp)
-801047d6:	e8 c3 d0 ff ff       	call   8010189e <idup>
-801047db:	8b 55 dc             	mov    -0x24(%ebp),%edx
-801047de:	89 42 6c             	mov    %eax,0x6c(%edx)
-
-  safestrcpy(np->name, proc->name, sizeof(proc->name));
-801047e1:	65 a1 04 00 00 00    	mov    %gs:0x4,%eax
-801047e7:	8d 50 70             	lea    0x70(%eax),%edx
-801047ea:	8b 45 dc             	mov    -0x24(%ebp),%eax
-801047ed:	83 c0 70             	add    $0x70,%eax
-801047f0:	c7 44 24 08 10 00 00 	movl   $0x10,0x8(%esp)
-801047f7:	00 
-801047f8:	89 54 24 04          	mov    %edx,0x4(%esp)
-801047fc:	89 04 24             	mov    %eax,(%esp)
-801047ff:	e8 a2 10 00 00       	call   801058a6 <safestrcpy>
- 
-  pid = np->pid;
-80104804:	8b 45 dc             	mov    -0x24(%ebp),%eax
-80104807:	8b 40 10             	mov    0x10(%eax),%eax
-8010480a:	89 45 d8             	mov    %eax,-0x28(%ebp)
-
-  //Set group id
-  //if father is shell -> gid = this new process pid
-  if( proc->pid == SHELL_PID){
-8010480d:	65 a1 04 00 00 00    	mov    %gs:0x4,%eax
-80104813:	8b 40 10             	mov    0x10(%eax),%eax
-80104816:	83 f8 02             	cmp    $0x2,%eax
-80104819:	75 08                	jne    80104823 <fork+0x164>
-	  gid = pid;
-8010481b:	8b 45 d8             	mov    -0x28(%ebp),%eax
-8010481e:	89 45 e0             	mov    %eax,-0x20(%ebp)
-80104821:	eb 0c                	jmp    8010482f <fork+0x170>
-  }
-  //else, take father gid
-  else{
-	  gid = proc->gid;
-80104823:	65 a1 04 00 00 00    	mov    %gs:0x4,%eax
-80104829:	8b 40 14             	mov    0x14(%eax),%eax
-8010482c:	89 45 e0             	mov    %eax,-0x20(%ebp)
-  }
-
-  np->gid = gid;
-8010482f:	8b 45 dc             	mov    -0x24(%ebp),%eax
-80104832:	8b 55 e0             	mov    -0x20(%ebp),%edx
-80104835:	89 50 14             	mov    %edx,0x14(%eax)
-
-  //cprintf("\n[debug] [fork] Created a new process son of '%s' with pid %d, and guid: %d\n", np->name, pid, gid);
-  // lock to force the compiler to emit the np->state write last.
-  acquire(&ptable.lock);
-80104838:	c7 04 24 80 39 11 80 	movl   $0x80113980,(%esp)
-8010483f:	e8 e3 0b 00 00       	call   80105427 <acquire>
-  np->state = RUNNABLE;
-80104844:	8b 45 dc             	mov    -0x24(%ebp),%eax
-80104847:	c7 40 0c 03 00 00 00 	movl   $0x3,0xc(%eax)
-#if defined(FRR) || defined(FCFS)
-
-  plist.add(&plist, pid, np); //todo ifdef
-#endif
-
-  release(&ptable.lock);
-8010484e:	c7 04 24 80 39 11 80 	movl   $0x80113980,(%esp)
-80104855:	e8 2f 0c 00 00       	call   80105489 <release>
-
-
-
-  return pid;
-8010485a:	8b 45 d8             	mov    -0x28(%ebp),%eax
-}
-8010485d:	83 c4 2c             	add    $0x2c,%esp
-80104860:	5b                   	pop    %ebx
-80104861:	5e                   	pop    %esi
-80104862:	5f                   	pop    %edi
-80104863:	5d                   	pop    %ebp
-80104864:	c3                   	ret    
-
-80104865 <exit>:
-// Exit the current process.  Does not return.
-// An exited process remains in the zombie state
-// until its parent calls wait() to find out it exited.
-void
-exit(int status)
-{
-80104865:	55                   	push   %ebp
-80104866:	89 e5                	mov    %esp,%ebp
-80104868:	83 ec 28             	sub    $0x28,%esp
-  struct proc *p;
-  int fd;
-
-  //cprintf("\n[debug] [exit] Process '%s' (%d) Exited with status code %d\n", proc->name, proc->pid, status);
-
-  if(proc == initproc)
-8010486b:	65 8b 15 04 00 00 00 	mov    %gs:0x4,%edx
-80104872:	a1 68 c6 10 80       	mov    0x8010c668,%eax
-80104877:	39 c2                	cmp    %eax,%edx
-80104879:	75 0c                	jne    80104887 <exit+0x22>
-    panic("init exiting");
-8010487b:	c7 04 24 a8 94 10 80 	movl   $0x801094a8,(%esp)
-80104882:	e8 b6 bc ff ff       	call   8010053d <panic>
-
-  // Close all open files.
-  for(fd = 0; fd < NOFILE; fd++){
-80104887:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
-8010488e:	eb 44                	jmp    801048d4 <exit+0x6f>
-    if(proc->ofile[fd]){
-80104890:	65 a1 04 00 00 00    	mov    %gs:0x4,%eax
-80104896:	8b 55 f0             	mov    -0x10(%ebp),%edx
-80104899:	83 c2 08             	add    $0x8,%edx
-8010489c:	8b 44 90 0c          	mov    0xc(%eax,%edx,4),%eax
-801048a0:	85 c0                	test   %eax,%eax
-801048a2:	74 2c                	je     801048d0 <exit+0x6b>
-      fileclose(proc->ofile[fd]);
-801048a4:	65 a1 04 00 00 00    	mov    %gs:0x4,%eax
-801048aa:	8b 55 f0             	mov    -0x10(%ebp),%edx
-801048ad:	83 c2 08             	add    $0x8,%edx
-801048b0:	8b 44 90 0c          	mov    0xc(%eax,%edx,4),%eax
-801048b4:	89 04 24             	mov    %eax,(%esp)
-801048b7:	e8 70 c7 ff ff       	call   8010102c <fileclose>
-      proc->ofile[fd] = 0;
-801048bc:	65 a1 04 00 00 00    	mov    %gs:0x4,%eax
-801048c2:	8b 55 f0             	mov    -0x10(%ebp),%edx
-801048c5:	83 c2 08             	add    $0x8,%edx
-801048c8:	c7 44 90 0c 00 00 00 	movl   $0x0,0xc(%eax,%edx,4)
-801048cf:	00 
-
-  if(proc == initproc)
-    panic("init exiting");
-
-  // Close all open files.
-  for(fd = 0; fd < NOFILE; fd++){
-801048d0:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)
-801048d4:	83 7d f0 0f          	cmpl   $0xf,-0x10(%ebp)
-801048d8:	7e b6                	jle    80104890 <exit+0x2b>
-      fileclose(proc->ofile[fd]);
-      proc->ofile[fd] = 0;
-    }
-  }
-
-  begin_op();
-801048da:	e8 de eb ff ff       	call   801034bd <begin_op>
-  iput(proc->cwd);
-801048df:	65 a1 04 00 00 00    	mov    %gs:0x4,%eax
-801048e5:	8b 40 6c             	mov    0x6c(%eax),%eax
-801048e8:	89 04 24             	mov    %eax,(%esp)
-801048eb:	e8 93 d1 ff ff       	call   80101a83 <iput>
-  end_op();
-801048f0:	e8 49 ec ff ff       	call   8010353e <end_op>
-  proc->cwd = 0;
-801048f5:	65 a1 04 00 00 00    	mov    %gs:0x4,%eax
-801048fb:	c7 40 6c 00 00 00 00 	movl   $0x0,0x6c(%eax)
-
-
-  acquire(&ptable.lock);
-80104902:	c7 04 24 80 39 11 80 	movl   $0x80113980,(%esp)
-80104909:	e8 19 0b 00 00       	call   80105427 <acquire>
-
-  proc->status = status;
-8010490e:	65 a1 04 00 00 00    	mov    %gs:0x4,%eax
-80104914:	8b 55 08             	mov    0x8(%ebp),%edx
-80104917:	89 90 80 00 00 00    	mov    %edx,0x80(%eax)
-  proc->ttime = ticks;
-8010491d:	65 a1 04 00 00 00    	mov    %gs:0x4,%eax
-80104923:	8b 15 00 6a 11 80    	mov    0x80116a00,%edx
-80104929:	89 90 88 00 00 00    	mov    %edx,0x88(%eax)
-  // Parent might be sleeping in wait().
-  wakeup1(proc->parent);
-8010492f:	65 a1 04 00 00 00    	mov    %gs:0x4,%eax
-80104935:	8b 40 18             	mov    0x18(%eax),%eax
-80104938:	89 04 24             	mov    %eax,(%esp)
-8010493b:	e8 9c 08 00 00       	call   801051dc <wakeup1>
-//  cprintf("\n This is your captin speaking, here is : %s \n", ptable.proc[SHELL_PID].name);
-
-
-  // Pass abandoned children to init.
-  for(p = ptable.proc; p < &ptable.proc[NPROC]; p++){
-80104940:	c7 45 f4 b4 39 11 80 	movl   $0x801139b4,-0xc(%ebp)
-80104947:	eb 3b                	jmp    80104984 <exit+0x11f>
-    if(p->parent == proc){
-80104949:	8b 45 f4             	mov    -0xc(%ebp),%eax
-8010494c:	8b 50 18             	mov    0x18(%eax),%edx
-8010494f:	65 a1 04 00 00 00    	mov    %gs:0x4,%eax
-80104955:	39 c2                	cmp    %eax,%edx
-80104957:	75 24                	jne    8010497d <exit+0x118>
-      p->parent = initproc;
-80104959:	8b 15 68 c6 10 80    	mov    0x8010c668,%edx
-8010495f:	8b 45 f4             	mov    -0xc(%ebp),%eax
-80104962:	89 50 18             	mov    %edx,0x18(%eax)
-      if(p->state == ZOMBIE)
-80104965:	8b 45 f4             	mov    -0xc(%ebp),%eax
-80104968:	8b 40 0c             	mov    0xc(%eax),%eax
-8010496b:	83 f8 05             	cmp    $0x5,%eax
-8010496e:	75 0d                	jne    8010497d <exit+0x118>
-        wakeup1(initproc);
-80104970:	a1 68 c6 10 80       	mov    0x8010c668,%eax
-80104975:	89 04 24             	mov    %eax,(%esp)
-80104978:	e8 5f 08 00 00       	call   801051dc <wakeup1>
-  wakeup1(proc->parent);
-//  cprintf("\n This is your captin speaking, here is : %s \n", ptable.proc[SHELL_PID].name);
-
-
-  // Pass abandoned children to init.
-  for(p = ptable.proc; p < &ptable.proc[NPROC]; p++){
-8010497d:	81 45 f4 a0 00 00 00 	addl   $0xa0,-0xc(%ebp)
-80104984:	81 7d f4 b4 61 11 80 	cmpl   $0x801161b4,-0xc(%ebp)
-8010498b:	72 bc                	jb     80104949 <exit+0xe4>
-        wakeup1(initproc);
-    }
-  }
-
-  // Jump into the scheduler, never to return.
-  proc->state = ZOMBIE;
-8010498d:	65 a1 04 00 00 00    	mov    %gs:0x4,%eax
-80104993:	c7 40 0c 05 00 00 00 	movl   $0x5,0xc(%eax)
-  sched();
-8010499a:	e8 92 06 00 00       	call   80105031 <sched>
-  panic("zombie exit");
-8010499f:	c7 04 24 b5 94 10 80 	movl   $0x801094b5,(%esp)
-801049a6:	e8 92 bb ff ff       	call   8010053d <panic>
-
-801049ab <clean_proc_entry>:
-
-
-}
-int clean_proc_entry(struct proc* p){
-801049ab:	55                   	push   %ebp
-801049ac:	89 e5                	mov    %esp,%ebp
-801049ae:	83 ec 28             	sub    $0x28,%esp
-	int pid;
-    // Found one.
-    pid = p->pid;
-801049b1:	8b 45 08             	mov    0x8(%ebp),%eax
-801049b4:	8b 40 10             	mov    0x10(%eax),%eax
-801049b7:	89 45 f4             	mov    %eax,-0xc(%ebp)
-    kfree(p->kstack);
-801049ba:	8b 45 08             	mov    0x8(%ebp),%eax
-801049bd:	8b 40 08             	mov    0x8(%eax),%eax
-801049c0:	89 04 24             	mov    %eax,(%esp)
-801049c3:	e8 06 e1 ff ff       	call   80102ace <kfree>
-    p->kstack = 0;
-801049c8:	8b 45 08             	mov    0x8(%ebp),%eax
-801049cb:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
-    freevm(p->pgdir);
-801049d2:	8b 45 08             	mov    0x8(%ebp),%eax
-801049d5:	8b 40 04             	mov    0x4(%eax),%eax
-801049d8:	89 04 24             	mov    %eax,(%esp)
-801049db:	e8 65 40 00 00       	call   80108a45 <freevm>
-    p->state = UNUSED;
-801049e0:	8b 45 08             	mov    0x8(%ebp),%eax
-801049e3:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%eax)
-    p->pid = 0;
-801049ea:	8b 45 08             	mov    0x8(%ebp),%eax
-801049ed:	c7 40 10 00 00 00 00 	movl   $0x0,0x10(%eax)
-    p->parent = 0;
-801049f4:	8b 45 08             	mov    0x8(%ebp),%eax
-801049f7:	c7 40 18 00 00 00 00 	movl   $0x0,0x18(%eax)
-    p->name[0] = 0;
-801049fe:	8b 45 08             	mov    0x8(%ebp),%eax
-80104a01:	c6 40 70 00          	movb   $0x0,0x70(%eax)
-    p->killed = 0;
-80104a05:	8b 45 08             	mov    0x8(%ebp),%eax
-80104a08:	c7 40 28 00 00 00 00 	movl   $0x0,0x28(%eax)
-    p->retime = 0;
-80104a0f:	8b 45 08             	mov    0x8(%ebp),%eax
-80104a12:	c7 80 90 00 00 00 00 	movl   $0x0,0x90(%eax)
-80104a19:	00 00 00 
-    p->rutime = 0;
-80104a1c:	8b 45 08             	mov    0x8(%ebp),%eax
-80104a1f:	c7 80 94 00 00 00 00 	movl   $0x0,0x94(%eax)
-80104a26:	00 00 00 
-    p->stime = 0;
-80104a29:	8b 45 08             	mov    0x8(%ebp),%eax
-80104a2c:	c7 80 8c 00 00 00 00 	movl   $0x0,0x8c(%eax)
-80104a33:	00 00 00 
-    p->ttime = 0;
-80104a36:	8b 45 08             	mov    0x8(%ebp),%eax
-80104a39:	c7 80 88 00 00 00 00 	movl   $0x0,0x88(%eax)
-80104a40:	00 00 00 
-    p->ctime = 0;
-80104a43:	8b 45 08             	mov    0x8(%ebp),%eax
-80104a46:	c7 80 84 00 00 00 00 	movl   $0x0,0x84(%eax)
-80104a4d:	00 00 00 
-    p->vruntime = 0;
-80104a50:	8b 45 08             	mov    0x8(%ebp),%eax
-80104a53:	c7 80 9c 00 00 00 00 	movl   $0x0,0x9c(%eax)
-80104a5a:	00 00 00 
-    p->priority = PRIORITY_MEDIUM;
-80104a5d:	8b 45 08             	mov    0x8(%ebp),%eax
-80104a60:	c7 80 98 00 00 00 02 	movl   $0x2,0x98(%eax)
-80104a67:	00 00 00 
-//    plist.remove_link(&plist,pid); //todo ifdef
-    return pid;
-80104a6a:	8b 45 f4             	mov    -0xc(%ebp),%eax
-}
-80104a6d:	c9                   	leave  
-80104a6e:	c3                   	ret    
-
-80104a6f <wait>:
-
-// Wait for a child process to exit and return its pid.
-// Return -1 if this process has no children.
-int
-wait(int* status)
-{
-80104a6f:	55                   	push   %ebp
-80104a70:	89 e5                	mov    %esp,%ebp
-80104a72:	83 ec 28             	sub    $0x28,%esp
-  struct proc *p;
-  int havekids, pid;
-
-  acquire(&ptable.lock);
-80104a75:	c7 04 24 80 39 11 80 	movl   $0x80113980,(%esp)
-80104a7c:	e8 a6 09 00 00       	call   80105427 <acquire>
-  for(;;){
-    // Scan through table looking for zombie children.
-    havekids = 0;
-80104a81:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
-    for(p = ptable.proc; p < &ptable.proc[NPROC]; p++){
-80104a88:	c7 45 f4 b4 39 11 80 	movl   $0x801139b4,-0xc(%ebp)
-80104a8f:	eb 5d                	jmp    80104aee <wait+0x7f>
-      if(p->parent != proc)
-80104a91:	8b 45 f4             	mov    -0xc(%ebp),%eax
-80104a94:	8b 50 18             	mov    0x18(%eax),%edx
-80104a97:	65 a1 04 00 00 00    	mov    %gs:0x4,%eax
-80104a9d:	39 c2                	cmp    %eax,%edx
-80104a9f:	75 45                	jne    80104ae6 <wait+0x77>
-        continue;
-      havekids = 1;
-80104aa1:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
-      if(p->state == ZOMBIE){
-80104aa8:	8b 45 f4             	mov    -0xc(%ebp),%eax
-80104aab:	8b 40 0c             	mov    0xc(%eax),%eax
-80104aae:	83 f8 05             	cmp    $0x5,%eax
-80104ab1:	75 34                	jne    80104ae7 <wait+0x78>
-        // Found one.
-        pid = clean_proc_entry(p);
-80104ab3:	8b 45 f4             	mov    -0xc(%ebp),%eax
-80104ab6:	89 04 24             	mov    %eax,(%esp)
-80104ab9:	e8 ed fe ff ff       	call   801049ab <clean_proc_entry>
-80104abe:	89 45 ec             	mov    %eax,-0x14(%ebp)
-
-        if(status){ // if user did not send status=0 (do not care)
-80104ac1:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
-80104ac5:	74 0e                	je     80104ad5 <wait+0x66>
-            *status = p->status; //return status to caller
-80104ac7:	8b 45 f4             	mov    -0xc(%ebp),%eax
-80104aca:	8b 90 80 00 00 00    	mov    0x80(%eax),%edx
-80104ad0:	8b 45 08             	mov    0x8(%ebp),%eax
-80104ad3:	89 10                	mov    %edx,(%eax)
-        }
-
-        release(&ptable.lock);
-80104ad5:	c7 04 24 80 39 11 80 	movl   $0x80113980,(%esp)
-80104adc:	e8 a8 09 00 00       	call   80105489 <release>
-
-        return pid;
-80104ae1:	8b 45 ec             	mov    -0x14(%ebp),%eax
-80104ae4:	eb 52                	jmp    80104b38 <wait+0xc9>
-  for(;;){
-    // Scan through table looking for zombie children.
-    havekids = 0;
-    for(p = ptable.proc; p < &ptable.proc[NPROC]; p++){
-      if(p->parent != proc)
-        continue;
-80104ae6:	90                   	nop
-
-  acquire(&ptable.lock);
-  for(;;){
-    // Scan through table looking for zombie children.
-    havekids = 0;
-    for(p = ptable.proc; p < &ptable.proc[NPROC]; p++){
-80104ae7:	81 45 f4 a0 00 00 00 	addl   $0xa0,-0xc(%ebp)
-80104aee:	81 7d f4 b4 61 11 80 	cmpl   $0x801161b4,-0xc(%ebp)
-80104af5:	72 9a                	jb     80104a91 <wait+0x22>
-        return pid;
-      }
-    }
-
-    // No point waiting if we don't have any children.
-    if(!havekids || proc->killed){
-80104af7:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
-80104afb:	74 0d                	je     80104b0a <wait+0x9b>
-80104afd:	65 a1 04 00 00 00    	mov    %gs:0x4,%eax
-80104b03:	8b 40 28             	mov    0x28(%eax),%eax
-80104b06:	85 c0                	test   %eax,%eax
-80104b08:	74 13                	je     80104b1d <wait+0xae>
-      release(&ptable.lock);
-80104b0a:	c7 04 24 80 39 11 80 	movl   $0x80113980,(%esp)
-80104b11:	e8 73 09 00 00       	call   80105489 <release>
-      return -1;
-80104b16:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
-80104b1b:	eb 1b                	jmp    80104b38 <wait+0xc9>
-    }
-
-    // Wait for children to exit.  (See wakeup1 call in proc_exit.)
-    sleep(proc, &ptable.lock);  //DOC: wait-sleep
-80104b1d:	65 a1 04 00 00 00    	mov    %gs:0x4,%eax
-80104b23:	c7 44 24 04 80 39 11 	movl   $0x80113980,0x4(%esp)
-80104b2a:	80 
-80104b2b:	89 04 24             	mov    %eax,(%esp)
-80104b2e:	e8 0e 06 00 00       	call   80105141 <sleep>
-  }
-80104b33:	e9 49 ff ff ff       	jmp    80104a81 <wait+0x12>
-}
-80104b38:	c9                   	leave  
-80104b39:	c3                   	ret    
-
-80104b3a <shellWait>:
-
-int
-shellWait(int childPid)
-{
-80104b3a:	55                   	push   %ebp
-80104b3b:	89 e5                	mov    %esp,%ebp
-80104b3d:	83 ec 28             	sub    $0x28,%esp
-  for(;;){
-    // Scan through table looking for zombie children.
-   // havekids = 0;
-   // isMyChild = 0;
-
-    for(p = ptable.proc; p < &ptable.proc[NPROC]; p++){
-80104b40:	c7 45 f4 b4 39 11 80 	movl   $0x801139b4,-0xc(%ebp)
-80104b47:	eb 4d                	jmp    80104b96 <shellWait+0x5c>
-      if(p->parent != proc)
-80104b49:	8b 45 f4             	mov    -0xc(%ebp),%eax
-80104b4c:	8b 50 18             	mov    0x18(%eax),%edx
-80104b4f:	65 a1 04 00 00 00    	mov    %gs:0x4,%eax
-80104b55:	39 c2                	cmp    %eax,%edx
-80104b57:	75 35                	jne    80104b8e <shellWait+0x54>
-        continue;
-    //  havekids = 1;
-      if( p->pid == childPid ){
-80104b59:	8b 45 f4             	mov    -0xc(%ebp),%eax
-80104b5c:	8b 40 10             	mov    0x10(%eax),%eax
-80104b5f:	3b 45 08             	cmp    0x8(%ebp),%eax
-80104b62:	75 2b                	jne    80104b8f <shellWait+0x55>
-    	 //isMyChild = 1;
-		 if(p->state == ZOMBIE ){
-80104b64:	8b 45 f4             	mov    -0xc(%ebp),%eax
-80104b67:	8b 40 0c             	mov    0xc(%eax),%eax
-80104b6a:	83 f8 05             	cmp    $0x5,%eax
-80104b6d:	75 20                	jne    80104b8f <shellWait+0x55>
-			pid = clean_proc_entry(p);
-80104b6f:	8b 45 f4             	mov    -0xc(%ebp),%eax
-80104b72:	89 04 24             	mov    %eax,(%esp)
-80104b75:	e8 31 fe ff ff       	call   801049ab <clean_proc_entry>
-80104b7a:	89 45 f0             	mov    %eax,-0x10(%ebp)
-			release(&ptable.lock);
-80104b7d:	c7 04 24 80 39 11 80 	movl   $0x80113980,(%esp)
-80104b84:	e8 00 09 00 00       	call   80105489 <release>
-
-			return pid;
-80104b89:	8b 45 f0             	mov    -0x10(%ebp),%eax
-      }
-
-    }
-	sleep(proc, &ptable.lock);
-  }
-}
-80104b8c:	c9                   	leave  
-80104b8d:	c3                   	ret    
-   // havekids = 0;
-   // isMyChild = 0;
-
-    for(p = ptable.proc; p < &ptable.proc[NPROC]; p++){
-      if(p->parent != proc)
-        continue;
-80104b8e:	90                   	nop
-  for(;;){
-    // Scan through table looking for zombie children.
-   // havekids = 0;
-   // isMyChild = 0;
-
-    for(p = ptable.proc; p < &ptable.proc[NPROC]; p++){
-80104b8f:	81 45 f4 a0 00 00 00 	addl   $0xa0,-0xc(%ebp)
-80104b96:	81 7d f4 b4 61 11 80 	cmpl   $0x801161b4,-0xc(%ebp)
-80104b9d:	72 aa                	jb     80104b49 <shellWait+0xf>
-			return pid;
-		  }
-      }
-
-    }
-	sleep(proc, &ptable.lock);
-80104b9f:	65 a1 04 00 00 00    	mov    %gs:0x4,%eax
-80104ba5:	c7 44 24 04 80 39 11 	movl   $0x80113980,0x4(%esp)
-80104bac:	80 
-80104bad:	89 04 24             	mov    %eax,(%esp)
-80104bb0:	e8 8c 05 00 00       	call   80105141 <sleep>
-  }
-80104bb5:	eb 89                	jmp    80104b40 <shellWait+0x6>
-
-80104bb7 <waitpid>:
-
-// Wait for a child process *with a specific pid* to exit and return its pid.
-// Return -1 if this process has no children.
-int
-waitpid(int childPid, int* status, int options)
-{
-80104bb7:	55                   	push   %ebp
-80104bb8:	89 e5                	mov    %esp,%ebp
-80104bba:	83 ec 28             	sub    $0x28,%esp
-  struct proc *p;
-  int havekids, pid, isMyChild;
-
-  acquire(&ptable.lock);
-80104bbd:	c7 04 24 80 39 11 80 	movl   $0x80113980,(%esp)
-80104bc4:	e8 5e 08 00 00       	call   80105427 <acquire>
-  for(;;){
-    // Scan through table looking for zombie children.
-    havekids = 0;
-80104bc9:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
-    isMyChild = 0;
-80104bd0:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
-
-    for(p = ptable.proc; p < &ptable.proc[NPROC]; p++){
-80104bd7:	c7 45 f4 b4 39 11 80 	movl   $0x801139b4,-0xc(%ebp)
-80104bde:	eb 72                	jmp    80104c52 <waitpid+0x9b>
-      if(p->parent != proc)
-80104be0:	8b 45 f4             	mov    -0xc(%ebp),%eax
-80104be3:	8b 50 18             	mov    0x18(%eax),%edx
-80104be6:	65 a1 04 00 00 00    	mov    %gs:0x4,%eax
-80104bec:	39 c2                	cmp    %eax,%edx
-80104bee:	75 5a                	jne    80104c4a <waitpid+0x93>
-        continue;
-      havekids = 1;
-80104bf0:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
-      if( p->pid == childPid ){
-80104bf7:	8b 45 f4             	mov    -0xc(%ebp),%eax
-80104bfa:	8b 40 10             	mov    0x10(%eax),%eax
-80104bfd:	3b 45 08             	cmp    0x8(%ebp),%eax
-80104c00:	75 49                	jne    80104c4b <waitpid+0x94>
-    	 isMyChild = 1;
-80104c02:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
-		 if(p->state == ZOMBIE ){
-80104c09:	8b 45 f4             	mov    -0xc(%ebp),%eax
-80104c0c:	8b 40 0c             	mov    0xc(%eax),%eax
-80104c0f:	83 f8 05             	cmp    $0x5,%eax
-80104c12:	75 37                	jne    80104c4b <waitpid+0x94>
-			pid = clean_proc_entry(p);
-80104c14:	8b 45 f4             	mov    -0xc(%ebp),%eax
-80104c17:	89 04 24             	mov    %eax,(%esp)
-80104c1a:	e8 8c fd ff ff       	call   801049ab <clean_proc_entry>
-80104c1f:	89 45 e8             	mov    %eax,-0x18(%ebp)
-
-			if(status){ // if user did not send status=0 (do not care)
-80104c22:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
-80104c26:	74 0e                	je     80104c36 <waitpid+0x7f>
-				*status = p->status; //return status to caller
-80104c28:	8b 45 f4             	mov    -0xc(%ebp),%eax
-80104c2b:	8b 90 80 00 00 00    	mov    0x80(%eax),%edx
-80104c31:	8b 45 0c             	mov    0xc(%ebp),%eax
-80104c34:	89 10                	mov    %edx,(%eax)
-			}
-
-			release(&ptable.lock);
-80104c36:	c7 04 24 80 39 11 80 	movl   $0x80113980,(%esp)
-80104c3d:	e8 47 08 00 00       	call   80105489 <release>
-
-			return pid;
-80104c42:	8b 45 e8             	mov    -0x18(%ebp),%eax
-80104c45:	e9 8b 00 00 00       	jmp    80104cd5 <waitpid+0x11e>
-    havekids = 0;
-    isMyChild = 0;
-
-    for(p = ptable.proc; p < &ptable.proc[NPROC]; p++){
-      if(p->parent != proc)
-        continue;
-80104c4a:	90                   	nop
-  for(;;){
-    // Scan through table looking for zombie children.
-    havekids = 0;
-    isMyChild = 0;
-
-    for(p = ptable.proc; p < &ptable.proc[NPROC]; p++){
-80104c4b:	81 45 f4 a0 00 00 00 	addl   $0xa0,-0xc(%ebp)
-80104c52:	81 7d f4 b4 61 11 80 	cmpl   $0x801161b4,-0xc(%ebp)
-80104c59:	72 85                	jb     80104be0 <waitpid+0x29>
-      }
-
-    }
-
-    // No point waiting if we don't have any children.
-    if(!havekids || !isMyChild || proc->killed){
-80104c5b:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
-80104c5f:	74 13                	je     80104c74 <waitpid+0xbd>
-80104c61:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
-80104c65:	74 0d                	je     80104c74 <waitpid+0xbd>
-80104c67:	65 a1 04 00 00 00    	mov    %gs:0x4,%eax
-80104c6d:	8b 40 28             	mov    0x28(%eax),%eax
-80104c70:	85 c0                	test   %eax,%eax
-80104c72:	74 13                	je     80104c87 <waitpid+0xd0>
-      release(&ptable.lock);
-80104c74:	c7 04 24 80 39 11 80 	movl   $0x80113980,(%esp)
-80104c7b:	e8 09 08 00 00       	call   80105489 <release>
-      return -1;
-80104c80:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
-80104c85:	eb 4e                	jmp    80104cd5 <waitpid+0x11e>
-    }
-
-    switch (options) {
-80104c87:	8b 45 10             	mov    0x10(%ebp),%eax
-80104c8a:	85 c0                	test   %eax,%eax
-80104c8c:	74 07                	je     80104c95 <waitpid+0xde>
-80104c8e:	83 f8 01             	cmp    $0x1,%eax
-80104c91:	74 1e                	je     80104cb1 <waitpid+0xfa>
-80104c93:	eb 2f                	jmp    80104cc4 <waitpid+0x10d>
-		case BLOCKING:
-			sleep(proc, &ptable.lock);
-80104c95:	65 a1 04 00 00 00    	mov    %gs:0x4,%eax
-80104c9b:	c7 44 24 04 80 39 11 	movl   $0x80113980,0x4(%esp)
-80104ca2:	80 
-80104ca3:	89 04 24             	mov    %eax,(%esp)
-80104ca6:	e8 96 04 00 00       	call   80105141 <sleep>
-			break;
-80104cab:	90                   	nop
-			release(&ptable.lock);
-			return -1;
-			break;
-	}
-
-  }
-80104cac:	e9 18 ff ff ff       	jmp    80104bc9 <waitpid+0x12>
-    switch (options) {
-		case BLOCKING:
-			sleep(proc, &ptable.lock);
-			break;
-		case NONBLOCKING:
-			release(&ptable.lock);
-80104cb1:	c7 04 24 80 39 11 80 	movl   $0x80113980,(%esp)
-80104cb8:	e8 cc 07 00 00       	call   80105489 <release>
-			return -1;
-80104cbd:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
-80104cc2:	eb 11                	jmp    80104cd5 <waitpid+0x11e>
-			break;
-		default:
-			release(&ptable.lock);
-80104cc4:	c7 04 24 80 39 11 80 	movl   $0x80113980,(%esp)
-80104ccb:	e8 b9 07 00 00       	call   80105489 <release>
-			return -1;
-80104cd0:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
-			break;
-	}
-
-  }
-}
-80104cd5:	c9                   	leave  
-80104cd6:	c3                   	ret    
-
-80104cd7 <wait_stat>:
-
-int
-wait_stat(int* wtime, int* rtime, int* iotime, int* status)
-{
-80104cd7:	55                   	push   %ebp
-80104cd8:	89 e5                	mov    %esp,%ebp
-80104cda:	83 ec 28             	sub    $0x28,%esp
-	  struct proc *p;
-	  int havekids, pid;
-
-	  acquire(&ptable.lock);
-80104cdd:	c7 04 24 80 39 11 80 	movl   $0x80113980,(%esp)
-80104ce4:	e8 3e 07 00 00       	call   80105427 <acquire>
-	  for(;;){
-	    // Scan through table looking for zombie children.
-	    havekids = 0;
-80104ce9:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
-	    for(p = ptable.proc; p < &ptable.proc[NPROC]; p++){
-80104cf0:	c7 45 f4 b4 39 11 80 	movl   $0x801139b4,-0xc(%ebp)
-80104cf7:	e9 87 00 00 00       	jmp    80104d83 <wait_stat+0xac>
-	      if(p->parent != proc)
-80104cfc:	8b 45 f4             	mov    -0xc(%ebp),%eax
-80104cff:	8b 50 18             	mov    0x18(%eax),%edx
-80104d02:	65 a1 04 00 00 00    	mov    %gs:0x4,%eax
-80104d08:	39 c2                	cmp    %eax,%edx
-80104d0a:	75 6f                	jne    80104d7b <wait_stat+0xa4>
-	        continue;
-	      havekids = 1;
-80104d0c:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
-	      if(p->state == ZOMBIE){
-80104d13:	8b 45 f4             	mov    -0xc(%ebp),%eax
-80104d16:	8b 40 0c             	mov    0xc(%eax),%eax
-80104d19:	83 f8 05             	cmp    $0x5,%eax
-80104d1c:	75 5e                	jne    80104d7c <wait_stat+0xa5>
-	        // Found one.
-	    	*wtime = p->retime;
-80104d1e:	8b 45 f4             	mov    -0xc(%ebp),%eax
-80104d21:	8b 90 90 00 00 00    	mov    0x90(%eax),%edx
-80104d27:	8b 45 08             	mov    0x8(%ebp),%eax
-80104d2a:	89 10                	mov    %edx,(%eax)
-	    	*rtime = p->rutime;
-80104d2c:	8b 45 f4             	mov    -0xc(%ebp),%eax
-80104d2f:	8b 90 94 00 00 00    	mov    0x94(%eax),%edx
-80104d35:	8b 45 0c             	mov    0xc(%ebp),%eax
-80104d38:	89 10                	mov    %edx,(%eax)
-	    	*iotime = p->stime;
-80104d3a:	8b 45 f4             	mov    -0xc(%ebp),%eax
-80104d3d:	8b 90 8c 00 00 00    	mov    0x8c(%eax),%edx
-80104d43:	8b 45 10             	mov    0x10(%ebp),%eax
-80104d46:	89 10                	mov    %edx,(%eax)
-
-	        pid = clean_proc_entry(p);
-80104d48:	8b 45 f4             	mov    -0xc(%ebp),%eax
-80104d4b:	89 04 24             	mov    %eax,(%esp)
-80104d4e:	e8 58 fc ff ff       	call   801049ab <clean_proc_entry>
-80104d53:	89 45 ec             	mov    %eax,-0x14(%ebp)
-
-	        if(status){ // if user did not send status=0 (do not care)
-80104d56:	83 7d 14 00          	cmpl   $0x0,0x14(%ebp)
-80104d5a:	74 0e                	je     80104d6a <wait_stat+0x93>
-	            *status = p->status; //return status to caller
-80104d5c:	8b 45 f4             	mov    -0xc(%ebp),%eax
-80104d5f:	8b 90 80 00 00 00    	mov    0x80(%eax),%edx
-80104d65:	8b 45 14             	mov    0x14(%ebp),%eax
-80104d68:	89 10                	mov    %edx,(%eax)
-	        }
-
-	        release(&ptable.lock);
-80104d6a:	c7 04 24 80 39 11 80 	movl   $0x80113980,(%esp)
-80104d71:	e8 13 07 00 00       	call   80105489 <release>
-
-	        return pid;
-80104d76:	8b 45 ec             	mov    -0x14(%ebp),%eax
-80104d79:	eb 56                	jmp    80104dd1 <wait_stat+0xfa>
-	  for(;;){
-	    // Scan through table looking for zombie children.
-	    havekids = 0;
-	    for(p = ptable.proc; p < &ptable.proc[NPROC]; p++){
-	      if(p->parent != proc)
-	        continue;
-80104d7b:	90                   	nop
-
-	  acquire(&ptable.lock);
-	  for(;;){
-	    // Scan through table looking for zombie children.
-	    havekids = 0;
-	    for(p = ptable.proc; p < &ptable.proc[NPROC]; p++){
-80104d7c:	81 45 f4 a0 00 00 00 	addl   $0xa0,-0xc(%ebp)
-80104d83:	81 7d f4 b4 61 11 80 	cmpl   $0x801161b4,-0xc(%ebp)
-80104d8a:	0f 82 6c ff ff ff    	jb     80104cfc <wait_stat+0x25>
-	        return pid;
-	      }
-	    }
-
-	    // No point waiting if we don't have any children.
-	    if(!havekids || proc->killed){
-80104d90:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
-80104d94:	74 0d                	je     80104da3 <wait_stat+0xcc>
-80104d96:	65 a1 04 00 00 00    	mov    %gs:0x4,%eax
-80104d9c:	8b 40 28             	mov    0x28(%eax),%eax
-80104d9f:	85 c0                	test   %eax,%eax
-80104da1:	74 13                	je     80104db6 <wait_stat+0xdf>
-	      release(&ptable.lock);
-80104da3:	c7 04 24 80 39 11 80 	movl   $0x80113980,(%esp)
-80104daa:	e8 da 06 00 00       	call   80105489 <release>
-	      return -1;
-80104daf:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
-80104db4:	eb 1b                	jmp    80104dd1 <wait_stat+0xfa>
-	    }
-
-	    // Wait for children to exit.  (See wakeup1 call in proc_exit.)
-	    sleep(proc, &ptable.lock);  //DOC: wait-sleep
-80104db6:	65 a1 04 00 00 00    	mov    %gs:0x4,%eax
-80104dbc:	c7 44 24 04 80 39 11 	movl   $0x80113980,0x4(%esp)
-80104dc3:	80 
-80104dc4:	89 04 24             	mov    %eax,(%esp)
-80104dc7:	e8 75 03 00 00       	call   80105141 <sleep>
-	  }
-80104dcc:	e9 18 ff ff ff       	jmp    80104ce9 <wait_stat+0x12>
-}
-80104dd1:	c9                   	leave  
-80104dd2:	c3                   	ret    
-
-80104dd3 <foreground>:
-
-int
-foreground(int gid)
-{
-80104dd3:	55                   	push   %ebp
-80104dd4:	89 e5                	mov    %esp,%ebp
-80104dd6:	81 ec 28 01 00 00    	sub    $0x128,%esp
-	struct proc* p;
-	int pids[64];
-	int counter = 0;
-80104ddc:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
-//	int i, status;
-	int i;
-	int retVal = -1;
-80104de3:	c7 45 e8 ff ff ff ff 	movl   $0xffffffff,-0x18(%ebp)
-
-	//cprintf("called fg with gid: %d \n", gid);
-	acquire(&ptable.lock);
-80104dea:	c7 04 24 80 39 11 80 	movl   $0x80113980,(%esp)
-80104df1:	e8 31 06 00 00       	call   80105427 <acquire>
-	for(p = ptable.proc; p < &ptable.proc[NPROC]; p++){
-80104df6:	c7 45 f4 b4 39 11 80 	movl   $0x801139b4,-0xc(%ebp)
-80104dfd:	eb 60                	jmp    80104e5f <foreground+0x8c>
-			if( ( p->state == RUNNING ||  p->state == RUNNABLE ||  p->state == SLEEPING) &&
-80104dff:	8b 45 f4             	mov    -0xc(%ebp),%eax
-80104e02:	8b 40 0c             	mov    0xc(%eax),%eax
-80104e05:	83 f8 04             	cmp    $0x4,%eax
-80104e08:	74 16                	je     80104e20 <foreground+0x4d>
-80104e0a:	8b 45 f4             	mov    -0xc(%ebp),%eax
-80104e0d:	8b 40 0c             	mov    0xc(%eax),%eax
-80104e10:	83 f8 03             	cmp    $0x3,%eax
-80104e13:	74 0b                	je     80104e20 <foreground+0x4d>
-80104e15:	8b 45 f4             	mov    -0xc(%ebp),%eax
-80104e18:	8b 40 0c             	mov    0xc(%eax),%eax
-80104e1b:	83 f8 02             	cmp    $0x2,%eax
-80104e1e:	75 38                	jne    80104e58 <foreground+0x85>
-				(p->parent == initproc) &&
-80104e20:	8b 45 f4             	mov    -0xc(%ebp),%eax
-80104e23:	8b 50 18             	mov    0x18(%eax),%edx
-80104e26:	a1 68 c6 10 80       	mov    0x8010c668,%eax
-	int retVal = -1;
-
-	//cprintf("called fg with gid: %d \n", gid);
-	acquire(&ptable.lock);
-	for(p = ptable.proc; p < &ptable.proc[NPROC]; p++){
-			if( ( p->state == RUNNING ||  p->state == RUNNABLE ||  p->state == SLEEPING) &&
-80104e2b:	39 c2                	cmp    %eax,%edx
-80104e2d:	75 29                	jne    80104e58 <foreground+0x85>
-				(p->parent == initproc) &&
-				(p->gid == gid) )
-80104e2f:	8b 45 f4             	mov    -0xc(%ebp),%eax
-80104e32:	8b 40 14             	mov    0x14(%eax),%eax
-
-	//cprintf("called fg with gid: %d \n", gid);
-	acquire(&ptable.lock);
-	for(p = ptable.proc; p < &ptable.proc[NPROC]; p++){
-			if( ( p->state == RUNNING ||  p->state == RUNNABLE ||  p->state == SLEEPING) &&
-				(p->parent == initproc) &&
-80104e35:	3b 45 08             	cmp    0x8(%ebp),%eax
-80104e38:	75 1e                	jne    80104e58 <foreground+0x85>
-				(p->gid == gid) )
-			{
-				p->parent = &ptable.proc[1]; //parent = shell
-80104e3a:	8b 45 f4             	mov    -0xc(%ebp),%eax
-80104e3d:	c7 40 18 54 3a 11 80 	movl   $0x80113a54,0x18(%eax)
-				pids[counter] = p->pid;
-80104e44:	8b 45 f4             	mov    -0xc(%ebp),%eax
-80104e47:	8b 50 10             	mov    0x10(%eax),%edx
-80104e4a:	8b 45 f0             	mov    -0x10(%ebp),%eax
-80104e4d:	89 94 85 e8 fe ff ff 	mov    %edx,-0x118(%ebp,%eax,4)
-				counter++;
-80104e54:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)
-	int i;
-	int retVal = -1;
-
-	//cprintf("called fg with gid: %d \n", gid);
-	acquire(&ptable.lock);
-	for(p = ptable.proc; p < &ptable.proc[NPROC]; p++){
-80104e58:	81 45 f4 a0 00 00 00 	addl   $0xa0,-0xc(%ebp)
-80104e5f:	81 7d f4 b4 61 11 80 	cmpl   $0x801161b4,-0xc(%ebp)
-80104e66:	72 97                	jb     80104dff <foreground+0x2c>
-				p->parent = &ptable.proc[1]; //parent = shell
-				pids[counter] = p->pid;
-				counter++;
-			}
-	}
-	for(i=0; i < counter; i++){
-80104e68:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
-80104e6f:	eb 22                	jmp    80104e93 <foreground+0xc0>
-		//cprintf("**waiting for: %d \n ",pids[i]);
-		if (shellWait(pids[i]) != -1)	retVal = 1;
-80104e71:	8b 45 ec             	mov    -0x14(%ebp),%eax
-80104e74:	8b 84 85 e8 fe ff ff 	mov    -0x118(%ebp,%eax,4),%eax
-80104e7b:	89 04 24             	mov    %eax,(%esp)
-80104e7e:	e8 b7 fc ff ff       	call   80104b3a <shellWait>
-80104e83:	83 f8 ff             	cmp    $0xffffffff,%eax
-80104e86:	74 07                	je     80104e8f <foreground+0xbc>
-80104e88:	c7 45 e8 01 00 00 00 	movl   $0x1,-0x18(%ebp)
-				p->parent = &ptable.proc[1]; //parent = shell
-				pids[counter] = p->pid;
-				counter++;
-			}
-	}
-	for(i=0; i < counter; i++){
-80104e8f:	83 45 ec 01          	addl   $0x1,-0x14(%ebp)
-80104e93:	8b 45 ec             	mov    -0x14(%ebp),%eax
-80104e96:	3b 45 f0             	cmp    -0x10(%ebp),%eax
-80104e99:	7c d6                	jl     80104e71 <foreground+0x9e>
-		//cprintf("**waiting for: %d \n ",pids[i]);
-		if (shellWait(pids[i]) != -1)	retVal = 1;
-	}
-	release(&ptable.lock);
-80104e9b:	c7 04 24 80 39 11 80 	movl   $0x80113980,(%esp)
-80104ea2:	e8 e2 05 00 00       	call   80105489 <release>
-		cprintf("**waiting for: %d \n ",pids[i]);
-		waitpid(pids[i], &status, BLOCKING);
-	}
-	*/
-
-	return retVal;
-80104ea7:	8b 45 e8             	mov    -0x18(%ebp),%eax
-}
-80104eaa:	c9                   	leave  
-80104eab:	c3                   	ret    
-
-80104eac <set_priority>:
-
-int
-set_priority(int priority)
-{
-80104eac:	55                   	push   %ebp
-80104ead:	89 e5                	mov    %esp,%ebp
-#ifndef CFS
-	return -1;
-80104eaf:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
-#endif
-	acquire(&ptable.lock);
-	proc->priority = priority;
-	release(&ptable.lock);
-	return 1;
-}
-80104eb4:	5d                   	pop    %ebp
-80104eb5:	c3                   	ret    
-
-80104eb6 <list_pgroup>:
-
-// Filling process_info_entry array with <pid,name> that is not zombie and has required <gid>
-// should be called with a 64(=MAX NUM OF PROCESSES), will set <size> accordingly
-int
-list_pgroup(int gid, process_info_entry* arr, int* size)
-{
-80104eb6:	55                   	push   %ebp
-80104eb7:	89 e5                	mov    %esp,%ebp
-80104eb9:	83 ec 28             	sub    $0x28,%esp
-	struct proc* p;
-	int i = 0;
-80104ebc:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
-//	  head->id = 18;
-//	  head->data = 0;
-//
-//	  add_last(&plist,head);
-//	plist.print(&plist);
-	acquire(&ptable.lock);
-80104ec3:	c7 04 24 80 39 11 80 	movl   $0x80113980,(%esp)
-80104eca:	e8 58 05 00 00       	call   80105427 <acquire>
-//		j++;
-//	}
-
-//	cprintf("requested listing of processes with group id %d \n", gid);
-
-	for(p = ptable.proc; p < &ptable.proc[NPROC]; p++){
-80104ecf:	c7 45 f4 b4 39 11 80 	movl   $0x801139b4,-0xc(%ebp)
-80104ed6:	eb 7c                	jmp    80104f54 <list_pgroup+0x9e>
-		if( ( p->state == RUNNING ||  p->state == RUNNABLE ||  p->state == SLEEPING) &&
-80104ed8:	8b 45 f4             	mov    -0xc(%ebp),%eax
-80104edb:	8b 40 0c             	mov    0xc(%eax),%eax
-80104ede:	83 f8 04             	cmp    $0x4,%eax
-80104ee1:	74 16                	je     80104ef9 <list_pgroup+0x43>
-80104ee3:	8b 45 f4             	mov    -0xc(%ebp),%eax
-80104ee6:	8b 40 0c             	mov    0xc(%eax),%eax
-80104ee9:	83 f8 03             	cmp    $0x3,%eax
-80104eec:	74 0b                	je     80104ef9 <list_pgroup+0x43>
-80104eee:	8b 45 f4             	mov    -0xc(%ebp),%eax
-80104ef1:	8b 40 0c             	mov    0xc(%eax),%eax
-80104ef4:	83 f8 02             	cmp    $0x2,%eax
-80104ef7:	75 54                	jne    80104f4d <list_pgroup+0x97>
-			p->gid == gid ){
-80104ef9:	8b 45 f4             	mov    -0xc(%ebp),%eax
-80104efc:	8b 40 14             	mov    0x14(%eax),%eax
-//	}
-
-//	cprintf("requested listing of processes with group id %d \n", gid);
-
-	for(p = ptable.proc; p < &ptable.proc[NPROC]; p++){
-		if( ( p->state == RUNNING ||  p->state == RUNNABLE ||  p->state == SLEEPING) &&
-80104eff:	3b 45 08             	cmp    0x8(%ebp),%eax
-80104f02:	75 49                	jne    80104f4d <list_pgroup+0x97>
-			p->gid == gid ){
-
-			arr[i].pid = p->pid;
-80104f04:	8b 55 f0             	mov    -0x10(%ebp),%edx
-80104f07:	89 d0                	mov    %edx,%eax
-80104f09:	c1 e0 02             	shl    $0x2,%eax
-80104f0c:	01 d0                	add    %edx,%eax
-80104f0e:	c1 e0 02             	shl    $0x2,%eax
-80104f11:	03 45 0c             	add    0xc(%ebp),%eax
-80104f14:	8b 55 f4             	mov    -0xc(%ebp),%edx
-80104f17:	8b 52 10             	mov    0x10(%edx),%edx
-80104f1a:	89 10                	mov    %edx,(%eax)
-			safestrcpy(arr[i].name, p->name, sizeof(arr[i].name));
-80104f1c:	8b 45 f4             	mov    -0xc(%ebp),%eax
-80104f1f:	8d 48 70             	lea    0x70(%eax),%ecx
-80104f22:	8b 55 f0             	mov    -0x10(%ebp),%edx
-80104f25:	89 d0                	mov    %edx,%eax
-80104f27:	c1 e0 02             	shl    $0x2,%eax
-80104f2a:	01 d0                	add    %edx,%eax
-80104f2c:	c1 e0 02             	shl    $0x2,%eax
-80104f2f:	03 45 0c             	add    0xc(%ebp),%eax
-80104f32:	83 c0 04             	add    $0x4,%eax
-80104f35:	c7 44 24 08 10 00 00 	movl   $0x10,0x8(%esp)
-80104f3c:	00 
-80104f3d:	89 4c 24 04          	mov    %ecx,0x4(%esp)
-80104f41:	89 04 24             	mov    %eax,(%esp)
-80104f44:	e8 5d 09 00 00       	call   801058a6 <safestrcpy>
-			i++;
-80104f49:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)
-//		j++;
-//	}
-
-//	cprintf("requested listing of processes with group id %d \n", gid);
-
-	for(p = ptable.proc; p < &ptable.proc[NPROC]; p++){
-80104f4d:	81 45 f4 a0 00 00 00 	addl   $0xa0,-0xc(%ebp)
-80104f54:	81 7d f4 b4 61 11 80 	cmpl   $0x801161b4,-0xc(%ebp)
-80104f5b:	0f 82 77 ff ff ff    	jb     80104ed8 <list_pgroup+0x22>
-		}
-	}
-
-//	cprintf("found %d for group id %d  \n", i, gid);
-
-	*size = i;
-80104f61:	8b 45 10             	mov    0x10(%ebp),%eax
-80104f64:	8b 55 f0             	mov    -0x10(%ebp),%edx
-80104f67:	89 10                	mov    %edx,(%eax)
-	release(&ptable.lock);
-80104f69:	c7 04 24 80 39 11 80 	movl   $0x80113980,(%esp)
-80104f70:	e8 14 05 00 00       	call   80105489 <release>
-
-	return 0;
-80104f75:	b8 00 00 00 00       	mov    $0x0,%eax
-}
-80104f7a:	c9                   	leave  
-80104f7b:	c3                   	ret    
-
-80104f7c <scheduler_default>:
-//  - swtch to start running that process
-//  - eventually that process transfers control
-//      via swtch back to the scheduler.
-void
-scheduler_default(void)
-{
-80104f7c:	55                   	push   %ebp
-80104f7d:	89 e5                	mov    %esp,%ebp
-80104f7f:	83 ec 28             	sub    $0x28,%esp
-  struct proc *p;
-
-  for(;;){
-    // Enable interrupts on this processor.
-    sti();
-80104f82:	e8 32 f4 ff ff       	call   801043b9 <sti>
-
-    // Loop over process table looking for process to run.
-    acquire(&ptable.lock);
-80104f87:	c7 04 24 80 39 11 80 	movl   $0x80113980,(%esp)
-80104f8e:	e8 94 04 00 00       	call   80105427 <acquire>
-    for(p = ptable.proc; p < &ptable.proc[NPROC]; p++){
-80104f93:	c7 45 f4 b4 39 11 80 	movl   $0x801139b4,-0xc(%ebp)
-80104f9a:	eb 62                	jmp    80104ffe <scheduler_default+0x82>
-      if(p->state != RUNNABLE)
-80104f9c:	8b 45 f4             	mov    -0xc(%ebp),%eax
-80104f9f:	8b 40 0c             	mov    0xc(%eax),%eax
-80104fa2:	83 f8 03             	cmp    $0x3,%eax
-80104fa5:	75 4f                	jne    80104ff6 <scheduler_default+0x7a>
-        continue;
-
-      // Switch to chosen process.  It is the process's job
-      // to release ptable.lock and then reacquire it
-      // before jumping back to us.
-      proc = p;
-80104fa7:	8b 45 f4             	mov    -0xc(%ebp),%eax
-80104faa:	65 a3 04 00 00 00    	mov    %eax,%gs:0x4
-      switchuvm(p);
-80104fb0:	8b 45 f4             	mov    -0xc(%ebp),%eax
-80104fb3:	89 04 24             	mov    %eax,(%esp)
-80104fb6:	e8 13 36 00 00       	call   801085ce <switchuvm>
-      p->state = RUNNING;
-80104fbb:	8b 45 f4             	mov    -0xc(%ebp),%eax
-80104fbe:	c7 40 0c 04 00 00 00 	movl   $0x4,0xc(%eax)
-      swtch(&cpu->scheduler, proc->context);
-80104fc5:	65 a1 04 00 00 00    	mov    %gs:0x4,%eax
-80104fcb:	8b 40 20             	mov    0x20(%eax),%eax
-80104fce:	65 8b 15 00 00 00 00 	mov    %gs:0x0,%edx
-80104fd5:	83 c2 04             	add    $0x4,%edx
-80104fd8:	89 44 24 04          	mov    %eax,0x4(%esp)
-80104fdc:	89 14 24             	mov    %edx,(%esp)
-80104fdf:	e8 38 09 00 00       	call   8010591c <swtch>
-      switchkvm();
-80104fe4:	e8 c8 35 00 00       	call   801085b1 <switchkvm>
-
-      // Process is done running for now.
-      // It should have changed its p->state before coming back.
-      proc = 0;
-80104fe9:	65 c7 05 04 00 00 00 	movl   $0x0,%gs:0x4
-80104ff0:	00 00 00 00 
-80104ff4:	eb 01                	jmp    80104ff7 <scheduler_default+0x7b>
-
-    // Loop over process table looking for process to run.
-    acquire(&ptable.lock);
-    for(p = ptable.proc; p < &ptable.proc[NPROC]; p++){
-      if(p->state != RUNNABLE)
-        continue;
-80104ff6:	90                   	nop
-    // Enable interrupts on this processor.
-    sti();
-
-    // Loop over process table looking for process to run.
-    acquire(&ptable.lock);
-    for(p = ptable.proc; p < &ptable.proc[NPROC]; p++){
-80104ff7:	81 45 f4 a0 00 00 00 	addl   $0xa0,-0xc(%ebp)
-80104ffe:	81 7d f4 b4 61 11 80 	cmpl   $0x801161b4,-0xc(%ebp)
-80105005:	72 95                	jb     80104f9c <scheduler_default+0x20>
-
-      // Process is done running for now.
-      // It should have changed its p->state before coming back.
-      proc = 0;
-    }
-    release(&ptable.lock);
-80105007:	c7 04 24 80 39 11 80 	movl   $0x80113980,(%esp)
-8010500e:	e8 76 04 00 00       	call   80105489 <release>
-
-  }
-80105013:	e9 6a ff ff ff       	jmp    80104f82 <scheduler_default+0x6>
-
-80105018 <scheduler>:
-#endif
-
-
-void
-scheduler(void)
-{
-80105018:	55                   	push   %ebp
-80105019:	89 e5                	mov    %esp,%ebp
-8010501b:	83 ec 18             	sub    $0x18,%esp
-		scheduler_frr_fcfs();
-	#elif CFS
-		cprintf("SCHEDULAR = CFS\n");
-		scheduler_cfs();
-	#else
-		cprintf("SCHEDULAR = DEFAULT\n");
-8010501e:	c7 04 24 c1 94 10 80 	movl   $0x801094c1,(%esp)
-80105025:	e8 77 b3 ff ff       	call   801003a1 <cprintf>
-		scheduler_default();
-8010502a:	e8 4d ff ff ff       	call   80104f7c <scheduler_default>
-	#endif
-
-	for(;;){}	//must be no-return
-8010502f:	eb fe                	jmp    8010502f <scheduler+0x17>
-
-80105031 <sched>:
-
-// Enter scheduler.  Must hold only ptable.lock
-// and have changed proc->state.
-void
-sched(void)
-{
-80105031:	55                   	push   %ebp
-80105032:	89 e5                	mov    %esp,%ebp
-80105034:	83 ec 28             	sub    $0x28,%esp
-  int intena;
-
-  if(!holding(&ptable.lock))
-80105037:	c7 04 24 80 39 11 80 	movl   $0x80113980,(%esp)
-8010503e:	e8 02 05 00 00       	call   80105545 <holding>
-80105043:	85 c0                	test   %eax,%eax
-80105045:	75 0c                	jne    80105053 <sched+0x22>
-    panic("sched ptable.lock");
-80105047:	c7 04 24 d6 94 10 80 	movl   $0x801094d6,(%esp)
-8010504e:	e8 ea b4 ff ff       	call   8010053d <panic>
-  if(cpu->ncli != 1)
-80105053:	65 a1 00 00 00 00    	mov    %gs:0x0,%eax
-80105059:	8b 80 ac 00 00 00    	mov    0xac(%eax),%eax
-8010505f:	83 f8 01             	cmp    $0x1,%eax
-80105062:	74 0c                	je     80105070 <sched+0x3f>
-    panic("sched locks");
-80105064:	c7 04 24 e8 94 10 80 	movl   $0x801094e8,(%esp)
-8010506b:	e8 cd b4 ff ff       	call   8010053d <panic>
-  if(proc->state == RUNNING)
-80105070:	65 a1 04 00 00 00    	mov    %gs:0x4,%eax
-80105076:	8b 40 0c             	mov    0xc(%eax),%eax
-80105079:	83 f8 04             	cmp    $0x4,%eax
-8010507c:	75 0c                	jne    8010508a <sched+0x59>
-    panic("sched running");
-8010507e:	c7 04 24 f4 94 10 80 	movl   $0x801094f4,(%esp)
-80105085:	e8 b3 b4 ff ff       	call   8010053d <panic>
-  if(readeflags()&FL_IF)
-8010508a:	e8 15 f3 ff ff       	call   801043a4 <readeflags>
-8010508f:	25 00 02 00 00       	and    $0x200,%eax
-80105094:	85 c0                	test   %eax,%eax
-80105096:	74 0c                	je     801050a4 <sched+0x73>
-    panic("sched interruptible");
-80105098:	c7 04 24 02 95 10 80 	movl   $0x80109502,(%esp)
-8010509f:	e8 99 b4 ff ff       	call   8010053d <panic>
-  intena = cpu->intena;
-801050a4:	65 a1 00 00 00 00    	mov    %gs:0x0,%eax
-801050aa:	8b 80 b0 00 00 00    	mov    0xb0(%eax),%eax
-801050b0:	89 45 f4             	mov    %eax,-0xc(%ebp)
-  swtch(&proc->context, cpu->scheduler);
-801050b3:	65 a1 00 00 00 00    	mov    %gs:0x0,%eax
-801050b9:	8b 40 04             	mov    0x4(%eax),%eax
-801050bc:	65 8b 15 04 00 00 00 	mov    %gs:0x4,%edx
-801050c3:	83 c2 20             	add    $0x20,%edx
-801050c6:	89 44 24 04          	mov    %eax,0x4(%esp)
-801050ca:	89 14 24             	mov    %edx,(%esp)
-801050cd:	e8 4a 08 00 00       	call   8010591c <swtch>
-  cpu->intena = intena;
-801050d2:	65 a1 00 00 00 00    	mov    %gs:0x0,%eax
-801050d8:	8b 55 f4             	mov    -0xc(%ebp),%edx
-801050db:	89 90 b0 00 00 00    	mov    %edx,0xb0(%eax)
-}
-801050e1:	c9                   	leave  
-801050e2:	c3                   	ret    
-
-801050e3 <yield>:
-
-// Give up the CPU for one scheduling round.
-void
-yield(void)
-{
-801050e3:	55                   	push   %ebp
-801050e4:	89 e5                	mov    %esp,%ebp
-801050e6:	83 ec 18             	sub    $0x18,%esp
-  acquire(&ptable.lock);  //DOC: yieldlock
-801050e9:	c7 04 24 80 39 11 80 	movl   $0x80113980,(%esp)
-801050f0:	e8 32 03 00 00       	call   80105427 <acquire>
-#if defined(FRR) || defined(FCFS)
-  if(proc->state != RUNNABLE) plist.add(&plist, proc->pid, proc); //todo ifdef
-#endif
-  proc->state = RUNNABLE;
-801050f5:	65 a1 04 00 00 00    	mov    %gs:0x4,%eax
-801050fb:	c7 40 0c 03 00 00 00 	movl   $0x3,0xc(%eax)
-
-  sched();
-80105102:	e8 2a ff ff ff       	call   80105031 <sched>
-  release(&ptable.lock);
-80105107:	c7 04 24 80 39 11 80 	movl   $0x80113980,(%esp)
-8010510e:	e8 76 03 00 00       	call   80105489 <release>
-}
-80105113:	c9                   	leave  
-80105114:	c3                   	ret    
-
-80105115 <forkret>:
-
-// A fork child's very first scheduling by scheduler()
-// will swtch here.  "Return" to user space.
-void
-forkret(void)
-{
-80105115:	55                   	push   %ebp
-80105116:	89 e5                	mov    %esp,%ebp
-80105118:	83 ec 18             	sub    $0x18,%esp
-  static int first = 1;
-  // Still holding ptable.lock from scheduler.
-  release(&ptable.lock);
-8010511b:	c7 04 24 80 39 11 80 	movl   $0x80113980,(%esp)
-80105122:	e8 62 03 00 00       	call   80105489 <release>
-
-  if (first) {
-80105127:	a1 20 c0 10 80       	mov    0x8010c020,%eax
-8010512c:	85 c0                	test   %eax,%eax
-8010512e:	74 0f                	je     8010513f <forkret+0x2a>
-    // Some initialization functions must be run in the context
-    // of a regular process (e.g., they call sleep), and thus cannot 
-    // be run from main().
-    first = 0;
-80105130:	c7 05 20 c0 10 80 00 	movl   $0x0,0x8010c020
-80105137:	00 00 00 
-    initlog();
-8010513a:	e8 71 e1 ff ff       	call   801032b0 <initlog>
-  }
-  
-  // Return to "caller", actually trapret (see allocproc).
-}
-8010513f:	c9                   	leave  
-80105140:	c3                   	ret    
-
-80105141 <sleep>:
-
-// Atomically release lock and sleep on chan.
-// Reacquires lock when awakened.
-void
-sleep(void *chan, struct spinlock *lk)
-{
-80105141:	55                   	push   %ebp
-80105142:	89 e5                	mov    %esp,%ebp
-80105144:	83 ec 18             	sub    $0x18,%esp
-  if(proc == 0)
-80105147:	65 a1 04 00 00 00    	mov    %gs:0x4,%eax
-8010514d:	85 c0                	test   %eax,%eax
-8010514f:	75 0c                	jne    8010515d <sleep+0x1c>
-    panic("sleep");
-80105151:	c7 04 24 16 95 10 80 	movl   $0x80109516,(%esp)
-80105158:	e8 e0 b3 ff ff       	call   8010053d <panic>
-
-  if(lk == 0)
-8010515d:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
-80105161:	75 0c                	jne    8010516f <sleep+0x2e>
-    panic("sleep without lk");
-80105163:	c7 04 24 1c 95 10 80 	movl   $0x8010951c,(%esp)
-8010516a:	e8 ce b3 ff ff       	call   8010053d <panic>
-  // change p->state and then call sched.
-  // Once we hold ptable.lock, we can be
-  // guaranteed that we won't miss any wakeup
-  // (wakeup runs with ptable.lock locked),
-  // so it's okay to release lk.
-  if(lk != &ptable.lock){  //DOC: sleeplock0
-8010516f:	81 7d 0c 80 39 11 80 	cmpl   $0x80113980,0xc(%ebp)
-80105176:	74 17                	je     8010518f <sleep+0x4e>
-    acquire(&ptable.lock);  //DOC: sleeplock1
-80105178:	c7 04 24 80 39 11 80 	movl   $0x80113980,(%esp)
-8010517f:	e8 a3 02 00 00       	call   80105427 <acquire>
-    release(lk);
-80105184:	8b 45 0c             	mov    0xc(%ebp),%eax
-80105187:	89 04 24             	mov    %eax,(%esp)
-8010518a:	e8 fa 02 00 00       	call   80105489 <release>
-  }
-
-  // Go to sleep.
-  proc->chan = chan;
-8010518f:	65 a1 04 00 00 00    	mov    %gs:0x4,%eax
-80105195:	8b 55 08             	mov    0x8(%ebp),%edx
-80105198:	89 50 24             	mov    %edx,0x24(%eax)
-  proc->state = SLEEPING;
-8010519b:	65 a1 04 00 00 00    	mov    %gs:0x4,%eax
-801051a1:	c7 40 0c 02 00 00 00 	movl   $0x2,0xc(%eax)
-  sched();
-801051a8:	e8 84 fe ff ff       	call   80105031 <sched>
-
-  // Tidy up.
-  proc->chan = 0;
-801051ad:	65 a1 04 00 00 00    	mov    %gs:0x4,%eax
-801051b3:	c7 40 24 00 00 00 00 	movl   $0x0,0x24(%eax)
-
-  // Reacquire original lock.
-  if(lk != &ptable.lock){  //DOC: sleeplock2
-801051ba:	81 7d 0c 80 39 11 80 	cmpl   $0x80113980,0xc(%ebp)
-801051c1:	74 17                	je     801051da <sleep+0x99>
-    release(&ptable.lock);
-801051c3:	c7 04 24 80 39 11 80 	movl   $0x80113980,(%esp)
-801051ca:	e8 ba 02 00 00       	call   80105489 <release>
-    acquire(lk);
-801051cf:	8b 45 0c             	mov    0xc(%ebp),%eax
-801051d2:	89 04 24             	mov    %eax,(%esp)
-801051d5:	e8 4d 02 00 00       	call   80105427 <acquire>
-  }
-}
-801051da:	c9                   	leave  
-801051db:	c3                   	ret    
-
-801051dc <wakeup1>:
-//PAGEBREAK!
-// Wake up all processes sleeping on chan.
-// The ptable lock must be held.
-static void
-wakeup1(void *chan)
-{
-801051dc:	55                   	push   %ebp
-801051dd:	89 e5                	mov    %esp,%ebp
-801051df:	83 ec 10             	sub    $0x10,%esp
-  struct proc *p;
-
-  for(p = ptable.proc; p < &ptable.proc[NPROC]; p++)
-801051e2:	c7 45 fc b4 39 11 80 	movl   $0x801139b4,-0x4(%ebp)
-801051e9:	eb 27                	jmp    80105212 <wakeup1+0x36>
-    if(p->state == SLEEPING && p->chan == chan){
-801051eb:	8b 45 fc             	mov    -0x4(%ebp),%eax
-801051ee:	8b 40 0c             	mov    0xc(%eax),%eax
-801051f1:	83 f8 02             	cmp    $0x2,%eax
-801051f4:	75 15                	jne    8010520b <wakeup1+0x2f>
-801051f6:	8b 45 fc             	mov    -0x4(%ebp),%eax
-801051f9:	8b 40 24             	mov    0x24(%eax),%eax
-801051fc:	3b 45 08             	cmp    0x8(%ebp),%eax
-801051ff:	75 0a                	jne    8010520b <wakeup1+0x2f>
-        p->state = RUNNABLE;
-80105201:	8b 45 fc             	mov    -0x4(%ebp),%eax
-80105204:	c7 40 0c 03 00 00 00 	movl   $0x3,0xc(%eax)
-static void
-wakeup1(void *chan)
-{
-  struct proc *p;
-
-  for(p = ptable.proc; p < &ptable.proc[NPROC]; p++)
-8010520b:	81 45 fc a0 00 00 00 	addl   $0xa0,-0x4(%ebp)
-80105212:	81 7d fc b4 61 11 80 	cmpl   $0x801161b4,-0x4(%ebp)
-80105219:	72 d0                	jb     801051eb <wakeup1+0xf>
-        p->state = RUNNABLE;
-		#if defined(FRR) || defined(FCFS)
-        	plist.add(&plist,p->pid, p); //todo ifdef
-		#endif
-    }
-}
-8010521b:	c9                   	leave  
-8010521c:	c3                   	ret    
-
-8010521d <wakeup>:
-
-// Wake up all processes sleeping on chan.
-void
-wakeup(void *chan)
-{
-8010521d:	55                   	push   %ebp
-8010521e:	89 e5                	mov    %esp,%ebp
-80105220:	83 ec 18             	sub    $0x18,%esp
-  acquire(&ptable.lock);
-80105223:	c7 04 24 80 39 11 80 	movl   $0x80113980,(%esp)
-8010522a:	e8 f8 01 00 00       	call   80105427 <acquire>
-  wakeup1(chan);
-8010522f:	8b 45 08             	mov    0x8(%ebp),%eax
-80105232:	89 04 24             	mov    %eax,(%esp)
-80105235:	e8 a2 ff ff ff       	call   801051dc <wakeup1>
-  release(&ptable.lock);
-8010523a:	c7 04 24 80 39 11 80 	movl   $0x80113980,(%esp)
-80105241:	e8 43 02 00 00       	call   80105489 <release>
-}
-80105246:	c9                   	leave  
-80105247:	c3                   	ret    
-
-80105248 <kill>:
-// Kill the process with the given pid.
-// Process won't exit until it returns
-// to user space (see trap in trap.c).
-int
-kill(int pid)
-{
-80105248:	55                   	push   %ebp
-80105249:	89 e5                	mov    %esp,%ebp
-8010524b:	83 ec 28             	sub    $0x28,%esp
-  struct proc *p;
-
-  acquire(&ptable.lock);
-8010524e:	c7 04 24 80 39 11 80 	movl   $0x80113980,(%esp)
-80105255:	e8 cd 01 00 00       	call   80105427 <acquire>
-  for(p = ptable.proc; p < &ptable.proc[NPROC]; p++){
-8010525a:	c7 45 f4 b4 39 11 80 	movl   $0x801139b4,-0xc(%ebp)
-80105261:	eb 44                	jmp    801052a7 <kill+0x5f>
-    if(p->pid == pid){
-80105263:	8b 45 f4             	mov    -0xc(%ebp),%eax
-80105266:	8b 40 10             	mov    0x10(%eax),%eax
-80105269:	3b 45 08             	cmp    0x8(%ebp),%eax
-8010526c:	75 32                	jne    801052a0 <kill+0x58>
-      p->killed = 1;
-8010526e:	8b 45 f4             	mov    -0xc(%ebp),%eax
-80105271:	c7 40 28 01 00 00 00 	movl   $0x1,0x28(%eax)
-      // Wake process from sleep if necessary.
-      if(p->state == SLEEPING){
-80105278:	8b 45 f4             	mov    -0xc(%ebp),%eax
-8010527b:	8b 40 0c             	mov    0xc(%eax),%eax
-8010527e:	83 f8 02             	cmp    $0x2,%eax
-80105281:	75 0a                	jne    8010528d <kill+0x45>
-        p->state = RUNNABLE;
-80105283:	8b 45 f4             	mov    -0xc(%ebp),%eax
-80105286:	c7 40 0c 03 00 00 00 	movl   $0x3,0xc(%eax)
-		#if defined(FRR) || defined(FCFS)
-        	plist.add(&plist,p->pid,p); //todo ifdef
-		#endif
-      }
-      release(&ptable.lock);
-8010528d:	c7 04 24 80 39 11 80 	movl   $0x80113980,(%esp)
-80105294:	e8 f0 01 00 00       	call   80105489 <release>
-      return 0;
-80105299:	b8 00 00 00 00       	mov    $0x0,%eax
-8010529e:	eb 21                	jmp    801052c1 <kill+0x79>
-kill(int pid)
-{
-  struct proc *p;
-
-  acquire(&ptable.lock);
-  for(p = ptable.proc; p < &ptable.proc[NPROC]; p++){
-801052a0:	81 45 f4 a0 00 00 00 	addl   $0xa0,-0xc(%ebp)
-801052a7:	81 7d f4 b4 61 11 80 	cmpl   $0x801161b4,-0xc(%ebp)
-801052ae:	72 b3                	jb     80105263 <kill+0x1b>
-      }
-      release(&ptable.lock);
-      return 0;
-    }
-  }
-  release(&ptable.lock);
-801052b0:	c7 04 24 80 39 11 80 	movl   $0x80113980,(%esp)
-801052b7:	e8 cd 01 00 00       	call   80105489 <release>
-  return -1;
-801052bc:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
-}
-801052c1:	c9                   	leave  
-801052c2:	c3                   	ret    
-
-801052c3 <procdump>:
-// Print a process listing to console.  For debugging.
-// Runs when user types ^P on console.
-// No lock to avoid wedging a stuck machine further.
-void
-procdump(void)
-{
-801052c3:	55                   	push   %ebp
-801052c4:	89 e5                	mov    %esp,%ebp
-801052c6:	83 ec 58             	sub    $0x58,%esp
-  int i;
-  struct proc *p;
-  char *state;
-  uint pc[10];
-  
-  for(p = ptable.proc; p < &ptable.proc[NPROC]; p++){
-801052c9:	c7 45 f0 b4 39 11 80 	movl   $0x801139b4,-0x10(%ebp)
-801052d0:	e9 db 00 00 00       	jmp    801053b0 <procdump+0xed>
-    if(p->state == UNUSED)
-801052d5:	8b 45 f0             	mov    -0x10(%ebp),%eax
-801052d8:	8b 40 0c             	mov    0xc(%eax),%eax
-801052db:	85 c0                	test   %eax,%eax
-801052dd:	0f 84 c5 00 00 00    	je     801053a8 <procdump+0xe5>
-      continue;
-    if(p->state >= 0 && p->state < NELEM(states) && states[p->state])
-801052e3:	8b 45 f0             	mov    -0x10(%ebp),%eax
-801052e6:	8b 40 0c             	mov    0xc(%eax),%eax
-801052e9:	83 f8 05             	cmp    $0x5,%eax
-801052ec:	77 23                	ja     80105311 <procdump+0x4e>
-801052ee:	8b 45 f0             	mov    -0x10(%ebp),%eax
-801052f1:	8b 40 0c             	mov    0xc(%eax),%eax
-801052f4:	8b 04 85 08 c0 10 80 	mov    -0x7fef3ff8(,%eax,4),%eax
-801052fb:	85 c0                	test   %eax,%eax
-801052fd:	74 12                	je     80105311 <procdump+0x4e>
-      state = states[p->state];
-801052ff:	8b 45 f0             	mov    -0x10(%ebp),%eax
-80105302:	8b 40 0c             	mov    0xc(%eax),%eax
-80105305:	8b 04 85 08 c0 10 80 	mov    -0x7fef3ff8(,%eax,4),%eax
-8010530c:	89 45 ec             	mov    %eax,-0x14(%ebp)
-8010530f:	eb 07                	jmp    80105318 <procdump+0x55>
-    else
-      state = "???";
-80105311:	c7 45 ec 2d 95 10 80 	movl   $0x8010952d,-0x14(%ebp)
-    cprintf("%d %s %s", p->pid, state, p->name);
-80105318:	8b 45 f0             	mov    -0x10(%ebp),%eax
-8010531b:	8d 50 70             	lea    0x70(%eax),%edx
-8010531e:	8b 45 f0             	mov    -0x10(%ebp),%eax
-80105321:	8b 40 10             	mov    0x10(%eax),%eax
-80105324:	89 54 24 0c          	mov    %edx,0xc(%esp)
-80105328:	8b 55 ec             	mov    -0x14(%ebp),%edx
-8010532b:	89 54 24 08          	mov    %edx,0x8(%esp)
-8010532f:	89 44 24 04          	mov    %eax,0x4(%esp)
-80105333:	c7 04 24 31 95 10 80 	movl   $0x80109531,(%esp)
-8010533a:	e8 62 b0 ff ff       	call   801003a1 <cprintf>
-    if(p->state == SLEEPING){
-8010533f:	8b 45 f0             	mov    -0x10(%ebp),%eax
-80105342:	8b 40 0c             	mov    0xc(%eax),%eax
-80105345:	83 f8 02             	cmp    $0x2,%eax
-80105348:	75 50                	jne    8010539a <procdump+0xd7>
-      getcallerpcs((uint*)p->context->ebp+2, pc);
-8010534a:	8b 45 f0             	mov    -0x10(%ebp),%eax
-8010534d:	8b 40 20             	mov    0x20(%eax),%eax
-80105350:	8b 40 0c             	mov    0xc(%eax),%eax
-80105353:	83 c0 08             	add    $0x8,%eax
-80105356:	8d 55 c4             	lea    -0x3c(%ebp),%edx
-80105359:	89 54 24 04          	mov    %edx,0x4(%esp)
-8010535d:	89 04 24             	mov    %eax,(%esp)
-80105360:	e8 73 01 00 00       	call   801054d8 <getcallerpcs>
-      for(i=0; i<10 && pc[i] != 0; i++)
-80105365:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
-8010536c:	eb 1b                	jmp    80105389 <procdump+0xc6>
-        cprintf(" %p", pc[i]);
-8010536e:	8b 45 f4             	mov    -0xc(%ebp),%eax
-80105371:	8b 44 85 c4          	mov    -0x3c(%ebp,%eax,4),%eax
-80105375:	89 44 24 04          	mov    %eax,0x4(%esp)
-80105379:	c7 04 24 3a 95 10 80 	movl   $0x8010953a,(%esp)
-80105380:	e8 1c b0 ff ff       	call   801003a1 <cprintf>
-    else
-      state = "???";
-    cprintf("%d %s %s", p->pid, state, p->name);
-    if(p->state == SLEEPING){
-      getcallerpcs((uint*)p->context->ebp+2, pc);
-      for(i=0; i<10 && pc[i] != 0; i++)
-80105385:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
-80105389:	83 7d f4 09          	cmpl   $0x9,-0xc(%ebp)
-8010538d:	7f 0b                	jg     8010539a <procdump+0xd7>
-8010538f:	8b 45 f4             	mov    -0xc(%ebp),%eax
-80105392:	8b 44 85 c4          	mov    -0x3c(%ebp,%eax,4),%eax
-80105396:	85 c0                	test   %eax,%eax
-80105398:	75 d4                	jne    8010536e <procdump+0xab>
-        cprintf(" %p", pc[i]);
-    }
-    cprintf("\n");
-8010539a:	c7 04 24 3e 95 10 80 	movl   $0x8010953e,(%esp)
-801053a1:	e8 fb af ff ff       	call   801003a1 <cprintf>
-801053a6:	eb 01                	jmp    801053a9 <procdump+0xe6>
-  char *state;
-  uint pc[10];
-  
-  for(p = ptable.proc; p < &ptable.proc[NPROC]; p++){
-    if(p->state == UNUSED)
-      continue;
-801053a8:	90                   	nop
-  int i;
-  struct proc *p;
-  char *state;
-  uint pc[10];
-  
-  for(p = ptable.proc; p < &ptable.proc[NPROC]; p++){
-801053a9:	81 45 f0 a0 00 00 00 	addl   $0xa0,-0x10(%ebp)
-801053b0:	81 7d f0 b4 61 11 80 	cmpl   $0x801161b4,-0x10(%ebp)
-801053b7:	0f 82 18 ff ff ff    	jb     801052d5 <procdump+0x12>
-      for(i=0; i<10 && pc[i] != 0; i++)
-        cprintf(" %p", pc[i]);
-    }
-    cprintf("\n");
-  }
-}
-801053bd:	c9                   	leave  
-801053be:	c3                   	ret    
-	...
-
-801053c0 <readeflags>:
-  asm volatile("ltr %0" : : "r" (sel));
-}
-
-static inline uint
-readeflags(void)
-{
-801053c0:	55                   	push   %ebp
-801053c1:	89 e5                	mov    %esp,%ebp
-801053c3:	53                   	push   %ebx
-801053c4:	83 ec 10             	sub    $0x10,%esp
-  uint eflags;
-  asm volatile("pushfl; popl %0" : "=r" (eflags));
-801053c7:	9c                   	pushf  
-801053c8:	5b                   	pop    %ebx
-801053c9:	89 5d f8             	mov    %ebx,-0x8(%ebp)
-  return eflags;
-801053cc:	8b 45 f8             	mov    -0x8(%ebp),%eax
-}
-801053cf:	83 c4 10             	add    $0x10,%esp
-801053d2:	5b                   	pop    %ebx
-801053d3:	5d                   	pop    %ebp
-801053d4:	c3                   	ret    
-
-801053d5 <cli>:
-  asm volatile("movw %0, %%gs" : : "r" (v));
-}
-
-static inline void
-cli(void)
-{
-801053d5:	55                   	push   %ebp
-801053d6:	89 e5                	mov    %esp,%ebp
-  asm volatile("cli");
-801053d8:	fa                   	cli    
-}
-801053d9:	5d                   	pop    %ebp
-801053da:	c3                   	ret    
-
-801053db <sti>:
-
-static inline void
-sti(void)
-{
-801053db:	55                   	push   %ebp
-801053dc:	89 e5                	mov    %esp,%ebp
-  asm volatile("sti");
-801053de:	fb                   	sti    
-}
-801053df:	5d                   	pop    %ebp
-801053e0:	c3                   	ret    
-
-801053e1 <xchg>:
-
-static inline uint
-xchg(volatile uint *addr, uint newval)
-{
-801053e1:	55                   	push   %ebp
-801053e2:	89 e5                	mov    %esp,%ebp
-801053e4:	53                   	push   %ebx
-801053e5:	83 ec 10             	sub    $0x10,%esp
-  uint result;
-  
-  // The + in "+m" denotes a read-modify-write operand.
-  asm volatile("lock; xchgl %0, %1" :
-               "+m" (*addr), "=a" (result) :
-801053e8:	8b 55 08             	mov    0x8(%ebp),%edx
-xchg(volatile uint *addr, uint newval)
-{
-  uint result;
-  
-  // The + in "+m" denotes a read-modify-write operand.
-  asm volatile("lock; xchgl %0, %1" :
-801053eb:	8b 45 0c             	mov    0xc(%ebp),%eax
-               "+m" (*addr), "=a" (result) :
-801053ee:	8b 4d 08             	mov    0x8(%ebp),%ecx
-xchg(volatile uint *addr, uint newval)
-{
-  uint result;
-  
-  // The + in "+m" denotes a read-modify-write operand.
-  asm volatile("lock; xchgl %0, %1" :
-801053f1:	89 c3                	mov    %eax,%ebx
-801053f3:	89 d8                	mov    %ebx,%eax
-801053f5:	f0 87 02             	lock xchg %eax,(%edx)
-801053f8:	89 c3                	mov    %eax,%ebx
-801053fa:	89 5d f8             	mov    %ebx,-0x8(%ebp)
-               "+m" (*addr), "=a" (result) :
-               "1" (newval) :
-               "cc");
-  return result;
-801053fd:	8b 45 f8             	mov    -0x8(%ebp),%eax
-}
-80105400:	83 c4 10             	add    $0x10,%esp
-80105403:	5b                   	pop    %ebx
-80105404:	5d                   	pop    %ebp
-80105405:	c3                   	ret    
-
-80105406 <initlock>:
-#include "proc.h"
-#include "spinlock.h"
-
-void
-initlock(struct spinlock *lk, char *name)
-{
-80105406:	55                   	push   %ebp
-80105407:	89 e5                	mov    %esp,%ebp
-  lk->name = name;
-80105409:	8b 45 08             	mov    0x8(%ebp),%eax
-8010540c:	8b 55 0c             	mov    0xc(%ebp),%edx
-8010540f:	89 50 04             	mov    %edx,0x4(%eax)
-  lk->locked = 0;
-80105412:	8b 45 08             	mov    0x8(%ebp),%eax
-80105415:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
-  lk->cpu = 0;
-8010541b:	8b 45 08             	mov    0x8(%ebp),%eax
-8010541e:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
-}
-80105425:	5d                   	pop    %ebp
-80105426:	c3                   	ret    
-
-80105427 <acquire>:
-// Loops (spins) until the lock is acquired.
-// Holding a lock for a long time may cause
-// other CPUs to waste time spinning to acquire it.
-void
-acquire(struct spinlock *lk)
-{
-80105427:	55                   	push   %ebp
-80105428:	89 e5                	mov    %esp,%ebp
-8010542a:	83 ec 18             	sub    $0x18,%esp
-  pushcli(); // disable interrupts to avoid deadlock.
-8010542d:	e8 3d 01 00 00       	call   8010556f <pushcli>
-  if(holding(lk))
-80105432:	8b 45 08             	mov    0x8(%ebp),%eax
-80105435:	89 04 24             	mov    %eax,(%esp)
-80105438:	e8 08 01 00 00       	call   80105545 <holding>
-8010543d:	85 c0                	test   %eax,%eax
-8010543f:	74 0c                	je     8010544d <acquire+0x26>
-    panic("acquire");
-80105441:	c7 04 24 6a 95 10 80 	movl   $0x8010956a,(%esp)
-80105448:	e8 f0 b0 ff ff       	call   8010053d <panic>
-
-  // The xchg is atomic.
-  // It also serializes, so that reads after acquire are not
-  // reordered before it. 
-  while(xchg(&lk->locked, 1) != 0)
-8010544d:	90                   	nop
-8010544e:	8b 45 08             	mov    0x8(%ebp),%eax
-80105451:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
-80105458:	00 
-80105459:	89 04 24             	mov    %eax,(%esp)
-8010545c:	e8 80 ff ff ff       	call   801053e1 <xchg>
-80105461:	85 c0                	test   %eax,%eax
-80105463:	75 e9                	jne    8010544e <acquire+0x27>
-    ;
-
-  // Record info about lock acquisition for debugging.
-  lk->cpu = cpu;
-80105465:	8b 45 08             	mov    0x8(%ebp),%eax
-80105468:	65 8b 15 00 00 00 00 	mov    %gs:0x0,%edx
-8010546f:	89 50 08             	mov    %edx,0x8(%eax)
-  getcallerpcs(&lk, lk->pcs);
-80105472:	8b 45 08             	mov    0x8(%ebp),%eax
-80105475:	83 c0 0c             	add    $0xc,%eax
-80105478:	89 44 24 04          	mov    %eax,0x4(%esp)
-8010547c:	8d 45 08             	lea    0x8(%ebp),%eax
-8010547f:	89 04 24             	mov    %eax,(%esp)
-80105482:	e8 51 00 00 00       	call   801054d8 <getcallerpcs>
-}
-80105487:	c9                   	leave  
-80105488:	c3                   	ret    
-
-80105489 <release>:
-
-// Release the lock.
-void
-release(struct spinlock *lk)
-{
-80105489:	55                   	push   %ebp
-8010548a:	89 e5                	mov    %esp,%ebp
-8010548c:	83 ec 18             	sub    $0x18,%esp
-  if(!holding(lk))
-8010548f:	8b 45 08             	mov    0x8(%ebp),%eax
-80105492:	89 04 24             	mov    %eax,(%esp)
-80105495:	e8 ab 00 00 00       	call   80105545 <holding>
-8010549a:	85 c0                	test   %eax,%eax
-8010549c:	75 0c                	jne    801054aa <release+0x21>
-    panic("release");
-8010549e:	c7 04 24 72 95 10 80 	movl   $0x80109572,(%esp)
-801054a5:	e8 93 b0 ff ff       	call   8010053d <panic>
-
-  lk->pcs[0] = 0;
-801054aa:	8b 45 08             	mov    0x8(%ebp),%eax
-801054ad:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%eax)
-  lk->cpu = 0;
-801054b4:	8b 45 08             	mov    0x8(%ebp),%eax
-801054b7:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
-  // But the 2007 Intel 64 Architecture Memory Ordering White
-  // Paper says that Intel 64 and IA-32 will not move a load
-  // after a store. So lock->locked = 0 would work here.
-  // The xchg being asm volatile ensures gcc emits it after
-  // the above assignments (and after the critical section).
-  xchg(&lk->locked, 0);
-801054be:	8b 45 08             	mov    0x8(%ebp),%eax
-801054c1:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
-801054c8:	00 
-801054c9:	89 04 24             	mov    %eax,(%esp)
-801054cc:	e8 10 ff ff ff       	call   801053e1 <xchg>
-
-  popcli();
-801054d1:	e8 e1 00 00 00       	call   801055b7 <popcli>
-}
-801054d6:	c9                   	leave  
-801054d7:	c3                   	ret    
-
-801054d8 <getcallerpcs>:
-
-// Record the current call stack in pcs[] by following the %ebp chain.
-void
-getcallerpcs(void *v, uint pcs[])
-{
-801054d8:	55                   	push   %ebp
-801054d9:	89 e5                	mov    %esp,%ebp
-801054db:	83 ec 10             	sub    $0x10,%esp
-  uint *ebp;
-  int i;
-  
-  ebp = (uint*)v - 2;
-801054de:	8b 45 08             	mov    0x8(%ebp),%eax
-801054e1:	83 e8 08             	sub    $0x8,%eax
-801054e4:	89 45 fc             	mov    %eax,-0x4(%ebp)
-  for(i = 0; i < 10; i++){
-801054e7:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
-801054ee:	eb 32                	jmp    80105522 <getcallerpcs+0x4a>
-    if(ebp == 0 || ebp < (uint*)KERNBASE || ebp == (uint*)0xffffffff)
-801054f0:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
-801054f4:	74 47                	je     8010553d <getcallerpcs+0x65>
-801054f6:	81 7d fc ff ff ff 7f 	cmpl   $0x7fffffff,-0x4(%ebp)
-801054fd:	76 3e                	jbe    8010553d <getcallerpcs+0x65>
-801054ff:	83 7d fc ff          	cmpl   $0xffffffff,-0x4(%ebp)
-80105503:	74 38                	je     8010553d <getcallerpcs+0x65>
-      break;
-    pcs[i] = ebp[1];     // saved %eip
-80105505:	8b 45 f8             	mov    -0x8(%ebp),%eax
-80105508:	c1 e0 02             	shl    $0x2,%eax
-8010550b:	03 45 0c             	add    0xc(%ebp),%eax
-8010550e:	8b 55 fc             	mov    -0x4(%ebp),%edx
-80105511:	8b 52 04             	mov    0x4(%edx),%edx
-80105514:	89 10                	mov    %edx,(%eax)
-    ebp = (uint*)ebp[0]; // saved %ebp
-80105516:	8b 45 fc             	mov    -0x4(%ebp),%eax
-80105519:	8b 00                	mov    (%eax),%eax
-8010551b:	89 45 fc             	mov    %eax,-0x4(%ebp)
-{
-  uint *ebp;
-  int i;
-  
-  ebp = (uint*)v - 2;
-  for(i = 0; i < 10; i++){
-8010551e:	83 45 f8 01          	addl   $0x1,-0x8(%ebp)
-80105522:	83 7d f8 09          	cmpl   $0x9,-0x8(%ebp)
-80105526:	7e c8                	jle    801054f0 <getcallerpcs+0x18>
-    if(ebp == 0 || ebp < (uint*)KERNBASE || ebp == (uint*)0xffffffff)
-      break;
-    pcs[i] = ebp[1];     // saved %eip
-    ebp = (uint*)ebp[0]; // saved %ebp
-  }
-  for(; i < 10; i++)
-80105528:	eb 13                	jmp    8010553d <getcallerpcs+0x65>
-    pcs[i] = 0;
-8010552a:	8b 45 f8             	mov    -0x8(%ebp),%eax
-8010552d:	c1 e0 02             	shl    $0x2,%eax
-80105530:	03 45 0c             	add    0xc(%ebp),%eax
-80105533:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
-    if(ebp == 0 || ebp < (uint*)KERNBASE || ebp == (uint*)0xffffffff)
-      break;
-    pcs[i] = ebp[1];     // saved %eip
-    ebp = (uint*)ebp[0]; // saved %ebp
-  }
-  for(; i < 10; i++)
-80105539:	83 45 f8 01          	addl   $0x1,-0x8(%ebp)
-8010553d:	83 7d f8 09          	cmpl   $0x9,-0x8(%ebp)
-80105541:	7e e7                	jle    8010552a <getcallerpcs+0x52>
-    pcs[i] = 0;
-}
-80105543:	c9                   	leave  
-80105544:	c3                   	ret    
-
-80105545 <holding>:
-
-// Check whether this cpu is holding the lock.
-int
-holding(struct spinlock *lock)
-{
-80105545:	55                   	push   %ebp
-80105546:	89 e5                	mov    %esp,%ebp
-  return lock->locked && lock->cpu == cpu;
-80105548:	8b 45 08             	mov    0x8(%ebp),%eax
-8010554b:	8b 00                	mov    (%eax),%eax
-8010554d:	85 c0                	test   %eax,%eax
-8010554f:	74 17                	je     80105568 <holding+0x23>
-80105551:	8b 45 08             	mov    0x8(%ebp),%eax
-80105554:	8b 50 08             	mov    0x8(%eax),%edx
-80105557:	65 a1 00 00 00 00    	mov    %gs:0x0,%eax
-8010555d:	39 c2                	cmp    %eax,%edx
-8010555f:	75 07                	jne    80105568 <holding+0x23>
-80105561:	b8 01 00 00 00       	mov    $0x1,%eax
-80105566:	eb 05                	jmp    8010556d <holding+0x28>
-80105568:	b8 00 00 00 00       	mov    $0x0,%eax
-}
-8010556d:	5d                   	pop    %ebp
-8010556e:	c3                   	ret    
-
-8010556f <pushcli>:
-// it takes two popcli to undo two pushcli.  Also, if interrupts
-// are off, then pushcli, popcli leaves them off.
-
-void
-pushcli(void)
-{
-8010556f:	55                   	push   %ebp
-80105570:	89 e5                	mov    %esp,%ebp
-80105572:	83 ec 10             	sub    $0x10,%esp
-  int eflags;
-  
-  eflags = readeflags();
-80105575:	e8 46 fe ff ff       	call   801053c0 <readeflags>
-8010557a:	89 45 fc             	mov    %eax,-0x4(%ebp)
-  cli();
-8010557d:	e8 53 fe ff ff       	call   801053d5 <cli>
-  if(cpu->ncli++ == 0)
-80105582:	65 a1 00 00 00 00    	mov    %gs:0x0,%eax
-80105588:	8b 90 ac 00 00 00    	mov    0xac(%eax),%edx
-8010558e:	85 d2                	test   %edx,%edx
-80105590:	0f 94 c1             	sete   %cl
-80105593:	83 c2 01             	add    $0x1,%edx
-80105596:	89 90 ac 00 00 00    	mov    %edx,0xac(%eax)
-8010559c:	84 c9                	test   %cl,%cl
-8010559e:	74 15                	je     801055b5 <pushcli+0x46>
-    cpu->intena = eflags & FL_IF;
-801055a0:	65 a1 00 00 00 00    	mov    %gs:0x0,%eax
-801055a6:	8b 55 fc             	mov    -0x4(%ebp),%edx
-801055a9:	81 e2 00 02 00 00    	and    $0x200,%edx
-801055af:	89 90 b0 00 00 00    	mov    %edx,0xb0(%eax)
-}
-801055b5:	c9                   	leave  
-801055b6:	c3                   	ret    
-
-801055b7 <popcli>:
-
-void
-popcli(void)
-{
-801055b7:	55                   	push   %ebp
-801055b8:	89 e5                	mov    %esp,%ebp
-801055ba:	83 ec 18             	sub    $0x18,%esp
-  if(readeflags()&FL_IF)
-801055bd:	e8 fe fd ff ff       	call   801053c0 <readeflags>
-801055c2:	25 00 02 00 00       	and    $0x200,%eax
-801055c7:	85 c0                	test   %eax,%eax
-801055c9:	74 0c                	je     801055d7 <popcli+0x20>
-    panic("popcli - interruptible");
-801055cb:	c7 04 24 7a 95 10 80 	movl   $0x8010957a,(%esp)
-801055d2:	e8 66 af ff ff       	call   8010053d <panic>
-  if(--cpu->ncli < 0)
-801055d7:	65 a1 00 00 00 00    	mov    %gs:0x0,%eax
-801055dd:	8b 90 ac 00 00 00    	mov    0xac(%eax),%edx
-801055e3:	83 ea 01             	sub    $0x1,%edx
-801055e6:	89 90 ac 00 00 00    	mov    %edx,0xac(%eax)
-801055ec:	8b 80 ac 00 00 00    	mov    0xac(%eax),%eax
-801055f2:	85 c0                	test   %eax,%eax
-801055f4:	79 0c                	jns    80105602 <popcli+0x4b>
-    panic("popcli");
-801055f6:	c7 04 24 91 95 10 80 	movl   $0x80109591,(%esp)
-801055fd:	e8 3b af ff ff       	call   8010053d <panic>
-  if(cpu->ncli == 0 && cpu->intena)
-80105602:	65 a1 00 00 00 00    	mov    %gs:0x0,%eax
-80105608:	8b 80 ac 00 00 00    	mov    0xac(%eax),%eax
-8010560e:	85 c0                	test   %eax,%eax
-80105610:	75 15                	jne    80105627 <popcli+0x70>
-80105612:	65 a1 00 00 00 00    	mov    %gs:0x0,%eax
-80105618:	8b 80 b0 00 00 00    	mov    0xb0(%eax),%eax
-8010561e:	85 c0                	test   %eax,%eax
-80105620:	74 05                	je     80105627 <popcli+0x70>
-    sti();
-80105622:	e8 b4 fd ff ff       	call   801053db <sti>
-}
-80105627:	c9                   	leave  
-80105628:	c3                   	ret    
-80105629:	00 00                	add    %al,(%eax)
-	...
-
-8010562c <stosb>:
-               "cc");
-}
-
-static inline void
-stosb(void *addr, int data, int cnt)
-{
-8010562c:	55                   	push   %ebp
-8010562d:	89 e5                	mov    %esp,%ebp
-8010562f:	57                   	push   %edi
-80105630:	53                   	push   %ebx
-  asm volatile("cld; rep stosb" :
-80105631:	8b 4d 08             	mov    0x8(%ebp),%ecx
-80105634:	8b 55 10             	mov    0x10(%ebp),%edx
-80105637:	8b 45 0c             	mov    0xc(%ebp),%eax
-8010563a:	89 cb                	mov    %ecx,%ebx
-8010563c:	89 df                	mov    %ebx,%edi
-8010563e:	89 d1                	mov    %edx,%ecx
-80105640:	fc                   	cld    
-80105641:	f3 aa                	rep stos %al,%es:(%edi)
-80105643:	89 ca                	mov    %ecx,%edx
-80105645:	89 fb                	mov    %edi,%ebx
-80105647:	89 5d 08             	mov    %ebx,0x8(%ebp)
-8010564a:	89 55 10             	mov    %edx,0x10(%ebp)
-               "=D" (addr), "=c" (cnt) :
-               "0" (addr), "1" (cnt), "a" (data) :
-               "memory", "cc");
-}
-8010564d:	5b                   	pop    %ebx
-8010564e:	5f                   	pop    %edi
-8010564f:	5d                   	pop    %ebp
-80105650:	c3                   	ret    
-
-80105651 <stosl>:
-
-static inline void
-stosl(void *addr, int data, int cnt)
-{
-80105651:	55                   	push   %ebp
-80105652:	89 e5                	mov    %esp,%ebp
-80105654:	57                   	push   %edi
-80105655:	53                   	push   %ebx
-  asm volatile("cld; rep stosl" :
-80105656:	8b 4d 08             	mov    0x8(%ebp),%ecx
-80105659:	8b 55 10             	mov    0x10(%ebp),%edx
-8010565c:	8b 45 0c             	mov    0xc(%ebp),%eax
-8010565f:	89 cb                	mov    %ecx,%ebx
-80105661:	89 df                	mov    %ebx,%edi
-80105663:	89 d1                	mov    %edx,%ecx
-80105665:	fc                   	cld    
-80105666:	f3 ab                	rep stos %eax,%es:(%edi)
-80105668:	89 ca                	mov    %ecx,%edx
-8010566a:	89 fb                	mov    %edi,%ebx
-8010566c:	89 5d 08             	mov    %ebx,0x8(%ebp)
-8010566f:	89 55 10             	mov    %edx,0x10(%ebp)
-               "=D" (addr), "=c" (cnt) :
-               "0" (addr), "1" (cnt), "a" (data) :
-               "memory", "cc");
-}
-80105672:	5b                   	pop    %ebx
-80105673:	5f                   	pop    %edi
-80105674:	5d                   	pop    %ebp
-80105675:	c3                   	ret    
-
-80105676 <memset>:
-#include "types.h"
-#include "x86.h"
-
-void*
-memset(void *dst, int c, uint n)
-{
-80105676:	55                   	push   %ebp
-80105677:	89 e5                	mov    %esp,%ebp
-80105679:	83 ec 0c             	sub    $0xc,%esp
-  if ((int)dst%4 == 0 && n%4 == 0){
-8010567c:	8b 45 08             	mov    0x8(%ebp),%eax
-8010567f:	83 e0 03             	and    $0x3,%eax
-80105682:	85 c0                	test   %eax,%eax
-80105684:	75 49                	jne    801056cf <memset+0x59>
-80105686:	8b 45 10             	mov    0x10(%ebp),%eax
-80105689:	83 e0 03             	and    $0x3,%eax
-8010568c:	85 c0                	test   %eax,%eax
-8010568e:	75 3f                	jne    801056cf <memset+0x59>
-    c &= 0xFF;
-80105690:	81 65 0c ff 00 00 00 	andl   $0xff,0xc(%ebp)
-    stosl(dst, (c<<24)|(c<<16)|(c<<8)|c, n/4);
-80105697:	8b 45 10             	mov    0x10(%ebp),%eax
-8010569a:	c1 e8 02             	shr    $0x2,%eax
-8010569d:	89 c2                	mov    %eax,%edx
-8010569f:	8b 45 0c             	mov    0xc(%ebp),%eax
-801056a2:	89 c1                	mov    %eax,%ecx
-801056a4:	c1 e1 18             	shl    $0x18,%ecx
-801056a7:	8b 45 0c             	mov    0xc(%ebp),%eax
-801056aa:	c1 e0 10             	shl    $0x10,%eax
-801056ad:	09 c1                	or     %eax,%ecx
-801056af:	8b 45 0c             	mov    0xc(%ebp),%eax
-801056b2:	c1 e0 08             	shl    $0x8,%eax
-801056b5:	09 c8                	or     %ecx,%eax
-801056b7:	0b 45 0c             	or     0xc(%ebp),%eax
-801056ba:	89 54 24 08          	mov    %edx,0x8(%esp)
-801056be:	89 44 24 04          	mov    %eax,0x4(%esp)
-801056c2:	8b 45 08             	mov    0x8(%ebp),%eax
-801056c5:	89 04 24             	mov    %eax,(%esp)
-801056c8:	e8 84 ff ff ff       	call   80105651 <stosl>
-801056cd:	eb 19                	jmp    801056e8 <memset+0x72>
-  } else
-    stosb(dst, c, n);
-801056cf:	8b 45 10             	mov    0x10(%ebp),%eax
-801056d2:	89 44 24 08          	mov    %eax,0x8(%esp)
-801056d6:	8b 45 0c             	mov    0xc(%ebp),%eax
-801056d9:	89 44 24 04          	mov    %eax,0x4(%esp)
-801056dd:	8b 45 08             	mov    0x8(%ebp),%eax
-801056e0:	89 04 24             	mov    %eax,(%esp)
-801056e3:	e8 44 ff ff ff       	call   8010562c <stosb>
-  return dst;
-801056e8:	8b 45 08             	mov    0x8(%ebp),%eax
-}
-801056eb:	c9                   	leave  
-801056ec:	c3                   	ret    
-
-801056ed <memcmp>:
-
-int
-memcmp(const void *v1, const void *v2, uint n)
-{
-801056ed:	55                   	push   %ebp
-801056ee:	89 e5                	mov    %esp,%ebp
-801056f0:	83 ec 10             	sub    $0x10,%esp
-  const uchar *s1, *s2;
-  
-  s1 = v1;
-801056f3:	8b 45 08             	mov    0x8(%ebp),%eax
-801056f6:	89 45 fc             	mov    %eax,-0x4(%ebp)
-  s2 = v2;
-801056f9:	8b 45 0c             	mov    0xc(%ebp),%eax
-801056fc:	89 45 f8             	mov    %eax,-0x8(%ebp)
-  while(n-- > 0){
-801056ff:	eb 32                	jmp    80105733 <memcmp+0x46>
-    if(*s1 != *s2)
-80105701:	8b 45 fc             	mov    -0x4(%ebp),%eax
-80105704:	0f b6 10             	movzbl (%eax),%edx
-80105707:	8b 45 f8             	mov    -0x8(%ebp),%eax
-8010570a:	0f b6 00             	movzbl (%eax),%eax
-8010570d:	38 c2                	cmp    %al,%dl
-8010570f:	74 1a                	je     8010572b <memcmp+0x3e>
-      return *s1 - *s2;
-80105711:	8b 45 fc             	mov    -0x4(%ebp),%eax
-80105714:	0f b6 00             	movzbl (%eax),%eax
-80105717:	0f b6 d0             	movzbl %al,%edx
-8010571a:	8b 45 f8             	mov    -0x8(%ebp),%eax
-8010571d:	0f b6 00             	movzbl (%eax),%eax
-80105720:	0f b6 c0             	movzbl %al,%eax
-80105723:	89 d1                	mov    %edx,%ecx
-80105725:	29 c1                	sub    %eax,%ecx
-80105727:	89 c8                	mov    %ecx,%eax
-80105729:	eb 1c                	jmp    80105747 <memcmp+0x5a>
-    s1++, s2++;
-8010572b:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
-8010572f:	83 45 f8 01          	addl   $0x1,-0x8(%ebp)
-{
-  const uchar *s1, *s2;
-  
-  s1 = v1;
-  s2 = v2;
-  while(n-- > 0){
-80105733:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
-80105737:	0f 95 c0             	setne  %al
-8010573a:	83 6d 10 01          	subl   $0x1,0x10(%ebp)
-8010573e:	84 c0                	test   %al,%al
-80105740:	75 bf                	jne    80105701 <memcmp+0x14>
-    if(*s1 != *s2)
-      return *s1 - *s2;
-    s1++, s2++;
-  }
-
-  return 0;
-80105742:	b8 00 00 00 00       	mov    $0x0,%eax
-}
-80105747:	c9                   	leave  
-80105748:	c3                   	ret    
-
-80105749 <memmove>:
-
-void*
-memmove(void *dst, const void *src, uint n)
-{
-80105749:	55                   	push   %ebp
-8010574a:	89 e5                	mov    %esp,%ebp
-8010574c:	83 ec 10             	sub    $0x10,%esp
-  const char *s;
-  char *d;
-
-  s = src;
-8010574f:	8b 45 0c             	mov    0xc(%ebp),%eax
-80105752:	89 45 fc             	mov    %eax,-0x4(%ebp)
-  d = dst;
-80105755:	8b 45 08             	mov    0x8(%ebp),%eax
-80105758:	89 45 f8             	mov    %eax,-0x8(%ebp)
-  if(s < d && s + n > d){
-8010575b:	8b 45 fc             	mov    -0x4(%ebp),%eax
-8010575e:	3b 45 f8             	cmp    -0x8(%ebp),%eax
-80105761:	73 54                	jae    801057b7 <memmove+0x6e>
-80105763:	8b 45 10             	mov    0x10(%ebp),%eax
-80105766:	8b 55 fc             	mov    -0x4(%ebp),%edx
-80105769:	01 d0                	add    %edx,%eax
-8010576b:	3b 45 f8             	cmp    -0x8(%ebp),%eax
-8010576e:	76 47                	jbe    801057b7 <memmove+0x6e>
-    s += n;
-80105770:	8b 45 10             	mov    0x10(%ebp),%eax
-80105773:	01 45 fc             	add    %eax,-0x4(%ebp)
-    d += n;
-80105776:	8b 45 10             	mov    0x10(%ebp),%eax
-80105779:	01 45 f8             	add    %eax,-0x8(%ebp)
-    while(n-- > 0)
-8010577c:	eb 13                	jmp    80105791 <memmove+0x48>
-      *--d = *--s;
-8010577e:	83 6d f8 01          	subl   $0x1,-0x8(%ebp)
-80105782:	83 6d fc 01          	subl   $0x1,-0x4(%ebp)
-80105786:	8b 45 fc             	mov    -0x4(%ebp),%eax
-80105789:	0f b6 10             	movzbl (%eax),%edx
-8010578c:	8b 45 f8             	mov    -0x8(%ebp),%eax
-8010578f:	88 10                	mov    %dl,(%eax)
-  s = src;
-  d = dst;
-  if(s < d && s + n > d){
-    s += n;
-    d += n;
-    while(n-- > 0)
-80105791:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
-80105795:	0f 95 c0             	setne  %al
-80105798:	83 6d 10 01          	subl   $0x1,0x10(%ebp)
-8010579c:	84 c0                	test   %al,%al
-8010579e:	75 de                	jne    8010577e <memmove+0x35>
-  const char *s;
-  char *d;
-
-  s = src;
-  d = dst;
-  if(s < d && s + n > d){
-801057a0:	eb 25                	jmp    801057c7 <memmove+0x7e>
-    d += n;
-    while(n-- > 0)
-      *--d = *--s;
-  } else
-    while(n-- > 0)
-      *d++ = *s++;
-801057a2:	8b 45 fc             	mov    -0x4(%ebp),%eax
-801057a5:	0f b6 10             	movzbl (%eax),%edx
-801057a8:	8b 45 f8             	mov    -0x8(%ebp),%eax
-801057ab:	88 10                	mov    %dl,(%eax)
-801057ad:	83 45 f8 01          	addl   $0x1,-0x8(%ebp)
-801057b1:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
-801057b5:	eb 01                	jmp    801057b8 <memmove+0x6f>
-    s += n;
-    d += n;
-    while(n-- > 0)
-      *--d = *--s;
-  } else
-    while(n-- > 0)
-801057b7:	90                   	nop
-801057b8:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
-801057bc:	0f 95 c0             	setne  %al
-801057bf:	83 6d 10 01          	subl   $0x1,0x10(%ebp)
-801057c3:	84 c0                	test   %al,%al
-801057c5:	75 db                	jne    801057a2 <memmove+0x59>
-      *d++ = *s++;
-
-  return dst;
-801057c7:	8b 45 08             	mov    0x8(%ebp),%eax
-}
-801057ca:	c9                   	leave  
-801057cb:	c3                   	ret    
-
-801057cc <memcpy>:
-
-// memcpy exists to placate GCC.  Use memmove.
-void*
-memcpy(void *dst, const void *src, uint n)
-{
-801057cc:	55                   	push   %ebp
-801057cd:	89 e5                	mov    %esp,%ebp
-801057cf:	83 ec 0c             	sub    $0xc,%esp
-  return memmove(dst, src, n);
-801057d2:	8b 45 10             	mov    0x10(%ebp),%eax
-801057d5:	89 44 24 08          	mov    %eax,0x8(%esp)
-801057d9:	8b 45 0c             	mov    0xc(%ebp),%eax
-801057dc:	89 44 24 04          	mov    %eax,0x4(%esp)
-801057e0:	8b 45 08             	mov    0x8(%ebp),%eax
-801057e3:	89 04 24             	mov    %eax,(%esp)
-801057e6:	e8 5e ff ff ff       	call   80105749 <memmove>
-}
-801057eb:	c9                   	leave  
-801057ec:	c3                   	ret    
-
-801057ed <strncmp>:
-
-int
-strncmp(const char *p, const char *q, uint n)
-{
-801057ed:	55                   	push   %ebp
-801057ee:	89 e5                	mov    %esp,%ebp
-  while(n > 0 && *p && *p == *q)
-801057f0:	eb 0c                	jmp    801057fe <strncmp+0x11>
-    n--, p++, q++;
-801057f2:	83 6d 10 01          	subl   $0x1,0x10(%ebp)
-801057f6:	83 45 08 01          	addl   $0x1,0x8(%ebp)
-801057fa:	83 45 0c 01          	addl   $0x1,0xc(%ebp)
-}
-
-int
-strncmp(const char *p, const char *q, uint n)
-{
-  while(n > 0 && *p && *p == *q)
-801057fe:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
-80105802:	74 1a                	je     8010581e <strncmp+0x31>
-80105804:	8b 45 08             	mov    0x8(%ebp),%eax
-80105807:	0f b6 00             	movzbl (%eax),%eax
-8010580a:	84 c0                	test   %al,%al
-8010580c:	74 10                	je     8010581e <strncmp+0x31>
-8010580e:	8b 45 08             	mov    0x8(%ebp),%eax
-80105811:	0f b6 10             	movzbl (%eax),%edx
-80105814:	8b 45 0c             	mov    0xc(%ebp),%eax
-80105817:	0f b6 00             	movzbl (%eax),%eax
-8010581a:	38 c2                	cmp    %al,%dl
-8010581c:	74 d4                	je     801057f2 <strncmp+0x5>
-    n--, p++, q++;
-  if(n == 0)
-8010581e:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
-80105822:	75 07                	jne    8010582b <strncmp+0x3e>
-    return 0;
-80105824:	b8 00 00 00 00       	mov    $0x0,%eax
-80105829:	eb 18                	jmp    80105843 <strncmp+0x56>
-  return (uchar)*p - (uchar)*q;
-8010582b:	8b 45 08             	mov    0x8(%ebp),%eax
-8010582e:	0f b6 00             	movzbl (%eax),%eax
-80105831:	0f b6 d0             	movzbl %al,%edx
-80105834:	8b 45 0c             	mov    0xc(%ebp),%eax
-80105837:	0f b6 00             	movzbl (%eax),%eax
-8010583a:	0f b6 c0             	movzbl %al,%eax
-8010583d:	89 d1                	mov    %edx,%ecx
-8010583f:	29 c1                	sub    %eax,%ecx
-80105841:	89 c8                	mov    %ecx,%eax
-}
-80105843:	5d                   	pop    %ebp
-80105844:	c3                   	ret    
-
-80105845 <strncpy>:
-
-char*
-strncpy(char *s, const char *t, int n)
-{
-80105845:	55                   	push   %ebp
-80105846:	89 e5                	mov    %esp,%ebp
-80105848:	83 ec 10             	sub    $0x10,%esp
-  char *os;
-  
-  os = s;
-8010584b:	8b 45 08             	mov    0x8(%ebp),%eax
-8010584e:	89 45 fc             	mov    %eax,-0x4(%ebp)
-  while(n-- > 0 && (*s++ = *t++) != 0)
-80105851:	90                   	nop
-80105852:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
-80105856:	0f 9f c0             	setg   %al
-80105859:	83 6d 10 01          	subl   $0x1,0x10(%ebp)
-8010585d:	84 c0                	test   %al,%al
-8010585f:	74 30                	je     80105891 <strncpy+0x4c>
-80105861:	8b 45 0c             	mov    0xc(%ebp),%eax
-80105864:	0f b6 10             	movzbl (%eax),%edx
-80105867:	8b 45 08             	mov    0x8(%ebp),%eax
-8010586a:	88 10                	mov    %dl,(%eax)
-8010586c:	8b 45 08             	mov    0x8(%ebp),%eax
-8010586f:	0f b6 00             	movzbl (%eax),%eax
-80105872:	84 c0                	test   %al,%al
-80105874:	0f 95 c0             	setne  %al
-80105877:	83 45 08 01          	addl   $0x1,0x8(%ebp)
-8010587b:	83 45 0c 01          	addl   $0x1,0xc(%ebp)
-8010587f:	84 c0                	test   %al,%al
-80105881:	75 cf                	jne    80105852 <strncpy+0xd>
-    ;
-  while(n-- > 0)
-80105883:	eb 0c                	jmp    80105891 <strncpy+0x4c>
-    *s++ = 0;
-80105885:	8b 45 08             	mov    0x8(%ebp),%eax
-80105888:	c6 00 00             	movb   $0x0,(%eax)
-8010588b:	83 45 08 01          	addl   $0x1,0x8(%ebp)
-8010588f:	eb 01                	jmp    80105892 <strncpy+0x4d>
-  char *os;
-  
-  os = s;
-  while(n-- > 0 && (*s++ = *t++) != 0)
-    ;
-  while(n-- > 0)
-80105891:	90                   	nop
-80105892:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
-80105896:	0f 9f c0             	setg   %al
-80105899:	83 6d 10 01          	subl   $0x1,0x10(%ebp)
-8010589d:	84 c0                	test   %al,%al
-8010589f:	75 e4                	jne    80105885 <strncpy+0x40>
-    *s++ = 0;
-  return os;
-801058a1:	8b 45 fc             	mov    -0x4(%ebp),%eax
-}
-801058a4:	c9                   	leave  
-801058a5:	c3                   	ret    
-
-801058a6 <safestrcpy>:
-
-// Like strncpy but guaranteed to NUL-terminate.
-char*
-safestrcpy(char *s, const char *t, int n)
-{
-801058a6:	55                   	push   %ebp
-801058a7:	89 e5                	mov    %esp,%ebp
-801058a9:	83 ec 10             	sub    $0x10,%esp
-  char *os;
-  
-  os = s;
-801058ac:	8b 45 08             	mov    0x8(%ebp),%eax
-801058af:	89 45 fc             	mov    %eax,-0x4(%ebp)
-  if(n <= 0)
-801058b2:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
-801058b6:	7f 05                	jg     801058bd <safestrcpy+0x17>
-    return os;
-801058b8:	8b 45 fc             	mov    -0x4(%ebp),%eax
-801058bb:	eb 35                	jmp    801058f2 <safestrcpy+0x4c>
-  while(--n > 0 && (*s++ = *t++) != 0)
-801058bd:	83 6d 10 01          	subl   $0x1,0x10(%ebp)
-801058c1:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
-801058c5:	7e 22                	jle    801058e9 <safestrcpy+0x43>
-801058c7:	8b 45 0c             	mov    0xc(%ebp),%eax
-801058ca:	0f b6 10             	movzbl (%eax),%edx
-801058cd:	8b 45 08             	mov    0x8(%ebp),%eax
-801058d0:	88 10                	mov    %dl,(%eax)
-801058d2:	8b 45 08             	mov    0x8(%ebp),%eax
-801058d5:	0f b6 00             	movzbl (%eax),%eax
-801058d8:	84 c0                	test   %al,%al
-801058da:	0f 95 c0             	setne  %al
-801058dd:	83 45 08 01          	addl   $0x1,0x8(%ebp)
-801058e1:	83 45 0c 01          	addl   $0x1,0xc(%ebp)
-801058e5:	84 c0                	test   %al,%al
-801058e7:	75 d4                	jne    801058bd <safestrcpy+0x17>
-    ;
-  *s = 0;
-801058e9:	8b 45 08             	mov    0x8(%ebp),%eax
-801058ec:	c6 00 00             	movb   $0x0,(%eax)
-  return os;
-801058ef:	8b 45 fc             	mov    -0x4(%ebp),%eax
-}
-801058f2:	c9                   	leave  
-801058f3:	c3                   	ret    
-
-801058f4 <strlen>:
-
-int
-strlen(const char *s)
-{
-801058f4:	55                   	push   %ebp
-801058f5:	89 e5                	mov    %esp,%ebp
-801058f7:	83 ec 10             	sub    $0x10,%esp
-  int n;
-
-  for(n = 0; s[n]; n++)
-801058fa:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
-80105901:	eb 04                	jmp    80105907 <strlen+0x13>
-80105903:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
-80105907:	8b 45 fc             	mov    -0x4(%ebp),%eax
-8010590a:	03 45 08             	add    0x8(%ebp),%eax
-8010590d:	0f b6 00             	movzbl (%eax),%eax
-80105910:	84 c0                	test   %al,%al
-80105912:	75 ef                	jne    80105903 <strlen+0xf>
-    ;
-  return n;
-80105914:	8b 45 fc             	mov    -0x4(%ebp),%eax
-}
-80105917:	c9                   	leave  
-80105918:	c3                   	ret    
-80105919:	00 00                	add    %al,(%eax)
-	...
-
-8010591c <swtch>:
-# Save current register context in old
-# and then load register context from new.
-
-.globl swtch
-swtch:
-  movl 4(%esp), %eax
-8010591c:	8b 44 24 04          	mov    0x4(%esp),%eax
-  movl 8(%esp), %edx
-80105920:	8b 54 24 08          	mov    0x8(%esp),%edx
-
-  # Save old callee-save registers
-  pushl %ebp
-80105924:	55                   	push   %ebp
-  pushl %ebx
-80105925:	53                   	push   %ebx
-  pushl %esi
-80105926:	56                   	push   %esi
-  pushl %edi
-80105927:	57                   	push   %edi
-
-  # Switch stacks
-  movl %esp, (%eax)
-80105928:	89 20                	mov    %esp,(%eax)
-  movl %edx, %esp
-8010592a:	89 d4                	mov    %edx,%esp
-
-  # Load new callee-save registers
-  popl %edi
-8010592c:	5f                   	pop    %edi
-  popl %esi
-8010592d:	5e                   	pop    %esi
-  popl %ebx
-8010592e:	5b                   	pop    %ebx
-  popl %ebp
-8010592f:	5d                   	pop    %ebp
-  ret
-80105930:	c3                   	ret    
-80105931:	00 00                	add    %al,(%eax)
-	...
-
-80105934 <fetchint>:
-// to a saved program counter, and then the first argument.
-
-// Fetch the int at addr from the current process.
-int
-fetchint(uint addr, int *ip)
-{
-80105934:	55                   	push   %ebp
-80105935:	89 e5                	mov    %esp,%ebp
-  if(addr >= proc->sz || addr+4 > proc->sz)
-80105937:	65 a1 04 00 00 00    	mov    %gs:0x4,%eax
-8010593d:	8b 00                	mov    (%eax),%eax
-8010593f:	3b 45 08             	cmp    0x8(%ebp),%eax
-80105942:	76 12                	jbe    80105956 <fetchint+0x22>
-80105944:	8b 45 08             	mov    0x8(%ebp),%eax
-80105947:	8d 50 04             	lea    0x4(%eax),%edx
-8010594a:	65 a1 04 00 00 00    	mov    %gs:0x4,%eax
-80105950:	8b 00                	mov    (%eax),%eax
-80105952:	39 c2                	cmp    %eax,%edx
-80105954:	76 07                	jbe    8010595d <fetchint+0x29>
-    return -1;
-80105956:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
-8010595b:	eb 0f                	jmp    8010596c <fetchint+0x38>
-  *ip = *(int*)(addr);
-8010595d:	8b 45 08             	mov    0x8(%ebp),%eax
-80105960:	8b 10                	mov    (%eax),%edx
-80105962:	8b 45 0c             	mov    0xc(%ebp),%eax
-80105965:	89 10                	mov    %edx,(%eax)
-  return 0;
-80105967:	b8 00 00 00 00       	mov    $0x0,%eax
-}
-8010596c:	5d                   	pop    %ebp
-8010596d:	c3                   	ret    
-
-8010596e <fetchstr>:
-// Fetch the nul-terminated string at addr from the current process.
-// Doesn't actually copy the string - just sets *pp to point at it.
-// Returns length of string, not including nul.
-int
-fetchstr(uint addr, char **pp)
-{
-8010596e:	55                   	push   %ebp
-8010596f:	89 e5                	mov    %esp,%ebp
-80105971:	83 ec 10             	sub    $0x10,%esp
-  char *s, *ep;
-
-  if(addr >= proc->sz)
-80105974:	65 a1 04 00 00 00    	mov    %gs:0x4,%eax
-8010597a:	8b 00                	mov    (%eax),%eax
-8010597c:	3b 45 08             	cmp    0x8(%ebp),%eax
-8010597f:	77 07                	ja     80105988 <fetchstr+0x1a>
-    return -1;
-80105981:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
-80105986:	eb 48                	jmp    801059d0 <fetchstr+0x62>
-  *pp = (char*)addr;
-80105988:	8b 55 08             	mov    0x8(%ebp),%edx
-8010598b:	8b 45 0c             	mov    0xc(%ebp),%eax
-8010598e:	89 10                	mov    %edx,(%eax)
-  ep = (char*)proc->sz;
-80105990:	65 a1 04 00 00 00    	mov    %gs:0x4,%eax
-80105996:	8b 00                	mov    (%eax),%eax
-80105998:	89 45 f8             	mov    %eax,-0x8(%ebp)
-  for(s = *pp; s < ep; s++)
-8010599b:	8b 45 0c             	mov    0xc(%ebp),%eax
-8010599e:	8b 00                	mov    (%eax),%eax
-801059a0:	89 45 fc             	mov    %eax,-0x4(%ebp)
-801059a3:	eb 1e                	jmp    801059c3 <fetchstr+0x55>
-    if(*s == 0)
-801059a5:	8b 45 fc             	mov    -0x4(%ebp),%eax
-801059a8:	0f b6 00             	movzbl (%eax),%eax
-801059ab:	84 c0                	test   %al,%al
-801059ad:	75 10                	jne    801059bf <fetchstr+0x51>
-      return s - *pp;
-801059af:	8b 55 fc             	mov    -0x4(%ebp),%edx
-801059b2:	8b 45 0c             	mov    0xc(%ebp),%eax
-801059b5:	8b 00                	mov    (%eax),%eax
-801059b7:	89 d1                	mov    %edx,%ecx
-801059b9:	29 c1                	sub    %eax,%ecx
-801059bb:	89 c8                	mov    %ecx,%eax
-801059bd:	eb 11                	jmp    801059d0 <fetchstr+0x62>
-
-  if(addr >= proc->sz)
-    return -1;
-  *pp = (char*)addr;
-  ep = (char*)proc->sz;
-  for(s = *pp; s < ep; s++)
-801059bf:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
-801059c3:	8b 45 fc             	mov    -0x4(%ebp),%eax
-801059c6:	3b 45 f8             	cmp    -0x8(%ebp),%eax
-801059c9:	72 da                	jb     801059a5 <fetchstr+0x37>
-    if(*s == 0)
-      return s - *pp;
-  return -1;
-801059cb:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
-}
-801059d0:	c9                   	leave  
-801059d1:	c3                   	ret    
-
-801059d2 <argint>:
-
-// Fetch the nth 32-bit system call argument.
-int
-argint(int n, int *ip)
-{
-801059d2:	55                   	push   %ebp
-801059d3:	89 e5                	mov    %esp,%ebp
-801059d5:	83 ec 08             	sub    $0x8,%esp
-  return fetchint(proc->tf->esp + 4 + 4*n, ip);
-801059d8:	65 a1 04 00 00 00    	mov    %gs:0x4,%eax
-801059de:	8b 40 1c             	mov    0x1c(%eax),%eax
-801059e1:	8b 50 44             	mov    0x44(%eax),%edx
-801059e4:	8b 45 08             	mov    0x8(%ebp),%eax
-801059e7:	c1 e0 02             	shl    $0x2,%eax
-801059ea:	01 d0                	add    %edx,%eax
-801059ec:	8d 50 04             	lea    0x4(%eax),%edx
-801059ef:	8b 45 0c             	mov    0xc(%ebp),%eax
-801059f2:	89 44 24 04          	mov    %eax,0x4(%esp)
-801059f6:	89 14 24             	mov    %edx,(%esp)
-801059f9:	e8 36 ff ff ff       	call   80105934 <fetchint>
-}
-801059fe:	c9                   	leave  
-801059ff:	c3                   	ret    
-
-80105a00 <argptr>:
-// Fetch the nth word-sized system call argument as a pointer
-// to a block of memory of size n bytes.  Check that the pointer
-// lies within the process address space.
-int
-argptr(int n, char **pp, int size)
-{
-80105a00:	55                   	push   %ebp
-80105a01:	89 e5                	mov    %esp,%ebp
-80105a03:	83 ec 18             	sub    $0x18,%esp
-  int i;
-  
-  if(argint(n, &i) < 0)
-80105a06:	8d 45 fc             	lea    -0x4(%ebp),%eax
-80105a09:	89 44 24 04          	mov    %eax,0x4(%esp)
-80105a0d:	8b 45 08             	mov    0x8(%ebp),%eax
-80105a10:	89 04 24             	mov    %eax,(%esp)
-80105a13:	e8 ba ff ff ff       	call   801059d2 <argint>
-80105a18:	85 c0                	test   %eax,%eax
-80105a1a:	79 07                	jns    80105a23 <argptr+0x23>
-    return -1;
-80105a1c:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
-80105a21:	eb 3d                	jmp    80105a60 <argptr+0x60>
-  if((uint)i >= proc->sz || (uint)i+size > proc->sz)
-80105a23:	8b 45 fc             	mov    -0x4(%ebp),%eax
-80105a26:	89 c2                	mov    %eax,%edx
-80105a28:	65 a1 04 00 00 00    	mov    %gs:0x4,%eax
-80105a2e:	8b 00                	mov    (%eax),%eax
-80105a30:	39 c2                	cmp    %eax,%edx
-80105a32:	73 16                	jae    80105a4a <argptr+0x4a>
-80105a34:	8b 45 fc             	mov    -0x4(%ebp),%eax
-80105a37:	89 c2                	mov    %eax,%edx
-80105a39:	8b 45 10             	mov    0x10(%ebp),%eax
-80105a3c:	01 c2                	add    %eax,%edx
-80105a3e:	65 a1 04 00 00 00    	mov    %gs:0x4,%eax
-80105a44:	8b 00                	mov    (%eax),%eax
-80105a46:	39 c2                	cmp    %eax,%edx
-80105a48:	76 07                	jbe    80105a51 <argptr+0x51>
-    return -1;
-80105a4a:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
-80105a4f:	eb 0f                	jmp    80105a60 <argptr+0x60>
-  *pp = (char*)i;
-80105a51:	8b 45 fc             	mov    -0x4(%ebp),%eax
-80105a54:	89 c2                	mov    %eax,%edx
-80105a56:	8b 45 0c             	mov    0xc(%ebp),%eax
-80105a59:	89 10                	mov    %edx,(%eax)
-  return 0;
-80105a5b:	b8 00 00 00 00       	mov    $0x0,%eax
-}
-80105a60:	c9                   	leave  
-80105a61:	c3                   	ret    
-
-80105a62 <argstr>:
-// Check that the pointer is valid and the string is nul-terminated.
-// (There is no shared writable memory, so the string can't change
-// between this check and being used by the kernel.)
-int
-argstr(int n, char **pp)
-{
-80105a62:	55                   	push   %ebp
-80105a63:	89 e5                	mov    %esp,%ebp
-80105a65:	83 ec 18             	sub    $0x18,%esp
-  int addr;
-  if(argint(n, &addr) < 0)
-80105a68:	8d 45 fc             	lea    -0x4(%ebp),%eax
-80105a6b:	89 44 24 04          	mov    %eax,0x4(%esp)
-80105a6f:	8b 45 08             	mov    0x8(%ebp),%eax
-80105a72:	89 04 24             	mov    %eax,(%esp)
-80105a75:	e8 58 ff ff ff       	call   801059d2 <argint>
-80105a7a:	85 c0                	test   %eax,%eax
-80105a7c:	79 07                	jns    80105a85 <argstr+0x23>
-    return -1;
-80105a7e:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
-80105a83:	eb 12                	jmp    80105a97 <argstr+0x35>
-  return fetchstr(addr, pp);
-80105a85:	8b 45 fc             	mov    -0x4(%ebp),%eax
-80105a88:	8b 55 0c             	mov    0xc(%ebp),%edx
-80105a8b:	89 54 24 04          	mov    %edx,0x4(%esp)
-80105a8f:	89 04 24             	mov    %eax,(%esp)
-80105a92:	e8 d7 fe ff ff       	call   8010596e <fetchstr>
-}
-80105a97:	c9                   	leave  
-80105a98:	c3                   	ret    
-
-80105a99 <syscall>:
-[SYS_set_priority]	sys_set_priority,
-};
-
-void
-syscall(void)
-{
-80105a99:	55                   	push   %ebp
-80105a9a:	89 e5                	mov    %esp,%ebp
-80105a9c:	53                   	push   %ebx
-80105a9d:	83 ec 24             	sub    $0x24,%esp
-  int num;
-
-  num = proc->tf->eax;
-80105aa0:	65 a1 04 00 00 00    	mov    %gs:0x4,%eax
-80105aa6:	8b 40 1c             	mov    0x1c(%eax),%eax
-80105aa9:	8b 40 1c             	mov    0x1c(%eax),%eax
-80105aac:	89 45 f4             	mov    %eax,-0xc(%ebp)
-  if(num > 0 && num < NELEM(syscalls) && syscalls[num]) {
-80105aaf:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
-80105ab3:	7e 30                	jle    80105ae5 <syscall+0x4c>
-80105ab5:	8b 45 f4             	mov    -0xc(%ebp),%eax
-80105ab8:	83 f8 1a             	cmp    $0x1a,%eax
-80105abb:	77 28                	ja     80105ae5 <syscall+0x4c>
-80105abd:	8b 45 f4             	mov    -0xc(%ebp),%eax
-80105ac0:	8b 04 85 40 c0 10 80 	mov    -0x7fef3fc0(,%eax,4),%eax
-80105ac7:	85 c0                	test   %eax,%eax
-80105ac9:	74 1a                	je     80105ae5 <syscall+0x4c>
-    proc->tf->eax = syscalls[num]();
-80105acb:	65 a1 04 00 00 00    	mov    %gs:0x4,%eax
-80105ad1:	8b 58 1c             	mov    0x1c(%eax),%ebx
-80105ad4:	8b 45 f4             	mov    -0xc(%ebp),%eax
-80105ad7:	8b 04 85 40 c0 10 80 	mov    -0x7fef3fc0(,%eax,4),%eax
-80105ade:	ff d0                	call   *%eax
-80105ae0:	89 43 1c             	mov    %eax,0x1c(%ebx)
-80105ae3:	eb 3d                	jmp    80105b22 <syscall+0x89>
-  } else {
-    cprintf("%d %s: unknown sys call %d\n",
-            proc->pid, proc->name, num);
-80105ae5:	65 a1 04 00 00 00    	mov    %gs:0x4,%eax
-80105aeb:	8d 48 70             	lea    0x70(%eax),%ecx
-80105aee:	65 a1 04 00 00 00    	mov    %gs:0x4,%eax
-
-  num = proc->tf->eax;
-  if(num > 0 && num < NELEM(syscalls) && syscalls[num]) {
-    proc->tf->eax = syscalls[num]();
-  } else {
-    cprintf("%d %s: unknown sys call %d\n",
-80105af4:	8b 40 10             	mov    0x10(%eax),%eax
-80105af7:	8b 55 f4             	mov    -0xc(%ebp),%edx
-80105afa:	89 54 24 0c          	mov    %edx,0xc(%esp)
-80105afe:	89 4c 24 08          	mov    %ecx,0x8(%esp)
-80105b02:	89 44 24 04          	mov    %eax,0x4(%esp)
-80105b06:	c7 04 24 98 95 10 80 	movl   $0x80109598,(%esp)
-80105b0d:	e8 8f a8 ff ff       	call   801003a1 <cprintf>
-            proc->pid, proc->name, num);
-    proc->tf->eax = -1;
-80105b12:	65 a1 04 00 00 00    	mov    %gs:0x4,%eax
-80105b18:	8b 40 1c             	mov    0x1c(%eax),%eax
-80105b1b:	c7 40 1c ff ff ff ff 	movl   $0xffffffff,0x1c(%eax)
-  }
-}
-80105b22:	83 c4 24             	add    $0x24,%esp
-80105b25:	5b                   	pop    %ebx
-80105b26:	5d                   	pop    %ebp
-80105b27:	c3                   	ret    
-
-80105b28 <argfd>:
-
-// Fetch the nth word-sized system call argument as a file descriptor
-// and return both the descriptor and the corresponding struct file.
-static int
-argfd(int n, int *pfd, struct file **pf)
-{
-80105b28:	55                   	push   %ebp
-80105b29:	89 e5                	mov    %esp,%ebp
-80105b2b:	83 ec 28             	sub    $0x28,%esp
-  int fd;
-  struct file *f;
-
-  if(argint(n, &fd) < 0)
-80105b2e:	8d 45 f0             	lea    -0x10(%ebp),%eax
-80105b31:	89 44 24 04          	mov    %eax,0x4(%esp)
-80105b35:	8b 45 08             	mov    0x8(%ebp),%eax
-80105b38:	89 04 24             	mov    %eax,(%esp)
-80105b3b:	e8 92 fe ff ff       	call   801059d2 <argint>
-80105b40:	85 c0                	test   %eax,%eax
-80105b42:	79 07                	jns    80105b4b <argfd+0x23>
-    return -1;
-80105b44:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
-80105b49:	eb 50                	jmp    80105b9b <argfd+0x73>
-  if(fd < 0 || fd >= NOFILE || (f=proc->ofile[fd]) == 0)
-80105b4b:	8b 45 f0             	mov    -0x10(%ebp),%eax
-80105b4e:	85 c0                	test   %eax,%eax
-80105b50:	78 21                	js     80105b73 <argfd+0x4b>
-80105b52:	8b 45 f0             	mov    -0x10(%ebp),%eax
-80105b55:	83 f8 0f             	cmp    $0xf,%eax
-80105b58:	7f 19                	jg     80105b73 <argfd+0x4b>
-80105b5a:	65 a1 04 00 00 00    	mov    %gs:0x4,%eax
-80105b60:	8b 55 f0             	mov    -0x10(%ebp),%edx
-80105b63:	83 c2 08             	add    $0x8,%edx
-80105b66:	8b 44 90 0c          	mov    0xc(%eax,%edx,4),%eax
-80105b6a:	89 45 f4             	mov    %eax,-0xc(%ebp)
-80105b6d:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
-80105b71:	75 07                	jne    80105b7a <argfd+0x52>
-    return -1;
-80105b73:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
-80105b78:	eb 21                	jmp    80105b9b <argfd+0x73>
-  if(pfd)
-80105b7a:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
-80105b7e:	74 08                	je     80105b88 <argfd+0x60>
-    *pfd = fd;
-80105b80:	8b 55 f0             	mov    -0x10(%ebp),%edx
-80105b83:	8b 45 0c             	mov    0xc(%ebp),%eax
-80105b86:	89 10                	mov    %edx,(%eax)
-  if(pf)
-80105b88:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
-80105b8c:	74 08                	je     80105b96 <argfd+0x6e>
-    *pf = f;
-80105b8e:	8b 45 10             	mov    0x10(%ebp),%eax
-80105b91:	8b 55 f4             	mov    -0xc(%ebp),%edx
-80105b94:	89 10                	mov    %edx,(%eax)
-  return 0;
-80105b96:	b8 00 00 00 00       	mov    $0x0,%eax
-}
-80105b9b:	c9                   	leave  
-80105b9c:	c3                   	ret    
-
-80105b9d <fdalloc>:
-
-// Allocate a file descriptor for the given file.
-// Takes over file reference from caller on success.
-static int
-fdalloc(struct file *f)
-{
-80105b9d:	55                   	push   %ebp
-80105b9e:	89 e5                	mov    %esp,%ebp
-80105ba0:	83 ec 10             	sub    $0x10,%esp
-  int fd;
-
-  for(fd = 0; fd < NOFILE; fd++){
-80105ba3:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
-80105baa:	eb 30                	jmp    80105bdc <fdalloc+0x3f>
-    if(proc->ofile[fd] == 0){
-80105bac:	65 a1 04 00 00 00    	mov    %gs:0x4,%eax
-80105bb2:	8b 55 fc             	mov    -0x4(%ebp),%edx
-80105bb5:	83 c2 08             	add    $0x8,%edx
-80105bb8:	8b 44 90 0c          	mov    0xc(%eax,%edx,4),%eax
-80105bbc:	85 c0                	test   %eax,%eax
-80105bbe:	75 18                	jne    80105bd8 <fdalloc+0x3b>
-      proc->ofile[fd] = f;
-80105bc0:	65 a1 04 00 00 00    	mov    %gs:0x4,%eax
-80105bc6:	8b 55 fc             	mov    -0x4(%ebp),%edx
-80105bc9:	8d 4a 08             	lea    0x8(%edx),%ecx
-80105bcc:	8b 55 08             	mov    0x8(%ebp),%edx
-80105bcf:	89 54 88 0c          	mov    %edx,0xc(%eax,%ecx,4)
-      return fd;
-80105bd3:	8b 45 fc             	mov    -0x4(%ebp),%eax
-80105bd6:	eb 0f                	jmp    80105be7 <fdalloc+0x4a>
-static int
-fdalloc(struct file *f)
-{
-  int fd;
-
-  for(fd = 0; fd < NOFILE; fd++){
-80105bd8:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
-80105bdc:	83 7d fc 0f          	cmpl   $0xf,-0x4(%ebp)
-80105be0:	7e ca                	jle    80105bac <fdalloc+0xf>
-    if(proc->ofile[fd] == 0){
-      proc->ofile[fd] = f;
-      return fd;
-    }
-  }
-  return -1;
-80105be2:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
-}
-80105be7:	c9                   	leave  
-80105be8:	c3                   	ret    
-
-80105be9 <sys_dup>:
-
-int
-sys_dup(void)
-{
-80105be9:	55                   	push   %ebp
-80105bea:	89 e5                	mov    %esp,%ebp
-80105bec:	83 ec 28             	sub    $0x28,%esp
-  struct file *f;
-  int fd;
-  
-  if(argfd(0, 0, &f) < 0)
-80105bef:	8d 45 f0             	lea    -0x10(%ebp),%eax
-80105bf2:	89 44 24 08          	mov    %eax,0x8(%esp)
-80105bf6:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
-80105bfd:	00 
-80105bfe:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
-80105c05:	e8 1e ff ff ff       	call   80105b28 <argfd>
-80105c0a:	85 c0                	test   %eax,%eax
-80105c0c:	79 07                	jns    80105c15 <sys_dup+0x2c>
-    return -1;
-80105c0e:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
-80105c13:	eb 29                	jmp    80105c3e <sys_dup+0x55>
-  if((fd=fdalloc(f)) < 0)
-80105c15:	8b 45 f0             	mov    -0x10(%ebp),%eax
-80105c18:	89 04 24             	mov    %eax,(%esp)
-80105c1b:	e8 7d ff ff ff       	call   80105b9d <fdalloc>
-80105c20:	89 45 f4             	mov    %eax,-0xc(%ebp)
-80105c23:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
-80105c27:	79 07                	jns    80105c30 <sys_dup+0x47>
-    return -1;
-80105c29:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
-80105c2e:	eb 0e                	jmp    80105c3e <sys_dup+0x55>
-  filedup(f);
-80105c30:	8b 45 f0             	mov    -0x10(%ebp),%eax
-80105c33:	89 04 24             	mov    %eax,(%esp)
-80105c36:	e8 a9 b3 ff ff       	call   80100fe4 <filedup>
-  return fd;
-80105c3b:	8b 45 f4             	mov    -0xc(%ebp),%eax
-}
-80105c3e:	c9                   	leave  
-80105c3f:	c3                   	ret    
-
-80105c40 <sys_read>:
-
-int
-sys_read(void)
-{
-80105c40:	55                   	push   %ebp
-80105c41:	89 e5                	mov    %esp,%ebp
-80105c43:	83 ec 28             	sub    $0x28,%esp
-  struct file *f;
-  int n;
-  char *p;
-
-  if(argfd(0, 0, &f) < 0 || argint(2, &n) < 0 || argptr(1, &p, n) < 0)
-80105c46:	8d 45 f4             	lea    -0xc(%ebp),%eax
-80105c49:	89 44 24 08          	mov    %eax,0x8(%esp)
-80105c4d:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
-80105c54:	00 
-80105c55:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
-80105c5c:	e8 c7 fe ff ff       	call   80105b28 <argfd>
-80105c61:	85 c0                	test   %eax,%eax
-80105c63:	78 35                	js     80105c9a <sys_read+0x5a>
-80105c65:	8d 45 f0             	lea    -0x10(%ebp),%eax
-80105c68:	89 44 24 04          	mov    %eax,0x4(%esp)
-80105c6c:	c7 04 24 02 00 00 00 	movl   $0x2,(%esp)
-80105c73:	e8 5a fd ff ff       	call   801059d2 <argint>
-80105c78:	85 c0                	test   %eax,%eax
-80105c7a:	78 1e                	js     80105c9a <sys_read+0x5a>
-80105c7c:	8b 45 f0             	mov    -0x10(%ebp),%eax
-80105c7f:	89 44 24 08          	mov    %eax,0x8(%esp)
-80105c83:	8d 45 ec             	lea    -0x14(%ebp),%eax
-80105c86:	89 44 24 04          	mov    %eax,0x4(%esp)
-80105c8a:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
-80105c91:	e8 6a fd ff ff       	call   80105a00 <argptr>
-80105c96:	85 c0                	test   %eax,%eax
-80105c98:	79 07                	jns    80105ca1 <sys_read+0x61>
-    return -1;
-80105c9a:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
-80105c9f:	eb 19                	jmp    80105cba <sys_read+0x7a>
-  return fileread(f, p, n);
-80105ca1:	8b 4d f0             	mov    -0x10(%ebp),%ecx
-80105ca4:	8b 55 ec             	mov    -0x14(%ebp),%edx
-80105ca7:	8b 45 f4             	mov    -0xc(%ebp),%eax
-80105caa:	89 4c 24 08          	mov    %ecx,0x8(%esp)
-80105cae:	89 54 24 04          	mov    %edx,0x4(%esp)
-80105cb2:	89 04 24             	mov    %eax,(%esp)
-80105cb5:	e8 97 b4 ff ff       	call   80101151 <fileread>
-}
-80105cba:	c9                   	leave  
-80105cbb:	c3                   	ret    
-
-80105cbc <sys_write>:
-
-int
-sys_write(void)
-{
-80105cbc:	55                   	push   %ebp
-80105cbd:	89 e5                	mov    %esp,%ebp
-80105cbf:	83 ec 28             	sub    $0x28,%esp
-  struct file *f;
-  int n;
-  char *p;
-
-  if(argfd(0, 0, &f) < 0 || argint(2, &n) < 0 || argptr(1, &p, n) < 0)
-80105cc2:	8d 45 f4             	lea    -0xc(%ebp),%eax
-80105cc5:	89 44 24 08          	mov    %eax,0x8(%esp)
-80105cc9:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
-80105cd0:	00 
-80105cd1:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
-80105cd8:	e8 4b fe ff ff       	call   80105b28 <argfd>
-80105cdd:	85 c0                	test   %eax,%eax
-80105cdf:	78 35                	js     80105d16 <sys_write+0x5a>
-80105ce1:	8d 45 f0             	lea    -0x10(%ebp),%eax
-80105ce4:	89 44 24 04          	mov    %eax,0x4(%esp)
-80105ce8:	c7 04 24 02 00 00 00 	movl   $0x2,(%esp)
-80105cef:	e8 de fc ff ff       	call   801059d2 <argint>
-80105cf4:	85 c0                	test   %eax,%eax
-80105cf6:	78 1e                	js     80105d16 <sys_write+0x5a>
-80105cf8:	8b 45 f0             	mov    -0x10(%ebp),%eax
-80105cfb:	89 44 24 08          	mov    %eax,0x8(%esp)
-80105cff:	8d 45 ec             	lea    -0x14(%ebp),%eax
-80105d02:	89 44 24 04          	mov    %eax,0x4(%esp)
-80105d06:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
-80105d0d:	e8 ee fc ff ff       	call   80105a00 <argptr>
-80105d12:	85 c0                	test   %eax,%eax
-80105d14:	79 07                	jns    80105d1d <sys_write+0x61>
-    return -1;
-80105d16:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
-80105d1b:	eb 19                	jmp    80105d36 <sys_write+0x7a>
-  return filewrite(f, p, n);
-80105d1d:	8b 4d f0             	mov    -0x10(%ebp),%ecx
-80105d20:	8b 55 ec             	mov    -0x14(%ebp),%edx
-80105d23:	8b 45 f4             	mov    -0xc(%ebp),%eax
-80105d26:	89 4c 24 08          	mov    %ecx,0x8(%esp)
-80105d2a:	89 54 24 04          	mov    %edx,0x4(%esp)
-80105d2e:	89 04 24             	mov    %eax,(%esp)
-80105d31:	e8 d7 b4 ff ff       	call   8010120d <filewrite>
-}
-80105d36:	c9                   	leave  
-80105d37:	c3                   	ret    
-
-80105d38 <sys_close>:
-
-int
-sys_close(void)
-{
-80105d38:	55                   	push   %ebp
-80105d39:	89 e5                	mov    %esp,%ebp
-80105d3b:	83 ec 28             	sub    $0x28,%esp
-  int fd;
-  struct file *f;
-  
-  if(argfd(0, &fd, &f) < 0)
-80105d3e:	8d 45 f0             	lea    -0x10(%ebp),%eax
-80105d41:	89 44 24 08          	mov    %eax,0x8(%esp)
-80105d45:	8d 45 f4             	lea    -0xc(%ebp),%eax
-80105d48:	89 44 24 04          	mov    %eax,0x4(%esp)
-80105d4c:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
-80105d53:	e8 d0 fd ff ff       	call   80105b28 <argfd>
-80105d58:	85 c0                	test   %eax,%eax
-80105d5a:	79 07                	jns    80105d63 <sys_close+0x2b>
-    return -1;
-80105d5c:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
-80105d61:	eb 24                	jmp    80105d87 <sys_close+0x4f>
-  proc->ofile[fd] = 0;
-80105d63:	65 a1 04 00 00 00    	mov    %gs:0x4,%eax
-80105d69:	8b 55 f4             	mov    -0xc(%ebp),%edx
-80105d6c:	83 c2 08             	add    $0x8,%edx
-80105d6f:	c7 44 90 0c 00 00 00 	movl   $0x0,0xc(%eax,%edx,4)
-80105d76:	00 
-  fileclose(f);
-80105d77:	8b 45 f0             	mov    -0x10(%ebp),%eax
-80105d7a:	89 04 24             	mov    %eax,(%esp)
-80105d7d:	e8 aa b2 ff ff       	call   8010102c <fileclose>
-  return 0;
-80105d82:	b8 00 00 00 00       	mov    $0x0,%eax
-}
-80105d87:	c9                   	leave  
-80105d88:	c3                   	ret    
-
-80105d89 <sys_fstat>:
-
-int
-sys_fstat(void)
-{
-80105d89:	55                   	push   %ebp
-80105d8a:	89 e5                	mov    %esp,%ebp
-80105d8c:	83 ec 28             	sub    $0x28,%esp
-  struct file *f;
-  struct stat *st;
-  
-  if(argfd(0, 0, &f) < 0 || argptr(1, (void*)&st, sizeof(*st)) < 0)
-80105d8f:	8d 45 f4             	lea    -0xc(%ebp),%eax
-80105d92:	89 44 24 08          	mov    %eax,0x8(%esp)
-80105d96:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
-80105d9d:	00 
-80105d9e:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
-80105da5:	e8 7e fd ff ff       	call   80105b28 <argfd>
-80105daa:	85 c0                	test   %eax,%eax
-80105dac:	78 1f                	js     80105dcd <sys_fstat+0x44>
-80105dae:	c7 44 24 08 14 00 00 	movl   $0x14,0x8(%esp)
-80105db5:	00 
-80105db6:	8d 45 f0             	lea    -0x10(%ebp),%eax
-80105db9:	89 44 24 04          	mov    %eax,0x4(%esp)
-80105dbd:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
-80105dc4:	e8 37 fc ff ff       	call   80105a00 <argptr>
-80105dc9:	85 c0                	test   %eax,%eax
-80105dcb:	79 07                	jns    80105dd4 <sys_fstat+0x4b>
-    return -1;
-80105dcd:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
-80105dd2:	eb 12                	jmp    80105de6 <sys_fstat+0x5d>
-  return filestat(f, st);
-80105dd4:	8b 55 f0             	mov    -0x10(%ebp),%edx
-80105dd7:	8b 45 f4             	mov    -0xc(%ebp),%eax
-80105dda:	89 54 24 04          	mov    %edx,0x4(%esp)
-80105dde:	89 04 24             	mov    %eax,(%esp)
-80105de1:	e8 1c b3 ff ff       	call   80101102 <filestat>
-}
-80105de6:	c9                   	leave  
-80105de7:	c3                   	ret    
-
-80105de8 <sys_link>:
-
-// Create the path new as a link to the same inode as old.
-int
-sys_link(void)
-{
-80105de8:	55                   	push   %ebp
-80105de9:	89 e5                	mov    %esp,%ebp
-80105deb:	83 ec 38             	sub    $0x38,%esp
-  char name[DIRSIZ], *new, *old;
-  struct inode *dp, *ip;
-
-  if(argstr(0, &old) < 0 || argstr(1, &new) < 0)
-80105dee:	8d 45 d8             	lea    -0x28(%ebp),%eax
-80105df1:	89 44 24 04          	mov    %eax,0x4(%esp)
-80105df5:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
-80105dfc:	e8 61 fc ff ff       	call   80105a62 <argstr>
-80105e01:	85 c0                	test   %eax,%eax
-80105e03:	78 17                	js     80105e1c <sys_link+0x34>
-80105e05:	8d 45 dc             	lea    -0x24(%ebp),%eax
-80105e08:	89 44 24 04          	mov    %eax,0x4(%esp)
-80105e0c:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
-80105e13:	e8 4a fc ff ff       	call   80105a62 <argstr>
-80105e18:	85 c0                	test   %eax,%eax
-80105e1a:	79 0a                	jns    80105e26 <sys_link+0x3e>
-    return -1;
-80105e1c:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
-80105e21:	e9 41 01 00 00       	jmp    80105f67 <sys_link+0x17f>
-
-  begin_op();
-80105e26:	e8 92 d6 ff ff       	call   801034bd <begin_op>
-  if((ip = namei(old)) == 0){
-80105e2b:	8b 45 d8             	mov    -0x28(%ebp),%eax
-80105e2e:	89 04 24             	mov    %eax,(%esp)
-80105e31:	e8 3c c6 ff ff       	call   80102472 <namei>
-80105e36:	89 45 f4             	mov    %eax,-0xc(%ebp)
-80105e39:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
-80105e3d:	75 0f                	jne    80105e4e <sys_link+0x66>
-    end_op();
-80105e3f:	e8 fa d6 ff ff       	call   8010353e <end_op>
-    return -1;
-80105e44:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
-80105e49:	e9 19 01 00 00       	jmp    80105f67 <sys_link+0x17f>
-  }
-
-  ilock(ip);
-80105e4e:	8b 45 f4             	mov    -0xc(%ebp),%eax
-80105e51:	89 04 24             	mov    %eax,(%esp)
-80105e54:	e8 77 ba ff ff       	call   801018d0 <ilock>
-  if(ip->type == T_DIR){
-80105e59:	8b 45 f4             	mov    -0xc(%ebp),%eax
-80105e5c:	0f b7 40 10          	movzwl 0x10(%eax),%eax
-80105e60:	66 83 f8 01          	cmp    $0x1,%ax
-80105e64:	75 1a                	jne    80105e80 <sys_link+0x98>
-    iunlockput(ip);
-80105e66:	8b 45 f4             	mov    -0xc(%ebp),%eax
-80105e69:	89 04 24             	mov    %eax,(%esp)
-80105e6c:	e8 e3 bc ff ff       	call   80101b54 <iunlockput>
-    end_op();
-80105e71:	e8 c8 d6 ff ff       	call   8010353e <end_op>
-    return -1;
-80105e76:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
-80105e7b:	e9 e7 00 00 00       	jmp    80105f67 <sys_link+0x17f>
-  }
-
-  ip->nlink++;
-80105e80:	8b 45 f4             	mov    -0xc(%ebp),%eax
-80105e83:	0f b7 40 16          	movzwl 0x16(%eax),%eax
-80105e87:	8d 50 01             	lea    0x1(%eax),%edx
-80105e8a:	8b 45 f4             	mov    -0xc(%ebp),%eax
-80105e8d:	66 89 50 16          	mov    %dx,0x16(%eax)
-  iupdate(ip);
-80105e91:	8b 45 f4             	mov    -0xc(%ebp),%eax
-80105e94:	89 04 24             	mov    %eax,(%esp)
-80105e97:	e8 78 b8 ff ff       	call   80101714 <iupdate>
-  iunlock(ip);
-80105e9c:	8b 45 f4             	mov    -0xc(%ebp),%eax
-80105e9f:	89 04 24             	mov    %eax,(%esp)
-80105ea2:	e8 77 bb ff ff       	call   80101a1e <iunlock>
-
-  if((dp = nameiparent(new, name)) == 0)
-80105ea7:	8b 45 dc             	mov    -0x24(%ebp),%eax
-80105eaa:	8d 55 e2             	lea    -0x1e(%ebp),%edx
-80105ead:	89 54 24 04          	mov    %edx,0x4(%esp)
-80105eb1:	89 04 24             	mov    %eax,(%esp)
-80105eb4:	e8 db c5 ff ff       	call   80102494 <nameiparent>
-80105eb9:	89 45 f0             	mov    %eax,-0x10(%ebp)
-80105ebc:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
-80105ec0:	74 68                	je     80105f2a <sys_link+0x142>
-    goto bad;
-  ilock(dp);
-80105ec2:	8b 45 f0             	mov    -0x10(%ebp),%eax
-80105ec5:	89 04 24             	mov    %eax,(%esp)
-80105ec8:	e8 03 ba ff ff       	call   801018d0 <ilock>
-  if(dp->dev != ip->dev || dirlink(dp, name, ip->inum) < 0){
-80105ecd:	8b 45 f0             	mov    -0x10(%ebp),%eax
-80105ed0:	8b 10                	mov    (%eax),%edx
-80105ed2:	8b 45 f4             	mov    -0xc(%ebp),%eax
-80105ed5:	8b 00                	mov    (%eax),%eax
-80105ed7:	39 c2                	cmp    %eax,%edx
-80105ed9:	75 20                	jne    80105efb <sys_link+0x113>
-80105edb:	8b 45 f4             	mov    -0xc(%ebp),%eax
-80105ede:	8b 40 04             	mov    0x4(%eax),%eax
-80105ee1:	89 44 24 08          	mov    %eax,0x8(%esp)
-80105ee5:	8d 45 e2             	lea    -0x1e(%ebp),%eax
-80105ee8:	89 44 24 04          	mov    %eax,0x4(%esp)
-80105eec:	8b 45 f0             	mov    -0x10(%ebp),%eax
-80105eef:	89 04 24             	mov    %eax,(%esp)
-80105ef2:	e8 ba c2 ff ff       	call   801021b1 <dirlink>
-80105ef7:	85 c0                	test   %eax,%eax
-80105ef9:	79 0d                	jns    80105f08 <sys_link+0x120>
-    iunlockput(dp);
-80105efb:	8b 45 f0             	mov    -0x10(%ebp),%eax
-80105efe:	89 04 24             	mov    %eax,(%esp)
-80105f01:	e8 4e bc ff ff       	call   80101b54 <iunlockput>
-    goto bad;
-80105f06:	eb 23                	jmp    80105f2b <sys_link+0x143>
-  }
-  iunlockput(dp);
-80105f08:	8b 45 f0             	mov    -0x10(%ebp),%eax
-80105f0b:	89 04 24             	mov    %eax,(%esp)
-80105f0e:	e8 41 bc ff ff       	call   80101b54 <iunlockput>
-  iput(ip);
-80105f13:	8b 45 f4             	mov    -0xc(%ebp),%eax
-80105f16:	89 04 24             	mov    %eax,(%esp)
-80105f19:	e8 65 bb ff ff       	call   80101a83 <iput>
-
-  end_op();
-80105f1e:	e8 1b d6 ff ff       	call   8010353e <end_op>
-
-  return 0;
-80105f23:	b8 00 00 00 00       	mov    $0x0,%eax
-80105f28:	eb 3d                	jmp    80105f67 <sys_link+0x17f>
-  ip->nlink++;
-  iupdate(ip);
-  iunlock(ip);
-
-  if((dp = nameiparent(new, name)) == 0)
-    goto bad;
-80105f2a:	90                   	nop
-  end_op();
-
-  return 0;
-
-bad:
-  ilock(ip);
-80105f2b:	8b 45 f4             	mov    -0xc(%ebp),%eax
-80105f2e:	89 04 24             	mov    %eax,(%esp)
-80105f31:	e8 9a b9 ff ff       	call   801018d0 <ilock>
-  ip->nlink--;
-80105f36:	8b 45 f4             	mov    -0xc(%ebp),%eax
-80105f39:	0f b7 40 16          	movzwl 0x16(%eax),%eax
-80105f3d:	8d 50 ff             	lea    -0x1(%eax),%edx
-80105f40:	8b 45 f4             	mov    -0xc(%ebp),%eax
-80105f43:	66 89 50 16          	mov    %dx,0x16(%eax)
-  iupdate(ip);
-80105f47:	8b 45 f4             	mov    -0xc(%ebp),%eax
-80105f4a:	89 04 24             	mov    %eax,(%esp)
-80105f4d:	e8 c2 b7 ff ff       	call   80101714 <iupdate>
-  iunlockput(ip);
-80105f52:	8b 45 f4             	mov    -0xc(%ebp),%eax
-80105f55:	89 04 24             	mov    %eax,(%esp)
-80105f58:	e8 f7 bb ff ff       	call   80101b54 <iunlockput>
-  end_op();
-80105f5d:	e8 dc d5 ff ff       	call   8010353e <end_op>
-  return -1;
-80105f62:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
-}
-80105f67:	c9                   	leave  
-80105f68:	c3                   	ret    
-
-80105f69 <isdirempty>:
-
-// Is the directory dp empty except for "." and ".." ?
-static int
-isdirempty(struct inode *dp)
-{
-80105f69:	55                   	push   %ebp
-80105f6a:	89 e5                	mov    %esp,%ebp
-80105f6c:	83 ec 38             	sub    $0x38,%esp
-  int off;
-  struct dirent de;
-
-  for(off=2*sizeof(de); off<dp->size; off+=sizeof(de)){
-80105f6f:	c7 45 f4 20 00 00 00 	movl   $0x20,-0xc(%ebp)
-80105f76:	eb 4b                	jmp    80105fc3 <isdirempty+0x5a>
-    if(readi(dp, (char*)&de, off, sizeof(de)) != sizeof(de))
-80105f78:	8b 45 f4             	mov    -0xc(%ebp),%eax
-80105f7b:	c7 44 24 0c 10 00 00 	movl   $0x10,0xc(%esp)
-80105f82:	00 
-80105f83:	89 44 24 08          	mov    %eax,0x8(%esp)
-80105f87:	8d 45 e4             	lea    -0x1c(%ebp),%eax
-80105f8a:	89 44 24 04          	mov    %eax,0x4(%esp)
-80105f8e:	8b 45 08             	mov    0x8(%ebp),%eax
-80105f91:	89 04 24             	mov    %eax,(%esp)
-80105f94:	e8 2d be ff ff       	call   80101dc6 <readi>
-80105f99:	83 f8 10             	cmp    $0x10,%eax
-80105f9c:	74 0c                	je     80105faa <isdirempty+0x41>
-      panic("isdirempty: readi");
-80105f9e:	c7 04 24 b4 95 10 80 	movl   $0x801095b4,(%esp)
-80105fa5:	e8 93 a5 ff ff       	call   8010053d <panic>
-    if(de.inum != 0)
-80105faa:	0f b7 45 e4          	movzwl -0x1c(%ebp),%eax
-80105fae:	66 85 c0             	test   %ax,%ax
-80105fb1:	74 07                	je     80105fba <isdirempty+0x51>
-      return 0;
-80105fb3:	b8 00 00 00 00       	mov    $0x0,%eax
-80105fb8:	eb 1b                	jmp    80105fd5 <isdirempty+0x6c>
-isdirempty(struct inode *dp)
-{
-  int off;
-  struct dirent de;
-
-  for(off=2*sizeof(de); off<dp->size; off+=sizeof(de)){
-80105fba:	8b 45 f4             	mov    -0xc(%ebp),%eax
-80105fbd:	83 c0 10             	add    $0x10,%eax
-80105fc0:	89 45 f4             	mov    %eax,-0xc(%ebp)
-80105fc3:	8b 55 f4             	mov    -0xc(%ebp),%edx
-80105fc6:	8b 45 08             	mov    0x8(%ebp),%eax
-80105fc9:	8b 40 18             	mov    0x18(%eax),%eax
-80105fcc:	39 c2                	cmp    %eax,%edx
-80105fce:	72 a8                	jb     80105f78 <isdirempty+0xf>
-    if(readi(dp, (char*)&de, off, sizeof(de)) != sizeof(de))
-      panic("isdirempty: readi");
-    if(de.inum != 0)
-      return 0;
-  }
-  return 1;
-80105fd0:	b8 01 00 00 00       	mov    $0x1,%eax
-}
-80105fd5:	c9                   	leave  
-80105fd6:	c3                   	ret    
-
-80105fd7 <sys_unlink>:
-
-//PAGEBREAK!
-int
-sys_unlink(void)
-{
-80105fd7:	55                   	push   %ebp
-80105fd8:	89 e5                	mov    %esp,%ebp
-80105fda:	83 ec 48             	sub    $0x48,%esp
-  struct inode *ip, *dp;
-  struct dirent de;
-  char name[DIRSIZ], *path;
-  uint off;
-
-  if(argstr(0, &path) < 0)
-80105fdd:	8d 45 cc             	lea    -0x34(%ebp),%eax
-80105fe0:	89 44 24 04          	mov    %eax,0x4(%esp)
-80105fe4:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
-80105feb:	e8 72 fa ff ff       	call   80105a62 <argstr>
-80105ff0:	85 c0                	test   %eax,%eax
-80105ff2:	79 0a                	jns    80105ffe <sys_unlink+0x27>
-    return -1;
-80105ff4:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
-80105ff9:	e9 af 01 00 00       	jmp    801061ad <sys_unlink+0x1d6>
-
-  begin_op();
-80105ffe:	e8 ba d4 ff ff       	call   801034bd <begin_op>
-  if((dp = nameiparent(path, name)) == 0){
-80106003:	8b 45 cc             	mov    -0x34(%ebp),%eax
-80106006:	8d 55 d2             	lea    -0x2e(%ebp),%edx
-80106009:	89 54 24 04          	mov    %edx,0x4(%esp)
-8010600d:	89 04 24             	mov    %eax,(%esp)
-80106010:	e8 7f c4 ff ff       	call   80102494 <nameiparent>
-80106015:	89 45 f4             	mov    %eax,-0xc(%ebp)
-80106018:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
-8010601c:	75 0f                	jne    8010602d <sys_unlink+0x56>
-    end_op();
-8010601e:	e8 1b d5 ff ff       	call   8010353e <end_op>
-    return -1;
-80106023:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
-80106028:	e9 80 01 00 00       	jmp    801061ad <sys_unlink+0x1d6>
-  }
-
-  ilock(dp);
-8010602d:	8b 45 f4             	mov    -0xc(%ebp),%eax
-80106030:	89 04 24             	mov    %eax,(%esp)
-80106033:	e8 98 b8 ff ff       	call   801018d0 <ilock>
-
-  // Cannot unlink "." or "..".
-  if(namecmp(name, ".") == 0 || namecmp(name, "..") == 0)
-80106038:	c7 44 24 04 c6 95 10 	movl   $0x801095c6,0x4(%esp)
-8010603f:	80 
-80106040:	8d 45 d2             	lea    -0x2e(%ebp),%eax
-80106043:	89 04 24             	mov    %eax,(%esp)
-80106046:	e8 7c c0 ff ff       	call   801020c7 <namecmp>
-8010604b:	85 c0                	test   %eax,%eax
-8010604d:	0f 84 45 01 00 00    	je     80106198 <sys_unlink+0x1c1>
-80106053:	c7 44 24 04 c8 95 10 	movl   $0x801095c8,0x4(%esp)
-8010605a:	80 
-8010605b:	8d 45 d2             	lea    -0x2e(%ebp),%eax
-8010605e:	89 04 24             	mov    %eax,(%esp)
-80106061:	e8 61 c0 ff ff       	call   801020c7 <namecmp>
-80106066:	85 c0                	test   %eax,%eax
-80106068:	0f 84 2a 01 00 00    	je     80106198 <sys_unlink+0x1c1>
-    goto bad;
-
-  if((ip = dirlookup(dp, name, &off)) == 0)
-8010606e:	8d 45 c8             	lea    -0x38(%ebp),%eax
-80106071:	89 44 24 08          	mov    %eax,0x8(%esp)
-80106075:	8d 45 d2             	lea    -0x2e(%ebp),%eax
-80106078:	89 44 24 04          	mov    %eax,0x4(%esp)
-8010607c:	8b 45 f4             	mov    -0xc(%ebp),%eax
-8010607f:	89 04 24             	mov    %eax,(%esp)
-80106082:	e8 62 c0 ff ff       	call   801020e9 <dirlookup>
-80106087:	89 45 f0             	mov    %eax,-0x10(%ebp)
-8010608a:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
-8010608e:	0f 84 03 01 00 00    	je     80106197 <sys_unlink+0x1c0>
-    goto bad;
-  ilock(ip);
-80106094:	8b 45 f0             	mov    -0x10(%ebp),%eax
-80106097:	89 04 24             	mov    %eax,(%esp)
-8010609a:	e8 31 b8 ff ff       	call   801018d0 <ilock>
-
-  if(ip->nlink < 1)
-8010609f:	8b 45 f0             	mov    -0x10(%ebp),%eax
-801060a2:	0f b7 40 16          	movzwl 0x16(%eax),%eax
-801060a6:	66 85 c0             	test   %ax,%ax
-801060a9:	7f 0c                	jg     801060b7 <sys_unlink+0xe0>
-    panic("unlink: nlink < 1");
-801060ab:	c7 04 24 cb 95 10 80 	movl   $0x801095cb,(%esp)
-801060b2:	e8 86 a4 ff ff       	call   8010053d <panic>
-  if(ip->type == T_DIR && !isdirempty(ip)){
-801060b7:	8b 45 f0             	mov    -0x10(%ebp),%eax
-801060ba:	0f b7 40 10          	movzwl 0x10(%eax),%eax
-801060be:	66 83 f8 01          	cmp    $0x1,%ax
-801060c2:	75 1f                	jne    801060e3 <sys_unlink+0x10c>
-801060c4:	8b 45 f0             	mov    -0x10(%ebp),%eax
-801060c7:	89 04 24             	mov    %eax,(%esp)
-801060ca:	e8 9a fe ff ff       	call   80105f69 <isdirempty>
-801060cf:	85 c0                	test   %eax,%eax
-801060d1:	75 10                	jne    801060e3 <sys_unlink+0x10c>
-    iunlockput(ip);
-801060d3:	8b 45 f0             	mov    -0x10(%ebp),%eax
-801060d6:	89 04 24             	mov    %eax,(%esp)
-801060d9:	e8 76 ba ff ff       	call   80101b54 <iunlockput>
-    goto bad;
-801060de:	e9 b5 00 00 00       	jmp    80106198 <sys_unlink+0x1c1>
-  }
-
-  memset(&de, 0, sizeof(de));
-801060e3:	c7 44 24 08 10 00 00 	movl   $0x10,0x8(%esp)
-801060ea:	00 
-801060eb:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
-801060f2:	00 
-801060f3:	8d 45 e0             	lea    -0x20(%ebp),%eax
-801060f6:	89 04 24             	mov    %eax,(%esp)
-801060f9:	e8 78 f5 ff ff       	call   80105676 <memset>
-  if(writei(dp, (char*)&de, off, sizeof(de)) != sizeof(de))
-801060fe:	8b 45 c8             	mov    -0x38(%ebp),%eax
-80106101:	c7 44 24 0c 10 00 00 	movl   $0x10,0xc(%esp)
-80106108:	00 
-80106109:	89 44 24 08          	mov    %eax,0x8(%esp)
-8010610d:	8d 45 e0             	lea    -0x20(%ebp),%eax
-80106110:	89 44 24 04          	mov    %eax,0x4(%esp)
-80106114:	8b 45 f4             	mov    -0xc(%ebp),%eax
-80106117:	89 04 24             	mov    %eax,(%esp)
-8010611a:	e8 12 be ff ff       	call   80101f31 <writei>
-8010611f:	83 f8 10             	cmp    $0x10,%eax
-80106122:	74 0c                	je     80106130 <sys_unlink+0x159>
-    panic("unlink: writei");
-80106124:	c7 04 24 dd 95 10 80 	movl   $0x801095dd,(%esp)
-8010612b:	e8 0d a4 ff ff       	call   8010053d <panic>
-  if(ip->type == T_DIR){
-80106130:	8b 45 f0             	mov    -0x10(%ebp),%eax
-80106133:	0f b7 40 10          	movzwl 0x10(%eax),%eax
-80106137:	66 83 f8 01          	cmp    $0x1,%ax
-8010613b:	75 1c                	jne    80106159 <sys_unlink+0x182>
-    dp->nlink--;
-8010613d:	8b 45 f4             	mov    -0xc(%ebp),%eax
-80106140:	0f b7 40 16          	movzwl 0x16(%eax),%eax
-80106144:	8d 50 ff             	lea    -0x1(%eax),%edx
-80106147:	8b 45 f4             	mov    -0xc(%ebp),%eax
-8010614a:	66 89 50 16          	mov    %dx,0x16(%eax)
-    iupdate(dp);
-8010614e:	8b 45 f4             	mov    -0xc(%ebp),%eax
-80106151:	89 04 24             	mov    %eax,(%esp)
-80106154:	e8 bb b5 ff ff       	call   80101714 <iupdate>
-  }
-  iunlockput(dp);
-80106159:	8b 45 f4             	mov    -0xc(%ebp),%eax
-8010615c:	89 04 24             	mov    %eax,(%esp)
-8010615f:	e8 f0 b9 ff ff       	call   80101b54 <iunlockput>
-
-  ip->nlink--;
-80106164:	8b 45 f0             	mov    -0x10(%ebp),%eax
-80106167:	0f b7 40 16          	movzwl 0x16(%eax),%eax
-8010616b:	8d 50 ff             	lea    -0x1(%eax),%edx
-8010616e:	8b 45 f0             	mov    -0x10(%ebp),%eax
-80106171:	66 89 50 16          	mov    %dx,0x16(%eax)
-  iupdate(ip);
-80106175:	8b 45 f0             	mov    -0x10(%ebp),%eax
-80106178:	89 04 24             	mov    %eax,(%esp)
-8010617b:	e8 94 b5 ff ff       	call   80101714 <iupdate>
-  iunlockput(ip);
-80106180:	8b 45 f0             	mov    -0x10(%ebp),%eax
-80106183:	89 04 24             	mov    %eax,(%esp)
-80106186:	e8 c9 b9 ff ff       	call   80101b54 <iunlockput>
-
-  end_op();
-8010618b:	e8 ae d3 ff ff       	call   8010353e <end_op>
-
-  return 0;
-80106190:	b8 00 00 00 00       	mov    $0x0,%eax
-80106195:	eb 16                	jmp    801061ad <sys_unlink+0x1d6>
-  // Cannot unlink "." or "..".
-  if(namecmp(name, ".") == 0 || namecmp(name, "..") == 0)
-    goto bad;
-
-  if((ip = dirlookup(dp, name, &off)) == 0)
-    goto bad;
-80106197:	90                   	nop
-  end_op();
-
-  return 0;
-
-bad:
-  iunlockput(dp);
-80106198:	8b 45 f4             	mov    -0xc(%ebp),%eax
-8010619b:	89 04 24             	mov    %eax,(%esp)
-8010619e:	e8 b1 b9 ff ff       	call   80101b54 <iunlockput>
-  end_op();
-801061a3:	e8 96 d3 ff ff       	call   8010353e <end_op>
-  return -1;
-801061a8:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
-}
-801061ad:	c9                   	leave  
-801061ae:	c3                   	ret    
-
-801061af <create>:
-
-static struct inode*
-create(char *path, short type, short major, short minor)
-{
-801061af:	55                   	push   %ebp
-801061b0:	89 e5                	mov    %esp,%ebp
-801061b2:	83 ec 48             	sub    $0x48,%esp
-801061b5:	8b 4d 0c             	mov    0xc(%ebp),%ecx
-801061b8:	8b 55 10             	mov    0x10(%ebp),%edx
-801061bb:	8b 45 14             	mov    0x14(%ebp),%eax
-801061be:	66 89 4d d4          	mov    %cx,-0x2c(%ebp)
-801061c2:	66 89 55 d0          	mov    %dx,-0x30(%ebp)
-801061c6:	66 89 45 cc          	mov    %ax,-0x34(%ebp)
-  uint off;
-  struct inode *ip, *dp;
-  char name[DIRSIZ];
-
-  if((dp = nameiparent(path, name)) == 0)
-801061ca:	8d 45 de             	lea    -0x22(%ebp),%eax
-801061cd:	89 44 24 04          	mov    %eax,0x4(%esp)
-801061d1:	8b 45 08             	mov    0x8(%ebp),%eax
-801061d4:	89 04 24             	mov    %eax,(%esp)
-801061d7:	e8 b8 c2 ff ff       	call   80102494 <nameiparent>
-801061dc:	89 45 f4             	mov    %eax,-0xc(%ebp)
-801061df:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
-801061e3:	75 0a                	jne    801061ef <create+0x40>
-    return 0;
-801061e5:	b8 00 00 00 00       	mov    $0x0,%eax
-801061ea:	e9 7e 01 00 00       	jmp    8010636d <create+0x1be>
-  ilock(dp);
-801061ef:	8b 45 f4             	mov    -0xc(%ebp),%eax
-801061f2:	89 04 24             	mov    %eax,(%esp)
-801061f5:	e8 d6 b6 ff ff       	call   801018d0 <ilock>
-
-  if((ip = dirlookup(dp, name, &off)) != 0){
-801061fa:	8d 45 ec             	lea    -0x14(%ebp),%eax
-801061fd:	89 44 24 08          	mov    %eax,0x8(%esp)
-80106201:	8d 45 de             	lea    -0x22(%ebp),%eax
-80106204:	89 44 24 04          	mov    %eax,0x4(%esp)
-80106208:	8b 45 f4             	mov    -0xc(%ebp),%eax
-8010620b:	89 04 24             	mov    %eax,(%esp)
-8010620e:	e8 d6 be ff ff       	call   801020e9 <dirlookup>
-80106213:	89 45 f0             	mov    %eax,-0x10(%ebp)
-80106216:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
-8010621a:	74 47                	je     80106263 <create+0xb4>
-    iunlockput(dp);
-8010621c:	8b 45 f4             	mov    -0xc(%ebp),%eax
-8010621f:	89 04 24             	mov    %eax,(%esp)
-80106222:	e8 2d b9 ff ff       	call   80101b54 <iunlockput>
-    ilock(ip);
-80106227:	8b 45 f0             	mov    -0x10(%ebp),%eax
-8010622a:	89 04 24             	mov    %eax,(%esp)
-8010622d:	e8 9e b6 ff ff       	call   801018d0 <ilock>
-    if(type == T_FILE && ip->type == T_FILE)
-80106232:	66 83 7d d4 02       	cmpw   $0x2,-0x2c(%ebp)
-80106237:	75 15                	jne    8010624e <create+0x9f>
-80106239:	8b 45 f0             	mov    -0x10(%ebp),%eax
-8010623c:	0f b7 40 10          	movzwl 0x10(%eax),%eax
-80106240:	66 83 f8 02          	cmp    $0x2,%ax
-80106244:	75 08                	jne    8010624e <create+0x9f>
-      return ip;
-80106246:	8b 45 f0             	mov    -0x10(%ebp),%eax
-80106249:	e9 1f 01 00 00       	jmp    8010636d <create+0x1be>
-    iunlockput(ip);
-8010624e:	8b 45 f0             	mov    -0x10(%ebp),%eax
-80106251:	89 04 24             	mov    %eax,(%esp)
-80106254:	e8 fb b8 ff ff       	call   80101b54 <iunlockput>
-    return 0;
-80106259:	b8 00 00 00 00       	mov    $0x0,%eax
-8010625e:	e9 0a 01 00 00       	jmp    8010636d <create+0x1be>
-  }
-
-  if((ip = ialloc(dp->dev, type)) == 0)
-80106263:	0f bf 55 d4          	movswl -0x2c(%ebp),%edx
-80106267:	8b 45 f4             	mov    -0xc(%ebp),%eax
-8010626a:	8b 00                	mov    (%eax),%eax
-8010626c:	89 54 24 04          	mov    %edx,0x4(%esp)
-80106270:	89 04 24             	mov    %eax,(%esp)
-80106273:	e8 bf b3 ff ff       	call   80101637 <ialloc>
-80106278:	89 45 f0             	mov    %eax,-0x10(%ebp)
-8010627b:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
-8010627f:	75 0c                	jne    8010628d <create+0xde>
-    panic("create: ialloc");
-80106281:	c7 04 24 ec 95 10 80 	movl   $0x801095ec,(%esp)
-80106288:	e8 b0 a2 ff ff       	call   8010053d <panic>
-
-  ilock(ip);
-8010628d:	8b 45 f0             	mov    -0x10(%ebp),%eax
-80106290:	89 04 24             	mov    %eax,(%esp)
-80106293:	e8 38 b6 ff ff       	call   801018d0 <ilock>
-  ip->major = major;
-80106298:	8b 45 f0             	mov    -0x10(%ebp),%eax
-8010629b:	0f b7 55 d0          	movzwl -0x30(%ebp),%edx
-8010629f:	66 89 50 12          	mov    %dx,0x12(%eax)
-  ip->minor = minor;
-801062a3:	8b 45 f0             	mov    -0x10(%ebp),%eax
-801062a6:	0f b7 55 cc          	movzwl -0x34(%ebp),%edx
-801062aa:	66 89 50 14          	mov    %dx,0x14(%eax)
-  ip->nlink = 1;
-801062ae:	8b 45 f0             	mov    -0x10(%ebp),%eax
-801062b1:	66 c7 40 16 01 00    	movw   $0x1,0x16(%eax)
-  iupdate(ip);
-801062b7:	8b 45 f0             	mov    -0x10(%ebp),%eax
-801062ba:	89 04 24             	mov    %eax,(%esp)
-801062bd:	e8 52 b4 ff ff       	call   80101714 <iupdate>
-
-  if(type == T_DIR){  // Create . and .. entries.
-801062c2:	66 83 7d d4 01       	cmpw   $0x1,-0x2c(%ebp)
-801062c7:	75 6a                	jne    80106333 <create+0x184>
-    dp->nlink++;  // for ".."
-801062c9:	8b 45 f4             	mov    -0xc(%ebp),%eax
-801062cc:	0f b7 40 16          	movzwl 0x16(%eax),%eax
-801062d0:	8d 50 01             	lea    0x1(%eax),%edx
-801062d3:	8b 45 f4             	mov    -0xc(%ebp),%eax
-801062d6:	66 89 50 16          	mov    %dx,0x16(%eax)
-    iupdate(dp);
-801062da:	8b 45 f4             	mov    -0xc(%ebp),%eax
-801062dd:	89 04 24             	mov    %eax,(%esp)
-801062e0:	e8 2f b4 ff ff       	call   80101714 <iupdate>
-    // No ip->nlink++ for ".": avoid cyclic ref count.
-    if(dirlink(ip, ".", ip->inum) < 0 || dirlink(ip, "..", dp->inum) < 0)
-801062e5:	8b 45 f0             	mov    -0x10(%ebp),%eax
-801062e8:	8b 40 04             	mov    0x4(%eax),%eax
-801062eb:	89 44 24 08          	mov    %eax,0x8(%esp)
-801062ef:	c7 44 24 04 c6 95 10 	movl   $0x801095c6,0x4(%esp)
-801062f6:	80 
-801062f7:	8b 45 f0             	mov    -0x10(%ebp),%eax
-801062fa:	89 04 24             	mov    %eax,(%esp)
-801062fd:	e8 af be ff ff       	call   801021b1 <dirlink>
-80106302:	85 c0                	test   %eax,%eax
-80106304:	78 21                	js     80106327 <create+0x178>
-80106306:	8b 45 f4             	mov    -0xc(%ebp),%eax
-80106309:	8b 40 04             	mov    0x4(%eax),%eax
-8010630c:	89 44 24 08          	mov    %eax,0x8(%esp)
-80106310:	c7 44 24 04 c8 95 10 	movl   $0x801095c8,0x4(%esp)
-80106317:	80 
-80106318:	8b 45 f0             	mov    -0x10(%ebp),%eax
-8010631b:	89 04 24             	mov    %eax,(%esp)
-8010631e:	e8 8e be ff ff       	call   801021b1 <dirlink>
-80106323:	85 c0                	test   %eax,%eax
-80106325:	79 0c                	jns    80106333 <create+0x184>
-      panic("create dots");
-80106327:	c7 04 24 fb 95 10 80 	movl   $0x801095fb,(%esp)
-8010632e:	e8 0a a2 ff ff       	call   8010053d <panic>
-  }
-
-  if(dirlink(dp, name, ip->inum) < 0)
-80106333:	8b 45 f0             	mov    -0x10(%ebp),%eax
-80106336:	8b 40 04             	mov    0x4(%eax),%eax
-80106339:	89 44 24 08          	mov    %eax,0x8(%esp)
-8010633d:	8d 45 de             	lea    -0x22(%ebp),%eax
-80106340:	89 44 24 04          	mov    %eax,0x4(%esp)
-80106344:	8b 45 f4             	mov    -0xc(%ebp),%eax
-80106347:	89 04 24             	mov    %eax,(%esp)
-8010634a:	e8 62 be ff ff       	call   801021b1 <dirlink>
-8010634f:	85 c0                	test   %eax,%eax
-80106351:	79 0c                	jns    8010635f <create+0x1b0>
-    panic("create: dirlink");
-80106353:	c7 04 24 07 96 10 80 	movl   $0x80109607,(%esp)
-8010635a:	e8 de a1 ff ff       	call   8010053d <panic>
-
-  iunlockput(dp);
-8010635f:	8b 45 f4             	mov    -0xc(%ebp),%eax
-80106362:	89 04 24             	mov    %eax,(%esp)
-80106365:	e8 ea b7 ff ff       	call   80101b54 <iunlockput>
-
-  return ip;
-8010636a:	8b 45 f0             	mov    -0x10(%ebp),%eax
-}
-8010636d:	c9                   	leave  
-8010636e:	c3                   	ret    
-
-8010636f <sys_open>:
-
-int
-sys_open(void)
-{
-8010636f:	55                   	push   %ebp
-80106370:	89 e5                	mov    %esp,%ebp
-80106372:	83 ec 38             	sub    $0x38,%esp
-  char *path;
-  int fd, omode;
-  struct file *f;
-  struct inode *ip;
-
-  if(argstr(0, &path) < 0 || argint(1, &omode) < 0)
-80106375:	8d 45 e8             	lea    -0x18(%ebp),%eax
-80106378:	89 44 24 04          	mov    %eax,0x4(%esp)
-8010637c:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
-80106383:	e8 da f6 ff ff       	call   80105a62 <argstr>
-80106388:	85 c0                	test   %eax,%eax
-8010638a:	78 17                	js     801063a3 <sys_open+0x34>
-8010638c:	8d 45 e4             	lea    -0x1c(%ebp),%eax
-8010638f:	89 44 24 04          	mov    %eax,0x4(%esp)
-80106393:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
-8010639a:	e8 33 f6 ff ff       	call   801059d2 <argint>
-8010639f:	85 c0                	test   %eax,%eax
-801063a1:	79 0a                	jns    801063ad <sys_open+0x3e>
-    return -1;
-801063a3:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
-801063a8:	e9 5a 01 00 00       	jmp    80106507 <sys_open+0x198>
-
-  begin_op();
-801063ad:	e8 0b d1 ff ff       	call   801034bd <begin_op>
-
-  if(omode & O_CREATE){
-801063b2:	8b 45 e4             	mov    -0x1c(%ebp),%eax
-801063b5:	25 00 02 00 00       	and    $0x200,%eax
-801063ba:	85 c0                	test   %eax,%eax
-801063bc:	74 3b                	je     801063f9 <sys_open+0x8a>
-    ip = create(path, T_FILE, 0, 0);
-801063be:	8b 45 e8             	mov    -0x18(%ebp),%eax
-801063c1:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
-801063c8:	00 
-801063c9:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
-801063d0:	00 
-801063d1:	c7 44 24 04 02 00 00 	movl   $0x2,0x4(%esp)
-801063d8:	00 
-801063d9:	89 04 24             	mov    %eax,(%esp)
-801063dc:	e8 ce fd ff ff       	call   801061af <create>
-801063e1:	89 45 f4             	mov    %eax,-0xc(%ebp)
-    if(ip == 0){
-801063e4:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
-801063e8:	75 6b                	jne    80106455 <sys_open+0xe6>
-      end_op();
-801063ea:	e8 4f d1 ff ff       	call   8010353e <end_op>
-      return -1;
-801063ef:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
-801063f4:	e9 0e 01 00 00       	jmp    80106507 <sys_open+0x198>
-    }
-  } else {
-    if((ip = namei(path)) == 0){
-801063f9:	8b 45 e8             	mov    -0x18(%ebp),%eax
-801063fc:	89 04 24             	mov    %eax,(%esp)
-801063ff:	e8 6e c0 ff ff       	call   80102472 <namei>
-80106404:	89 45 f4             	mov    %eax,-0xc(%ebp)
-80106407:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
-8010640b:	75 0f                	jne    8010641c <sys_open+0xad>
-      end_op();
-8010640d:	e8 2c d1 ff ff       	call   8010353e <end_op>
-      return -1;
-80106412:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
-80106417:	e9 eb 00 00 00       	jmp    80106507 <sys_open+0x198>
-    }
-    ilock(ip);
-8010641c:	8b 45 f4             	mov    -0xc(%ebp),%eax
-8010641f:	89 04 24             	mov    %eax,(%esp)
-80106422:	e8 a9 b4 ff ff       	call   801018d0 <ilock>
-    if(ip->type == T_DIR && omode != O_RDONLY){
-80106427:	8b 45 f4             	mov    -0xc(%ebp),%eax
-8010642a:	0f b7 40 10          	movzwl 0x10(%eax),%eax
-8010642e:	66 83 f8 01          	cmp    $0x1,%ax
-80106432:	75 21                	jne    80106455 <sys_open+0xe6>
-80106434:	8b 45 e4             	mov    -0x1c(%ebp),%eax
-80106437:	85 c0                	test   %eax,%eax
-80106439:	74 1a                	je     80106455 <sys_open+0xe6>
-      iunlockput(ip);
-8010643b:	8b 45 f4             	mov    -0xc(%ebp),%eax
-8010643e:	89 04 24             	mov    %eax,(%esp)
-80106441:	e8 0e b7 ff ff       	call   80101b54 <iunlockput>
-      end_op();
-80106446:	e8 f3 d0 ff ff       	call   8010353e <end_op>
-      return -1;
-8010644b:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
-80106450:	e9 b2 00 00 00       	jmp    80106507 <sys_open+0x198>
-    }
-  }
-
-  if((f = filealloc()) == 0 || (fd = fdalloc(f)) < 0){
-80106455:	e8 2a ab ff ff       	call   80100f84 <filealloc>
-8010645a:	89 45 f0             	mov    %eax,-0x10(%ebp)
-8010645d:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
-80106461:	74 14                	je     80106477 <sys_open+0x108>
-80106463:	8b 45 f0             	mov    -0x10(%ebp),%eax
-80106466:	89 04 24             	mov    %eax,(%esp)
-80106469:	e8 2f f7 ff ff       	call   80105b9d <fdalloc>
-8010646e:	89 45 ec             	mov    %eax,-0x14(%ebp)
-80106471:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
-80106475:	79 28                	jns    8010649f <sys_open+0x130>
-    if(f)
-80106477:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
-8010647b:	74 0b                	je     80106488 <sys_open+0x119>
-      fileclose(f);
-8010647d:	8b 45 f0             	mov    -0x10(%ebp),%eax
-80106480:	89 04 24             	mov    %eax,(%esp)
-80106483:	e8 a4 ab ff ff       	call   8010102c <fileclose>
-    iunlockput(ip);
-80106488:	8b 45 f4             	mov    -0xc(%ebp),%eax
-8010648b:	89 04 24             	mov    %eax,(%esp)
-8010648e:	e8 c1 b6 ff ff       	call   80101b54 <iunlockput>
-    end_op();
-80106493:	e8 a6 d0 ff ff       	call   8010353e <end_op>
-    return -1;
-80106498:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
-8010649d:	eb 68                	jmp    80106507 <sys_open+0x198>
-  }
-  iunlock(ip);
-8010649f:	8b 45 f4             	mov    -0xc(%ebp),%eax
-801064a2:	89 04 24             	mov    %eax,(%esp)
-801064a5:	e8 74 b5 ff ff       	call   80101a1e <iunlock>
-  end_op();
-801064aa:	e8 8f d0 ff ff       	call   8010353e <end_op>
-
-  f->type = FD_INODE;
-801064af:	8b 45 f0             	mov    -0x10(%ebp),%eax
-801064b2:	c7 00 02 00 00 00    	movl   $0x2,(%eax)
-  f->ip = ip;
-801064b8:	8b 45 f0             	mov    -0x10(%ebp),%eax
-801064bb:	8b 55 f4             	mov    -0xc(%ebp),%edx
-801064be:	89 50 10             	mov    %edx,0x10(%eax)
-  f->off = 0;
-801064c1:	8b 45 f0             	mov    -0x10(%ebp),%eax
-801064c4:	c7 40 14 00 00 00 00 	movl   $0x0,0x14(%eax)
-  f->readable = !(omode & O_WRONLY);
-801064cb:	8b 45 e4             	mov    -0x1c(%ebp),%eax
-801064ce:	83 e0 01             	and    $0x1,%eax
-801064d1:	85 c0                	test   %eax,%eax
-801064d3:	0f 94 c2             	sete   %dl
-801064d6:	8b 45 f0             	mov    -0x10(%ebp),%eax
-801064d9:	88 50 08             	mov    %dl,0x8(%eax)
-  f->writable = (omode & O_WRONLY) || (omode & O_RDWR);
-801064dc:	8b 45 e4             	mov    -0x1c(%ebp),%eax
-801064df:	83 e0 01             	and    $0x1,%eax
-801064e2:	84 c0                	test   %al,%al
-801064e4:	75 0a                	jne    801064f0 <sys_open+0x181>
-801064e6:	8b 45 e4             	mov    -0x1c(%ebp),%eax
-801064e9:	83 e0 02             	and    $0x2,%eax
-801064ec:	85 c0                	test   %eax,%eax
-801064ee:	74 07                	je     801064f7 <sys_open+0x188>
-801064f0:	b8 01 00 00 00       	mov    $0x1,%eax
-801064f5:	eb 05                	jmp    801064fc <sys_open+0x18d>
-801064f7:	b8 00 00 00 00       	mov    $0x0,%eax
-801064fc:	89 c2                	mov    %eax,%edx
-801064fe:	8b 45 f0             	mov    -0x10(%ebp),%eax
-80106501:	88 50 09             	mov    %dl,0x9(%eax)
-  return fd;
-80106504:	8b 45 ec             	mov    -0x14(%ebp),%eax
-}
-80106507:	c9                   	leave  
-80106508:	c3                   	ret    
-
-80106509 <sys_mkdir>:
-
-int
-sys_mkdir(void)
-{
-80106509:	55                   	push   %ebp
-8010650a:	89 e5                	mov    %esp,%ebp
-8010650c:	83 ec 28             	sub    $0x28,%esp
-  char *path;
-  struct inode *ip;
-
-  begin_op();
-8010650f:	e8 a9 cf ff ff       	call   801034bd <begin_op>
-  if(argstr(0, &path) < 0 || (ip = create(path, T_DIR, 0, 0)) == 0){
-80106514:	8d 45 f0             	lea    -0x10(%ebp),%eax
-80106517:	89 44 24 04          	mov    %eax,0x4(%esp)
-8010651b:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
-80106522:	e8 3b f5 ff ff       	call   80105a62 <argstr>
-80106527:	85 c0                	test   %eax,%eax
-80106529:	78 2c                	js     80106557 <sys_mkdir+0x4e>
-8010652b:	8b 45 f0             	mov    -0x10(%ebp),%eax
-8010652e:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
-80106535:	00 
-80106536:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
-8010653d:	00 
-8010653e:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
-80106545:	00 
-80106546:	89 04 24             	mov    %eax,(%esp)
-80106549:	e8 61 fc ff ff       	call   801061af <create>
-8010654e:	89 45 f4             	mov    %eax,-0xc(%ebp)
-80106551:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
-80106555:	75 0c                	jne    80106563 <sys_mkdir+0x5a>
-    end_op();
-80106557:	e8 e2 cf ff ff       	call   8010353e <end_op>
-    return -1;
-8010655c:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
-80106561:	eb 15                	jmp    80106578 <sys_mkdir+0x6f>
-  }
-  iunlockput(ip);
-80106563:	8b 45 f4             	mov    -0xc(%ebp),%eax
-80106566:	89 04 24             	mov    %eax,(%esp)
-80106569:	e8 e6 b5 ff ff       	call   80101b54 <iunlockput>
-  end_op();
-8010656e:	e8 cb cf ff ff       	call   8010353e <end_op>
-  return 0;
-80106573:	b8 00 00 00 00       	mov    $0x0,%eax
-}
-80106578:	c9                   	leave  
-80106579:	c3                   	ret    
-
-8010657a <sys_mknod>:
-
-int
-sys_mknod(void)
-{
-8010657a:	55                   	push   %ebp
-8010657b:	89 e5                	mov    %esp,%ebp
-8010657d:	83 ec 38             	sub    $0x38,%esp
-  struct inode *ip;
-  char *path;
-  int len;
-  int major, minor;
-  
-  begin_op();
-80106580:	e8 38 cf ff ff       	call   801034bd <begin_op>
-  if((len=argstr(0, &path)) < 0 ||
-80106585:	8d 45 ec             	lea    -0x14(%ebp),%eax
-80106588:	89 44 24 04          	mov    %eax,0x4(%esp)
-8010658c:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
-80106593:	e8 ca f4 ff ff       	call   80105a62 <argstr>
-80106598:	89 45 f4             	mov    %eax,-0xc(%ebp)
-8010659b:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
-8010659f:	78 5e                	js     801065ff <sys_mknod+0x85>
-     argint(1, &major) < 0 ||
-801065a1:	8d 45 e8             	lea    -0x18(%ebp),%eax
-801065a4:	89 44 24 04          	mov    %eax,0x4(%esp)
-801065a8:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
-801065af:	e8 1e f4 ff ff       	call   801059d2 <argint>
-  char *path;
-  int len;
-  int major, minor;
-  
-  begin_op();
-  if((len=argstr(0, &path)) < 0 ||
-801065b4:	85 c0                	test   %eax,%eax
-801065b6:	78 47                	js     801065ff <sys_mknod+0x85>
-     argint(1, &major) < 0 ||
-     argint(2, &minor) < 0 ||
-801065b8:	8d 45 e4             	lea    -0x1c(%ebp),%eax
-801065bb:	89 44 24 04          	mov    %eax,0x4(%esp)
-801065bf:	c7 04 24 02 00 00 00 	movl   $0x2,(%esp)
-801065c6:	e8 07 f4 ff ff       	call   801059d2 <argint>
-  int len;
-  int major, minor;
-  
-  begin_op();
-  if((len=argstr(0, &path)) < 0 ||
-     argint(1, &major) < 0 ||
-801065cb:	85 c0                	test   %eax,%eax
-801065cd:	78 30                	js     801065ff <sys_mknod+0x85>
-     argint(2, &minor) < 0 ||
-     (ip = create(path, T_DEV, major, minor)) == 0){
-801065cf:	8b 45 e4             	mov    -0x1c(%ebp),%eax
-801065d2:	0f bf c8             	movswl %ax,%ecx
-801065d5:	8b 45 e8             	mov    -0x18(%ebp),%eax
-801065d8:	0f bf d0             	movswl %ax,%edx
-801065db:	8b 45 ec             	mov    -0x14(%ebp),%eax
-  int major, minor;
-  
-  begin_op();
-  if((len=argstr(0, &path)) < 0 ||
-     argint(1, &major) < 0 ||
-     argint(2, &minor) < 0 ||
-801065de:	89 4c 24 0c          	mov    %ecx,0xc(%esp)
-801065e2:	89 54 24 08          	mov    %edx,0x8(%esp)
-801065e6:	c7 44 24 04 03 00 00 	movl   $0x3,0x4(%esp)
-801065ed:	00 
-801065ee:	89 04 24             	mov    %eax,(%esp)
-801065f1:	e8 b9 fb ff ff       	call   801061af <create>
-801065f6:	89 45 f0             	mov    %eax,-0x10(%ebp)
-801065f9:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
-801065fd:	75 0c                	jne    8010660b <sys_mknod+0x91>
-     (ip = create(path, T_DEV, major, minor)) == 0){
-    end_op();
-801065ff:	e8 3a cf ff ff       	call   8010353e <end_op>
-    return -1;
-80106604:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
-80106609:	eb 15                	jmp    80106620 <sys_mknod+0xa6>
-  }
-  iunlockput(ip);
-8010660b:	8b 45 f0             	mov    -0x10(%ebp),%eax
-8010660e:	89 04 24             	mov    %eax,(%esp)
-80106611:	e8 3e b5 ff ff       	call   80101b54 <iunlockput>
-  end_op();
-80106616:	e8 23 cf ff ff       	call   8010353e <end_op>
-  return 0;
-8010661b:	b8 00 00 00 00       	mov    $0x0,%eax
-}
-80106620:	c9                   	leave  
-80106621:	c3                   	ret    
-
-80106622 <sys_chdir>:
-
-int
-sys_chdir(void)
-{
-80106622:	55                   	push   %ebp
-80106623:	89 e5                	mov    %esp,%ebp
-80106625:	83 ec 28             	sub    $0x28,%esp
-  char *path;
-  struct inode *ip;
-
-  begin_op();
-80106628:	e8 90 ce ff ff       	call   801034bd <begin_op>
-  if(argstr(0, &path) < 0 || (ip = namei(path)) == 0){
-8010662d:	8d 45 f0             	lea    -0x10(%ebp),%eax
-80106630:	89 44 24 04          	mov    %eax,0x4(%esp)
-80106634:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
-8010663b:	e8 22 f4 ff ff       	call   80105a62 <argstr>
-80106640:	85 c0                	test   %eax,%eax
-80106642:	78 14                	js     80106658 <sys_chdir+0x36>
-80106644:	8b 45 f0             	mov    -0x10(%ebp),%eax
-80106647:	89 04 24             	mov    %eax,(%esp)
-8010664a:	e8 23 be ff ff       	call   80102472 <namei>
-8010664f:	89 45 f4             	mov    %eax,-0xc(%ebp)
-80106652:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
-80106656:	75 0c                	jne    80106664 <sys_chdir+0x42>
-    end_op();
-80106658:	e8 e1 ce ff ff       	call   8010353e <end_op>
-    return -1;
-8010665d:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
-80106662:	eb 61                	jmp    801066c5 <sys_chdir+0xa3>
-  }
-  ilock(ip);
-80106664:	8b 45 f4             	mov    -0xc(%ebp),%eax
-80106667:	89 04 24             	mov    %eax,(%esp)
-8010666a:	e8 61 b2 ff ff       	call   801018d0 <ilock>
-  if(ip->type != T_DIR){
-8010666f:	8b 45 f4             	mov    -0xc(%ebp),%eax
-80106672:	0f b7 40 10          	movzwl 0x10(%eax),%eax
-80106676:	66 83 f8 01          	cmp    $0x1,%ax
-8010667a:	74 17                	je     80106693 <sys_chdir+0x71>
-    iunlockput(ip);
-8010667c:	8b 45 f4             	mov    -0xc(%ebp),%eax
-8010667f:	89 04 24             	mov    %eax,(%esp)
-80106682:	e8 cd b4 ff ff       	call   80101b54 <iunlockput>
-    end_op();
-80106687:	e8 b2 ce ff ff       	call   8010353e <end_op>
-    return -1;
-8010668c:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
-80106691:	eb 32                	jmp    801066c5 <sys_chdir+0xa3>
-  }
-  iunlock(ip);
-80106693:	8b 45 f4             	mov    -0xc(%ebp),%eax
-80106696:	89 04 24             	mov    %eax,(%esp)
-80106699:	e8 80 b3 ff ff       	call   80101a1e <iunlock>
-  iput(proc->cwd);
-8010669e:	65 a1 04 00 00 00    	mov    %gs:0x4,%eax
-801066a4:	8b 40 6c             	mov    0x6c(%eax),%eax
-801066a7:	89 04 24             	mov    %eax,(%esp)
-801066aa:	e8 d4 b3 ff ff       	call   80101a83 <iput>
-  end_op();
-801066af:	e8 8a ce ff ff       	call   8010353e <end_op>
-  proc->cwd = ip;
-801066b4:	65 a1 04 00 00 00    	mov    %gs:0x4,%eax
-801066ba:	8b 55 f4             	mov    -0xc(%ebp),%edx
-801066bd:	89 50 6c             	mov    %edx,0x6c(%eax)
-  return 0;
-801066c0:	b8 00 00 00 00       	mov    $0x0,%eax
-}
-801066c5:	c9                   	leave  
-801066c6:	c3                   	ret    
-
-801066c7 <sys_exec>:
-
-int
-sys_exec(void)
-{
-801066c7:	55                   	push   %ebp
-801066c8:	89 e5                	mov    %esp,%ebp
-801066ca:	81 ec a8 00 00 00    	sub    $0xa8,%esp
-  char *path, *argv[MAXARG];
-  int i;
-  uint uargv, uarg;
-
-  if(argstr(0, &path) < 0 || argint(1, (int*)&uargv) < 0){
-801066d0:	8d 45 f0             	lea    -0x10(%ebp),%eax
-801066d3:	89 44 24 04          	mov    %eax,0x4(%esp)
-801066d7:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
-801066de:	e8 7f f3 ff ff       	call   80105a62 <argstr>
-801066e3:	85 c0                	test   %eax,%eax
-801066e5:	78 1a                	js     80106701 <sys_exec+0x3a>
-801066e7:	8d 85 6c ff ff ff    	lea    -0x94(%ebp),%eax
-801066ed:	89 44 24 04          	mov    %eax,0x4(%esp)
-801066f1:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
-801066f8:	e8 d5 f2 ff ff       	call   801059d2 <argint>
-801066fd:	85 c0                	test   %eax,%eax
-801066ff:	79 0a                	jns    8010670b <sys_exec+0x44>
-    return -1;
-80106701:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
-80106706:	e9 cc 00 00 00       	jmp    801067d7 <sys_exec+0x110>
-  }
-  memset(argv, 0, sizeof(argv));
-8010670b:	c7 44 24 08 80 00 00 	movl   $0x80,0x8(%esp)
-80106712:	00 
-80106713:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
-8010671a:	00 
-8010671b:	8d 85 70 ff ff ff    	lea    -0x90(%ebp),%eax
-80106721:	89 04 24             	mov    %eax,(%esp)
-80106724:	e8 4d ef ff ff       	call   80105676 <memset>
-  for(i=0;; i++){
-80106729:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
-    if(i >= NELEM(argv))
-80106730:	8b 45 f4             	mov    -0xc(%ebp),%eax
-80106733:	83 f8 1f             	cmp    $0x1f,%eax
-80106736:	76 0a                	jbe    80106742 <sys_exec+0x7b>
-      return -1;
-80106738:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
-8010673d:	e9 95 00 00 00       	jmp    801067d7 <sys_exec+0x110>
-    if(fetchint(uargv+4*i, (int*)&uarg) < 0)
-80106742:	8b 45 f4             	mov    -0xc(%ebp),%eax
-80106745:	c1 e0 02             	shl    $0x2,%eax
-80106748:	89 c2                	mov    %eax,%edx
-8010674a:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
-80106750:	01 c2                	add    %eax,%edx
-80106752:	8d 85 68 ff ff ff    	lea    -0x98(%ebp),%eax
-80106758:	89 44 24 04          	mov    %eax,0x4(%esp)
-8010675c:	89 14 24             	mov    %edx,(%esp)
-8010675f:	e8 d0 f1 ff ff       	call   80105934 <fetchint>
-80106764:	85 c0                	test   %eax,%eax
-80106766:	79 07                	jns    8010676f <sys_exec+0xa8>
-      return -1;
-80106768:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
-8010676d:	eb 68                	jmp    801067d7 <sys_exec+0x110>
-    if(uarg == 0){
-8010676f:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
-80106775:	85 c0                	test   %eax,%eax
-80106777:	75 26                	jne    8010679f <sys_exec+0xd8>
-      argv[i] = 0;
-80106779:	8b 45 f4             	mov    -0xc(%ebp),%eax
-8010677c:	c7 84 85 70 ff ff ff 	movl   $0x0,-0x90(%ebp,%eax,4)
-80106783:	00 00 00 00 
-      break;
-80106787:	90                   	nop
-    }
-    if(fetchstr(uarg, &argv[i]) < 0)
-      return -1;
-  }
-  return exec(path, argv);
-80106788:	8b 45 f0             	mov    -0x10(%ebp),%eax
-8010678b:	8d 95 70 ff ff ff    	lea    -0x90(%ebp),%edx
-80106791:	89 54 24 04          	mov    %edx,0x4(%esp)
-80106795:	89 04 24             	mov    %eax,(%esp)
-80106798:	e8 5f a3 ff ff       	call   80100afc <exec>
-8010679d:	eb 38                	jmp    801067d7 <sys_exec+0x110>
-      return -1;
-    if(uarg == 0){
-      argv[i] = 0;
-      break;
-    }
-    if(fetchstr(uarg, &argv[i]) < 0)
-8010679f:	8b 45 f4             	mov    -0xc(%ebp),%eax
-801067a2:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
-801067a9:	8d 85 70 ff ff ff    	lea    -0x90(%ebp),%eax
-801067af:	01 c2                	add    %eax,%edx
-801067b1:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
-801067b7:	89 54 24 04          	mov    %edx,0x4(%esp)
-801067bb:	89 04 24             	mov    %eax,(%esp)
-801067be:	e8 ab f1 ff ff       	call   8010596e <fetchstr>
-801067c3:	85 c0                	test   %eax,%eax
-801067c5:	79 07                	jns    801067ce <sys_exec+0x107>
-      return -1;
-801067c7:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
-801067cc:	eb 09                	jmp    801067d7 <sys_exec+0x110>
-
-  if(argstr(0, &path) < 0 || argint(1, (int*)&uargv) < 0){
-    return -1;
-  }
-  memset(argv, 0, sizeof(argv));
-  for(i=0;; i++){
-801067ce:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
-      argv[i] = 0;
-      break;
-    }
-    if(fetchstr(uarg, &argv[i]) < 0)
-      return -1;
-  }
-801067d2:	e9 59 ff ff ff       	jmp    80106730 <sys_exec+0x69>
-  return exec(path, argv);
-}
-801067d7:	c9                   	leave  
-801067d8:	c3                   	ret    
-
-801067d9 <sys_pipe>:
-
-int
-sys_pipe(void)
-{
-801067d9:	55                   	push   %ebp
-801067da:	89 e5                	mov    %esp,%ebp
-801067dc:	83 ec 38             	sub    $0x38,%esp
-  int *fd;
-  struct file *rf, *wf;
-  int fd0, fd1;
-
-  if(argptr(0, (void*)&fd, 2*sizeof(fd[0])) < 0)
-801067df:	c7 44 24 08 08 00 00 	movl   $0x8,0x8(%esp)
-801067e6:	00 
-801067e7:	8d 45 ec             	lea    -0x14(%ebp),%eax
-801067ea:	89 44 24 04          	mov    %eax,0x4(%esp)
-801067ee:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
-801067f5:	e8 06 f2 ff ff       	call   80105a00 <argptr>
-801067fa:	85 c0                	test   %eax,%eax
-801067fc:	79 0a                	jns    80106808 <sys_pipe+0x2f>
-    return -1;
-801067fe:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
-80106803:	e9 9b 00 00 00       	jmp    801068a3 <sys_pipe+0xca>
-  if(pipealloc(&rf, &wf) < 0)
-80106808:	8d 45 e4             	lea    -0x1c(%ebp),%eax
-8010680b:	89 44 24 04          	mov    %eax,0x4(%esp)
-8010680f:	8d 45 e8             	lea    -0x18(%ebp),%eax
-80106812:	89 04 24             	mov    %eax,(%esp)
-80106815:	e8 d2 d7 ff ff       	call   80103fec <pipealloc>
-8010681a:	85 c0                	test   %eax,%eax
-8010681c:	79 07                	jns    80106825 <sys_pipe+0x4c>
-    return -1;
-8010681e:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
-80106823:	eb 7e                	jmp    801068a3 <sys_pipe+0xca>
-  fd0 = -1;
-80106825:	c7 45 f4 ff ff ff ff 	movl   $0xffffffff,-0xc(%ebp)
-  if((fd0 = fdalloc(rf)) < 0 || (fd1 = fdalloc(wf)) < 0){
-8010682c:	8b 45 e8             	mov    -0x18(%ebp),%eax
-8010682f:	89 04 24             	mov    %eax,(%esp)
-80106832:	e8 66 f3 ff ff       	call   80105b9d <fdalloc>
-80106837:	89 45 f4             	mov    %eax,-0xc(%ebp)
-8010683a:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
-8010683e:	78 14                	js     80106854 <sys_pipe+0x7b>
-80106840:	8b 45 e4             	mov    -0x1c(%ebp),%eax
-80106843:	89 04 24             	mov    %eax,(%esp)
-80106846:	e8 52 f3 ff ff       	call   80105b9d <fdalloc>
-8010684b:	89 45 f0             	mov    %eax,-0x10(%ebp)
-8010684e:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
-80106852:	79 37                	jns    8010688b <sys_pipe+0xb2>
-    if(fd0 >= 0)
-80106854:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
-80106858:	78 14                	js     8010686e <sys_pipe+0x95>
-      proc->ofile[fd0] = 0;
-8010685a:	65 a1 04 00 00 00    	mov    %gs:0x4,%eax
-80106860:	8b 55 f4             	mov    -0xc(%ebp),%edx
-80106863:	83 c2 08             	add    $0x8,%edx
-80106866:	c7 44 90 0c 00 00 00 	movl   $0x0,0xc(%eax,%edx,4)
-8010686d:	00 
-    fileclose(rf);
-8010686e:	8b 45 e8             	mov    -0x18(%ebp),%eax
-80106871:	89 04 24             	mov    %eax,(%esp)
-80106874:	e8 b3 a7 ff ff       	call   8010102c <fileclose>
-    fileclose(wf);
-80106879:	8b 45 e4             	mov    -0x1c(%ebp),%eax
-8010687c:	89 04 24             	mov    %eax,(%esp)
-8010687f:	e8 a8 a7 ff ff       	call   8010102c <fileclose>
-    return -1;
-80106884:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
-80106889:	eb 18                	jmp    801068a3 <sys_pipe+0xca>
-  }
-  fd[0] = fd0;
-8010688b:	8b 45 ec             	mov    -0x14(%ebp),%eax
-8010688e:	8b 55 f4             	mov    -0xc(%ebp),%edx
-80106891:	89 10                	mov    %edx,(%eax)
-  fd[1] = fd1;
-80106893:	8b 45 ec             	mov    -0x14(%ebp),%eax
-80106896:	8d 50 04             	lea    0x4(%eax),%edx
-80106899:	8b 45 f0             	mov    -0x10(%ebp),%eax
-8010689c:	89 02                	mov    %eax,(%edx)
-  return 0;
-8010689e:	b8 00 00 00 00       	mov    $0x0,%eax
-}
-801068a3:	c9                   	leave  
-801068a4:	c3                   	ret    
-801068a5:	00 00                	add    %al,(%eax)
-	...
-
-801068a8 <sys_fork>:
-#include "mmu.h"
-#include "proc.h"
-
-int
-sys_fork(void)
-{
-801068a8:	55                   	push   %ebp
-801068a9:	89 e5                	mov    %esp,%ebp
-801068ab:	83 ec 08             	sub    $0x8,%esp
-  return fork();
-801068ae:	e8 0c de ff ff       	call   801046bf <fork>
-}
-801068b3:	c9                   	leave  
-801068b4:	c3                   	ret    
-
-801068b5 <sys_exit>:
-
-int
-sys_exit(void)
-{
-801068b5:	55                   	push   %ebp
-801068b6:	89 e5                	mov    %esp,%ebp
-801068b8:	83 ec 28             	sub    $0x28,%esp
-	int status;
-	if(argint(0, &status) < 0)
-801068bb:	8d 45 f4             	lea    -0xc(%ebp),%eax
-801068be:	89 44 24 04          	mov    %eax,0x4(%esp)
-801068c2:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
-801068c9:	e8 04 f1 ff ff       	call   801059d2 <argint>
-801068ce:	85 c0                	test   %eax,%eax
-801068d0:	79 07                	jns    801068d9 <sys_exit+0x24>
-	    return -1;
-801068d2:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
-801068d7:	eb 10                	jmp    801068e9 <sys_exit+0x34>
-
-	exit(status);
-801068d9:	8b 45 f4             	mov    -0xc(%ebp),%eax
-801068dc:	89 04 24             	mov    %eax,(%esp)
-801068df:	e8 81 df ff ff       	call   80104865 <exit>
-	return 0;  // not reached
-801068e4:	b8 00 00 00 00       	mov    $0x0,%eax
-}
-801068e9:	c9                   	leave  
-801068ea:	c3                   	ret    
-
-801068eb <sys_wait>:
-
-int
-sys_wait(void)
-{
-801068eb:	55                   	push   %ebp
-801068ec:	89 e5                	mov    %esp,%ebp
-801068ee:	83 ec 28             	sub    $0x28,%esp
-	int* status;
-	//take argument from environment
-	if(argptr(0,(char**)&status, sizeof(int)) <0){ //error check
-801068f1:	c7 44 24 08 04 00 00 	movl   $0x4,0x8(%esp)
-801068f8:	00 
-801068f9:	8d 45 f4             	lea    -0xc(%ebp),%eax
-801068fc:	89 44 24 04          	mov    %eax,0x4(%esp)
-80106900:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
-80106907:	e8 f4 f0 ff ff       	call   80105a00 <argptr>
-8010690c:	85 c0                	test   %eax,%eax
-8010690e:	79 07                	jns    80106917 <sys_wait+0x2c>
-		return -1;
-80106910:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
-80106915:	eb 0b                	jmp    80106922 <sys_wait+0x37>
-	}
-	return wait(status);
-80106917:	8b 45 f4             	mov    -0xc(%ebp),%eax
-8010691a:	89 04 24             	mov    %eax,(%esp)
-8010691d:	e8 4d e1 ff ff       	call   80104a6f <wait>
-}
-80106922:	c9                   	leave  
-80106923:	c3                   	ret    
-
-80106924 <sys_waitpid>:
-
-int
-sys_waitpid(void)
-{
-80106924:	55                   	push   %ebp
-80106925:	89 e5                	mov    %esp,%ebp
-80106927:	83 ec 28             	sub    $0x28,%esp
-	int pid;
-	int *status;
-	int options;
-
-	if (	(argint(0, &pid) < 0) ||
-8010692a:	8d 45 f4             	lea    -0xc(%ebp),%eax
-8010692d:	89 44 24 04          	mov    %eax,0x4(%esp)
-80106931:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
-80106938:	e8 95 f0 ff ff       	call   801059d2 <argint>
-8010693d:	85 c0                	test   %eax,%eax
-8010693f:	78 36                	js     80106977 <sys_waitpid+0x53>
-			(argptr(1,(char**)&status, sizeof(int)) < 0) ||
-80106941:	c7 44 24 08 04 00 00 	movl   $0x4,0x8(%esp)
-80106948:	00 
-80106949:	8d 45 f0             	lea    -0x10(%ebp),%eax
-8010694c:	89 44 24 04          	mov    %eax,0x4(%esp)
-80106950:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
-80106957:	e8 a4 f0 ff ff       	call   80105a00 <argptr>
-{
-	int pid;
-	int *status;
-	int options;
-
-	if (	(argint(0, &pid) < 0) ||
-8010695c:	85 c0                	test   %eax,%eax
-8010695e:	78 17                	js     80106977 <sys_waitpid+0x53>
-			(argptr(1,(char**)&status, sizeof(int)) < 0) ||
-			(argint(2, &options) < 0) ){
-80106960:	8d 45 ec             	lea    -0x14(%ebp),%eax
-80106963:	89 44 24 04          	mov    %eax,0x4(%esp)
-80106967:	c7 04 24 02 00 00 00 	movl   $0x2,(%esp)
-8010696e:	e8 5f f0 ff ff       	call   801059d2 <argint>
-	int pid;
-	int *status;
-	int options;
-
-	if (	(argint(0, &pid) < 0) ||
-			(argptr(1,(char**)&status, sizeof(int)) < 0) ||
-80106973:	85 c0                	test   %eax,%eax
-80106975:	79 07                	jns    8010697e <sys_waitpid+0x5a>
-			(argint(2, &options) < 0) ){
-
-		return -1;
-80106977:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
-8010697c:	eb 19                	jmp    80106997 <sys_waitpid+0x73>
-	}
-
-	return waitpid(pid, status, options);
-8010697e:	8b 4d ec             	mov    -0x14(%ebp),%ecx
-80106981:	8b 55 f0             	mov    -0x10(%ebp),%edx
-80106984:	8b 45 f4             	mov    -0xc(%ebp),%eax
-80106987:	89 4c 24 08          	mov    %ecx,0x8(%esp)
-8010698b:	89 54 24 04          	mov    %edx,0x4(%esp)
-8010698f:	89 04 24             	mov    %eax,(%esp)
-80106992:	e8 20 e2 ff ff       	call   80104bb7 <waitpid>
-}
-80106997:	c9                   	leave  
-80106998:	c3                   	ret    
-
-80106999 <sys_wait_stat>:
-
-int
-sys_wait_stat(void)
-{
-80106999:	55                   	push   %ebp
-8010699a:	89 e5                	mov    %esp,%ebp
-8010699c:	53                   	push   %ebx
-8010699d:	83 ec 24             	sub    $0x24,%esp
-	int *wtime, *rtime, *iotime, *status;
-
-	if (	(argptr(0,(char**)&wtime, sizeof(int)) < 0) ||
-801069a0:	c7 44 24 08 04 00 00 	movl   $0x4,0x8(%esp)
-801069a7:	00 
-801069a8:	8d 45 f4             	lea    -0xc(%ebp),%eax
-801069ab:	89 44 24 04          	mov    %eax,0x4(%esp)
-801069af:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
-801069b6:	e8 45 f0 ff ff       	call   80105a00 <argptr>
-801069bb:	85 c0                	test   %eax,%eax
-801069bd:	78 5d                	js     80106a1c <sys_wait_stat+0x83>
-			(argptr(1,(char**)&rtime, sizeof(int)) < 0) ||
-801069bf:	c7 44 24 08 04 00 00 	movl   $0x4,0x8(%esp)
-801069c6:	00 
-801069c7:	8d 45 f0             	lea    -0x10(%ebp),%eax
-801069ca:	89 44 24 04          	mov    %eax,0x4(%esp)
-801069ce:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
-801069d5:	e8 26 f0 ff ff       	call   80105a00 <argptr>
-int
-sys_wait_stat(void)
-{
-	int *wtime, *rtime, *iotime, *status;
-
-	if (	(argptr(0,(char**)&wtime, sizeof(int)) < 0) ||
-801069da:	85 c0                	test   %eax,%eax
-801069dc:	78 3e                	js     80106a1c <sys_wait_stat+0x83>
-			(argptr(1,(char**)&rtime, sizeof(int)) < 0) ||
-			(argptr(2,(char**)&iotime, sizeof(int)) < 0) ||
-801069de:	c7 44 24 08 04 00 00 	movl   $0x4,0x8(%esp)
-801069e5:	00 
-801069e6:	8d 45 ec             	lea    -0x14(%ebp),%eax
-801069e9:	89 44 24 04          	mov    %eax,0x4(%esp)
-801069ed:	c7 04 24 02 00 00 00 	movl   $0x2,(%esp)
-801069f4:	e8 07 f0 ff ff       	call   80105a00 <argptr>
-sys_wait_stat(void)
-{
-	int *wtime, *rtime, *iotime, *status;
-
-	if (	(argptr(0,(char**)&wtime, sizeof(int)) < 0) ||
-			(argptr(1,(char**)&rtime, sizeof(int)) < 0) ||
-801069f9:	85 c0                	test   %eax,%eax
-801069fb:	78 1f                	js     80106a1c <sys_wait_stat+0x83>
-			(argptr(2,(char**)&iotime, sizeof(int)) < 0) ||
-			(argptr(3,(char**)&status, sizeof(int)) < 0) ){
-801069fd:	c7 44 24 08 04 00 00 	movl   $0x4,0x8(%esp)
-80106a04:	00 
-80106a05:	8d 45 e8             	lea    -0x18(%ebp),%eax
-80106a08:	89 44 24 04          	mov    %eax,0x4(%esp)
-80106a0c:	c7 04 24 03 00 00 00 	movl   $0x3,(%esp)
-80106a13:	e8 e8 ef ff ff       	call   80105a00 <argptr>
-{
-	int *wtime, *rtime, *iotime, *status;
-
-	if (	(argptr(0,(char**)&wtime, sizeof(int)) < 0) ||
-			(argptr(1,(char**)&rtime, sizeof(int)) < 0) ||
-			(argptr(2,(char**)&iotime, sizeof(int)) < 0) ||
-80106a18:	85 c0                	test   %eax,%eax
-80106a1a:	79 07                	jns    80106a23 <sys_wait_stat+0x8a>
-			(argptr(3,(char**)&status, sizeof(int)) < 0) ){
-
-		return -1;
-80106a1c:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
-80106a21:	eb 20                	jmp    80106a43 <sys_wait_stat+0xaa>
-	}
-
-	return wait_stat(wtime, rtime, iotime, status);
-80106a23:	8b 5d e8             	mov    -0x18(%ebp),%ebx
-80106a26:	8b 4d ec             	mov    -0x14(%ebp),%ecx
-80106a29:	8b 55 f0             	mov    -0x10(%ebp),%edx
-80106a2c:	8b 45 f4             	mov    -0xc(%ebp),%eax
-80106a2f:	89 5c 24 0c          	mov    %ebx,0xc(%esp)
-80106a33:	89 4c 24 08          	mov    %ecx,0x8(%esp)
-80106a37:	89 54 24 04          	mov    %edx,0x4(%esp)
-80106a3b:	89 04 24             	mov    %eax,(%esp)
-80106a3e:	e8 94 e2 ff ff       	call   80104cd7 <wait_stat>
-}
-80106a43:	83 c4 24             	add    $0x24,%esp
-80106a46:	5b                   	pop    %ebx
-80106a47:	5d                   	pop    %ebp
-80106a48:	c3                   	ret    
-
-80106a49 <sys_list_pgroup>:
-
-int
-sys_list_pgroup(void)
-{
-80106a49:	55                   	push   %ebp
-80106a4a:	89 e5                	mov    %esp,%ebp
-80106a4c:	83 ec 28             	sub    $0x28,%esp
-	int gid;
-	process_info_entry* arr;
-	int* size;
-
-	if (	(argint(0, &gid) < 0) ||
-80106a4f:	8d 45 f4             	lea    -0xc(%ebp),%eax
-80106a52:	89 44 24 04          	mov    %eax,0x4(%esp)
-80106a56:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
-80106a5d:	e8 70 ef ff ff       	call   801059d2 <argint>
-80106a62:	85 c0                	test   %eax,%eax
-80106a64:	78 3e                	js     80106aa4 <sys_list_pgroup+0x5b>
-			(argptr(1,(char**)&arr, sizeof(process_info_entry)) < 0) ||
-80106a66:	c7 44 24 08 14 00 00 	movl   $0x14,0x8(%esp)
-80106a6d:	00 
-80106a6e:	8d 45 f0             	lea    -0x10(%ebp),%eax
-80106a71:	89 44 24 04          	mov    %eax,0x4(%esp)
-80106a75:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
-80106a7c:	e8 7f ef ff ff       	call   80105a00 <argptr>
-{
-	int gid;
-	process_info_entry* arr;
-	int* size;
-
-	if (	(argint(0, &gid) < 0) ||
-80106a81:	85 c0                	test   %eax,%eax
-80106a83:	78 1f                	js     80106aa4 <sys_list_pgroup+0x5b>
-			(argptr(1,(char**)&arr, sizeof(process_info_entry)) < 0) ||
-			(argptr(2,(char**)&size, sizeof(int)) < 0)){
-80106a85:	c7 44 24 08 04 00 00 	movl   $0x4,0x8(%esp)
-80106a8c:	00 
-80106a8d:	8d 45 ec             	lea    -0x14(%ebp),%eax
-80106a90:	89 44 24 04          	mov    %eax,0x4(%esp)
-80106a94:	c7 04 24 02 00 00 00 	movl   $0x2,(%esp)
-80106a9b:	e8 60 ef ff ff       	call   80105a00 <argptr>
-	int gid;
-	process_info_entry* arr;
-	int* size;
-
-	if (	(argint(0, &gid) < 0) ||
-			(argptr(1,(char**)&arr, sizeof(process_info_entry)) < 0) ||
-80106aa0:	85 c0                	test   %eax,%eax
-80106aa2:	79 07                	jns    80106aab <sys_list_pgroup+0x62>
-			(argptr(2,(char**)&size, sizeof(int)) < 0)){
-
-		return -1;
-80106aa4:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
-80106aa9:	eb 19                	jmp    80106ac4 <sys_list_pgroup+0x7b>
-	}
-
-	return list_pgroup(gid, arr, size);
-80106aab:	8b 4d ec             	mov    -0x14(%ebp),%ecx
-80106aae:	8b 55 f0             	mov    -0x10(%ebp),%edx
-80106ab1:	8b 45 f4             	mov    -0xc(%ebp),%eax
-80106ab4:	89 4c 24 08          	mov    %ecx,0x8(%esp)
-80106ab8:	89 54 24 04          	mov    %edx,0x4(%esp)
-80106abc:	89 04 24             	mov    %eax,(%esp)
-80106abf:	e8 f2 e3 ff ff       	call   80104eb6 <list_pgroup>
-}
-80106ac4:	c9                   	leave  
-80106ac5:	c3                   	ret    
-
-80106ac6 <sys_foreground>:
-
-int
-sys_foreground(void)
-{
-80106ac6:	55                   	push   %ebp
-80106ac7:	89 e5                	mov    %esp,%ebp
-80106ac9:	83 ec 28             	sub    $0x28,%esp
-	int gid;
-
-	if (argint(0, &gid) < 0){
-80106acc:	8d 45 f4             	lea    -0xc(%ebp),%eax
-80106acf:	89 44 24 04          	mov    %eax,0x4(%esp)
-80106ad3:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
-80106ada:	e8 f3 ee ff ff       	call   801059d2 <argint>
-80106adf:	85 c0                	test   %eax,%eax
-80106ae1:	79 07                	jns    80106aea <sys_foreground+0x24>
-		return -1;
-80106ae3:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
-80106ae8:	eb 0b                	jmp    80106af5 <sys_foreground+0x2f>
-	}
-
-	return foreground(gid);
-80106aea:	8b 45 f4             	mov    -0xc(%ebp),%eax
-80106aed:	89 04 24             	mov    %eax,(%esp)
-80106af0:	e8 de e2 ff ff       	call   80104dd3 <foreground>
-}
-80106af5:	c9                   	leave  
-80106af6:	c3                   	ret    
-
-80106af7 <sys_set_priority>:
-
-int
-sys_set_priority(void)
-{
-80106af7:	55                   	push   %ebp
-80106af8:	89 e5                	mov    %esp,%ebp
-80106afa:	83 ec 28             	sub    $0x28,%esp
-	int priority;
-
-	if(argint(0, &priority) < 0)
-80106afd:	8d 45 f4             	lea    -0xc(%ebp),%eax
-80106b00:	89 44 24 04          	mov    %eax,0x4(%esp)
-80106b04:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
-80106b0b:	e8 c2 ee ff ff       	call   801059d2 <argint>
-80106b10:	85 c0                	test   %eax,%eax
-80106b12:	79 07                	jns    80106b1b <sys_set_priority+0x24>
-	return -1;
-80106b14:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
-80106b19:	eb 0b                	jmp    80106b26 <sys_set_priority+0x2f>
-	return set_priority(priority);
-80106b1b:	8b 45 f4             	mov    -0xc(%ebp),%eax
-80106b1e:	89 04 24             	mov    %eax,(%esp)
-80106b21:	e8 86 e3 ff ff       	call   80104eac <set_priority>
-}
-80106b26:	c9                   	leave  
-80106b27:	c3                   	ret    
-
-80106b28 <sys_kill>:
-
-
-int
-sys_kill(void)
-{
-80106b28:	55                   	push   %ebp
-80106b29:	89 e5                	mov    %esp,%ebp
-80106b2b:	83 ec 28             	sub    $0x28,%esp
-  int pid;
-
-  if(argint(0, &pid) < 0)
-80106b2e:	8d 45 f4             	lea    -0xc(%ebp),%eax
-80106b31:	89 44 24 04          	mov    %eax,0x4(%esp)
-80106b35:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
-80106b3c:	e8 91 ee ff ff       	call   801059d2 <argint>
-80106b41:	85 c0                	test   %eax,%eax
-80106b43:	79 07                	jns    80106b4c <sys_kill+0x24>
-    return -1;
-80106b45:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
-80106b4a:	eb 0b                	jmp    80106b57 <sys_kill+0x2f>
-  return kill(pid);
-80106b4c:	8b 45 f4             	mov    -0xc(%ebp),%eax
-80106b4f:	89 04 24             	mov    %eax,(%esp)
-80106b52:	e8 f1 e6 ff ff       	call   80105248 <kill>
-}
-80106b57:	c9                   	leave  
-80106b58:	c3                   	ret    
-
-80106b59 <sys_getpid>:
-
-int
-sys_getpid(void)
-{
-80106b59:	55                   	push   %ebp
-80106b5a:	89 e5                	mov    %esp,%ebp
-  return proc->pid;
-80106b5c:	65 a1 04 00 00 00    	mov    %gs:0x4,%eax
-80106b62:	8b 40 10             	mov    0x10(%eax),%eax
-}
-80106b65:	5d                   	pop    %ebp
-80106b66:	c3                   	ret    
-
-80106b67 <sys_sbrk>:
-
-int
-sys_sbrk(void)
-{
-80106b67:	55                   	push   %ebp
-80106b68:	89 e5                	mov    %esp,%ebp
-80106b6a:	83 ec 28             	sub    $0x28,%esp
-  int addr;
-  int n;
-
-  if(argint(0, &n) < 0)
-80106b6d:	8d 45 f0             	lea    -0x10(%ebp),%eax
-80106b70:	89 44 24 04          	mov    %eax,0x4(%esp)
-80106b74:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
-80106b7b:	e8 52 ee ff ff       	call   801059d2 <argint>
-80106b80:	85 c0                	test   %eax,%eax
-80106b82:	79 07                	jns    80106b8b <sys_sbrk+0x24>
-    return -1;
-80106b84:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
-80106b89:	eb 24                	jmp    80106baf <sys_sbrk+0x48>
-  addr = proc->sz;
-80106b8b:	65 a1 04 00 00 00    	mov    %gs:0x4,%eax
-80106b91:	8b 00                	mov    (%eax),%eax
-80106b93:	89 45 f4             	mov    %eax,-0xc(%ebp)
-  if(growproc(n) < 0)
-80106b96:	8b 45 f0             	mov    -0x10(%ebp),%eax
-80106b99:	89 04 24             	mov    %eax,(%esp)
-80106b9c:	e8 79 da ff ff       	call   8010461a <growproc>
-80106ba1:	85 c0                	test   %eax,%eax
-80106ba3:	79 07                	jns    80106bac <sys_sbrk+0x45>
-    return -1;
-80106ba5:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
-80106baa:	eb 03                	jmp    80106baf <sys_sbrk+0x48>
-  return addr;
-80106bac:	8b 45 f4             	mov    -0xc(%ebp),%eax
-}
-80106baf:	c9                   	leave  
-80106bb0:	c3                   	ret    
-
-80106bb1 <sys_sleep>:
-
-int
-sys_sleep(void)
-{
-80106bb1:	55                   	push   %ebp
-80106bb2:	89 e5                	mov    %esp,%ebp
-80106bb4:	83 ec 28             	sub    $0x28,%esp
-  int n;
-  uint ticks0;
-  
-  if(argint(0, &n) < 0)
-80106bb7:	8d 45 f0             	lea    -0x10(%ebp),%eax
-80106bba:	89 44 24 04          	mov    %eax,0x4(%esp)
-80106bbe:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
-80106bc5:	e8 08 ee ff ff       	call   801059d2 <argint>
-80106bca:	85 c0                	test   %eax,%eax
-80106bcc:	79 07                	jns    80106bd5 <sys_sleep+0x24>
-    return -1;
-80106bce:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
-80106bd3:	eb 6c                	jmp    80106c41 <sys_sleep+0x90>
-  acquire(&tickslock);
-80106bd5:	c7 04 24 c0 61 11 80 	movl   $0x801161c0,(%esp)
-80106bdc:	e8 46 e8 ff ff       	call   80105427 <acquire>
-  ticks0 = ticks;
-80106be1:	a1 00 6a 11 80       	mov    0x80116a00,%eax
-80106be6:	89 45 f4             	mov    %eax,-0xc(%ebp)
-  while(ticks - ticks0 < n){
-80106be9:	eb 34                	jmp    80106c1f <sys_sleep+0x6e>
-    if(proc->killed){
-80106beb:	65 a1 04 00 00 00    	mov    %gs:0x4,%eax
-80106bf1:	8b 40 28             	mov    0x28(%eax),%eax
-80106bf4:	85 c0                	test   %eax,%eax
-80106bf6:	74 13                	je     80106c0b <sys_sleep+0x5a>
-      release(&tickslock);
-80106bf8:	c7 04 24 c0 61 11 80 	movl   $0x801161c0,(%esp)
-80106bff:	e8 85 e8 ff ff       	call   80105489 <release>
-      return -1;
-80106c04:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
-80106c09:	eb 36                	jmp    80106c41 <sys_sleep+0x90>
-    }
-    sleep(&ticks, &tickslock);
-80106c0b:	c7 44 24 04 c0 61 11 	movl   $0x801161c0,0x4(%esp)
-80106c12:	80 
-80106c13:	c7 04 24 00 6a 11 80 	movl   $0x80116a00,(%esp)
-80106c1a:	e8 22 e5 ff ff       	call   80105141 <sleep>
-  
-  if(argint(0, &n) < 0)
-    return -1;
-  acquire(&tickslock);
-  ticks0 = ticks;
-  while(ticks - ticks0 < n){
-80106c1f:	a1 00 6a 11 80       	mov    0x80116a00,%eax
-80106c24:	89 c2                	mov    %eax,%edx
-80106c26:	2b 55 f4             	sub    -0xc(%ebp),%edx
-80106c29:	8b 45 f0             	mov    -0x10(%ebp),%eax
-80106c2c:	39 c2                	cmp    %eax,%edx
-80106c2e:	72 bb                	jb     80106beb <sys_sleep+0x3a>
-      release(&tickslock);
-      return -1;
-    }
-    sleep(&ticks, &tickslock);
-  }
-  release(&tickslock);
-80106c30:	c7 04 24 c0 61 11 80 	movl   $0x801161c0,(%esp)
-80106c37:	e8 4d e8 ff ff       	call   80105489 <release>
-  return 0;
-80106c3c:	b8 00 00 00 00       	mov    $0x0,%eax
-}
-80106c41:	c9                   	leave  
-80106c42:	c3                   	ret    
-
-80106c43 <sys_uptime>:
-
-// return how many clock tick interrupts have occurred
-// since start.
-int
-sys_uptime(void)
-{
-80106c43:	55                   	push   %ebp
-80106c44:	89 e5                	mov    %esp,%ebp
-80106c46:	83 ec 28             	sub    $0x28,%esp
-  uint xticks;
-  
-  acquire(&tickslock);
-80106c49:	c7 04 24 c0 61 11 80 	movl   $0x801161c0,(%esp)
-80106c50:	e8 d2 e7 ff ff       	call   80105427 <acquire>
-  xticks = ticks;
-80106c55:	a1 00 6a 11 80       	mov    0x80116a00,%eax
-80106c5a:	89 45 f4             	mov    %eax,-0xc(%ebp)
-  release(&tickslock);
-80106c5d:	c7 04 24 c0 61 11 80 	movl   $0x801161c0,(%esp)
-80106c64:	e8 20 e8 ff ff       	call   80105489 <release>
-  return xticks;
-80106c69:	8b 45 f4             	mov    -0xc(%ebp),%eax
-}
-80106c6c:	c9                   	leave  
-80106c6d:	c3                   	ret    
-	...
-
-80106c70 <outb>:
-               "memory", "cc");
-}
-
-static inline void
-outb(ushort port, uchar data)
-{
-80106c70:	55                   	push   %ebp
-80106c71:	89 e5                	mov    %esp,%ebp
-80106c73:	83 ec 08             	sub    $0x8,%esp
-80106c76:	8b 55 08             	mov    0x8(%ebp),%edx
-80106c79:	8b 45 0c             	mov    0xc(%ebp),%eax
-80106c7c:	66 89 55 fc          	mov    %dx,-0x4(%ebp)
-80106c80:	88 45 f8             	mov    %al,-0x8(%ebp)
-  asm volatile("out %0,%1" : : "a" (data), "d" (port));
-80106c83:	0f b6 45 f8          	movzbl -0x8(%ebp),%eax
-80106c87:	0f b7 55 fc          	movzwl -0x4(%ebp),%edx
-80106c8b:	ee                   	out    %al,(%dx)
-}
-80106c8c:	c9                   	leave  
-80106c8d:	c3                   	ret    
-
-80106c8e <timerinit>:
-#define TIMER_RATEGEN   0x04    // mode 2, rate generator
-#define TIMER_16BIT     0x30    // r/w counter 16 bits, LSB first
-
-void
-timerinit(void)
-{
-80106c8e:	55                   	push   %ebp
-80106c8f:	89 e5                	mov    %esp,%ebp
-80106c91:	83 ec 18             	sub    $0x18,%esp
-  // Interrupt 100 times/sec.
-  outb(TIMER_MODE, TIMER_SEL0 | TIMER_RATEGEN | TIMER_16BIT);
-80106c94:	c7 44 24 04 34 00 00 	movl   $0x34,0x4(%esp)
-80106c9b:	00 
-80106c9c:	c7 04 24 43 00 00 00 	movl   $0x43,(%esp)
-80106ca3:	e8 c8 ff ff ff       	call   80106c70 <outb>
-  outb(IO_TIMER1, TIMER_DIV(100) % 256);
-80106ca8:	c7 44 24 04 9c 00 00 	movl   $0x9c,0x4(%esp)
-80106caf:	00 
-80106cb0:	c7 04 24 40 00 00 00 	movl   $0x40,(%esp)
-80106cb7:	e8 b4 ff ff ff       	call   80106c70 <outb>
-  outb(IO_TIMER1, TIMER_DIV(100) / 256);
-80106cbc:	c7 44 24 04 2e 00 00 	movl   $0x2e,0x4(%esp)
-80106cc3:	00 
-80106cc4:	c7 04 24 40 00 00 00 	movl   $0x40,(%esp)
-80106ccb:	e8 a0 ff ff ff       	call   80106c70 <outb>
-  picenable(IRQ_TIMER);
-80106cd0:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
-80106cd7:	e8 99 d1 ff ff       	call   80103e75 <picenable>
-}
-80106cdc:	c9                   	leave  
-80106cdd:	c3                   	ret    
-	...
-
-80106ce0 <alltraps>:
-
-  # vectors.S sends all traps here.
-.globl alltraps
-alltraps:
-  # Build trap frame.
-  pushl %ds
-80106ce0:	1e                   	push   %ds
-  pushl %es
-80106ce1:	06                   	push   %es
-  pushl %fs
-80106ce2:	0f a0                	push   %fs
-  pushl %gs
-80106ce4:	0f a8                	push   %gs
-  pushal
-80106ce6:	60                   	pusha  
-  
-  # Set up data and per-cpu segments.
-  movw $(SEG_KDATA<<3), %ax
-80106ce7:	66 b8 10 00          	mov    $0x10,%ax
-  movw %ax, %ds
-80106ceb:	8e d8                	mov    %eax,%ds
-  movw %ax, %es
-80106ced:	8e c0                	mov    %eax,%es
-  movw $(SEG_KCPU<<3), %ax
-80106cef:	66 b8 18 00          	mov    $0x18,%ax
-  movw %ax, %fs
-80106cf3:	8e e0                	mov    %eax,%fs
-  movw %ax, %gs
-80106cf5:	8e e8                	mov    %eax,%gs
-
-  # Call trap(tf), where tf=%esp
-  pushl %esp
-80106cf7:	54                   	push   %esp
-  call trap
-80106cf8:	e8 7b 02 00 00       	call   80106f78 <trap>
-  addl $4, %esp
-80106cfd:	83 c4 04             	add    $0x4,%esp
-
-80106d00 <trapret>:
-
-  # Return falls through to trapret...
-.globl trapret
-trapret:
-  popal
-80106d00:	61                   	popa   
-  popl %gs
-80106d01:	0f a9                	pop    %gs
-  popl %fs
-80106d03:	0f a1                	pop    %fs
-  popl %es
-80106d05:	07                   	pop    %es
-  popl %ds
-80106d06:	1f                   	pop    %ds
-  addl $0x8, %esp  # trapno and errcode
-80106d07:	83 c4 08             	add    $0x8,%esp
-  iret
-80106d0a:	cf                   	iret   
-	...
-
-80106d0c <lidt>:
-
-struct gatedesc;
-
-static inline void
-lidt(struct gatedesc *p, int size)
-{
-80106d0c:	55                   	push   %ebp
-80106d0d:	89 e5                	mov    %esp,%ebp
-80106d0f:	83 ec 10             	sub    $0x10,%esp
-  volatile ushort pd[3];
-
-  pd[0] = size-1;
-80106d12:	8b 45 0c             	mov    0xc(%ebp),%eax
-80106d15:	83 e8 01             	sub    $0x1,%eax
-80106d18:	66 89 45 fa          	mov    %ax,-0x6(%ebp)
-  pd[1] = (uint)p;
-80106d1c:	8b 45 08             	mov    0x8(%ebp),%eax
-80106d1f:	66 89 45 fc          	mov    %ax,-0x4(%ebp)
-  pd[2] = (uint)p >> 16;
-80106d23:	8b 45 08             	mov    0x8(%ebp),%eax
-80106d26:	c1 e8 10             	shr    $0x10,%eax
-80106d29:	66 89 45 fe          	mov    %ax,-0x2(%ebp)
-
-  asm volatile("lidt (%0)" : : "r" (pd));
-80106d2d:	8d 45 fa             	lea    -0x6(%ebp),%eax
-80106d30:	0f 01 18             	lidtl  (%eax)
-}
-80106d33:	c9                   	leave  
-80106d34:	c3                   	ret    
-
-80106d35 <rcr2>:
-  return result;
-}
-
-static inline uint
-rcr2(void)
-{
-80106d35:	55                   	push   %ebp
-80106d36:	89 e5                	mov    %esp,%ebp
-80106d38:	53                   	push   %ebx
-80106d39:	83 ec 10             	sub    $0x10,%esp
-  uint val;
-  asm volatile("movl %%cr2,%0" : "=r" (val));
-80106d3c:	0f 20 d3             	mov    %cr2,%ebx
-80106d3f:	89 5d f8             	mov    %ebx,-0x8(%ebp)
-  return val;
-80106d42:	8b 45 f8             	mov    -0x8(%ebp),%eax
-}
-80106d45:	83 c4 10             	add    $0x10,%esp
-80106d48:	5b                   	pop    %ebx
-80106d49:	5d                   	pop    %ebp
-80106d4a:	c3                   	ret    
-
-80106d4b <tvinit>:
-struct spinlock tickslock;
-uint ticks;
-
-void
-tvinit(void)
-{
-80106d4b:	55                   	push   %ebp
-80106d4c:	89 e5                	mov    %esp,%ebp
-80106d4e:	83 ec 28             	sub    $0x28,%esp
-  int i;
-
-  for(i = 0; i < 256; i++)
-80106d51:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
-80106d58:	e9 c3 00 00 00       	jmp    80106e20 <tvinit+0xd5>
-    SETGATE(idt[i], 0, SEG_KCODE<<3, vectors[i], 0);
-80106d5d:	8b 45 f4             	mov    -0xc(%ebp),%eax
-80106d60:	8b 04 85 ac c0 10 80 	mov    -0x7fef3f54(,%eax,4),%eax
-80106d67:	89 c2                	mov    %eax,%edx
-80106d69:	8b 45 f4             	mov    -0xc(%ebp),%eax
-80106d6c:	66 89 14 c5 00 62 11 	mov    %dx,-0x7fee9e00(,%eax,8)
-80106d73:	80 
-80106d74:	8b 45 f4             	mov    -0xc(%ebp),%eax
-80106d77:	66 c7 04 c5 02 62 11 	movw   $0x8,-0x7fee9dfe(,%eax,8)
-80106d7e:	80 08 00 
-80106d81:	8b 45 f4             	mov    -0xc(%ebp),%eax
-80106d84:	0f b6 14 c5 04 62 11 	movzbl -0x7fee9dfc(,%eax,8),%edx
-80106d8b:	80 
-80106d8c:	83 e2 e0             	and    $0xffffffe0,%edx
-80106d8f:	88 14 c5 04 62 11 80 	mov    %dl,-0x7fee9dfc(,%eax,8)
-80106d96:	8b 45 f4             	mov    -0xc(%ebp),%eax
-80106d99:	0f b6 14 c5 04 62 11 	movzbl -0x7fee9dfc(,%eax,8),%edx
-80106da0:	80 
-80106da1:	83 e2 1f             	and    $0x1f,%edx
-80106da4:	88 14 c5 04 62 11 80 	mov    %dl,-0x7fee9dfc(,%eax,8)
-80106dab:	8b 45 f4             	mov    -0xc(%ebp),%eax
-80106dae:	0f b6 14 c5 05 62 11 	movzbl -0x7fee9dfb(,%eax,8),%edx
-80106db5:	80 
-80106db6:	83 e2 f0             	and    $0xfffffff0,%edx
-80106db9:	83 ca 0e             	or     $0xe,%edx
-80106dbc:	88 14 c5 05 62 11 80 	mov    %dl,-0x7fee9dfb(,%eax,8)
-80106dc3:	8b 45 f4             	mov    -0xc(%ebp),%eax
-80106dc6:	0f b6 14 c5 05 62 11 	movzbl -0x7fee9dfb(,%eax,8),%edx
-80106dcd:	80 
-80106dce:	83 e2 ef             	and    $0xffffffef,%edx
-80106dd1:	88 14 c5 05 62 11 80 	mov    %dl,-0x7fee9dfb(,%eax,8)
-80106dd8:	8b 45 f4             	mov    -0xc(%ebp),%eax
-80106ddb:	0f b6 14 c5 05 62 11 	movzbl -0x7fee9dfb(,%eax,8),%edx
-80106de2:	80 
-80106de3:	83 e2 9f             	and    $0xffffff9f,%edx
-80106de6:	88 14 c5 05 62 11 80 	mov    %dl,-0x7fee9dfb(,%eax,8)
-80106ded:	8b 45 f4             	mov    -0xc(%ebp),%eax
-80106df0:	0f b6 14 c5 05 62 11 	movzbl -0x7fee9dfb(,%eax,8),%edx
-80106df7:	80 
-80106df8:	83 ca 80             	or     $0xffffff80,%edx
-80106dfb:	88 14 c5 05 62 11 80 	mov    %dl,-0x7fee9dfb(,%eax,8)
-80106e02:	8b 45 f4             	mov    -0xc(%ebp),%eax
-80106e05:	8b 04 85 ac c0 10 80 	mov    -0x7fef3f54(,%eax,4),%eax
-80106e0c:	c1 e8 10             	shr    $0x10,%eax
-80106e0f:	89 c2                	mov    %eax,%edx
-80106e11:	8b 45 f4             	mov    -0xc(%ebp),%eax
-80106e14:	66 89 14 c5 06 62 11 	mov    %dx,-0x7fee9dfa(,%eax,8)
-80106e1b:	80 
-void
-tvinit(void)
-{
-  int i;
-
-  for(i = 0; i < 256; i++)
-80106e1c:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
-80106e20:	81 7d f4 ff 00 00 00 	cmpl   $0xff,-0xc(%ebp)
-80106e27:	0f 8e 30 ff ff ff    	jle    80106d5d <tvinit+0x12>
-    SETGATE(idt[i], 0, SEG_KCODE<<3, vectors[i], 0);
-  SETGATE(idt[T_SYSCALL], 1, SEG_KCODE<<3, vectors[T_SYSCALL], DPL_USER);
-80106e2d:	a1 ac c1 10 80       	mov    0x8010c1ac,%eax
-80106e32:	66 a3 00 64 11 80    	mov    %ax,0x80116400
-80106e38:	66 c7 05 02 64 11 80 	movw   $0x8,0x80116402
-80106e3f:	08 00 
-80106e41:	0f b6 05 04 64 11 80 	movzbl 0x80116404,%eax
-80106e48:	83 e0 e0             	and    $0xffffffe0,%eax
-80106e4b:	a2 04 64 11 80       	mov    %al,0x80116404
-80106e50:	0f b6 05 04 64 11 80 	movzbl 0x80116404,%eax
-80106e57:	83 e0 1f             	and    $0x1f,%eax
-80106e5a:	a2 04 64 11 80       	mov    %al,0x80116404
-80106e5f:	0f b6 05 05 64 11 80 	movzbl 0x80116405,%eax
-80106e66:	83 c8 0f             	or     $0xf,%eax
-80106e69:	a2 05 64 11 80       	mov    %al,0x80116405
-80106e6e:	0f b6 05 05 64 11 80 	movzbl 0x80116405,%eax
-80106e75:	83 e0 ef             	and    $0xffffffef,%eax
-80106e78:	a2 05 64 11 80       	mov    %al,0x80116405
-80106e7d:	0f b6 05 05 64 11 80 	movzbl 0x80116405,%eax
-80106e84:	83 c8 60             	or     $0x60,%eax
-80106e87:	a2 05 64 11 80       	mov    %al,0x80116405
-80106e8c:	0f b6 05 05 64 11 80 	movzbl 0x80116405,%eax
-80106e93:	83 c8 80             	or     $0xffffff80,%eax
-80106e96:	a2 05 64 11 80       	mov    %al,0x80116405
-80106e9b:	a1 ac c1 10 80       	mov    0x8010c1ac,%eax
-80106ea0:	c1 e8 10             	shr    $0x10,%eax
-80106ea3:	66 a3 06 64 11 80    	mov    %ax,0x80116406
-  
-  initlock(&tickslock, "time");
-80106ea9:	c7 44 24 04 18 96 10 	movl   $0x80109618,0x4(%esp)
-80106eb0:	80 
-80106eb1:	c7 04 24 c0 61 11 80 	movl   $0x801161c0,(%esp)
-80106eb8:	e8 49 e5 ff ff       	call   80105406 <initlock>
-}
-80106ebd:	c9                   	leave  
-80106ebe:	c3                   	ret    
-
-80106ebf <idtinit>:
-
-void
-idtinit(void)
-{
-80106ebf:	55                   	push   %ebp
-80106ec0:	89 e5                	mov    %esp,%ebp
-80106ec2:	83 ec 08             	sub    $0x8,%esp
-  lidt(idt, sizeof(idt));
-80106ec5:	c7 44 24 04 00 08 00 	movl   $0x800,0x4(%esp)
-80106ecc:	00 
-80106ecd:	c7 04 24 00 62 11 80 	movl   $0x80116200,(%esp)
-80106ed4:	e8 33 fe ff ff       	call   80106d0c <lidt>
-}
-80106ed9:	c9                   	leave  
-80106eda:	c3                   	ret    
-
-80106edb <updateStats>:
-  struct spinlock lock;
-  struct proc proc[NPROC];
-} ptable;
-
-void updateStats()
-{
-80106edb:	55                   	push   %ebp
-80106edc:	89 e5                	mov    %esp,%ebp
-80106ede:	83 ec 10             	sub    $0x10,%esp
-	struct proc* p;
-    for(p = ptable.proc; p < &ptable.proc[NPROC]; p++){
-80106ee1:	c7 45 fc b4 39 11 80 	movl   $0x801139b4,-0x4(%ebp)
-80106ee8:	eb 7f                	jmp    80106f69 <updateStats+0x8e>
-		switch (p->state) {
-80106eea:	8b 45 fc             	mov    -0x4(%ebp),%eax
-80106eed:	8b 40 0c             	mov    0xc(%eax),%eax
-80106ef0:	83 f8 03             	cmp    $0x3,%eax
-80106ef3:	74 21                	je     80106f16 <updateStats+0x3b>
-80106ef5:	83 f8 04             	cmp    $0x4,%eax
-80106ef8:	74 33                	je     80106f2d <updateStats+0x52>
-80106efa:	83 f8 02             	cmp    $0x2,%eax
-80106efd:	75 62                	jne    80106f61 <updateStats+0x86>
-			case SLEEPING:
-				p->stime++;
-80106eff:	8b 45 fc             	mov    -0x4(%ebp),%eax
-80106f02:	8b 80 8c 00 00 00    	mov    0x8c(%eax),%eax
-80106f08:	8d 50 01             	lea    0x1(%eax),%edx
-80106f0b:	8b 45 fc             	mov    -0x4(%ebp),%eax
-80106f0e:	89 90 8c 00 00 00    	mov    %edx,0x8c(%eax)
-				break;
-80106f14:	eb 4c                	jmp    80106f62 <updateStats+0x87>
-			case RUNNABLE:
-				p->retime++;
-80106f16:	8b 45 fc             	mov    -0x4(%ebp),%eax
-80106f19:	8b 80 90 00 00 00    	mov    0x90(%eax),%eax
-80106f1f:	8d 50 01             	lea    0x1(%eax),%edx
-80106f22:	8b 45 fc             	mov    -0x4(%ebp),%eax
-80106f25:	89 90 90 00 00 00    	mov    %edx,0x90(%eax)
-				break;
-80106f2b:	eb 35                	jmp    80106f62 <updateStats+0x87>
-			case RUNNING:
-				p->rutime++;
-80106f2d:	8b 45 fc             	mov    -0x4(%ebp),%eax
-80106f30:	8b 80 94 00 00 00    	mov    0x94(%eax),%eax
-80106f36:	8d 50 01             	lea    0x1(%eax),%edx
-80106f39:	8b 45 fc             	mov    -0x4(%ebp),%eax
-80106f3c:	89 90 94 00 00 00    	mov    %edx,0x94(%eax)
-				p->vruntime += p->priority;
-80106f42:	8b 45 fc             	mov    -0x4(%ebp),%eax
-80106f45:	8b 90 9c 00 00 00    	mov    0x9c(%eax),%edx
-80106f4b:	8b 45 fc             	mov    -0x4(%ebp),%eax
-80106f4e:	8b 80 98 00 00 00    	mov    0x98(%eax),%eax
-80106f54:	01 c2                	add    %eax,%edx
-80106f56:	8b 45 fc             	mov    -0x4(%ebp),%eax
-80106f59:	89 90 9c 00 00 00    	mov    %edx,0x9c(%eax)
-				break;
-80106f5f:	eb 01                	jmp    80106f62 <updateStats+0x87>
-			default:
-				break;
-80106f61:	90                   	nop
-} ptable;
-
-void updateStats()
-{
-	struct proc* p;
-    for(p = ptable.proc; p < &ptable.proc[NPROC]; p++){
-80106f62:	81 45 fc a0 00 00 00 	addl   $0xa0,-0x4(%ebp)
-80106f69:	81 7d fc b4 61 11 80 	cmpl   $0x801161b4,-0x4(%ebp)
-80106f70:	0f 82 74 ff ff ff    	jb     80106eea <updateStats+0xf>
-				break;
-			default:
-				break;
-		}
-    }
-}
-80106f76:	c9                   	leave  
-80106f77:	c3                   	ret    
-
-80106f78 <trap>:
-
-
-//PAGEBREAK: 41
-void
-trap(struct trapframe *tf)
-{
-80106f78:	55                   	push   %ebp
-80106f79:	89 e5                	mov    %esp,%ebp
-80106f7b:	57                   	push   %edi
-80106f7c:	56                   	push   %esi
-80106f7d:	53                   	push   %ebx
-80106f7e:	83 ec 3c             	sub    $0x3c,%esp
-  if(tf->trapno == T_SYSCALL){
-80106f81:	8b 45 08             	mov    0x8(%ebp),%eax
-80106f84:	8b 40 30             	mov    0x30(%eax),%eax
-80106f87:	83 f8 40             	cmp    $0x40,%eax
-80106f8a:	75 4c                	jne    80106fd8 <trap+0x60>
-    if(proc->killed)
-80106f8c:	65 a1 04 00 00 00    	mov    %gs:0x4,%eax
-80106f92:	8b 40 28             	mov    0x28(%eax),%eax
-80106f95:	85 c0                	test   %eax,%eax
-80106f97:	74 0c                	je     80106fa5 <trap+0x2d>
-      exit(EXIT_STATUS_DEFAULT);
-80106f99:	c7 04 24 02 00 00 00 	movl   $0x2,(%esp)
-80106fa0:	e8 c0 d8 ff ff       	call   80104865 <exit>
-    proc->tf = tf;
-80106fa5:	65 a1 04 00 00 00    	mov    %gs:0x4,%eax
-80106fab:	8b 55 08             	mov    0x8(%ebp),%edx
-80106fae:	89 50 1c             	mov    %edx,0x1c(%eax)
-    syscall();
-80106fb1:	e8 e3 ea ff ff       	call   80105a99 <syscall>
-    if(proc->killed)
-80106fb6:	65 a1 04 00 00 00    	mov    %gs:0x4,%eax
-80106fbc:	8b 40 28             	mov    0x28(%eax),%eax
-80106fbf:	85 c0                	test   %eax,%eax
-80106fc1:	0f 84 6f 02 00 00    	je     80107236 <trap+0x2be>
-      exit(EXIT_STATUS_DEFAULT);
-80106fc7:	c7 04 24 02 00 00 00 	movl   $0x2,(%esp)
-80106fce:	e8 92 d8 ff ff       	call   80104865 <exit>
-    return;
-80106fd3:	e9 5e 02 00 00       	jmp    80107236 <trap+0x2be>
-  }
-
-  switch(tf->trapno){
-80106fd8:	8b 45 08             	mov    0x8(%ebp),%eax
-80106fdb:	8b 40 30             	mov    0x30(%eax),%eax
-80106fde:	83 e8 20             	sub    $0x20,%eax
-80106fe1:	83 f8 1f             	cmp    $0x1f,%eax
-80106fe4:	0f 87 c1 00 00 00    	ja     801070ab <trap+0x133>
-80106fea:	8b 04 85 c0 96 10 80 	mov    -0x7fef6940(,%eax,4),%eax
-80106ff1:	ff e0                	jmp    *%eax
-  case T_IRQ0 + IRQ_TIMER:
-    if(cpu->id == 0){
-80106ff3:	65 a1 00 00 00 00    	mov    %gs:0x0,%eax
-80106ff9:	0f b6 00             	movzbl (%eax),%eax
-80106ffc:	84 c0                	test   %al,%al
-80106ffe:	75 36                	jne    80107036 <trap+0xbe>
-      acquire(&tickslock);
-80107000:	c7 04 24 c0 61 11 80 	movl   $0x801161c0,(%esp)
-80107007:	e8 1b e4 ff ff       	call   80105427 <acquire>
-      ticks++;
-8010700c:	a1 00 6a 11 80       	mov    0x80116a00,%eax
-80107011:	83 c0 01             	add    $0x1,%eax
-80107014:	a3 00 6a 11 80       	mov    %eax,0x80116a00
-      wakeup(&ticks);
-80107019:	c7 04 24 00 6a 11 80 	movl   $0x80116a00,(%esp)
-80107020:	e8 f8 e1 ff ff       	call   8010521d <wakeup>
-      release(&tickslock);
-80107025:	c7 04 24 c0 61 11 80 	movl   $0x801161c0,(%esp)
-8010702c:	e8 58 e4 ff ff       	call   80105489 <release>
-
-      updateStats();
-80107031:	e8 a5 fe ff ff       	call   80106edb <updateStats>
-    }
-    lapiceoi();
-80107036:	e8 40 bf ff ff       	call   80102f7b <lapiceoi>
-    break;
-8010703b:	e9 41 01 00 00       	jmp    80107181 <trap+0x209>
-  case T_IRQ0 + IRQ_IDE:
-    ideintr();
-80107040:	e8 14 b7 ff ff       	call   80102759 <ideintr>
-    lapiceoi();
-80107045:	e8 31 bf ff ff       	call   80102f7b <lapiceoi>
-    break;
-8010704a:	e9 32 01 00 00       	jmp    80107181 <trap+0x209>
-  case T_IRQ0 + IRQ_IDE+1:
-    // Bochs generates spurious IDE1 interrupts.
-    break;
-  case T_IRQ0 + IRQ_KBD:
-    kbdintr();
-8010704f:	e8 db bc ff ff       	call   80102d2f <kbdintr>
-    lapiceoi();
-80107054:	e8 22 bf ff ff       	call   80102f7b <lapiceoi>
-    break;
-80107059:	e9 23 01 00 00       	jmp    80107181 <trap+0x209>
-  case T_IRQ0 + IRQ_COM1:
-    uartintr();
-8010705e:	e8 d9 03 00 00       	call   8010743c <uartintr>
-    lapiceoi();
-80107063:	e8 13 bf ff ff       	call   80102f7b <lapiceoi>
-    break;
-80107068:	e9 14 01 00 00       	jmp    80107181 <trap+0x209>
-  case T_IRQ0 + 7:
-  case T_IRQ0 + IRQ_SPURIOUS:
-    cprintf("cpu%d: spurious interrupt at %x:%x\n",
-            cpu->id, tf->cs, tf->eip);
-8010706d:	8b 45 08             	mov    0x8(%ebp),%eax
-    uartintr();
-    lapiceoi();
-    break;
-  case T_IRQ0 + 7:
-  case T_IRQ0 + IRQ_SPURIOUS:
-    cprintf("cpu%d: spurious interrupt at %x:%x\n",
-80107070:	8b 48 38             	mov    0x38(%eax),%ecx
-            cpu->id, tf->cs, tf->eip);
-80107073:	8b 45 08             	mov    0x8(%ebp),%eax
-80107076:	0f b7 40 3c          	movzwl 0x3c(%eax),%eax
-    uartintr();
-    lapiceoi();
-    break;
-  case T_IRQ0 + 7:
-  case T_IRQ0 + IRQ_SPURIOUS:
-    cprintf("cpu%d: spurious interrupt at %x:%x\n",
-8010707a:	0f b7 d0             	movzwl %ax,%edx
-            cpu->id, tf->cs, tf->eip);
-8010707d:	65 a1 00 00 00 00    	mov    %gs:0x0,%eax
-80107083:	0f b6 00             	movzbl (%eax),%eax
-    uartintr();
-    lapiceoi();
-    break;
-  case T_IRQ0 + 7:
-  case T_IRQ0 + IRQ_SPURIOUS:
-    cprintf("cpu%d: spurious interrupt at %x:%x\n",
-80107086:	0f b6 c0             	movzbl %al,%eax
-80107089:	89 4c 24 0c          	mov    %ecx,0xc(%esp)
-8010708d:	89 54 24 08          	mov    %edx,0x8(%esp)
-80107091:	89 44 24 04          	mov    %eax,0x4(%esp)
-80107095:	c7 04 24 20 96 10 80 	movl   $0x80109620,(%esp)
-8010709c:	e8 00 93 ff ff       	call   801003a1 <cprintf>
-            cpu->id, tf->cs, tf->eip);
-    lapiceoi();
-801070a1:	e8 d5 be ff ff       	call   80102f7b <lapiceoi>
-    break;
-801070a6:	e9 d6 00 00 00       	jmp    80107181 <trap+0x209>
-   
-  //PAGEBREAK: 13
-  default:
-    if(proc == 0 || (tf->cs&3) == 0){
-801070ab:	65 a1 04 00 00 00    	mov    %gs:0x4,%eax
-801070b1:	85 c0                	test   %eax,%eax
-801070b3:	74 11                	je     801070c6 <trap+0x14e>
-801070b5:	8b 45 08             	mov    0x8(%ebp),%eax
-801070b8:	0f b7 40 3c          	movzwl 0x3c(%eax),%eax
-801070bc:	0f b7 c0             	movzwl %ax,%eax
-801070bf:	83 e0 03             	and    $0x3,%eax
-801070c2:	85 c0                	test   %eax,%eax
-801070c4:	75 46                	jne    8010710c <trap+0x194>
-      // In kernel, it must be our mistake.
-      cprintf("unexpected trap %d from cpu %d eip %x (cr2=0x%x)\n",
-801070c6:	e8 6a fc ff ff       	call   80106d35 <rcr2>
-              tf->trapno, cpu->id, tf->eip, rcr2());
-801070cb:	8b 55 08             	mov    0x8(%ebp),%edx
-   
-  //PAGEBREAK: 13
-  default:
-    if(proc == 0 || (tf->cs&3) == 0){
-      // In kernel, it must be our mistake.
-      cprintf("unexpected trap %d from cpu %d eip %x (cr2=0x%x)\n",
-801070ce:	8b 5a 38             	mov    0x38(%edx),%ebx
-              tf->trapno, cpu->id, tf->eip, rcr2());
-801070d1:	65 8b 15 00 00 00 00 	mov    %gs:0x0,%edx
-801070d8:	0f b6 12             	movzbl (%edx),%edx
-   
-  //PAGEBREAK: 13
-  default:
-    if(proc == 0 || (tf->cs&3) == 0){
-      // In kernel, it must be our mistake.
-      cprintf("unexpected trap %d from cpu %d eip %x (cr2=0x%x)\n",
-801070db:	0f b6 ca             	movzbl %dl,%ecx
-              tf->trapno, cpu->id, tf->eip, rcr2());
-801070de:	8b 55 08             	mov    0x8(%ebp),%edx
-   
-  //PAGEBREAK: 13
-  default:
-    if(proc == 0 || (tf->cs&3) == 0){
-      // In kernel, it must be our mistake.
-      cprintf("unexpected trap %d from cpu %d eip %x (cr2=0x%x)\n",
-801070e1:	8b 52 30             	mov    0x30(%edx),%edx
-801070e4:	89 44 24 10          	mov    %eax,0x10(%esp)
-801070e8:	89 5c 24 0c          	mov    %ebx,0xc(%esp)
-801070ec:	89 4c 24 08          	mov    %ecx,0x8(%esp)
-801070f0:	89 54 24 04          	mov    %edx,0x4(%esp)
-801070f4:	c7 04 24 44 96 10 80 	movl   $0x80109644,(%esp)
-801070fb:	e8 a1 92 ff ff       	call   801003a1 <cprintf>
-              tf->trapno, cpu->id, tf->eip, rcr2());
-      panic("trap");
-80107100:	c7 04 24 76 96 10 80 	movl   $0x80109676,(%esp)
-80107107:	e8 31 94 ff ff       	call   8010053d <panic>
-    }
-    // In user space, assume process misbehaved.
-    cprintf("pid %d %s: trap %d err %d on cpu %d "
-8010710c:	e8 24 fc ff ff       	call   80106d35 <rcr2>
-80107111:	89 c2                	mov    %eax,%edx
-            "eip 0x%x addr 0x%x--kill proc\n",
-            proc->pid, proc->name, tf->trapno, tf->err, cpu->id, tf->eip, 
-80107113:	8b 45 08             	mov    0x8(%ebp),%eax
-      cprintf("unexpected trap %d from cpu %d eip %x (cr2=0x%x)\n",
-              tf->trapno, cpu->id, tf->eip, rcr2());
-      panic("trap");
-    }
-    // In user space, assume process misbehaved.
-    cprintf("pid %d %s: trap %d err %d on cpu %d "
-80107116:	8b 78 38             	mov    0x38(%eax),%edi
-            "eip 0x%x addr 0x%x--kill proc\n",
-            proc->pid, proc->name, tf->trapno, tf->err, cpu->id, tf->eip, 
-80107119:	65 a1 00 00 00 00    	mov    %gs:0x0,%eax
-8010711f:	0f b6 00             	movzbl (%eax),%eax
-      cprintf("unexpected trap %d from cpu %d eip %x (cr2=0x%x)\n",
-              tf->trapno, cpu->id, tf->eip, rcr2());
-      panic("trap");
-    }
-    // In user space, assume process misbehaved.
-    cprintf("pid %d %s: trap %d err %d on cpu %d "
-80107122:	0f b6 f0             	movzbl %al,%esi
-            "eip 0x%x addr 0x%x--kill proc\n",
-            proc->pid, proc->name, tf->trapno, tf->err, cpu->id, tf->eip, 
-80107125:	8b 45 08             	mov    0x8(%ebp),%eax
-      cprintf("unexpected trap %d from cpu %d eip %x (cr2=0x%x)\n",
-              tf->trapno, cpu->id, tf->eip, rcr2());
-      panic("trap");
-    }
-    // In user space, assume process misbehaved.
-    cprintf("pid %d %s: trap %d err %d on cpu %d "
-80107128:	8b 58 34             	mov    0x34(%eax),%ebx
-            "eip 0x%x addr 0x%x--kill proc\n",
-            proc->pid, proc->name, tf->trapno, tf->err, cpu->id, tf->eip, 
-8010712b:	8b 45 08             	mov    0x8(%ebp),%eax
-      cprintf("unexpected trap %d from cpu %d eip %x (cr2=0x%x)\n",
-              tf->trapno, cpu->id, tf->eip, rcr2());
-      panic("trap");
-    }
-    // In user space, assume process misbehaved.
-    cprintf("pid %d %s: trap %d err %d on cpu %d "
-8010712e:	8b 48 30             	mov    0x30(%eax),%ecx
-            "eip 0x%x addr 0x%x--kill proc\n",
-            proc->pid, proc->name, tf->trapno, tf->err, cpu->id, tf->eip, 
-80107131:	65 a1 04 00 00 00    	mov    %gs:0x4,%eax
-80107137:	83 c0 70             	add    $0x70,%eax
-8010713a:	89 45 e4             	mov    %eax,-0x1c(%ebp)
-8010713d:	65 a1 04 00 00 00    	mov    %gs:0x4,%eax
-      cprintf("unexpected trap %d from cpu %d eip %x (cr2=0x%x)\n",
-              tf->trapno, cpu->id, tf->eip, rcr2());
-      panic("trap");
-    }
-    // In user space, assume process misbehaved.
-    cprintf("pid %d %s: trap %d err %d on cpu %d "
-80107143:	8b 40 10             	mov    0x10(%eax),%eax
-80107146:	89 54 24 1c          	mov    %edx,0x1c(%esp)
-8010714a:	89 7c 24 18          	mov    %edi,0x18(%esp)
-8010714e:	89 74 24 14          	mov    %esi,0x14(%esp)
-80107152:	89 5c 24 10          	mov    %ebx,0x10(%esp)
-80107156:	89 4c 24 0c          	mov    %ecx,0xc(%esp)
-8010715a:	8b 55 e4             	mov    -0x1c(%ebp),%edx
-8010715d:	89 54 24 08          	mov    %edx,0x8(%esp)
-80107161:	89 44 24 04          	mov    %eax,0x4(%esp)
-80107165:	c7 04 24 7c 96 10 80 	movl   $0x8010967c,(%esp)
-8010716c:	e8 30 92 ff ff       	call   801003a1 <cprintf>
-            "eip 0x%x addr 0x%x--kill proc\n",
-            proc->pid, proc->name, tf->trapno, tf->err, cpu->id, tf->eip, 
-            rcr2());
-    proc->killed = 1;
-80107171:	65 a1 04 00 00 00    	mov    %gs:0x4,%eax
-80107177:	c7 40 28 01 00 00 00 	movl   $0x1,0x28(%eax)
-8010717e:	eb 01                	jmp    80107181 <trap+0x209>
-    ideintr();
-    lapiceoi();
-    break;
-  case T_IRQ0 + IRQ_IDE+1:
-    // Bochs generates spurious IDE1 interrupts.
-    break;
-80107180:	90                   	nop
-  }
-
-  // Force process exit if it has been killed and is in user space.
-  // (If it is still executing in the kernel, let it keep running 
-  // until it gets to the regular system call return.)
-  if(proc && proc->killed && (tf->cs&3) == DPL_USER)
-80107181:	65 a1 04 00 00 00    	mov    %gs:0x4,%eax
-80107187:	85 c0                	test   %eax,%eax
-80107189:	74 2b                	je     801071b6 <trap+0x23e>
-8010718b:	65 a1 04 00 00 00    	mov    %gs:0x4,%eax
-80107191:	8b 40 28             	mov    0x28(%eax),%eax
-80107194:	85 c0                	test   %eax,%eax
-80107196:	74 1e                	je     801071b6 <trap+0x23e>
-80107198:	8b 45 08             	mov    0x8(%ebp),%eax
-8010719b:	0f b7 40 3c          	movzwl 0x3c(%eax),%eax
-8010719f:	0f b7 c0             	movzwl %ax,%eax
-801071a2:	83 e0 03             	and    $0x3,%eax
-801071a5:	83 f8 03             	cmp    $0x3,%eax
-801071a8:	75 0c                	jne    801071b6 <trap+0x23e>
-    exit(EXIT_STATUS_DEFAULT);
-801071aa:	c7 04 24 02 00 00 00 	movl   $0x2,(%esp)
-801071b1:	e8 af d6 ff ff       	call   80104865 <exit>
-
-#ifndef FCFS //all policies are preemptive besides FCFS
-  // Force process to give up CPU on <QUANTA> clock tick.
-  // If interrupts were on while locks held, would need to check nlock.
-  if(proc && proc->state == RUNNING && tf->trapno == T_IRQ0+IRQ_TIMER){
-801071b6:	65 a1 04 00 00 00    	mov    %gs:0x4,%eax
-801071bc:	85 c0                	test   %eax,%eax
-801071be:	74 3f                	je     801071ff <trap+0x287>
-801071c0:	65 a1 04 00 00 00    	mov    %gs:0x4,%eax
-801071c6:	8b 40 0c             	mov    0xc(%eax),%eax
-801071c9:	83 f8 04             	cmp    $0x4,%eax
-801071cc:	75 31                	jne    801071ff <trap+0x287>
-801071ce:	8b 45 08             	mov    0x8(%ebp),%eax
-801071d1:	8b 40 30             	mov    0x30(%eax),%eax
-801071d4:	83 f8 20             	cmp    $0x20,%eax
-801071d7:	75 26                	jne    801071ff <trap+0x287>
-	    if( !(ticks % QUANTA) ) yield();
-801071d9:	8b 0d 00 6a 11 80    	mov    0x80116a00,%ecx
-801071df:	ba cd cc cc cc       	mov    $0xcccccccd,%edx
-801071e4:	89 c8                	mov    %ecx,%eax
-801071e6:	f7 e2                	mul    %edx
-801071e8:	c1 ea 02             	shr    $0x2,%edx
-801071eb:	89 d0                	mov    %edx,%eax
-801071ed:	c1 e0 02             	shl    $0x2,%eax
-801071f0:	01 d0                	add    %edx,%eax
-801071f2:	89 ca                	mov    %ecx,%edx
-801071f4:	29 c2                	sub    %eax,%edx
-801071f6:	85 d2                	test   %edx,%edx
-801071f8:	75 05                	jne    801071ff <trap+0x287>
-801071fa:	e8 e4 de ff ff       	call   801050e3 <yield>
-  }
-#endif
-
-  // Check if the process has been killed since we yielded
-  if(proc && proc->killed && (tf->cs&3) == DPL_USER)
-801071ff:	65 a1 04 00 00 00    	mov    %gs:0x4,%eax
-80107205:	85 c0                	test   %eax,%eax
-80107207:	74 2e                	je     80107237 <trap+0x2bf>
-80107209:	65 a1 04 00 00 00    	mov    %gs:0x4,%eax
-8010720f:	8b 40 28             	mov    0x28(%eax),%eax
-80107212:	85 c0                	test   %eax,%eax
-80107214:	74 21                	je     80107237 <trap+0x2bf>
-80107216:	8b 45 08             	mov    0x8(%ebp),%eax
-80107219:	0f b7 40 3c          	movzwl 0x3c(%eax),%eax
-8010721d:	0f b7 c0             	movzwl %ax,%eax
-80107220:	83 e0 03             	and    $0x3,%eax
-80107223:	83 f8 03             	cmp    $0x3,%eax
-80107226:	75 0f                	jne    80107237 <trap+0x2bf>
-    exit(EXIT_STATUS_DEFAULT);
-80107228:	c7 04 24 02 00 00 00 	movl   $0x2,(%esp)
-8010722f:	e8 31 d6 ff ff       	call   80104865 <exit>
-80107234:	eb 01                	jmp    80107237 <trap+0x2bf>
-      exit(EXIT_STATUS_DEFAULT);
-    proc->tf = tf;
-    syscall();
-    if(proc->killed)
-      exit(EXIT_STATUS_DEFAULT);
-    return;
-80107236:	90                   	nop
-#endif
-
-  // Check if the process has been killed since we yielded
-  if(proc && proc->killed && (tf->cs&3) == DPL_USER)
-    exit(EXIT_STATUS_DEFAULT);
-}
-80107237:	83 c4 3c             	add    $0x3c,%esp
-8010723a:	5b                   	pop    %ebx
-8010723b:	5e                   	pop    %esi
-8010723c:	5f                   	pop    %edi
-8010723d:	5d                   	pop    %ebp
-8010723e:	c3                   	ret    
-	...
-
-80107240 <inb>:
-// Routines to let C code use special x86 instructions.
-
-static inline uchar
-inb(ushort port)
-{
-80107240:	55                   	push   %ebp
-80107241:	89 e5                	mov    %esp,%ebp
-80107243:	53                   	push   %ebx
-80107244:	83 ec 14             	sub    $0x14,%esp
-80107247:	8b 45 08             	mov    0x8(%ebp),%eax
-8010724a:	66 89 45 e8          	mov    %ax,-0x18(%ebp)
-  uchar data;
-
-  asm volatile("in %1,%0" : "=a" (data) : "d" (port));
-8010724e:	0f b7 55 e8          	movzwl -0x18(%ebp),%edx
-80107252:	66 89 55 ea          	mov    %dx,-0x16(%ebp)
-80107256:	0f b7 55 ea          	movzwl -0x16(%ebp),%edx
-8010725a:	ec                   	in     (%dx),%al
-8010725b:	89 c3                	mov    %eax,%ebx
-8010725d:	88 5d fb             	mov    %bl,-0x5(%ebp)
-  return data;
-80107260:	0f b6 45 fb          	movzbl -0x5(%ebp),%eax
-}
-80107264:	83 c4 14             	add    $0x14,%esp
-80107267:	5b                   	pop    %ebx
-80107268:	5d                   	pop    %ebp
-80107269:	c3                   	ret    
-
-8010726a <outb>:
-               "memory", "cc");
-}
-
-static inline void
-outb(ushort port, uchar data)
-{
-8010726a:	55                   	push   %ebp
-8010726b:	89 e5                	mov    %esp,%ebp
-8010726d:	83 ec 08             	sub    $0x8,%esp
-80107270:	8b 55 08             	mov    0x8(%ebp),%edx
-80107273:	8b 45 0c             	mov    0xc(%ebp),%eax
-80107276:	66 89 55 fc          	mov    %dx,-0x4(%ebp)
-8010727a:	88 45 f8             	mov    %al,-0x8(%ebp)
-  asm volatile("out %0,%1" : : "a" (data), "d" (port));
-8010727d:	0f b6 45 f8          	movzbl -0x8(%ebp),%eax
-80107281:	0f b7 55 fc          	movzwl -0x4(%ebp),%edx
-80107285:	ee                   	out    %al,(%dx)
-}
-80107286:	c9                   	leave  
-80107287:	c3                   	ret    
-
-80107288 <uartinit>:
-
-static int uart;    // is there a uart?
-
-void
-uartinit(void)
-{
-80107288:	55                   	push   %ebp
-80107289:	89 e5                	mov    %esp,%ebp
-8010728b:	83 ec 28             	sub    $0x28,%esp
-  char *p;
-
-  // Turn off the FIFO
-  outb(COM1+2, 0);
-8010728e:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
-80107295:	00 
-80107296:	c7 04 24 fa 03 00 00 	movl   $0x3fa,(%esp)
-8010729d:	e8 c8 ff ff ff       	call   8010726a <outb>
-  
-  // 9600 baud, 8 data bits, 1 stop bit, parity off.
-  outb(COM1+3, 0x80);    // Unlock divisor
-801072a2:	c7 44 24 04 80 00 00 	movl   $0x80,0x4(%esp)
-801072a9:	00 
-801072aa:	c7 04 24 fb 03 00 00 	movl   $0x3fb,(%esp)
-801072b1:	e8 b4 ff ff ff       	call   8010726a <outb>
-  outb(COM1+0, 115200/9600);
-801072b6:	c7 44 24 04 0c 00 00 	movl   $0xc,0x4(%esp)
-801072bd:	00 
-801072be:	c7 04 24 f8 03 00 00 	movl   $0x3f8,(%esp)
-801072c5:	e8 a0 ff ff ff       	call   8010726a <outb>
-  outb(COM1+1, 0);
-801072ca:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
-801072d1:	00 
-801072d2:	c7 04 24 f9 03 00 00 	movl   $0x3f9,(%esp)
-801072d9:	e8 8c ff ff ff       	call   8010726a <outb>
-  outb(COM1+3, 0x03);    // Lock divisor, 8 data bits.
-801072de:	c7 44 24 04 03 00 00 	movl   $0x3,0x4(%esp)
-801072e5:	00 
-801072e6:	c7 04 24 fb 03 00 00 	movl   $0x3fb,(%esp)
-801072ed:	e8 78 ff ff ff       	call   8010726a <outb>
-  outb(COM1+4, 0);
-801072f2:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
-801072f9:	00 
-801072fa:	c7 04 24 fc 03 00 00 	movl   $0x3fc,(%esp)
-80107301:	e8 64 ff ff ff       	call   8010726a <outb>
-  outb(COM1+1, 0x01);    // Enable receive interrupts.
-80107306:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
-8010730d:	00 
-8010730e:	c7 04 24 f9 03 00 00 	movl   $0x3f9,(%esp)
-80107315:	e8 50 ff ff ff       	call   8010726a <outb>
-
-  // If status is 0xFF, no serial port.
-  if(inb(COM1+5) == 0xFF)
-8010731a:	c7 04 24 fd 03 00 00 	movl   $0x3fd,(%esp)
-80107321:	e8 1a ff ff ff       	call   80107240 <inb>
-80107326:	3c ff                	cmp    $0xff,%al
-80107328:	74 6c                	je     80107396 <uartinit+0x10e>
-    return;
-  uart = 1;
-8010732a:	c7 05 6c c6 10 80 01 	movl   $0x1,0x8010c66c
-80107331:	00 00 00 
-
-  // Acknowledge pre-existing interrupt conditions;
-  // enable interrupts.
-  inb(COM1+2);
-80107334:	c7 04 24 fa 03 00 00 	movl   $0x3fa,(%esp)
-8010733b:	e8 00 ff ff ff       	call   80107240 <inb>
-  inb(COM1+0);
-80107340:	c7 04 24 f8 03 00 00 	movl   $0x3f8,(%esp)
-80107347:	e8 f4 fe ff ff       	call   80107240 <inb>
-  picenable(IRQ_COM1);
-8010734c:	c7 04 24 04 00 00 00 	movl   $0x4,(%esp)
-80107353:	e8 1d cb ff ff       	call   80103e75 <picenable>
-  ioapicenable(IRQ_COM1, 0);
-80107358:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
-8010735f:	00 
-80107360:	c7 04 24 04 00 00 00 	movl   $0x4,(%esp)
-80107367:	e8 72 b6 ff ff       	call   801029de <ioapicenable>
-  
-  // Announce that we're here.
-  for(p="xv6...\n"; *p; p++)
-8010736c:	c7 45 f4 40 97 10 80 	movl   $0x80109740,-0xc(%ebp)
-80107373:	eb 15                	jmp    8010738a <uartinit+0x102>
-    uartputc(*p);
-80107375:	8b 45 f4             	mov    -0xc(%ebp),%eax
-80107378:	0f b6 00             	movzbl (%eax),%eax
-8010737b:	0f be c0             	movsbl %al,%eax
-8010737e:	89 04 24             	mov    %eax,(%esp)
-80107381:	e8 13 00 00 00       	call   80107399 <uartputc>
-  inb(COM1+0);
-  picenable(IRQ_COM1);
-  ioapicenable(IRQ_COM1, 0);
-  
-  // Announce that we're here.
-  for(p="xv6...\n"; *p; p++)
-80107386:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
-8010738a:	8b 45 f4             	mov    -0xc(%ebp),%eax
-8010738d:	0f b6 00             	movzbl (%eax),%eax
-80107390:	84 c0                	test   %al,%al
-80107392:	75 e1                	jne    80107375 <uartinit+0xed>
-80107394:	eb 01                	jmp    80107397 <uartinit+0x10f>
-  outb(COM1+4, 0);
-  outb(COM1+1, 0x01);    // Enable receive interrupts.
-
-  // If status is 0xFF, no serial port.
-  if(inb(COM1+5) == 0xFF)
-    return;
-80107396:	90                   	nop
-  ioapicenable(IRQ_COM1, 0);
-  
-  // Announce that we're here.
-  for(p="xv6...\n"; *p; p++)
-    uartputc(*p);
-}
-80107397:	c9                   	leave  
-80107398:	c3                   	ret    
-
-80107399 <uartputc>:
-
-void
-uartputc(int c)
-{
-80107399:	55                   	push   %ebp
-8010739a:	89 e5                	mov    %esp,%ebp
-8010739c:	83 ec 28             	sub    $0x28,%esp
-  int i;
-
-  if(!uart)
-8010739f:	a1 6c c6 10 80       	mov    0x8010c66c,%eax
-801073a4:	85 c0                	test   %eax,%eax
-801073a6:	74 4d                	je     801073f5 <uartputc+0x5c>
-    return;
-  for(i = 0; i < 128 && !(inb(COM1+5) & 0x20); i++)
-801073a8:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
-801073af:	eb 10                	jmp    801073c1 <uartputc+0x28>
-    microdelay(10);
-801073b1:	c7 04 24 0a 00 00 00 	movl   $0xa,(%esp)
-801073b8:	e8 e3 bb ff ff       	call   80102fa0 <microdelay>
-{
-  int i;
-
-  if(!uart)
-    return;
-  for(i = 0; i < 128 && !(inb(COM1+5) & 0x20); i++)
-801073bd:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
-801073c1:	83 7d f4 7f          	cmpl   $0x7f,-0xc(%ebp)
-801073c5:	7f 16                	jg     801073dd <uartputc+0x44>
-801073c7:	c7 04 24 fd 03 00 00 	movl   $0x3fd,(%esp)
-801073ce:	e8 6d fe ff ff       	call   80107240 <inb>
-801073d3:	0f b6 c0             	movzbl %al,%eax
-801073d6:	83 e0 20             	and    $0x20,%eax
-801073d9:	85 c0                	test   %eax,%eax
-801073db:	74 d4                	je     801073b1 <uartputc+0x18>
-    microdelay(10);
-  outb(COM1+0, c);
-801073dd:	8b 45 08             	mov    0x8(%ebp),%eax
-801073e0:	0f b6 c0             	movzbl %al,%eax
-801073e3:	89 44 24 04          	mov    %eax,0x4(%esp)
-801073e7:	c7 04 24 f8 03 00 00 	movl   $0x3f8,(%esp)
-801073ee:	e8 77 fe ff ff       	call   8010726a <outb>
-801073f3:	eb 01                	jmp    801073f6 <uartputc+0x5d>
-uartputc(int c)
-{
-  int i;
-
-  if(!uart)
-    return;
-801073f5:	90                   	nop
-  for(i = 0; i < 128 && !(inb(COM1+5) & 0x20); i++)
-    microdelay(10);
-  outb(COM1+0, c);
-}
-801073f6:	c9                   	leave  
-801073f7:	c3                   	ret    
-
-801073f8 <uartgetc>:
-
-static int
-uartgetc(void)
-{
-801073f8:	55                   	push   %ebp
-801073f9:	89 e5                	mov    %esp,%ebp
-801073fb:	83 ec 04             	sub    $0x4,%esp
-  if(!uart)
-801073fe:	a1 6c c6 10 80       	mov    0x8010c66c,%eax
-80107403:	85 c0                	test   %eax,%eax
-80107405:	75 07                	jne    8010740e <uartgetc+0x16>
-    return -1;
-80107407:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
-8010740c:	eb 2c                	jmp    8010743a <uartgetc+0x42>
-  if(!(inb(COM1+5) & 0x01))
-8010740e:	c7 04 24 fd 03 00 00 	movl   $0x3fd,(%esp)
-80107415:	e8 26 fe ff ff       	call   80107240 <inb>
-8010741a:	0f b6 c0             	movzbl %al,%eax
-8010741d:	83 e0 01             	and    $0x1,%eax
-80107420:	85 c0                	test   %eax,%eax
-80107422:	75 07                	jne    8010742b <uartgetc+0x33>
-    return -1;
-80107424:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
-80107429:	eb 0f                	jmp    8010743a <uartgetc+0x42>
-  return inb(COM1+0);
-8010742b:	c7 04 24 f8 03 00 00 	movl   $0x3f8,(%esp)
-80107432:	e8 09 fe ff ff       	call   80107240 <inb>
-80107437:	0f b6 c0             	movzbl %al,%eax
-}
-8010743a:	c9                   	leave  
-8010743b:	c3                   	ret    
-
-8010743c <uartintr>:
-
-void
-uartintr(void)
-{
-8010743c:	55                   	push   %ebp
-8010743d:	89 e5                	mov    %esp,%ebp
-8010743f:	83 ec 18             	sub    $0x18,%esp
-  consoleintr(uartgetc);
-80107442:	c7 04 24 f8 73 10 80 	movl   $0x801073f8,(%esp)
-80107449:	e8 5f 93 ff ff       	call   801007ad <consoleintr>
-}
-8010744e:	c9                   	leave  
-8010744f:	c3                   	ret    
-
-80107450 <vector0>:
-# generated by vectors.pl - do not edit
-# handlers
-.globl alltraps
-.globl vector0
-vector0:
-  pushl $0
-80107450:	6a 00                	push   $0x0
-  pushl $0
-80107452:	6a 00                	push   $0x0
-  jmp alltraps
-80107454:	e9 87 f8 ff ff       	jmp    80106ce0 <alltraps>
-
-80107459 <vector1>:
-.globl vector1
-vector1:
-  pushl $0
-80107459:	6a 00                	push   $0x0
-  pushl $1
-8010745b:	6a 01                	push   $0x1
-  jmp alltraps
-8010745d:	e9 7e f8 ff ff       	jmp    80106ce0 <alltraps>
-
-80107462 <vector2>:
-.globl vector2
-vector2:
-  pushl $0
-80107462:	6a 00                	push   $0x0
-  pushl $2
-80107464:	6a 02                	push   $0x2
-  jmp alltraps
-80107466:	e9 75 f8 ff ff       	jmp    80106ce0 <alltraps>
-
-8010746b <vector3>:
-.globl vector3
-vector3:
-  pushl $0
-8010746b:	6a 00                	push   $0x0
-  pushl $3
-8010746d:	6a 03                	push   $0x3
-  jmp alltraps
-8010746f:	e9 6c f8 ff ff       	jmp    80106ce0 <alltraps>
-
-80107474 <vector4>:
-.globl vector4
-vector4:
-  pushl $0
-80107474:	6a 00                	push   $0x0
-  pushl $4
-80107476:	6a 04                	push   $0x4
-  jmp alltraps
-80107478:	e9 63 f8 ff ff       	jmp    80106ce0 <alltraps>
-
-8010747d <vector5>:
-.globl vector5
-vector5:
-  pushl $0
-8010747d:	6a 00                	push   $0x0
-  pushl $5
-8010747f:	6a 05                	push   $0x5
-  jmp alltraps
-80107481:	e9 5a f8 ff ff       	jmp    80106ce0 <alltraps>
-
-80107486 <vector6>:
-.globl vector6
-vector6:
-  pushl $0
-80107486:	6a 00                	push   $0x0
-  pushl $6
-80107488:	6a 06                	push   $0x6
-  jmp alltraps
-8010748a:	e9 51 f8 ff ff       	jmp    80106ce0 <alltraps>
-
-8010748f <vector7>:
-.globl vector7
-vector7:
-  pushl $0
-8010748f:	6a 00                	push   $0x0
-  pushl $7
-80107491:	6a 07                	push   $0x7
-  jmp alltraps
-80107493:	e9 48 f8 ff ff       	jmp    80106ce0 <alltraps>
-
-80107498 <vector8>:
-.globl vector8
-vector8:
-  pushl $8
-80107498:	6a 08                	push   $0x8
-  jmp alltraps
-8010749a:	e9 41 f8 ff ff       	jmp    80106ce0 <alltraps>
-
-8010749f <vector9>:
-.globl vector9
-vector9:
-  pushl $0
-8010749f:	6a 00                	push   $0x0
-  pushl $9
-801074a1:	6a 09                	push   $0x9
-  jmp alltraps
-801074a3:	e9 38 f8 ff ff       	jmp    80106ce0 <alltraps>
-
-801074a8 <vector10>:
-.globl vector10
-vector10:
-  pushl $10
-801074a8:	6a 0a                	push   $0xa
-  jmp alltraps
-801074aa:	e9 31 f8 ff ff       	jmp    80106ce0 <alltraps>
-
-801074af <vector11>:
-.globl vector11
-vector11:
-  pushl $11
-801074af:	6a 0b                	push   $0xb
-  jmp alltraps
-801074b1:	e9 2a f8 ff ff       	jmp    80106ce0 <alltraps>
-
-801074b6 <vector12>:
-.globl vector12
-vector12:
-  pushl $12
-801074b6:	6a 0c                	push   $0xc
-  jmp alltraps
-801074b8:	e9 23 f8 ff ff       	jmp    80106ce0 <alltraps>
-
-801074bd <vector13>:
-.globl vector13
-vector13:
-  pushl $13
-801074bd:	6a 0d                	push   $0xd
-  jmp alltraps
-801074bf:	e9 1c f8 ff ff       	jmp    80106ce0 <alltraps>
-
-801074c4 <vector14>:
-.globl vector14
-vector14:
-  pushl $14
-801074c4:	6a 0e                	push   $0xe
-  jmp alltraps
-801074c6:	e9 15 f8 ff ff       	jmp    80106ce0 <alltraps>
-
-801074cb <vector15>:
-.globl vector15
-vector15:
-  pushl $0
-801074cb:	6a 00                	push   $0x0
-  pushl $15
-801074cd:	6a 0f                	push   $0xf
-  jmp alltraps
-801074cf:	e9 0c f8 ff ff       	jmp    80106ce0 <alltraps>
-
-801074d4 <vector16>:
-.globl vector16
-vector16:
-  pushl $0
-801074d4:	6a 00                	push   $0x0
-  pushl $16
-801074d6:	6a 10                	push   $0x10
-  jmp alltraps
-801074d8:	e9 03 f8 ff ff       	jmp    80106ce0 <alltraps>
-
-801074dd <vector17>:
-.globl vector17
-vector17:
-  pushl $17
-801074dd:	6a 11                	push   $0x11
-  jmp alltraps
-801074df:	e9 fc f7 ff ff       	jmp    80106ce0 <alltraps>
-
-801074e4 <vector18>:
-.globl vector18
-vector18:
-  pushl $0
-801074e4:	6a 00                	push   $0x0
-  pushl $18
-801074e6:	6a 12                	push   $0x12
-  jmp alltraps
-801074e8:	e9 f3 f7 ff ff       	jmp    80106ce0 <alltraps>
-
-801074ed <vector19>:
-.globl vector19
-vector19:
-  pushl $0
-801074ed:	6a 00                	push   $0x0
-  pushl $19
-801074ef:	6a 13                	push   $0x13
-  jmp alltraps
-801074f1:	e9 ea f7 ff ff       	jmp    80106ce0 <alltraps>
-
-801074f6 <vector20>:
-.globl vector20
-vector20:
-  pushl $0
-801074f6:	6a 00                	push   $0x0
-  pushl $20
-801074f8:	6a 14                	push   $0x14
-  jmp alltraps
-801074fa:	e9 e1 f7 ff ff       	jmp    80106ce0 <alltraps>
-
-801074ff <vector21>:
-.globl vector21
-vector21:
-  pushl $0
-801074ff:	6a 00                	push   $0x0
-  pushl $21
-80107501:	6a 15                	push   $0x15
-  jmp alltraps
-80107503:	e9 d8 f7 ff ff       	jmp    80106ce0 <alltraps>
-
-80107508 <vector22>:
-.globl vector22
-vector22:
-  pushl $0
-80107508:	6a 00                	push   $0x0
-  pushl $22
-8010750a:	6a 16                	push   $0x16
-  jmp alltraps
-8010750c:	e9 cf f7 ff ff       	jmp    80106ce0 <alltraps>
-
-80107511 <vector23>:
-.globl vector23
-vector23:
-  pushl $0
-80107511:	6a 00                	push   $0x0
-  pushl $23
-80107513:	6a 17                	push   $0x17
-  jmp alltraps
-80107515:	e9 c6 f7 ff ff       	jmp    80106ce0 <alltraps>
-
-8010751a <vector24>:
-.globl vector24
-vector24:
-  pushl $0
-8010751a:	6a 00                	push   $0x0
-  pushl $24
-8010751c:	6a 18                	push   $0x18
-  jmp alltraps
-8010751e:	e9 bd f7 ff ff       	jmp    80106ce0 <alltraps>
-
-80107523 <vector25>:
-.globl vector25
-vector25:
-  pushl $0
-80107523:	6a 00                	push   $0x0
-  pushl $25
-80107525:	6a 19                	push   $0x19
-  jmp alltraps
-80107527:	e9 b4 f7 ff ff       	jmp    80106ce0 <alltraps>
-
-8010752c <vector26>:
-.globl vector26
-vector26:
-  pushl $0
-8010752c:	6a 00                	push   $0x0
-  pushl $26
-8010752e:	6a 1a                	push   $0x1a
-  jmp alltraps
-80107530:	e9 ab f7 ff ff       	jmp    80106ce0 <alltraps>
-
-80107535 <vector27>:
-.globl vector27
-vector27:
-  pushl $0
-80107535:	6a 00                	push   $0x0
-  pushl $27
-80107537:	6a 1b                	push   $0x1b
-  jmp alltraps
-80107539:	e9 a2 f7 ff ff       	jmp    80106ce0 <alltraps>
-
-8010753e <vector28>:
-.globl vector28
-vector28:
-  pushl $0
-8010753e:	6a 00                	push   $0x0
-  pushl $28
-80107540:	6a 1c                	push   $0x1c
-  jmp alltraps
-80107542:	e9 99 f7 ff ff       	jmp    80106ce0 <alltraps>
-
-80107547 <vector29>:
-.globl vector29
-vector29:
-  pushl $0
-80107547:	6a 00                	push   $0x0
-  pushl $29
-80107549:	6a 1d                	push   $0x1d
-  jmp alltraps
-8010754b:	e9 90 f7 ff ff       	jmp    80106ce0 <alltraps>
-
-80107550 <vector30>:
-.globl vector30
-vector30:
-  pushl $0
-80107550:	6a 00                	push   $0x0
-  pushl $30
-80107552:	6a 1e                	push   $0x1e
-  jmp alltraps
-80107554:	e9 87 f7 ff ff       	jmp    80106ce0 <alltraps>
-
-80107559 <vector31>:
-.globl vector31
-vector31:
-  pushl $0
-80107559:	6a 00                	push   $0x0
-  pushl $31
-8010755b:	6a 1f                	push   $0x1f
-  jmp alltraps
-8010755d:	e9 7e f7 ff ff       	jmp    80106ce0 <alltraps>
-
-80107562 <vector32>:
-.globl vector32
-vector32:
-  pushl $0
-80107562:	6a 00                	push   $0x0
-  pushl $32
-80107564:	6a 20                	push   $0x20
-  jmp alltraps
-80107566:	e9 75 f7 ff ff       	jmp    80106ce0 <alltraps>
-
-8010756b <vector33>:
-.globl vector33
-vector33:
-  pushl $0
-8010756b:	6a 00                	push   $0x0
-  pushl $33
-8010756d:	6a 21                	push   $0x21
-  jmp alltraps
-8010756f:	e9 6c f7 ff ff       	jmp    80106ce0 <alltraps>
-
-80107574 <vector34>:
-.globl vector34
-vector34:
-  pushl $0
-80107574:	6a 00                	push   $0x0
-  pushl $34
-80107576:	6a 22                	push   $0x22
-  jmp alltraps
-80107578:	e9 63 f7 ff ff       	jmp    80106ce0 <alltraps>
-
-8010757d <vector35>:
-.globl vector35
-vector35:
-  pushl $0
-8010757d:	6a 00                	push   $0x0
-  pushl $35
-8010757f:	6a 23                	push   $0x23
-  jmp alltraps
-80107581:	e9 5a f7 ff ff       	jmp    80106ce0 <alltraps>
-
-80107586 <vector36>:
-.globl vector36
-vector36:
-  pushl $0
-80107586:	6a 00                	push   $0x0
-  pushl $36
-80107588:	6a 24                	push   $0x24
-  jmp alltraps
-8010758a:	e9 51 f7 ff ff       	jmp    80106ce0 <alltraps>
-
-8010758f <vector37>:
-.globl vector37
-vector37:
-  pushl $0
-8010758f:	6a 00                	push   $0x0
-  pushl $37
-80107591:	6a 25                	push   $0x25
-  jmp alltraps
-80107593:	e9 48 f7 ff ff       	jmp    80106ce0 <alltraps>
-
-80107598 <vector38>:
-.globl vector38
-vector38:
-  pushl $0
-80107598:	6a 00                	push   $0x0
-  pushl $38
-8010759a:	6a 26                	push   $0x26
-  jmp alltraps
-8010759c:	e9 3f f7 ff ff       	jmp    80106ce0 <alltraps>
-
-801075a1 <vector39>:
-.globl vector39
-vector39:
-  pushl $0
-801075a1:	6a 00                	push   $0x0
-  pushl $39
-801075a3:	6a 27                	push   $0x27
-  jmp alltraps
-801075a5:	e9 36 f7 ff ff       	jmp    80106ce0 <alltraps>
-
-801075aa <vector40>:
-.globl vector40
-vector40:
-  pushl $0
-801075aa:	6a 00                	push   $0x0
-  pushl $40
-801075ac:	6a 28                	push   $0x28
-  jmp alltraps
-801075ae:	e9 2d f7 ff ff       	jmp    80106ce0 <alltraps>
-
-801075b3 <vector41>:
-.globl vector41
-vector41:
-  pushl $0
-801075b3:	6a 00                	push   $0x0
-  pushl $41
-801075b5:	6a 29                	push   $0x29
-  jmp alltraps
-801075b7:	e9 24 f7 ff ff       	jmp    80106ce0 <alltraps>
-
-801075bc <vector42>:
-.globl vector42
-vector42:
-  pushl $0
-801075bc:	6a 00                	push   $0x0
-  pushl $42
-801075be:	6a 2a                	push   $0x2a
-  jmp alltraps
-801075c0:	e9 1b f7 ff ff       	jmp    80106ce0 <alltraps>
-
-801075c5 <vector43>:
-.globl vector43
-vector43:
-  pushl $0
-801075c5:	6a 00                	push   $0x0
-  pushl $43
-801075c7:	6a 2b                	push   $0x2b
-  jmp alltraps
-801075c9:	e9 12 f7 ff ff       	jmp    80106ce0 <alltraps>
-
-801075ce <vector44>:
-.globl vector44
-vector44:
-  pushl $0
-801075ce:	6a 00                	push   $0x0
-  pushl $44
-801075d0:	6a 2c                	push   $0x2c
-  jmp alltraps
-801075d2:	e9 09 f7 ff ff       	jmp    80106ce0 <alltraps>
-
-801075d7 <vector45>:
-.globl vector45
-vector45:
-  pushl $0
-801075d7:	6a 00                	push   $0x0
-  pushl $45
-801075d9:	6a 2d                	push   $0x2d
-  jmp alltraps
-801075db:	e9 00 f7 ff ff       	jmp    80106ce0 <alltraps>
-
-801075e0 <vector46>:
-.globl vector46
-vector46:
-  pushl $0
-801075e0:	6a 00                	push   $0x0
-  pushl $46
-801075e2:	6a 2e                	push   $0x2e
-  jmp alltraps
-801075e4:	e9 f7 f6 ff ff       	jmp    80106ce0 <alltraps>
-
-801075e9 <vector47>:
-.globl vector47
-vector47:
-  pushl $0
-801075e9:	6a 00                	push   $0x0
-  pushl $47
-801075eb:	6a 2f                	push   $0x2f
-  jmp alltraps
-801075ed:	e9 ee f6 ff ff       	jmp    80106ce0 <alltraps>
-
-801075f2 <vector48>:
-.globl vector48
-vector48:
-  pushl $0
-801075f2:	6a 00                	push   $0x0
-  pushl $48
-801075f4:	6a 30                	push   $0x30
-  jmp alltraps
-801075f6:	e9 e5 f6 ff ff       	jmp    80106ce0 <alltraps>
-
-801075fb <vector49>:
-.globl vector49
-vector49:
-  pushl $0
-801075fb:	6a 00                	push   $0x0
-  pushl $49
-801075fd:	6a 31                	push   $0x31
-  jmp alltraps
-801075ff:	e9 dc f6 ff ff       	jmp    80106ce0 <alltraps>
-
-80107604 <vector50>:
-.globl vector50
-vector50:
-  pushl $0
-80107604:	6a 00                	push   $0x0
-  pushl $50
-80107606:	6a 32                	push   $0x32
-  jmp alltraps
-80107608:	e9 d3 f6 ff ff       	jmp    80106ce0 <alltraps>
-
-8010760d <vector51>:
-.globl vector51
-vector51:
-  pushl $0
-8010760d:	6a 00                	push   $0x0
-  pushl $51
-8010760f:	6a 33                	push   $0x33
-  jmp alltraps
-80107611:	e9 ca f6 ff ff       	jmp    80106ce0 <alltraps>
-
-80107616 <vector52>:
-.globl vector52
-vector52:
-  pushl $0
-80107616:	6a 00                	push   $0x0
-  pushl $52
-80107618:	6a 34                	push   $0x34
-  jmp alltraps
-8010761a:	e9 c1 f6 ff ff       	jmp    80106ce0 <alltraps>
-
-8010761f <vector53>:
-.globl vector53
-vector53:
-  pushl $0
-8010761f:	6a 00                	push   $0x0
-  pushl $53
-80107621:	6a 35                	push   $0x35
-  jmp alltraps
-80107623:	e9 b8 f6 ff ff       	jmp    80106ce0 <alltraps>
-
-80107628 <vector54>:
-.globl vector54
-vector54:
-  pushl $0
-80107628:	6a 00                	push   $0x0
-  pushl $54
-8010762a:	6a 36                	push   $0x36
-  jmp alltraps
-8010762c:	e9 af f6 ff ff       	jmp    80106ce0 <alltraps>
-
-80107631 <vector55>:
-.globl vector55
-vector55:
-  pushl $0
-80107631:	6a 00                	push   $0x0
-  pushl $55
-80107633:	6a 37                	push   $0x37
-  jmp alltraps
-80107635:	e9 a6 f6 ff ff       	jmp    80106ce0 <alltraps>
-
-8010763a <vector56>:
-.globl vector56
-vector56:
-  pushl $0
-8010763a:	6a 00                	push   $0x0
-  pushl $56
-8010763c:	6a 38                	push   $0x38
-  jmp alltraps
-8010763e:	e9 9d f6 ff ff       	jmp    80106ce0 <alltraps>
-
-80107643 <vector57>:
-.globl vector57
-vector57:
-  pushl $0
-80107643:	6a 00                	push   $0x0
-  pushl $57
-80107645:	6a 39                	push   $0x39
-  jmp alltraps
-80107647:	e9 94 f6 ff ff       	jmp    80106ce0 <alltraps>
-
-8010764c <vector58>:
-.globl vector58
-vector58:
-  pushl $0
-8010764c:	6a 00                	push   $0x0
-  pushl $58
-8010764e:	6a 3a                	push   $0x3a
-  jmp alltraps
-80107650:	e9 8b f6 ff ff       	jmp    80106ce0 <alltraps>
-
-80107655 <vector59>:
-.globl vector59
-vector59:
-  pushl $0
-80107655:	6a 00                	push   $0x0
-  pushl $59
-80107657:	6a 3b                	push   $0x3b
-  jmp alltraps
-80107659:	e9 82 f6 ff ff       	jmp    80106ce0 <alltraps>
-
-8010765e <vector60>:
-.globl vector60
-vector60:
-  pushl $0
-8010765e:	6a 00                	push   $0x0
-  pushl $60
-80107660:	6a 3c                	push   $0x3c
-  jmp alltraps
-80107662:	e9 79 f6 ff ff       	jmp    80106ce0 <alltraps>
-
-80107667 <vector61>:
-.globl vector61
-vector61:
-  pushl $0
-80107667:	6a 00                	push   $0x0
-  pushl $61
-80107669:	6a 3d                	push   $0x3d
-  jmp alltraps
-8010766b:	e9 70 f6 ff ff       	jmp    80106ce0 <alltraps>
-
-80107670 <vector62>:
-.globl vector62
-vector62:
-  pushl $0
-80107670:	6a 00                	push   $0x0
-  pushl $62
-80107672:	6a 3e                	push   $0x3e
-  jmp alltraps
-80107674:	e9 67 f6 ff ff       	jmp    80106ce0 <alltraps>
-
-80107679 <vector63>:
-.globl vector63
-vector63:
-  pushl $0
-80107679:	6a 00                	push   $0x0
-  pushl $63
-8010767b:	6a 3f                	push   $0x3f
-  jmp alltraps
-8010767d:	e9 5e f6 ff ff       	jmp    80106ce0 <alltraps>
-
-80107682 <vector64>:
-.globl vector64
-vector64:
-  pushl $0
-80107682:	6a 00                	push   $0x0
-  pushl $64
-80107684:	6a 40                	push   $0x40
-  jmp alltraps
-80107686:	e9 55 f6 ff ff       	jmp    80106ce0 <alltraps>
-
-8010768b <vector65>:
-.globl vector65
-vector65:
-  pushl $0
-8010768b:	6a 00                	push   $0x0
-  pushl $65
-8010768d:	6a 41                	push   $0x41
-  jmp alltraps
-8010768f:	e9 4c f6 ff ff       	jmp    80106ce0 <alltraps>
-
-80107694 <vector66>:
-.globl vector66
-vector66:
-  pushl $0
-80107694:	6a 00                	push   $0x0
-  pushl $66
-80107696:	6a 42                	push   $0x42
-  jmp alltraps
-80107698:	e9 43 f6 ff ff       	jmp    80106ce0 <alltraps>
-
-8010769d <vector67>:
-.globl vector67
-vector67:
-  pushl $0
-8010769d:	6a 00                	push   $0x0
-  pushl $67
-8010769f:	6a 43                	push   $0x43
-  jmp alltraps
-801076a1:	e9 3a f6 ff ff       	jmp    80106ce0 <alltraps>
-
-801076a6 <vector68>:
-.globl vector68
-vector68:
-  pushl $0
-801076a6:	6a 00                	push   $0x0
-  pushl $68
-801076a8:	6a 44                	push   $0x44
-  jmp alltraps
-801076aa:	e9 31 f6 ff ff       	jmp    80106ce0 <alltraps>
-
-801076af <vector69>:
-.globl vector69
-vector69:
-  pushl $0
-801076af:	6a 00                	push   $0x0
-  pushl $69
-801076b1:	6a 45                	push   $0x45
-  jmp alltraps
-801076b3:	e9 28 f6 ff ff       	jmp    80106ce0 <alltraps>
-
-801076b8 <vector70>:
-.globl vector70
-vector70:
-  pushl $0
-801076b8:	6a 00                	push   $0x0
-  pushl $70
-801076ba:	6a 46                	push   $0x46
-  jmp alltraps
-801076bc:	e9 1f f6 ff ff       	jmp    80106ce0 <alltraps>
-
-801076c1 <vector71>:
-.globl vector71
-vector71:
-  pushl $0
-801076c1:	6a 00                	push   $0x0
-  pushl $71
-801076c3:	6a 47                	push   $0x47
-  jmp alltraps
-801076c5:	e9 16 f6 ff ff       	jmp    80106ce0 <alltraps>
-
-801076ca <vector72>:
-.globl vector72
-vector72:
-  pushl $0
-801076ca:	6a 00                	push   $0x0
-  pushl $72
-801076cc:	6a 48                	push   $0x48
-  jmp alltraps
-801076ce:	e9 0d f6 ff ff       	jmp    80106ce0 <alltraps>
-
-801076d3 <vector73>:
-.globl vector73
-vector73:
-  pushl $0
-801076d3:	6a 00                	push   $0x0
-  pushl $73
-801076d5:	6a 49                	push   $0x49
-  jmp alltraps
-801076d7:	e9 04 f6 ff ff       	jmp    80106ce0 <alltraps>
-
-801076dc <vector74>:
-.globl vector74
-vector74:
-  pushl $0
-801076dc:	6a 00                	push   $0x0
-  pushl $74
-801076de:	6a 4a                	push   $0x4a
-  jmp alltraps
-801076e0:	e9 fb f5 ff ff       	jmp    80106ce0 <alltraps>
-
-801076e5 <vector75>:
-.globl vector75
-vector75:
-  pushl $0
-801076e5:	6a 00                	push   $0x0
-  pushl $75
-801076e7:	6a 4b                	push   $0x4b
-  jmp alltraps
-801076e9:	e9 f2 f5 ff ff       	jmp    80106ce0 <alltraps>
-
-801076ee <vector76>:
-.globl vector76
-vector76:
-  pushl $0
-801076ee:	6a 00                	push   $0x0
-  pushl $76
-801076f0:	6a 4c                	push   $0x4c
-  jmp alltraps
-801076f2:	e9 e9 f5 ff ff       	jmp    80106ce0 <alltraps>
-
-801076f7 <vector77>:
-.globl vector77
-vector77:
-  pushl $0
-801076f7:	6a 00                	push   $0x0
-  pushl $77
-801076f9:	6a 4d                	push   $0x4d
-  jmp alltraps
-801076fb:	e9 e0 f5 ff ff       	jmp    80106ce0 <alltraps>
-
-80107700 <vector78>:
-.globl vector78
-vector78:
-  pushl $0
-80107700:	6a 00                	push   $0x0
-  pushl $78
-80107702:	6a 4e                	push   $0x4e
-  jmp alltraps
-80107704:	e9 d7 f5 ff ff       	jmp    80106ce0 <alltraps>
-
-80107709 <vector79>:
-.globl vector79
-vector79:
-  pushl $0
-80107709:	6a 00                	push   $0x0
-  pushl $79
-8010770b:	6a 4f                	push   $0x4f
-  jmp alltraps
-8010770d:	e9 ce f5 ff ff       	jmp    80106ce0 <alltraps>
-
-80107712 <vector80>:
-.globl vector80
-vector80:
-  pushl $0
-80107712:	6a 00                	push   $0x0
-  pushl $80
-80107714:	6a 50                	push   $0x50
-  jmp alltraps
-80107716:	e9 c5 f5 ff ff       	jmp    80106ce0 <alltraps>
-
-8010771b <vector81>:
-.globl vector81
-vector81:
-  pushl $0
-8010771b:	6a 00                	push   $0x0
-  pushl $81
-8010771d:	6a 51                	push   $0x51
-  jmp alltraps
-8010771f:	e9 bc f5 ff ff       	jmp    80106ce0 <alltraps>
-
-80107724 <vector82>:
-.globl vector82
-vector82:
-  pushl $0
-80107724:	6a 00                	push   $0x0
-  pushl $82
-80107726:	6a 52                	push   $0x52
-  jmp alltraps
-80107728:	e9 b3 f5 ff ff       	jmp    80106ce0 <alltraps>
-
-8010772d <vector83>:
-.globl vector83
-vector83:
-  pushl $0
-8010772d:	6a 00                	push   $0x0
-  pushl $83
-8010772f:	6a 53                	push   $0x53
-  jmp alltraps
-80107731:	e9 aa f5 ff ff       	jmp    80106ce0 <alltraps>
-
-80107736 <vector84>:
-.globl vector84
-vector84:
-  pushl $0
-80107736:	6a 00                	push   $0x0
-  pushl $84
-80107738:	6a 54                	push   $0x54
-  jmp alltraps
-8010773a:	e9 a1 f5 ff ff       	jmp    80106ce0 <alltraps>
-
-8010773f <vector85>:
-.globl vector85
-vector85:
-  pushl $0
-8010773f:	6a 00                	push   $0x0
-  pushl $85
-80107741:	6a 55                	push   $0x55
-  jmp alltraps
-80107743:	e9 98 f5 ff ff       	jmp    80106ce0 <alltraps>
-
-80107748 <vector86>:
-.globl vector86
-vector86:
-  pushl $0
-80107748:	6a 00                	push   $0x0
-  pushl $86
-8010774a:	6a 56                	push   $0x56
-  jmp alltraps
-8010774c:	e9 8f f5 ff ff       	jmp    80106ce0 <alltraps>
-
-80107751 <vector87>:
-.globl vector87
-vector87:
-  pushl $0
-80107751:	6a 00                	push   $0x0
-  pushl $87
-80107753:	6a 57                	push   $0x57
-  jmp alltraps
-80107755:	e9 86 f5 ff ff       	jmp    80106ce0 <alltraps>
-
-8010775a <vector88>:
-.globl vector88
-vector88:
-  pushl $0
-8010775a:	6a 00                	push   $0x0
-  pushl $88
-8010775c:	6a 58                	push   $0x58
-  jmp alltraps
-8010775e:	e9 7d f5 ff ff       	jmp    80106ce0 <alltraps>
-
-80107763 <vector89>:
-.globl vector89
-vector89:
-  pushl $0
-80107763:	6a 00                	push   $0x0
-  pushl $89
-80107765:	6a 59                	push   $0x59
-  jmp alltraps
-80107767:	e9 74 f5 ff ff       	jmp    80106ce0 <alltraps>
-
-8010776c <vector90>:
-.globl vector90
-vector90:
-  pushl $0
-8010776c:	6a 00                	push   $0x0
-  pushl $90
-8010776e:	6a 5a                	push   $0x5a
-  jmp alltraps
-80107770:	e9 6b f5 ff ff       	jmp    80106ce0 <alltraps>
-
-80107775 <vector91>:
-.globl vector91
-vector91:
-  pushl $0
-80107775:	6a 00                	push   $0x0
-  pushl $91
-80107777:	6a 5b                	push   $0x5b
-  jmp alltraps
-80107779:	e9 62 f5 ff ff       	jmp    80106ce0 <alltraps>
-
-8010777e <vector92>:
-.globl vector92
-vector92:
-  pushl $0
-8010777e:	6a 00                	push   $0x0
-  pushl $92
-80107780:	6a 5c                	push   $0x5c
-  jmp alltraps
-80107782:	e9 59 f5 ff ff       	jmp    80106ce0 <alltraps>
-
-80107787 <vector93>:
-.globl vector93
-vector93:
-  pushl $0
-80107787:	6a 00                	push   $0x0
-  pushl $93
-80107789:	6a 5d                	push   $0x5d
-  jmp alltraps
-8010778b:	e9 50 f5 ff ff       	jmp    80106ce0 <alltraps>
-
-80107790 <vector94>:
-.globl vector94
-vector94:
-  pushl $0
-80107790:	6a 00                	push   $0x0
-  pushl $94
-80107792:	6a 5e                	push   $0x5e
-  jmp alltraps
-80107794:	e9 47 f5 ff ff       	jmp    80106ce0 <alltraps>
-
-80107799 <vector95>:
-.globl vector95
-vector95:
-  pushl $0
-80107799:	6a 00                	push   $0x0
-  pushl $95
-8010779b:	6a 5f                	push   $0x5f
-  jmp alltraps
-8010779d:	e9 3e f5 ff ff       	jmp    80106ce0 <alltraps>
-
-801077a2 <vector96>:
-.globl vector96
-vector96:
-  pushl $0
-801077a2:	6a 00                	push   $0x0
-  pushl $96
-801077a4:	6a 60                	push   $0x60
-  jmp alltraps
-801077a6:	e9 35 f5 ff ff       	jmp    80106ce0 <alltraps>
-
-801077ab <vector97>:
-.globl vector97
-vector97:
-  pushl $0
-801077ab:	6a 00                	push   $0x0
-  pushl $97
-801077ad:	6a 61                	push   $0x61
-  jmp alltraps
-801077af:	e9 2c f5 ff ff       	jmp    80106ce0 <alltraps>
-
-801077b4 <vector98>:
-.globl vector98
-vector98:
-  pushl $0
-801077b4:	6a 00                	push   $0x0
-  pushl $98
-801077b6:	6a 62                	push   $0x62
-  jmp alltraps
-801077b8:	e9 23 f5 ff ff       	jmp    80106ce0 <alltraps>
-
-801077bd <vector99>:
-.globl vector99
-vector99:
-  pushl $0
-801077bd:	6a 00                	push   $0x0
-  pushl $99
-801077bf:	6a 63                	push   $0x63
-  jmp alltraps
-801077c1:	e9 1a f5 ff ff       	jmp    80106ce0 <alltraps>
-
-801077c6 <vector100>:
-.globl vector100
-vector100:
-  pushl $0
-801077c6:	6a 00                	push   $0x0
-  pushl $100
-801077c8:	6a 64                	push   $0x64
-  jmp alltraps
-801077ca:	e9 11 f5 ff ff       	jmp    80106ce0 <alltraps>
-
-801077cf <vector101>:
-.globl vector101
-vector101:
-  pushl $0
-801077cf:	6a 00                	push   $0x0
-  pushl $101
-801077d1:	6a 65                	push   $0x65
-  jmp alltraps
-801077d3:	e9 08 f5 ff ff       	jmp    80106ce0 <alltraps>
-
-801077d8 <vector102>:
-.globl vector102
-vector102:
-  pushl $0
-801077d8:	6a 00                	push   $0x0
-  pushl $102
-801077da:	6a 66                	push   $0x66
-  jmp alltraps
-801077dc:	e9 ff f4 ff ff       	jmp    80106ce0 <alltraps>
-
-801077e1 <vector103>:
-.globl vector103
-vector103:
-  pushl $0
-801077e1:	6a 00                	push   $0x0
-  pushl $103
-801077e3:	6a 67                	push   $0x67
-  jmp alltraps
-801077e5:	e9 f6 f4 ff ff       	jmp    80106ce0 <alltraps>
-
-801077ea <vector104>:
-.globl vector104
-vector104:
-  pushl $0
-801077ea:	6a 00                	push   $0x0
-  pushl $104
-801077ec:	6a 68                	push   $0x68
-  jmp alltraps
-801077ee:	e9 ed f4 ff ff       	jmp    80106ce0 <alltraps>
-
-801077f3 <vector105>:
-.globl vector105
-vector105:
-  pushl $0
-801077f3:	6a 00                	push   $0x0
-  pushl $105
-801077f5:	6a 69                	push   $0x69
-  jmp alltraps
-801077f7:	e9 e4 f4 ff ff       	jmp    80106ce0 <alltraps>
-
-801077fc <vector106>:
-.globl vector106
-vector106:
-  pushl $0
-801077fc:	6a 00                	push   $0x0
-  pushl $106
-801077fe:	6a 6a                	push   $0x6a
-  jmp alltraps
-80107800:	e9 db f4 ff ff       	jmp    80106ce0 <alltraps>
-
-80107805 <vector107>:
-.globl vector107
-vector107:
-  pushl $0
-80107805:	6a 00                	push   $0x0
-  pushl $107
-80107807:	6a 6b                	push   $0x6b
-  jmp alltraps
-80107809:	e9 d2 f4 ff ff       	jmp    80106ce0 <alltraps>
-
-8010780e <vector108>:
-.globl vector108
-vector108:
-  pushl $0
-8010780e:	6a 00                	push   $0x0
-  pushl $108
-80107810:	6a 6c                	push   $0x6c
-  jmp alltraps
-80107812:	e9 c9 f4 ff ff       	jmp    80106ce0 <alltraps>
-
-80107817 <vector109>:
-.globl vector109
-vector109:
-  pushl $0
-80107817:	6a 00                	push   $0x0
-  pushl $109
-80107819:	6a 6d                	push   $0x6d
-  jmp alltraps
-8010781b:	e9 c0 f4 ff ff       	jmp    80106ce0 <alltraps>
-
-80107820 <vector110>:
-.globl vector110
-vector110:
-  pushl $0
-80107820:	6a 00                	push   $0x0
-  pushl $110
-80107822:	6a 6e                	push   $0x6e
-  jmp alltraps
-80107824:	e9 b7 f4 ff ff       	jmp    80106ce0 <alltraps>
-
-80107829 <vector111>:
-.globl vector111
-vector111:
-  pushl $0
-80107829:	6a 00                	push   $0x0
-  pushl $111
-8010782b:	6a 6f                	push   $0x6f
-  jmp alltraps
-8010782d:	e9 ae f4 ff ff       	jmp    80106ce0 <alltraps>
-
-80107832 <vector112>:
-.globl vector112
-vector112:
-  pushl $0
-80107832:	6a 00                	push   $0x0
-  pushl $112
-80107834:	6a 70                	push   $0x70
-  jmp alltraps
-80107836:	e9 a5 f4 ff ff       	jmp    80106ce0 <alltraps>
-
-8010783b <vector113>:
-.globl vector113
-vector113:
-  pushl $0
-8010783b:	6a 00                	push   $0x0
-  pushl $113
-8010783d:	6a 71                	push   $0x71
-  jmp alltraps
-8010783f:	e9 9c f4 ff ff       	jmp    80106ce0 <alltraps>
-
-80107844 <vector114>:
-.globl vector114
-vector114:
-  pushl $0
-80107844:	6a 00                	push   $0x0
-  pushl $114
-80107846:	6a 72                	push   $0x72
-  jmp alltraps
-80107848:	e9 93 f4 ff ff       	jmp    80106ce0 <alltraps>
-
-8010784d <vector115>:
-.globl vector115
-vector115:
-  pushl $0
-8010784d:	6a 00                	push   $0x0
-  pushl $115
-8010784f:	6a 73                	push   $0x73
-  jmp alltraps
-80107851:	e9 8a f4 ff ff       	jmp    80106ce0 <alltraps>
-
-80107856 <vector116>:
-.globl vector116
-vector116:
-  pushl $0
-80107856:	6a 00                	push   $0x0
-  pushl $116
-80107858:	6a 74                	push   $0x74
-  jmp alltraps
-8010785a:	e9 81 f4 ff ff       	jmp    80106ce0 <alltraps>
-
-8010785f <vector117>:
-.globl vector117
-vector117:
-  pushl $0
-8010785f:	6a 00                	push   $0x0
-  pushl $117
-80107861:	6a 75                	push   $0x75
-  jmp alltraps
-80107863:	e9 78 f4 ff ff       	jmp    80106ce0 <alltraps>
-
-80107868 <vector118>:
-.globl vector118
-vector118:
-  pushl $0
-80107868:	6a 00                	push   $0x0
-  pushl $118
-8010786a:	6a 76                	push   $0x76
-  jmp alltraps
-8010786c:	e9 6f f4 ff ff       	jmp    80106ce0 <alltraps>
-
-80107871 <vector119>:
-.globl vector119
-vector119:
-  pushl $0
-80107871:	6a 00                	push   $0x0
-  pushl $119
-80107873:	6a 77                	push   $0x77
-  jmp alltraps
-80107875:	e9 66 f4 ff ff       	jmp    80106ce0 <alltraps>
-
-8010787a <vector120>:
-.globl vector120
-vector120:
-  pushl $0
-8010787a:	6a 00                	push   $0x0
-  pushl $120
-8010787c:	6a 78                	push   $0x78
-  jmp alltraps
-8010787e:	e9 5d f4 ff ff       	jmp    80106ce0 <alltraps>
-
-80107883 <vector121>:
-.globl vector121
-vector121:
-  pushl $0
-80107883:	6a 00                	push   $0x0
-  pushl $121
-80107885:	6a 79                	push   $0x79
-  jmp alltraps
-80107887:	e9 54 f4 ff ff       	jmp    80106ce0 <alltraps>
-
-8010788c <vector122>:
-.globl vector122
-vector122:
-  pushl $0
-8010788c:	6a 00                	push   $0x0
-  pushl $122
-8010788e:	6a 7a                	push   $0x7a
-  jmp alltraps
-80107890:	e9 4b f4 ff ff       	jmp    80106ce0 <alltraps>
-
-80107895 <vector123>:
-.globl vector123
-vector123:
-  pushl $0
-80107895:	6a 00                	push   $0x0
-  pushl $123
-80107897:	6a 7b                	push   $0x7b
-  jmp alltraps
-80107899:	e9 42 f4 ff ff       	jmp    80106ce0 <alltraps>
-
-8010789e <vector124>:
-.globl vector124
-vector124:
-  pushl $0
-8010789e:	6a 00                	push   $0x0
-  pushl $124
-801078a0:	6a 7c                	push   $0x7c
-  jmp alltraps
-801078a2:	e9 39 f4 ff ff       	jmp    80106ce0 <alltraps>
-
-801078a7 <vector125>:
-.globl vector125
-vector125:
-  pushl $0
-801078a7:	6a 00                	push   $0x0
-  pushl $125
-801078a9:	6a 7d                	push   $0x7d
-  jmp alltraps
-801078ab:	e9 30 f4 ff ff       	jmp    80106ce0 <alltraps>
-
-801078b0 <vector126>:
-.globl vector126
-vector126:
-  pushl $0
-801078b0:	6a 00                	push   $0x0
-  pushl $126
-801078b2:	6a 7e                	push   $0x7e
-  jmp alltraps
-801078b4:	e9 27 f4 ff ff       	jmp    80106ce0 <alltraps>
-
-801078b9 <vector127>:
-.globl vector127
-vector127:
-  pushl $0
-801078b9:	6a 00                	push   $0x0
-  pushl $127
-801078bb:	6a 7f                	push   $0x7f
-  jmp alltraps
-801078bd:	e9 1e f4 ff ff       	jmp    80106ce0 <alltraps>
-
-801078c2 <vector128>:
-.globl vector128
-vector128:
-  pushl $0
-801078c2:	6a 00                	push   $0x0
-  pushl $128
-801078c4:	68 80 00 00 00       	push   $0x80
-  jmp alltraps
-801078c9:	e9 12 f4 ff ff       	jmp    80106ce0 <alltraps>
-
-801078ce <vector129>:
-.globl vector129
-vector129:
-  pushl $0
-801078ce:	6a 00                	push   $0x0
-  pushl $129
-801078d0:	68 81 00 00 00       	push   $0x81
-  jmp alltraps
-801078d5:	e9 06 f4 ff ff       	jmp    80106ce0 <alltraps>
-
-801078da <vector130>:
-.globl vector130
-vector130:
-  pushl $0
-801078da:	6a 00                	push   $0x0
-  pushl $130
-801078dc:	68 82 00 00 00       	push   $0x82
-  jmp alltraps
-801078e1:	e9 fa f3 ff ff       	jmp    80106ce0 <alltraps>
-
-801078e6 <vector131>:
-.globl vector131
-vector131:
-  pushl $0
-801078e6:	6a 00                	push   $0x0
-  pushl $131
-801078e8:	68 83 00 00 00       	push   $0x83
-  jmp alltraps
-801078ed:	e9 ee f3 ff ff       	jmp    80106ce0 <alltraps>
-
-801078f2 <vector132>:
-.globl vector132
-vector132:
-  pushl $0
-801078f2:	6a 00                	push   $0x0
-  pushl $132
-801078f4:	68 84 00 00 00       	push   $0x84
-  jmp alltraps
-801078f9:	e9 e2 f3 ff ff       	jmp    80106ce0 <alltraps>
-
-801078fe <vector133>:
-.globl vector133
-vector133:
-  pushl $0
-801078fe:	6a 00                	push   $0x0
-  pushl $133
-80107900:	68 85 00 00 00       	push   $0x85
-  jmp alltraps
-80107905:	e9 d6 f3 ff ff       	jmp    80106ce0 <alltraps>
-
-8010790a <vector134>:
-.globl vector134
-vector134:
-  pushl $0
-8010790a:	6a 00                	push   $0x0
-  pushl $134
-8010790c:	68 86 00 00 00       	push   $0x86
-  jmp alltraps
-80107911:	e9 ca f3 ff ff       	jmp    80106ce0 <alltraps>
-
-80107916 <vector135>:
-.globl vector135
-vector135:
-  pushl $0
-80107916:	6a 00                	push   $0x0
-  pushl $135
-80107918:	68 87 00 00 00       	push   $0x87
-  jmp alltraps
-8010791d:	e9 be f3 ff ff       	jmp    80106ce0 <alltraps>
-
-80107922 <vector136>:
-.globl vector136
-vector136:
-  pushl $0
-80107922:	6a 00                	push   $0x0
-  pushl $136
-80107924:	68 88 00 00 00       	push   $0x88
-  jmp alltraps
-80107929:	e9 b2 f3 ff ff       	jmp    80106ce0 <alltraps>
-
-8010792e <vector137>:
-.globl vector137
-vector137:
-  pushl $0
-8010792e:	6a 00                	push   $0x0
-  pushl $137
-80107930:	68 89 00 00 00       	push   $0x89
-  jmp alltraps
-80107935:	e9 a6 f3 ff ff       	jmp    80106ce0 <alltraps>
-
-8010793a <vector138>:
-.globl vector138
-vector138:
-  pushl $0
-8010793a:	6a 00                	push   $0x0
-  pushl $138
-8010793c:	68 8a 00 00 00       	push   $0x8a
-  jmp alltraps
-80107941:	e9 9a f3 ff ff       	jmp    80106ce0 <alltraps>
-
-80107946 <vector139>:
-.globl vector139
-vector139:
-  pushl $0
-80107946:	6a 00                	push   $0x0
-  pushl $139
-80107948:	68 8b 00 00 00       	push   $0x8b
-  jmp alltraps
-8010794d:	e9 8e f3 ff ff       	jmp    80106ce0 <alltraps>
-
-80107952 <vector140>:
-.globl vector140
-vector140:
-  pushl $0
-80107952:	6a 00                	push   $0x0
-  pushl $140
-80107954:	68 8c 00 00 00       	push   $0x8c
-  jmp alltraps
-80107959:	e9 82 f3 ff ff       	jmp    80106ce0 <alltraps>
-
-8010795e <vector141>:
-.globl vector141
-vector141:
-  pushl $0
-8010795e:	6a 00                	push   $0x0
-  pushl $141
-80107960:	68 8d 00 00 00       	push   $0x8d
-  jmp alltraps
-80107965:	e9 76 f3 ff ff       	jmp    80106ce0 <alltraps>
-
-8010796a <vector142>:
-.globl vector142
-vector142:
-  pushl $0
-8010796a:	6a 00                	push   $0x0
-  pushl $142
-8010796c:	68 8e 00 00 00       	push   $0x8e
-  jmp alltraps
-80107971:	e9 6a f3 ff ff       	jmp    80106ce0 <alltraps>
-
-80107976 <vector143>:
-.globl vector143
-vector143:
-  pushl $0
-80107976:	6a 00                	push   $0x0
-  pushl $143
-80107978:	68 8f 00 00 00       	push   $0x8f
-  jmp alltraps
-8010797d:	e9 5e f3 ff ff       	jmp    80106ce0 <alltraps>
-
-80107982 <vector144>:
-.globl vector144
-vector144:
-  pushl $0
-80107982:	6a 00                	push   $0x0
-  pushl $144
-80107984:	68 90 00 00 00       	push   $0x90
-  jmp alltraps
-80107989:	e9 52 f3 ff ff       	jmp    80106ce0 <alltraps>
-
-8010798e <vector145>:
-.globl vector145
-vector145:
-  pushl $0
-8010798e:	6a 00                	push   $0x0
-  pushl $145
-80107990:	68 91 00 00 00       	push   $0x91
-  jmp alltraps
-80107995:	e9 46 f3 ff ff       	jmp    80106ce0 <alltraps>
-
-8010799a <vector146>:
-.globl vector146
-vector146:
-  pushl $0
-8010799a:	6a 00                	push   $0x0
-  pushl $146
-8010799c:	68 92 00 00 00       	push   $0x92
-  jmp alltraps
-801079a1:	e9 3a f3 ff ff       	jmp    80106ce0 <alltraps>
-
-801079a6 <vector147>:
-.globl vector147
-vector147:
-  pushl $0
-801079a6:	6a 00                	push   $0x0
-  pushl $147
-801079a8:	68 93 00 00 00       	push   $0x93
-  jmp alltraps
-801079ad:	e9 2e f3 ff ff       	jmp    80106ce0 <alltraps>
-
-801079b2 <vector148>:
-.globl vector148
-vector148:
-  pushl $0
-801079b2:	6a 00                	push   $0x0
-  pushl $148
-801079b4:	68 94 00 00 00       	push   $0x94
-  jmp alltraps
-801079b9:	e9 22 f3 ff ff       	jmp    80106ce0 <alltraps>
-
-801079be <vector149>:
-.globl vector149
-vector149:
-  pushl $0
-801079be:	6a 00                	push   $0x0
-  pushl $149
-801079c0:	68 95 00 00 00       	push   $0x95
-  jmp alltraps
-801079c5:	e9 16 f3 ff ff       	jmp    80106ce0 <alltraps>
-
-801079ca <vector150>:
-.globl vector150
-vector150:
-  pushl $0
-801079ca:	6a 00                	push   $0x0
-  pushl $150
-801079cc:	68 96 00 00 00       	push   $0x96
-  jmp alltraps
-801079d1:	e9 0a f3 ff ff       	jmp    80106ce0 <alltraps>
-
-801079d6 <vector151>:
-.globl vector151
-vector151:
-  pushl $0
-801079d6:	6a 00                	push   $0x0
-  pushl $151
-801079d8:	68 97 00 00 00       	push   $0x97
-  jmp alltraps
-801079dd:	e9 fe f2 ff ff       	jmp    80106ce0 <alltraps>
-
-801079e2 <vector152>:
-.globl vector152
-vector152:
-  pushl $0
-801079e2:	6a 00                	push   $0x0
-  pushl $152
-801079e4:	68 98 00 00 00       	push   $0x98
-  jmp alltraps
-801079e9:	e9 f2 f2 ff ff       	jmp    80106ce0 <alltraps>
-
-801079ee <vector153>:
-.globl vector153
-vector153:
-  pushl $0
-801079ee:	6a 00                	push   $0x0
-  pushl $153
-801079f0:	68 99 00 00 00       	push   $0x99
-  jmp alltraps
-801079f5:	e9 e6 f2 ff ff       	jmp    80106ce0 <alltraps>
-
-801079fa <vector154>:
-.globl vector154
-vector154:
-  pushl $0
-801079fa:	6a 00                	push   $0x0
-  pushl $154
-801079fc:	68 9a 00 00 00       	push   $0x9a
-  jmp alltraps
-80107a01:	e9 da f2 ff ff       	jmp    80106ce0 <alltraps>
-
-80107a06 <vector155>:
-.globl vector155
-vector155:
-  pushl $0
-80107a06:	6a 00                	push   $0x0
-  pushl $155
-80107a08:	68 9b 00 00 00       	push   $0x9b
-  jmp alltraps
-80107a0d:	e9 ce f2 ff ff       	jmp    80106ce0 <alltraps>
-
-80107a12 <vector156>:
-.globl vector156
-vector156:
-  pushl $0
-80107a12:	6a 00                	push   $0x0
-  pushl $156
-80107a14:	68 9c 00 00 00       	push   $0x9c
-  jmp alltraps
-80107a19:	e9 c2 f2 ff ff       	jmp    80106ce0 <alltraps>
-
-80107a1e <vector157>:
-.globl vector157
-vector157:
-  pushl $0
-80107a1e:	6a 00                	push   $0x0
-  pushl $157
-80107a20:	68 9d 00 00 00       	push   $0x9d
-  jmp alltraps
-80107a25:	e9 b6 f2 ff ff       	jmp    80106ce0 <alltraps>
-
-80107a2a <vector158>:
-.globl vector158
-vector158:
-  pushl $0
-80107a2a:	6a 00                	push   $0x0
-  pushl $158
-80107a2c:	68 9e 00 00 00       	push   $0x9e
-  jmp alltraps
-80107a31:	e9 aa f2 ff ff       	jmp    80106ce0 <alltraps>
-
-80107a36 <vector159>:
-.globl vector159
-vector159:
-  pushl $0
-80107a36:	6a 00                	push   $0x0
-  pushl $159
-80107a38:	68 9f 00 00 00       	push   $0x9f
-  jmp alltraps
-80107a3d:	e9 9e f2 ff ff       	jmp    80106ce0 <alltraps>
-
-80107a42 <vector160>:
-.globl vector160
-vector160:
-  pushl $0
-80107a42:	6a 00                	push   $0x0
-  pushl $160
-80107a44:	68 a0 00 00 00       	push   $0xa0
-  jmp alltraps
-80107a49:	e9 92 f2 ff ff       	jmp    80106ce0 <alltraps>
-
-80107a4e <vector161>:
-.globl vector161
-vector161:
-  pushl $0
-80107a4e:	6a 00                	push   $0x0
-  pushl $161
-80107a50:	68 a1 00 00 00       	push   $0xa1
-  jmp alltraps
-80107a55:	e9 86 f2 ff ff       	jmp    80106ce0 <alltraps>
-
-80107a5a <vector162>:
-.globl vector162
-vector162:
-  pushl $0
-80107a5a:	6a 00                	push   $0x0
-  pushl $162
-80107a5c:	68 a2 00 00 00       	push   $0xa2
-  jmp alltraps
-80107a61:	e9 7a f2 ff ff       	jmp    80106ce0 <alltraps>
-
-80107a66 <vector163>:
-.globl vector163
-vector163:
-  pushl $0
-80107a66:	6a 00                	push   $0x0
-  pushl $163
-80107a68:	68 a3 00 00 00       	push   $0xa3
-  jmp alltraps
-80107a6d:	e9 6e f2 ff ff       	jmp    80106ce0 <alltraps>
-
-80107a72 <vector164>:
-.globl vector164
-vector164:
-  pushl $0
-80107a72:	6a 00                	push   $0x0
-  pushl $164
-80107a74:	68 a4 00 00 00       	push   $0xa4
-  jmp alltraps
-80107a79:	e9 62 f2 ff ff       	jmp    80106ce0 <alltraps>
-
-80107a7e <vector165>:
-.globl vector165
-vector165:
-  pushl $0
-80107a7e:	6a 00                	push   $0x0
-  pushl $165
-80107a80:	68 a5 00 00 00       	push   $0xa5
-  jmp alltraps
-80107a85:	e9 56 f2 ff ff       	jmp    80106ce0 <alltraps>
-
-80107a8a <vector166>:
-.globl vector166
-vector166:
-  pushl $0
-80107a8a:	6a 00                	push   $0x0
-  pushl $166
-80107a8c:	68 a6 00 00 00       	push   $0xa6
-  jmp alltraps
-80107a91:	e9 4a f2 ff ff       	jmp    80106ce0 <alltraps>
-
-80107a96 <vector167>:
-.globl vector167
-vector167:
-  pushl $0
-80107a96:	6a 00                	push   $0x0
-  pushl $167
-80107a98:	68 a7 00 00 00       	push   $0xa7
-  jmp alltraps
-80107a9d:	e9 3e f2 ff ff       	jmp    80106ce0 <alltraps>
-
-80107aa2 <vector168>:
-.globl vector168
-vector168:
-  pushl $0
-80107aa2:	6a 00                	push   $0x0
-  pushl $168
-80107aa4:	68 a8 00 00 00       	push   $0xa8
-  jmp alltraps
-80107aa9:	e9 32 f2 ff ff       	jmp    80106ce0 <alltraps>
-
-80107aae <vector169>:
-.globl vector169
-vector169:
-  pushl $0
-80107aae:	6a 00                	push   $0x0
-  pushl $169
-80107ab0:	68 a9 00 00 00       	push   $0xa9
-  jmp alltraps
-80107ab5:	e9 26 f2 ff ff       	jmp    80106ce0 <alltraps>
-
-80107aba <vector170>:
-.globl vector170
-vector170:
-  pushl $0
-80107aba:	6a 00                	push   $0x0
-  pushl $170
-80107abc:	68 aa 00 00 00       	push   $0xaa
-  jmp alltraps
-80107ac1:	e9 1a f2 ff ff       	jmp    80106ce0 <alltraps>
-
-80107ac6 <vector171>:
-.globl vector171
-vector171:
-  pushl $0
-80107ac6:	6a 00                	push   $0x0
-  pushl $171
-80107ac8:	68 ab 00 00 00       	push   $0xab
-  jmp alltraps
-80107acd:	e9 0e f2 ff ff       	jmp    80106ce0 <alltraps>
-
-80107ad2 <vector172>:
-.globl vector172
-vector172:
-  pushl $0
-80107ad2:	6a 00                	push   $0x0
-  pushl $172
-80107ad4:	68 ac 00 00 00       	push   $0xac
-  jmp alltraps
-80107ad9:	e9 02 f2 ff ff       	jmp    80106ce0 <alltraps>
-
-80107ade <vector173>:
-.globl vector173
-vector173:
-  pushl $0
-80107ade:	6a 00                	push   $0x0
-  pushl $173
-80107ae0:	68 ad 00 00 00       	push   $0xad
-  jmp alltraps
-80107ae5:	e9 f6 f1 ff ff       	jmp    80106ce0 <alltraps>
-
-80107aea <vector174>:
-.globl vector174
-vector174:
-  pushl $0
-80107aea:	6a 00                	push   $0x0
-  pushl $174
-80107aec:	68 ae 00 00 00       	push   $0xae
-  jmp alltraps
-80107af1:	e9 ea f1 ff ff       	jmp    80106ce0 <alltraps>
-
-80107af6 <vector175>:
-.globl vector175
-vector175:
-  pushl $0
-80107af6:	6a 00                	push   $0x0
-  pushl $175
-80107af8:	68 af 00 00 00       	push   $0xaf
-  jmp alltraps
-80107afd:	e9 de f1 ff ff       	jmp    80106ce0 <alltraps>
-
-80107b02 <vector176>:
-.globl vector176
-vector176:
-  pushl $0
-80107b02:	6a 00                	push   $0x0
-  pushl $176
-80107b04:	68 b0 00 00 00       	push   $0xb0
-  jmp alltraps
-80107b09:	e9 d2 f1 ff ff       	jmp    80106ce0 <alltraps>
-
-80107b0e <vector177>:
-.globl vector177
-vector177:
-  pushl $0
-80107b0e:	6a 00                	push   $0x0
-  pushl $177
-80107b10:	68 b1 00 00 00       	push   $0xb1
-  jmp alltraps
-80107b15:	e9 c6 f1 ff ff       	jmp    80106ce0 <alltraps>
-
-80107b1a <vector178>:
-.globl vector178
-vector178:
-  pushl $0
-80107b1a:	6a 00                	push   $0x0
-  pushl $178
-80107b1c:	68 b2 00 00 00       	push   $0xb2
-  jmp alltraps
-80107b21:	e9 ba f1 ff ff       	jmp    80106ce0 <alltraps>
-
-80107b26 <vector179>:
-.globl vector179
-vector179:
-  pushl $0
-80107b26:	6a 00                	push   $0x0
-  pushl $179
-80107b28:	68 b3 00 00 00       	push   $0xb3
-  jmp alltraps
-80107b2d:	e9 ae f1 ff ff       	jmp    80106ce0 <alltraps>
-
-80107b32 <vector180>:
-.globl vector180
-vector180:
-  pushl $0
-80107b32:	6a 00                	push   $0x0
-  pushl $180
-80107b34:	68 b4 00 00 00       	push   $0xb4
-  jmp alltraps
-80107b39:	e9 a2 f1 ff ff       	jmp    80106ce0 <alltraps>
-
-80107b3e <vector181>:
-.globl vector181
-vector181:
-  pushl $0
-80107b3e:	6a 00                	push   $0x0
-  pushl $181
-80107b40:	68 b5 00 00 00       	push   $0xb5
-  jmp alltraps
-80107b45:	e9 96 f1 ff ff       	jmp    80106ce0 <alltraps>
-
-80107b4a <vector182>:
-.globl vector182
-vector182:
-  pushl $0
-80107b4a:	6a 00                	push   $0x0
-  pushl $182
-80107b4c:	68 b6 00 00 00       	push   $0xb6
-  jmp alltraps
-80107b51:	e9 8a f1 ff ff       	jmp    80106ce0 <alltraps>
-
-80107b56 <vector183>:
-.globl vector183
-vector183:
-  pushl $0
-80107b56:	6a 00                	push   $0x0
-  pushl $183
-80107b58:	68 b7 00 00 00       	push   $0xb7
-  jmp alltraps
-80107b5d:	e9 7e f1 ff ff       	jmp    80106ce0 <alltraps>
-
-80107b62 <vector184>:
-.globl vector184
-vector184:
-  pushl $0
-80107b62:	6a 00                	push   $0x0
-  pushl $184
-80107b64:	68 b8 00 00 00       	push   $0xb8
-  jmp alltraps
-80107b69:	e9 72 f1 ff ff       	jmp    80106ce0 <alltraps>
-
-80107b6e <vector185>:
-.globl vector185
-vector185:
-  pushl $0
-80107b6e:	6a 00                	push   $0x0
-  pushl $185
-80107b70:	68 b9 00 00 00       	push   $0xb9
-  jmp alltraps
-80107b75:	e9 66 f1 ff ff       	jmp    80106ce0 <alltraps>
-
-80107b7a <vector186>:
-.globl vector186
-vector186:
-  pushl $0
-80107b7a:	6a 00                	push   $0x0
-  pushl $186
-80107b7c:	68 ba 00 00 00       	push   $0xba
-  jmp alltraps
-80107b81:	e9 5a f1 ff ff       	jmp    80106ce0 <alltraps>
-
-80107b86 <vector187>:
-.globl vector187
-vector187:
-  pushl $0
-80107b86:	6a 00                	push   $0x0
-  pushl $187
-80107b88:	68 bb 00 00 00       	push   $0xbb
-  jmp alltraps
-80107b8d:	e9 4e f1 ff ff       	jmp    80106ce0 <alltraps>
-
-80107b92 <vector188>:
-.globl vector188
-vector188:
-  pushl $0
-80107b92:	6a 00                	push   $0x0
-  pushl $188
-80107b94:	68 bc 00 00 00       	push   $0xbc
-  jmp alltraps
-80107b99:	e9 42 f1 ff ff       	jmp    80106ce0 <alltraps>
-
-80107b9e <vector189>:
-.globl vector189
-vector189:
-  pushl $0
-80107b9e:	6a 00                	push   $0x0
-  pushl $189
-80107ba0:	68 bd 00 00 00       	push   $0xbd
-  jmp alltraps
-80107ba5:	e9 36 f1 ff ff       	jmp    80106ce0 <alltraps>
-
-80107baa <vector190>:
-.globl vector190
-vector190:
-  pushl $0
-80107baa:	6a 00                	push   $0x0
-  pushl $190
-80107bac:	68 be 00 00 00       	push   $0xbe
-  jmp alltraps
-80107bb1:	e9 2a f1 ff ff       	jmp    80106ce0 <alltraps>
-
-80107bb6 <vector191>:
-.globl vector191
-vector191:
-  pushl $0
-80107bb6:	6a 00                	push   $0x0
-  pushl $191
-80107bb8:	68 bf 00 00 00       	push   $0xbf
-  jmp alltraps
-80107bbd:	e9 1e f1 ff ff       	jmp    80106ce0 <alltraps>
-
-80107bc2 <vector192>:
-.globl vector192
-vector192:
-  pushl $0
-80107bc2:	6a 00                	push   $0x0
-  pushl $192
-80107bc4:	68 c0 00 00 00       	push   $0xc0
-  jmp alltraps
-80107bc9:	e9 12 f1 ff ff       	jmp    80106ce0 <alltraps>
-
-80107bce <vector193>:
-.globl vector193
-vector193:
-  pushl $0
-80107bce:	6a 00                	push   $0x0
-  pushl $193
-80107bd0:	68 c1 00 00 00       	push   $0xc1
-  jmp alltraps
-80107bd5:	e9 06 f1 ff ff       	jmp    80106ce0 <alltraps>
-
-80107bda <vector194>:
-.globl vector194
-vector194:
-  pushl $0
-80107bda:	6a 00                	push   $0x0
-  pushl $194
-80107bdc:	68 c2 00 00 00       	push   $0xc2
-  jmp alltraps
-80107be1:	e9 fa f0 ff ff       	jmp    80106ce0 <alltraps>
-
-80107be6 <vector195>:
-.globl vector195
-vector195:
-  pushl $0
-80107be6:	6a 00                	push   $0x0
-  pushl $195
-80107be8:	68 c3 00 00 00       	push   $0xc3
-  jmp alltraps
-80107bed:	e9 ee f0 ff ff       	jmp    80106ce0 <alltraps>
-
-80107bf2 <vector196>:
-.globl vector196
-vector196:
-  pushl $0
-80107bf2:	6a 00                	push   $0x0
-  pushl $196
-80107bf4:	68 c4 00 00 00       	push   $0xc4
-  jmp alltraps
-80107bf9:	e9 e2 f0 ff ff       	jmp    80106ce0 <alltraps>
-
-80107bfe <vector197>:
-.globl vector197
-vector197:
-  pushl $0
-80107bfe:	6a 00                	push   $0x0
-  pushl $197
-80107c00:	68 c5 00 00 00       	push   $0xc5
-  jmp alltraps
-80107c05:	e9 d6 f0 ff ff       	jmp    80106ce0 <alltraps>
-
-80107c0a <vector198>:
-.globl vector198
-vector198:
-  pushl $0
-80107c0a:	6a 00                	push   $0x0
-  pushl $198
-80107c0c:	68 c6 00 00 00       	push   $0xc6
-  jmp alltraps
-80107c11:	e9 ca f0 ff ff       	jmp    80106ce0 <alltraps>
-
-80107c16 <vector199>:
-.globl vector199
-vector199:
-  pushl $0
-80107c16:	6a 00                	push   $0x0
-  pushl $199
-80107c18:	68 c7 00 00 00       	push   $0xc7
-  jmp alltraps
-80107c1d:	e9 be f0 ff ff       	jmp    80106ce0 <alltraps>
-
-80107c22 <vector200>:
-.globl vector200
-vector200:
-  pushl $0
-80107c22:	6a 00                	push   $0x0
-  pushl $200
-80107c24:	68 c8 00 00 00       	push   $0xc8
-  jmp alltraps
-80107c29:	e9 b2 f0 ff ff       	jmp    80106ce0 <alltraps>
-
-80107c2e <vector201>:
-.globl vector201
-vector201:
-  pushl $0
-80107c2e:	6a 00                	push   $0x0
-  pushl $201
-80107c30:	68 c9 00 00 00       	push   $0xc9
-  jmp alltraps
-80107c35:	e9 a6 f0 ff ff       	jmp    80106ce0 <alltraps>
-
-80107c3a <vector202>:
-.globl vector202
-vector202:
-  pushl $0
-80107c3a:	6a 00                	push   $0x0
-  pushl $202
-80107c3c:	68 ca 00 00 00       	push   $0xca
-  jmp alltraps
-80107c41:	e9 9a f0 ff ff       	jmp    80106ce0 <alltraps>
-
-80107c46 <vector203>:
-.globl vector203
-vector203:
-  pushl $0
-80107c46:	6a 00                	push   $0x0
-  pushl $203
-80107c48:	68 cb 00 00 00       	push   $0xcb
-  jmp alltraps
-80107c4d:	e9 8e f0 ff ff       	jmp    80106ce0 <alltraps>
-
-80107c52 <vector204>:
-.globl vector204
-vector204:
-  pushl $0
-80107c52:	6a 00                	push   $0x0
-  pushl $204
-80107c54:	68 cc 00 00 00       	push   $0xcc
-  jmp alltraps
-80107c59:	e9 82 f0 ff ff       	jmp    80106ce0 <alltraps>
-
-80107c5e <vector205>:
-.globl vector205
-vector205:
-  pushl $0
-80107c5e:	6a 00                	push   $0x0
-  pushl $205
-80107c60:	68 cd 00 00 00       	push   $0xcd
-  jmp alltraps
-80107c65:	e9 76 f0 ff ff       	jmp    80106ce0 <alltraps>
-
-80107c6a <vector206>:
-.globl vector206
-vector206:
-  pushl $0
-80107c6a:	6a 00                	push   $0x0
-  pushl $206
-80107c6c:	68 ce 00 00 00       	push   $0xce
-  jmp alltraps
-80107c71:	e9 6a f0 ff ff       	jmp    80106ce0 <alltraps>
-
-80107c76 <vector207>:
-.globl vector207
-vector207:
-  pushl $0
-80107c76:	6a 00                	push   $0x0
-  pushl $207
-80107c78:	68 cf 00 00 00       	push   $0xcf
-  jmp alltraps
-80107c7d:	e9 5e f0 ff ff       	jmp    80106ce0 <alltraps>
-
-80107c82 <vector208>:
-.globl vector208
-vector208:
-  pushl $0
-80107c82:	6a 00                	push   $0x0
-  pushl $208
-80107c84:	68 d0 00 00 00       	push   $0xd0
-  jmp alltraps
-80107c89:	e9 52 f0 ff ff       	jmp    80106ce0 <alltraps>
-
-80107c8e <vector209>:
-.globl vector209
-vector209:
-  pushl $0
-80107c8e:	6a 00                	push   $0x0
-  pushl $209
-80107c90:	68 d1 00 00 00       	push   $0xd1
-  jmp alltraps
-80107c95:	e9 46 f0 ff ff       	jmp    80106ce0 <alltraps>
-
-80107c9a <vector210>:
-.globl vector210
-vector210:
-  pushl $0
-80107c9a:	6a 00                	push   $0x0
-  pushl $210
-80107c9c:	68 d2 00 00 00       	push   $0xd2
-  jmp alltraps
-80107ca1:	e9 3a f0 ff ff       	jmp    80106ce0 <alltraps>
-
-80107ca6 <vector211>:
-.globl vector211
-vector211:
-  pushl $0
-80107ca6:	6a 00                	push   $0x0
-  pushl $211
-80107ca8:	68 d3 00 00 00       	push   $0xd3
-  jmp alltraps
-80107cad:	e9 2e f0 ff ff       	jmp    80106ce0 <alltraps>
-
-80107cb2 <vector212>:
-.globl vector212
-vector212:
-  pushl $0
-80107cb2:	6a 00                	push   $0x0
-  pushl $212
-80107cb4:	68 d4 00 00 00       	push   $0xd4
-  jmp alltraps
-80107cb9:	e9 22 f0 ff ff       	jmp    80106ce0 <alltraps>
-
-80107cbe <vector213>:
-.globl vector213
-vector213:
-  pushl $0
-80107cbe:	6a 00                	push   $0x0
-  pushl $213
-80107cc0:	68 d5 00 00 00       	push   $0xd5
-  jmp alltraps
-80107cc5:	e9 16 f0 ff ff       	jmp    80106ce0 <alltraps>
-
-80107cca <vector214>:
-.globl vector214
-vector214:
-  pushl $0
-80107cca:	6a 00                	push   $0x0
-  pushl $214
-80107ccc:	68 d6 00 00 00       	push   $0xd6
-  jmp alltraps
-80107cd1:	e9 0a f0 ff ff       	jmp    80106ce0 <alltraps>
-
-80107cd6 <vector215>:
-.globl vector215
-vector215:
-  pushl $0
-80107cd6:	6a 00                	push   $0x0
-  pushl $215
-80107cd8:	68 d7 00 00 00       	push   $0xd7
-  jmp alltraps
-80107cdd:	e9 fe ef ff ff       	jmp    80106ce0 <alltraps>
-
-80107ce2 <vector216>:
-.globl vector216
-vector216:
-  pushl $0
-80107ce2:	6a 00                	push   $0x0
-  pushl $216
-80107ce4:	68 d8 00 00 00       	push   $0xd8
-  jmp alltraps
-80107ce9:	e9 f2 ef ff ff       	jmp    80106ce0 <alltraps>
-
-80107cee <vector217>:
-.globl vector217
-vector217:
-  pushl $0
-80107cee:	6a 00                	push   $0x0
-  pushl $217
-80107cf0:	68 d9 00 00 00       	push   $0xd9
-  jmp alltraps
-80107cf5:	e9 e6 ef ff ff       	jmp    80106ce0 <alltraps>
-
-80107cfa <vector218>:
-.globl vector218
-vector218:
-  pushl $0
-80107cfa:	6a 00                	push   $0x0
-  pushl $218
-80107cfc:	68 da 00 00 00       	push   $0xda
-  jmp alltraps
-80107d01:	e9 da ef ff ff       	jmp    80106ce0 <alltraps>
-
-80107d06 <vector219>:
-.globl vector219
-vector219:
-  pushl $0
-80107d06:	6a 00                	push   $0x0
-  pushl $219
-80107d08:	68 db 00 00 00       	push   $0xdb
-  jmp alltraps
-80107d0d:	e9 ce ef ff ff       	jmp    80106ce0 <alltraps>
-
-80107d12 <vector220>:
-.globl vector220
-vector220:
-  pushl $0
-80107d12:	6a 00                	push   $0x0
-  pushl $220
-80107d14:	68 dc 00 00 00       	push   $0xdc
-  jmp alltraps
-80107d19:	e9 c2 ef ff ff       	jmp    80106ce0 <alltraps>
-
-80107d1e <vector221>:
-.globl vector221
-vector221:
-  pushl $0
-80107d1e:	6a 00                	push   $0x0
-  pushl $221
-80107d20:	68 dd 00 00 00       	push   $0xdd
-  jmp alltraps
-80107d25:	e9 b6 ef ff ff       	jmp    80106ce0 <alltraps>
-
-80107d2a <vector222>:
-.globl vector222
-vector222:
-  pushl $0
-80107d2a:	6a 00                	push   $0x0
-  pushl $222
-80107d2c:	68 de 00 00 00       	push   $0xde
-  jmp alltraps
-80107d31:	e9 aa ef ff ff       	jmp    80106ce0 <alltraps>
-
-80107d36 <vector223>:
-.globl vector223
-vector223:
-  pushl $0
-80107d36:	6a 00                	push   $0x0
-  pushl $223
-80107d38:	68 df 00 00 00       	push   $0xdf
-  jmp alltraps
-80107d3d:	e9 9e ef ff ff       	jmp    80106ce0 <alltraps>
-
-80107d42 <vector224>:
-.globl vector224
-vector224:
-  pushl $0
-80107d42:	6a 00                	push   $0x0
-  pushl $224
-80107d44:	68 e0 00 00 00       	push   $0xe0
-  jmp alltraps
-80107d49:	e9 92 ef ff ff       	jmp    80106ce0 <alltraps>
-
-80107d4e <vector225>:
-.globl vector225
-vector225:
-  pushl $0
-80107d4e:	6a 00                	push   $0x0
-  pushl $225
-80107d50:	68 e1 00 00 00       	push   $0xe1
-  jmp alltraps
-80107d55:	e9 86 ef ff ff       	jmp    80106ce0 <alltraps>
-
-80107d5a <vector226>:
-.globl vector226
-vector226:
-  pushl $0
-80107d5a:	6a 00                	push   $0x0
-  pushl $226
-80107d5c:	68 e2 00 00 00       	push   $0xe2
-  jmp alltraps
-80107d61:	e9 7a ef ff ff       	jmp    80106ce0 <alltraps>
-
-80107d66 <vector227>:
-.globl vector227
-vector227:
-  pushl $0
-80107d66:	6a 00                	push   $0x0
-  pushl $227
-80107d68:	68 e3 00 00 00       	push   $0xe3
-  jmp alltraps
-80107d6d:	e9 6e ef ff ff       	jmp    80106ce0 <alltraps>
-
-80107d72 <vector228>:
-.globl vector228
-vector228:
-  pushl $0
-80107d72:	6a 00                	push   $0x0
-  pushl $228
-80107d74:	68 e4 00 00 00       	push   $0xe4
-  jmp alltraps
-80107d79:	e9 62 ef ff ff       	jmp    80106ce0 <alltraps>
-
-80107d7e <vector229>:
-.globl vector229
-vector229:
-  pushl $0
-80107d7e:	6a 00                	push   $0x0
-  pushl $229
-80107d80:	68 e5 00 00 00       	push   $0xe5
-  jmp alltraps
-80107d85:	e9 56 ef ff ff       	jmp    80106ce0 <alltraps>
-
-80107d8a <vector230>:
-.globl vector230
-vector230:
-  pushl $0
-80107d8a:	6a 00                	push   $0x0
-  pushl $230
-80107d8c:	68 e6 00 00 00       	push   $0xe6
-  jmp alltraps
-80107d91:	e9 4a ef ff ff       	jmp    80106ce0 <alltraps>
-
-80107d96 <vector231>:
-.globl vector231
-vector231:
-  pushl $0
-80107d96:	6a 00                	push   $0x0
-  pushl $231
-80107d98:	68 e7 00 00 00       	push   $0xe7
-  jmp alltraps
-80107d9d:	e9 3e ef ff ff       	jmp    80106ce0 <alltraps>
-
-80107da2 <vector232>:
-.globl vector232
-vector232:
-  pushl $0
-80107da2:	6a 00                	push   $0x0
-  pushl $232
-80107da4:	68 e8 00 00 00       	push   $0xe8
-  jmp alltraps
-80107da9:	e9 32 ef ff ff       	jmp    80106ce0 <alltraps>
-
-80107dae <vector233>:
-.globl vector233
-vector233:
-  pushl $0
-80107dae:	6a 00                	push   $0x0
-  pushl $233
-80107db0:	68 e9 00 00 00       	push   $0xe9
-  jmp alltraps
-80107db5:	e9 26 ef ff ff       	jmp    80106ce0 <alltraps>
-
-80107dba <vector234>:
-.globl vector234
-vector234:
-  pushl $0
-80107dba:	6a 00                	push   $0x0
-  pushl $234
-80107dbc:	68 ea 00 00 00       	push   $0xea
-  jmp alltraps
-80107dc1:	e9 1a ef ff ff       	jmp    80106ce0 <alltraps>
-
-80107dc6 <vector235>:
-.globl vector235
-vector235:
-  pushl $0
-80107dc6:	6a 00                	push   $0x0
-  pushl $235
-80107dc8:	68 eb 00 00 00       	push   $0xeb
-  jmp alltraps
-80107dcd:	e9 0e ef ff ff       	jmp    80106ce0 <alltraps>
-
-80107dd2 <vector236>:
-.globl vector236
-vector236:
-  pushl $0
-80107dd2:	6a 00                	push   $0x0
-  pushl $236
-80107dd4:	68 ec 00 00 00       	push   $0xec
-  jmp alltraps
-80107dd9:	e9 02 ef ff ff       	jmp    80106ce0 <alltraps>
-
-80107dde <vector237>:
-.globl vector237
-vector237:
-  pushl $0
-80107dde:	6a 00                	push   $0x0
-  pushl $237
-80107de0:	68 ed 00 00 00       	push   $0xed
-  jmp alltraps
-80107de5:	e9 f6 ee ff ff       	jmp    80106ce0 <alltraps>
-
-80107dea <vector238>:
-.globl vector238
-vector238:
-  pushl $0
-80107dea:	6a 00                	push   $0x0
-  pushl $238
-80107dec:	68 ee 00 00 00       	push   $0xee
-  jmp alltraps
-80107df1:	e9 ea ee ff ff       	jmp    80106ce0 <alltraps>
-
-80107df6 <vector239>:
-.globl vector239
-vector239:
-  pushl $0
-80107df6:	6a 00                	push   $0x0
-  pushl $239
-80107df8:	68 ef 00 00 00       	push   $0xef
-  jmp alltraps
-80107dfd:	e9 de ee ff ff       	jmp    80106ce0 <alltraps>
-
-80107e02 <vector240>:
-.globl vector240
-vector240:
-  pushl $0
-80107e02:	6a 00                	push   $0x0
-  pushl $240
-80107e04:	68 f0 00 00 00       	push   $0xf0
-  jmp alltraps
-80107e09:	e9 d2 ee ff ff       	jmp    80106ce0 <alltraps>
-
-80107e0e <vector241>:
-.globl vector241
-vector241:
-  pushl $0
-80107e0e:	6a 00                	push   $0x0
-  pushl $241
-80107e10:	68 f1 00 00 00       	push   $0xf1
-  jmp alltraps
-80107e15:	e9 c6 ee ff ff       	jmp    80106ce0 <alltraps>
-
-80107e1a <vector242>:
-.globl vector242
-vector242:
-  pushl $0
-80107e1a:	6a 00                	push   $0x0
-  pushl $242
-80107e1c:	68 f2 00 00 00       	push   $0xf2
-  jmp alltraps
-80107e21:	e9 ba ee ff ff       	jmp    80106ce0 <alltraps>
-
-80107e26 <vector243>:
-.globl vector243
-vector243:
-  pushl $0
-80107e26:	6a 00                	push   $0x0
-  pushl $243
-80107e28:	68 f3 00 00 00       	push   $0xf3
-  jmp alltraps
-80107e2d:	e9 ae ee ff ff       	jmp    80106ce0 <alltraps>
-
-80107e32 <vector244>:
-.globl vector244
-vector244:
-  pushl $0
-80107e32:	6a 00                	push   $0x0
-  pushl $244
-80107e34:	68 f4 00 00 00       	push   $0xf4
-  jmp alltraps
-80107e39:	e9 a2 ee ff ff       	jmp    80106ce0 <alltraps>
-
-80107e3e <vector245>:
-.globl vector245
-vector245:
-  pushl $0
-80107e3e:	6a 00                	push   $0x0
-  pushl $245
-80107e40:	68 f5 00 00 00       	push   $0xf5
-  jmp alltraps
-80107e45:	e9 96 ee ff ff       	jmp    80106ce0 <alltraps>
-
-80107e4a <vector246>:
-.globl vector246
-vector246:
-  pushl $0
-80107e4a:	6a 00                	push   $0x0
-  pushl $246
-80107e4c:	68 f6 00 00 00       	push   $0xf6
-  jmp alltraps
-80107e51:	e9 8a ee ff ff       	jmp    80106ce0 <alltraps>
-
-80107e56 <vector247>:
-.globl vector247
-vector247:
-  pushl $0
-80107e56:	6a 00                	push   $0x0
-  pushl $247
-80107e58:	68 f7 00 00 00       	push   $0xf7
-  jmp alltraps
-80107e5d:	e9 7e ee ff ff       	jmp    80106ce0 <alltraps>
-
-80107e62 <vector248>:
-.globl vector248
-vector248:
-  pushl $0
-80107e62:	6a 00                	push   $0x0
-  pushl $248
-80107e64:	68 f8 00 00 00       	push   $0xf8
-  jmp alltraps
-80107e69:	e9 72 ee ff ff       	jmp    80106ce0 <alltraps>
-
-80107e6e <vector249>:
-.globl vector249
-vector249:
-  pushl $0
-80107e6e:	6a 00                	push   $0x0
-  pushl $249
-80107e70:	68 f9 00 00 00       	push   $0xf9
-  jmp alltraps
-80107e75:	e9 66 ee ff ff       	jmp    80106ce0 <alltraps>
-
-80107e7a <vector250>:
-.globl vector250
-vector250:
-  pushl $0
-80107e7a:	6a 00                	push   $0x0
-  pushl $250
-80107e7c:	68 fa 00 00 00       	push   $0xfa
-  jmp alltraps
-80107e81:	e9 5a ee ff ff       	jmp    80106ce0 <alltraps>
-
-80107e86 <vector251>:
-.globl vector251
-vector251:
-  pushl $0
-80107e86:	6a 00                	push   $0x0
-  pushl $251
-80107e88:	68 fb 00 00 00       	push   $0xfb
-  jmp alltraps
-80107e8d:	e9 4e ee ff ff       	jmp    80106ce0 <alltraps>
-
-80107e92 <vector252>:
-.globl vector252
-vector252:
-  pushl $0
-80107e92:	6a 00                	push   $0x0
-  pushl $252
-80107e94:	68 fc 00 00 00       	push   $0xfc
-  jmp alltraps
-80107e99:	e9 42 ee ff ff       	jmp    80106ce0 <alltraps>
-
-80107e9e <vector253>:
-.globl vector253
-vector253:
-  pushl $0
-80107e9e:	6a 00                	push   $0x0
-  pushl $253
-80107ea0:	68 fd 00 00 00       	push   $0xfd
-  jmp alltraps
-80107ea5:	e9 36 ee ff ff       	jmp    80106ce0 <alltraps>
-
-80107eaa <vector254>:
-.globl vector254
-vector254:
-  pushl $0
-80107eaa:	6a 00                	push   $0x0
-  pushl $254
-80107eac:	68 fe 00 00 00       	push   $0xfe
-  jmp alltraps
-80107eb1:	e9 2a ee ff ff       	jmp    80106ce0 <alltraps>
-
-80107eb6 <vector255>:
-.globl vector255
-vector255:
-  pushl $0
-80107eb6:	6a 00                	push   $0x0
-  pushl $255
-80107eb8:	68 ff 00 00 00       	push   $0xff
-  jmp alltraps
-80107ebd:	e9 1e ee ff ff       	jmp    80106ce0 <alltraps>
-	...
-
-80107ec4 <lgdt>:
-
-struct segdesc;
-
-static inline void
-lgdt(struct segdesc *p, int size)
-{
-80107ec4:	55                   	push   %ebp
-80107ec5:	89 e5                	mov    %esp,%ebp
-80107ec7:	83 ec 10             	sub    $0x10,%esp
-  volatile ushort pd[3];
-
-  pd[0] = size-1;
-80107eca:	8b 45 0c             	mov    0xc(%ebp),%eax
-80107ecd:	83 e8 01             	sub    $0x1,%eax
-80107ed0:	66 89 45 fa          	mov    %ax,-0x6(%ebp)
-  pd[1] = (uint)p;
-80107ed4:	8b 45 08             	mov    0x8(%ebp),%eax
-80107ed7:	66 89 45 fc          	mov    %ax,-0x4(%ebp)
-  pd[2] = (uint)p >> 16;
-80107edb:	8b 45 08             	mov    0x8(%ebp),%eax
-80107ede:	c1 e8 10             	shr    $0x10,%eax
-80107ee1:	66 89 45 fe          	mov    %ax,-0x2(%ebp)
-
-  asm volatile("lgdt (%0)" : : "r" (pd));
-80107ee5:	8d 45 fa             	lea    -0x6(%ebp),%eax
-80107ee8:	0f 01 10             	lgdtl  (%eax)
-}
-80107eeb:	c9                   	leave  
-80107eec:	c3                   	ret    
-
-80107eed <ltr>:
-  asm volatile("lidt (%0)" : : "r" (pd));
-}
-
-static inline void
-ltr(ushort sel)
-{
-80107eed:	55                   	push   %ebp
-80107eee:	89 e5                	mov    %esp,%ebp
-80107ef0:	83 ec 04             	sub    $0x4,%esp
-80107ef3:	8b 45 08             	mov    0x8(%ebp),%eax
-80107ef6:	66 89 45 fc          	mov    %ax,-0x4(%ebp)
-  asm volatile("ltr %0" : : "r" (sel));
-80107efa:	0f b7 45 fc          	movzwl -0x4(%ebp),%eax
-80107efe:	0f 00 d8             	ltr    %ax
-}
-80107f01:	c9                   	leave  
-80107f02:	c3                   	ret    
-
-80107f03 <loadgs>:
-  return eflags;
-}
-
-static inline void
-loadgs(ushort v)
-{
-80107f03:	55                   	push   %ebp
-80107f04:	89 e5                	mov    %esp,%ebp
-80107f06:	83 ec 04             	sub    $0x4,%esp
-80107f09:	8b 45 08             	mov    0x8(%ebp),%eax
-80107f0c:	66 89 45 fc          	mov    %ax,-0x4(%ebp)
-  asm volatile("movw %0, %%gs" : : "r" (v));
-80107f10:	0f b7 45 fc          	movzwl -0x4(%ebp),%eax
-80107f14:	8e e8                	mov    %eax,%gs
-}
-80107f16:	c9                   	leave  
-80107f17:	c3                   	ret    
-
-80107f18 <lcr3>:
-  return val;
-}
-
-static inline void
-lcr3(uint val) 
-{
-80107f18:	55                   	push   %ebp
-80107f19:	89 e5                	mov    %esp,%ebp
-  asm volatile("movl %0,%%cr3" : : "r" (val));
-80107f1b:	8b 45 08             	mov    0x8(%ebp),%eax
-80107f1e:	0f 22 d8             	mov    %eax,%cr3
-}
-80107f21:	5d                   	pop    %ebp
-80107f22:	c3                   	ret    
-
-80107f23 <v2p>:
-#define KERNBASE 0x80000000         // First kernel virtual address
-#define KERNLINK (KERNBASE+EXTMEM)  // Address where kernel is linked
-
-#ifndef __ASSEMBLER__
-
-static inline uint v2p(void *a) { return ((uint) (a))  - KERNBASE; }
-80107f23:	55                   	push   %ebp
-80107f24:	89 e5                	mov    %esp,%ebp
-80107f26:	8b 45 08             	mov    0x8(%ebp),%eax
-80107f29:	05 00 00 00 80       	add    $0x80000000,%eax
-80107f2e:	5d                   	pop    %ebp
-80107f2f:	c3                   	ret    
-
-80107f30 <p2v>:
-static inline void *p2v(uint a) { return (void *) ((a) + KERNBASE); }
-80107f30:	55                   	push   %ebp
-80107f31:	89 e5                	mov    %esp,%ebp
-80107f33:	8b 45 08             	mov    0x8(%ebp),%eax
-80107f36:	05 00 00 00 80       	add    $0x80000000,%eax
-80107f3b:	5d                   	pop    %ebp
-80107f3c:	c3                   	ret    
-
-80107f3d <seginit>:
-
-// Set up CPU's kernel segment descriptors.
-// Run once on entry on each CPU.
-void
-seginit(void)
-{
-80107f3d:	55                   	push   %ebp
-80107f3e:	89 e5                	mov    %esp,%ebp
-80107f40:	53                   	push   %ebx
-80107f41:	83 ec 24             	sub    $0x24,%esp
-
-  // Map "logical" addresses to virtual addresses using identity map.
-  // Cannot share a CODE descriptor for both kernel and user
-  // because it would have to have DPL_USR, but the CPU forbids
-  // an interrupt from CPL=0 to DPL=3.
-  c = &cpus[cpunum()];
-80107f44:	e8 d6 af ff ff       	call   80102f1f <cpunum>
-80107f49:	69 c0 bc 00 00 00    	imul   $0xbc,%eax,%eax
-80107f4f:	05 80 33 11 80       	add    $0x80113380,%eax
-80107f54:	89 45 f4             	mov    %eax,-0xc(%ebp)
-  c->gdt[SEG_KCODE] = SEG(STA_X|STA_R, 0, 0xffffffff, 0);
-80107f57:	8b 45 f4             	mov    -0xc(%ebp),%eax
-80107f5a:	66 c7 40 78 ff ff    	movw   $0xffff,0x78(%eax)
-80107f60:	8b 45 f4             	mov    -0xc(%ebp),%eax
-80107f63:	66 c7 40 7a 00 00    	movw   $0x0,0x7a(%eax)
-80107f69:	8b 45 f4             	mov    -0xc(%ebp),%eax
-80107f6c:	c6 40 7c 00          	movb   $0x0,0x7c(%eax)
-80107f70:	8b 45 f4             	mov    -0xc(%ebp),%eax
-80107f73:	0f b6 50 7d          	movzbl 0x7d(%eax),%edx
-80107f77:	83 e2 f0             	and    $0xfffffff0,%edx
-80107f7a:	83 ca 0a             	or     $0xa,%edx
-80107f7d:	88 50 7d             	mov    %dl,0x7d(%eax)
-80107f80:	8b 45 f4             	mov    -0xc(%ebp),%eax
-80107f83:	0f b6 50 7d          	movzbl 0x7d(%eax),%edx
-80107f87:	83 ca 10             	or     $0x10,%edx
-80107f8a:	88 50 7d             	mov    %dl,0x7d(%eax)
-80107f8d:	8b 45 f4             	mov    -0xc(%ebp),%eax
-80107f90:	0f b6 50 7d          	movzbl 0x7d(%eax),%edx
-80107f94:	83 e2 9f             	and    $0xffffff9f,%edx
-80107f97:	88 50 7d             	mov    %dl,0x7d(%eax)
-80107f9a:	8b 45 f4             	mov    -0xc(%ebp),%eax
-80107f9d:	0f b6 50 7d          	movzbl 0x7d(%eax),%edx
-80107fa1:	83 ca 80             	or     $0xffffff80,%edx
-80107fa4:	88 50 7d             	mov    %dl,0x7d(%eax)
-80107fa7:	8b 45 f4             	mov    -0xc(%ebp),%eax
-80107faa:	0f b6 50 7e          	movzbl 0x7e(%eax),%edx
-80107fae:	83 ca 0f             	or     $0xf,%edx
-80107fb1:	88 50 7e             	mov    %dl,0x7e(%eax)
-80107fb4:	8b 45 f4             	mov    -0xc(%ebp),%eax
-80107fb7:	0f b6 50 7e          	movzbl 0x7e(%eax),%edx
-80107fbb:	83 e2 ef             	and    $0xffffffef,%edx
-80107fbe:	88 50 7e             	mov    %dl,0x7e(%eax)
-80107fc1:	8b 45 f4             	mov    -0xc(%ebp),%eax
-80107fc4:	0f b6 50 7e          	movzbl 0x7e(%eax),%edx
-80107fc8:	83 e2 df             	and    $0xffffffdf,%edx
-80107fcb:	88 50 7e             	mov    %dl,0x7e(%eax)
-80107fce:	8b 45 f4             	mov    -0xc(%ebp),%eax
-80107fd1:	0f b6 50 7e          	movzbl 0x7e(%eax),%edx
-80107fd5:	83 ca 40             	or     $0x40,%edx
-80107fd8:	88 50 7e             	mov    %dl,0x7e(%eax)
-80107fdb:	8b 45 f4             	mov    -0xc(%ebp),%eax
-80107fde:	0f b6 50 7e          	movzbl 0x7e(%eax),%edx
-80107fe2:	83 ca 80             	or     $0xffffff80,%edx
-80107fe5:	88 50 7e             	mov    %dl,0x7e(%eax)
-80107fe8:	8b 45 f4             	mov    -0xc(%ebp),%eax
-80107feb:	c6 40 7f 00          	movb   $0x0,0x7f(%eax)
-  c->gdt[SEG_KDATA] = SEG(STA_W, 0, 0xffffffff, 0);
-80107fef:	8b 45 f4             	mov    -0xc(%ebp),%eax
-80107ff2:	66 c7 80 80 00 00 00 	movw   $0xffff,0x80(%eax)
-80107ff9:	ff ff 
-80107ffb:	8b 45 f4             	mov    -0xc(%ebp),%eax
-80107ffe:	66 c7 80 82 00 00 00 	movw   $0x0,0x82(%eax)
-80108005:	00 00 
-80108007:	8b 45 f4             	mov    -0xc(%ebp),%eax
-8010800a:	c6 80 84 00 00 00 00 	movb   $0x0,0x84(%eax)
-80108011:	8b 45 f4             	mov    -0xc(%ebp),%eax
-80108014:	0f b6 90 85 00 00 00 	movzbl 0x85(%eax),%edx
-8010801b:	83 e2 f0             	and    $0xfffffff0,%edx
-8010801e:	83 ca 02             	or     $0x2,%edx
-80108021:	88 90 85 00 00 00    	mov    %dl,0x85(%eax)
-80108027:	8b 45 f4             	mov    -0xc(%ebp),%eax
-8010802a:	0f b6 90 85 00 00 00 	movzbl 0x85(%eax),%edx
-80108031:	83 ca 10             	or     $0x10,%edx
-80108034:	88 90 85 00 00 00    	mov    %dl,0x85(%eax)
-8010803a:	8b 45 f4             	mov    -0xc(%ebp),%eax
-8010803d:	0f b6 90 85 00 00 00 	movzbl 0x85(%eax),%edx
-80108044:	83 e2 9f             	and    $0xffffff9f,%edx
-80108047:	88 90 85 00 00 00    	mov    %dl,0x85(%eax)
-8010804d:	8b 45 f4             	mov    -0xc(%ebp),%eax
-80108050:	0f b6 90 85 00 00 00 	movzbl 0x85(%eax),%edx
-80108057:	83 ca 80             	or     $0xffffff80,%edx
-8010805a:	88 90 85 00 00 00    	mov    %dl,0x85(%eax)
-80108060:	8b 45 f4             	mov    -0xc(%ebp),%eax
-80108063:	0f b6 90 86 00 00 00 	movzbl 0x86(%eax),%edx
-8010806a:	83 ca 0f             	or     $0xf,%edx
-8010806d:	88 90 86 00 00 00    	mov    %dl,0x86(%eax)
-80108073:	8b 45 f4             	mov    -0xc(%ebp),%eax
-80108076:	0f b6 90 86 00 00 00 	movzbl 0x86(%eax),%edx
-8010807d:	83 e2 ef             	and    $0xffffffef,%edx
-80108080:	88 90 86 00 00 00    	mov    %dl,0x86(%eax)
-80108086:	8b 45 f4             	mov    -0xc(%ebp),%eax
-80108089:	0f b6 90 86 00 00 00 	movzbl 0x86(%eax),%edx
-80108090:	83 e2 df             	and    $0xffffffdf,%edx
-80108093:	88 90 86 00 00 00    	mov    %dl,0x86(%eax)
-80108099:	8b 45 f4             	mov    -0xc(%ebp),%eax
-8010809c:	0f b6 90 86 00 00 00 	movzbl 0x86(%eax),%edx
-801080a3:	83 ca 40             	or     $0x40,%edx
-801080a6:	88 90 86 00 00 00    	mov    %dl,0x86(%eax)
-801080ac:	8b 45 f4             	mov    -0xc(%ebp),%eax
-801080af:	0f b6 90 86 00 00 00 	movzbl 0x86(%eax),%edx
-801080b6:	83 ca 80             	or     $0xffffff80,%edx
-801080b9:	88 90 86 00 00 00    	mov    %dl,0x86(%eax)
-801080bf:	8b 45 f4             	mov    -0xc(%ebp),%eax
-801080c2:	c6 80 87 00 00 00 00 	movb   $0x0,0x87(%eax)
-  c->gdt[SEG_UCODE] = SEG(STA_X|STA_R, 0, 0xffffffff, DPL_USER);
-801080c9:	8b 45 f4             	mov    -0xc(%ebp),%eax
-801080cc:	66 c7 80 90 00 00 00 	movw   $0xffff,0x90(%eax)
-801080d3:	ff ff 
-801080d5:	8b 45 f4             	mov    -0xc(%ebp),%eax
-801080d8:	66 c7 80 92 00 00 00 	movw   $0x0,0x92(%eax)
-801080df:	00 00 
-801080e1:	8b 45 f4             	mov    -0xc(%ebp),%eax
-801080e4:	c6 80 94 00 00 00 00 	movb   $0x0,0x94(%eax)
-801080eb:	8b 45 f4             	mov    -0xc(%ebp),%eax
-801080ee:	0f b6 90 95 00 00 00 	movzbl 0x95(%eax),%edx
-801080f5:	83 e2 f0             	and    $0xfffffff0,%edx
-801080f8:	83 ca 0a             	or     $0xa,%edx
-801080fb:	88 90 95 00 00 00    	mov    %dl,0x95(%eax)
-80108101:	8b 45 f4             	mov    -0xc(%ebp),%eax
-80108104:	0f b6 90 95 00 00 00 	movzbl 0x95(%eax),%edx
-8010810b:	83 ca 10             	or     $0x10,%edx
-8010810e:	88 90 95 00 00 00    	mov    %dl,0x95(%eax)
-80108114:	8b 45 f4             	mov    -0xc(%ebp),%eax
-80108117:	0f b6 90 95 00 00 00 	movzbl 0x95(%eax),%edx
-8010811e:	83 ca 60             	or     $0x60,%edx
-80108121:	88 90 95 00 00 00    	mov    %dl,0x95(%eax)
-80108127:	8b 45 f4             	mov    -0xc(%ebp),%eax
-8010812a:	0f b6 90 95 00 00 00 	movzbl 0x95(%eax),%edx
-80108131:	83 ca 80             	or     $0xffffff80,%edx
-80108134:	88 90 95 00 00 00    	mov    %dl,0x95(%eax)
-8010813a:	8b 45 f4             	mov    -0xc(%ebp),%eax
-8010813d:	0f b6 90 96 00 00 00 	movzbl 0x96(%eax),%edx
-80108144:	83 ca 0f             	or     $0xf,%edx
-80108147:	88 90 96 00 00 00    	mov    %dl,0x96(%eax)
-8010814d:	8b 45 f4             	mov    -0xc(%ebp),%eax
-80108150:	0f b6 90 96 00 00 00 	movzbl 0x96(%eax),%edx
-80108157:	83 e2 ef             	and    $0xffffffef,%edx
-8010815a:	88 90 96 00 00 00    	mov    %dl,0x96(%eax)
-80108160:	8b 45 f4             	mov    -0xc(%ebp),%eax
-80108163:	0f b6 90 96 00 00 00 	movzbl 0x96(%eax),%edx
-8010816a:	83 e2 df             	and    $0xffffffdf,%edx
-8010816d:	88 90 96 00 00 00    	mov    %dl,0x96(%eax)
-80108173:	8b 45 f4             	mov    -0xc(%ebp),%eax
-80108176:	0f b6 90 96 00 00 00 	movzbl 0x96(%eax),%edx
-8010817d:	83 ca 40             	or     $0x40,%edx
-80108180:	88 90 96 00 00 00    	mov    %dl,0x96(%eax)
-80108186:	8b 45 f4             	mov    -0xc(%ebp),%eax
-80108189:	0f b6 90 96 00 00 00 	movzbl 0x96(%eax),%edx
-80108190:	83 ca 80             	or     $0xffffff80,%edx
-80108193:	88 90 96 00 00 00    	mov    %dl,0x96(%eax)
-80108199:	8b 45 f4             	mov    -0xc(%ebp),%eax
-8010819c:	c6 80 97 00 00 00 00 	movb   $0x0,0x97(%eax)
-  c->gdt[SEG_UDATA] = SEG(STA_W, 0, 0xffffffff, DPL_USER);
-801081a3:	8b 45 f4             	mov    -0xc(%ebp),%eax
-801081a6:	66 c7 80 98 00 00 00 	movw   $0xffff,0x98(%eax)
-801081ad:	ff ff 
-801081af:	8b 45 f4             	mov    -0xc(%ebp),%eax
-801081b2:	66 c7 80 9a 00 00 00 	movw   $0x0,0x9a(%eax)
-801081b9:	00 00 
-801081bb:	8b 45 f4             	mov    -0xc(%ebp),%eax
-801081be:	c6 80 9c 00 00 00 00 	movb   $0x0,0x9c(%eax)
-801081c5:	8b 45 f4             	mov    -0xc(%ebp),%eax
-801081c8:	0f b6 90 9d 00 00 00 	movzbl 0x9d(%eax),%edx
-801081cf:	83 e2 f0             	and    $0xfffffff0,%edx
-801081d2:	83 ca 02             	or     $0x2,%edx
-801081d5:	88 90 9d 00 00 00    	mov    %dl,0x9d(%eax)
-801081db:	8b 45 f4             	mov    -0xc(%ebp),%eax
-801081de:	0f b6 90 9d 00 00 00 	movzbl 0x9d(%eax),%edx
-801081e5:	83 ca 10             	or     $0x10,%edx
-801081e8:	88 90 9d 00 00 00    	mov    %dl,0x9d(%eax)
-801081ee:	8b 45 f4             	mov    -0xc(%ebp),%eax
-801081f1:	0f b6 90 9d 00 00 00 	movzbl 0x9d(%eax),%edx
-801081f8:	83 ca 60             	or     $0x60,%edx
-801081fb:	88 90 9d 00 00 00    	mov    %dl,0x9d(%eax)
-80108201:	8b 45 f4             	mov    -0xc(%ebp),%eax
-80108204:	0f b6 90 9d 00 00 00 	movzbl 0x9d(%eax),%edx
-8010820b:	83 ca 80             	or     $0xffffff80,%edx
-8010820e:	88 90 9d 00 00 00    	mov    %dl,0x9d(%eax)
-80108214:	8b 45 f4             	mov    -0xc(%ebp),%eax
-80108217:	0f b6 90 9e 00 00 00 	movzbl 0x9e(%eax),%edx
-8010821e:	83 ca 0f             	or     $0xf,%edx
-80108221:	88 90 9e 00 00 00    	mov    %dl,0x9e(%eax)
-80108227:	8b 45 f4             	mov    -0xc(%ebp),%eax
-8010822a:	0f b6 90 9e 00 00 00 	movzbl 0x9e(%eax),%edx
-80108231:	83 e2 ef             	and    $0xffffffef,%edx
-80108234:	88 90 9e 00 00 00    	mov    %dl,0x9e(%eax)
-8010823a:	8b 45 f4             	mov    -0xc(%ebp),%eax
-8010823d:	0f b6 90 9e 00 00 00 	movzbl 0x9e(%eax),%edx
-80108244:	83 e2 df             	and    $0xffffffdf,%edx
-80108247:	88 90 9e 00 00 00    	mov    %dl,0x9e(%eax)
-8010824d:	8b 45 f4             	mov    -0xc(%ebp),%eax
-80108250:	0f b6 90 9e 00 00 00 	movzbl 0x9e(%eax),%edx
-80108257:	83 ca 40             	or     $0x40,%edx
-8010825a:	88 90 9e 00 00 00    	mov    %dl,0x9e(%eax)
-80108260:	8b 45 f4             	mov    -0xc(%ebp),%eax
-80108263:	0f b6 90 9e 00 00 00 	movzbl 0x9e(%eax),%edx
-8010826a:	83 ca 80             	or     $0xffffff80,%edx
-8010826d:	88 90 9e 00 00 00    	mov    %dl,0x9e(%eax)
-80108273:	8b 45 f4             	mov    -0xc(%ebp),%eax
-80108276:	c6 80 9f 00 00 00 00 	movb   $0x0,0x9f(%eax)
-
-  // Map cpu, and curproc
-  c->gdt[SEG_KCPU] = SEG(STA_W, &c->cpu, 8, 0);
-8010827d:	8b 45 f4             	mov    -0xc(%ebp),%eax
-80108280:	05 b4 00 00 00       	add    $0xb4,%eax
-80108285:	89 c3                	mov    %eax,%ebx
-80108287:	8b 45 f4             	mov    -0xc(%ebp),%eax
-8010828a:	05 b4 00 00 00       	add    $0xb4,%eax
-8010828f:	c1 e8 10             	shr    $0x10,%eax
-80108292:	89 c1                	mov    %eax,%ecx
-80108294:	8b 45 f4             	mov    -0xc(%ebp),%eax
-80108297:	05 b4 00 00 00       	add    $0xb4,%eax
-8010829c:	c1 e8 18             	shr    $0x18,%eax
-8010829f:	89 c2                	mov    %eax,%edx
-801082a1:	8b 45 f4             	mov    -0xc(%ebp),%eax
-801082a4:	66 c7 80 88 00 00 00 	movw   $0x0,0x88(%eax)
-801082ab:	00 00 
-801082ad:	8b 45 f4             	mov    -0xc(%ebp),%eax
-801082b0:	66 89 98 8a 00 00 00 	mov    %bx,0x8a(%eax)
-801082b7:	8b 45 f4             	mov    -0xc(%ebp),%eax
-801082ba:	88 88 8c 00 00 00    	mov    %cl,0x8c(%eax)
-801082c0:	8b 45 f4             	mov    -0xc(%ebp),%eax
-801082c3:	0f b6 88 8d 00 00 00 	movzbl 0x8d(%eax),%ecx
-801082ca:	83 e1 f0             	and    $0xfffffff0,%ecx
-801082cd:	83 c9 02             	or     $0x2,%ecx
-801082d0:	88 88 8d 00 00 00    	mov    %cl,0x8d(%eax)
-801082d6:	8b 45 f4             	mov    -0xc(%ebp),%eax
-801082d9:	0f b6 88 8d 00 00 00 	movzbl 0x8d(%eax),%ecx
-801082e0:	83 c9 10             	or     $0x10,%ecx
-801082e3:	88 88 8d 00 00 00    	mov    %cl,0x8d(%eax)
-801082e9:	8b 45 f4             	mov    -0xc(%ebp),%eax
-801082ec:	0f b6 88 8d 00 00 00 	movzbl 0x8d(%eax),%ecx
-801082f3:	83 e1 9f             	and    $0xffffff9f,%ecx
-801082f6:	88 88 8d 00 00 00    	mov    %cl,0x8d(%eax)
-801082fc:	8b 45 f4             	mov    -0xc(%ebp),%eax
-801082ff:	0f b6 88 8d 00 00 00 	movzbl 0x8d(%eax),%ecx
-80108306:	83 c9 80             	or     $0xffffff80,%ecx
-80108309:	88 88 8d 00 00 00    	mov    %cl,0x8d(%eax)
-8010830f:	8b 45 f4             	mov    -0xc(%ebp),%eax
-80108312:	0f b6 88 8e 00 00 00 	movzbl 0x8e(%eax),%ecx
-80108319:	83 e1 f0             	and    $0xfffffff0,%ecx
-8010831c:	88 88 8e 00 00 00    	mov    %cl,0x8e(%eax)
-80108322:	8b 45 f4             	mov    -0xc(%ebp),%eax
-80108325:	0f b6 88 8e 00 00 00 	movzbl 0x8e(%eax),%ecx
-8010832c:	83 e1 ef             	and    $0xffffffef,%ecx
-8010832f:	88 88 8e 00 00 00    	mov    %cl,0x8e(%eax)
-80108335:	8b 45 f4             	mov    -0xc(%ebp),%eax
-80108338:	0f b6 88 8e 00 00 00 	movzbl 0x8e(%eax),%ecx
-8010833f:	83 e1 df             	and    $0xffffffdf,%ecx
-80108342:	88 88 8e 00 00 00    	mov    %cl,0x8e(%eax)
-80108348:	8b 45 f4             	mov    -0xc(%ebp),%eax
-8010834b:	0f b6 88 8e 00 00 00 	movzbl 0x8e(%eax),%ecx
-80108352:	83 c9 40             	or     $0x40,%ecx
-80108355:	88 88 8e 00 00 00    	mov    %cl,0x8e(%eax)
-8010835b:	8b 45 f4             	mov    -0xc(%ebp),%eax
-8010835e:	0f b6 88 8e 00 00 00 	movzbl 0x8e(%eax),%ecx
-80108365:	83 c9 80             	or     $0xffffff80,%ecx
-80108368:	88 88 8e 00 00 00    	mov    %cl,0x8e(%eax)
-8010836e:	8b 45 f4             	mov    -0xc(%ebp),%eax
-80108371:	88 90 8f 00 00 00    	mov    %dl,0x8f(%eax)
-
-  lgdt(c->gdt, sizeof(c->gdt));
-80108377:	8b 45 f4             	mov    -0xc(%ebp),%eax
-8010837a:	83 c0 70             	add    $0x70,%eax
-8010837d:	c7 44 24 04 38 00 00 	movl   $0x38,0x4(%esp)
-80108384:	00 
-80108385:	89 04 24             	mov    %eax,(%esp)
-80108388:	e8 37 fb ff ff       	call   80107ec4 <lgdt>
-  loadgs(SEG_KCPU << 3);
-8010838d:	c7 04 24 18 00 00 00 	movl   $0x18,(%esp)
-80108394:	e8 6a fb ff ff       	call   80107f03 <loadgs>
-  
-  // Initialize cpu-local storage.
-  cpu = c;
-80108399:	8b 45 f4             	mov    -0xc(%ebp),%eax
-8010839c:	65 a3 00 00 00 00    	mov    %eax,%gs:0x0
-  proc = 0;
-801083a2:	65 c7 05 04 00 00 00 	movl   $0x0,%gs:0x4
-801083a9:	00 00 00 00 
-}
-801083ad:	83 c4 24             	add    $0x24,%esp
-801083b0:	5b                   	pop    %ebx
-801083b1:	5d                   	pop    %ebp
-801083b2:	c3                   	ret    
-
-801083b3 <walkpgdir>:
-// Return the address of the PTE in page table pgdir
-// that corresponds to virtual address va.  If alloc!=0,
-// create any required page table pages.
-static pte_t *
-walkpgdir(pde_t *pgdir, const void *va, int alloc)
-{
-801083b3:	55                   	push   %ebp
-801083b4:	89 e5                	mov    %esp,%ebp
-801083b6:	83 ec 28             	sub    $0x28,%esp
-  pde_t *pde;
-  pte_t *pgtab;
-
-  pde = &pgdir[PDX(va)];
-801083b9:	8b 45 0c             	mov    0xc(%ebp),%eax
-801083bc:	c1 e8 16             	shr    $0x16,%eax
-801083bf:	c1 e0 02             	shl    $0x2,%eax
-801083c2:	03 45 08             	add    0x8(%ebp),%eax
-801083c5:	89 45 f0             	mov    %eax,-0x10(%ebp)
-  if(*pde & PTE_P){
-801083c8:	8b 45 f0             	mov    -0x10(%ebp),%eax
-801083cb:	8b 00                	mov    (%eax),%eax
-801083cd:	83 e0 01             	and    $0x1,%eax
-801083d0:	84 c0                	test   %al,%al
-801083d2:	74 17                	je     801083eb <walkpgdir+0x38>
-    pgtab = (pte_t*)p2v(PTE_ADDR(*pde));
-801083d4:	8b 45 f0             	mov    -0x10(%ebp),%eax
-801083d7:	8b 00                	mov    (%eax),%eax
-801083d9:	25 00 f0 ff ff       	and    $0xfffff000,%eax
-801083de:	89 04 24             	mov    %eax,(%esp)
-801083e1:	e8 4a fb ff ff       	call   80107f30 <p2v>
-801083e6:	89 45 f4             	mov    %eax,-0xc(%ebp)
-801083e9:	eb 4b                	jmp    80108436 <walkpgdir+0x83>
-  } else {
-    if(!alloc || (pgtab = (pte_t*)kalloc()) == 0)
-801083eb:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
-801083ef:	74 0e                	je     801083ff <walkpgdir+0x4c>
-801083f1:	e8 71 a7 ff ff       	call   80102b67 <kalloc>
-801083f6:	89 45 f4             	mov    %eax,-0xc(%ebp)
-801083f9:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
-801083fd:	75 07                	jne    80108406 <walkpgdir+0x53>
-      return 0;
-801083ff:	b8 00 00 00 00       	mov    $0x0,%eax
-80108404:	eb 41                	jmp    80108447 <walkpgdir+0x94>
-    // Make sure all those PTE_P bits are zero.
-    memset(pgtab, 0, PGSIZE);
-80108406:	c7 44 24 08 00 10 00 	movl   $0x1000,0x8(%esp)
-8010840d:	00 
-8010840e:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
-80108415:	00 
-80108416:	8b 45 f4             	mov    -0xc(%ebp),%eax
-80108419:	89 04 24             	mov    %eax,(%esp)
-8010841c:	e8 55 d2 ff ff       	call   80105676 <memset>
-    // The permissions here are overly generous, but they can
-    // be further restricted by the permissions in the page table 
-    // entries, if necessary.
-    *pde = v2p(pgtab) | PTE_P | PTE_W | PTE_U;
-80108421:	8b 45 f4             	mov    -0xc(%ebp),%eax
-80108424:	89 04 24             	mov    %eax,(%esp)
-80108427:	e8 f7 fa ff ff       	call   80107f23 <v2p>
-8010842c:	89 c2                	mov    %eax,%edx
-8010842e:	83 ca 07             	or     $0x7,%edx
-80108431:	8b 45 f0             	mov    -0x10(%ebp),%eax
-80108434:	89 10                	mov    %edx,(%eax)
-  }
-  return &pgtab[PTX(va)];
-80108436:	8b 45 0c             	mov    0xc(%ebp),%eax
-80108439:	c1 e8 0c             	shr    $0xc,%eax
-8010843c:	25 ff 03 00 00       	and    $0x3ff,%eax
-80108441:	c1 e0 02             	shl    $0x2,%eax
-80108444:	03 45 f4             	add    -0xc(%ebp),%eax
-}
-80108447:	c9                   	leave  
-80108448:	c3                   	ret    
-
-80108449 <mappages>:
-// Create PTEs for virtual addresses starting at va that refer to
-// physical addresses starting at pa. va and size might not
-// be page-aligned.
-static int
-mappages(pde_t *pgdir, void *va, uint size, uint pa, int perm)
-{
-80108449:	55                   	push   %ebp
-8010844a:	89 e5                	mov    %esp,%ebp
-8010844c:	83 ec 28             	sub    $0x28,%esp
-  char *a, *last;
-  pte_t *pte;
-  
-  a = (char*)PGROUNDDOWN((uint)va);
-8010844f:	8b 45 0c             	mov    0xc(%ebp),%eax
-80108452:	25 00 f0 ff ff       	and    $0xfffff000,%eax
-80108457:	89 45 f4             	mov    %eax,-0xc(%ebp)
-  last = (char*)PGROUNDDOWN(((uint)va) + size - 1);
-8010845a:	8b 45 0c             	mov    0xc(%ebp),%eax
-8010845d:	03 45 10             	add    0x10(%ebp),%eax
-80108460:	83 e8 01             	sub    $0x1,%eax
-80108463:	25 00 f0 ff ff       	and    $0xfffff000,%eax
-80108468:	89 45 f0             	mov    %eax,-0x10(%ebp)
-  for(;;){
-    if((pte = walkpgdir(pgdir, a, 1)) == 0)
-8010846b:	c7 44 24 08 01 00 00 	movl   $0x1,0x8(%esp)
-80108472:	00 
-80108473:	8b 45 f4             	mov    -0xc(%ebp),%eax
-80108476:	89 44 24 04          	mov    %eax,0x4(%esp)
-8010847a:	8b 45 08             	mov    0x8(%ebp),%eax
-8010847d:	89 04 24             	mov    %eax,(%esp)
-80108480:	e8 2e ff ff ff       	call   801083b3 <walkpgdir>
-80108485:	89 45 ec             	mov    %eax,-0x14(%ebp)
-80108488:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
-8010848c:	75 07                	jne    80108495 <mappages+0x4c>
-      return -1;
-8010848e:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
-80108493:	eb 46                	jmp    801084db <mappages+0x92>
-    if(*pte & PTE_P)
-80108495:	8b 45 ec             	mov    -0x14(%ebp),%eax
-80108498:	8b 00                	mov    (%eax),%eax
-8010849a:	83 e0 01             	and    $0x1,%eax
-8010849d:	84 c0                	test   %al,%al
-8010849f:	74 0c                	je     801084ad <mappages+0x64>
-      panic("remap");
-801084a1:	c7 04 24 48 97 10 80 	movl   $0x80109748,(%esp)
-801084a8:	e8 90 80 ff ff       	call   8010053d <panic>
-    *pte = pa | perm | PTE_P;
-801084ad:	8b 45 18             	mov    0x18(%ebp),%eax
-801084b0:	0b 45 14             	or     0x14(%ebp),%eax
-801084b3:	89 c2                	mov    %eax,%edx
-801084b5:	83 ca 01             	or     $0x1,%edx
-801084b8:	8b 45 ec             	mov    -0x14(%ebp),%eax
-801084bb:	89 10                	mov    %edx,(%eax)
-    if(a == last)
-801084bd:	8b 45 f4             	mov    -0xc(%ebp),%eax
-801084c0:	3b 45 f0             	cmp    -0x10(%ebp),%eax
-801084c3:	74 10                	je     801084d5 <mappages+0x8c>
-      break;
-    a += PGSIZE;
-801084c5:	81 45 f4 00 10 00 00 	addl   $0x1000,-0xc(%ebp)
-    pa += PGSIZE;
-801084cc:	81 45 14 00 10 00 00 	addl   $0x1000,0x14(%ebp)
-  }
-801084d3:	eb 96                	jmp    8010846b <mappages+0x22>
-      return -1;
-    if(*pte & PTE_P)
-      panic("remap");
-    *pte = pa | perm | PTE_P;
-    if(a == last)
-      break;
-801084d5:	90                   	nop
-    a += PGSIZE;
-    pa += PGSIZE;
-  }
-  return 0;
-801084d6:	b8 00 00 00 00       	mov    $0x0,%eax
-}
-801084db:	c9                   	leave  
-801084dc:	c3                   	ret    
-
-801084dd <setupkvm>:
-};
-
-// Set up kernel part of a page table.
-pde_t*
-setupkvm(void)
-{
-801084dd:	55                   	push   %ebp
-801084de:	89 e5                	mov    %esp,%ebp
-801084e0:	53                   	push   %ebx
-801084e1:	83 ec 34             	sub    $0x34,%esp
-  pde_t *pgdir;
-  struct kmap *k;
-
-  if((pgdir = (pde_t*)kalloc()) == 0)
-801084e4:	e8 7e a6 ff ff       	call   80102b67 <kalloc>
-801084e9:	89 45 f0             	mov    %eax,-0x10(%ebp)
-801084ec:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
-801084f0:	75 0a                	jne    801084fc <setupkvm+0x1f>
-    return 0;
-801084f2:	b8 00 00 00 00       	mov    $0x0,%eax
-801084f7:	e9 98 00 00 00       	jmp    80108594 <setupkvm+0xb7>
-  memset(pgdir, 0, PGSIZE);
-801084fc:	c7 44 24 08 00 10 00 	movl   $0x1000,0x8(%esp)
-80108503:	00 
-80108504:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
-8010850b:	00 
-8010850c:	8b 45 f0             	mov    -0x10(%ebp),%eax
-8010850f:	89 04 24             	mov    %eax,(%esp)
-80108512:	e8 5f d1 ff ff       	call   80105676 <memset>
-  if (p2v(PHYSTOP) > (void*)DEVSPACE)
-80108517:	c7 04 24 00 00 00 0e 	movl   $0xe000000,(%esp)
-8010851e:	e8 0d fa ff ff       	call   80107f30 <p2v>
-80108523:	3d 00 00 00 fe       	cmp    $0xfe000000,%eax
-80108528:	76 0c                	jbe    80108536 <setupkvm+0x59>
-    panic("PHYSTOP too high");
-8010852a:	c7 04 24 4e 97 10 80 	movl   $0x8010974e,(%esp)
-80108531:	e8 07 80 ff ff       	call   8010053d <panic>
-  for(k = kmap; k < &kmap[NELEM(kmap)]; k++)
-80108536:	c7 45 f4 c0 c4 10 80 	movl   $0x8010c4c0,-0xc(%ebp)
-8010853d:	eb 49                	jmp    80108588 <setupkvm+0xab>
-    if(mappages(pgdir, k->virt, k->phys_end - k->phys_start, 
-                (uint)k->phys_start, k->perm) < 0)
-8010853f:	8b 45 f4             	mov    -0xc(%ebp),%eax
-    return 0;
-  memset(pgdir, 0, PGSIZE);
-  if (p2v(PHYSTOP) > (void*)DEVSPACE)
-    panic("PHYSTOP too high");
-  for(k = kmap; k < &kmap[NELEM(kmap)]; k++)
-    if(mappages(pgdir, k->virt, k->phys_end - k->phys_start, 
-80108542:	8b 48 0c             	mov    0xc(%eax),%ecx
-                (uint)k->phys_start, k->perm) < 0)
-80108545:	8b 45 f4             	mov    -0xc(%ebp),%eax
-    return 0;
-  memset(pgdir, 0, PGSIZE);
-  if (p2v(PHYSTOP) > (void*)DEVSPACE)
-    panic("PHYSTOP too high");
-  for(k = kmap; k < &kmap[NELEM(kmap)]; k++)
-    if(mappages(pgdir, k->virt, k->phys_end - k->phys_start, 
-80108548:	8b 50 04             	mov    0x4(%eax),%edx
-8010854b:	8b 45 f4             	mov    -0xc(%ebp),%eax
-8010854e:	8b 58 08             	mov    0x8(%eax),%ebx
-80108551:	8b 45 f4             	mov    -0xc(%ebp),%eax
-80108554:	8b 40 04             	mov    0x4(%eax),%eax
-80108557:	29 c3                	sub    %eax,%ebx
-80108559:	8b 45 f4             	mov    -0xc(%ebp),%eax
-8010855c:	8b 00                	mov    (%eax),%eax
-8010855e:	89 4c 24 10          	mov    %ecx,0x10(%esp)
-80108562:	89 54 24 0c          	mov    %edx,0xc(%esp)
-80108566:	89 5c 24 08          	mov    %ebx,0x8(%esp)
-8010856a:	89 44 24 04          	mov    %eax,0x4(%esp)
-8010856e:	8b 45 f0             	mov    -0x10(%ebp),%eax
-80108571:	89 04 24             	mov    %eax,(%esp)
-80108574:	e8 d0 fe ff ff       	call   80108449 <mappages>
-80108579:	85 c0                	test   %eax,%eax
-8010857b:	79 07                	jns    80108584 <setupkvm+0xa7>
-                (uint)k->phys_start, k->perm) < 0)
-      return 0;
-8010857d:	b8 00 00 00 00       	mov    $0x0,%eax
-80108582:	eb 10                	jmp    80108594 <setupkvm+0xb7>
-  if((pgdir = (pde_t*)kalloc()) == 0)
-    return 0;
-  memset(pgdir, 0, PGSIZE);
-  if (p2v(PHYSTOP) > (void*)DEVSPACE)
-    panic("PHYSTOP too high");
-  for(k = kmap; k < &kmap[NELEM(kmap)]; k++)
-80108584:	83 45 f4 10          	addl   $0x10,-0xc(%ebp)
-80108588:	81 7d f4 00 c5 10 80 	cmpl   $0x8010c500,-0xc(%ebp)
-8010858f:	72 ae                	jb     8010853f <setupkvm+0x62>
-    if(mappages(pgdir, k->virt, k->phys_end - k->phys_start, 
-                (uint)k->phys_start, k->perm) < 0)
-      return 0;
-  return pgdir;
-80108591:	8b 45 f0             	mov    -0x10(%ebp),%eax
-}
-80108594:	83 c4 34             	add    $0x34,%esp
-80108597:	5b                   	pop    %ebx
-80108598:	5d                   	pop    %ebp
-80108599:	c3                   	ret    
-
-8010859a <kvmalloc>:
-
-// Allocate one page table for the machine for the kernel address
-// space for scheduler processes.
-void
-kvmalloc(void)
-{
-8010859a:	55                   	push   %ebp
-8010859b:	89 e5                	mov    %esp,%ebp
-8010859d:	83 ec 08             	sub    $0x8,%esp
-  kpgdir = setupkvm();
-801085a0:	e8 38 ff ff ff       	call   801084dd <setupkvm>
-801085a5:	a3 58 6a 11 80       	mov    %eax,0x80116a58
-  switchkvm();
-801085aa:	e8 02 00 00 00       	call   801085b1 <switchkvm>
-}
-801085af:	c9                   	leave  
-801085b0:	c3                   	ret    
-
-801085b1 <switchkvm>:
-
-// Switch h/w page table register to the kernel-only page table,
-// for when no process is running.
-void
-switchkvm(void)
-{
-801085b1:	55                   	push   %ebp
-801085b2:	89 e5                	mov    %esp,%ebp
-801085b4:	83 ec 04             	sub    $0x4,%esp
-  lcr3(v2p(kpgdir));   // switch to the kernel page table
-801085b7:	a1 58 6a 11 80       	mov    0x80116a58,%eax
-801085bc:	89 04 24             	mov    %eax,(%esp)
-801085bf:	e8 5f f9 ff ff       	call   80107f23 <v2p>
-801085c4:	89 04 24             	mov    %eax,(%esp)
-801085c7:	e8 4c f9 ff ff       	call   80107f18 <lcr3>
-}
-801085cc:	c9                   	leave  
-801085cd:	c3                   	ret    
-
-801085ce <switchuvm>:
-
-// Switch TSS and h/w page table to correspond to process p.
-void
-switchuvm(struct proc *p)
-{
-801085ce:	55                   	push   %ebp
-801085cf:	89 e5                	mov    %esp,%ebp
-801085d1:	53                   	push   %ebx
-801085d2:	83 ec 14             	sub    $0x14,%esp
-  pushcli();
-801085d5:	e8 95 cf ff ff       	call   8010556f <pushcli>
-  cpu->gdt[SEG_TSS] = SEG16(STS_T32A, &cpu->ts, sizeof(cpu->ts)-1, 0);
-801085da:	65 a1 00 00 00 00    	mov    %gs:0x0,%eax
-801085e0:	65 8b 15 00 00 00 00 	mov    %gs:0x0,%edx
-801085e7:	83 c2 08             	add    $0x8,%edx
-801085ea:	89 d3                	mov    %edx,%ebx
-801085ec:	65 8b 15 00 00 00 00 	mov    %gs:0x0,%edx
-801085f3:	83 c2 08             	add    $0x8,%edx
-801085f6:	c1 ea 10             	shr    $0x10,%edx
-801085f9:	89 d1                	mov    %edx,%ecx
-801085fb:	65 8b 15 00 00 00 00 	mov    %gs:0x0,%edx
-80108602:	83 c2 08             	add    $0x8,%edx
-80108605:	c1 ea 18             	shr    $0x18,%edx
-80108608:	66 c7 80 a0 00 00 00 	movw   $0x67,0xa0(%eax)
-8010860f:	67 00 
-80108611:	66 89 98 a2 00 00 00 	mov    %bx,0xa2(%eax)
-80108618:	88 88 a4 00 00 00    	mov    %cl,0xa4(%eax)
-8010861e:	0f b6 88 a5 00 00 00 	movzbl 0xa5(%eax),%ecx
-80108625:	83 e1 f0             	and    $0xfffffff0,%ecx
-80108628:	83 c9 09             	or     $0x9,%ecx
-8010862b:	88 88 a5 00 00 00    	mov    %cl,0xa5(%eax)
-80108631:	0f b6 88 a5 00 00 00 	movzbl 0xa5(%eax),%ecx
-80108638:	83 c9 10             	or     $0x10,%ecx
-8010863b:	88 88 a5 00 00 00    	mov    %cl,0xa5(%eax)
-80108641:	0f b6 88 a5 00 00 00 	movzbl 0xa5(%eax),%ecx
-80108648:	83 e1 9f             	and    $0xffffff9f,%ecx
-8010864b:	88 88 a5 00 00 00    	mov    %cl,0xa5(%eax)
-80108651:	0f b6 88 a5 00 00 00 	movzbl 0xa5(%eax),%ecx
-80108658:	83 c9 80             	or     $0xffffff80,%ecx
-8010865b:	88 88 a5 00 00 00    	mov    %cl,0xa5(%eax)
-80108661:	0f b6 88 a6 00 00 00 	movzbl 0xa6(%eax),%ecx
-80108668:	83 e1 f0             	and    $0xfffffff0,%ecx
-8010866b:	88 88 a6 00 00 00    	mov    %cl,0xa6(%eax)
-80108671:	0f b6 88 a6 00 00 00 	movzbl 0xa6(%eax),%ecx
-80108678:	83 e1 ef             	and    $0xffffffef,%ecx
-8010867b:	88 88 a6 00 00 00    	mov    %cl,0xa6(%eax)
-80108681:	0f b6 88 a6 00 00 00 	movzbl 0xa6(%eax),%ecx
-80108688:	83 e1 df             	and    $0xffffffdf,%ecx
-8010868b:	88 88 a6 00 00 00    	mov    %cl,0xa6(%eax)
-80108691:	0f b6 88 a6 00 00 00 	movzbl 0xa6(%eax),%ecx
-80108698:	83 c9 40             	or     $0x40,%ecx
-8010869b:	88 88 a6 00 00 00    	mov    %cl,0xa6(%eax)
-801086a1:	0f b6 88 a6 00 00 00 	movzbl 0xa6(%eax),%ecx
-801086a8:	83 e1 7f             	and    $0x7f,%ecx
-801086ab:	88 88 a6 00 00 00    	mov    %cl,0xa6(%eax)
-801086b1:	88 90 a7 00 00 00    	mov    %dl,0xa7(%eax)
-  cpu->gdt[SEG_TSS].s = 0;
-801086b7:	65 a1 00 00 00 00    	mov    %gs:0x0,%eax
-801086bd:	0f b6 90 a5 00 00 00 	movzbl 0xa5(%eax),%edx
-801086c4:	83 e2 ef             	and    $0xffffffef,%edx
-801086c7:	88 90 a5 00 00 00    	mov    %dl,0xa5(%eax)
-  cpu->ts.ss0 = SEG_KDATA << 3;
-801086cd:	65 a1 00 00 00 00    	mov    %gs:0x0,%eax
-801086d3:	66 c7 40 10 10 00    	movw   $0x10,0x10(%eax)
-  cpu->ts.esp0 = (uint)proc->kstack + KSTACKSIZE;
-801086d9:	65 a1 00 00 00 00    	mov    %gs:0x0,%eax
-801086df:	65 8b 15 04 00 00 00 	mov    %gs:0x4,%edx
-801086e6:	8b 52 08             	mov    0x8(%edx),%edx
-801086e9:	81 c2 00 10 00 00    	add    $0x1000,%edx
-801086ef:	89 50 0c             	mov    %edx,0xc(%eax)
-  ltr(SEG_TSS << 3);
-801086f2:	c7 04 24 30 00 00 00 	movl   $0x30,(%esp)
-801086f9:	e8 ef f7 ff ff       	call   80107eed <ltr>
-  if(p->pgdir == 0)
-801086fe:	8b 45 08             	mov    0x8(%ebp),%eax
-80108701:	8b 40 04             	mov    0x4(%eax),%eax
-80108704:	85 c0                	test   %eax,%eax
-80108706:	75 0c                	jne    80108714 <switchuvm+0x146>
-    panic("switchuvm: no pgdir");
-80108708:	c7 04 24 5f 97 10 80 	movl   $0x8010975f,(%esp)
-8010870f:	e8 29 7e ff ff       	call   8010053d <panic>
-  lcr3(v2p(p->pgdir));  // switch to new address space
-80108714:	8b 45 08             	mov    0x8(%ebp),%eax
-80108717:	8b 40 04             	mov    0x4(%eax),%eax
-8010871a:	89 04 24             	mov    %eax,(%esp)
-8010871d:	e8 01 f8 ff ff       	call   80107f23 <v2p>
-80108722:	89 04 24             	mov    %eax,(%esp)
-80108725:	e8 ee f7 ff ff       	call   80107f18 <lcr3>
-  popcli();
-8010872a:	e8 88 ce ff ff       	call   801055b7 <popcli>
-}
-8010872f:	83 c4 14             	add    $0x14,%esp
-80108732:	5b                   	pop    %ebx
-80108733:	5d                   	pop    %ebp
-80108734:	c3                   	ret    
-
-80108735 <inituvm>:
-
-// Load the initcode into address 0 of pgdir.
-// sz must be less than a page.
-void
-inituvm(pde_t *pgdir, char *init, uint sz)
-{
-80108735:	55                   	push   %ebp
-80108736:	89 e5                	mov    %esp,%ebp
-80108738:	83 ec 38             	sub    $0x38,%esp
-  char *mem;
-  
-  if(sz >= PGSIZE)
-8010873b:	81 7d 10 ff 0f 00 00 	cmpl   $0xfff,0x10(%ebp)
-80108742:	76 0c                	jbe    80108750 <inituvm+0x1b>
-    panic("inituvm: more than a page");
-80108744:	c7 04 24 73 97 10 80 	movl   $0x80109773,(%esp)
-8010874b:	e8 ed 7d ff ff       	call   8010053d <panic>
-  mem = kalloc();
-80108750:	e8 12 a4 ff ff       	call   80102b67 <kalloc>
-80108755:	89 45 f4             	mov    %eax,-0xc(%ebp)
-  memset(mem, 0, PGSIZE);
-80108758:	c7 44 24 08 00 10 00 	movl   $0x1000,0x8(%esp)
-8010875f:	00 
-80108760:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
-80108767:	00 
-80108768:	8b 45 f4             	mov    -0xc(%ebp),%eax
-8010876b:	89 04 24             	mov    %eax,(%esp)
-8010876e:	e8 03 cf ff ff       	call   80105676 <memset>
-  mappages(pgdir, 0, PGSIZE, v2p(mem), PTE_W|PTE_U);
-80108773:	8b 45 f4             	mov    -0xc(%ebp),%eax
-80108776:	89 04 24             	mov    %eax,(%esp)
-80108779:	e8 a5 f7 ff ff       	call   80107f23 <v2p>
-8010877e:	c7 44 24 10 06 00 00 	movl   $0x6,0x10(%esp)
-80108785:	00 
-80108786:	89 44 24 0c          	mov    %eax,0xc(%esp)
-8010878a:	c7 44 24 08 00 10 00 	movl   $0x1000,0x8(%esp)
-80108791:	00 
-80108792:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
-80108799:	00 
-8010879a:	8b 45 08             	mov    0x8(%ebp),%eax
-8010879d:	89 04 24             	mov    %eax,(%esp)
-801087a0:	e8 a4 fc ff ff       	call   80108449 <mappages>
-  memmove(mem, init, sz);
-801087a5:	8b 45 10             	mov    0x10(%ebp),%eax
-801087a8:	89 44 24 08          	mov    %eax,0x8(%esp)
-801087ac:	8b 45 0c             	mov    0xc(%ebp),%eax
-801087af:	89 44 24 04          	mov    %eax,0x4(%esp)
-801087b3:	8b 45 f4             	mov    -0xc(%ebp),%eax
-801087b6:	89 04 24             	mov    %eax,(%esp)
-801087b9:	e8 8b cf ff ff       	call   80105749 <memmove>
-}
-801087be:	c9                   	leave  
-801087bf:	c3                   	ret    
-
-801087c0 <loaduvm>:
-
-// Load a program segment into pgdir.  addr must be page-aligned
-// and the pages from addr to addr+sz must already be mapped.
-int
-loaduvm(pde_t *pgdir, char *addr, struct inode *ip, uint offset, uint sz)
-{
-801087c0:	55                   	push   %ebp
-801087c1:	89 e5                	mov    %esp,%ebp
-801087c3:	53                   	push   %ebx
-801087c4:	83 ec 24             	sub    $0x24,%esp
-  uint i, pa, n;
-  pte_t *pte;
-
-  if((uint) addr % PGSIZE != 0)
-801087c7:	8b 45 0c             	mov    0xc(%ebp),%eax
-801087ca:	25 ff 0f 00 00       	and    $0xfff,%eax
-801087cf:	85 c0                	test   %eax,%eax
-801087d1:	74 0c                	je     801087df <loaduvm+0x1f>
-    panic("loaduvm: addr must be page aligned");
-801087d3:	c7 04 24 90 97 10 80 	movl   $0x80109790,(%esp)
-801087da:	e8 5e 7d ff ff       	call   8010053d <panic>
-  for(i = 0; i < sz; i += PGSIZE){
-801087df:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
-801087e6:	e9 ad 00 00 00       	jmp    80108898 <loaduvm+0xd8>
-    if((pte = walkpgdir(pgdir, addr+i, 0)) == 0)
-801087eb:	8b 45 f4             	mov    -0xc(%ebp),%eax
-801087ee:	8b 55 0c             	mov    0xc(%ebp),%edx
-801087f1:	01 d0                	add    %edx,%eax
-801087f3:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
-801087fa:	00 
-801087fb:	89 44 24 04          	mov    %eax,0x4(%esp)
-801087ff:	8b 45 08             	mov    0x8(%ebp),%eax
-80108802:	89 04 24             	mov    %eax,(%esp)
-80108805:	e8 a9 fb ff ff       	call   801083b3 <walkpgdir>
-8010880a:	89 45 ec             	mov    %eax,-0x14(%ebp)
-8010880d:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
-80108811:	75 0c                	jne    8010881f <loaduvm+0x5f>
-      panic("loaduvm: address should exist");
-80108813:	c7 04 24 b3 97 10 80 	movl   $0x801097b3,(%esp)
-8010881a:	e8 1e 7d ff ff       	call   8010053d <panic>
-    pa = PTE_ADDR(*pte);
-8010881f:	8b 45 ec             	mov    -0x14(%ebp),%eax
-80108822:	8b 00                	mov    (%eax),%eax
-80108824:	25 00 f0 ff ff       	and    $0xfffff000,%eax
-80108829:	89 45 e8             	mov    %eax,-0x18(%ebp)
-    if(sz - i < PGSIZE)
-8010882c:	8b 45 f4             	mov    -0xc(%ebp),%eax
-8010882f:	8b 55 18             	mov    0x18(%ebp),%edx
-80108832:	89 d1                	mov    %edx,%ecx
-80108834:	29 c1                	sub    %eax,%ecx
-80108836:	89 c8                	mov    %ecx,%eax
-80108838:	3d ff 0f 00 00       	cmp    $0xfff,%eax
-8010883d:	77 11                	ja     80108850 <loaduvm+0x90>
-      n = sz - i;
-8010883f:	8b 45 f4             	mov    -0xc(%ebp),%eax
-80108842:	8b 55 18             	mov    0x18(%ebp),%edx
-80108845:	89 d1                	mov    %edx,%ecx
-80108847:	29 c1                	sub    %eax,%ecx
-80108849:	89 c8                	mov    %ecx,%eax
-8010884b:	89 45 f0             	mov    %eax,-0x10(%ebp)
-8010884e:	eb 07                	jmp    80108857 <loaduvm+0x97>
-    else
-      n = PGSIZE;
-80108850:	c7 45 f0 00 10 00 00 	movl   $0x1000,-0x10(%ebp)
-    if(readi(ip, p2v(pa), offset+i, n) != n)
-80108857:	8b 45 f4             	mov    -0xc(%ebp),%eax
-8010885a:	8b 55 14             	mov    0x14(%ebp),%edx
-8010885d:	8d 1c 02             	lea    (%edx,%eax,1),%ebx
-80108860:	8b 45 e8             	mov    -0x18(%ebp),%eax
-80108863:	89 04 24             	mov    %eax,(%esp)
-80108866:	e8 c5 f6 ff ff       	call   80107f30 <p2v>
-8010886b:	8b 55 f0             	mov    -0x10(%ebp),%edx
-8010886e:	89 54 24 0c          	mov    %edx,0xc(%esp)
-80108872:	89 5c 24 08          	mov    %ebx,0x8(%esp)
-80108876:	89 44 24 04          	mov    %eax,0x4(%esp)
-8010887a:	8b 45 10             	mov    0x10(%ebp),%eax
-8010887d:	89 04 24             	mov    %eax,(%esp)
-80108880:	e8 41 95 ff ff       	call   80101dc6 <readi>
-80108885:	3b 45 f0             	cmp    -0x10(%ebp),%eax
-80108888:	74 07                	je     80108891 <loaduvm+0xd1>
-      return -1;
-8010888a:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
-8010888f:	eb 18                	jmp    801088a9 <loaduvm+0xe9>
-  uint i, pa, n;
-  pte_t *pte;
-
-  if((uint) addr % PGSIZE != 0)
-    panic("loaduvm: addr must be page aligned");
-  for(i = 0; i < sz; i += PGSIZE){
-80108891:	81 45 f4 00 10 00 00 	addl   $0x1000,-0xc(%ebp)
-80108898:	8b 45 f4             	mov    -0xc(%ebp),%eax
-8010889b:	3b 45 18             	cmp    0x18(%ebp),%eax
-8010889e:	0f 82 47 ff ff ff    	jb     801087eb <loaduvm+0x2b>
-    else
-      n = PGSIZE;
-    if(readi(ip, p2v(pa), offset+i, n) != n)
-      return -1;
-  }
-  return 0;
-801088a4:	b8 00 00 00 00       	mov    $0x0,%eax
-}
-801088a9:	83 c4 24             	add    $0x24,%esp
-801088ac:	5b                   	pop    %ebx
-801088ad:	5d                   	pop    %ebp
-801088ae:	c3                   	ret    
-
-801088af <allocuvm>:
-
-// Allocate page tables and physical memory to grow process from oldsz to
-// newsz, which need not be page aligned.  Returns new size or 0 on error.
-int
-allocuvm(pde_t *pgdir, uint oldsz, uint newsz)
-{
-801088af:	55                   	push   %ebp
-801088b0:	89 e5                	mov    %esp,%ebp
-801088b2:	83 ec 38             	sub    $0x38,%esp
-  char *mem;
-  uint a;
-
-  if(newsz >= KERNBASE)
-801088b5:	8b 45 10             	mov    0x10(%ebp),%eax
-801088b8:	85 c0                	test   %eax,%eax
-801088ba:	79 0a                	jns    801088c6 <allocuvm+0x17>
-    return 0;
-801088bc:	b8 00 00 00 00       	mov    $0x0,%eax
-801088c1:	e9 c1 00 00 00       	jmp    80108987 <allocuvm+0xd8>
-  if(newsz < oldsz)
-801088c6:	8b 45 10             	mov    0x10(%ebp),%eax
-801088c9:	3b 45 0c             	cmp    0xc(%ebp),%eax
-801088cc:	73 08                	jae    801088d6 <allocuvm+0x27>
-    return oldsz;
-801088ce:	8b 45 0c             	mov    0xc(%ebp),%eax
-801088d1:	e9 b1 00 00 00       	jmp    80108987 <allocuvm+0xd8>
-
-  a = PGROUNDUP(oldsz);
-801088d6:	8b 45 0c             	mov    0xc(%ebp),%eax
-801088d9:	05 ff 0f 00 00       	add    $0xfff,%eax
-801088de:	25 00 f0 ff ff       	and    $0xfffff000,%eax
-801088e3:	89 45 f4             	mov    %eax,-0xc(%ebp)
-  for(; a < newsz; a += PGSIZE){
-801088e6:	e9 8d 00 00 00       	jmp    80108978 <allocuvm+0xc9>
-    mem = kalloc();
-801088eb:	e8 77 a2 ff ff       	call   80102b67 <kalloc>
-801088f0:	89 45 f0             	mov    %eax,-0x10(%ebp)
-    if(mem == 0){
-801088f3:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
-801088f7:	75 2c                	jne    80108925 <allocuvm+0x76>
-      cprintf("allocuvm out of memory\n");
-801088f9:	c7 04 24 d1 97 10 80 	movl   $0x801097d1,(%esp)
-80108900:	e8 9c 7a ff ff       	call   801003a1 <cprintf>
-      deallocuvm(pgdir, newsz, oldsz);
-80108905:	8b 45 0c             	mov    0xc(%ebp),%eax
-80108908:	89 44 24 08          	mov    %eax,0x8(%esp)
-8010890c:	8b 45 10             	mov    0x10(%ebp),%eax
-8010890f:	89 44 24 04          	mov    %eax,0x4(%esp)
-80108913:	8b 45 08             	mov    0x8(%ebp),%eax
-80108916:	89 04 24             	mov    %eax,(%esp)
-80108919:	e8 6b 00 00 00       	call   80108989 <deallocuvm>
-      return 0;
-8010891e:	b8 00 00 00 00       	mov    $0x0,%eax
-80108923:	eb 62                	jmp    80108987 <allocuvm+0xd8>
-    }
-    memset(mem, 0, PGSIZE);
-80108925:	c7 44 24 08 00 10 00 	movl   $0x1000,0x8(%esp)
-8010892c:	00 
-8010892d:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
-80108934:	00 
-80108935:	8b 45 f0             	mov    -0x10(%ebp),%eax
-80108938:	89 04 24             	mov    %eax,(%esp)
-8010893b:	e8 36 cd ff ff       	call   80105676 <memset>
-    mappages(pgdir, (char*)a, PGSIZE, v2p(mem), PTE_W|PTE_U);
-80108940:	8b 45 f0             	mov    -0x10(%ebp),%eax
-80108943:	89 04 24             	mov    %eax,(%esp)
-80108946:	e8 d8 f5 ff ff       	call   80107f23 <v2p>
-8010894b:	8b 55 f4             	mov    -0xc(%ebp),%edx
-8010894e:	c7 44 24 10 06 00 00 	movl   $0x6,0x10(%esp)
-80108955:	00 
-80108956:	89 44 24 0c          	mov    %eax,0xc(%esp)
-8010895a:	c7 44 24 08 00 10 00 	movl   $0x1000,0x8(%esp)
-80108961:	00 
-80108962:	89 54 24 04          	mov    %edx,0x4(%esp)
-80108966:	8b 45 08             	mov    0x8(%ebp),%eax
-80108969:	89 04 24             	mov    %eax,(%esp)
-8010896c:	e8 d8 fa ff ff       	call   80108449 <mappages>
-    return 0;
-  if(newsz < oldsz)
-    return oldsz;
-
-  a = PGROUNDUP(oldsz);
-  for(; a < newsz; a += PGSIZE){
-80108971:	81 45 f4 00 10 00 00 	addl   $0x1000,-0xc(%ebp)
-80108978:	8b 45 f4             	mov    -0xc(%ebp),%eax
-8010897b:	3b 45 10             	cmp    0x10(%ebp),%eax
-8010897e:	0f 82 67 ff ff ff    	jb     801088eb <allocuvm+0x3c>
-      return 0;
-    }
-    memset(mem, 0, PGSIZE);
-    mappages(pgdir, (char*)a, PGSIZE, v2p(mem), PTE_W|PTE_U);
-  }
-  return newsz;
-80108984:	8b 45 10             	mov    0x10(%ebp),%eax
-}
-80108987:	c9                   	leave  
-80108988:	c3                   	ret    
-
-80108989 <deallocuvm>:
-// newsz.  oldsz and newsz need not be page-aligned, nor does newsz
-// need to be less than oldsz.  oldsz can be larger than the actual
-// process size.  Returns the new process size.
-int
-deallocuvm(pde_t *pgdir, uint oldsz, uint newsz)
-{
-80108989:	55                   	push   %ebp
-8010898a:	89 e5                	mov    %esp,%ebp
-8010898c:	83 ec 28             	sub    $0x28,%esp
-  pte_t *pte;
-  uint a, pa;
-
-  if(newsz >= oldsz)
-8010898f:	8b 45 10             	mov    0x10(%ebp),%eax
-80108992:	3b 45 0c             	cmp    0xc(%ebp),%eax
-80108995:	72 08                	jb     8010899f <deallocuvm+0x16>
-    return oldsz;
-80108997:	8b 45 0c             	mov    0xc(%ebp),%eax
-8010899a:	e9 a4 00 00 00       	jmp    80108a43 <deallocuvm+0xba>
-
-  a = PGROUNDUP(newsz);
-8010899f:	8b 45 10             	mov    0x10(%ebp),%eax
-801089a2:	05 ff 0f 00 00       	add    $0xfff,%eax
-801089a7:	25 00 f0 ff ff       	and    $0xfffff000,%eax
-801089ac:	89 45 f4             	mov    %eax,-0xc(%ebp)
-  for(; a  < oldsz; a += PGSIZE){
-801089af:	e9 80 00 00 00       	jmp    80108a34 <deallocuvm+0xab>
-    pte = walkpgdir(pgdir, (char*)a, 0);
-801089b4:	8b 45 f4             	mov    -0xc(%ebp),%eax
-801089b7:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
-801089be:	00 
-801089bf:	89 44 24 04          	mov    %eax,0x4(%esp)
-801089c3:	8b 45 08             	mov    0x8(%ebp),%eax
-801089c6:	89 04 24             	mov    %eax,(%esp)
-801089c9:	e8 e5 f9 ff ff       	call   801083b3 <walkpgdir>
-801089ce:	89 45 f0             	mov    %eax,-0x10(%ebp)
-    if(!pte)
-801089d1:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
-801089d5:	75 09                	jne    801089e0 <deallocuvm+0x57>
-      a += (NPTENTRIES - 1) * PGSIZE;
-801089d7:	81 45 f4 00 f0 3f 00 	addl   $0x3ff000,-0xc(%ebp)
-801089de:	eb 4d                	jmp    80108a2d <deallocuvm+0xa4>
-    else if((*pte & PTE_P) != 0){
-801089e0:	8b 45 f0             	mov    -0x10(%ebp),%eax
-801089e3:	8b 00                	mov    (%eax),%eax
-801089e5:	83 e0 01             	and    $0x1,%eax
-801089e8:	84 c0                	test   %al,%al
-801089ea:	74 41                	je     80108a2d <deallocuvm+0xa4>
-      pa = PTE_ADDR(*pte);
-801089ec:	8b 45 f0             	mov    -0x10(%ebp),%eax
-801089ef:	8b 00                	mov    (%eax),%eax
-801089f1:	25 00 f0 ff ff       	and    $0xfffff000,%eax
-801089f6:	89 45 ec             	mov    %eax,-0x14(%ebp)
-      if(pa == 0)
-801089f9:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
-801089fd:	75 0c                	jne    80108a0b <deallocuvm+0x82>
-        panic("kfree");
-801089ff:	c7 04 24 e9 97 10 80 	movl   $0x801097e9,(%esp)
-80108a06:	e8 32 7b ff ff       	call   8010053d <panic>
-      char *v = p2v(pa);
-80108a0b:	8b 45 ec             	mov    -0x14(%ebp),%eax
-80108a0e:	89 04 24             	mov    %eax,(%esp)
-80108a11:	e8 1a f5 ff ff       	call   80107f30 <p2v>
-80108a16:	89 45 e8             	mov    %eax,-0x18(%ebp)
-      kfree(v);
-80108a19:	8b 45 e8             	mov    -0x18(%ebp),%eax
-80108a1c:	89 04 24             	mov    %eax,(%esp)
-80108a1f:	e8 aa a0 ff ff       	call   80102ace <kfree>
-      *pte = 0;
-80108a24:	8b 45 f0             	mov    -0x10(%ebp),%eax
-80108a27:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
-
-  if(newsz >= oldsz)
-    return oldsz;
-
-  a = PGROUNDUP(newsz);
-  for(; a  < oldsz; a += PGSIZE){
-80108a2d:	81 45 f4 00 10 00 00 	addl   $0x1000,-0xc(%ebp)
-80108a34:	8b 45 f4             	mov    -0xc(%ebp),%eax
-80108a37:	3b 45 0c             	cmp    0xc(%ebp),%eax
-80108a3a:	0f 82 74 ff ff ff    	jb     801089b4 <deallocuvm+0x2b>
-      char *v = p2v(pa);
-      kfree(v);
-      *pte = 0;
-    }
-  }
-  return newsz;
-80108a40:	8b 45 10             	mov    0x10(%ebp),%eax
-}
-80108a43:	c9                   	leave  
-80108a44:	c3                   	ret    
-
-80108a45 <freevm>:
-
-// Free a page table and all the physical memory pages
-// in the user part.
-void
-freevm(pde_t *pgdir)
-{
-80108a45:	55                   	push   %ebp
-80108a46:	89 e5                	mov    %esp,%ebp
-80108a48:	83 ec 28             	sub    $0x28,%esp
-  uint i;
-
-  if(pgdir == 0)
-80108a4b:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
-80108a4f:	75 0c                	jne    80108a5d <freevm+0x18>
-    panic("freevm: no pgdir");
-80108a51:	c7 04 24 ef 97 10 80 	movl   $0x801097ef,(%esp)
-80108a58:	e8 e0 7a ff ff       	call   8010053d <panic>
-  deallocuvm(pgdir, KERNBASE, 0);
-80108a5d:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
-80108a64:	00 
-80108a65:	c7 44 24 04 00 00 00 	movl   $0x80000000,0x4(%esp)
-80108a6c:	80 
-80108a6d:	8b 45 08             	mov    0x8(%ebp),%eax
-80108a70:	89 04 24             	mov    %eax,(%esp)
-80108a73:	e8 11 ff ff ff       	call   80108989 <deallocuvm>
-  for(i = 0; i < NPDENTRIES; i++){
-80108a78:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
-80108a7f:	eb 3c                	jmp    80108abd <freevm+0x78>
-    if(pgdir[i] & PTE_P){
-80108a81:	8b 45 f4             	mov    -0xc(%ebp),%eax
-80108a84:	c1 e0 02             	shl    $0x2,%eax
-80108a87:	03 45 08             	add    0x8(%ebp),%eax
-80108a8a:	8b 00                	mov    (%eax),%eax
-80108a8c:	83 e0 01             	and    $0x1,%eax
-80108a8f:	84 c0                	test   %al,%al
-80108a91:	74 26                	je     80108ab9 <freevm+0x74>
-      char * v = p2v(PTE_ADDR(pgdir[i]));
-80108a93:	8b 45 f4             	mov    -0xc(%ebp),%eax
-80108a96:	c1 e0 02             	shl    $0x2,%eax
-80108a99:	03 45 08             	add    0x8(%ebp),%eax
-80108a9c:	8b 00                	mov    (%eax),%eax
-80108a9e:	25 00 f0 ff ff       	and    $0xfffff000,%eax
-80108aa3:	89 04 24             	mov    %eax,(%esp)
-80108aa6:	e8 85 f4 ff ff       	call   80107f30 <p2v>
-80108aab:	89 45 f0             	mov    %eax,-0x10(%ebp)
-      kfree(v);
-80108aae:	8b 45 f0             	mov    -0x10(%ebp),%eax
-80108ab1:	89 04 24             	mov    %eax,(%esp)
-80108ab4:	e8 15 a0 ff ff       	call   80102ace <kfree>
-  uint i;
-
-  if(pgdir == 0)
-    panic("freevm: no pgdir");
-  deallocuvm(pgdir, KERNBASE, 0);
-  for(i = 0; i < NPDENTRIES; i++){
-80108ab9:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
-80108abd:	81 7d f4 ff 03 00 00 	cmpl   $0x3ff,-0xc(%ebp)
-80108ac4:	76 bb                	jbe    80108a81 <freevm+0x3c>
-    if(pgdir[i] & PTE_P){
-      char * v = p2v(PTE_ADDR(pgdir[i]));
-      kfree(v);
-    }
-  }
-  kfree((char*)pgdir);
-80108ac6:	8b 45 08             	mov    0x8(%ebp),%eax
-80108ac9:	89 04 24             	mov    %eax,(%esp)
-80108acc:	e8 fd 9f ff ff       	call   80102ace <kfree>
-}
-80108ad1:	c9                   	leave  
-80108ad2:	c3                   	ret    
-
-80108ad3 <clearpteu>:
-
-// Clear PTE_U on a page. Used to create an inaccessible
-// page beneath the user stack.
-void
-clearpteu(pde_t *pgdir, char *uva)
-{
-80108ad3:	55                   	push   %ebp
-80108ad4:	89 e5                	mov    %esp,%ebp
-80108ad6:	83 ec 28             	sub    $0x28,%esp
-  pte_t *pte;
-
-  pte = walkpgdir(pgdir, uva, 0);
-80108ad9:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
-80108ae0:	00 
-80108ae1:	8b 45 0c             	mov    0xc(%ebp),%eax
-80108ae4:	89 44 24 04          	mov    %eax,0x4(%esp)
-80108ae8:	8b 45 08             	mov    0x8(%ebp),%eax
-80108aeb:	89 04 24             	mov    %eax,(%esp)
-80108aee:	e8 c0 f8 ff ff       	call   801083b3 <walkpgdir>
-80108af3:	89 45 f4             	mov    %eax,-0xc(%ebp)
-  if(pte == 0)
-80108af6:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
-80108afa:	75 0c                	jne    80108b08 <clearpteu+0x35>
-    panic("clearpteu");
-80108afc:	c7 04 24 00 98 10 80 	movl   $0x80109800,(%esp)
-80108b03:	e8 35 7a ff ff       	call   8010053d <panic>
-  *pte &= ~PTE_U;
-80108b08:	8b 45 f4             	mov    -0xc(%ebp),%eax
-80108b0b:	8b 00                	mov    (%eax),%eax
-80108b0d:	89 c2                	mov    %eax,%edx
-80108b0f:	83 e2 fb             	and    $0xfffffffb,%edx
-80108b12:	8b 45 f4             	mov    -0xc(%ebp),%eax
-80108b15:	89 10                	mov    %edx,(%eax)
-}
-80108b17:	c9                   	leave  
-80108b18:	c3                   	ret    
-
-80108b19 <copyuvm>:
-
-// Given a parent process's page table, create a copy
-// of it for a child.
-pde_t*
-copyuvm(pde_t *pgdir, uint sz)
-{
-80108b19:	55                   	push   %ebp
-80108b1a:	89 e5                	mov    %esp,%ebp
-80108b1c:	53                   	push   %ebx
-80108b1d:	83 ec 44             	sub    $0x44,%esp
-  pde_t *d;
-  pte_t *pte;
-  uint pa, i, flags;
-  char *mem;
-
-  if((d = setupkvm()) == 0)
-80108b20:	e8 b8 f9 ff ff       	call   801084dd <setupkvm>
-80108b25:	89 45 f0             	mov    %eax,-0x10(%ebp)
-80108b28:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
-80108b2c:	75 0a                	jne    80108b38 <copyuvm+0x1f>
-    return 0;
-80108b2e:	b8 00 00 00 00       	mov    $0x0,%eax
-80108b33:	e9 fd 00 00 00       	jmp    80108c35 <copyuvm+0x11c>
-  for(i = 0; i < sz; i += PGSIZE){
-80108b38:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
-80108b3f:	e9 cc 00 00 00       	jmp    80108c10 <copyuvm+0xf7>
-    if((pte = walkpgdir(pgdir, (void *) i, 0)) == 0)
-80108b44:	8b 45 f4             	mov    -0xc(%ebp),%eax
-80108b47:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
-80108b4e:	00 
-80108b4f:	89 44 24 04          	mov    %eax,0x4(%esp)
-80108b53:	8b 45 08             	mov    0x8(%ebp),%eax
-80108b56:	89 04 24             	mov    %eax,(%esp)
-80108b59:	e8 55 f8 ff ff       	call   801083b3 <walkpgdir>
-80108b5e:	89 45 ec             	mov    %eax,-0x14(%ebp)
-80108b61:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
-80108b65:	75 0c                	jne    80108b73 <copyuvm+0x5a>
-      panic("copyuvm: pte should exist");
-80108b67:	c7 04 24 0a 98 10 80 	movl   $0x8010980a,(%esp)
-80108b6e:	e8 ca 79 ff ff       	call   8010053d <panic>
-    if(!(*pte & PTE_P))
-80108b73:	8b 45 ec             	mov    -0x14(%ebp),%eax
-80108b76:	8b 00                	mov    (%eax),%eax
-80108b78:	83 e0 01             	and    $0x1,%eax
-80108b7b:	85 c0                	test   %eax,%eax
-80108b7d:	75 0c                	jne    80108b8b <copyuvm+0x72>
-      panic("copyuvm: page not present");
-80108b7f:	c7 04 24 24 98 10 80 	movl   $0x80109824,(%esp)
-80108b86:	e8 b2 79 ff ff       	call   8010053d <panic>
-    pa = PTE_ADDR(*pte);
-80108b8b:	8b 45 ec             	mov    -0x14(%ebp),%eax
-80108b8e:	8b 00                	mov    (%eax),%eax
-80108b90:	25 00 f0 ff ff       	and    $0xfffff000,%eax
-80108b95:	89 45 e8             	mov    %eax,-0x18(%ebp)
-    flags = PTE_FLAGS(*pte);
-80108b98:	8b 45 ec             	mov    -0x14(%ebp),%eax
-80108b9b:	8b 00                	mov    (%eax),%eax
-80108b9d:	25 ff 0f 00 00       	and    $0xfff,%eax
-80108ba2:	89 45 e4             	mov    %eax,-0x1c(%ebp)
-    if((mem = kalloc()) == 0)
-80108ba5:	e8 bd 9f ff ff       	call   80102b67 <kalloc>
-80108baa:	89 45 e0             	mov    %eax,-0x20(%ebp)
-80108bad:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
-80108bb1:	74 6e                	je     80108c21 <copyuvm+0x108>
-      goto bad;
-    memmove(mem, (char*)p2v(pa), PGSIZE);
-80108bb3:	8b 45 e8             	mov    -0x18(%ebp),%eax
-80108bb6:	89 04 24             	mov    %eax,(%esp)
-80108bb9:	e8 72 f3 ff ff       	call   80107f30 <p2v>
-80108bbe:	c7 44 24 08 00 10 00 	movl   $0x1000,0x8(%esp)
-80108bc5:	00 
-80108bc6:	89 44 24 04          	mov    %eax,0x4(%esp)
-80108bca:	8b 45 e0             	mov    -0x20(%ebp),%eax
-80108bcd:	89 04 24             	mov    %eax,(%esp)
-80108bd0:	e8 74 cb ff ff       	call   80105749 <memmove>
-    if(mappages(d, (void*)i, PGSIZE, v2p(mem), flags) < 0)
-80108bd5:	8b 5d e4             	mov    -0x1c(%ebp),%ebx
-80108bd8:	8b 45 e0             	mov    -0x20(%ebp),%eax
-80108bdb:	89 04 24             	mov    %eax,(%esp)
-80108bde:	e8 40 f3 ff ff       	call   80107f23 <v2p>
-80108be3:	8b 55 f4             	mov    -0xc(%ebp),%edx
-80108be6:	89 5c 24 10          	mov    %ebx,0x10(%esp)
-80108bea:	89 44 24 0c          	mov    %eax,0xc(%esp)
-80108bee:	c7 44 24 08 00 10 00 	movl   $0x1000,0x8(%esp)
-80108bf5:	00 
-80108bf6:	89 54 24 04          	mov    %edx,0x4(%esp)
-80108bfa:	8b 45 f0             	mov    -0x10(%ebp),%eax
-80108bfd:	89 04 24             	mov    %eax,(%esp)
-80108c00:	e8 44 f8 ff ff       	call   80108449 <mappages>
-80108c05:	85 c0                	test   %eax,%eax
-80108c07:	78 1b                	js     80108c24 <copyuvm+0x10b>
-  uint pa, i, flags;
-  char *mem;
-
-  if((d = setupkvm()) == 0)
-    return 0;
-  for(i = 0; i < sz; i += PGSIZE){
-80108c09:	81 45 f4 00 10 00 00 	addl   $0x1000,-0xc(%ebp)
-80108c10:	8b 45 f4             	mov    -0xc(%ebp),%eax
-80108c13:	3b 45 0c             	cmp    0xc(%ebp),%eax
-80108c16:	0f 82 28 ff ff ff    	jb     80108b44 <copyuvm+0x2b>
-      goto bad;
-    memmove(mem, (char*)p2v(pa), PGSIZE);
-    if(mappages(d, (void*)i, PGSIZE, v2p(mem), flags) < 0)
-      goto bad;
-  }
-  return d;
-80108c1c:	8b 45 f0             	mov    -0x10(%ebp),%eax
-80108c1f:	eb 14                	jmp    80108c35 <copyuvm+0x11c>
-    if(!(*pte & PTE_P))
-      panic("copyuvm: page not present");
-    pa = PTE_ADDR(*pte);
-    flags = PTE_FLAGS(*pte);
-    if((mem = kalloc()) == 0)
-      goto bad;
-80108c21:	90                   	nop
-80108c22:	eb 01                	jmp    80108c25 <copyuvm+0x10c>
-    memmove(mem, (char*)p2v(pa), PGSIZE);
-    if(mappages(d, (void*)i, PGSIZE, v2p(mem), flags) < 0)
-      goto bad;
-80108c24:	90                   	nop
-  }
-  return d;
-
-bad:
-  freevm(d);
-80108c25:	8b 45 f0             	mov    -0x10(%ebp),%eax
-80108c28:	89 04 24             	mov    %eax,(%esp)
-80108c2b:	e8 15 fe ff ff       	call   80108a45 <freevm>
-  return 0;
-80108c30:	b8 00 00 00 00       	mov    $0x0,%eax
-}
-80108c35:	83 c4 44             	add    $0x44,%esp
-80108c38:	5b                   	pop    %ebx
-80108c39:	5d                   	pop    %ebp
-80108c3a:	c3                   	ret    
-
-80108c3b <uva2ka>:
-
-//PAGEBREAK!
-// Map user virtual address to kernel address.
-char*
-uva2ka(pde_t *pgdir, char *uva)
-{
-80108c3b:	55                   	push   %ebp
-80108c3c:	89 e5                	mov    %esp,%ebp
-80108c3e:	83 ec 28             	sub    $0x28,%esp
-  pte_t *pte;
-
-  pte = walkpgdir(pgdir, uva, 0);
-80108c41:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
-80108c48:	00 
-80108c49:	8b 45 0c             	mov    0xc(%ebp),%eax
-80108c4c:	89 44 24 04          	mov    %eax,0x4(%esp)
-80108c50:	8b 45 08             	mov    0x8(%ebp),%eax
-80108c53:	89 04 24             	mov    %eax,(%esp)
-80108c56:	e8 58 f7 ff ff       	call   801083b3 <walkpgdir>
-80108c5b:	89 45 f4             	mov    %eax,-0xc(%ebp)
-  if((*pte & PTE_P) == 0)
-80108c5e:	8b 45 f4             	mov    -0xc(%ebp),%eax
-80108c61:	8b 00                	mov    (%eax),%eax
-80108c63:	83 e0 01             	and    $0x1,%eax
-80108c66:	85 c0                	test   %eax,%eax
-80108c68:	75 07                	jne    80108c71 <uva2ka+0x36>
-    return 0;
-80108c6a:	b8 00 00 00 00       	mov    $0x0,%eax
-80108c6f:	eb 25                	jmp    80108c96 <uva2ka+0x5b>
-  if((*pte & PTE_U) == 0)
-80108c71:	8b 45 f4             	mov    -0xc(%ebp),%eax
-80108c74:	8b 00                	mov    (%eax),%eax
-80108c76:	83 e0 04             	and    $0x4,%eax
-80108c79:	85 c0                	test   %eax,%eax
-80108c7b:	75 07                	jne    80108c84 <uva2ka+0x49>
-    return 0;
-80108c7d:	b8 00 00 00 00       	mov    $0x0,%eax
-80108c82:	eb 12                	jmp    80108c96 <uva2ka+0x5b>
-  return (char*)p2v(PTE_ADDR(*pte));
-80108c84:	8b 45 f4             	mov    -0xc(%ebp),%eax
-80108c87:	8b 00                	mov    (%eax),%eax
-80108c89:	25 00 f0 ff ff       	and    $0xfffff000,%eax
-80108c8e:	89 04 24             	mov    %eax,(%esp)
-80108c91:	e8 9a f2 ff ff       	call   80107f30 <p2v>
-}
-80108c96:	c9                   	leave  
-80108c97:	c3                   	ret    
-
-80108c98 <copyout>:
-// Copy len bytes from p to user address va in page table pgdir.
-// Most useful when pgdir is not the current page table.
-// uva2ka ensures this only works for PTE_U pages.
-int
-copyout(pde_t *pgdir, uint va, void *p, uint len)
-{
-80108c98:	55                   	push   %ebp
-80108c99:	89 e5                	mov    %esp,%ebp
-80108c9b:	83 ec 28             	sub    $0x28,%esp
-  char *buf, *pa0;
-  uint n, va0;
-
-  buf = (char*)p;
-80108c9e:	8b 45 10             	mov    0x10(%ebp),%eax
-80108ca1:	89 45 f4             	mov    %eax,-0xc(%ebp)
-  while(len > 0){
-80108ca4:	e9 8b 00 00 00       	jmp    80108d34 <copyout+0x9c>
-    va0 = (uint)PGROUNDDOWN(va);
-80108ca9:	8b 45 0c             	mov    0xc(%ebp),%eax
-80108cac:	25 00 f0 ff ff       	and    $0xfffff000,%eax
-80108cb1:	89 45 ec             	mov    %eax,-0x14(%ebp)
-    pa0 = uva2ka(pgdir, (char*)va0);
-80108cb4:	8b 45 ec             	mov    -0x14(%ebp),%eax
-80108cb7:	89 44 24 04          	mov    %eax,0x4(%esp)
-80108cbb:	8b 45 08             	mov    0x8(%ebp),%eax
-80108cbe:	89 04 24             	mov    %eax,(%esp)
-80108cc1:	e8 75 ff ff ff       	call   80108c3b <uva2ka>
-80108cc6:	89 45 e8             	mov    %eax,-0x18(%ebp)
-    if(pa0 == 0)
-80108cc9:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
-80108ccd:	75 07                	jne    80108cd6 <copyout+0x3e>
-      return -1;
-80108ccf:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
-80108cd4:	eb 6d                	jmp    80108d43 <copyout+0xab>
-    n = PGSIZE - (va - va0);
-80108cd6:	8b 45 0c             	mov    0xc(%ebp),%eax
-80108cd9:	8b 55 ec             	mov    -0x14(%ebp),%edx
-80108cdc:	89 d1                	mov    %edx,%ecx
-80108cde:	29 c1                	sub    %eax,%ecx
-80108ce0:	89 c8                	mov    %ecx,%eax
-80108ce2:	05 00 10 00 00       	add    $0x1000,%eax
-80108ce7:	89 45 f0             	mov    %eax,-0x10(%ebp)
-    if(n > len)
-80108cea:	8b 45 f0             	mov    -0x10(%ebp),%eax
-80108ced:	3b 45 14             	cmp    0x14(%ebp),%eax
-80108cf0:	76 06                	jbe    80108cf8 <copyout+0x60>
-      n = len;
-80108cf2:	8b 45 14             	mov    0x14(%ebp),%eax
-80108cf5:	89 45 f0             	mov    %eax,-0x10(%ebp)
-    memmove(pa0 + (va - va0), buf, n);
-80108cf8:	8b 45 ec             	mov    -0x14(%ebp),%eax
-80108cfb:	8b 55 0c             	mov    0xc(%ebp),%edx
-80108cfe:	89 d1                	mov    %edx,%ecx
-80108d00:	29 c1                	sub    %eax,%ecx
-80108d02:	89 c8                	mov    %ecx,%eax
-80108d04:	03 45 e8             	add    -0x18(%ebp),%eax
-80108d07:	8b 55 f0             	mov    -0x10(%ebp),%edx
-80108d0a:	89 54 24 08          	mov    %edx,0x8(%esp)
-80108d0e:	8b 55 f4             	mov    -0xc(%ebp),%edx
-80108d11:	89 54 24 04          	mov    %edx,0x4(%esp)
-80108d15:	89 04 24             	mov    %eax,(%esp)
-80108d18:	e8 2c ca ff ff       	call   80105749 <memmove>
-    len -= n;
-80108d1d:	8b 45 f0             	mov    -0x10(%ebp),%eax
-80108d20:	29 45 14             	sub    %eax,0x14(%ebp)
-    buf += n;
-80108d23:	8b 45 f0             	mov    -0x10(%ebp),%eax
-80108d26:	01 45 f4             	add    %eax,-0xc(%ebp)
-    va = va0 + PGSIZE;
-80108d29:	8b 45 ec             	mov    -0x14(%ebp),%eax
-80108d2c:	05 00 10 00 00       	add    $0x1000,%eax
-80108d31:	89 45 0c             	mov    %eax,0xc(%ebp)
-{
-  char *buf, *pa0;
-  uint n, va0;
-
-  buf = (char*)p;
-  while(len > 0){
-80108d34:	83 7d 14 00          	cmpl   $0x0,0x14(%ebp)
-80108d38:	0f 85 6b ff ff ff    	jne    80108ca9 <copyout+0x11>
-    memmove(pa0 + (va - va0), buf, n);
-    len -= n;
-    buf += n;
-    va = va0 + PGSIZE;
-  }
-  return 0;
-80108d3e:	b8 00 00 00 00       	mov    $0x0,%eax
-}
-80108d43:	c9                   	leave  
-80108d44:	c3                   	ret    
-80108d45:	00 00                	add    %al,(%eax)
-	...
-
-80108d48 <implicit_exit>:
-.code32
-.globl implicit_exit
-.globl implicit_exit_end
-
-implicit_exit:
-	push %eax
-80108d48:	50                   	push   %eax
-	push $0xffffffff #fake address
-80108d49:	6a ff                	push   $0xffffffff
-
-	movl $2, %eax;
-80108d4b:	b8 02 00 00 00       	mov    $0x2,%eax
-	int $64;
-80108d50:	cd 40                	int    $0x40
-
-80108d52 <implicit_exit_end>:
-	...
-
-80108d54 <create_link>:
-#include "linkedList.h"
-#include "types.h"
-#include "defs.h"
-
-struct node* create_link(linkedList* list){
-80108d54:	55                   	push   %ebp
-80108d55:	89 e5                	mov    %esp,%ebp
-80108d57:	83 ec 28             	sub    $0x28,%esp
-	int i;
-	for (i = 0; i < LINKED_LIST_SIZE; i++) {
-80108d5a:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
-80108d61:	eb 4e                	jmp    80108db1 <create_link+0x5d>
-		if(!list->nodes[i].used){
-80108d63:	8b 4d 08             	mov    0x8(%ebp),%ecx
-80108d66:	8b 55 f4             	mov    -0xc(%ebp),%edx
-80108d69:	89 d0                	mov    %edx,%eax
-80108d6b:	01 c0                	add    %eax,%eax
-80108d6d:	01 d0                	add    %edx,%eax
-80108d6f:	c1 e0 03             	shl    $0x3,%eax
-80108d72:	01 c8                	add    %ecx,%eax
-80108d74:	83 c0 20             	add    $0x20,%eax
-80108d77:	8b 00                	mov    (%eax),%eax
-80108d79:	85 c0                	test   %eax,%eax
-80108d7b:	75 30                	jne    80108dad <create_link+0x59>
-			list->nodes[i].used = 1;
-80108d7d:	8b 4d 08             	mov    0x8(%ebp),%ecx
-80108d80:	8b 55 f4             	mov    -0xc(%ebp),%edx
-80108d83:	89 d0                	mov    %edx,%eax
-80108d85:	01 c0                	add    %eax,%eax
-80108d87:	01 d0                	add    %edx,%eax
-80108d89:	c1 e0 03             	shl    $0x3,%eax
-80108d8c:	01 c8                	add    %ecx,%eax
-80108d8e:	83 c0 20             	add    $0x20,%eax
-80108d91:	c7 00 01 00 00 00    	movl   $0x1,(%eax)
-			return &list->nodes[i];
-80108d97:	8b 45 08             	mov    0x8(%ebp),%eax
-80108d9a:	8d 48 10             	lea    0x10(%eax),%ecx
-80108d9d:	8b 55 f4             	mov    -0xc(%ebp),%edx
-80108da0:	89 d0                	mov    %edx,%eax
-80108da2:	01 c0                	add    %eax,%eax
-80108da4:	01 d0                	add    %edx,%eax
-80108da6:	c1 e0 03             	shl    $0x3,%eax
-80108da9:	01 c8                	add    %ecx,%eax
-80108dab:	eb 1b                	jmp    80108dc8 <create_link+0x74>
-#include "types.h"
-#include "defs.h"
-
-struct node* create_link(linkedList* list){
-	int i;
-	for (i = 0; i < LINKED_LIST_SIZE; i++) {
-80108dad:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
-80108db1:	83 7d f4 3f          	cmpl   $0x3f,-0xc(%ebp)
-80108db5:	7e ac                	jle    80108d63 <create_link+0xf>
-			return &list->nodes[i];
-		}
-	}
-
-	//error not found
-	cprintf("Error: linkedlist: cant create new link, list at full capacity!\n");
-80108db7:	c7 04 24 40 98 10 80 	movl   $0x80109840,(%esp)
-80108dbe:	e8 de 75 ff ff       	call   801003a1 <cprintf>
-	return 0;
-80108dc3:	b8 00 00 00 00       	mov    $0x0,%eax
-}
-80108dc8:	c9                   	leave  
-80108dc9:	c3                   	ret    
-
-80108dca <clean_up>:
-
-void clean_up(struct node* link){
-80108dca:	55                   	push   %ebp
-80108dcb:	89 e5                	mov    %esp,%ebp
-	link->id = 0;
-80108dcd:	8b 45 08             	mov    0x8(%ebp),%eax
-80108dd0:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
-	link->data = 0;
-80108dd6:	8b 45 08             	mov    0x8(%ebp),%eax
-80108dd9:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
-	link->next = 0;
-80108de0:	8b 45 08             	mov    0x8(%ebp),%eax
-80108de3:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
-	link->prev = 0;
-80108dea:	8b 45 08             	mov    0x8(%ebp),%eax
-80108ded:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%eax)
-	link->used = 0;
-80108df4:	8b 45 08             	mov    0x8(%ebp),%eax
-80108df7:	c7 40 10 00 00 00 00 	movl   $0x0,0x10(%eax)
-}
-80108dfe:	5d                   	pop    %ebp
-80108dff:	c3                   	ret    
-
-80108e00 <add_last>:
-
-void add_last(linkedList* list, node* link){
-80108e00:	55                   	push   %ebp
-80108e01:	89 e5                	mov    %esp,%ebp
-	if(list->head == 0){
-80108e03:	8b 45 08             	mov    0x8(%ebp),%eax
-80108e06:	8b 00                	mov    (%eax),%eax
-80108e08:	85 c0                	test   %eax,%eax
-80108e0a:	75 22                	jne    80108e2e <add_last+0x2e>
-		list->head = link;
-80108e0c:	8b 45 08             	mov    0x8(%ebp),%eax
-80108e0f:	8b 55 0c             	mov    0xc(%ebp),%edx
-80108e12:	89 10                	mov    %edx,(%eax)
-		list->tail = link;
-80108e14:	8b 45 08             	mov    0x8(%ebp),%eax
-80108e17:	8b 55 0c             	mov    0xc(%ebp),%edx
-80108e1a:	89 50 04             	mov    %edx,0x4(%eax)
-		list->size++;
-80108e1d:	8b 45 08             	mov    0x8(%ebp),%eax
-80108e20:	8b 40 08             	mov    0x8(%eax),%eax
-80108e23:	8d 50 01             	lea    0x1(%eax),%edx
-80108e26:	8b 45 08             	mov    0x8(%ebp),%eax
-80108e29:	89 50 08             	mov    %edx,0x8(%eax)
-80108e2c:	eb 30                	jmp    80108e5e <add_last+0x5e>
-	}
-	else{
-		link->prev = list->tail;
-80108e2e:	8b 45 08             	mov    0x8(%ebp),%eax
-80108e31:	8b 50 04             	mov    0x4(%eax),%edx
-80108e34:	8b 45 0c             	mov    0xc(%ebp),%eax
-80108e37:	89 50 0c             	mov    %edx,0xc(%eax)
-		list->tail->next = link;
-80108e3a:	8b 45 08             	mov    0x8(%ebp),%eax
-80108e3d:	8b 40 04             	mov    0x4(%eax),%eax
-80108e40:	8b 55 0c             	mov    0xc(%ebp),%edx
-80108e43:	89 50 08             	mov    %edx,0x8(%eax)
-		list->tail = link;
-80108e46:	8b 45 08             	mov    0x8(%ebp),%eax
-80108e49:	8b 55 0c             	mov    0xc(%ebp),%edx
-80108e4c:	89 50 04             	mov    %edx,0x4(%eax)
-		list->size++;
-80108e4f:	8b 45 08             	mov    0x8(%ebp),%eax
-80108e52:	8b 40 08             	mov    0x8(%eax),%eax
-80108e55:	8d 50 01             	lea    0x1(%eax),%edx
-80108e58:	8b 45 08             	mov    0x8(%ebp),%eax
-80108e5b:	89 50 08             	mov    %edx,0x8(%eax)
-	}
-}
-80108e5e:	5d                   	pop    %ebp
-80108e5f:	c3                   	ret    
-
-80108e60 <add>:
-
-void add(struct linkedList* list, int id, struct proc* p){
-80108e60:	55                   	push   %ebp
-80108e61:	89 e5                	mov    %esp,%ebp
-80108e63:	83 ec 28             	sub    $0x28,%esp
-//	if( search(list,id) != 0 ) return; //add unique
-
-	//cprintf("(+%d)", id);
-	node* node;
-	node = create_link(list);
-80108e66:	8b 45 08             	mov    0x8(%ebp),%eax
-80108e69:	89 04 24             	mov    %eax,(%esp)
-80108e6c:	e8 e3 fe ff ff       	call   80108d54 <create_link>
-80108e71:	89 45 f4             	mov    %eax,-0xc(%ebp)
-	node->id = id;
-80108e74:	8b 45 f4             	mov    -0xc(%ebp),%eax
-80108e77:	8b 55 0c             	mov    0xc(%ebp),%edx
-80108e7a:	89 10                	mov    %edx,(%eax)
-	node->data = p;
-80108e7c:	8b 45 f4             	mov    -0xc(%ebp),%eax
-80108e7f:	8b 55 10             	mov    0x10(%ebp),%edx
-80108e82:	89 50 04             	mov    %edx,0x4(%eax)
-	list->add_last(list,node);
-80108e85:	8b 45 08             	mov    0x8(%ebp),%eax
-80108e88:	8b 90 10 06 00 00    	mov    0x610(%eax),%edx
-80108e8e:	8b 45 f4             	mov    -0xc(%ebp),%eax
-80108e91:	89 44 24 04          	mov    %eax,0x4(%esp)
-80108e95:	8b 45 08             	mov    0x8(%ebp),%eax
-80108e98:	89 04 24             	mov    %eax,(%esp)
-80108e9b:	ff d2                	call   *%edx
-	//print(list);
-}
-80108e9d:	c9                   	leave  
-80108e9e:	c3                   	ret    
-
-80108e9f <remove_first>:
-
-
-struct proc* remove_first(linkedList* list){
-80108e9f:	55                   	push   %ebp
-80108ea0:	89 e5                	mov    %esp,%ebp
-80108ea2:	83 ec 28             	sub    $0x28,%esp
-	struct proc* p;
-	node* tmp;
-	if( list->head == 0 ){
-80108ea5:	8b 45 08             	mov    0x8(%ebp),%eax
-80108ea8:	8b 00                	mov    (%eax),%eax
-80108eaa:	85 c0                	test   %eax,%eax
-80108eac:	75 13                	jne    80108ec1 <remove_first+0x22>
-		cprintf("ERROR: list is empty. cant remove 1st link");
-80108eae:	c7 04 24 84 98 10 80 	movl   $0x80109884,(%esp)
-80108eb5:	e8 e7 74 ff ff       	call   801003a1 <cprintf>
-		return 0;
-80108eba:	b8 00 00 00 00       	mov    $0x0,%eax
-80108ebf:	eb 53                	jmp    80108f14 <remove_first+0x75>
-	}
-	tmp = list->head;
-80108ec1:	8b 45 08             	mov    0x8(%ebp),%eax
-80108ec4:	8b 00                	mov    (%eax),%eax
-80108ec6:	89 45 f4             	mov    %eax,-0xc(%ebp)
-	//cprintf("(-%d)", tmp->id);
-	p = tmp->data;
-80108ec9:	8b 45 f4             	mov    -0xc(%ebp),%eax
-80108ecc:	8b 40 04             	mov    0x4(%eax),%eax
-80108ecf:	89 45 f0             	mov    %eax,-0x10(%ebp)
-	list->head = list->head->next;
-80108ed2:	8b 45 08             	mov    0x8(%ebp),%eax
-80108ed5:	8b 00                	mov    (%eax),%eax
-80108ed7:	8b 50 08             	mov    0x8(%eax),%edx
-80108eda:	8b 45 08             	mov    0x8(%ebp),%eax
-80108edd:	89 10                	mov    %edx,(%eax)
-	tmp->clean_up(tmp);
-80108edf:	8b 45 f4             	mov    -0xc(%ebp),%eax
-80108ee2:	8b 50 14             	mov    0x14(%eax),%edx
-80108ee5:	8b 45 f4             	mov    -0xc(%ebp),%eax
-80108ee8:	89 04 24             	mov    %eax,(%esp)
-80108eeb:	ff d2                	call   *%edx
-	if(list->head != 0){
-80108eed:	8b 45 08             	mov    0x8(%ebp),%eax
-80108ef0:	8b 00                	mov    (%eax),%eax
-80108ef2:	85 c0                	test   %eax,%eax
-80108ef4:	74 0c                	je     80108f02 <remove_first+0x63>
-		list->head->prev = 0;
-80108ef6:	8b 45 08             	mov    0x8(%ebp),%eax
-80108ef9:	8b 00                	mov    (%eax),%eax
-80108efb:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%eax)
-	}
-	list->size--;
-80108f02:	8b 45 08             	mov    0x8(%ebp),%eax
-80108f05:	8b 40 08             	mov    0x8(%eax),%eax
-80108f08:	8d 50 ff             	lea    -0x1(%eax),%edx
-80108f0b:	8b 45 08             	mov    0x8(%ebp),%eax
-80108f0e:	89 50 08             	mov    %edx,0x8(%eax)
-	return p;
-80108f11:	8b 45 f0             	mov    -0x10(%ebp),%eax
-}
-80108f14:	c9                   	leave  
-80108f15:	c3                   	ret    
-
-80108f16 <init_linkedList>:
-void init_linkedList(linkedList* list,int fixed_size){
-80108f16:	55                   	push   %ebp
-80108f17:	89 e5                	mov    %esp,%ebp
-80108f19:	53                   	push   %ebx
-80108f1a:	83 ec 24             	sub    $0x24,%esp
-	int i;
-	list->head = 0;
-80108f1d:	8b 45 08             	mov    0x8(%ebp),%eax
-80108f20:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
-	list->tail = 0;
-80108f26:	8b 45 08             	mov    0x8(%ebp),%eax
-80108f29:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
-	list->size = 0;
-80108f30:	8b 45 08             	mov    0x8(%ebp),%eax
-80108f33:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
-	list->max_size = fixed_size;
-80108f3a:	8b 45 08             	mov    0x8(%ebp),%eax
-80108f3d:	8b 55 0c             	mov    0xc(%ebp),%edx
-80108f40:	89 50 0c             	mov    %edx,0xc(%eax)
-	list->add_last = add_last;
-80108f43:	8b 45 08             	mov    0x8(%ebp),%eax
-80108f46:	c7 80 10 06 00 00 00 	movl   $0x80108e00,0x610(%eax)
-80108f4d:	8e 10 80 
-	list->add = add;
-80108f50:	8b 45 08             	mov    0x8(%ebp),%eax
-80108f53:	c7 80 14 06 00 00 60 	movl   $0x80108e60,0x614(%eax)
-80108f5a:	8e 10 80 
-	list->remove_first = remove_first;
-80108f5d:	8b 45 08             	mov    0x8(%ebp),%eax
-80108f60:	c7 80 18 06 00 00 9f 	movl   $0x80108e9f,0x618(%eax)
-80108f67:	8e 10 80 
-	list->print = print;
-80108f6a:	8b 45 08             	mov    0x8(%ebp),%eax
-80108f6d:	c7 80 1c 06 00 00 27 	movl   $0x80109027,0x61c(%eax)
-80108f74:	90 10 80 
-	list->get_link = get_link;
-80108f77:	8b 45 08             	mov    0x8(%ebp),%eax
-80108f7a:	c7 80 20 06 00 00 8b 	movl   $0x8010908b,0x620(%eax)
-80108f81:	90 10 80 
-	list->remove_link = remove_link;
-80108f84:	8b 45 08             	mov    0x8(%ebp),%eax
-80108f87:	c7 80 24 06 00 00 fb 	movl   $0x801090fb,0x624(%eax)
-80108f8e:	90 10 80 
-	list->search = search;
-80108f91:	8b 45 08             	mov    0x8(%ebp),%eax
-80108f94:	c7 80 28 06 00 00 c6 	movl   $0x801090c6,0x628(%eax)
-80108f9b:	90 10 80 
-
-	for(i=0; i < fixed_size; i++){
-80108f9e:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
-80108fa5:	eb 4d                	jmp    80108ff4 <init_linkedList+0xde>
-		list->nodes[i].clean_up = clean_up;
-80108fa7:	8b 4d 08             	mov    0x8(%ebp),%ecx
-80108faa:	8b 55 f4             	mov    -0xc(%ebp),%edx
-80108fad:	89 d0                	mov    %edx,%eax
-80108faf:	01 c0                	add    %eax,%eax
-80108fb1:	01 d0                	add    %edx,%eax
-80108fb3:	c1 e0 03             	shl    $0x3,%eax
-80108fb6:	01 c8                	add    %ecx,%eax
-80108fb8:	83 c0 24             	add    $0x24,%eax
-80108fbb:	c7 00 ca 8d 10 80    	movl   $0x80108dca,(%eax)
-		list->nodes[i].clean_up(&list->nodes[i]);
-80108fc1:	8b 4d 08             	mov    0x8(%ebp),%ecx
-80108fc4:	8b 55 f4             	mov    -0xc(%ebp),%edx
-80108fc7:	89 d0                	mov    %edx,%eax
-80108fc9:	01 c0                	add    %eax,%eax
-80108fcb:	01 d0                	add    %edx,%eax
-80108fcd:	c1 e0 03             	shl    $0x3,%eax
-80108fd0:	01 c8                	add    %ecx,%eax
-80108fd2:	83 c0 24             	add    $0x24,%eax
-80108fd5:	8b 08                	mov    (%eax),%ecx
-80108fd7:	8b 45 08             	mov    0x8(%ebp),%eax
-80108fda:	8d 58 10             	lea    0x10(%eax),%ebx
-80108fdd:	8b 55 f4             	mov    -0xc(%ebp),%edx
-80108fe0:	89 d0                	mov    %edx,%eax
-80108fe2:	01 c0                	add    %eax,%eax
-80108fe4:	01 d0                	add    %edx,%eax
-80108fe6:	c1 e0 03             	shl    $0x3,%eax
-80108fe9:	01 d8                	add    %ebx,%eax
-80108feb:	89 04 24             	mov    %eax,(%esp)
-80108fee:	ff d1                	call   *%ecx
-	list->print = print;
-	list->get_link = get_link;
-	list->remove_link = remove_link;
-	list->search = search;
-
-	for(i=0; i < fixed_size; i++){
-80108ff0:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
-80108ff4:	8b 45 f4             	mov    -0xc(%ebp),%eax
-80108ff7:	3b 45 0c             	cmp    0xc(%ebp),%eax
-80108ffa:	7c ab                	jl     80108fa7 <init_linkedList+0x91>
-		list->nodes[i].clean_up = clean_up;
-		list->nodes[i].clean_up(&list->nodes[i]);
-	}
-
-}
-80108ffc:	83 c4 24             	add    $0x24,%esp
-80108fff:	5b                   	pop    %ebx
-80109000:	5d                   	pop    %ebp
-80109001:	c3                   	ret    
-
-80109002 <clean_list>:
-
-void clean_list(linkedList* list){
-80109002:	55                   	push   %ebp
-80109003:	89 e5                	mov    %esp,%ebp
-80109005:	83 ec 18             	sub    $0x18,%esp
-	while(list->size > 0){
-80109008:	eb 11                	jmp    8010901b <clean_list+0x19>
-		list->remove_first(list);
-8010900a:	8b 45 08             	mov    0x8(%ebp),%eax
-8010900d:	8b 90 18 06 00 00    	mov    0x618(%eax),%edx
-80109013:	8b 45 08             	mov    0x8(%ebp),%eax
-80109016:	89 04 24             	mov    %eax,(%esp)
-80109019:	ff d2                	call   *%edx
-	}
-
-}
-
-void clean_list(linkedList* list){
-	while(list->size > 0){
-8010901b:	8b 45 08             	mov    0x8(%ebp),%eax
-8010901e:	8b 40 08             	mov    0x8(%eax),%eax
-80109021:	85 c0                	test   %eax,%eax
-80109023:	7f e5                	jg     8010900a <clean_list+0x8>
-		list->remove_first(list);
-	}
-}
-80109025:	c9                   	leave  
-80109026:	c3                   	ret    
-
-80109027 <print>:
-
-void print(linkedList* list){
-80109027:	55                   	push   %ebp
-80109028:	89 e5                	mov    %esp,%ebp
-8010902a:	83 ec 28             	sub    $0x28,%esp
-	node* link = list->head;
-8010902d:	8b 45 08             	mov    0x8(%ebp),%eax
-80109030:	8b 00                	mov    (%eax),%eax
-80109032:	89 45 f4             	mov    %eax,-0xc(%ebp)
-
-	cprintf("LinkedList content:\n");
-80109035:	c7 04 24 af 98 10 80 	movl   $0x801098af,(%esp)
-8010903c:	e8 60 73 ff ff       	call   801003a1 <cprintf>
-
-	cprintf("HEAD");
-80109041:	c7 04 24 c4 98 10 80 	movl   $0x801098c4,(%esp)
-80109048:	e8 54 73 ff ff       	call   801003a1 <cprintf>
-	while(link != 0){
-8010904d:	eb 28                	jmp    80109077 <print+0x50>
-		cprintf(" => [%d ,0x%x] ",link->id,link->data);
-8010904f:	8b 45 f4             	mov    -0xc(%ebp),%eax
-80109052:	8b 50 04             	mov    0x4(%eax),%edx
-80109055:	8b 45 f4             	mov    -0xc(%ebp),%eax
-80109058:	8b 00                	mov    (%eax),%eax
-8010905a:	89 54 24 08          	mov    %edx,0x8(%esp)
-8010905e:	89 44 24 04          	mov    %eax,0x4(%esp)
-80109062:	c7 04 24 c9 98 10 80 	movl   $0x801098c9,(%esp)
-80109069:	e8 33 73 ff ff       	call   801003a1 <cprintf>
-		link = link->next;
-8010906e:	8b 45 f4             	mov    -0xc(%ebp),%eax
-80109071:	8b 40 08             	mov    0x8(%eax),%eax
-80109074:	89 45 f4             	mov    %eax,-0xc(%ebp)
-	node* link = list->head;
-
-	cprintf("LinkedList content:\n");
-
-	cprintf("HEAD");
-	while(link != 0){
-80109077:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
-8010907b:	75 d2                	jne    8010904f <print+0x28>
-		cprintf(" => [%d ,0x%x] ",link->id,link->data);
-		link = link->next;
-	}
-	cprintf("<= TAIL \n");
-8010907d:	c7 04 24 d9 98 10 80 	movl   $0x801098d9,(%esp)
-80109084:	e8 18 73 ff ff       	call   801003a1 <cprintf>
-
-}
-80109089:	c9                   	leave  
-8010908a:	c3                   	ret    
-
-8010908b <get_link>:
-
-node* get_link(linkedList* list,int position){
-8010908b:	55                   	push   %ebp
-8010908c:	89 e5                	mov    %esp,%ebp
-8010908e:	83 ec 10             	sub    $0x10,%esp
-	node* link = list->head;
-80109091:	8b 45 08             	mov    0x8(%ebp),%eax
-80109094:	8b 00                	mov    (%eax),%eax
-80109096:	89 45 fc             	mov    %eax,-0x4(%ebp)
-	while(position > 0 && link != 0){
-80109099:	eb 0d                	jmp    801090a8 <get_link+0x1d>
-		link = link->next;
-8010909b:	8b 45 fc             	mov    -0x4(%ebp),%eax
-8010909e:	8b 40 08             	mov    0x8(%eax),%eax
-801090a1:	89 45 fc             	mov    %eax,-0x4(%ebp)
-		position--;
-801090a4:	83 6d 0c 01          	subl   $0x1,0xc(%ebp)
-
-}
-
-node* get_link(linkedList* list,int position){
-	node* link = list->head;
-	while(position > 0 && link != 0){
-801090a8:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
-801090ac:	7e 06                	jle    801090b4 <get_link+0x29>
-801090ae:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
-801090b2:	75 e7                	jne    8010909b <get_link+0x10>
-		link = link->next;
-		position--;
-	}
-	if(position == 0) return link;
-801090b4:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
-801090b8:	75 05                	jne    801090bf <get_link+0x34>
-801090ba:	8b 45 fc             	mov    -0x4(%ebp),%eax
-801090bd:	eb 05                	jmp    801090c4 <get_link+0x39>
-
-	return 0;
-801090bf:	b8 00 00 00 00       	mov    $0x0,%eax
-}
-801090c4:	c9                   	leave  
-801090c5:	c3                   	ret    
-
-801090c6 <search>:
-node* search(linkedList* list, int id){
-801090c6:	55                   	push   %ebp
-801090c7:	89 e5                	mov    %esp,%ebp
-801090c9:	83 ec 10             	sub    $0x10,%esp
-	node* p = list->head;
-801090cc:	8b 45 08             	mov    0x8(%ebp),%eax
-801090cf:	8b 00                	mov    (%eax),%eax
-801090d1:	89 45 fc             	mov    %eax,-0x4(%ebp)
-
-	while(p != 0){
-801090d4:	eb 18                	jmp    801090ee <search+0x28>
-		if(p->id == id){
-801090d6:	8b 45 fc             	mov    -0x4(%ebp),%eax
-801090d9:	8b 00                	mov    (%eax),%eax
-801090db:	3b 45 0c             	cmp    0xc(%ebp),%eax
-801090de:	75 05                	jne    801090e5 <search+0x1f>
-			return p;
-801090e0:	8b 45 fc             	mov    -0x4(%ebp),%eax
-801090e3:	eb 14                	jmp    801090f9 <search+0x33>
-		}
-		p=p->next;
-801090e5:	8b 45 fc             	mov    -0x4(%ebp),%eax
-801090e8:	8b 40 08             	mov    0x8(%eax),%eax
-801090eb:	89 45 fc             	mov    %eax,-0x4(%ebp)
-	return 0;
-}
-node* search(linkedList* list, int id){
-	node* p = list->head;
-
-	while(p != 0){
-801090ee:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
-801090f2:	75 e2                	jne    801090d6 <search+0x10>
-		if(p->id == id){
-			return p;
-		}
-		p=p->next;
-	}
-	return 0;
-801090f4:	b8 00 00 00 00       	mov    $0x0,%eax
-}
-801090f9:	c9                   	leave  
-801090fa:	c3                   	ret    
-
-801090fb <remove_link>:
-
-
-int remove_link(linkedList* list,int id){
-801090fb:	55                   	push   %ebp
-801090fc:	89 e5                	mov    %esp,%ebp
-801090fe:	83 ec 28             	sub    $0x28,%esp
-	node* tmp = search(list,id);
-80109101:	8b 45 0c             	mov    0xc(%ebp),%eax
-80109104:	89 44 24 04          	mov    %eax,0x4(%esp)
-80109108:	8b 45 08             	mov    0x8(%ebp),%eax
-8010910b:	89 04 24             	mov    %eax,(%esp)
-8010910e:	e8 b3 ff ff ff       	call   801090c6 <search>
-80109113:	89 45 f4             	mov    %eax,-0xc(%ebp)
-	cprintf("requested: %d, deleting, found:(%d) %d\n", id, tmp, tmp->id);
-80109116:	8b 45 f4             	mov    -0xc(%ebp),%eax
-80109119:	8b 00                	mov    (%eax),%eax
-8010911b:	89 44 24 0c          	mov    %eax,0xc(%esp)
-8010911f:	8b 45 f4             	mov    -0xc(%ebp),%eax
-80109122:	89 44 24 08          	mov    %eax,0x8(%esp)
-80109126:	8b 45 0c             	mov    0xc(%ebp),%eax
-80109129:	89 44 24 04          	mov    %eax,0x4(%esp)
-8010912d:	c7 04 24 e4 98 10 80 	movl   $0x801098e4,(%esp)
-80109134:	e8 68 72 ff ff       	call   801003a1 <cprintf>
-	if(tmp != 0){
-80109139:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
-8010913d:	74 62                	je     801091a1 <remove_link+0xa6>
-		if(tmp->prev == 0){ /* was head*/
-8010913f:	8b 45 f4             	mov    -0xc(%ebp),%eax
-80109142:	8b 40 0c             	mov    0xc(%eax),%eax
-80109145:	85 c0                	test   %eax,%eax
-80109147:	75 0d                	jne    80109156 <remove_link+0x5b>
-			list->head = tmp->next;
-80109149:	8b 45 f4             	mov    -0xc(%ebp),%eax
-8010914c:	8b 50 08             	mov    0x8(%eax),%edx
-8010914f:	8b 45 08             	mov    0x8(%ebp),%eax
-80109152:	89 10                	mov    %edx,(%eax)
-80109154:	eb 36                	jmp    8010918c <remove_link+0x91>
-		}
-		else{
-			tmp->prev->next = tmp->next;
-80109156:	8b 45 f4             	mov    -0xc(%ebp),%eax
-80109159:	8b 40 0c             	mov    0xc(%eax),%eax
-8010915c:	8b 55 f4             	mov    -0xc(%ebp),%edx
-8010915f:	8b 52 08             	mov    0x8(%edx),%edx
-80109162:	89 50 08             	mov    %edx,0x8(%eax)
-			if(tmp->next != 0){
-80109165:	8b 45 f4             	mov    -0xc(%ebp),%eax
-80109168:	8b 40 08             	mov    0x8(%eax),%eax
-8010916b:	85 c0                	test   %eax,%eax
-8010916d:	74 11                	je     80109180 <remove_link+0x85>
-				tmp->next->prev = tmp->prev;
-8010916f:	8b 45 f4             	mov    -0xc(%ebp),%eax
-80109172:	8b 40 08             	mov    0x8(%eax),%eax
-80109175:	8b 55 f4             	mov    -0xc(%ebp),%edx
-80109178:	8b 52 0c             	mov    0xc(%edx),%edx
-8010917b:	89 50 0c             	mov    %edx,0xc(%eax)
-8010917e:	eb 0c                	jmp    8010918c <remove_link+0x91>
-			}
-			else{
-				list->tail = tmp->prev;
-80109180:	8b 45 f4             	mov    -0xc(%ebp),%eax
-80109183:	8b 50 0c             	mov    0xc(%eax),%edx
-80109186:	8b 45 08             	mov    0x8(%ebp),%eax
-80109189:	89 50 04             	mov    %edx,0x4(%eax)
-			}
-
-
-		}
-		tmp->clean_up(tmp);
-8010918c:	8b 45 f4             	mov    -0xc(%ebp),%eax
-8010918f:	8b 50 14             	mov    0x14(%eax),%edx
-80109192:	8b 45 f4             	mov    -0xc(%ebp),%eax
-80109195:	89 04 24             	mov    %eax,(%esp)
-80109198:	ff d2                	call   *%edx
-		//list->print(list);
-
-		return 1;
-8010919a:	b8 01 00 00 00       	mov    $0x1,%eax
-8010919f:	eb 05                	jmp    801091a6 <remove_link+0xab>
-	}
-	return 0;
-801091a1:	b8 00 00 00 00       	mov    $0x0,%eax
-}
-801091a6:	c9                   	leave  
-801091a7:	c3                   	ret    
diff --git a/xv6/kernel.ld b/xv6/kernel.ld
deleted file mode 100644
index e24c860..0000000
--- a/xv6/kernel.ld
+++ /dev/null
@@ -1,68 +0,0 @@
-/* Simple linker script for the JOS kernel.
-   See the GNU ld 'info' manual ("info ld") to learn the syntax. */
-
-OUTPUT_FORMAT("elf32-i386", "elf32-i386", "elf32-i386")
-OUTPUT_ARCH(i386)
-ENTRY(_start)
-
-SECTIONS
-{
-	/* Link the kernel at this address: "." means the current address */
-        /* Must be equal to KERNLINK */
-	. = 0x80100000;
-
-	.text : AT(0x100000) {
-		*(.text .stub .text.* .gnu.linkonce.t.*)
-	}
-
-	PROVIDE(etext = .);	/* Define the 'etext' symbol to this value */
-
-	.rodata : {
-		*(.rodata .rodata.* .gnu.linkonce.r.*)
-	}
-
-	/* Include debugging information in kernel memory */
-	.stab : {
-		PROVIDE(__STAB_BEGIN__ = .);
-		*(.stab);
-		PROVIDE(__STAB_END__ = .);
-		BYTE(0)		/* Force the linker to allocate space
-				   for this section */
-	}
-
-	.stabstr : {
-		PROVIDE(__STABSTR_BEGIN__ = .);
-		*(.stabstr);
-		PROVIDE(__STABSTR_END__ = .);
-		BYTE(0)		/* Force the linker to allocate space
-				   for this section */
-	}
-
-	/* Adjust the address for the data segment to the next page */
-	. = ALIGN(0x1000);
-
-	/* Conventionally, Unix linkers provide pseudo-symbols
-	 * etext, edata, and end, at the end of the text, data, and bss.
-	 * For the kernel mapping, we need the address at the beginning
-	 * of the data section, but that's not one of the conventional
-	 * symbols, because the convention started before there was a
-	 * read-only rodata section between text and data. */
-	PROVIDE(data = .);
-
-	/* The data segment */
-	.data : {
-		*(.data)
-	}
-
-	PROVIDE(edata = .);
-
-	.bss : {
-		*(.bss)
-	}
-
-	PROVIDE(end = .);
-
-	/DISCARD/ : {
-		*(.eh_frame .note.GNU-stack)
-	}
-}
diff --git a/xv6/kernel.sym b/xv6/kernel.sym
deleted file mode 100644
index 689aaa1..0000000
--- a/xv6/kernel.sym
+++ /dev/null
@@ -1,606 +0,0 @@
-80100000 .text
-801091a8 .rodata
-8010990c .stab
-8010990d .stabstr
-8010a000 .data
-8010c5c0 .bss
-00000000 .debug_line
-00000000 .debug_info
-00000000 .debug_abbrev
-00000000 .debug_aranges
-00000000 .debug_loc
-00000000 .debug_str
-00000000 .comment
-00000000 .debug_ranges
-00000000 bio.c
-801000b0 bget
-00000000 console.c
-801002b0 inb
-801002da outb
-801002f8 cli
-8010c5c0 panicked
-8010c5e0 cons
-801002fe printint
-8010a004 digits.1414
-80100750 consputc
-8010a000 crt
-801005cd cgaputc
-00000000 exec.c
-00000000 file.c
-00000000 fs.c
-8010139a bzero
-801013eb balloc
-80101542 bfree
-801017cc iget
-80101c74 itrunc
-80101b72 bmap
-801022a9 skipelem
-8010235b namex
-00000000 ide.c
-801024b8 inb
-801024e2 insl
-80102507 outb
-80102525 outsl
-8010c620 idelock
-8010c654 idequeue
-8010c658 havedisk1
-8010254a idewait
-80102634 idestart
-00000000 ioapic.c
-801028f8 ioapicread
-8010290f ioapicwrite
-00000000 kalloc.c
-80102a2c v2p
-00000000 kbd.c
-80102bb4 inb
-8010a020 shiftcode
-8010a120 togglecode
-8010a220 normalmap
-8010a320 shiftmap
-8010a420 ctlmap
-8010c65c shift.1246
-8010a520 charcode.1247
-00000000 lapic.c
-80102d44 inb
-80102d6e outb
-80102d8c readeflags
-80102da1 lapicw
-8010c660 n.1325
-8010309f cmos_read
-801030d8 fill_rtcdate
-00000000 log.c
-8010349c recover_from_log
-80103307 install_trans
-801033b2 read_head
-80103421 write_head
-80103693 commit
-801035e8 write_log
-00000000 main.c
-8010378c v2p
-80103799 p2v
-801037a6 xchg
-801038dc startothers
-80103895 mpmain
-8010387b mpenter
-00000000 mp.c
-801039c0 p2v
-801039cd inb
-801039f7 outb
-8010c664 bcpu
-80103a35 sum
-80103a6b mpsearch1
-80103ade mpsearch
-80103b98 mpconfig
-00000000 picirq.c
-80103e0c outb
-8010c000 irqmask
-80103e2a picsetmask
-00000000 pipe.c
-00000000 proc.c
-801043a4 readeflags
-801043b9 sti
-8010c668 initproc
-801043db allocproc
-801051dc wakeup1
-8010c020 first.1586
-8010c008 states.1611
-00000000 spinlock.c
-801053c0 readeflags
-801053d5 cli
-801053db sti
-801053e1 xchg
-00000000 string.c
-8010562c stosb
-80105651 stosl
-00000000 syscall.c
-8010c040 syscalls
-00000000 sysfile.c
-80105b28 argfd
-80105b9d fdalloc
-80105f69 isdirempty
-801061af create
-00000000 sysproc.c
-00000000 timer.c
-80106c70 outb
-00000000 trap.c
-80106d0c lidt
-80106d35 rcr2
-00000000 uart.c
-80107240 inb
-8010726a outb
-8010c66c uart
-801073f8 uartgetc
-00000000 vm.c
-80107ec4 lgdt
-80107eed ltr
-80107f03 loadgs
-80107f18 lcr3
-80107f23 v2p
-80107f30 p2v
-801083b3 walkpgdir
-80108449 mappages
-8010c4c0 kmap
-00000000 linkedList.c
-80100925 consoleread
-801049ab clean_proc_entry
-80107e1a vector242
-80107871 vector119
-8010000c entry
-80107751 vector87
-80107748 vector86
-801058a6 safestrcpy
-80105d38 sys_close
-80107e86 vector251
-80107775 vector91
-8010756b vector33
-80107a5a vector162
-801050e3 yield
-80113280 log
-80113240 kmem
-80107cbe vector213
-8010780e vector108
-80107288 uartinit
-801075c5 vector43
-80102f7b lapiceoi
-80104bb7 waitpid
-80106c8e timerinit
-80107a7e vector165
-80107b6e vector185
-80109027 print
-80102929 ioapicinit
-8010784d vector115
-80101151 fileread
-8010788c vector122
-80106edb updateStats
-80106b67 sys_sbrk
-80113360 ioapicid
-80107a12 vector156
-80107e3e vector245
-80106ac6 sys_foreground
-80113234 ioapic
-80107b9e vector189
-8010748f vector7
-80107667 vector61
-8010751a vector24
-80107829 vector111
-80107c22 vector200
-8010769d vector67
-80108d52 implicit_exit_end
-801090c6 search
-8010793a vector138
-801076dc vector74
-80105031 sched
-80105749 memmove
-80107643 vector57
-80108dca clean_up
-80105a99 syscall
-80107cca vector214
-801077bd vector99
-80101f31 writei
-8010795e vector141
-801068a8 sys_fork
-8010d680 bcache
-80107ad2 vector172
-80107e0e vector241
-80113364 ismp
-801054d8 getcallerpcs
-80106509 sys_mkdir
-80107e9e vector253
-8010746b vector3
-80107462 vector2
-801020c7 namecmp
-80107d66 vector227
-80107c9a vector210
-80104dd3 foreground
-80105a62 argstr
-80107d42 vector224
-801075b3 vector41
-801003a1 cprintf
-80100fe4 filedup
-80102472 namei
-801074ff vector21
-80100034 binit
-80107b0e vector177
-80107868 vector118
-801076b8 vector70
-801076af vector69
-80107dde vector237
-80107682 vector64
-80107535 vector27
-801078f2 vector132
-80107b7a vector186
-80105c40 sys_read
-80107cee vector217
-80105934 fetchint
-801084dd setupkvm
-801057cc memcpy
-80108a45 freevm
-80107459 vector1
-80107b1a vector178
-80107598 vector38
-80102ace kfree
-80107dea vector238
-80108d54 create_link
-80101a83 iput
-801078fe vector133
-801076d3 vector73
-80107982 vector144
-80107eaa vector254
-80101354 readsb
-8010908b get_link
-8010c004 nextpid
-801077cf vector101
-80107ca6 vector211
-80103c45 mpinit
-80107aea vector174
-80107e26 vector243
-80102f1f cpunum
-80100f68 fileinit
-80116a20 gdt
-80105406 initlock
-801078c2 vector128
-80108c98 copyout
-8010771b vector81
-80105141 sleep
-80102fa0 microdelay
-801074bd vector13
-8010760d vector51
-801074d4 vector16
-801117a0 input
-80107e02 vector240
-80107628 vector54
-801074ed vector19
-8010777e vector92
-80107e32 vector244
-80101d81 stati
-80107952 vector140
-80106b28 sys_kill
-801075d7 vector45
-80107709 vector79
-8010412f pipeclose
-80107d7e vector229
-80107a2a vector158
-80105d89 sys_fstat
-80100a26 consolewrite
-801075a1 vector39
-80107aa2 vector168
-8010353e end_op
-8010757d vector35
-8010783b vector113
-80102a95 freerange
-801078a7 vector125
-80104eac set_priority
-801088af allocuvm
-80106d00 trapret
-80104cd7 wait_stat
-80107ce2 vector216
-80107679 vector63
-8010752c vector26
-80107bce vector193
-80102dc2 lapicinit
-80107bf2 vector196
-80107c8e vector209
-80107474 vector4
-80107aba vector170
-8010c670 stack
-80107922 vector136
-801074a8 vector10
-80107c6a vector206
-80101a1e iunlock
-80106bb1 sys_sleep
-80107eb6 vector255
-80107b3e vector181
-80108e00 add_last
-80107655 vector59
-8010773f vector85
-80107736 vector84
-80109002 clean_list
-80107b56 vector183
-80107a36 vector159
-80107cb2 vector212
-80105de8 sys_link
-801075e9 vector47
-80107d72 vector228
-801075bc vector42
-80107844 vector114
-80108c3b uva2ka
-80107af6 vector175
-80107976 vector143
-80100f84 filealloc
-8010521d wakeup
-801078da vector130
-80107e4a vector246
-8010749f vector9
-8010796a vector142
-801077c6 vector100
-80107c2e vector201
-80108f16 init_linkedList
-80108ad3 clearpteu
-80106d4b tvinit
-8010765e vector60
-80107511 vector23
-8010189e idup
-80107dd2 vector236
-80102d2f kbdintr
-8010636f sys_open
-80107d96 vector231
-80107694 vector66
-80107547 vector29
-80101dc6 readi
-80107916 vector135
-801007ad consoleintr
-80105248 kill
-801076f7 vector77
-80101637 ialloc
-80107b32 vector180
-80108e60 add
-80116a58 kpgdir
-80107c82 vector208
-8010314b cmostime
-8010743c uartintr
-801077b4 vector98
-801077ab vector97
-80107b02 vector176
-80107bda vector194
-80107562 vector32
-80116a5c end
-80107c16 vector199
-801078e6 vector131
-80107e92 vector252
-8010120d filewrite
-80107450 vector0
-801059d2 argint
-80100afc exec
-8010798e vector145
-80105cbc sys_write
-80105489 release
-8010596e fetchstr
-80107805 vector107
-801075aa vector40
-80104a6f wait
-801077d8 vector102
-8010b000 entrypgdir
-0010000c _start
-8010763a vector56
-801076a6 vector68
-80107486 vector6
-8010c52c _binary_initcode_end
-80100000 multiboot_header
-801078ce vector129
-80105018 scheduler
-801020e9 dirlookup
-80107bfe vector197
-8010102c fileclose
-801034bd begin_op
-80108d48 implicit_exit
-801079e2 vector152
-80108e9f remove_first
-8010859a kvmalloc
-80107d8a vector230
-801057ed strncmp
-8010758f vector37
-80107c5e vector205
-80107a4e vector161
-801161c0 tickslock
-801041c1 pipewrite
-80105845 strncpy
-801076c1 vector71
-80108b19 copyuvm
-80111860 ftable
-80107a42 vector160
-80105a00 argptr
-80107cd6 vector215
-80107a1e vector157
-80105be9 sys_dup
-80107832 vector112
-8010053d panic
-80105115 forkret
-80107b4a vector182
-801074b6 vector12
-801056ed memcmp
-80102bde kbdgetc
-80107817 vector109
-801074f6 vector20
-801046bf fork
-8010761f vector53
-801074e4 vector18
-0000008a _binary_entryother_size
-80113380 cpus
-80107799 vector95
-80105545 holding
-80105427 acquire
-80107d5a vector226
-80102494 nameiparent
-801075fb vector49
-801075ce vector44
-8011327c lapic
-80107700 vector78
-80106ce0 alltraps
-80107ade vector173
-8010785f vector117
-80107724 vector82
-80103e75 picenable
-80106924 sys_waitpid
-80107d2a vector222
-80107498 vector8
-801079be vector149
-80101714 iupdate
-8010a000 data
-80105676 memset
-80107da2 vector232
-801037cb main
-801085b1 switchkvm
-801077fc vector106
-80107d12 vector220
-8010776c vector90
-80107a66 vector163
-80107dba vector234
-801036c2 log_write
-80105fd7 sys_unlink
-80107670 vector62
-80107523 vector25
-80107c0a vector198
-8010787a vector120
-8010c52c _binary_entryother_start
-80102a39 kinit1
-80107604 vector50
-801074cb vector15
-801079d6 vector151
-8010772d vector83
-80107763 vector89
-8010775a vector88
-80106f78 trap
-80106c43 sys_uptime
-80107b26 vector179
-80107574 vector34
-801075e0 vector46
-8010790a vector134
-80107d36 vector223
-80116200 idt
-80107cfa vector218
-801043bf pinit
-80106999 sys_wait_stat
-80108989 deallocuvm
-80107d4e vector225
-80107b86 vector187
-8010461a growproc
-80113960 ncpu
-80107550 vector30
-801044fa userinit
-801001a6 bread
-801078b9 vector127
-801042b1 piperead
-80116a00 ticks
-80107bc2 vector192
-80107a8a vector166
-80100a8d consoleinit
-801076ee vector76
-801076e5 vector75
-80102759 ideintr
-80107be6 vector195
-80106af7 sys_set_priority
-801079ca vector150
-8010764c vector58
-80107e62 vector248
-80104eb6 list_pgroup
-80107895 vector123
-801077a2 vector96
-80107559 vector31
-80107c46 vector203
-80107946 vector139
-80106a49 sys_list_pgroup
-801079ee vector153
-80107a72 vector164
-801052c3 procdump
-80107883 vector121
-80107399 uartputc
-8010747d vector5
-80107a96 vector167
-80107a06 vector155
-80107e6e vector249
-80100217 brelse
-80107e7a vector250
-8010789e vector124
-80107820 vector110
-80107c52 vector204
-801018d0 ilock
-801066c7 sys_exec
-8010792e vector137
-8010c500 _binary_initcode_start
-8010591c swtch
-80107e56 vector247
-80107508 vector22
-80107c3a vector202
-80107f3d seginit
-80101b54 iunlockput
-801076ca vector72
-80107631 vector55
-80104f7c scheduler_default
-801078b0 vector126
-8010768b vector65
-8010753e vector28
-8010c5b6 _binary_entryother_end
-80107aae vector169
-801001dd bwrite
-80107dae vector233
-80106ebf idtinit
-80104865 exit
-801068eb sys_wait
-801068b5 sys_exit
-801021b1 dirlink
-0000002c _binary_initcode_size
-801079a6 vector147
-8010258e ideinit
-801087c0 loaduvm
-801077ea vector104
-80107856 vector116
-80113980 ptable
-801029de ioapicenable
-80104b3a shellWait
-801055b7 popcli
-8010c0ac vectors
-80107616 vector52
-801074dd vector17
-80107b62 vector184
-801058f4 strlen
-80103a15 mpbcpu
-801067d9 sys_pipe
-8010161b iinit
-80103eaa picinit
-80107c76 vector207
-80108735 inituvm
-80107baa vector190
-80107df6 vector239
-80107790 vector94
-80107787 vector93
-801032b0 initlog
-80107b92 vector188
-801075f2 vector48
-8010281c iderw
-80107d06 vector219
-801079b2 vector148
-80107d1e vector221
-80102b67 kalloc
-80112200 devsw
-80106b59 sys_getpid
-80107712 vector80
-80107ac6 vector171
-801079fa vector154
-80107586 vector36
-80103fec pipealloc
-80107dc6 vector235
-801077f3 vector105
-80106622 sys_chdir
-80112260 icache
-801090fb remove_link
-8010799a vector146
-80107bb6 vector191
-801077e1 vector103
-8010657a sys_mknod
-80102fa5 lapicstartap
-801085ce switchuvm
-8010556f pushcli
-80102a71 kinit2
-801074af vector11
-801074c4 vector14
-80101102 filestat
diff --git a/xv6/kill.asm b/xv6/kill.asm
deleted file mode 100644
index 04ab4e1..0000000
--- a/xv6/kill.asm
+++ /dev/null
@@ -1,1208 +0,0 @@
-
-_kill:     file format elf32-i386
-
-
-Disassembly of section .text:
-
-00000000 <main>:
-#include "stat.h"
-#include "user.h"
-
-int
-main(int argc, char **argv)
-{
-   0:	55                   	push   %ebp
-   1:	89 e5                	mov    %esp,%ebp
-   3:	83 e4 f0             	and    $0xfffffff0,%esp
-   6:	83 ec 20             	sub    $0x20,%esp
-  int i;
-
-  if(argc < 1){
-   9:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
-   d:	7f 20                	jg     2f <main+0x2f>
-    printf(2, "usage: kill pid...\n");
-   f:	c7 44 24 04 37 08 00 	movl   $0x837,0x4(%esp)
-  16:	00 
-  17:	c7 04 24 02 00 00 00 	movl   $0x2,(%esp)
-  1e:	e8 50 04 00 00       	call   473 <printf>
-    exit(EXIT_STATUS_DEFAULT);
-  23:	c7 04 24 02 00 00 00 	movl   $0x2,(%esp)
-  2a:	e8 a5 02 00 00       	call   2d4 <exit>
-  }
-  for(i=1; i<argc; i++)
-  2f:	c7 44 24 1c 01 00 00 	movl   $0x1,0x1c(%esp)
-  36:	00 
-  37:	eb 21                	jmp    5a <main+0x5a>
-    kill(atoi(argv[i]));
-  39:	8b 44 24 1c          	mov    0x1c(%esp),%eax
-  3d:	c1 e0 02             	shl    $0x2,%eax
-  40:	03 45 0c             	add    0xc(%ebp),%eax
-  43:	8b 00                	mov    (%eax),%eax
-  45:	89 04 24             	mov    %eax,(%esp)
-  48:	e8 f6 01 00 00       	call   243 <atoi>
-  4d:	89 04 24             	mov    %eax,(%esp)
-  50:	e8 af 02 00 00       	call   304 <kill>
-
-  if(argc < 1){
-    printf(2, "usage: kill pid...\n");
-    exit(EXIT_STATUS_DEFAULT);
-  }
-  for(i=1; i<argc; i++)
-  55:	83 44 24 1c 01       	addl   $0x1,0x1c(%esp)
-  5a:	8b 44 24 1c          	mov    0x1c(%esp),%eax
-  5e:	3b 45 08             	cmp    0x8(%ebp),%eax
-  61:	7c d6                	jl     39 <main+0x39>
-    kill(atoi(argv[i]));
-  exit(EXIT_STATUS_DEFAULT);
-  63:	c7 04 24 02 00 00 00 	movl   $0x2,(%esp)
-  6a:	e8 65 02 00 00       	call   2d4 <exit>
-  6f:	90                   	nop
-
-00000070 <stosb>:
-               "cc");
-}
-
-static inline void
-stosb(void *addr, int data, int cnt)
-{
-  70:	55                   	push   %ebp
-  71:	89 e5                	mov    %esp,%ebp
-  73:	57                   	push   %edi
-  74:	53                   	push   %ebx
-  asm volatile("cld; rep stosb" :
-  75:	8b 4d 08             	mov    0x8(%ebp),%ecx
-  78:	8b 55 10             	mov    0x10(%ebp),%edx
-  7b:	8b 45 0c             	mov    0xc(%ebp),%eax
-  7e:	89 cb                	mov    %ecx,%ebx
-  80:	89 df                	mov    %ebx,%edi
-  82:	89 d1                	mov    %edx,%ecx
-  84:	fc                   	cld    
-  85:	f3 aa                	rep stos %al,%es:(%edi)
-  87:	89 ca                	mov    %ecx,%edx
-  89:	89 fb                	mov    %edi,%ebx
-  8b:	89 5d 08             	mov    %ebx,0x8(%ebp)
-  8e:	89 55 10             	mov    %edx,0x10(%ebp)
-               "=D" (addr), "=c" (cnt) :
-               "0" (addr), "1" (cnt), "a" (data) :
-               "memory", "cc");
-}
-  91:	5b                   	pop    %ebx
-  92:	5f                   	pop    %edi
-  93:	5d                   	pop    %ebp
-  94:	c3                   	ret    
-
-00000095 <strcpy>:
-#include "user.h"
-#include "x86.h"
-
-char*
-strcpy(char *s, char *t)
-{
-  95:	55                   	push   %ebp
-  96:	89 e5                	mov    %esp,%ebp
-  98:	83 ec 10             	sub    $0x10,%esp
-  char *os;
-
-  os = s;
-  9b:	8b 45 08             	mov    0x8(%ebp),%eax
-  9e:	89 45 fc             	mov    %eax,-0x4(%ebp)
-  while((*s++ = *t++) != 0)
-  a1:	90                   	nop
-  a2:	8b 45 0c             	mov    0xc(%ebp),%eax
-  a5:	0f b6 10             	movzbl (%eax),%edx
-  a8:	8b 45 08             	mov    0x8(%ebp),%eax
-  ab:	88 10                	mov    %dl,(%eax)
-  ad:	8b 45 08             	mov    0x8(%ebp),%eax
-  b0:	0f b6 00             	movzbl (%eax),%eax
-  b3:	84 c0                	test   %al,%al
-  b5:	0f 95 c0             	setne  %al
-  b8:	83 45 08 01          	addl   $0x1,0x8(%ebp)
-  bc:	83 45 0c 01          	addl   $0x1,0xc(%ebp)
-  c0:	84 c0                	test   %al,%al
-  c2:	75 de                	jne    a2 <strcpy+0xd>
-    ;
-  return os;
-  c4:	8b 45 fc             	mov    -0x4(%ebp),%eax
-}
-  c7:	c9                   	leave  
-  c8:	c3                   	ret    
-
-000000c9 <strcmp>:
-
-int
-strcmp(const char *p, const char *q)
-{
-  c9:	55                   	push   %ebp
-  ca:	89 e5                	mov    %esp,%ebp
-  while(*p && *p == *q)
-  cc:	eb 08                	jmp    d6 <strcmp+0xd>
-    p++, q++;
-  ce:	83 45 08 01          	addl   $0x1,0x8(%ebp)
-  d2:	83 45 0c 01          	addl   $0x1,0xc(%ebp)
-}
-
-int
-strcmp(const char *p, const char *q)
-{
-  while(*p && *p == *q)
-  d6:	8b 45 08             	mov    0x8(%ebp),%eax
-  d9:	0f b6 00             	movzbl (%eax),%eax
-  dc:	84 c0                	test   %al,%al
-  de:	74 10                	je     f0 <strcmp+0x27>
-  e0:	8b 45 08             	mov    0x8(%ebp),%eax
-  e3:	0f b6 10             	movzbl (%eax),%edx
-  e6:	8b 45 0c             	mov    0xc(%ebp),%eax
-  e9:	0f b6 00             	movzbl (%eax),%eax
-  ec:	38 c2                	cmp    %al,%dl
-  ee:	74 de                	je     ce <strcmp+0x5>
-    p++, q++;
-  return (uchar)*p - (uchar)*q;
-  f0:	8b 45 08             	mov    0x8(%ebp),%eax
-  f3:	0f b6 00             	movzbl (%eax),%eax
-  f6:	0f b6 d0             	movzbl %al,%edx
-  f9:	8b 45 0c             	mov    0xc(%ebp),%eax
-  fc:	0f b6 00             	movzbl (%eax),%eax
-  ff:	0f b6 c0             	movzbl %al,%eax
- 102:	89 d1                	mov    %edx,%ecx
- 104:	29 c1                	sub    %eax,%ecx
- 106:	89 c8                	mov    %ecx,%eax
-}
- 108:	5d                   	pop    %ebp
- 109:	c3                   	ret    
-
-0000010a <strlen>:
-
-uint
-strlen(char *s)
-{
- 10a:	55                   	push   %ebp
- 10b:	89 e5                	mov    %esp,%ebp
- 10d:	83 ec 10             	sub    $0x10,%esp
-  int n;
-
-  for(n = 0; s[n]; n++)
- 110:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
- 117:	eb 04                	jmp    11d <strlen+0x13>
- 119:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
- 11d:	8b 45 fc             	mov    -0x4(%ebp),%eax
- 120:	03 45 08             	add    0x8(%ebp),%eax
- 123:	0f b6 00             	movzbl (%eax),%eax
- 126:	84 c0                	test   %al,%al
- 128:	75 ef                	jne    119 <strlen+0xf>
-    ;
-  return n;
- 12a:	8b 45 fc             	mov    -0x4(%ebp),%eax
-}
- 12d:	c9                   	leave  
- 12e:	c3                   	ret    
-
-0000012f <memset>:
-
-void*
-memset(void *dst, int c, uint n)
-{
- 12f:	55                   	push   %ebp
- 130:	89 e5                	mov    %esp,%ebp
- 132:	83 ec 0c             	sub    $0xc,%esp
-  stosb(dst, c, n);
- 135:	8b 45 10             	mov    0x10(%ebp),%eax
- 138:	89 44 24 08          	mov    %eax,0x8(%esp)
- 13c:	8b 45 0c             	mov    0xc(%ebp),%eax
- 13f:	89 44 24 04          	mov    %eax,0x4(%esp)
- 143:	8b 45 08             	mov    0x8(%ebp),%eax
- 146:	89 04 24             	mov    %eax,(%esp)
- 149:	e8 22 ff ff ff       	call   70 <stosb>
-  return dst;
- 14e:	8b 45 08             	mov    0x8(%ebp),%eax
-}
- 151:	c9                   	leave  
- 152:	c3                   	ret    
-
-00000153 <strchr>:
-
-char*
-strchr(const char *s, char c)
-{
- 153:	55                   	push   %ebp
- 154:	89 e5                	mov    %esp,%ebp
- 156:	83 ec 04             	sub    $0x4,%esp
- 159:	8b 45 0c             	mov    0xc(%ebp),%eax
- 15c:	88 45 fc             	mov    %al,-0x4(%ebp)
-  for(; *s; s++)
- 15f:	eb 14                	jmp    175 <strchr+0x22>
-    if(*s == c)
- 161:	8b 45 08             	mov    0x8(%ebp),%eax
- 164:	0f b6 00             	movzbl (%eax),%eax
- 167:	3a 45 fc             	cmp    -0x4(%ebp),%al
- 16a:	75 05                	jne    171 <strchr+0x1e>
-      return (char*)s;
- 16c:	8b 45 08             	mov    0x8(%ebp),%eax
- 16f:	eb 13                	jmp    184 <strchr+0x31>
-}
-
-char*
-strchr(const char *s, char c)
-{
-  for(; *s; s++)
- 171:	83 45 08 01          	addl   $0x1,0x8(%ebp)
- 175:	8b 45 08             	mov    0x8(%ebp),%eax
- 178:	0f b6 00             	movzbl (%eax),%eax
- 17b:	84 c0                	test   %al,%al
- 17d:	75 e2                	jne    161 <strchr+0xe>
-    if(*s == c)
-      return (char*)s;
-  return 0;
- 17f:	b8 00 00 00 00       	mov    $0x0,%eax
-}
- 184:	c9                   	leave  
- 185:	c3                   	ret    
-
-00000186 <gets>:
-
-char*
-gets(char *buf, int max)
-{
- 186:	55                   	push   %ebp
- 187:	89 e5                	mov    %esp,%ebp
- 189:	83 ec 28             	sub    $0x28,%esp
-  int i, cc;
-  char c;
-
-  for(i=0; i+1 < max; ){
- 18c:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
- 193:	eb 44                	jmp    1d9 <gets+0x53>
-    cc = read(0, &c, 1);
- 195:	c7 44 24 08 01 00 00 	movl   $0x1,0x8(%esp)
- 19c:	00 
- 19d:	8d 45 ef             	lea    -0x11(%ebp),%eax
- 1a0:	89 44 24 04          	mov    %eax,0x4(%esp)
- 1a4:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
- 1ab:	e8 3c 01 00 00       	call   2ec <read>
- 1b0:	89 45 f0             	mov    %eax,-0x10(%ebp)
-    if(cc < 1)
- 1b3:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
- 1b7:	7e 2d                	jle    1e6 <gets+0x60>
-      break;
-    buf[i++] = c;
- 1b9:	8b 45 f4             	mov    -0xc(%ebp),%eax
- 1bc:	03 45 08             	add    0x8(%ebp),%eax
- 1bf:	0f b6 55 ef          	movzbl -0x11(%ebp),%edx
- 1c3:	88 10                	mov    %dl,(%eax)
- 1c5:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
-    if(c == '\n' || c == '\r')
- 1c9:	0f b6 45 ef          	movzbl -0x11(%ebp),%eax
- 1cd:	3c 0a                	cmp    $0xa,%al
- 1cf:	74 16                	je     1e7 <gets+0x61>
- 1d1:	0f b6 45 ef          	movzbl -0x11(%ebp),%eax
- 1d5:	3c 0d                	cmp    $0xd,%al
- 1d7:	74 0e                	je     1e7 <gets+0x61>
-gets(char *buf, int max)
-{
-  int i, cc;
-  char c;
-
-  for(i=0; i+1 < max; ){
- 1d9:	8b 45 f4             	mov    -0xc(%ebp),%eax
- 1dc:	83 c0 01             	add    $0x1,%eax
- 1df:	3b 45 0c             	cmp    0xc(%ebp),%eax
- 1e2:	7c b1                	jl     195 <gets+0xf>
- 1e4:	eb 01                	jmp    1e7 <gets+0x61>
-    cc = read(0, &c, 1);
-    if(cc < 1)
-      break;
- 1e6:	90                   	nop
-    buf[i++] = c;
-    if(c == '\n' || c == '\r')
-      break;
-  }
-  buf[i] = '\0';
- 1e7:	8b 45 f4             	mov    -0xc(%ebp),%eax
- 1ea:	03 45 08             	add    0x8(%ebp),%eax
- 1ed:	c6 00 00             	movb   $0x0,(%eax)
-  return buf;
- 1f0:	8b 45 08             	mov    0x8(%ebp),%eax
-}
- 1f3:	c9                   	leave  
- 1f4:	c3                   	ret    
-
-000001f5 <stat>:
-
-int
-stat(char *n, struct stat *st)
-{
- 1f5:	55                   	push   %ebp
- 1f6:	89 e5                	mov    %esp,%ebp
- 1f8:	83 ec 28             	sub    $0x28,%esp
-  int fd;
-  int r;
-
-  fd = open(n, O_RDONLY);
- 1fb:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
- 202:	00 
- 203:	8b 45 08             	mov    0x8(%ebp),%eax
- 206:	89 04 24             	mov    %eax,(%esp)
- 209:	e8 06 01 00 00       	call   314 <open>
- 20e:	89 45 f4             	mov    %eax,-0xc(%ebp)
-  if(fd < 0)
- 211:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
- 215:	79 07                	jns    21e <stat+0x29>
-    return -1;
- 217:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
- 21c:	eb 23                	jmp    241 <stat+0x4c>
-  r = fstat(fd, st);
- 21e:	8b 45 0c             	mov    0xc(%ebp),%eax
- 221:	89 44 24 04          	mov    %eax,0x4(%esp)
- 225:	8b 45 f4             	mov    -0xc(%ebp),%eax
- 228:	89 04 24             	mov    %eax,(%esp)
- 22b:	e8 fc 00 00 00       	call   32c <fstat>
- 230:	89 45 f0             	mov    %eax,-0x10(%ebp)
-  close(fd);
- 233:	8b 45 f4             	mov    -0xc(%ebp),%eax
- 236:	89 04 24             	mov    %eax,(%esp)
- 239:	e8 be 00 00 00       	call   2fc <close>
-  return r;
- 23e:	8b 45 f0             	mov    -0x10(%ebp),%eax
-}
- 241:	c9                   	leave  
- 242:	c3                   	ret    
-
-00000243 <atoi>:
-
-int
-atoi(const char *s)
-{
- 243:	55                   	push   %ebp
- 244:	89 e5                	mov    %esp,%ebp
- 246:	83 ec 10             	sub    $0x10,%esp
-  int n;
-
-  n = 0;
- 249:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
-  while('0' <= *s && *s <= '9')
- 250:	eb 23                	jmp    275 <atoi+0x32>
-    n = n*10 + *s++ - '0';
- 252:	8b 55 fc             	mov    -0x4(%ebp),%edx
- 255:	89 d0                	mov    %edx,%eax
- 257:	c1 e0 02             	shl    $0x2,%eax
- 25a:	01 d0                	add    %edx,%eax
- 25c:	01 c0                	add    %eax,%eax
- 25e:	89 c2                	mov    %eax,%edx
- 260:	8b 45 08             	mov    0x8(%ebp),%eax
- 263:	0f b6 00             	movzbl (%eax),%eax
- 266:	0f be c0             	movsbl %al,%eax
- 269:	01 d0                	add    %edx,%eax
- 26b:	83 e8 30             	sub    $0x30,%eax
- 26e:	89 45 fc             	mov    %eax,-0x4(%ebp)
- 271:	83 45 08 01          	addl   $0x1,0x8(%ebp)
-atoi(const char *s)
-{
-  int n;
-
-  n = 0;
-  while('0' <= *s && *s <= '9')
- 275:	8b 45 08             	mov    0x8(%ebp),%eax
- 278:	0f b6 00             	movzbl (%eax),%eax
- 27b:	3c 2f                	cmp    $0x2f,%al
- 27d:	7e 0a                	jle    289 <atoi+0x46>
- 27f:	8b 45 08             	mov    0x8(%ebp),%eax
- 282:	0f b6 00             	movzbl (%eax),%eax
- 285:	3c 39                	cmp    $0x39,%al
- 287:	7e c9                	jle    252 <atoi+0xf>
-    n = n*10 + *s++ - '0';
-  return n;
- 289:	8b 45 fc             	mov    -0x4(%ebp),%eax
-}
- 28c:	c9                   	leave  
- 28d:	c3                   	ret    
-
-0000028e <memmove>:
-
-void*
-memmove(void *vdst, void *vsrc, int n)
-{
- 28e:	55                   	push   %ebp
- 28f:	89 e5                	mov    %esp,%ebp
- 291:	83 ec 10             	sub    $0x10,%esp
-  char *dst, *src;
-  
-  dst = vdst;
- 294:	8b 45 08             	mov    0x8(%ebp),%eax
- 297:	89 45 fc             	mov    %eax,-0x4(%ebp)
-  src = vsrc;
- 29a:	8b 45 0c             	mov    0xc(%ebp),%eax
- 29d:	89 45 f8             	mov    %eax,-0x8(%ebp)
-  while(n-- > 0)
- 2a0:	eb 13                	jmp    2b5 <memmove+0x27>
-    *dst++ = *src++;
- 2a2:	8b 45 f8             	mov    -0x8(%ebp),%eax
- 2a5:	0f b6 10             	movzbl (%eax),%edx
- 2a8:	8b 45 fc             	mov    -0x4(%ebp),%eax
- 2ab:	88 10                	mov    %dl,(%eax)
- 2ad:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
- 2b1:	83 45 f8 01          	addl   $0x1,-0x8(%ebp)
-{
-  char *dst, *src;
-  
-  dst = vdst;
-  src = vsrc;
-  while(n-- > 0)
- 2b5:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
- 2b9:	0f 9f c0             	setg   %al
- 2bc:	83 6d 10 01          	subl   $0x1,0x10(%ebp)
- 2c0:	84 c0                	test   %al,%al
- 2c2:	75 de                	jne    2a2 <memmove+0x14>
-    *dst++ = *src++;
-  return vdst;
- 2c4:	8b 45 08             	mov    0x8(%ebp),%eax
-}
- 2c7:	c9                   	leave  
- 2c8:	c3                   	ret    
- 2c9:	90                   	nop
- 2ca:	90                   	nop
- 2cb:	90                   	nop
-
-000002cc <fork>:
-  name: \
-    movl $SYS_ ## name, %eax; \
-    int $T_SYSCALL; \
-    ret
-
-SYSCALL(fork)
- 2cc:	b8 01 00 00 00       	mov    $0x1,%eax
- 2d1:	cd 40                	int    $0x40
- 2d3:	c3                   	ret    
-
-000002d4 <exit>:
-SYSCALL(exit)
- 2d4:	b8 02 00 00 00       	mov    $0x2,%eax
- 2d9:	cd 40                	int    $0x40
- 2db:	c3                   	ret    
-
-000002dc <wait>:
-SYSCALL(wait)
- 2dc:	b8 03 00 00 00       	mov    $0x3,%eax
- 2e1:	cd 40                	int    $0x40
- 2e3:	c3                   	ret    
-
-000002e4 <pipe>:
-SYSCALL(pipe)
- 2e4:	b8 04 00 00 00       	mov    $0x4,%eax
- 2e9:	cd 40                	int    $0x40
- 2eb:	c3                   	ret    
-
-000002ec <read>:
-SYSCALL(read)
- 2ec:	b8 05 00 00 00       	mov    $0x5,%eax
- 2f1:	cd 40                	int    $0x40
- 2f3:	c3                   	ret    
-
-000002f4 <write>:
-SYSCALL(write)
- 2f4:	b8 10 00 00 00       	mov    $0x10,%eax
- 2f9:	cd 40                	int    $0x40
- 2fb:	c3                   	ret    
-
-000002fc <close>:
-SYSCALL(close)
- 2fc:	b8 15 00 00 00       	mov    $0x15,%eax
- 301:	cd 40                	int    $0x40
- 303:	c3                   	ret    
-
-00000304 <kill>:
-SYSCALL(kill)
- 304:	b8 06 00 00 00       	mov    $0x6,%eax
- 309:	cd 40                	int    $0x40
- 30b:	c3                   	ret    
-
-0000030c <exec>:
-SYSCALL(exec)
- 30c:	b8 07 00 00 00       	mov    $0x7,%eax
- 311:	cd 40                	int    $0x40
- 313:	c3                   	ret    
-
-00000314 <open>:
-SYSCALL(open)
- 314:	b8 0f 00 00 00       	mov    $0xf,%eax
- 319:	cd 40                	int    $0x40
- 31b:	c3                   	ret    
-
-0000031c <mknod>:
-SYSCALL(mknod)
- 31c:	b8 11 00 00 00       	mov    $0x11,%eax
- 321:	cd 40                	int    $0x40
- 323:	c3                   	ret    
-
-00000324 <unlink>:
-SYSCALL(unlink)
- 324:	b8 12 00 00 00       	mov    $0x12,%eax
- 329:	cd 40                	int    $0x40
- 32b:	c3                   	ret    
-
-0000032c <fstat>:
-SYSCALL(fstat)
- 32c:	b8 08 00 00 00       	mov    $0x8,%eax
- 331:	cd 40                	int    $0x40
- 333:	c3                   	ret    
-
-00000334 <link>:
-SYSCALL(link)
- 334:	b8 13 00 00 00       	mov    $0x13,%eax
- 339:	cd 40                	int    $0x40
- 33b:	c3                   	ret    
-
-0000033c <mkdir>:
-SYSCALL(mkdir)
- 33c:	b8 14 00 00 00       	mov    $0x14,%eax
- 341:	cd 40                	int    $0x40
- 343:	c3                   	ret    
-
-00000344 <chdir>:
-SYSCALL(chdir)
- 344:	b8 09 00 00 00       	mov    $0x9,%eax
- 349:	cd 40                	int    $0x40
- 34b:	c3                   	ret    
-
-0000034c <dup>:
-SYSCALL(dup)
- 34c:	b8 0a 00 00 00       	mov    $0xa,%eax
- 351:	cd 40                	int    $0x40
- 353:	c3                   	ret    
-
-00000354 <getpid>:
-SYSCALL(getpid)
- 354:	b8 0b 00 00 00       	mov    $0xb,%eax
- 359:	cd 40                	int    $0x40
- 35b:	c3                   	ret    
-
-0000035c <sbrk>:
-SYSCALL(sbrk)
- 35c:	b8 0c 00 00 00       	mov    $0xc,%eax
- 361:	cd 40                	int    $0x40
- 363:	c3                   	ret    
-
-00000364 <sleep>:
-SYSCALL(sleep)
- 364:	b8 0d 00 00 00       	mov    $0xd,%eax
- 369:	cd 40                	int    $0x40
- 36b:	c3                   	ret    
-
-0000036c <uptime>:
-SYSCALL(uptime)
- 36c:	b8 0e 00 00 00       	mov    $0xe,%eax
- 371:	cd 40                	int    $0x40
- 373:	c3                   	ret    
-
-00000374 <waitpid>:
-SYSCALL(waitpid)
- 374:	b8 16 00 00 00       	mov    $0x16,%eax
- 379:	cd 40                	int    $0x40
- 37b:	c3                   	ret    
-
-0000037c <wait_stat>:
-SYSCALL(wait_stat)
- 37c:	b8 17 00 00 00       	mov    $0x17,%eax
- 381:	cd 40                	int    $0x40
- 383:	c3                   	ret    
-
-00000384 <list_pgroup>:
-SYSCALL(list_pgroup)
- 384:	b8 18 00 00 00       	mov    $0x18,%eax
- 389:	cd 40                	int    $0x40
- 38b:	c3                   	ret    
-
-0000038c <foreground>:
-SYSCALL(foreground)
- 38c:	b8 19 00 00 00       	mov    $0x19,%eax
- 391:	cd 40                	int    $0x40
- 393:	c3                   	ret    
-
-00000394 <set_priority>:
-SYSCALL(set_priority)
- 394:	b8 1a 00 00 00       	mov    $0x1a,%eax
- 399:	cd 40                	int    $0x40
- 39b:	c3                   	ret    
-
-0000039c <putc>:
-#include "stat.h"
-#include "user.h"
-
-static void
-putc(int fd, char c)
-{
- 39c:	55                   	push   %ebp
- 39d:	89 e5                	mov    %esp,%ebp
- 39f:	83 ec 28             	sub    $0x28,%esp
- 3a2:	8b 45 0c             	mov    0xc(%ebp),%eax
- 3a5:	88 45 f4             	mov    %al,-0xc(%ebp)
-  write(fd, &c, 1);
- 3a8:	c7 44 24 08 01 00 00 	movl   $0x1,0x8(%esp)
- 3af:	00 
- 3b0:	8d 45 f4             	lea    -0xc(%ebp),%eax
- 3b3:	89 44 24 04          	mov    %eax,0x4(%esp)
- 3b7:	8b 45 08             	mov    0x8(%ebp),%eax
- 3ba:	89 04 24             	mov    %eax,(%esp)
- 3bd:	e8 32 ff ff ff       	call   2f4 <write>
-}
- 3c2:	c9                   	leave  
- 3c3:	c3                   	ret    
-
-000003c4 <printint>:
-
-static void
-printint(int fd, int xx, int base, int sgn)
-{
- 3c4:	55                   	push   %ebp
- 3c5:	89 e5                	mov    %esp,%ebp
- 3c7:	83 ec 48             	sub    $0x48,%esp
-  static char digits[] = "0123456789ABCDEF";
-  char buf[16];
-  int i, neg;
-  uint x;
-
-  neg = 0;
- 3ca:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
-  if(sgn && xx < 0){
- 3d1:	83 7d 14 00          	cmpl   $0x0,0x14(%ebp)
- 3d5:	74 17                	je     3ee <printint+0x2a>
- 3d7:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
- 3db:	79 11                	jns    3ee <printint+0x2a>
-    neg = 1;
- 3dd:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
-    x = -xx;
- 3e4:	8b 45 0c             	mov    0xc(%ebp),%eax
- 3e7:	f7 d8                	neg    %eax
- 3e9:	89 45 ec             	mov    %eax,-0x14(%ebp)
- 3ec:	eb 06                	jmp    3f4 <printint+0x30>
-  } else {
-    x = xx;
- 3ee:	8b 45 0c             	mov    0xc(%ebp),%eax
- 3f1:	89 45 ec             	mov    %eax,-0x14(%ebp)
-  }
-
-  i = 0;
- 3f4:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
-  do{
-    buf[i++] = digits[x % base];
- 3fb:	8b 4d 10             	mov    0x10(%ebp),%ecx
- 3fe:	8b 45 ec             	mov    -0x14(%ebp),%eax
- 401:	ba 00 00 00 00       	mov    $0x0,%edx
- 406:	f7 f1                	div    %ecx
- 408:	89 d0                	mov    %edx,%eax
- 40a:	0f b6 90 90 0a 00 00 	movzbl 0xa90(%eax),%edx
- 411:	8d 45 dc             	lea    -0x24(%ebp),%eax
- 414:	03 45 f4             	add    -0xc(%ebp),%eax
- 417:	88 10                	mov    %dl,(%eax)
- 419:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
-  }while((x /= base) != 0);
- 41d:	8b 55 10             	mov    0x10(%ebp),%edx
- 420:	89 55 d4             	mov    %edx,-0x2c(%ebp)
- 423:	8b 45 ec             	mov    -0x14(%ebp),%eax
- 426:	ba 00 00 00 00       	mov    $0x0,%edx
- 42b:	f7 75 d4             	divl   -0x2c(%ebp)
- 42e:	89 45 ec             	mov    %eax,-0x14(%ebp)
- 431:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
- 435:	75 c4                	jne    3fb <printint+0x37>
-  if(neg)
- 437:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
- 43b:	74 2a                	je     467 <printint+0xa3>
-    buf[i++] = '-';
- 43d:	8d 45 dc             	lea    -0x24(%ebp),%eax
- 440:	03 45 f4             	add    -0xc(%ebp),%eax
- 443:	c6 00 2d             	movb   $0x2d,(%eax)
- 446:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
-
-  while(--i >= 0)
- 44a:	eb 1b                	jmp    467 <printint+0xa3>
-    putc(fd, buf[i]);
- 44c:	8d 45 dc             	lea    -0x24(%ebp),%eax
- 44f:	03 45 f4             	add    -0xc(%ebp),%eax
- 452:	0f b6 00             	movzbl (%eax),%eax
- 455:	0f be c0             	movsbl %al,%eax
- 458:	89 44 24 04          	mov    %eax,0x4(%esp)
- 45c:	8b 45 08             	mov    0x8(%ebp),%eax
- 45f:	89 04 24             	mov    %eax,(%esp)
- 462:	e8 35 ff ff ff       	call   39c <putc>
-    buf[i++] = digits[x % base];
-  }while((x /= base) != 0);
-  if(neg)
-    buf[i++] = '-';
-
-  while(--i >= 0)
- 467:	83 6d f4 01          	subl   $0x1,-0xc(%ebp)
- 46b:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
- 46f:	79 db                	jns    44c <printint+0x88>
-    putc(fd, buf[i]);
-}
- 471:	c9                   	leave  
- 472:	c3                   	ret    
-
-00000473 <printf>:
-
-// Print to the given fd. Only understands %d, %x, %p, %s.
-void
-printf(int fd, char *fmt, ...)
-{
- 473:	55                   	push   %ebp
- 474:	89 e5                	mov    %esp,%ebp
- 476:	83 ec 38             	sub    $0x38,%esp
-  char *s;
-  int c, i, state;
-  uint *ap;
-
-  state = 0;
- 479:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
-  ap = (uint*)(void*)&fmt + 1;
- 480:	8d 45 0c             	lea    0xc(%ebp),%eax
- 483:	83 c0 04             	add    $0x4,%eax
- 486:	89 45 e8             	mov    %eax,-0x18(%ebp)
-  for(i = 0; fmt[i]; i++){
- 489:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
- 490:	e9 7d 01 00 00       	jmp    612 <printf+0x19f>
-    c = fmt[i] & 0xff;
- 495:	8b 55 0c             	mov    0xc(%ebp),%edx
- 498:	8b 45 f0             	mov    -0x10(%ebp),%eax
- 49b:	01 d0                	add    %edx,%eax
- 49d:	0f b6 00             	movzbl (%eax),%eax
- 4a0:	0f be c0             	movsbl %al,%eax
- 4a3:	25 ff 00 00 00       	and    $0xff,%eax
- 4a8:	89 45 e4             	mov    %eax,-0x1c(%ebp)
-    if(state == 0){
- 4ab:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
- 4af:	75 2c                	jne    4dd <printf+0x6a>
-      if(c == '%'){
- 4b1:	83 7d e4 25          	cmpl   $0x25,-0x1c(%ebp)
- 4b5:	75 0c                	jne    4c3 <printf+0x50>
-        state = '%';
- 4b7:	c7 45 ec 25 00 00 00 	movl   $0x25,-0x14(%ebp)
- 4be:	e9 4b 01 00 00       	jmp    60e <printf+0x19b>
-      } else {
-        putc(fd, c);
- 4c3:	8b 45 e4             	mov    -0x1c(%ebp),%eax
- 4c6:	0f be c0             	movsbl %al,%eax
- 4c9:	89 44 24 04          	mov    %eax,0x4(%esp)
- 4cd:	8b 45 08             	mov    0x8(%ebp),%eax
- 4d0:	89 04 24             	mov    %eax,(%esp)
- 4d3:	e8 c4 fe ff ff       	call   39c <putc>
- 4d8:	e9 31 01 00 00       	jmp    60e <printf+0x19b>
-      }
-    } else if(state == '%'){
- 4dd:	83 7d ec 25          	cmpl   $0x25,-0x14(%ebp)
- 4e1:	0f 85 27 01 00 00    	jne    60e <printf+0x19b>
-      if(c == 'd'){
- 4e7:	83 7d e4 64          	cmpl   $0x64,-0x1c(%ebp)
- 4eb:	75 2d                	jne    51a <printf+0xa7>
-        printint(fd, *ap, 10, 1);
- 4ed:	8b 45 e8             	mov    -0x18(%ebp),%eax
- 4f0:	8b 00                	mov    (%eax),%eax
- 4f2:	c7 44 24 0c 01 00 00 	movl   $0x1,0xc(%esp)
- 4f9:	00 
- 4fa:	c7 44 24 08 0a 00 00 	movl   $0xa,0x8(%esp)
- 501:	00 
- 502:	89 44 24 04          	mov    %eax,0x4(%esp)
- 506:	8b 45 08             	mov    0x8(%ebp),%eax
- 509:	89 04 24             	mov    %eax,(%esp)
- 50c:	e8 b3 fe ff ff       	call   3c4 <printint>
-        ap++;
- 511:	83 45 e8 04          	addl   $0x4,-0x18(%ebp)
- 515:	e9 ed 00 00 00       	jmp    607 <printf+0x194>
-      } else if(c == 'x' || c == 'p'){
- 51a:	83 7d e4 78          	cmpl   $0x78,-0x1c(%ebp)
- 51e:	74 06                	je     526 <printf+0xb3>
- 520:	83 7d e4 70          	cmpl   $0x70,-0x1c(%ebp)
- 524:	75 2d                	jne    553 <printf+0xe0>
-        printint(fd, *ap, 16, 0);
- 526:	8b 45 e8             	mov    -0x18(%ebp),%eax
- 529:	8b 00                	mov    (%eax),%eax
- 52b:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
- 532:	00 
- 533:	c7 44 24 08 10 00 00 	movl   $0x10,0x8(%esp)
- 53a:	00 
- 53b:	89 44 24 04          	mov    %eax,0x4(%esp)
- 53f:	8b 45 08             	mov    0x8(%ebp),%eax
- 542:	89 04 24             	mov    %eax,(%esp)
- 545:	e8 7a fe ff ff       	call   3c4 <printint>
-        ap++;
- 54a:	83 45 e8 04          	addl   $0x4,-0x18(%ebp)
- 54e:	e9 b4 00 00 00       	jmp    607 <printf+0x194>
-      } else if(c == 's'){
- 553:	83 7d e4 73          	cmpl   $0x73,-0x1c(%ebp)
- 557:	75 46                	jne    59f <printf+0x12c>
-        s = (char*)*ap;
- 559:	8b 45 e8             	mov    -0x18(%ebp),%eax
- 55c:	8b 00                	mov    (%eax),%eax
- 55e:	89 45 f4             	mov    %eax,-0xc(%ebp)
-        ap++;
- 561:	83 45 e8 04          	addl   $0x4,-0x18(%ebp)
-        if(s == 0)
- 565:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
- 569:	75 27                	jne    592 <printf+0x11f>
-          s = "(null)";
- 56b:	c7 45 f4 4b 08 00 00 	movl   $0x84b,-0xc(%ebp)
-        while(*s != 0){
- 572:	eb 1e                	jmp    592 <printf+0x11f>
-          putc(fd, *s);
- 574:	8b 45 f4             	mov    -0xc(%ebp),%eax
- 577:	0f b6 00             	movzbl (%eax),%eax
- 57a:	0f be c0             	movsbl %al,%eax
- 57d:	89 44 24 04          	mov    %eax,0x4(%esp)
- 581:	8b 45 08             	mov    0x8(%ebp),%eax
- 584:	89 04 24             	mov    %eax,(%esp)
- 587:	e8 10 fe ff ff       	call   39c <putc>
-          s++;
- 58c:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
- 590:	eb 01                	jmp    593 <printf+0x120>
-      } else if(c == 's'){
-        s = (char*)*ap;
-        ap++;
-        if(s == 0)
-          s = "(null)";
-        while(*s != 0){
- 592:	90                   	nop
- 593:	8b 45 f4             	mov    -0xc(%ebp),%eax
- 596:	0f b6 00             	movzbl (%eax),%eax
- 599:	84 c0                	test   %al,%al
- 59b:	75 d7                	jne    574 <printf+0x101>
- 59d:	eb 68                	jmp    607 <printf+0x194>
-          putc(fd, *s);
-          s++;
-        }
-      } else if(c == 'c'){
- 59f:	83 7d e4 63          	cmpl   $0x63,-0x1c(%ebp)
- 5a3:	75 1d                	jne    5c2 <printf+0x14f>
-        putc(fd, *ap);
- 5a5:	8b 45 e8             	mov    -0x18(%ebp),%eax
- 5a8:	8b 00                	mov    (%eax),%eax
- 5aa:	0f be c0             	movsbl %al,%eax
- 5ad:	89 44 24 04          	mov    %eax,0x4(%esp)
- 5b1:	8b 45 08             	mov    0x8(%ebp),%eax
- 5b4:	89 04 24             	mov    %eax,(%esp)
- 5b7:	e8 e0 fd ff ff       	call   39c <putc>
-        ap++;
- 5bc:	83 45 e8 04          	addl   $0x4,-0x18(%ebp)
- 5c0:	eb 45                	jmp    607 <printf+0x194>
-      } else if(c == '%'){
- 5c2:	83 7d e4 25          	cmpl   $0x25,-0x1c(%ebp)
- 5c6:	75 17                	jne    5df <printf+0x16c>
-        putc(fd, c);
- 5c8:	8b 45 e4             	mov    -0x1c(%ebp),%eax
- 5cb:	0f be c0             	movsbl %al,%eax
- 5ce:	89 44 24 04          	mov    %eax,0x4(%esp)
- 5d2:	8b 45 08             	mov    0x8(%ebp),%eax
- 5d5:	89 04 24             	mov    %eax,(%esp)
- 5d8:	e8 bf fd ff ff       	call   39c <putc>
- 5dd:	eb 28                	jmp    607 <printf+0x194>
-      } else {
-        // Unknown % sequence.  Print it to draw attention.
-        putc(fd, '%');
- 5df:	c7 44 24 04 25 00 00 	movl   $0x25,0x4(%esp)
- 5e6:	00 
- 5e7:	8b 45 08             	mov    0x8(%ebp),%eax
- 5ea:	89 04 24             	mov    %eax,(%esp)
- 5ed:	e8 aa fd ff ff       	call   39c <putc>
-        putc(fd, c);
- 5f2:	8b 45 e4             	mov    -0x1c(%ebp),%eax
- 5f5:	0f be c0             	movsbl %al,%eax
- 5f8:	89 44 24 04          	mov    %eax,0x4(%esp)
- 5fc:	8b 45 08             	mov    0x8(%ebp),%eax
- 5ff:	89 04 24             	mov    %eax,(%esp)
- 602:	e8 95 fd ff ff       	call   39c <putc>
-      }
-      state = 0;
- 607:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
-  int c, i, state;
-  uint *ap;
-
-  state = 0;
-  ap = (uint*)(void*)&fmt + 1;
-  for(i = 0; fmt[i]; i++){
- 60e:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)
- 612:	8b 55 0c             	mov    0xc(%ebp),%edx
- 615:	8b 45 f0             	mov    -0x10(%ebp),%eax
- 618:	01 d0                	add    %edx,%eax
- 61a:	0f b6 00             	movzbl (%eax),%eax
- 61d:	84 c0                	test   %al,%al
- 61f:	0f 85 70 fe ff ff    	jne    495 <printf+0x22>
-        putc(fd, c);
-      }
-      state = 0;
-    }
-  }
-}
- 625:	c9                   	leave  
- 626:	c3                   	ret    
- 627:	90                   	nop
-
-00000628 <free>:
-static Header base;
-static Header *freep;
-
-void
-free(void *ap)
-{
- 628:	55                   	push   %ebp
- 629:	89 e5                	mov    %esp,%ebp
- 62b:	83 ec 10             	sub    $0x10,%esp
-  Header *bp, *p;
-
-  bp = (Header*)ap - 1;
- 62e:	8b 45 08             	mov    0x8(%ebp),%eax
- 631:	83 e8 08             	sub    $0x8,%eax
- 634:	89 45 f8             	mov    %eax,-0x8(%ebp)
-  for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
- 637:	a1 ac 0a 00 00       	mov    0xaac,%eax
- 63c:	89 45 fc             	mov    %eax,-0x4(%ebp)
- 63f:	eb 24                	jmp    665 <free+0x3d>
-    if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
- 641:	8b 45 fc             	mov    -0x4(%ebp),%eax
- 644:	8b 00                	mov    (%eax),%eax
- 646:	3b 45 fc             	cmp    -0x4(%ebp),%eax
- 649:	77 12                	ja     65d <free+0x35>
- 64b:	8b 45 f8             	mov    -0x8(%ebp),%eax
- 64e:	3b 45 fc             	cmp    -0x4(%ebp),%eax
- 651:	77 24                	ja     677 <free+0x4f>
- 653:	8b 45 fc             	mov    -0x4(%ebp),%eax
- 656:	8b 00                	mov    (%eax),%eax
- 658:	3b 45 f8             	cmp    -0x8(%ebp),%eax
- 65b:	77 1a                	ja     677 <free+0x4f>
-free(void *ap)
-{
-  Header *bp, *p;
-
-  bp = (Header*)ap - 1;
-  for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
- 65d:	8b 45 fc             	mov    -0x4(%ebp),%eax
- 660:	8b 00                	mov    (%eax),%eax
- 662:	89 45 fc             	mov    %eax,-0x4(%ebp)
- 665:	8b 45 f8             	mov    -0x8(%ebp),%eax
- 668:	3b 45 fc             	cmp    -0x4(%ebp),%eax
- 66b:	76 d4                	jbe    641 <free+0x19>
- 66d:	8b 45 fc             	mov    -0x4(%ebp),%eax
- 670:	8b 00                	mov    (%eax),%eax
- 672:	3b 45 f8             	cmp    -0x8(%ebp),%eax
- 675:	76 ca                	jbe    641 <free+0x19>
-    if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
-      break;
-  if(bp + bp->s.size == p->s.ptr){
- 677:	8b 45 f8             	mov    -0x8(%ebp),%eax
- 67a:	8b 40 04             	mov    0x4(%eax),%eax
- 67d:	c1 e0 03             	shl    $0x3,%eax
- 680:	89 c2                	mov    %eax,%edx
- 682:	03 55 f8             	add    -0x8(%ebp),%edx
- 685:	8b 45 fc             	mov    -0x4(%ebp),%eax
- 688:	8b 00                	mov    (%eax),%eax
- 68a:	39 c2                	cmp    %eax,%edx
- 68c:	75 24                	jne    6b2 <free+0x8a>
-    bp->s.size += p->s.ptr->s.size;
- 68e:	8b 45 f8             	mov    -0x8(%ebp),%eax
- 691:	8b 50 04             	mov    0x4(%eax),%edx
- 694:	8b 45 fc             	mov    -0x4(%ebp),%eax
- 697:	8b 00                	mov    (%eax),%eax
- 699:	8b 40 04             	mov    0x4(%eax),%eax
- 69c:	01 c2                	add    %eax,%edx
- 69e:	8b 45 f8             	mov    -0x8(%ebp),%eax
- 6a1:	89 50 04             	mov    %edx,0x4(%eax)
-    bp->s.ptr = p->s.ptr->s.ptr;
- 6a4:	8b 45 fc             	mov    -0x4(%ebp),%eax
- 6a7:	8b 00                	mov    (%eax),%eax
- 6a9:	8b 10                	mov    (%eax),%edx
- 6ab:	8b 45 f8             	mov    -0x8(%ebp),%eax
- 6ae:	89 10                	mov    %edx,(%eax)
- 6b0:	eb 0a                	jmp    6bc <free+0x94>
-  } else
-    bp->s.ptr = p->s.ptr;
- 6b2:	8b 45 fc             	mov    -0x4(%ebp),%eax
- 6b5:	8b 10                	mov    (%eax),%edx
- 6b7:	8b 45 f8             	mov    -0x8(%ebp),%eax
- 6ba:	89 10                	mov    %edx,(%eax)
-  if(p + p->s.size == bp){
- 6bc:	8b 45 fc             	mov    -0x4(%ebp),%eax
- 6bf:	8b 40 04             	mov    0x4(%eax),%eax
- 6c2:	c1 e0 03             	shl    $0x3,%eax
- 6c5:	03 45 fc             	add    -0x4(%ebp),%eax
- 6c8:	3b 45 f8             	cmp    -0x8(%ebp),%eax
- 6cb:	75 20                	jne    6ed <free+0xc5>
-    p->s.size += bp->s.size;
- 6cd:	8b 45 fc             	mov    -0x4(%ebp),%eax
- 6d0:	8b 50 04             	mov    0x4(%eax),%edx
- 6d3:	8b 45 f8             	mov    -0x8(%ebp),%eax
- 6d6:	8b 40 04             	mov    0x4(%eax),%eax
- 6d9:	01 c2                	add    %eax,%edx
- 6db:	8b 45 fc             	mov    -0x4(%ebp),%eax
- 6de:	89 50 04             	mov    %edx,0x4(%eax)
-    p->s.ptr = bp->s.ptr;
- 6e1:	8b 45 f8             	mov    -0x8(%ebp),%eax
- 6e4:	8b 10                	mov    (%eax),%edx
- 6e6:	8b 45 fc             	mov    -0x4(%ebp),%eax
- 6e9:	89 10                	mov    %edx,(%eax)
- 6eb:	eb 08                	jmp    6f5 <free+0xcd>
-  } else
-    p->s.ptr = bp;
- 6ed:	8b 45 fc             	mov    -0x4(%ebp),%eax
- 6f0:	8b 55 f8             	mov    -0x8(%ebp),%edx
- 6f3:	89 10                	mov    %edx,(%eax)
-  freep = p;
- 6f5:	8b 45 fc             	mov    -0x4(%ebp),%eax
- 6f8:	a3 ac 0a 00 00       	mov    %eax,0xaac
-}
- 6fd:	c9                   	leave  
- 6fe:	c3                   	ret    
-
-000006ff <morecore>:
-
-static Header*
-morecore(uint nu)
-{
- 6ff:	55                   	push   %ebp
- 700:	89 e5                	mov    %esp,%ebp
- 702:	83 ec 28             	sub    $0x28,%esp
-  char *p;
-  Header *hp;
-
-  if(nu < 4096)
- 705:	81 7d 08 ff 0f 00 00 	cmpl   $0xfff,0x8(%ebp)
- 70c:	77 07                	ja     715 <morecore+0x16>
-    nu = 4096;
- 70e:	c7 45 08 00 10 00 00 	movl   $0x1000,0x8(%ebp)
-  p = sbrk(nu * sizeof(Header));
- 715:	8b 45 08             	mov    0x8(%ebp),%eax
- 718:	c1 e0 03             	shl    $0x3,%eax
- 71b:	89 04 24             	mov    %eax,(%esp)
- 71e:	e8 39 fc ff ff       	call   35c <sbrk>
- 723:	89 45 f4             	mov    %eax,-0xc(%ebp)
-  if(p == (char*)-1)
- 726:	83 7d f4 ff          	cmpl   $0xffffffff,-0xc(%ebp)
- 72a:	75 07                	jne    733 <morecore+0x34>
-    return 0;
- 72c:	b8 00 00 00 00       	mov    $0x0,%eax
- 731:	eb 22                	jmp    755 <morecore+0x56>
-  hp = (Header*)p;
- 733:	8b 45 f4             	mov    -0xc(%ebp),%eax
- 736:	89 45 f0             	mov    %eax,-0x10(%ebp)
-  hp->s.size = nu;
- 739:	8b 45 f0             	mov    -0x10(%ebp),%eax
- 73c:	8b 55 08             	mov    0x8(%ebp),%edx
- 73f:	89 50 04             	mov    %edx,0x4(%eax)
-  free((void*)(hp + 1));
- 742:	8b 45 f0             	mov    -0x10(%ebp),%eax
- 745:	83 c0 08             	add    $0x8,%eax
- 748:	89 04 24             	mov    %eax,(%esp)
- 74b:	e8 d8 fe ff ff       	call   628 <free>
-  return freep;
- 750:	a1 ac 0a 00 00       	mov    0xaac,%eax
-}
- 755:	c9                   	leave  
- 756:	c3                   	ret    
-
-00000757 <malloc>:
-
-void*
-malloc(uint nbytes)
-{
- 757:	55                   	push   %ebp
- 758:	89 e5                	mov    %esp,%ebp
- 75a:	83 ec 28             	sub    $0x28,%esp
-  Header *p, *prevp;
-  uint nunits;
-
-  nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;
- 75d:	8b 45 08             	mov    0x8(%ebp),%eax
- 760:	83 c0 07             	add    $0x7,%eax
- 763:	c1 e8 03             	shr    $0x3,%eax
- 766:	83 c0 01             	add    $0x1,%eax
- 769:	89 45 ec             	mov    %eax,-0x14(%ebp)
-  if((prevp = freep) == 0){
- 76c:	a1 ac 0a 00 00       	mov    0xaac,%eax
- 771:	89 45 f0             	mov    %eax,-0x10(%ebp)
- 774:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
- 778:	75 23                	jne    79d <malloc+0x46>
-    base.s.ptr = freep = prevp = &base;
- 77a:	c7 45 f0 a4 0a 00 00 	movl   $0xaa4,-0x10(%ebp)
- 781:	8b 45 f0             	mov    -0x10(%ebp),%eax
- 784:	a3 ac 0a 00 00       	mov    %eax,0xaac
- 789:	a1 ac 0a 00 00       	mov    0xaac,%eax
- 78e:	a3 a4 0a 00 00       	mov    %eax,0xaa4
-    base.s.size = 0;
- 793:	c7 05 a8 0a 00 00 00 	movl   $0x0,0xaa8
- 79a:	00 00 00 
-  }
-  for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
- 79d:	8b 45 f0             	mov    -0x10(%ebp),%eax
- 7a0:	8b 00                	mov    (%eax),%eax
- 7a2:	89 45 f4             	mov    %eax,-0xc(%ebp)
-    if(p->s.size >= nunits){
- 7a5:	8b 45 f4             	mov    -0xc(%ebp),%eax
- 7a8:	8b 40 04             	mov    0x4(%eax),%eax
- 7ab:	3b 45 ec             	cmp    -0x14(%ebp),%eax
- 7ae:	72 4d                	jb     7fd <malloc+0xa6>
-      if(p->s.size == nunits)
- 7b0:	8b 45 f4             	mov    -0xc(%ebp),%eax
- 7b3:	8b 40 04             	mov    0x4(%eax),%eax
- 7b6:	3b 45 ec             	cmp    -0x14(%ebp),%eax
- 7b9:	75 0c                	jne    7c7 <malloc+0x70>
-        prevp->s.ptr = p->s.ptr;
- 7bb:	8b 45 f4             	mov    -0xc(%ebp),%eax
- 7be:	8b 10                	mov    (%eax),%edx
- 7c0:	8b 45 f0             	mov    -0x10(%ebp),%eax
- 7c3:	89 10                	mov    %edx,(%eax)
- 7c5:	eb 26                	jmp    7ed <malloc+0x96>
-      else {
-        p->s.size -= nunits;
- 7c7:	8b 45 f4             	mov    -0xc(%ebp),%eax
- 7ca:	8b 40 04             	mov    0x4(%eax),%eax
- 7cd:	89 c2                	mov    %eax,%edx
- 7cf:	2b 55 ec             	sub    -0x14(%ebp),%edx
- 7d2:	8b 45 f4             	mov    -0xc(%ebp),%eax
- 7d5:	89 50 04             	mov    %edx,0x4(%eax)
-        p += p->s.size;
- 7d8:	8b 45 f4             	mov    -0xc(%ebp),%eax
- 7db:	8b 40 04             	mov    0x4(%eax),%eax
- 7de:	c1 e0 03             	shl    $0x3,%eax
- 7e1:	01 45 f4             	add    %eax,-0xc(%ebp)
-        p->s.size = nunits;
- 7e4:	8b 45 f4             	mov    -0xc(%ebp),%eax
- 7e7:	8b 55 ec             	mov    -0x14(%ebp),%edx
- 7ea:	89 50 04             	mov    %edx,0x4(%eax)
-      }
-      freep = prevp;
- 7ed:	8b 45 f0             	mov    -0x10(%ebp),%eax
- 7f0:	a3 ac 0a 00 00       	mov    %eax,0xaac
-      return (void*)(p + 1);
- 7f5:	8b 45 f4             	mov    -0xc(%ebp),%eax
- 7f8:	83 c0 08             	add    $0x8,%eax
- 7fb:	eb 38                	jmp    835 <malloc+0xde>
-    }
-    if(p == freep)
- 7fd:	a1 ac 0a 00 00       	mov    0xaac,%eax
- 802:	39 45 f4             	cmp    %eax,-0xc(%ebp)
- 805:	75 1b                	jne    822 <malloc+0xcb>
-      if((p = morecore(nunits)) == 0)
- 807:	8b 45 ec             	mov    -0x14(%ebp),%eax
- 80a:	89 04 24             	mov    %eax,(%esp)
- 80d:	e8 ed fe ff ff       	call   6ff <morecore>
- 812:	89 45 f4             	mov    %eax,-0xc(%ebp)
- 815:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
- 819:	75 07                	jne    822 <malloc+0xcb>
-        return 0;
- 81b:	b8 00 00 00 00       	mov    $0x0,%eax
- 820:	eb 13                	jmp    835 <malloc+0xde>
-  nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;
-  if((prevp = freep) == 0){
-    base.s.ptr = freep = prevp = &base;
-    base.s.size = 0;
-  }
-  for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
- 822:	8b 45 f4             	mov    -0xc(%ebp),%eax
- 825:	89 45 f0             	mov    %eax,-0x10(%ebp)
- 828:	8b 45 f4             	mov    -0xc(%ebp),%eax
- 82b:	8b 00                	mov    (%eax),%eax
- 82d:	89 45 f4             	mov    %eax,-0xc(%ebp)
-      return (void*)(p + 1);
-    }
-    if(p == freep)
-      if((p = morecore(nunits)) == 0)
-        return 0;
-  }
- 830:	e9 70 ff ff ff       	jmp    7a5 <malloc+0x4e>
-}
- 835:	c9                   	leave  
- 836:	c3                   	ret    
diff --git a/xv6/kill.c b/xv6/kill.c
deleted file mode 100644
index 51847be..0000000
--- a/xv6/kill.c
+++ /dev/null
@@ -1,17 +0,0 @@
-#include "types.h"
-#include "stat.h"
-#include "user.h"
-
-int
-main(int argc, char **argv)
-{
-  int i;
-
-  if(argc < 1){
-    printf(2, "usage: kill pid...\n");
-    exit(EXIT_STATUS_DEFAULT);
-  }
-  for(i=1; i<argc; i++)
-    kill(atoi(argv[i]));
-  exit(EXIT_STATUS_DEFAULT);
-}
diff --git a/xv6/kill.d b/xv6/kill.d
deleted file mode 100644
index f52b013..0000000
--- a/xv6/kill.d
+++ /dev/null
@@ -1 +0,0 @@
-kill.o: kill.c types.h stat.h user.h
diff --git a/xv6/kill.sym b/xv6/kill.sym
deleted file mode 100644
index 973effb..0000000
--- a/xv6/kill.sym
+++ /dev/null
@@ -1,65 +0,0 @@
-00000000 .text
-00000837 .rodata
-00000854 .eh_frame
-00000a90 .data
-00000aa4 .bss
-00000000 .comment
-00000000 .debug_aranges
-00000000 .debug_info
-00000000 .debug_abbrev
-00000000 .debug_line
-00000000 .debug_str
-00000000 .debug_loc
-00000000 kill.c
-00000000 ulib.c
-00000070 stosb
-00000000 printf.c
-0000039c putc
-000003c4 printint
-00000a90 digits.923
-00000000 umalloc.c
-00000aa4 base
-00000aac freep
-000006ff morecore
-00000095 strcpy
-00000374 waitpid
-00000473 printf
-0000028e memmove
-0000031c mknod
-0000038c foreground
-00000186 gets
-00000354 getpid
-00000757 malloc
-00000364 sleep
-00000394 set_priority
-0000037c wait_stat
-000002e4 pipe
-000002f4 write
-0000032c fstat
-00000304 kill
-00000344 chdir
-0000030c exec
-000002dc wait
-000002ec read
-00000324 unlink
-000002cc fork
-0000035c sbrk
-0000036c uptime
-00000aa4 __bss_start
-0000012f memset
-00000000 main
-000000c9 strcmp
-0000034c dup
-00000384 list_pgroup
-000001f5 stat
-00000aa4 _edata
-00000ab0 _end
-00000334 link
-000002d4 exit
-00000243 atoi
-0000010a strlen
-00000314 open
-00000153 strchr
-0000033c mkdir
-000002fc close
-00000628 free
diff --git a/xv6/lapic.c b/xv6/lapic.c
deleted file mode 100644
index 4da4214..0000000
--- a/xv6/lapic.c
+++ /dev/null
@@ -1,237 +0,0 @@
-// The local APIC manages internal (non-I/O) interrupts.
-// See Chapter 8 & Appendix C of Intel processor manual volume 3.
-
-#include "types.h"
-#include "defs.h"
-#include "date.h"
-#include "memlayout.h"
-#include "traps.h"
-#include "mmu.h"
-#include "x86.h"
-
-// Local APIC registers, divided by 4 for use as uint[] indices.
-#define ID      (0x0020/4)   // ID
-#define VER     (0x0030/4)   // Version
-#define TPR     (0x0080/4)   // Task Priority
-#define EOI     (0x00B0/4)   // EOI
-#define SVR     (0x00F0/4)   // Spurious Interrupt Vector
-  #define ENABLE     0x00000100   // Unit Enable
-#define ESR     (0x0280/4)   // Error Status
-#define ICRLO   (0x0300/4)   // Interrupt Command
-  #define INIT       0x00000500   // INIT/RESET
-  #define STARTUP    0x00000600   // Startup IPI
-  #define DELIVS     0x00001000   // Delivery status
-  #define ASSERT     0x00004000   // Assert interrupt (vs deassert)
-  #define DEASSERT   0x00000000
-  #define LEVEL      0x00008000   // Level triggered
-  #define BCAST      0x00080000   // Send to all APICs, including self.
-  #define BUSY       0x00001000
-  #define FIXED      0x00000000
-#define ICRHI   (0x0310/4)   // Interrupt Command [63:32]
-#define TIMER   (0x0320/4)   // Local Vector Table 0 (TIMER)
-  #define X1         0x0000000B   // divide counts by 1
-  #define PERIODIC   0x00020000   // Periodic
-#define PCINT   (0x0340/4)   // Performance Counter LVT
-#define LINT0   (0x0350/4)   // Local Vector Table 1 (LINT0)
-#define LINT1   (0x0360/4)   // Local Vector Table 2 (LINT1)
-#define ERROR   (0x0370/4)   // Local Vector Table 3 (ERROR)
-  #define MASKED     0x00010000   // Interrupt masked
-#define TICR    (0x0380/4)   // Timer Initial Count
-#define TCCR    (0x0390/4)   // Timer Current Count
-#define TDCR    (0x03E0/4)   // Timer Divide Configuration
-
-volatile uint *lapic;  // Initialized in mp.c
-
-static void
-lapicw(int index, int value)
-{
-  lapic[index] = value;
-  lapic[ID];  // wait for write to finish, by reading
-}
-//PAGEBREAK!
-
-void
-lapicinit(void)
-{
-  if(!lapic) 
-    return;
-
-  // Enable local APIC; set spurious interrupt vector.
-  lapicw(SVR, ENABLE | (T_IRQ0 + IRQ_SPURIOUS));
-
-  // The timer repeatedly counts down at bus frequency
-  // from lapic[TICR] and then issues an interrupt.  
-  // If xv6 cared more about precise timekeeping,
-  // TICR would be calibrated using an external time source.
-  lapicw(TDCR, X1);
-  lapicw(TIMER, PERIODIC | (T_IRQ0 + IRQ_TIMER));
-  lapicw(TICR, 10000000); 
-
-  // Disable logical interrupt lines.
-  lapicw(LINT0, MASKED);
-  lapicw(LINT1, MASKED);
-
-  // Disable performance counter overflow interrupts
-  // on machines that provide that interrupt entry.
-  if(((lapic[VER]>>16) & 0xFF) >= 4)
-    lapicw(PCINT, MASKED);
-
-  // Map error interrupt to IRQ_ERROR.
-  lapicw(ERROR, T_IRQ0 + IRQ_ERROR);
-
-  // Clear error status register (requires back-to-back writes).
-  lapicw(ESR, 0);
-  lapicw(ESR, 0);
-
-  // Ack any outstanding interrupts.
-  lapicw(EOI, 0);
-
-  // Send an Init Level De-Assert to synchronise arbitration ID's.
-  lapicw(ICRHI, 0);
-  lapicw(ICRLO, BCAST | INIT | LEVEL);
-  while(lapic[ICRLO] & DELIVS)
-    ;
-
-  // Enable interrupts on the APIC (but not on the processor).
-  lapicw(TPR, 0);
-}
-
-int
-cpunum(void)
-{
-  // Cannot call cpu when interrupts are enabled:
-  // result not guaranteed to last long enough to be used!
-  // Would prefer to panic but even printing is chancy here:
-  // almost everything, including cprintf and panic, calls cpu,
-  // often indirectly through acquire and release.
-  if(readeflags()&FL_IF){
-    static int n;
-    if(n++ == 0)
-      cprintf("cpu called from %x with interrupts enabled\n",
-        __builtin_return_address(0));
-  }
-
-  if(lapic)
-    return lapic[ID]>>24;
-  return 0;
-}
-
-// Acknowledge interrupt.
-void
-lapiceoi(void)
-{
-  if(lapic)
-    lapicw(EOI, 0);
-}
-
-// Spin for a given number of microseconds.
-// On real hardware would want to tune this dynamically.
-void
-microdelay(int us)
-{
-}
-
-#define CMOS_PORT    0x70
-#define CMOS_RETURN  0x71
-
-// Start additional processor running entry code at addr.
-// See Appendix B of MultiProcessor Specification.
-void
-lapicstartap(uchar apicid, uint addr)
-{
-  int i;
-  ushort *wrv;
-  
-  // "The BSP must initialize CMOS shutdown code to 0AH
-  // and the warm reset vector (DWORD based at 40:67) to point at
-  // the AP startup code prior to the [universal startup algorithm]."
-  outb(CMOS_PORT, 0xF);  // offset 0xF is shutdown code
-  outb(CMOS_PORT+1, 0x0A);
-  wrv = (ushort*)P2V((0x40<<4 | 0x67));  // Warm reset vector
-  wrv[0] = 0;
-  wrv[1] = addr >> 4;
-
-  // "Universal startup algorithm."
-  // Send INIT (level-triggered) interrupt to reset other CPU.
-  lapicw(ICRHI, apicid<<24);
-  lapicw(ICRLO, INIT | LEVEL | ASSERT);
-  microdelay(200);
-  lapicw(ICRLO, INIT | LEVEL);
-  microdelay(100);    // should be 10ms, but too slow in Bochs!
-  
-  // Send startup IPI (twice!) to enter code.
-  // Regular hardware is supposed to only accept a STARTUP
-  // when it is in the halted state due to an INIT.  So the second
-  // should be ignored, but it is part of the official Intel algorithm.
-  // Bochs complains about the second one.  Too bad for Bochs.
-  for(i = 0; i < 2; i++){
-    lapicw(ICRHI, apicid<<24);
-    lapicw(ICRLO, STARTUP | (addr>>12));
-    microdelay(200);
-  }
-}
-
-#define CMOS_STATA   0x0a
-#define CMOS_STATB   0x0b
-#define CMOS_UIP    (1 << 7)        // RTC update in progress
-
-#define SECS    0x00
-#define MINS    0x02
-#define HOURS   0x04
-#define DAY     0x07
-#define MONTH   0x08
-#define YEAR    0x09
-
-static uint cmos_read(uint reg)
-{
-  outb(CMOS_PORT,  reg);
-  microdelay(200);
-
-  return inb(CMOS_RETURN);
-}
-
-static void fill_rtcdate(struct rtcdate *r)
-{
-  r->second = cmos_read(SECS);
-  r->minute = cmos_read(MINS);
-  r->hour   = cmos_read(HOURS);
-  r->day    = cmos_read(DAY);
-  r->month  = cmos_read(MONTH);
-  r->year   = cmos_read(YEAR);
-}
-
-// qemu seems to use 24-hour GWT and the values are BCD encoded
-void cmostime(struct rtcdate *r)
-{
-  struct rtcdate t1, t2;
-  int sb, bcd;
-
-  sb = cmos_read(CMOS_STATB);
-
-  bcd = (sb & (1 << 2)) == 0;
-
-  // make sure CMOS doesn't modify time while we read it
-  for (;;) {
-    fill_rtcdate(&t1);
-    if (cmos_read(CMOS_STATA) & CMOS_UIP)
-        continue;
-    fill_rtcdate(&t2);
-    if (memcmp(&t1, &t2, sizeof(t1)) == 0)
-      break;
-  }
-
-  // convert
-  if (bcd) {
-#define    CONV(x)     (t1.x = ((t1.x >> 4) * 10) + (t1.x & 0xf))
-    CONV(second);
-    CONV(minute);
-    CONV(hour  );
-    CONV(day   );
-    CONV(month );
-    CONV(year  );
-#undef     CONV
-  }
-
-  *r = t1;
-  r->year += 2000;
-}
diff --git a/xv6/lapic.d b/xv6/lapic.d
deleted file mode 100644
index de113e6..0000000
--- a/xv6/lapic.d
+++ /dev/null
@@ -1 +0,0 @@
-lapic.o: lapic.c types.h defs.h date.h memlayout.h traps.h mmu.h x86.h
diff --git a/xv6/linkedList.c b/xv6/linkedList.c
deleted file mode 100644
index 80b9789..0000000
--- a/xv6/linkedList.c
+++ /dev/null
@@ -1,160 +0,0 @@
-#include "linkedList.h"
-#include "types.h"
-#include "defs.h"
-
-struct node* create_link(linkedList* list){
-	int i;
-	for (i = 0; i < LINKED_LIST_SIZE; i++) {
-		if(!list->nodes[i].used){
-			list->nodes[i].used = 1;
-			return &list->nodes[i];
-		}
-	}
-
-	//error not found
-	cprintf("Error: linkedlist: cant create new link, list at full capacity!\n");
-	return 0;
-}
-
-void clean_up(struct node* link){
-	link->id = 0;
-	link->data = 0;
-	link->next = 0;
-	link->prev = 0;
-	link->used = 0;
-}
-
-void add_last(linkedList* list, node* link){
-	if(list->head == 0){
-		list->head = link;
-		list->tail = link;
-		list->size++;
-	}
-	else{
-		link->prev = list->tail;
-		list->tail->next = link;
-		list->tail = link;
-		list->size++;
-	}
-}
-
-void add(struct linkedList* list, int id, struct proc* p){
-//	if( search(list,id) != 0 ) return; //add unique
-
-	//cprintf("(+%d)", id);
-	node* node;
-	node = create_link(list);
-	node->id = id;
-	node->data = p;
-	list->add_last(list,node);
-	//print(list);
-}
-
-
-struct proc* remove_first(linkedList* list){
-	struct proc* p;
-	node* tmp;
-	if( list->head == 0 ){
-		cprintf("ERROR: list is empty. cant remove 1st link");
-		return 0;
-	}
-	tmp = list->head;
-	//cprintf("(-%d)", tmp->id);
-	p = tmp->data;
-	list->head = list->head->next;
-	tmp->clean_up(tmp);
-	if(list->head != 0){
-		list->head->prev = 0;
-	}
-	list->size--;
-	return p;
-}
-void init_linkedList(linkedList* list,int fixed_size){
-	int i;
-	list->head = 0;
-	list->tail = 0;
-	list->size = 0;
-	list->max_size = fixed_size;
-	list->add_last = add_last;
-	list->add = add;
-	list->remove_first = remove_first;
-	list->print = print;
-	list->get_link = get_link;
-	list->remove_link = remove_link;
-	list->search = search;
-
-	for(i=0; i < fixed_size; i++){
-		list->nodes[i].clean_up = clean_up;
-		list->nodes[i].clean_up(&list->nodes[i]);
-	}
-
-}
-
-void clean_list(linkedList* list){
-	while(list->size > 0){
-		list->remove_first(list);
-	}
-}
-
-void print(linkedList* list){
-	node* link = list->head;
-
-	cprintf("LinkedList content:\n");
-
-	cprintf("HEAD");
-	while(link != 0){
-		cprintf(" => [%d ,0x%x] ",link->id,link->data);
-		link = link->next;
-	}
-	cprintf("<= TAIL \n");
-
-}
-
-node* get_link(linkedList* list,int position){
-	node* link = list->head;
-	while(position > 0 && link != 0){
-		link = link->next;
-		position--;
-	}
-	if(position == 0) return link;
-
-	return 0;
-}
-node* search(linkedList* list, int id){
-	node* p = list->head;
-
-	while(p != 0){
-		if(p->id == id){
-			return p;
-		}
-		p=p->next;
-	}
-	return 0;
-}
-
-
-int remove_link(linkedList* list,int id){
-	node* tmp = search(list,id);
-	cprintf("requested: %d, deleting, found:(%d) %d\n", id, tmp, tmp->id);
-	if(tmp != 0){
-		if(tmp->prev == 0){ /* was head*/
-			list->head = tmp->next;
-		}
-		else{
-			tmp->prev->next = tmp->next;
-			if(tmp->next != 0){
-				tmp->next->prev = tmp->prev;
-			}
-			else{
-				list->tail = tmp->prev;
-			}
-
-
-		}
-		tmp->clean_up(tmp);
-		//list->print(list);
-
-		return 1;
-	}
-	return 0;
-}
diff --git a/xv6/linkedList.d b/xv6/linkedList.d
deleted file mode 100644
index 257321f..0000000
--- a/xv6/linkedList.d
+++ /dev/null
@@ -1 +0,0 @@
-linkedList.o: linkedList.c linkedList.h types.h defs.h
diff --git a/xv6/linkedList.h b/xv6/linkedList.h
deleted file mode 100644
index 523a9c5..0000000
--- a/xv6/linkedList.h
+++ /dev/null
@@ -1,50 +0,0 @@
-#define LINKED_LIST_SIZE 64
-
-typedef struct node
-{
-	int id;
-	struct proc* data;
-    struct node* next;				/* address to next node */
-    struct node* prev;				/* address to prev node */
-    int used;
-    void (*clean_up)(struct node* link);
-} node;
-
-typedef struct linkedList
-{
-	node* head;
-	node* tail;
-	int size;
-	int max_size;
-	struct node nodes[LINKED_LIST_SIZE];
-	void (*add_last)(struct linkedList* list, node* link);
-	void (*add)(struct linkedList* list, int id, struct proc* p);
-	struct proc* (*remove_first)(struct linkedList* list);
-	void (*print)(struct linkedList* list);
-	node* (*get_link)(struct linkedList* list,int position);
-	int (*remove_link)(struct linkedList* list,int id);
-	node* (*search)(struct linkedList* list,int id);
-} linkedList;
-
-
-void add(struct linkedList* list, int id, struct proc* p);
-
-struct node* create_link(linkedList* list);
-
-void add_last(linkedList* list, node* link);
-
-struct proc* remove_first(linkedList* list);
-
-void clean_up(struct node* link);
-
-void init_linkedList(linkedList* list,int fixed_size);
-
-void print(linkedList* list);
-
-node* get_link(linkedList* list,int position);
-
-void clean_up(node* link);
-
-node* search(linkedList* list,int id);
-
-int remove_link(linkedList* list,int id);
diff --git a/xv6/ln.asm b/xv6/ln.asm
deleted file mode 100644
index 6e8085b..0000000
--- a/xv6/ln.asm
+++ /dev/null
@@ -1,1207 +0,0 @@
-
-_ln:     file format elf32-i386
-
-
-Disassembly of section .text:
-
-00000000 <main>:
-#include "stat.h"
-#include "user.h"
-
-int
-main(int argc, char *argv[])
-{
-   0:	55                   	push   %ebp
-   1:	89 e5                	mov    %esp,%ebp
-   3:	83 e4 f0             	and    $0xfffffff0,%esp
-   6:	83 ec 10             	sub    $0x10,%esp
-  if(argc != 3){
-   9:	83 7d 08 03          	cmpl   $0x3,0x8(%ebp)
-   d:	74 20                	je     2f <main+0x2f>
-    printf(2, "Usage: ln old new\n");
-   f:	c7 44 24 04 4f 08 00 	movl   $0x84f,0x4(%esp)
-  16:	00 
-  17:	c7 04 24 02 00 00 00 	movl   $0x2,(%esp)
-  1e:	e8 68 04 00 00       	call   48b <printf>
-    exit(EXIT_STATUS_DEFAULT);
-  23:	c7 04 24 02 00 00 00 	movl   $0x2,(%esp)
-  2a:	e8 bd 02 00 00       	call   2ec <exit>
-  }
-  if(link(argv[1], argv[2]) < 0)
-  2f:	8b 45 0c             	mov    0xc(%ebp),%eax
-  32:	83 c0 08             	add    $0x8,%eax
-  35:	8b 10                	mov    (%eax),%edx
-  37:	8b 45 0c             	mov    0xc(%ebp),%eax
-  3a:	83 c0 04             	add    $0x4,%eax
-  3d:	8b 00                	mov    (%eax),%eax
-  3f:	89 54 24 04          	mov    %edx,0x4(%esp)
-  43:	89 04 24             	mov    %eax,(%esp)
-  46:	e8 01 03 00 00       	call   34c <link>
-  4b:	85 c0                	test   %eax,%eax
-  4d:	79 2c                	jns    7b <main+0x7b>
-    printf(2, "link %s %s: failed\n", argv[1], argv[2]);
-  4f:	8b 45 0c             	mov    0xc(%ebp),%eax
-  52:	83 c0 08             	add    $0x8,%eax
-  55:	8b 10                	mov    (%eax),%edx
-  57:	8b 45 0c             	mov    0xc(%ebp),%eax
-  5a:	83 c0 04             	add    $0x4,%eax
-  5d:	8b 00                	mov    (%eax),%eax
-  5f:	89 54 24 0c          	mov    %edx,0xc(%esp)
-  63:	89 44 24 08          	mov    %eax,0x8(%esp)
-  67:	c7 44 24 04 62 08 00 	movl   $0x862,0x4(%esp)
-  6e:	00 
-  6f:	c7 04 24 02 00 00 00 	movl   $0x2,(%esp)
-  76:	e8 10 04 00 00       	call   48b <printf>
-  exit(EXIT_STATUS_DEFAULT);
-  7b:	c7 04 24 02 00 00 00 	movl   $0x2,(%esp)
-  82:	e8 65 02 00 00       	call   2ec <exit>
-  87:	90                   	nop
-
-00000088 <stosb>:
-               "cc");
-}
-
-static inline void
-stosb(void *addr, int data, int cnt)
-{
-  88:	55                   	push   %ebp
-  89:	89 e5                	mov    %esp,%ebp
-  8b:	57                   	push   %edi
-  8c:	53                   	push   %ebx
-  asm volatile("cld; rep stosb" :
-  8d:	8b 4d 08             	mov    0x8(%ebp),%ecx
-  90:	8b 55 10             	mov    0x10(%ebp),%edx
-  93:	8b 45 0c             	mov    0xc(%ebp),%eax
-  96:	89 cb                	mov    %ecx,%ebx
-  98:	89 df                	mov    %ebx,%edi
-  9a:	89 d1                	mov    %edx,%ecx
-  9c:	fc                   	cld    
-  9d:	f3 aa                	rep stos %al,%es:(%edi)
-  9f:	89 ca                	mov    %ecx,%edx
-  a1:	89 fb                	mov    %edi,%ebx
-  a3:	89 5d 08             	mov    %ebx,0x8(%ebp)
-  a6:	89 55 10             	mov    %edx,0x10(%ebp)
-               "=D" (addr), "=c" (cnt) :
-               "0" (addr), "1" (cnt), "a" (data) :
-               "memory", "cc");
-}
-  a9:	5b                   	pop    %ebx
-  aa:	5f                   	pop    %edi
-  ab:	5d                   	pop    %ebp
-  ac:	c3                   	ret    
-
-000000ad <strcpy>:
-#include "user.h"
-#include "x86.h"
-
-char*
-strcpy(char *s, char *t)
-{
-  ad:	55                   	push   %ebp
-  ae:	89 e5                	mov    %esp,%ebp
-  b0:	83 ec 10             	sub    $0x10,%esp
-  char *os;
-
-  os = s;
-  b3:	8b 45 08             	mov    0x8(%ebp),%eax
-  b6:	89 45 fc             	mov    %eax,-0x4(%ebp)
-  while((*s++ = *t++) != 0)
-  b9:	90                   	nop
-  ba:	8b 45 0c             	mov    0xc(%ebp),%eax
-  bd:	0f b6 10             	movzbl (%eax),%edx
-  c0:	8b 45 08             	mov    0x8(%ebp),%eax
-  c3:	88 10                	mov    %dl,(%eax)
-  c5:	8b 45 08             	mov    0x8(%ebp),%eax
-  c8:	0f b6 00             	movzbl (%eax),%eax
-  cb:	84 c0                	test   %al,%al
-  cd:	0f 95 c0             	setne  %al
-  d0:	83 45 08 01          	addl   $0x1,0x8(%ebp)
-  d4:	83 45 0c 01          	addl   $0x1,0xc(%ebp)
-  d8:	84 c0                	test   %al,%al
-  da:	75 de                	jne    ba <strcpy+0xd>
-    ;
-  return os;
-  dc:	8b 45 fc             	mov    -0x4(%ebp),%eax
-}
-  df:	c9                   	leave  
-  e0:	c3                   	ret    
-
-000000e1 <strcmp>:
-
-int
-strcmp(const char *p, const char *q)
-{
-  e1:	55                   	push   %ebp
-  e2:	89 e5                	mov    %esp,%ebp
-  while(*p && *p == *q)
-  e4:	eb 08                	jmp    ee <strcmp+0xd>
-    p++, q++;
-  e6:	83 45 08 01          	addl   $0x1,0x8(%ebp)
-  ea:	83 45 0c 01          	addl   $0x1,0xc(%ebp)
-}
-
-int
-strcmp(const char *p, const char *q)
-{
-  while(*p && *p == *q)
-  ee:	8b 45 08             	mov    0x8(%ebp),%eax
-  f1:	0f b6 00             	movzbl (%eax),%eax
-  f4:	84 c0                	test   %al,%al
-  f6:	74 10                	je     108 <strcmp+0x27>
-  f8:	8b 45 08             	mov    0x8(%ebp),%eax
-  fb:	0f b6 10             	movzbl (%eax),%edx
-  fe:	8b 45 0c             	mov    0xc(%ebp),%eax
- 101:	0f b6 00             	movzbl (%eax),%eax
- 104:	38 c2                	cmp    %al,%dl
- 106:	74 de                	je     e6 <strcmp+0x5>
-    p++, q++;
-  return (uchar)*p - (uchar)*q;
- 108:	8b 45 08             	mov    0x8(%ebp),%eax
- 10b:	0f b6 00             	movzbl (%eax),%eax
- 10e:	0f b6 d0             	movzbl %al,%edx
- 111:	8b 45 0c             	mov    0xc(%ebp),%eax
- 114:	0f b6 00             	movzbl (%eax),%eax
- 117:	0f b6 c0             	movzbl %al,%eax
- 11a:	89 d1                	mov    %edx,%ecx
- 11c:	29 c1                	sub    %eax,%ecx
- 11e:	89 c8                	mov    %ecx,%eax
-}
- 120:	5d                   	pop    %ebp
- 121:	c3                   	ret    
-
-00000122 <strlen>:
-
-uint
-strlen(char *s)
-{
- 122:	55                   	push   %ebp
- 123:	89 e5                	mov    %esp,%ebp
- 125:	83 ec 10             	sub    $0x10,%esp
-  int n;
-
-  for(n = 0; s[n]; n++)
- 128:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
- 12f:	eb 04                	jmp    135 <strlen+0x13>
- 131:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
- 135:	8b 45 fc             	mov    -0x4(%ebp),%eax
- 138:	03 45 08             	add    0x8(%ebp),%eax
- 13b:	0f b6 00             	movzbl (%eax),%eax
- 13e:	84 c0                	test   %al,%al
- 140:	75 ef                	jne    131 <strlen+0xf>
-    ;
-  return n;
- 142:	8b 45 fc             	mov    -0x4(%ebp),%eax
-}
- 145:	c9                   	leave  
- 146:	c3                   	ret    
-
-00000147 <memset>:
-
-void*
-memset(void *dst, int c, uint n)
-{
- 147:	55                   	push   %ebp
- 148:	89 e5                	mov    %esp,%ebp
- 14a:	83 ec 0c             	sub    $0xc,%esp
-  stosb(dst, c, n);
- 14d:	8b 45 10             	mov    0x10(%ebp),%eax
- 150:	89 44 24 08          	mov    %eax,0x8(%esp)
- 154:	8b 45 0c             	mov    0xc(%ebp),%eax
- 157:	89 44 24 04          	mov    %eax,0x4(%esp)
- 15b:	8b 45 08             	mov    0x8(%ebp),%eax
- 15e:	89 04 24             	mov    %eax,(%esp)
- 161:	e8 22 ff ff ff       	call   88 <stosb>
-  return dst;
- 166:	8b 45 08             	mov    0x8(%ebp),%eax
-}
- 169:	c9                   	leave  
- 16a:	c3                   	ret    
-
-0000016b <strchr>:
-
-char*
-strchr(const char *s, char c)
-{
- 16b:	55                   	push   %ebp
- 16c:	89 e5                	mov    %esp,%ebp
- 16e:	83 ec 04             	sub    $0x4,%esp
- 171:	8b 45 0c             	mov    0xc(%ebp),%eax
- 174:	88 45 fc             	mov    %al,-0x4(%ebp)
-  for(; *s; s++)
- 177:	eb 14                	jmp    18d <strchr+0x22>
-    if(*s == c)
- 179:	8b 45 08             	mov    0x8(%ebp),%eax
- 17c:	0f b6 00             	movzbl (%eax),%eax
- 17f:	3a 45 fc             	cmp    -0x4(%ebp),%al
- 182:	75 05                	jne    189 <strchr+0x1e>
-      return (char*)s;
- 184:	8b 45 08             	mov    0x8(%ebp),%eax
- 187:	eb 13                	jmp    19c <strchr+0x31>
-}
-
-char*
-strchr(const char *s, char c)
-{
-  for(; *s; s++)
- 189:	83 45 08 01          	addl   $0x1,0x8(%ebp)
- 18d:	8b 45 08             	mov    0x8(%ebp),%eax
- 190:	0f b6 00             	movzbl (%eax),%eax
- 193:	84 c0                	test   %al,%al
- 195:	75 e2                	jne    179 <strchr+0xe>
-    if(*s == c)
-      return (char*)s;
-  return 0;
- 197:	b8 00 00 00 00       	mov    $0x0,%eax
-}
- 19c:	c9                   	leave  
- 19d:	c3                   	ret    
-
-0000019e <gets>:
-
-char*
-gets(char *buf, int max)
-{
- 19e:	55                   	push   %ebp
- 19f:	89 e5                	mov    %esp,%ebp
- 1a1:	83 ec 28             	sub    $0x28,%esp
-  int i, cc;
-  char c;
-
-  for(i=0; i+1 < max; ){
- 1a4:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
- 1ab:	eb 44                	jmp    1f1 <gets+0x53>
-    cc = read(0, &c, 1);
- 1ad:	c7 44 24 08 01 00 00 	movl   $0x1,0x8(%esp)
- 1b4:	00 
- 1b5:	8d 45 ef             	lea    -0x11(%ebp),%eax
- 1b8:	89 44 24 04          	mov    %eax,0x4(%esp)
- 1bc:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
- 1c3:	e8 3c 01 00 00       	call   304 <read>
- 1c8:	89 45 f0             	mov    %eax,-0x10(%ebp)
-    if(cc < 1)
- 1cb:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
- 1cf:	7e 2d                	jle    1fe <gets+0x60>
-      break;
-    buf[i++] = c;
- 1d1:	8b 45 f4             	mov    -0xc(%ebp),%eax
- 1d4:	03 45 08             	add    0x8(%ebp),%eax
- 1d7:	0f b6 55 ef          	movzbl -0x11(%ebp),%edx
- 1db:	88 10                	mov    %dl,(%eax)
- 1dd:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
-    if(c == '\n' || c == '\r')
- 1e1:	0f b6 45 ef          	movzbl -0x11(%ebp),%eax
- 1e5:	3c 0a                	cmp    $0xa,%al
- 1e7:	74 16                	je     1ff <gets+0x61>
- 1e9:	0f b6 45 ef          	movzbl -0x11(%ebp),%eax
- 1ed:	3c 0d                	cmp    $0xd,%al
- 1ef:	74 0e                	je     1ff <gets+0x61>
-gets(char *buf, int max)
-{
-  int i, cc;
-  char c;
-
-  for(i=0; i+1 < max; ){
- 1f1:	8b 45 f4             	mov    -0xc(%ebp),%eax
- 1f4:	83 c0 01             	add    $0x1,%eax
- 1f7:	3b 45 0c             	cmp    0xc(%ebp),%eax
- 1fa:	7c b1                	jl     1ad <gets+0xf>
- 1fc:	eb 01                	jmp    1ff <gets+0x61>
-    cc = read(0, &c, 1);
-    if(cc < 1)
-      break;
- 1fe:	90                   	nop
-    buf[i++] = c;
-    if(c == '\n' || c == '\r')
-      break;
-  }
-  buf[i] = '\0';
- 1ff:	8b 45 f4             	mov    -0xc(%ebp),%eax
- 202:	03 45 08             	add    0x8(%ebp),%eax
- 205:	c6 00 00             	movb   $0x0,(%eax)
-  return buf;
- 208:	8b 45 08             	mov    0x8(%ebp),%eax
-}
- 20b:	c9                   	leave  
- 20c:	c3                   	ret    
-
-0000020d <stat>:
-
-int
-stat(char *n, struct stat *st)
-{
- 20d:	55                   	push   %ebp
- 20e:	89 e5                	mov    %esp,%ebp
- 210:	83 ec 28             	sub    $0x28,%esp
-  int fd;
-  int r;
-
-  fd = open(n, O_RDONLY);
- 213:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
- 21a:	00 
- 21b:	8b 45 08             	mov    0x8(%ebp),%eax
- 21e:	89 04 24             	mov    %eax,(%esp)
- 221:	e8 06 01 00 00       	call   32c <open>
- 226:	89 45 f4             	mov    %eax,-0xc(%ebp)
-  if(fd < 0)
- 229:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
- 22d:	79 07                	jns    236 <stat+0x29>
-    return -1;
- 22f:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
- 234:	eb 23                	jmp    259 <stat+0x4c>
-  r = fstat(fd, st);
- 236:	8b 45 0c             	mov    0xc(%ebp),%eax
- 239:	89 44 24 04          	mov    %eax,0x4(%esp)
- 23d:	8b 45 f4             	mov    -0xc(%ebp),%eax
- 240:	89 04 24             	mov    %eax,(%esp)
- 243:	e8 fc 00 00 00       	call   344 <fstat>
- 248:	89 45 f0             	mov    %eax,-0x10(%ebp)
-  close(fd);
- 24b:	8b 45 f4             	mov    -0xc(%ebp),%eax
- 24e:	89 04 24             	mov    %eax,(%esp)
- 251:	e8 be 00 00 00       	call   314 <close>
-  return r;
- 256:	8b 45 f0             	mov    -0x10(%ebp),%eax
-}
- 259:	c9                   	leave  
- 25a:	c3                   	ret    
-
-0000025b <atoi>:
-
-int
-atoi(const char *s)
-{
- 25b:	55                   	push   %ebp
- 25c:	89 e5                	mov    %esp,%ebp
- 25e:	83 ec 10             	sub    $0x10,%esp
-  int n;
-
-  n = 0;
- 261:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
-  while('0' <= *s && *s <= '9')
- 268:	eb 23                	jmp    28d <atoi+0x32>
-    n = n*10 + *s++ - '0';
- 26a:	8b 55 fc             	mov    -0x4(%ebp),%edx
- 26d:	89 d0                	mov    %edx,%eax
- 26f:	c1 e0 02             	shl    $0x2,%eax
- 272:	01 d0                	add    %edx,%eax
- 274:	01 c0                	add    %eax,%eax
- 276:	89 c2                	mov    %eax,%edx
- 278:	8b 45 08             	mov    0x8(%ebp),%eax
- 27b:	0f b6 00             	movzbl (%eax),%eax
- 27e:	0f be c0             	movsbl %al,%eax
- 281:	01 d0                	add    %edx,%eax
- 283:	83 e8 30             	sub    $0x30,%eax
- 286:	89 45 fc             	mov    %eax,-0x4(%ebp)
- 289:	83 45 08 01          	addl   $0x1,0x8(%ebp)
-atoi(const char *s)
-{
-  int n;
-
-  n = 0;
-  while('0' <= *s && *s <= '9')
- 28d:	8b 45 08             	mov    0x8(%ebp),%eax
- 290:	0f b6 00             	movzbl (%eax),%eax
- 293:	3c 2f                	cmp    $0x2f,%al
- 295:	7e 0a                	jle    2a1 <atoi+0x46>
- 297:	8b 45 08             	mov    0x8(%ebp),%eax
- 29a:	0f b6 00             	movzbl (%eax),%eax
- 29d:	3c 39                	cmp    $0x39,%al
- 29f:	7e c9                	jle    26a <atoi+0xf>
-    n = n*10 + *s++ - '0';
-  return n;
- 2a1:	8b 45 fc             	mov    -0x4(%ebp),%eax
-}
- 2a4:	c9                   	leave  
- 2a5:	c3                   	ret    
-
-000002a6 <memmove>:
-
-void*
-memmove(void *vdst, void *vsrc, int n)
-{
- 2a6:	55                   	push   %ebp
- 2a7:	89 e5                	mov    %esp,%ebp
- 2a9:	83 ec 10             	sub    $0x10,%esp
-  char *dst, *src;
-  
-  dst = vdst;
- 2ac:	8b 45 08             	mov    0x8(%ebp),%eax
- 2af:	89 45 fc             	mov    %eax,-0x4(%ebp)
-  src = vsrc;
- 2b2:	8b 45 0c             	mov    0xc(%ebp),%eax
- 2b5:	89 45 f8             	mov    %eax,-0x8(%ebp)
-  while(n-- > 0)
- 2b8:	eb 13                	jmp    2cd <memmove+0x27>
-    *dst++ = *src++;
- 2ba:	8b 45 f8             	mov    -0x8(%ebp),%eax
- 2bd:	0f b6 10             	movzbl (%eax),%edx
- 2c0:	8b 45 fc             	mov    -0x4(%ebp),%eax
- 2c3:	88 10                	mov    %dl,(%eax)
- 2c5:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
- 2c9:	83 45 f8 01          	addl   $0x1,-0x8(%ebp)
-{
-  char *dst, *src;
-  
-  dst = vdst;
-  src = vsrc;
-  while(n-- > 0)
- 2cd:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
- 2d1:	0f 9f c0             	setg   %al
- 2d4:	83 6d 10 01          	subl   $0x1,0x10(%ebp)
- 2d8:	84 c0                	test   %al,%al
- 2da:	75 de                	jne    2ba <memmove+0x14>
-    *dst++ = *src++;
-  return vdst;
- 2dc:	8b 45 08             	mov    0x8(%ebp),%eax
-}
- 2df:	c9                   	leave  
- 2e0:	c3                   	ret    
- 2e1:	90                   	nop
- 2e2:	90                   	nop
- 2e3:	90                   	nop
-
-000002e4 <fork>:
-  name: \
-    movl $SYS_ ## name, %eax; \
-    int $T_SYSCALL; \
-    ret
-
-SYSCALL(fork)
- 2e4:	b8 01 00 00 00       	mov    $0x1,%eax
- 2e9:	cd 40                	int    $0x40
- 2eb:	c3                   	ret    
-
-000002ec <exit>:
-SYSCALL(exit)
- 2ec:	b8 02 00 00 00       	mov    $0x2,%eax
- 2f1:	cd 40                	int    $0x40
- 2f3:	c3                   	ret    
-
-000002f4 <wait>:
-SYSCALL(wait)
- 2f4:	b8 03 00 00 00       	mov    $0x3,%eax
- 2f9:	cd 40                	int    $0x40
- 2fb:	c3                   	ret    
-
-000002fc <pipe>:
-SYSCALL(pipe)
- 2fc:	b8 04 00 00 00       	mov    $0x4,%eax
- 301:	cd 40                	int    $0x40
- 303:	c3                   	ret    
-
-00000304 <read>:
-SYSCALL(read)
- 304:	b8 05 00 00 00       	mov    $0x5,%eax
- 309:	cd 40                	int    $0x40
- 30b:	c3                   	ret    
-
-0000030c <write>:
-SYSCALL(write)
- 30c:	b8 10 00 00 00       	mov    $0x10,%eax
- 311:	cd 40                	int    $0x40
- 313:	c3                   	ret    
-
-00000314 <close>:
-SYSCALL(close)
- 314:	b8 15 00 00 00       	mov    $0x15,%eax
- 319:	cd 40                	int    $0x40
- 31b:	c3                   	ret    
-
-0000031c <kill>:
-SYSCALL(kill)
- 31c:	b8 06 00 00 00       	mov    $0x6,%eax
- 321:	cd 40                	int    $0x40
- 323:	c3                   	ret    
-
-00000324 <exec>:
-SYSCALL(exec)
- 324:	b8 07 00 00 00       	mov    $0x7,%eax
- 329:	cd 40                	int    $0x40
- 32b:	c3                   	ret    
-
-0000032c <open>:
-SYSCALL(open)
- 32c:	b8 0f 00 00 00       	mov    $0xf,%eax
- 331:	cd 40                	int    $0x40
- 333:	c3                   	ret    
-
-00000334 <mknod>:
-SYSCALL(mknod)
- 334:	b8 11 00 00 00       	mov    $0x11,%eax
- 339:	cd 40                	int    $0x40
- 33b:	c3                   	ret    
-
-0000033c <unlink>:
-SYSCALL(unlink)
- 33c:	b8 12 00 00 00       	mov    $0x12,%eax
- 341:	cd 40                	int    $0x40
- 343:	c3                   	ret    
-
-00000344 <fstat>:
-SYSCALL(fstat)
- 344:	b8 08 00 00 00       	mov    $0x8,%eax
- 349:	cd 40                	int    $0x40
- 34b:	c3                   	ret    
-
-0000034c <link>:
-SYSCALL(link)
- 34c:	b8 13 00 00 00       	mov    $0x13,%eax
- 351:	cd 40                	int    $0x40
- 353:	c3                   	ret    
-
-00000354 <mkdir>:
-SYSCALL(mkdir)
- 354:	b8 14 00 00 00       	mov    $0x14,%eax
- 359:	cd 40                	int    $0x40
- 35b:	c3                   	ret    
-
-0000035c <chdir>:
-SYSCALL(chdir)
- 35c:	b8 09 00 00 00       	mov    $0x9,%eax
- 361:	cd 40                	int    $0x40
- 363:	c3                   	ret    
-
-00000364 <dup>:
-SYSCALL(dup)
- 364:	b8 0a 00 00 00       	mov    $0xa,%eax
- 369:	cd 40                	int    $0x40
- 36b:	c3                   	ret    
-
-0000036c <getpid>:
-SYSCALL(getpid)
- 36c:	b8 0b 00 00 00       	mov    $0xb,%eax
- 371:	cd 40                	int    $0x40
- 373:	c3                   	ret    
-
-00000374 <sbrk>:
-SYSCALL(sbrk)
- 374:	b8 0c 00 00 00       	mov    $0xc,%eax
- 379:	cd 40                	int    $0x40
- 37b:	c3                   	ret    
-
-0000037c <sleep>:
-SYSCALL(sleep)
- 37c:	b8 0d 00 00 00       	mov    $0xd,%eax
- 381:	cd 40                	int    $0x40
- 383:	c3                   	ret    
-
-00000384 <uptime>:
-SYSCALL(uptime)
- 384:	b8 0e 00 00 00       	mov    $0xe,%eax
- 389:	cd 40                	int    $0x40
- 38b:	c3                   	ret    
-
-0000038c <waitpid>:
-SYSCALL(waitpid)
- 38c:	b8 16 00 00 00       	mov    $0x16,%eax
- 391:	cd 40                	int    $0x40
- 393:	c3                   	ret    
-
-00000394 <wait_stat>:
-SYSCALL(wait_stat)
- 394:	b8 17 00 00 00       	mov    $0x17,%eax
- 399:	cd 40                	int    $0x40
- 39b:	c3                   	ret    
-
-0000039c <list_pgroup>:
-SYSCALL(list_pgroup)
- 39c:	b8 18 00 00 00       	mov    $0x18,%eax
- 3a1:	cd 40                	int    $0x40
- 3a3:	c3                   	ret    
-
-000003a4 <foreground>:
-SYSCALL(foreground)
- 3a4:	b8 19 00 00 00       	mov    $0x19,%eax
- 3a9:	cd 40                	int    $0x40
- 3ab:	c3                   	ret    
-
-000003ac <set_priority>:
-SYSCALL(set_priority)
- 3ac:	b8 1a 00 00 00       	mov    $0x1a,%eax
- 3b1:	cd 40                	int    $0x40
- 3b3:	c3                   	ret    
-
-000003b4 <putc>:
-#include "stat.h"
-#include "user.h"
-
-static void
-putc(int fd, char c)
-{
- 3b4:	55                   	push   %ebp
- 3b5:	89 e5                	mov    %esp,%ebp
- 3b7:	83 ec 28             	sub    $0x28,%esp
- 3ba:	8b 45 0c             	mov    0xc(%ebp),%eax
- 3bd:	88 45 f4             	mov    %al,-0xc(%ebp)
-  write(fd, &c, 1);
- 3c0:	c7 44 24 08 01 00 00 	movl   $0x1,0x8(%esp)
- 3c7:	00 
- 3c8:	8d 45 f4             	lea    -0xc(%ebp),%eax
- 3cb:	89 44 24 04          	mov    %eax,0x4(%esp)
- 3cf:	8b 45 08             	mov    0x8(%ebp),%eax
- 3d2:	89 04 24             	mov    %eax,(%esp)
- 3d5:	e8 32 ff ff ff       	call   30c <write>
-}
- 3da:	c9                   	leave  
- 3db:	c3                   	ret    
-
-000003dc <printint>:
-
-static void
-printint(int fd, int xx, int base, int sgn)
-{
- 3dc:	55                   	push   %ebp
- 3dd:	89 e5                	mov    %esp,%ebp
- 3df:	83 ec 48             	sub    $0x48,%esp
-  static char digits[] = "0123456789ABCDEF";
-  char buf[16];
-  int i, neg;
-  uint x;
-
-  neg = 0;
- 3e2:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
-  if(sgn && xx < 0){
- 3e9:	83 7d 14 00          	cmpl   $0x0,0x14(%ebp)
- 3ed:	74 17                	je     406 <printint+0x2a>
- 3ef:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
- 3f3:	79 11                	jns    406 <printint+0x2a>
-    neg = 1;
- 3f5:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
-    x = -xx;
- 3fc:	8b 45 0c             	mov    0xc(%ebp),%eax
- 3ff:	f7 d8                	neg    %eax
- 401:	89 45 ec             	mov    %eax,-0x14(%ebp)
- 404:	eb 06                	jmp    40c <printint+0x30>
-  } else {
-    x = xx;
- 406:	8b 45 0c             	mov    0xc(%ebp),%eax
- 409:	89 45 ec             	mov    %eax,-0x14(%ebp)
-  }
-
-  i = 0;
- 40c:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
-  do{
-    buf[i++] = digits[x % base];
- 413:	8b 4d 10             	mov    0x10(%ebp),%ecx
- 416:	8b 45 ec             	mov    -0x14(%ebp),%eax
- 419:	ba 00 00 00 00       	mov    $0x0,%edx
- 41e:	f7 f1                	div    %ecx
- 420:	89 d0                	mov    %edx,%eax
- 422:	0f b6 90 bc 0a 00 00 	movzbl 0xabc(%eax),%edx
- 429:	8d 45 dc             	lea    -0x24(%ebp),%eax
- 42c:	03 45 f4             	add    -0xc(%ebp),%eax
- 42f:	88 10                	mov    %dl,(%eax)
- 431:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
-  }while((x /= base) != 0);
- 435:	8b 55 10             	mov    0x10(%ebp),%edx
- 438:	89 55 d4             	mov    %edx,-0x2c(%ebp)
- 43b:	8b 45 ec             	mov    -0x14(%ebp),%eax
- 43e:	ba 00 00 00 00       	mov    $0x0,%edx
- 443:	f7 75 d4             	divl   -0x2c(%ebp)
- 446:	89 45 ec             	mov    %eax,-0x14(%ebp)
- 449:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
- 44d:	75 c4                	jne    413 <printint+0x37>
-  if(neg)
- 44f:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
- 453:	74 2a                	je     47f <printint+0xa3>
-    buf[i++] = '-';
- 455:	8d 45 dc             	lea    -0x24(%ebp),%eax
- 458:	03 45 f4             	add    -0xc(%ebp),%eax
- 45b:	c6 00 2d             	movb   $0x2d,(%eax)
- 45e:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
-
-  while(--i >= 0)
- 462:	eb 1b                	jmp    47f <printint+0xa3>
-    putc(fd, buf[i]);
- 464:	8d 45 dc             	lea    -0x24(%ebp),%eax
- 467:	03 45 f4             	add    -0xc(%ebp),%eax
- 46a:	0f b6 00             	movzbl (%eax),%eax
- 46d:	0f be c0             	movsbl %al,%eax
- 470:	89 44 24 04          	mov    %eax,0x4(%esp)
- 474:	8b 45 08             	mov    0x8(%ebp),%eax
- 477:	89 04 24             	mov    %eax,(%esp)
- 47a:	e8 35 ff ff ff       	call   3b4 <putc>
-    buf[i++] = digits[x % base];
-  }while((x /= base) != 0);
-  if(neg)
-    buf[i++] = '-';
-
-  while(--i >= 0)
- 47f:	83 6d f4 01          	subl   $0x1,-0xc(%ebp)
- 483:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
- 487:	79 db                	jns    464 <printint+0x88>
-    putc(fd, buf[i]);
-}
- 489:	c9                   	leave  
- 48a:	c3                   	ret    
-
-0000048b <printf>:
-
-// Print to the given fd. Only understands %d, %x, %p, %s.
-void
-printf(int fd, char *fmt, ...)
-{
- 48b:	55                   	push   %ebp
- 48c:	89 e5                	mov    %esp,%ebp
- 48e:	83 ec 38             	sub    $0x38,%esp
-  char *s;
-  int c, i, state;
-  uint *ap;
-
-  state = 0;
- 491:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
-  ap = (uint*)(void*)&fmt + 1;
- 498:	8d 45 0c             	lea    0xc(%ebp),%eax
- 49b:	83 c0 04             	add    $0x4,%eax
- 49e:	89 45 e8             	mov    %eax,-0x18(%ebp)
-  for(i = 0; fmt[i]; i++){
- 4a1:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
- 4a8:	e9 7d 01 00 00       	jmp    62a <printf+0x19f>
-    c = fmt[i] & 0xff;
- 4ad:	8b 55 0c             	mov    0xc(%ebp),%edx
- 4b0:	8b 45 f0             	mov    -0x10(%ebp),%eax
- 4b3:	01 d0                	add    %edx,%eax
- 4b5:	0f b6 00             	movzbl (%eax),%eax
- 4b8:	0f be c0             	movsbl %al,%eax
- 4bb:	25 ff 00 00 00       	and    $0xff,%eax
- 4c0:	89 45 e4             	mov    %eax,-0x1c(%ebp)
-    if(state == 0){
- 4c3:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
- 4c7:	75 2c                	jne    4f5 <printf+0x6a>
-      if(c == '%'){
- 4c9:	83 7d e4 25          	cmpl   $0x25,-0x1c(%ebp)
- 4cd:	75 0c                	jne    4db <printf+0x50>
-        state = '%';
- 4cf:	c7 45 ec 25 00 00 00 	movl   $0x25,-0x14(%ebp)
- 4d6:	e9 4b 01 00 00       	jmp    626 <printf+0x19b>
-      } else {
-        putc(fd, c);
- 4db:	8b 45 e4             	mov    -0x1c(%ebp),%eax
- 4de:	0f be c0             	movsbl %al,%eax
- 4e1:	89 44 24 04          	mov    %eax,0x4(%esp)
- 4e5:	8b 45 08             	mov    0x8(%ebp),%eax
- 4e8:	89 04 24             	mov    %eax,(%esp)
- 4eb:	e8 c4 fe ff ff       	call   3b4 <putc>
- 4f0:	e9 31 01 00 00       	jmp    626 <printf+0x19b>
-      }
-    } else if(state == '%'){
- 4f5:	83 7d ec 25          	cmpl   $0x25,-0x14(%ebp)
- 4f9:	0f 85 27 01 00 00    	jne    626 <printf+0x19b>
-      if(c == 'd'){
- 4ff:	83 7d e4 64          	cmpl   $0x64,-0x1c(%ebp)
- 503:	75 2d                	jne    532 <printf+0xa7>
-        printint(fd, *ap, 10, 1);
- 505:	8b 45 e8             	mov    -0x18(%ebp),%eax
- 508:	8b 00                	mov    (%eax),%eax
- 50a:	c7 44 24 0c 01 00 00 	movl   $0x1,0xc(%esp)
- 511:	00 
- 512:	c7 44 24 08 0a 00 00 	movl   $0xa,0x8(%esp)
- 519:	00 
- 51a:	89 44 24 04          	mov    %eax,0x4(%esp)
- 51e:	8b 45 08             	mov    0x8(%ebp),%eax
- 521:	89 04 24             	mov    %eax,(%esp)
- 524:	e8 b3 fe ff ff       	call   3dc <printint>
-        ap++;
- 529:	83 45 e8 04          	addl   $0x4,-0x18(%ebp)
- 52d:	e9 ed 00 00 00       	jmp    61f <printf+0x194>
-      } else if(c == 'x' || c == 'p'){
- 532:	83 7d e4 78          	cmpl   $0x78,-0x1c(%ebp)
- 536:	74 06                	je     53e <printf+0xb3>
- 538:	83 7d e4 70          	cmpl   $0x70,-0x1c(%ebp)
- 53c:	75 2d                	jne    56b <printf+0xe0>
-        printint(fd, *ap, 16, 0);
- 53e:	8b 45 e8             	mov    -0x18(%ebp),%eax
- 541:	8b 00                	mov    (%eax),%eax
- 543:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
- 54a:	00 
- 54b:	c7 44 24 08 10 00 00 	movl   $0x10,0x8(%esp)
- 552:	00 
- 553:	89 44 24 04          	mov    %eax,0x4(%esp)
- 557:	8b 45 08             	mov    0x8(%ebp),%eax
- 55a:	89 04 24             	mov    %eax,(%esp)
- 55d:	e8 7a fe ff ff       	call   3dc <printint>
-        ap++;
- 562:	83 45 e8 04          	addl   $0x4,-0x18(%ebp)
- 566:	e9 b4 00 00 00       	jmp    61f <printf+0x194>
-      } else if(c == 's'){
- 56b:	83 7d e4 73          	cmpl   $0x73,-0x1c(%ebp)
- 56f:	75 46                	jne    5b7 <printf+0x12c>
-        s = (char*)*ap;
- 571:	8b 45 e8             	mov    -0x18(%ebp),%eax
- 574:	8b 00                	mov    (%eax),%eax
- 576:	89 45 f4             	mov    %eax,-0xc(%ebp)
-        ap++;
- 579:	83 45 e8 04          	addl   $0x4,-0x18(%ebp)
-        if(s == 0)
- 57d:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
- 581:	75 27                	jne    5aa <printf+0x11f>
-          s = "(null)";
- 583:	c7 45 f4 76 08 00 00 	movl   $0x876,-0xc(%ebp)
-        while(*s != 0){
- 58a:	eb 1e                	jmp    5aa <printf+0x11f>
-          putc(fd, *s);
- 58c:	8b 45 f4             	mov    -0xc(%ebp),%eax
- 58f:	0f b6 00             	movzbl (%eax),%eax
- 592:	0f be c0             	movsbl %al,%eax
- 595:	89 44 24 04          	mov    %eax,0x4(%esp)
- 599:	8b 45 08             	mov    0x8(%ebp),%eax
- 59c:	89 04 24             	mov    %eax,(%esp)
- 59f:	e8 10 fe ff ff       	call   3b4 <putc>
-          s++;
- 5a4:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
- 5a8:	eb 01                	jmp    5ab <printf+0x120>
-      } else if(c == 's'){
-        s = (char*)*ap;
-        ap++;
-        if(s == 0)
-          s = "(null)";
-        while(*s != 0){
- 5aa:	90                   	nop
- 5ab:	8b 45 f4             	mov    -0xc(%ebp),%eax
- 5ae:	0f b6 00             	movzbl (%eax),%eax
- 5b1:	84 c0                	test   %al,%al
- 5b3:	75 d7                	jne    58c <printf+0x101>
- 5b5:	eb 68                	jmp    61f <printf+0x194>
-          putc(fd, *s);
-          s++;
-        }
-      } else if(c == 'c'){
- 5b7:	83 7d e4 63          	cmpl   $0x63,-0x1c(%ebp)
- 5bb:	75 1d                	jne    5da <printf+0x14f>
-        putc(fd, *ap);
- 5bd:	8b 45 e8             	mov    -0x18(%ebp),%eax
- 5c0:	8b 00                	mov    (%eax),%eax
- 5c2:	0f be c0             	movsbl %al,%eax
- 5c5:	89 44 24 04          	mov    %eax,0x4(%esp)
- 5c9:	8b 45 08             	mov    0x8(%ebp),%eax
- 5cc:	89 04 24             	mov    %eax,(%esp)
- 5cf:	e8 e0 fd ff ff       	call   3b4 <putc>
-        ap++;
- 5d4:	83 45 e8 04          	addl   $0x4,-0x18(%ebp)
- 5d8:	eb 45                	jmp    61f <printf+0x194>
-      } else if(c == '%'){
- 5da:	83 7d e4 25          	cmpl   $0x25,-0x1c(%ebp)
- 5de:	75 17                	jne    5f7 <printf+0x16c>
-        putc(fd, c);
- 5e0:	8b 45 e4             	mov    -0x1c(%ebp),%eax
- 5e3:	0f be c0             	movsbl %al,%eax
- 5e6:	89 44 24 04          	mov    %eax,0x4(%esp)
- 5ea:	8b 45 08             	mov    0x8(%ebp),%eax
- 5ed:	89 04 24             	mov    %eax,(%esp)
- 5f0:	e8 bf fd ff ff       	call   3b4 <putc>
- 5f5:	eb 28                	jmp    61f <printf+0x194>
-      } else {
-        // Unknown % sequence.  Print it to draw attention.
-        putc(fd, '%');
- 5f7:	c7 44 24 04 25 00 00 	movl   $0x25,0x4(%esp)
- 5fe:	00 
- 5ff:	8b 45 08             	mov    0x8(%ebp),%eax
- 602:	89 04 24             	mov    %eax,(%esp)
- 605:	e8 aa fd ff ff       	call   3b4 <putc>
-        putc(fd, c);
- 60a:	8b 45 e4             	mov    -0x1c(%ebp),%eax
- 60d:	0f be c0             	movsbl %al,%eax
- 610:	89 44 24 04          	mov    %eax,0x4(%esp)
- 614:	8b 45 08             	mov    0x8(%ebp),%eax
- 617:	89 04 24             	mov    %eax,(%esp)
- 61a:	e8 95 fd ff ff       	call   3b4 <putc>
-      }
-      state = 0;
- 61f:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
-  int c, i, state;
-  uint *ap;
-
-  state = 0;
-  ap = (uint*)(void*)&fmt + 1;
-  for(i = 0; fmt[i]; i++){
- 626:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)
- 62a:	8b 55 0c             	mov    0xc(%ebp),%edx
- 62d:	8b 45 f0             	mov    -0x10(%ebp),%eax
- 630:	01 d0                	add    %edx,%eax
- 632:	0f b6 00             	movzbl (%eax),%eax
- 635:	84 c0                	test   %al,%al
- 637:	0f 85 70 fe ff ff    	jne    4ad <printf+0x22>
-        putc(fd, c);
-      }
-      state = 0;
-    }
-  }
-}
- 63d:	c9                   	leave  
- 63e:	c3                   	ret    
- 63f:	90                   	nop
-
-00000640 <free>:
-static Header base;
-static Header *freep;
-
-void
-free(void *ap)
-{
- 640:	55                   	push   %ebp
- 641:	89 e5                	mov    %esp,%ebp
- 643:	83 ec 10             	sub    $0x10,%esp
-  Header *bp, *p;
-
-  bp = (Header*)ap - 1;
- 646:	8b 45 08             	mov    0x8(%ebp),%eax
- 649:	83 e8 08             	sub    $0x8,%eax
- 64c:	89 45 f8             	mov    %eax,-0x8(%ebp)
-  for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
- 64f:	a1 d8 0a 00 00       	mov    0xad8,%eax
- 654:	89 45 fc             	mov    %eax,-0x4(%ebp)
- 657:	eb 24                	jmp    67d <free+0x3d>
-    if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
- 659:	8b 45 fc             	mov    -0x4(%ebp),%eax
- 65c:	8b 00                	mov    (%eax),%eax
- 65e:	3b 45 fc             	cmp    -0x4(%ebp),%eax
- 661:	77 12                	ja     675 <free+0x35>
- 663:	8b 45 f8             	mov    -0x8(%ebp),%eax
- 666:	3b 45 fc             	cmp    -0x4(%ebp),%eax
- 669:	77 24                	ja     68f <free+0x4f>
- 66b:	8b 45 fc             	mov    -0x4(%ebp),%eax
- 66e:	8b 00                	mov    (%eax),%eax
- 670:	3b 45 f8             	cmp    -0x8(%ebp),%eax
- 673:	77 1a                	ja     68f <free+0x4f>
-free(void *ap)
-{
-  Header *bp, *p;
-
-  bp = (Header*)ap - 1;
-  for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
- 675:	8b 45 fc             	mov    -0x4(%ebp),%eax
- 678:	8b 00                	mov    (%eax),%eax
- 67a:	89 45 fc             	mov    %eax,-0x4(%ebp)
- 67d:	8b 45 f8             	mov    -0x8(%ebp),%eax
- 680:	3b 45 fc             	cmp    -0x4(%ebp),%eax
- 683:	76 d4                	jbe    659 <free+0x19>
- 685:	8b 45 fc             	mov    -0x4(%ebp),%eax
- 688:	8b 00                	mov    (%eax),%eax
- 68a:	3b 45 f8             	cmp    -0x8(%ebp),%eax
- 68d:	76 ca                	jbe    659 <free+0x19>
-    if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
-      break;
-  if(bp + bp->s.size == p->s.ptr){
- 68f:	8b 45 f8             	mov    -0x8(%ebp),%eax
- 692:	8b 40 04             	mov    0x4(%eax),%eax
- 695:	c1 e0 03             	shl    $0x3,%eax
- 698:	89 c2                	mov    %eax,%edx
- 69a:	03 55 f8             	add    -0x8(%ebp),%edx
- 69d:	8b 45 fc             	mov    -0x4(%ebp),%eax
- 6a0:	8b 00                	mov    (%eax),%eax
- 6a2:	39 c2                	cmp    %eax,%edx
- 6a4:	75 24                	jne    6ca <free+0x8a>
-    bp->s.size += p->s.ptr->s.size;
- 6a6:	8b 45 f8             	mov    -0x8(%ebp),%eax
- 6a9:	8b 50 04             	mov    0x4(%eax),%edx
- 6ac:	8b 45 fc             	mov    -0x4(%ebp),%eax
- 6af:	8b 00                	mov    (%eax),%eax
- 6b1:	8b 40 04             	mov    0x4(%eax),%eax
- 6b4:	01 c2                	add    %eax,%edx
- 6b6:	8b 45 f8             	mov    -0x8(%ebp),%eax
- 6b9:	89 50 04             	mov    %edx,0x4(%eax)
-    bp->s.ptr = p->s.ptr->s.ptr;
- 6bc:	8b 45 fc             	mov    -0x4(%ebp),%eax
- 6bf:	8b 00                	mov    (%eax),%eax
- 6c1:	8b 10                	mov    (%eax),%edx
- 6c3:	8b 45 f8             	mov    -0x8(%ebp),%eax
- 6c6:	89 10                	mov    %edx,(%eax)
- 6c8:	eb 0a                	jmp    6d4 <free+0x94>
-  } else
-    bp->s.ptr = p->s.ptr;
- 6ca:	8b 45 fc             	mov    -0x4(%ebp),%eax
- 6cd:	8b 10                	mov    (%eax),%edx
- 6cf:	8b 45 f8             	mov    -0x8(%ebp),%eax
- 6d2:	89 10                	mov    %edx,(%eax)
-  if(p + p->s.size == bp){
- 6d4:	8b 45 fc             	mov    -0x4(%ebp),%eax
- 6d7:	8b 40 04             	mov    0x4(%eax),%eax
- 6da:	c1 e0 03             	shl    $0x3,%eax
- 6dd:	03 45 fc             	add    -0x4(%ebp),%eax
- 6e0:	3b 45 f8             	cmp    -0x8(%ebp),%eax
- 6e3:	75 20                	jne    705 <free+0xc5>
-    p->s.size += bp->s.size;
- 6e5:	8b 45 fc             	mov    -0x4(%ebp),%eax
- 6e8:	8b 50 04             	mov    0x4(%eax),%edx
- 6eb:	8b 45 f8             	mov    -0x8(%ebp),%eax
- 6ee:	8b 40 04             	mov    0x4(%eax),%eax
- 6f1:	01 c2                	add    %eax,%edx
- 6f3:	8b 45 fc             	mov    -0x4(%ebp),%eax
- 6f6:	89 50 04             	mov    %edx,0x4(%eax)
-    p->s.ptr = bp->s.ptr;
- 6f9:	8b 45 f8             	mov    -0x8(%ebp),%eax
- 6fc:	8b 10                	mov    (%eax),%edx
- 6fe:	8b 45 fc             	mov    -0x4(%ebp),%eax
- 701:	89 10                	mov    %edx,(%eax)
- 703:	eb 08                	jmp    70d <free+0xcd>
-  } else
-    p->s.ptr = bp;
- 705:	8b 45 fc             	mov    -0x4(%ebp),%eax
- 708:	8b 55 f8             	mov    -0x8(%ebp),%edx
- 70b:	89 10                	mov    %edx,(%eax)
-  freep = p;
- 70d:	8b 45 fc             	mov    -0x4(%ebp),%eax
- 710:	a3 d8 0a 00 00       	mov    %eax,0xad8
-}
- 715:	c9                   	leave  
- 716:	c3                   	ret    
-
-00000717 <morecore>:
-
-static Header*
-morecore(uint nu)
-{
- 717:	55                   	push   %ebp
- 718:	89 e5                	mov    %esp,%ebp
- 71a:	83 ec 28             	sub    $0x28,%esp
-  char *p;
-  Header *hp;
-
-  if(nu < 4096)
- 71d:	81 7d 08 ff 0f 00 00 	cmpl   $0xfff,0x8(%ebp)
- 724:	77 07                	ja     72d <morecore+0x16>
-    nu = 4096;
- 726:	c7 45 08 00 10 00 00 	movl   $0x1000,0x8(%ebp)
-  p = sbrk(nu * sizeof(Header));
- 72d:	8b 45 08             	mov    0x8(%ebp),%eax
- 730:	c1 e0 03             	shl    $0x3,%eax
- 733:	89 04 24             	mov    %eax,(%esp)
- 736:	e8 39 fc ff ff       	call   374 <sbrk>
- 73b:	89 45 f4             	mov    %eax,-0xc(%ebp)
-  if(p == (char*)-1)
- 73e:	83 7d f4 ff          	cmpl   $0xffffffff,-0xc(%ebp)
- 742:	75 07                	jne    74b <morecore+0x34>
-    return 0;
- 744:	b8 00 00 00 00       	mov    $0x0,%eax
- 749:	eb 22                	jmp    76d <morecore+0x56>
-  hp = (Header*)p;
- 74b:	8b 45 f4             	mov    -0xc(%ebp),%eax
- 74e:	89 45 f0             	mov    %eax,-0x10(%ebp)
-  hp->s.size = nu;
- 751:	8b 45 f0             	mov    -0x10(%ebp),%eax
- 754:	8b 55 08             	mov    0x8(%ebp),%edx
- 757:	89 50 04             	mov    %edx,0x4(%eax)
-  free((void*)(hp + 1));
- 75a:	8b 45 f0             	mov    -0x10(%ebp),%eax
- 75d:	83 c0 08             	add    $0x8,%eax
- 760:	89 04 24             	mov    %eax,(%esp)
- 763:	e8 d8 fe ff ff       	call   640 <free>
-  return freep;
- 768:	a1 d8 0a 00 00       	mov    0xad8,%eax
-}
- 76d:	c9                   	leave  
- 76e:	c3                   	ret    
-
-0000076f <malloc>:
-
-void*
-malloc(uint nbytes)
-{
- 76f:	55                   	push   %ebp
- 770:	89 e5                	mov    %esp,%ebp
- 772:	83 ec 28             	sub    $0x28,%esp
-  Header *p, *prevp;
-  uint nunits;
-
-  nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;
- 775:	8b 45 08             	mov    0x8(%ebp),%eax
- 778:	83 c0 07             	add    $0x7,%eax
- 77b:	c1 e8 03             	shr    $0x3,%eax
- 77e:	83 c0 01             	add    $0x1,%eax
- 781:	89 45 ec             	mov    %eax,-0x14(%ebp)
-  if((prevp = freep) == 0){
- 784:	a1 d8 0a 00 00       	mov    0xad8,%eax
- 789:	89 45 f0             	mov    %eax,-0x10(%ebp)
- 78c:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
- 790:	75 23                	jne    7b5 <malloc+0x46>
-    base.s.ptr = freep = prevp = &base;
- 792:	c7 45 f0 d0 0a 00 00 	movl   $0xad0,-0x10(%ebp)
- 799:	8b 45 f0             	mov    -0x10(%ebp),%eax
- 79c:	a3 d8 0a 00 00       	mov    %eax,0xad8
- 7a1:	a1 d8 0a 00 00       	mov    0xad8,%eax
- 7a6:	a3 d0 0a 00 00       	mov    %eax,0xad0
-    base.s.size = 0;
- 7ab:	c7 05 d4 0a 00 00 00 	movl   $0x0,0xad4
- 7b2:	00 00 00 
-  }
-  for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
- 7b5:	8b 45 f0             	mov    -0x10(%ebp),%eax
- 7b8:	8b 00                	mov    (%eax),%eax
- 7ba:	89 45 f4             	mov    %eax,-0xc(%ebp)
-    if(p->s.size >= nunits){
- 7bd:	8b 45 f4             	mov    -0xc(%ebp),%eax
- 7c0:	8b 40 04             	mov    0x4(%eax),%eax
- 7c3:	3b 45 ec             	cmp    -0x14(%ebp),%eax
- 7c6:	72 4d                	jb     815 <malloc+0xa6>
-      if(p->s.size == nunits)
- 7c8:	8b 45 f4             	mov    -0xc(%ebp),%eax
- 7cb:	8b 40 04             	mov    0x4(%eax),%eax
- 7ce:	3b 45 ec             	cmp    -0x14(%ebp),%eax
- 7d1:	75 0c                	jne    7df <malloc+0x70>
-        prevp->s.ptr = p->s.ptr;
- 7d3:	8b 45 f4             	mov    -0xc(%ebp),%eax
- 7d6:	8b 10                	mov    (%eax),%edx
- 7d8:	8b 45 f0             	mov    -0x10(%ebp),%eax
- 7db:	89 10                	mov    %edx,(%eax)
- 7dd:	eb 26                	jmp    805 <malloc+0x96>
-      else {
-        p->s.size -= nunits;
- 7df:	8b 45 f4             	mov    -0xc(%ebp),%eax
- 7e2:	8b 40 04             	mov    0x4(%eax),%eax
- 7e5:	89 c2                	mov    %eax,%edx
- 7e7:	2b 55 ec             	sub    -0x14(%ebp),%edx
- 7ea:	8b 45 f4             	mov    -0xc(%ebp),%eax
- 7ed:	89 50 04             	mov    %edx,0x4(%eax)
-        p += p->s.size;
- 7f0:	8b 45 f4             	mov    -0xc(%ebp),%eax
- 7f3:	8b 40 04             	mov    0x4(%eax),%eax
- 7f6:	c1 e0 03             	shl    $0x3,%eax
- 7f9:	01 45 f4             	add    %eax,-0xc(%ebp)
-        p->s.size = nunits;
- 7fc:	8b 45 f4             	mov    -0xc(%ebp),%eax
- 7ff:	8b 55 ec             	mov    -0x14(%ebp),%edx
- 802:	89 50 04             	mov    %edx,0x4(%eax)
-      }
-      freep = prevp;
- 805:	8b 45 f0             	mov    -0x10(%ebp),%eax
- 808:	a3 d8 0a 00 00       	mov    %eax,0xad8
-      return (void*)(p + 1);
- 80d:	8b 45 f4             	mov    -0xc(%ebp),%eax
- 810:	83 c0 08             	add    $0x8,%eax
- 813:	eb 38                	jmp    84d <malloc+0xde>
-    }
-    if(p == freep)
- 815:	a1 d8 0a 00 00       	mov    0xad8,%eax
- 81a:	39 45 f4             	cmp    %eax,-0xc(%ebp)
- 81d:	75 1b                	jne    83a <malloc+0xcb>
-      if((p = morecore(nunits)) == 0)
- 81f:	8b 45 ec             	mov    -0x14(%ebp),%eax
- 822:	89 04 24             	mov    %eax,(%esp)
- 825:	e8 ed fe ff ff       	call   717 <morecore>
- 82a:	89 45 f4             	mov    %eax,-0xc(%ebp)
- 82d:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
- 831:	75 07                	jne    83a <malloc+0xcb>
-        return 0;
- 833:	b8 00 00 00 00       	mov    $0x0,%eax
- 838:	eb 13                	jmp    84d <malloc+0xde>
-  nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;
-  if((prevp = freep) == 0){
-    base.s.ptr = freep = prevp = &base;
-    base.s.size = 0;
-  }
-  for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
- 83a:	8b 45 f4             	mov    -0xc(%ebp),%eax
- 83d:	89 45 f0             	mov    %eax,-0x10(%ebp)
- 840:	8b 45 f4             	mov    -0xc(%ebp),%eax
- 843:	8b 00                	mov    (%eax),%eax
- 845:	89 45 f4             	mov    %eax,-0xc(%ebp)
-      return (void*)(p + 1);
-    }
-    if(p == freep)
-      if((p = morecore(nunits)) == 0)
-        return 0;
-  }
- 848:	e9 70 ff ff ff       	jmp    7bd <malloc+0x4e>
-}
- 84d:	c9                   	leave  
- 84e:	c3                   	ret    
diff --git a/xv6/ln.c b/xv6/ln.c
deleted file mode 100644
index 1506075..0000000
--- a/xv6/ln.c
+++ /dev/null
@@ -1,15 +0,0 @@
-#include "types.h"
-#include "stat.h"
-#include "user.h"
-
-int
-main(int argc, char *argv[])
-{
-  if(argc != 3){
-    printf(2, "Usage: ln old new\n");
-    exit(EXIT_STATUS_DEFAULT);
-  }
-  if(link(argv[1], argv[2]) < 0)
-    printf(2, "link %s %s: failed\n", argv[1], argv[2]);
-  exit(EXIT_STATUS_DEFAULT);
-}
diff --git a/xv6/ln.d b/xv6/ln.d
deleted file mode 100644
index 94c7a97..0000000
--- a/xv6/ln.d
+++ /dev/null
@@ -1 +0,0 @@
-ln.o: ln.c types.h stat.h user.h
diff --git a/xv6/ln.sym b/xv6/ln.sym
deleted file mode 100644
index 8443672..0000000
--- a/xv6/ln.sym
+++ /dev/null
@@ -1,65 +0,0 @@
-00000000 .text
-0000084f .rodata
-00000880 .eh_frame
-00000abc .data
-00000ad0 .bss
-00000000 .comment
-00000000 .debug_aranges
-00000000 .debug_info
-00000000 .debug_abbrev
-00000000 .debug_line
-00000000 .debug_str
-00000000 .debug_loc
-00000000 ln.c
-00000000 ulib.c
-00000088 stosb
-00000000 printf.c
-000003b4 putc
-000003dc printint
-00000abc digits.923
-00000000 umalloc.c
-00000ad0 base
-00000ad8 freep
-00000717 morecore
-000000ad strcpy
-0000038c waitpid
-0000048b printf
-000002a6 memmove
-00000334 mknod
-000003a4 foreground
-0000019e gets
-0000036c getpid
-0000076f malloc
-0000037c sleep
-000003ac set_priority
-00000394 wait_stat
-000002fc pipe
-0000030c write
-00000344 fstat
-0000031c kill
-0000035c chdir
-00000324 exec
-000002f4 wait
-00000304 read
-0000033c unlink
-000002e4 fork
-00000374 sbrk
-00000384 uptime
-00000ad0 __bss_start
-00000147 memset
-00000000 main
-000000e1 strcmp
-00000364 dup
-0000039c list_pgroup
-0000020d stat
-00000ad0 _edata
-00000adc _end
-0000034c link
-000002ec exit
-0000025b atoi
-00000122 strlen
-0000032c open
-0000016b strchr
-00000354 mkdir
-00000314 close
-00000640 free
diff --git a/xv6/log.c b/xv6/log.c
deleted file mode 100644
index f519a8c..0000000
--- a/xv6/log.c
+++ /dev/null
@@ -1,231 +0,0 @@
-#include "types.h"
-#include "defs.h"
-#include "param.h"
-#include "spinlock.h"
-#include "fs.h"
-#include "buf.h"
-
-// Simple logging that allows concurrent FS system calls.
-//
-// A log transaction contains the updates of multiple FS system
-// calls. The logging system only commits when there are
-// no FS system calls active. Thus there is never
-// any reasoning required about whether a commit might
-// write an uncommitted system call's updates to disk.
-//
-// A system call should call begin_op()/end_op() to mark
-// its start and end. Usually begin_op() just increments
-// the count of in-progress FS system calls and returns.
-// But if it thinks the log is close to running out, it
-// sleeps until the last outstanding end_op() commits.
-//
-// The log is a physical re-do log containing disk blocks.
-// The on-disk log format:
-//   header block, containing sector #s for block A, B, C, ...
-//   block A
-//   block B
-//   block C
-//   ...
-// Log appends are synchronous.
-
-// Contents of the header block, used for both the on-disk header block
-// and to keep track in memory of logged sector #s before commit.
-struct logheader {
-  int n;   
-  int sector[LOGSIZE];
-};
-
-struct log {
-  struct spinlock lock;
-  int start;
-  int size;
-  int outstanding; // how many FS sys calls are executing.
-  int committing;  // in commit(), please wait.
-  int dev;
-  struct logheader lh;
-};
-struct log log;
-
-static void recover_from_log(void);
-static void commit();
-
-void
-initlog(void)
-{
-  if (sizeof(struct logheader) >= BSIZE)
-    panic("initlog: too big logheader");
-
-  struct superblock sb;
-  initlock(&log.lock, "log");
-  readsb(ROOTDEV, &sb);
-  log.start = sb.size - sb.nlog;
-  log.size = sb.nlog;
-  log.dev = ROOTDEV;
-  recover_from_log();
-}
-
-// Copy committed blocks from log to their home location
-static void 
-install_trans(void)
-{
-  int tail;
-
-  for (tail = 0; tail < log.lh.n; tail++) {
-    struct buf *lbuf = bread(log.dev, log.start+tail+1); // read log block
-    struct buf *dbuf = bread(log.dev, log.lh.sector[tail]); // read dst
-    memmove(dbuf->data, lbuf->data, BSIZE);  // copy block to dst
-    bwrite(dbuf);  // write dst to disk
-    brelse(lbuf); 
-    brelse(dbuf);
-  }
-}
-
-// Read the log header from disk into the in-memory log header
-static void
-read_head(void)
-{
-  struct buf *buf = bread(log.dev, log.start);
-  struct logheader *lh = (struct logheader *) (buf->data);
-  int i;
-  log.lh.n = lh->n;
-  for (i = 0; i < log.lh.n; i++) {
-    log.lh.sector[i] = lh->sector[i];
-  }
-  brelse(buf);
-}
-
-// Write in-memory log header to disk.
-// This is the true point at which the
-// current transaction commits.
-static void
-write_head(void)
-{
-  struct buf *buf = bread(log.dev, log.start);
-  struct logheader *hb = (struct logheader *) (buf->data);
-  int i;
-  hb->n = log.lh.n;
-  for (i = 0; i < log.lh.n; i++) {
-    hb->sector[i] = log.lh.sector[i];
-  }
-  bwrite(buf);
-  brelse(buf);
-}
-
-static void
-recover_from_log(void)
-{
-  read_head();      
-  install_trans(); // if committed, copy from log to disk
-  log.lh.n = 0;
-  write_head(); // clear the log
-}
-
-// called at the start of each FS system call.
-void
-begin_op(void)
-{
-  acquire(&log.lock);
-  while(1){
-    if(log.committing){
-      sleep(&log, &log.lock);
-    } else if(log.lh.n + (log.outstanding+1)*MAXOPBLOCKS > LOGSIZE){
-      // this op might exhaust log space; wait for commit.
-      sleep(&log, &log.lock);
-    } else {
-      log.outstanding += 1;
-      release(&log.lock);
-      break;
-    }
-  }
-}
-
-// called at the end of each FS system call.
-// commits if this was the last outstanding operation.
-void
-end_op(void)
-{
-  int do_commit = 0;
-
-  acquire(&log.lock);
-  log.outstanding -= 1;
-  if(log.committing)
-    panic("log.committing");
-  if(log.outstanding == 0){
-    do_commit = 1;
-    log.committing = 1;
-  } else {
-    // begin_op() may be waiting for log space.
-    wakeup(&log);
-  }
-  release(&log.lock);
-
-  if(do_commit){
-    // call commit w/o holding locks, since not allowed
-    // to sleep with locks.
-    commit();
-    acquire(&log.lock);
-    log.committing = 0;
-    wakeup(&log);
-    release(&log.lock);
-  }
-}
-
-// Copy modified blocks from cache to log.
-static void 
-write_log(void)
-{
-  int tail;
-
-  for (tail = 0; tail < log.lh.n; tail++) {
-    struct buf *to = bread(log.dev, log.start+tail+1); // log block
-    struct buf *from = bread(log.dev, log.lh.sector[tail]); // cache block
-    memmove(to->data, from->data, BSIZE);
-    bwrite(to);  // write the log
-    brelse(from); 
-    brelse(to);
-  }
-}
-
-static void
-commit()
-{
-  if (log.lh.n > 0) {
-    write_log();     // Write modified blocks from cache to log
-    write_head();    // Write header to disk -- the real commit
-    install_trans(); // Now install writes to home locations
-    log.lh.n = 0; 
-    write_head();    // Erase the transaction from the log
-  }
-}
-
-// Caller has modified b->data and is done with the buffer.
-// Record the block number and pin in the cache with B_DIRTY.
-// commit()/write_log() will do the disk write.
-//
-// log_write() replaces bwrite(); a typical use is:
-//   bp = bread(...)
-//   modify bp->data[]
-//   log_write(bp)
-//   brelse(bp)
-void
-log_write(struct buf *b)
-{
-  int i;
-
-  if (log.lh.n >= LOGSIZE || log.lh.n >= log.size - 1)
-    panic("too big a transaction");
-  if (log.outstanding < 1)
-    panic("log_write outside of trans");
-
-  acquire(&log.lock);
-  for (i = 0; i < log.lh.n; i++) {
-    if (log.lh.sector[i] == b->sector)   // log absorbtion
-      break;
-  }
-  log.lh.sector[i] = b->sector;
-  if (i == log.lh.n)
-    log.lh.n++;
-  b->flags |= B_DIRTY; // prevent eviction
-  release(&log.lock);
-}
-
diff --git a/xv6/log.d b/xv6/log.d
deleted file mode 100644
index a3fdd82..0000000
--- a/xv6/log.d
+++ /dev/null
@@ -1 +0,0 @@
-log.o: log.c types.h defs.h param.h spinlock.h fs.h buf.h
diff --git a/xv6/ls.asm b/xv6/ls.asm
deleted file mode 100644
index 9869fb5..0000000
--- a/xv6/ls.asm
+++ /dev/null
@@ -1,1497 +0,0 @@
-
-_ls:     file format elf32-i386
-
-
-Disassembly of section .text:
-
-00000000 <fmtname>:
-#include "user.h"
-#include "fs.h"
-
-char*
-fmtname(char *path)
-{
-   0:	55                   	push   %ebp
-   1:	89 e5                	mov    %esp,%ebp
-   3:	53                   	push   %ebx
-   4:	83 ec 24             	sub    $0x24,%esp
-  static char buf[DIRSIZ+1];
-  char *p;
-  
-  // Find first character after last slash.
-  for(p=path+strlen(path); p >= path && *p != '/'; p--)
-   7:	8b 45 08             	mov    0x8(%ebp),%eax
-   a:	89 04 24             	mov    %eax,(%esp)
-   d:	e8 ec 03 00 00       	call   3fe <strlen>
-  12:	03 45 08             	add    0x8(%ebp),%eax
-  15:	89 45 f4             	mov    %eax,-0xc(%ebp)
-  18:	eb 04                	jmp    1e <fmtname+0x1e>
-  1a:	83 6d f4 01          	subl   $0x1,-0xc(%ebp)
-  1e:	8b 45 f4             	mov    -0xc(%ebp),%eax
-  21:	3b 45 08             	cmp    0x8(%ebp),%eax
-  24:	72 0a                	jb     30 <fmtname+0x30>
-  26:	8b 45 f4             	mov    -0xc(%ebp),%eax
-  29:	0f b6 00             	movzbl (%eax),%eax
-  2c:	3c 2f                	cmp    $0x2f,%al
-  2e:	75 ea                	jne    1a <fmtname+0x1a>
-    ;
-  p++;
-  30:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
-  
-  // Return blank-padded name.
-  if(strlen(p) >= DIRSIZ)
-  34:	8b 45 f4             	mov    -0xc(%ebp),%eax
-  37:	89 04 24             	mov    %eax,(%esp)
-  3a:	e8 bf 03 00 00       	call   3fe <strlen>
-  3f:	83 f8 0d             	cmp    $0xd,%eax
-  42:	76 05                	jbe    49 <fmtname+0x49>
-    return p;
-  44:	8b 45 f4             	mov    -0xc(%ebp),%eax
-  47:	eb 5f                	jmp    a8 <fmtname+0xa8>
-  memmove(buf, p, strlen(p));
-  49:	8b 45 f4             	mov    -0xc(%ebp),%eax
-  4c:	89 04 24             	mov    %eax,(%esp)
-  4f:	e8 aa 03 00 00       	call   3fe <strlen>
-  54:	89 44 24 08          	mov    %eax,0x8(%esp)
-  58:	8b 45 f4             	mov    -0xc(%ebp),%eax
-  5b:	89 44 24 04          	mov    %eax,0x4(%esp)
-  5f:	c7 04 24 20 0e 00 00 	movl   $0xe20,(%esp)
-  66:	e8 17 05 00 00       	call   582 <memmove>
-  memset(buf+strlen(p), ' ', DIRSIZ-strlen(p));
-  6b:	8b 45 f4             	mov    -0xc(%ebp),%eax
-  6e:	89 04 24             	mov    %eax,(%esp)
-  71:	e8 88 03 00 00       	call   3fe <strlen>
-  76:	ba 0e 00 00 00       	mov    $0xe,%edx
-  7b:	89 d3                	mov    %edx,%ebx
-  7d:	29 c3                	sub    %eax,%ebx
-  7f:	8b 45 f4             	mov    -0xc(%ebp),%eax
-  82:	89 04 24             	mov    %eax,(%esp)
-  85:	e8 74 03 00 00       	call   3fe <strlen>
-  8a:	05 20 0e 00 00       	add    $0xe20,%eax
-  8f:	89 5c 24 08          	mov    %ebx,0x8(%esp)
-  93:	c7 44 24 04 20 00 00 	movl   $0x20,0x4(%esp)
-  9a:	00 
-  9b:	89 04 24             	mov    %eax,(%esp)
-  9e:	e8 80 03 00 00       	call   423 <memset>
-  return buf;
-  a3:	b8 20 0e 00 00       	mov    $0xe20,%eax
-}
-  a8:	83 c4 24             	add    $0x24,%esp
-  ab:	5b                   	pop    %ebx
-  ac:	5d                   	pop    %ebp
-  ad:	c3                   	ret    
-
-000000ae <ls>:
-
-void
-ls(char *path)
-{
-  ae:	55                   	push   %ebp
-  af:	89 e5                	mov    %esp,%ebp
-  b1:	57                   	push   %edi
-  b2:	56                   	push   %esi
-  b3:	53                   	push   %ebx
-  b4:	81 ec 5c 02 00 00    	sub    $0x25c,%esp
-  char buf[512], *p;
-  int fd;
-  struct dirent de;
-  struct stat st;
-  
-  if((fd = open(path, 0)) < 0){
-  ba:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
-  c1:	00 
-  c2:	8b 45 08             	mov    0x8(%ebp),%eax
-  c5:	89 04 24             	mov    %eax,(%esp)
-  c8:	e8 3b 05 00 00       	call   608 <open>
-  cd:	89 45 e4             	mov    %eax,-0x1c(%ebp)
-  d0:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
-  d4:	79 20                	jns    f6 <ls+0x48>
-    printf(2, "ls: cannot open %s\n", path);
-  d6:	8b 45 08             	mov    0x8(%ebp),%eax
-  d9:	89 44 24 08          	mov    %eax,0x8(%esp)
-  dd:	c7 44 24 04 2b 0b 00 	movl   $0xb2b,0x4(%esp)
-  e4:	00 
-  e5:	c7 04 24 02 00 00 00 	movl   $0x2,(%esp)
-  ec:	e8 76 06 00 00       	call   767 <printf>
-    return;
-  f1:	e9 01 02 00 00       	jmp    2f7 <ls+0x249>
-  }
-  
-  if(fstat(fd, &st) < 0){
-  f6:	8d 85 bc fd ff ff    	lea    -0x244(%ebp),%eax
-  fc:	89 44 24 04          	mov    %eax,0x4(%esp)
- 100:	8b 45 e4             	mov    -0x1c(%ebp),%eax
- 103:	89 04 24             	mov    %eax,(%esp)
- 106:	e8 15 05 00 00       	call   620 <fstat>
- 10b:	85 c0                	test   %eax,%eax
- 10d:	79 2b                	jns    13a <ls+0x8c>
-    printf(2, "ls: cannot stat %s\n", path);
- 10f:	8b 45 08             	mov    0x8(%ebp),%eax
- 112:	89 44 24 08          	mov    %eax,0x8(%esp)
- 116:	c7 44 24 04 3f 0b 00 	movl   $0xb3f,0x4(%esp)
- 11d:	00 
- 11e:	c7 04 24 02 00 00 00 	movl   $0x2,(%esp)
- 125:	e8 3d 06 00 00       	call   767 <printf>
-    close(fd);
- 12a:	8b 45 e4             	mov    -0x1c(%ebp),%eax
- 12d:	89 04 24             	mov    %eax,(%esp)
- 130:	e8 bb 04 00 00       	call   5f0 <close>
-    return;
- 135:	e9 bd 01 00 00       	jmp    2f7 <ls+0x249>
-  }
-  
-  switch(st.type){
- 13a:	0f b7 85 bc fd ff ff 	movzwl -0x244(%ebp),%eax
- 141:	98                   	cwtl   
- 142:	83 f8 01             	cmp    $0x1,%eax
- 145:	74 53                	je     19a <ls+0xec>
- 147:	83 f8 02             	cmp    $0x2,%eax
- 14a:	0f 85 9c 01 00 00    	jne    2ec <ls+0x23e>
-  case T_FILE:
-    printf(1, "%s %d %d %d\n", fmtname(path), st.type, st.ino, st.size);
- 150:	8b bd cc fd ff ff    	mov    -0x234(%ebp),%edi
- 156:	8b b5 c4 fd ff ff    	mov    -0x23c(%ebp),%esi
- 15c:	0f b7 85 bc fd ff ff 	movzwl -0x244(%ebp),%eax
- 163:	0f bf d8             	movswl %ax,%ebx
- 166:	8b 45 08             	mov    0x8(%ebp),%eax
- 169:	89 04 24             	mov    %eax,(%esp)
- 16c:	e8 8f fe ff ff       	call   0 <fmtname>
- 171:	89 7c 24 14          	mov    %edi,0x14(%esp)
- 175:	89 74 24 10          	mov    %esi,0x10(%esp)
- 179:	89 5c 24 0c          	mov    %ebx,0xc(%esp)
- 17d:	89 44 24 08          	mov    %eax,0x8(%esp)
- 181:	c7 44 24 04 53 0b 00 	movl   $0xb53,0x4(%esp)
- 188:	00 
- 189:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
- 190:	e8 d2 05 00 00       	call   767 <printf>
-    break;
- 195:	e9 52 01 00 00       	jmp    2ec <ls+0x23e>
-  
-  case T_DIR:
-    if(strlen(path) + 1 + DIRSIZ + 1 > sizeof buf){
- 19a:	8b 45 08             	mov    0x8(%ebp),%eax
- 19d:	89 04 24             	mov    %eax,(%esp)
- 1a0:	e8 59 02 00 00       	call   3fe <strlen>
- 1a5:	83 c0 10             	add    $0x10,%eax
- 1a8:	3d 00 02 00 00       	cmp    $0x200,%eax
- 1ad:	76 19                	jbe    1c8 <ls+0x11a>
-      printf(1, "ls: path too long\n");
- 1af:	c7 44 24 04 60 0b 00 	movl   $0xb60,0x4(%esp)
- 1b6:	00 
- 1b7:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
- 1be:	e8 a4 05 00 00       	call   767 <printf>
-      break;
- 1c3:	e9 24 01 00 00       	jmp    2ec <ls+0x23e>
-    }
-    strcpy(buf, path);
- 1c8:	8b 45 08             	mov    0x8(%ebp),%eax
- 1cb:	89 44 24 04          	mov    %eax,0x4(%esp)
- 1cf:	8d 85 e0 fd ff ff    	lea    -0x220(%ebp),%eax
- 1d5:	89 04 24             	mov    %eax,(%esp)
- 1d8:	e8 ac 01 00 00       	call   389 <strcpy>
-    p = buf+strlen(buf);
- 1dd:	8d 85 e0 fd ff ff    	lea    -0x220(%ebp),%eax
- 1e3:	89 04 24             	mov    %eax,(%esp)
- 1e6:	e8 13 02 00 00       	call   3fe <strlen>
- 1eb:	8d 95 e0 fd ff ff    	lea    -0x220(%ebp),%edx
- 1f1:	01 d0                	add    %edx,%eax
- 1f3:	89 45 e0             	mov    %eax,-0x20(%ebp)
-    *p++ = '/';
- 1f6:	8b 45 e0             	mov    -0x20(%ebp),%eax
- 1f9:	c6 00 2f             	movb   $0x2f,(%eax)
- 1fc:	83 45 e0 01          	addl   $0x1,-0x20(%ebp)
-    while(read(fd, &de, sizeof(de)) == sizeof(de)){
- 200:	e9 c0 00 00 00       	jmp    2c5 <ls+0x217>
-      if(de.inum == 0)
- 205:	0f b7 85 d0 fd ff ff 	movzwl -0x230(%ebp),%eax
- 20c:	66 85 c0             	test   %ax,%ax
- 20f:	0f 84 af 00 00 00    	je     2c4 <ls+0x216>
-        continue;
-      memmove(p, de.name, DIRSIZ);
- 215:	c7 44 24 08 0e 00 00 	movl   $0xe,0x8(%esp)
- 21c:	00 
- 21d:	8d 85 d0 fd ff ff    	lea    -0x230(%ebp),%eax
- 223:	83 c0 02             	add    $0x2,%eax
- 226:	89 44 24 04          	mov    %eax,0x4(%esp)
- 22a:	8b 45 e0             	mov    -0x20(%ebp),%eax
- 22d:	89 04 24             	mov    %eax,(%esp)
- 230:	e8 4d 03 00 00       	call   582 <memmove>
-      p[DIRSIZ] = 0;
- 235:	8b 45 e0             	mov    -0x20(%ebp),%eax
- 238:	83 c0 0e             	add    $0xe,%eax
- 23b:	c6 00 00             	movb   $0x0,(%eax)
-      if(stat(buf, &st) < 0){
- 23e:	8d 85 bc fd ff ff    	lea    -0x244(%ebp),%eax
- 244:	89 44 24 04          	mov    %eax,0x4(%esp)
- 248:	8d 85 e0 fd ff ff    	lea    -0x220(%ebp),%eax
- 24e:	89 04 24             	mov    %eax,(%esp)
- 251:	e8 93 02 00 00       	call   4e9 <stat>
- 256:	85 c0                	test   %eax,%eax
- 258:	79 20                	jns    27a <ls+0x1cc>
-        printf(1, "ls: cannot stat %s\n", buf);
- 25a:	8d 85 e0 fd ff ff    	lea    -0x220(%ebp),%eax
- 260:	89 44 24 08          	mov    %eax,0x8(%esp)
- 264:	c7 44 24 04 3f 0b 00 	movl   $0xb3f,0x4(%esp)
- 26b:	00 
- 26c:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
- 273:	e8 ef 04 00 00       	call   767 <printf>
-        continue;
- 278:	eb 4b                	jmp    2c5 <ls+0x217>
-      }
-      printf(1, "%s %d %d %d\n", fmtname(buf), st.type, st.ino, st.size);
- 27a:	8b bd cc fd ff ff    	mov    -0x234(%ebp),%edi
- 280:	8b b5 c4 fd ff ff    	mov    -0x23c(%ebp),%esi
- 286:	0f b7 85 bc fd ff ff 	movzwl -0x244(%ebp),%eax
- 28d:	0f bf d8             	movswl %ax,%ebx
- 290:	8d 85 e0 fd ff ff    	lea    -0x220(%ebp),%eax
- 296:	89 04 24             	mov    %eax,(%esp)
- 299:	e8 62 fd ff ff       	call   0 <fmtname>
- 29e:	89 7c 24 14          	mov    %edi,0x14(%esp)
- 2a2:	89 74 24 10          	mov    %esi,0x10(%esp)
- 2a6:	89 5c 24 0c          	mov    %ebx,0xc(%esp)
- 2aa:	89 44 24 08          	mov    %eax,0x8(%esp)
- 2ae:	c7 44 24 04 53 0b 00 	movl   $0xb53,0x4(%esp)
- 2b5:	00 
- 2b6:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
- 2bd:	e8 a5 04 00 00       	call   767 <printf>
- 2c2:	eb 01                	jmp    2c5 <ls+0x217>
-    strcpy(buf, path);
-    p = buf+strlen(buf);
-    *p++ = '/';
-    while(read(fd, &de, sizeof(de)) == sizeof(de)){
-      if(de.inum == 0)
-        continue;
- 2c4:	90                   	nop
-      break;
-    }
-    strcpy(buf, path);
-    p = buf+strlen(buf);
-    *p++ = '/';
-    while(read(fd, &de, sizeof(de)) == sizeof(de)){
- 2c5:	c7 44 24 08 10 00 00 	movl   $0x10,0x8(%esp)
- 2cc:	00 
- 2cd:	8d 85 d0 fd ff ff    	lea    -0x230(%ebp),%eax
- 2d3:	89 44 24 04          	mov    %eax,0x4(%esp)
- 2d7:	8b 45 e4             	mov    -0x1c(%ebp),%eax
- 2da:	89 04 24             	mov    %eax,(%esp)
- 2dd:	e8 fe 02 00 00       	call   5e0 <read>
- 2e2:	83 f8 10             	cmp    $0x10,%eax
- 2e5:	0f 84 1a ff ff ff    	je     205 <ls+0x157>
-        printf(1, "ls: cannot stat %s\n", buf);
-        continue;
-      }
-      printf(1, "%s %d %d %d\n", fmtname(buf), st.type, st.ino, st.size);
-    }
-    break;
- 2eb:	90                   	nop
-  }
-  close(fd);
- 2ec:	8b 45 e4             	mov    -0x1c(%ebp),%eax
- 2ef:	89 04 24             	mov    %eax,(%esp)
- 2f2:	e8 f9 02 00 00       	call   5f0 <close>
-}
- 2f7:	81 c4 5c 02 00 00    	add    $0x25c,%esp
- 2fd:	5b                   	pop    %ebx
- 2fe:	5e                   	pop    %esi
- 2ff:	5f                   	pop    %edi
- 300:	5d                   	pop    %ebp
- 301:	c3                   	ret    
-
-00000302 <main>:
-
-int
-main(int argc, char *argv[])
-{
- 302:	55                   	push   %ebp
- 303:	89 e5                	mov    %esp,%ebp
- 305:	83 e4 f0             	and    $0xfffffff0,%esp
- 308:	83 ec 20             	sub    $0x20,%esp
-  int i;
-
-  if(argc < 2){
- 30b:	83 7d 08 01          	cmpl   $0x1,0x8(%ebp)
- 30f:	7f 18                	jg     329 <main+0x27>
-    ls(".");
- 311:	c7 04 24 73 0b 00 00 	movl   $0xb73,(%esp)
- 318:	e8 91 fd ff ff       	call   ae <ls>
-    exit(EXIT_STATUS_DEFAULT);
- 31d:	c7 04 24 02 00 00 00 	movl   $0x2,(%esp)
- 324:	e8 9f 02 00 00       	call   5c8 <exit>
-  }
-  for(i=1; i<argc; i++)
- 329:	c7 44 24 1c 01 00 00 	movl   $0x1,0x1c(%esp)
- 330:	00 
- 331:	eb 19                	jmp    34c <main+0x4a>
-    ls(argv[i]);
- 333:	8b 44 24 1c          	mov    0x1c(%esp),%eax
- 337:	c1 e0 02             	shl    $0x2,%eax
- 33a:	03 45 0c             	add    0xc(%ebp),%eax
- 33d:	8b 00                	mov    (%eax),%eax
- 33f:	89 04 24             	mov    %eax,(%esp)
- 342:	e8 67 fd ff ff       	call   ae <ls>
-
-  if(argc < 2){
-    ls(".");
-    exit(EXIT_STATUS_DEFAULT);
-  }
-  for(i=1; i<argc; i++)
- 347:	83 44 24 1c 01       	addl   $0x1,0x1c(%esp)
- 34c:	8b 44 24 1c          	mov    0x1c(%esp),%eax
- 350:	3b 45 08             	cmp    0x8(%ebp),%eax
- 353:	7c de                	jl     333 <main+0x31>
-    ls(argv[i]);
-  exit(EXIT_STATUS_DEFAULT);
- 355:	c7 04 24 02 00 00 00 	movl   $0x2,(%esp)
- 35c:	e8 67 02 00 00       	call   5c8 <exit>
- 361:	90                   	nop
- 362:	90                   	nop
- 363:	90                   	nop
-
-00000364 <stosb>:
-               "cc");
-}
-
-static inline void
-stosb(void *addr, int data, int cnt)
-{
- 364:	55                   	push   %ebp
- 365:	89 e5                	mov    %esp,%ebp
- 367:	57                   	push   %edi
- 368:	53                   	push   %ebx
-  asm volatile("cld; rep stosb" :
- 369:	8b 4d 08             	mov    0x8(%ebp),%ecx
- 36c:	8b 55 10             	mov    0x10(%ebp),%edx
- 36f:	8b 45 0c             	mov    0xc(%ebp),%eax
- 372:	89 cb                	mov    %ecx,%ebx
- 374:	89 df                	mov    %ebx,%edi
- 376:	89 d1                	mov    %edx,%ecx
- 378:	fc                   	cld    
- 379:	f3 aa                	rep stos %al,%es:(%edi)
- 37b:	89 ca                	mov    %ecx,%edx
- 37d:	89 fb                	mov    %edi,%ebx
- 37f:	89 5d 08             	mov    %ebx,0x8(%ebp)
- 382:	89 55 10             	mov    %edx,0x10(%ebp)
-               "=D" (addr), "=c" (cnt) :
-               "0" (addr), "1" (cnt), "a" (data) :
-               "memory", "cc");
-}
- 385:	5b                   	pop    %ebx
- 386:	5f                   	pop    %edi
- 387:	5d                   	pop    %ebp
- 388:	c3                   	ret    
-
-00000389 <strcpy>:
-#include "user.h"
-#include "x86.h"
-
-char*
-strcpy(char *s, char *t)
-{
- 389:	55                   	push   %ebp
- 38a:	89 e5                	mov    %esp,%ebp
- 38c:	83 ec 10             	sub    $0x10,%esp
-  char *os;
-
-  os = s;
- 38f:	8b 45 08             	mov    0x8(%ebp),%eax
- 392:	89 45 fc             	mov    %eax,-0x4(%ebp)
-  while((*s++ = *t++) != 0)
- 395:	90                   	nop
- 396:	8b 45 0c             	mov    0xc(%ebp),%eax
- 399:	0f b6 10             	movzbl (%eax),%edx
- 39c:	8b 45 08             	mov    0x8(%ebp),%eax
- 39f:	88 10                	mov    %dl,(%eax)
- 3a1:	8b 45 08             	mov    0x8(%ebp),%eax
- 3a4:	0f b6 00             	movzbl (%eax),%eax
- 3a7:	84 c0                	test   %al,%al
- 3a9:	0f 95 c0             	setne  %al
- 3ac:	83 45 08 01          	addl   $0x1,0x8(%ebp)
- 3b0:	83 45 0c 01          	addl   $0x1,0xc(%ebp)
- 3b4:	84 c0                	test   %al,%al
- 3b6:	75 de                	jne    396 <strcpy+0xd>
-    ;
-  return os;
- 3b8:	8b 45 fc             	mov    -0x4(%ebp),%eax
-}
- 3bb:	c9                   	leave  
- 3bc:	c3                   	ret    
-
-000003bd <strcmp>:
-
-int
-strcmp(const char *p, const char *q)
-{
- 3bd:	55                   	push   %ebp
- 3be:	89 e5                	mov    %esp,%ebp
-  while(*p && *p == *q)
- 3c0:	eb 08                	jmp    3ca <strcmp+0xd>
-    p++, q++;
- 3c2:	83 45 08 01          	addl   $0x1,0x8(%ebp)
- 3c6:	83 45 0c 01          	addl   $0x1,0xc(%ebp)
-}
-
-int
-strcmp(const char *p, const char *q)
-{
-  while(*p && *p == *q)
- 3ca:	8b 45 08             	mov    0x8(%ebp),%eax
- 3cd:	0f b6 00             	movzbl (%eax),%eax
- 3d0:	84 c0                	test   %al,%al
- 3d2:	74 10                	je     3e4 <strcmp+0x27>
- 3d4:	8b 45 08             	mov    0x8(%ebp),%eax
- 3d7:	0f b6 10             	movzbl (%eax),%edx
- 3da:	8b 45 0c             	mov    0xc(%ebp),%eax
- 3dd:	0f b6 00             	movzbl (%eax),%eax
- 3e0:	38 c2                	cmp    %al,%dl
- 3e2:	74 de                	je     3c2 <strcmp+0x5>
-    p++, q++;
-  return (uchar)*p - (uchar)*q;
- 3e4:	8b 45 08             	mov    0x8(%ebp),%eax
- 3e7:	0f b6 00             	movzbl (%eax),%eax
- 3ea:	0f b6 d0             	movzbl %al,%edx
- 3ed:	8b 45 0c             	mov    0xc(%ebp),%eax
- 3f0:	0f b6 00             	movzbl (%eax),%eax
- 3f3:	0f b6 c0             	movzbl %al,%eax
- 3f6:	89 d1                	mov    %edx,%ecx
- 3f8:	29 c1                	sub    %eax,%ecx
- 3fa:	89 c8                	mov    %ecx,%eax
-}
- 3fc:	5d                   	pop    %ebp
- 3fd:	c3                   	ret    
-
-000003fe <strlen>:
-
-uint
-strlen(char *s)
-{
- 3fe:	55                   	push   %ebp
- 3ff:	89 e5                	mov    %esp,%ebp
- 401:	83 ec 10             	sub    $0x10,%esp
-  int n;
-
-  for(n = 0; s[n]; n++)
- 404:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
- 40b:	eb 04                	jmp    411 <strlen+0x13>
- 40d:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
- 411:	8b 45 fc             	mov    -0x4(%ebp),%eax
- 414:	03 45 08             	add    0x8(%ebp),%eax
- 417:	0f b6 00             	movzbl (%eax),%eax
- 41a:	84 c0                	test   %al,%al
- 41c:	75 ef                	jne    40d <strlen+0xf>
-    ;
-  return n;
- 41e:	8b 45 fc             	mov    -0x4(%ebp),%eax
-}
- 421:	c9                   	leave  
- 422:	c3                   	ret    
-
-00000423 <memset>:
-
-void*
-memset(void *dst, int c, uint n)
-{
- 423:	55                   	push   %ebp
- 424:	89 e5                	mov    %esp,%ebp
- 426:	83 ec 0c             	sub    $0xc,%esp
-  stosb(dst, c, n);
- 429:	8b 45 10             	mov    0x10(%ebp),%eax
- 42c:	89 44 24 08          	mov    %eax,0x8(%esp)
- 430:	8b 45 0c             	mov    0xc(%ebp),%eax
- 433:	89 44 24 04          	mov    %eax,0x4(%esp)
- 437:	8b 45 08             	mov    0x8(%ebp),%eax
- 43a:	89 04 24             	mov    %eax,(%esp)
- 43d:	e8 22 ff ff ff       	call   364 <stosb>
-  return dst;
- 442:	8b 45 08             	mov    0x8(%ebp),%eax
-}
- 445:	c9                   	leave  
- 446:	c3                   	ret    
-
-00000447 <strchr>:
-
-char*
-strchr(const char *s, char c)
-{
- 447:	55                   	push   %ebp
- 448:	89 e5                	mov    %esp,%ebp
- 44a:	83 ec 04             	sub    $0x4,%esp
- 44d:	8b 45 0c             	mov    0xc(%ebp),%eax
- 450:	88 45 fc             	mov    %al,-0x4(%ebp)
-  for(; *s; s++)
- 453:	eb 14                	jmp    469 <strchr+0x22>
-    if(*s == c)
- 455:	8b 45 08             	mov    0x8(%ebp),%eax
- 458:	0f b6 00             	movzbl (%eax),%eax
- 45b:	3a 45 fc             	cmp    -0x4(%ebp),%al
- 45e:	75 05                	jne    465 <strchr+0x1e>
-      return (char*)s;
- 460:	8b 45 08             	mov    0x8(%ebp),%eax
- 463:	eb 13                	jmp    478 <strchr+0x31>
-}
-
-char*
-strchr(const char *s, char c)
-{
-  for(; *s; s++)
- 465:	83 45 08 01          	addl   $0x1,0x8(%ebp)
- 469:	8b 45 08             	mov    0x8(%ebp),%eax
- 46c:	0f b6 00             	movzbl (%eax),%eax
- 46f:	84 c0                	test   %al,%al
- 471:	75 e2                	jne    455 <strchr+0xe>
-    if(*s == c)
-      return (char*)s;
-  return 0;
- 473:	b8 00 00 00 00       	mov    $0x0,%eax
-}
- 478:	c9                   	leave  
- 479:	c3                   	ret    
-
-0000047a <gets>:
-
-char*
-gets(char *buf, int max)
-{
- 47a:	55                   	push   %ebp
- 47b:	89 e5                	mov    %esp,%ebp
- 47d:	83 ec 28             	sub    $0x28,%esp
-  int i, cc;
-  char c;
-
-  for(i=0; i+1 < max; ){
- 480:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
- 487:	eb 44                	jmp    4cd <gets+0x53>
-    cc = read(0, &c, 1);
- 489:	c7 44 24 08 01 00 00 	movl   $0x1,0x8(%esp)
- 490:	00 
- 491:	8d 45 ef             	lea    -0x11(%ebp),%eax
- 494:	89 44 24 04          	mov    %eax,0x4(%esp)
- 498:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
- 49f:	e8 3c 01 00 00       	call   5e0 <read>
- 4a4:	89 45 f0             	mov    %eax,-0x10(%ebp)
-    if(cc < 1)
- 4a7:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
- 4ab:	7e 2d                	jle    4da <gets+0x60>
-      break;
-    buf[i++] = c;
- 4ad:	8b 45 f4             	mov    -0xc(%ebp),%eax
- 4b0:	03 45 08             	add    0x8(%ebp),%eax
- 4b3:	0f b6 55 ef          	movzbl -0x11(%ebp),%edx
- 4b7:	88 10                	mov    %dl,(%eax)
- 4b9:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
-    if(c == '\n' || c == '\r')
- 4bd:	0f b6 45 ef          	movzbl -0x11(%ebp),%eax
- 4c1:	3c 0a                	cmp    $0xa,%al
- 4c3:	74 16                	je     4db <gets+0x61>
- 4c5:	0f b6 45 ef          	movzbl -0x11(%ebp),%eax
- 4c9:	3c 0d                	cmp    $0xd,%al
- 4cb:	74 0e                	je     4db <gets+0x61>
-gets(char *buf, int max)
-{
-  int i, cc;
-  char c;
-
-  for(i=0; i+1 < max; ){
- 4cd:	8b 45 f4             	mov    -0xc(%ebp),%eax
- 4d0:	83 c0 01             	add    $0x1,%eax
- 4d3:	3b 45 0c             	cmp    0xc(%ebp),%eax
- 4d6:	7c b1                	jl     489 <gets+0xf>
- 4d8:	eb 01                	jmp    4db <gets+0x61>
-    cc = read(0, &c, 1);
-    if(cc < 1)
-      break;
- 4da:	90                   	nop
-    buf[i++] = c;
-    if(c == '\n' || c == '\r')
-      break;
-  }
-  buf[i] = '\0';
- 4db:	8b 45 f4             	mov    -0xc(%ebp),%eax
- 4de:	03 45 08             	add    0x8(%ebp),%eax
- 4e1:	c6 00 00             	movb   $0x0,(%eax)
-  return buf;
- 4e4:	8b 45 08             	mov    0x8(%ebp),%eax
-}
- 4e7:	c9                   	leave  
- 4e8:	c3                   	ret    
-
-000004e9 <stat>:
-
-int
-stat(char *n, struct stat *st)
-{
- 4e9:	55                   	push   %ebp
- 4ea:	89 e5                	mov    %esp,%ebp
- 4ec:	83 ec 28             	sub    $0x28,%esp
-  int fd;
-  int r;
-
-  fd = open(n, O_RDONLY);
- 4ef:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
- 4f6:	00 
- 4f7:	8b 45 08             	mov    0x8(%ebp),%eax
- 4fa:	89 04 24             	mov    %eax,(%esp)
- 4fd:	e8 06 01 00 00       	call   608 <open>
- 502:	89 45 f4             	mov    %eax,-0xc(%ebp)
-  if(fd < 0)
- 505:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
- 509:	79 07                	jns    512 <stat+0x29>
-    return -1;
- 50b:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
- 510:	eb 23                	jmp    535 <stat+0x4c>
-  r = fstat(fd, st);
- 512:	8b 45 0c             	mov    0xc(%ebp),%eax
- 515:	89 44 24 04          	mov    %eax,0x4(%esp)
- 519:	8b 45 f4             	mov    -0xc(%ebp),%eax
- 51c:	89 04 24             	mov    %eax,(%esp)
- 51f:	e8 fc 00 00 00       	call   620 <fstat>
- 524:	89 45 f0             	mov    %eax,-0x10(%ebp)
-  close(fd);
- 527:	8b 45 f4             	mov    -0xc(%ebp),%eax
- 52a:	89 04 24             	mov    %eax,(%esp)
- 52d:	e8 be 00 00 00       	call   5f0 <close>
-  return r;
- 532:	8b 45 f0             	mov    -0x10(%ebp),%eax
-}
- 535:	c9                   	leave  
- 536:	c3                   	ret    
-
-00000537 <atoi>:
-
-int
-atoi(const char *s)
-{
- 537:	55                   	push   %ebp
- 538:	89 e5                	mov    %esp,%ebp
- 53a:	83 ec 10             	sub    $0x10,%esp
-  int n;
-
-  n = 0;
- 53d:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
-  while('0' <= *s && *s <= '9')
- 544:	eb 23                	jmp    569 <atoi+0x32>
-    n = n*10 + *s++ - '0';
- 546:	8b 55 fc             	mov    -0x4(%ebp),%edx
- 549:	89 d0                	mov    %edx,%eax
- 54b:	c1 e0 02             	shl    $0x2,%eax
- 54e:	01 d0                	add    %edx,%eax
- 550:	01 c0                	add    %eax,%eax
- 552:	89 c2                	mov    %eax,%edx
- 554:	8b 45 08             	mov    0x8(%ebp),%eax
- 557:	0f b6 00             	movzbl (%eax),%eax
- 55a:	0f be c0             	movsbl %al,%eax
- 55d:	01 d0                	add    %edx,%eax
- 55f:	83 e8 30             	sub    $0x30,%eax
- 562:	89 45 fc             	mov    %eax,-0x4(%ebp)
- 565:	83 45 08 01          	addl   $0x1,0x8(%ebp)
-atoi(const char *s)
-{
-  int n;
-
-  n = 0;
-  while('0' <= *s && *s <= '9')
- 569:	8b 45 08             	mov    0x8(%ebp),%eax
- 56c:	0f b6 00             	movzbl (%eax),%eax
- 56f:	3c 2f                	cmp    $0x2f,%al
- 571:	7e 0a                	jle    57d <atoi+0x46>
- 573:	8b 45 08             	mov    0x8(%ebp),%eax
- 576:	0f b6 00             	movzbl (%eax),%eax
- 579:	3c 39                	cmp    $0x39,%al
- 57b:	7e c9                	jle    546 <atoi+0xf>
-    n = n*10 + *s++ - '0';
-  return n;
- 57d:	8b 45 fc             	mov    -0x4(%ebp),%eax
-}
- 580:	c9                   	leave  
- 581:	c3                   	ret    
-
-00000582 <memmove>:
-
-void*
-memmove(void *vdst, void *vsrc, int n)
-{
- 582:	55                   	push   %ebp
- 583:	89 e5                	mov    %esp,%ebp
- 585:	83 ec 10             	sub    $0x10,%esp
-  char *dst, *src;
-  
-  dst = vdst;
- 588:	8b 45 08             	mov    0x8(%ebp),%eax
- 58b:	89 45 fc             	mov    %eax,-0x4(%ebp)
-  src = vsrc;
- 58e:	8b 45 0c             	mov    0xc(%ebp),%eax
- 591:	89 45 f8             	mov    %eax,-0x8(%ebp)
-  while(n-- > 0)
- 594:	eb 13                	jmp    5a9 <memmove+0x27>
-    *dst++ = *src++;
- 596:	8b 45 f8             	mov    -0x8(%ebp),%eax
- 599:	0f b6 10             	movzbl (%eax),%edx
- 59c:	8b 45 fc             	mov    -0x4(%ebp),%eax
- 59f:	88 10                	mov    %dl,(%eax)
- 5a1:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
- 5a5:	83 45 f8 01          	addl   $0x1,-0x8(%ebp)
-{
-  char *dst, *src;
-  
-  dst = vdst;
-  src = vsrc;
-  while(n-- > 0)
- 5a9:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
- 5ad:	0f 9f c0             	setg   %al
- 5b0:	83 6d 10 01          	subl   $0x1,0x10(%ebp)
- 5b4:	84 c0                	test   %al,%al
- 5b6:	75 de                	jne    596 <memmove+0x14>
-    *dst++ = *src++;
-  return vdst;
- 5b8:	8b 45 08             	mov    0x8(%ebp),%eax
-}
- 5bb:	c9                   	leave  
- 5bc:	c3                   	ret    
- 5bd:	90                   	nop
- 5be:	90                   	nop
- 5bf:	90                   	nop
-
-000005c0 <fork>:
-  name: \
-    movl $SYS_ ## name, %eax; \
-    int $T_SYSCALL; \
-    ret
-
-SYSCALL(fork)
- 5c0:	b8 01 00 00 00       	mov    $0x1,%eax
- 5c5:	cd 40                	int    $0x40
- 5c7:	c3                   	ret    
-
-000005c8 <exit>:
-SYSCALL(exit)
- 5c8:	b8 02 00 00 00       	mov    $0x2,%eax
- 5cd:	cd 40                	int    $0x40
- 5cf:	c3                   	ret    
-
-000005d0 <wait>:
-SYSCALL(wait)
- 5d0:	b8 03 00 00 00       	mov    $0x3,%eax
- 5d5:	cd 40                	int    $0x40
- 5d7:	c3                   	ret    
-
-000005d8 <pipe>:
-SYSCALL(pipe)
- 5d8:	b8 04 00 00 00       	mov    $0x4,%eax
- 5dd:	cd 40                	int    $0x40
- 5df:	c3                   	ret    
-
-000005e0 <read>:
-SYSCALL(read)
- 5e0:	b8 05 00 00 00       	mov    $0x5,%eax
- 5e5:	cd 40                	int    $0x40
- 5e7:	c3                   	ret    
-
-000005e8 <write>:
-SYSCALL(write)
- 5e8:	b8 10 00 00 00       	mov    $0x10,%eax
- 5ed:	cd 40                	int    $0x40
- 5ef:	c3                   	ret    
-
-000005f0 <close>:
-SYSCALL(close)
- 5f0:	b8 15 00 00 00       	mov    $0x15,%eax
- 5f5:	cd 40                	int    $0x40
- 5f7:	c3                   	ret    
-
-000005f8 <kill>:
-SYSCALL(kill)
- 5f8:	b8 06 00 00 00       	mov    $0x6,%eax
- 5fd:	cd 40                	int    $0x40
- 5ff:	c3                   	ret    
-
-00000600 <exec>:
-SYSCALL(exec)
- 600:	b8 07 00 00 00       	mov    $0x7,%eax
- 605:	cd 40                	int    $0x40
- 607:	c3                   	ret    
-
-00000608 <open>:
-SYSCALL(open)
- 608:	b8 0f 00 00 00       	mov    $0xf,%eax
- 60d:	cd 40                	int    $0x40
- 60f:	c3                   	ret    
-
-00000610 <mknod>:
-SYSCALL(mknod)
- 610:	b8 11 00 00 00       	mov    $0x11,%eax
- 615:	cd 40                	int    $0x40
- 617:	c3                   	ret    
-
-00000618 <unlink>:
-SYSCALL(unlink)
- 618:	b8 12 00 00 00       	mov    $0x12,%eax
- 61d:	cd 40                	int    $0x40
- 61f:	c3                   	ret    
-
-00000620 <fstat>:
-SYSCALL(fstat)
- 620:	b8 08 00 00 00       	mov    $0x8,%eax
- 625:	cd 40                	int    $0x40
- 627:	c3                   	ret    
-
-00000628 <link>:
-SYSCALL(link)
- 628:	b8 13 00 00 00       	mov    $0x13,%eax
- 62d:	cd 40                	int    $0x40
- 62f:	c3                   	ret    
-
-00000630 <mkdir>:
-SYSCALL(mkdir)
- 630:	b8 14 00 00 00       	mov    $0x14,%eax
- 635:	cd 40                	int    $0x40
- 637:	c3                   	ret    
-
-00000638 <chdir>:
-SYSCALL(chdir)
- 638:	b8 09 00 00 00       	mov    $0x9,%eax
- 63d:	cd 40                	int    $0x40
- 63f:	c3                   	ret    
-
-00000640 <dup>:
-SYSCALL(dup)
- 640:	b8 0a 00 00 00       	mov    $0xa,%eax
- 645:	cd 40                	int    $0x40
- 647:	c3                   	ret    
-
-00000648 <getpid>:
-SYSCALL(getpid)
- 648:	b8 0b 00 00 00       	mov    $0xb,%eax
- 64d:	cd 40                	int    $0x40
- 64f:	c3                   	ret    
-
-00000650 <sbrk>:
-SYSCALL(sbrk)
- 650:	b8 0c 00 00 00       	mov    $0xc,%eax
- 655:	cd 40                	int    $0x40
- 657:	c3                   	ret    
-
-00000658 <sleep>:
-SYSCALL(sleep)
- 658:	b8 0d 00 00 00       	mov    $0xd,%eax
- 65d:	cd 40                	int    $0x40
- 65f:	c3                   	ret    
-
-00000660 <uptime>:
-SYSCALL(uptime)
- 660:	b8 0e 00 00 00       	mov    $0xe,%eax
- 665:	cd 40                	int    $0x40
- 667:	c3                   	ret    
-
-00000668 <waitpid>:
-SYSCALL(waitpid)
- 668:	b8 16 00 00 00       	mov    $0x16,%eax
- 66d:	cd 40                	int    $0x40
- 66f:	c3                   	ret    
-
-00000670 <wait_stat>:
-SYSCALL(wait_stat)
- 670:	b8 17 00 00 00       	mov    $0x17,%eax
- 675:	cd 40                	int    $0x40
- 677:	c3                   	ret    
-
-00000678 <list_pgroup>:
-SYSCALL(list_pgroup)
- 678:	b8 18 00 00 00       	mov    $0x18,%eax
- 67d:	cd 40                	int    $0x40
- 67f:	c3                   	ret    
-
-00000680 <foreground>:
-SYSCALL(foreground)
- 680:	b8 19 00 00 00       	mov    $0x19,%eax
- 685:	cd 40                	int    $0x40
- 687:	c3                   	ret    
-
-00000688 <set_priority>:
-SYSCALL(set_priority)
- 688:	b8 1a 00 00 00       	mov    $0x1a,%eax
- 68d:	cd 40                	int    $0x40
- 68f:	c3                   	ret    
-
-00000690 <putc>:
-#include "stat.h"
-#include "user.h"
-
-static void
-putc(int fd, char c)
-{
- 690:	55                   	push   %ebp
- 691:	89 e5                	mov    %esp,%ebp
- 693:	83 ec 28             	sub    $0x28,%esp
- 696:	8b 45 0c             	mov    0xc(%ebp),%eax
- 699:	88 45 f4             	mov    %al,-0xc(%ebp)
-  write(fd, &c, 1);
- 69c:	c7 44 24 08 01 00 00 	movl   $0x1,0x8(%esp)
- 6a3:	00 
- 6a4:	8d 45 f4             	lea    -0xc(%ebp),%eax
- 6a7:	89 44 24 04          	mov    %eax,0x4(%esp)
- 6ab:	8b 45 08             	mov    0x8(%ebp),%eax
- 6ae:	89 04 24             	mov    %eax,(%esp)
- 6b1:	e8 32 ff ff ff       	call   5e8 <write>
-}
- 6b6:	c9                   	leave  
- 6b7:	c3                   	ret    
-
-000006b8 <printint>:
-
-static void
-printint(int fd, int xx, int base, int sgn)
-{
- 6b8:	55                   	push   %ebp
- 6b9:	89 e5                	mov    %esp,%ebp
- 6bb:	83 ec 48             	sub    $0x48,%esp
-  static char digits[] = "0123456789ABCDEF";
-  char buf[16];
-  int i, neg;
-  uint x;
-
-  neg = 0;
- 6be:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
-  if(sgn && xx < 0){
- 6c5:	83 7d 14 00          	cmpl   $0x0,0x14(%ebp)
- 6c9:	74 17                	je     6e2 <printint+0x2a>
- 6cb:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
- 6cf:	79 11                	jns    6e2 <printint+0x2a>
-    neg = 1;
- 6d1:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
-    x = -xx;
- 6d8:	8b 45 0c             	mov    0xc(%ebp),%eax
- 6db:	f7 d8                	neg    %eax
- 6dd:	89 45 ec             	mov    %eax,-0x14(%ebp)
- 6e0:	eb 06                	jmp    6e8 <printint+0x30>
-  } else {
-    x = xx;
- 6e2:	8b 45 0c             	mov    0xc(%ebp),%eax
- 6e5:	89 45 ec             	mov    %eax,-0x14(%ebp)
-  }
-
-  i = 0;
- 6e8:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
-  do{
-    buf[i++] = digits[x % base];
- 6ef:	8b 4d 10             	mov    0x10(%ebp),%ecx
- 6f2:	8b 45 ec             	mov    -0x14(%ebp),%eax
- 6f5:	ba 00 00 00 00       	mov    $0x0,%edx
- 6fa:	f7 f1                	div    %ecx
- 6fc:	89 d0                	mov    %edx,%eax
- 6fe:	0f b6 90 0c 0e 00 00 	movzbl 0xe0c(%eax),%edx
- 705:	8d 45 dc             	lea    -0x24(%ebp),%eax
- 708:	03 45 f4             	add    -0xc(%ebp),%eax
- 70b:	88 10                	mov    %dl,(%eax)
- 70d:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
-  }while((x /= base) != 0);
- 711:	8b 55 10             	mov    0x10(%ebp),%edx
- 714:	89 55 d4             	mov    %edx,-0x2c(%ebp)
- 717:	8b 45 ec             	mov    -0x14(%ebp),%eax
- 71a:	ba 00 00 00 00       	mov    $0x0,%edx
- 71f:	f7 75 d4             	divl   -0x2c(%ebp)
- 722:	89 45 ec             	mov    %eax,-0x14(%ebp)
- 725:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
- 729:	75 c4                	jne    6ef <printint+0x37>
-  if(neg)
- 72b:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
- 72f:	74 2a                	je     75b <printint+0xa3>
-    buf[i++] = '-';
- 731:	8d 45 dc             	lea    -0x24(%ebp),%eax
- 734:	03 45 f4             	add    -0xc(%ebp),%eax
- 737:	c6 00 2d             	movb   $0x2d,(%eax)
- 73a:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
-
-  while(--i >= 0)
- 73e:	eb 1b                	jmp    75b <printint+0xa3>
-    putc(fd, buf[i]);
- 740:	8d 45 dc             	lea    -0x24(%ebp),%eax
- 743:	03 45 f4             	add    -0xc(%ebp),%eax
- 746:	0f b6 00             	movzbl (%eax),%eax
- 749:	0f be c0             	movsbl %al,%eax
- 74c:	89 44 24 04          	mov    %eax,0x4(%esp)
- 750:	8b 45 08             	mov    0x8(%ebp),%eax
- 753:	89 04 24             	mov    %eax,(%esp)
- 756:	e8 35 ff ff ff       	call   690 <putc>
-    buf[i++] = digits[x % base];
-  }while((x /= base) != 0);
-  if(neg)
-    buf[i++] = '-';
-
-  while(--i >= 0)
- 75b:	83 6d f4 01          	subl   $0x1,-0xc(%ebp)
- 75f:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
- 763:	79 db                	jns    740 <printint+0x88>
-    putc(fd, buf[i]);
-}
- 765:	c9                   	leave  
- 766:	c3                   	ret    
-
-00000767 <printf>:
-
-// Print to the given fd. Only understands %d, %x, %p, %s.
-void
-printf(int fd, char *fmt, ...)
-{
- 767:	55                   	push   %ebp
- 768:	89 e5                	mov    %esp,%ebp
- 76a:	83 ec 38             	sub    $0x38,%esp
-  char *s;
-  int c, i, state;
-  uint *ap;
-
-  state = 0;
- 76d:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
-  ap = (uint*)(void*)&fmt + 1;
- 774:	8d 45 0c             	lea    0xc(%ebp),%eax
- 777:	83 c0 04             	add    $0x4,%eax
- 77a:	89 45 e8             	mov    %eax,-0x18(%ebp)
-  for(i = 0; fmt[i]; i++){
- 77d:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
- 784:	e9 7d 01 00 00       	jmp    906 <printf+0x19f>
-    c = fmt[i] & 0xff;
- 789:	8b 55 0c             	mov    0xc(%ebp),%edx
- 78c:	8b 45 f0             	mov    -0x10(%ebp),%eax
- 78f:	01 d0                	add    %edx,%eax
- 791:	0f b6 00             	movzbl (%eax),%eax
- 794:	0f be c0             	movsbl %al,%eax
- 797:	25 ff 00 00 00       	and    $0xff,%eax
- 79c:	89 45 e4             	mov    %eax,-0x1c(%ebp)
-    if(state == 0){
- 79f:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
- 7a3:	75 2c                	jne    7d1 <printf+0x6a>
-      if(c == '%'){
- 7a5:	83 7d e4 25          	cmpl   $0x25,-0x1c(%ebp)
- 7a9:	75 0c                	jne    7b7 <printf+0x50>
-        state = '%';
- 7ab:	c7 45 ec 25 00 00 00 	movl   $0x25,-0x14(%ebp)
- 7b2:	e9 4b 01 00 00       	jmp    902 <printf+0x19b>
-      } else {
-        putc(fd, c);
- 7b7:	8b 45 e4             	mov    -0x1c(%ebp),%eax
- 7ba:	0f be c0             	movsbl %al,%eax
- 7bd:	89 44 24 04          	mov    %eax,0x4(%esp)
- 7c1:	8b 45 08             	mov    0x8(%ebp),%eax
- 7c4:	89 04 24             	mov    %eax,(%esp)
- 7c7:	e8 c4 fe ff ff       	call   690 <putc>
- 7cc:	e9 31 01 00 00       	jmp    902 <printf+0x19b>
-      }
-    } else if(state == '%'){
- 7d1:	83 7d ec 25          	cmpl   $0x25,-0x14(%ebp)
- 7d5:	0f 85 27 01 00 00    	jne    902 <printf+0x19b>
-      if(c == 'd'){
- 7db:	83 7d e4 64          	cmpl   $0x64,-0x1c(%ebp)
- 7df:	75 2d                	jne    80e <printf+0xa7>
-        printint(fd, *ap, 10, 1);
- 7e1:	8b 45 e8             	mov    -0x18(%ebp),%eax
- 7e4:	8b 00                	mov    (%eax),%eax
- 7e6:	c7 44 24 0c 01 00 00 	movl   $0x1,0xc(%esp)
- 7ed:	00 
- 7ee:	c7 44 24 08 0a 00 00 	movl   $0xa,0x8(%esp)
- 7f5:	00 
- 7f6:	89 44 24 04          	mov    %eax,0x4(%esp)
- 7fa:	8b 45 08             	mov    0x8(%ebp),%eax
- 7fd:	89 04 24             	mov    %eax,(%esp)
- 800:	e8 b3 fe ff ff       	call   6b8 <printint>
-        ap++;
- 805:	83 45 e8 04          	addl   $0x4,-0x18(%ebp)
- 809:	e9 ed 00 00 00       	jmp    8fb <printf+0x194>
-      } else if(c == 'x' || c == 'p'){
- 80e:	83 7d e4 78          	cmpl   $0x78,-0x1c(%ebp)
- 812:	74 06                	je     81a <printf+0xb3>
- 814:	83 7d e4 70          	cmpl   $0x70,-0x1c(%ebp)
- 818:	75 2d                	jne    847 <printf+0xe0>
-        printint(fd, *ap, 16, 0);
- 81a:	8b 45 e8             	mov    -0x18(%ebp),%eax
- 81d:	8b 00                	mov    (%eax),%eax
- 81f:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
- 826:	00 
- 827:	c7 44 24 08 10 00 00 	movl   $0x10,0x8(%esp)
- 82e:	00 
- 82f:	89 44 24 04          	mov    %eax,0x4(%esp)
- 833:	8b 45 08             	mov    0x8(%ebp),%eax
- 836:	89 04 24             	mov    %eax,(%esp)
- 839:	e8 7a fe ff ff       	call   6b8 <printint>
-        ap++;
- 83e:	83 45 e8 04          	addl   $0x4,-0x18(%ebp)
- 842:	e9 b4 00 00 00       	jmp    8fb <printf+0x194>
-      } else if(c == 's'){
- 847:	83 7d e4 73          	cmpl   $0x73,-0x1c(%ebp)
- 84b:	75 46                	jne    893 <printf+0x12c>
-        s = (char*)*ap;
- 84d:	8b 45 e8             	mov    -0x18(%ebp),%eax
- 850:	8b 00                	mov    (%eax),%eax
- 852:	89 45 f4             	mov    %eax,-0xc(%ebp)
-        ap++;
- 855:	83 45 e8 04          	addl   $0x4,-0x18(%ebp)
-        if(s == 0)
- 859:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
- 85d:	75 27                	jne    886 <printf+0x11f>
-          s = "(null)";
- 85f:	c7 45 f4 75 0b 00 00 	movl   $0xb75,-0xc(%ebp)
-        while(*s != 0){
- 866:	eb 1e                	jmp    886 <printf+0x11f>
-          putc(fd, *s);
- 868:	8b 45 f4             	mov    -0xc(%ebp),%eax
- 86b:	0f b6 00             	movzbl (%eax),%eax
- 86e:	0f be c0             	movsbl %al,%eax
- 871:	89 44 24 04          	mov    %eax,0x4(%esp)
- 875:	8b 45 08             	mov    0x8(%ebp),%eax
- 878:	89 04 24             	mov    %eax,(%esp)
- 87b:	e8 10 fe ff ff       	call   690 <putc>
-          s++;
- 880:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
- 884:	eb 01                	jmp    887 <printf+0x120>
-      } else if(c == 's'){
-        s = (char*)*ap;
-        ap++;
-        if(s == 0)
-          s = "(null)";
-        while(*s != 0){
- 886:	90                   	nop
- 887:	8b 45 f4             	mov    -0xc(%ebp),%eax
- 88a:	0f b6 00             	movzbl (%eax),%eax
- 88d:	84 c0                	test   %al,%al
- 88f:	75 d7                	jne    868 <printf+0x101>
- 891:	eb 68                	jmp    8fb <printf+0x194>
-          putc(fd, *s);
-          s++;
-        }
-      } else if(c == 'c'){
- 893:	83 7d e4 63          	cmpl   $0x63,-0x1c(%ebp)
- 897:	75 1d                	jne    8b6 <printf+0x14f>
-        putc(fd, *ap);
- 899:	8b 45 e8             	mov    -0x18(%ebp),%eax
- 89c:	8b 00                	mov    (%eax),%eax
- 89e:	0f be c0             	movsbl %al,%eax
- 8a1:	89 44 24 04          	mov    %eax,0x4(%esp)
- 8a5:	8b 45 08             	mov    0x8(%ebp),%eax
- 8a8:	89 04 24             	mov    %eax,(%esp)
- 8ab:	e8 e0 fd ff ff       	call   690 <putc>
-        ap++;
- 8b0:	83 45 e8 04          	addl   $0x4,-0x18(%ebp)
- 8b4:	eb 45                	jmp    8fb <printf+0x194>
-      } else if(c == '%'){
- 8b6:	83 7d e4 25          	cmpl   $0x25,-0x1c(%ebp)
- 8ba:	75 17                	jne    8d3 <printf+0x16c>
-        putc(fd, c);
- 8bc:	8b 45 e4             	mov    -0x1c(%ebp),%eax
- 8bf:	0f be c0             	movsbl %al,%eax
- 8c2:	89 44 24 04          	mov    %eax,0x4(%esp)
- 8c6:	8b 45 08             	mov    0x8(%ebp),%eax
- 8c9:	89 04 24             	mov    %eax,(%esp)
- 8cc:	e8 bf fd ff ff       	call   690 <putc>
- 8d1:	eb 28                	jmp    8fb <printf+0x194>
-      } else {
-        // Unknown % sequence.  Print it to draw attention.
-        putc(fd, '%');
- 8d3:	c7 44 24 04 25 00 00 	movl   $0x25,0x4(%esp)
- 8da:	00 
- 8db:	8b 45 08             	mov    0x8(%ebp),%eax
- 8de:	89 04 24             	mov    %eax,(%esp)
- 8e1:	e8 aa fd ff ff       	call   690 <putc>
-        putc(fd, c);
- 8e6:	8b 45 e4             	mov    -0x1c(%ebp),%eax
- 8e9:	0f be c0             	movsbl %al,%eax
- 8ec:	89 44 24 04          	mov    %eax,0x4(%esp)
- 8f0:	8b 45 08             	mov    0x8(%ebp),%eax
- 8f3:	89 04 24             	mov    %eax,(%esp)
- 8f6:	e8 95 fd ff ff       	call   690 <putc>
-      }
-      state = 0;
- 8fb:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
-  int c, i, state;
-  uint *ap;
-
-  state = 0;
-  ap = (uint*)(void*)&fmt + 1;
-  for(i = 0; fmt[i]; i++){
- 902:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)
- 906:	8b 55 0c             	mov    0xc(%ebp),%edx
- 909:	8b 45 f0             	mov    -0x10(%ebp),%eax
- 90c:	01 d0                	add    %edx,%eax
- 90e:	0f b6 00             	movzbl (%eax),%eax
- 911:	84 c0                	test   %al,%al
- 913:	0f 85 70 fe ff ff    	jne    789 <printf+0x22>
-        putc(fd, c);
-      }
-      state = 0;
-    }
-  }
-}
- 919:	c9                   	leave  
- 91a:	c3                   	ret    
- 91b:	90                   	nop
-
-0000091c <free>:
-static Header base;
-static Header *freep;
-
-void
-free(void *ap)
-{
- 91c:	55                   	push   %ebp
- 91d:	89 e5                	mov    %esp,%ebp
- 91f:	83 ec 10             	sub    $0x10,%esp
-  Header *bp, *p;
-
-  bp = (Header*)ap - 1;
- 922:	8b 45 08             	mov    0x8(%ebp),%eax
- 925:	83 e8 08             	sub    $0x8,%eax
- 928:	89 45 f8             	mov    %eax,-0x8(%ebp)
-  for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
- 92b:	a1 38 0e 00 00       	mov    0xe38,%eax
- 930:	89 45 fc             	mov    %eax,-0x4(%ebp)
- 933:	eb 24                	jmp    959 <free+0x3d>
-    if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
- 935:	8b 45 fc             	mov    -0x4(%ebp),%eax
- 938:	8b 00                	mov    (%eax),%eax
- 93a:	3b 45 fc             	cmp    -0x4(%ebp),%eax
- 93d:	77 12                	ja     951 <free+0x35>
- 93f:	8b 45 f8             	mov    -0x8(%ebp),%eax
- 942:	3b 45 fc             	cmp    -0x4(%ebp),%eax
- 945:	77 24                	ja     96b <free+0x4f>
- 947:	8b 45 fc             	mov    -0x4(%ebp),%eax
- 94a:	8b 00                	mov    (%eax),%eax
- 94c:	3b 45 f8             	cmp    -0x8(%ebp),%eax
- 94f:	77 1a                	ja     96b <free+0x4f>
-free(void *ap)
-{
-  Header *bp, *p;
-
-  bp = (Header*)ap - 1;
-  for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
- 951:	8b 45 fc             	mov    -0x4(%ebp),%eax
- 954:	8b 00                	mov    (%eax),%eax
- 956:	89 45 fc             	mov    %eax,-0x4(%ebp)
- 959:	8b 45 f8             	mov    -0x8(%ebp),%eax
- 95c:	3b 45 fc             	cmp    -0x4(%ebp),%eax
- 95f:	76 d4                	jbe    935 <free+0x19>
- 961:	8b 45 fc             	mov    -0x4(%ebp),%eax
- 964:	8b 00                	mov    (%eax),%eax
- 966:	3b 45 f8             	cmp    -0x8(%ebp),%eax
- 969:	76 ca                	jbe    935 <free+0x19>
-    if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
-      break;
-  if(bp + bp->s.size == p->s.ptr){
- 96b:	8b 45 f8             	mov    -0x8(%ebp),%eax
- 96e:	8b 40 04             	mov    0x4(%eax),%eax
- 971:	c1 e0 03             	shl    $0x3,%eax
- 974:	89 c2                	mov    %eax,%edx
- 976:	03 55 f8             	add    -0x8(%ebp),%edx
- 979:	8b 45 fc             	mov    -0x4(%ebp),%eax
- 97c:	8b 00                	mov    (%eax),%eax
- 97e:	39 c2                	cmp    %eax,%edx
- 980:	75 24                	jne    9a6 <free+0x8a>
-    bp->s.size += p->s.ptr->s.size;
- 982:	8b 45 f8             	mov    -0x8(%ebp),%eax
- 985:	8b 50 04             	mov    0x4(%eax),%edx
- 988:	8b 45 fc             	mov    -0x4(%ebp),%eax
- 98b:	8b 00                	mov    (%eax),%eax
- 98d:	8b 40 04             	mov    0x4(%eax),%eax
- 990:	01 c2                	add    %eax,%edx
- 992:	8b 45 f8             	mov    -0x8(%ebp),%eax
- 995:	89 50 04             	mov    %edx,0x4(%eax)
-    bp->s.ptr = p->s.ptr->s.ptr;
- 998:	8b 45 fc             	mov    -0x4(%ebp),%eax
- 99b:	8b 00                	mov    (%eax),%eax
- 99d:	8b 10                	mov    (%eax),%edx
- 99f:	8b 45 f8             	mov    -0x8(%ebp),%eax
- 9a2:	89 10                	mov    %edx,(%eax)
- 9a4:	eb 0a                	jmp    9b0 <free+0x94>
-  } else
-    bp->s.ptr = p->s.ptr;
- 9a6:	8b 45 fc             	mov    -0x4(%ebp),%eax
- 9a9:	8b 10                	mov    (%eax),%edx
- 9ab:	8b 45 f8             	mov    -0x8(%ebp),%eax
- 9ae:	89 10                	mov    %edx,(%eax)
-  if(p + p->s.size == bp){
- 9b0:	8b 45 fc             	mov    -0x4(%ebp),%eax
- 9b3:	8b 40 04             	mov    0x4(%eax),%eax
- 9b6:	c1 e0 03             	shl    $0x3,%eax
- 9b9:	03 45 fc             	add    -0x4(%ebp),%eax
- 9bc:	3b 45 f8             	cmp    -0x8(%ebp),%eax
- 9bf:	75 20                	jne    9e1 <free+0xc5>
-    p->s.size += bp->s.size;
- 9c1:	8b 45 fc             	mov    -0x4(%ebp),%eax
- 9c4:	8b 50 04             	mov    0x4(%eax),%edx
- 9c7:	8b 45 f8             	mov    -0x8(%ebp),%eax
- 9ca:	8b 40 04             	mov    0x4(%eax),%eax
- 9cd:	01 c2                	add    %eax,%edx
- 9cf:	8b 45 fc             	mov    -0x4(%ebp),%eax
- 9d2:	89 50 04             	mov    %edx,0x4(%eax)
-    p->s.ptr = bp->s.ptr;
- 9d5:	8b 45 f8             	mov    -0x8(%ebp),%eax
- 9d8:	8b 10                	mov    (%eax),%edx
- 9da:	8b 45 fc             	mov    -0x4(%ebp),%eax
- 9dd:	89 10                	mov    %edx,(%eax)
- 9df:	eb 08                	jmp    9e9 <free+0xcd>
-  } else
-    p->s.ptr = bp;
- 9e1:	8b 45 fc             	mov    -0x4(%ebp),%eax
- 9e4:	8b 55 f8             	mov    -0x8(%ebp),%edx
- 9e7:	89 10                	mov    %edx,(%eax)
-  freep = p;
- 9e9:	8b 45 fc             	mov    -0x4(%ebp),%eax
- 9ec:	a3 38 0e 00 00       	mov    %eax,0xe38
-}
- 9f1:	c9                   	leave  
- 9f2:	c3                   	ret    
-
-000009f3 <morecore>:
-
-static Header*
-morecore(uint nu)
-{
- 9f3:	55                   	push   %ebp
- 9f4:	89 e5                	mov    %esp,%ebp
- 9f6:	83 ec 28             	sub    $0x28,%esp
-  char *p;
-  Header *hp;
-
-  if(nu < 4096)
- 9f9:	81 7d 08 ff 0f 00 00 	cmpl   $0xfff,0x8(%ebp)
- a00:	77 07                	ja     a09 <morecore+0x16>
-    nu = 4096;
- a02:	c7 45 08 00 10 00 00 	movl   $0x1000,0x8(%ebp)
-  p = sbrk(nu * sizeof(Header));
- a09:	8b 45 08             	mov    0x8(%ebp),%eax
- a0c:	c1 e0 03             	shl    $0x3,%eax
- a0f:	89 04 24             	mov    %eax,(%esp)
- a12:	e8 39 fc ff ff       	call   650 <sbrk>
- a17:	89 45 f4             	mov    %eax,-0xc(%ebp)
-  if(p == (char*)-1)
- a1a:	83 7d f4 ff          	cmpl   $0xffffffff,-0xc(%ebp)
- a1e:	75 07                	jne    a27 <morecore+0x34>
-    return 0;
- a20:	b8 00 00 00 00       	mov    $0x0,%eax
- a25:	eb 22                	jmp    a49 <morecore+0x56>
-  hp = (Header*)p;
- a27:	8b 45 f4             	mov    -0xc(%ebp),%eax
- a2a:	89 45 f0             	mov    %eax,-0x10(%ebp)
-  hp->s.size = nu;
- a2d:	8b 45 f0             	mov    -0x10(%ebp),%eax
- a30:	8b 55 08             	mov    0x8(%ebp),%edx
- a33:	89 50 04             	mov    %edx,0x4(%eax)
-  free((void*)(hp + 1));
- a36:	8b 45 f0             	mov    -0x10(%ebp),%eax
- a39:	83 c0 08             	add    $0x8,%eax
- a3c:	89 04 24             	mov    %eax,(%esp)
- a3f:	e8 d8 fe ff ff       	call   91c <free>
-  return freep;
- a44:	a1 38 0e 00 00       	mov    0xe38,%eax
-}
- a49:	c9                   	leave  
- a4a:	c3                   	ret    
-
-00000a4b <malloc>:
-
-void*
-malloc(uint nbytes)
-{
- a4b:	55                   	push   %ebp
- a4c:	89 e5                	mov    %esp,%ebp
- a4e:	83 ec 28             	sub    $0x28,%esp
-  Header *p, *prevp;
-  uint nunits;
-
-  nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;
- a51:	8b 45 08             	mov    0x8(%ebp),%eax
- a54:	83 c0 07             	add    $0x7,%eax
- a57:	c1 e8 03             	shr    $0x3,%eax
- a5a:	83 c0 01             	add    $0x1,%eax
- a5d:	89 45 ec             	mov    %eax,-0x14(%ebp)
-  if((prevp = freep) == 0){
- a60:	a1 38 0e 00 00       	mov    0xe38,%eax
- a65:	89 45 f0             	mov    %eax,-0x10(%ebp)
- a68:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
- a6c:	75 23                	jne    a91 <malloc+0x46>
-    base.s.ptr = freep = prevp = &base;
- a6e:	c7 45 f0 30 0e 00 00 	movl   $0xe30,-0x10(%ebp)
- a75:	8b 45 f0             	mov    -0x10(%ebp),%eax
- a78:	a3 38 0e 00 00       	mov    %eax,0xe38
- a7d:	a1 38 0e 00 00       	mov    0xe38,%eax
- a82:	a3 30 0e 00 00       	mov    %eax,0xe30
-    base.s.size = 0;
- a87:	c7 05 34 0e 00 00 00 	movl   $0x0,0xe34
- a8e:	00 00 00 
-  }
-  for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
- a91:	8b 45 f0             	mov    -0x10(%ebp),%eax
- a94:	8b 00                	mov    (%eax),%eax
- a96:	89 45 f4             	mov    %eax,-0xc(%ebp)
-    if(p->s.size >= nunits){
- a99:	8b 45 f4             	mov    -0xc(%ebp),%eax
- a9c:	8b 40 04             	mov    0x4(%eax),%eax
- a9f:	3b 45 ec             	cmp    -0x14(%ebp),%eax
- aa2:	72 4d                	jb     af1 <malloc+0xa6>
-      if(p->s.size == nunits)
- aa4:	8b 45 f4             	mov    -0xc(%ebp),%eax
- aa7:	8b 40 04             	mov    0x4(%eax),%eax
- aaa:	3b 45 ec             	cmp    -0x14(%ebp),%eax
- aad:	75 0c                	jne    abb <malloc+0x70>
-        prevp->s.ptr = p->s.ptr;
- aaf:	8b 45 f4             	mov    -0xc(%ebp),%eax
- ab2:	8b 10                	mov    (%eax),%edx
- ab4:	8b 45 f0             	mov    -0x10(%ebp),%eax
- ab7:	89 10                	mov    %edx,(%eax)
- ab9:	eb 26                	jmp    ae1 <malloc+0x96>
-      else {
-        p->s.size -= nunits;
- abb:	8b 45 f4             	mov    -0xc(%ebp),%eax
- abe:	8b 40 04             	mov    0x4(%eax),%eax
- ac1:	89 c2                	mov    %eax,%edx
- ac3:	2b 55 ec             	sub    -0x14(%ebp),%edx
- ac6:	8b 45 f4             	mov    -0xc(%ebp),%eax
- ac9:	89 50 04             	mov    %edx,0x4(%eax)
-        p += p->s.size;
- acc:	8b 45 f4             	mov    -0xc(%ebp),%eax
- acf:	8b 40 04             	mov    0x4(%eax),%eax
- ad2:	c1 e0 03             	shl    $0x3,%eax
- ad5:	01 45 f4             	add    %eax,-0xc(%ebp)
-        p->s.size = nunits;
- ad8:	8b 45 f4             	mov    -0xc(%ebp),%eax
- adb:	8b 55 ec             	mov    -0x14(%ebp),%edx
- ade:	89 50 04             	mov    %edx,0x4(%eax)
-      }
-      freep = prevp;
- ae1:	8b 45 f0             	mov    -0x10(%ebp),%eax
- ae4:	a3 38 0e 00 00       	mov    %eax,0xe38
-      return (void*)(p + 1);
- ae9:	8b 45 f4             	mov    -0xc(%ebp),%eax
- aec:	83 c0 08             	add    $0x8,%eax
- aef:	eb 38                	jmp    b29 <malloc+0xde>
-    }
-    if(p == freep)
- af1:	a1 38 0e 00 00       	mov    0xe38,%eax
- af6:	39 45 f4             	cmp    %eax,-0xc(%ebp)
- af9:	75 1b                	jne    b16 <malloc+0xcb>
-      if((p = morecore(nunits)) == 0)
- afb:	8b 45 ec             	mov    -0x14(%ebp),%eax
- afe:	89 04 24             	mov    %eax,(%esp)
- b01:	e8 ed fe ff ff       	call   9f3 <morecore>
- b06:	89 45 f4             	mov    %eax,-0xc(%ebp)
- b09:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
- b0d:	75 07                	jne    b16 <malloc+0xcb>
-        return 0;
- b0f:	b8 00 00 00 00       	mov    $0x0,%eax
- b14:	eb 13                	jmp    b29 <malloc+0xde>
-  nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;
-  if((prevp = freep) == 0){
-    base.s.ptr = freep = prevp = &base;
-    base.s.size = 0;
-  }
-  for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
- b16:	8b 45 f4             	mov    -0xc(%ebp),%eax
- b19:	89 45 f0             	mov    %eax,-0x10(%ebp)
- b1c:	8b 45 f4             	mov    -0xc(%ebp),%eax
- b1f:	8b 00                	mov    (%eax),%eax
- b21:	89 45 f4             	mov    %eax,-0xc(%ebp)
-      return (void*)(p + 1);
-    }
-    if(p == freep)
-      if((p = morecore(nunits)) == 0)
-        return 0;
-  }
- b24:	e9 70 ff ff ff       	jmp    a99 <malloc+0x4e>
-}
- b29:	c9                   	leave  
- b2a:	c3                   	ret    
diff --git a/xv6/ls.c b/xv6/ls.c
deleted file mode 100644
index 7482334..0000000
--- a/xv6/ls.c
+++ /dev/null
@@ -1,85 +0,0 @@
-#include "types.h"
-#include "stat.h"
-#include "user.h"
-#include "fs.h"
-
-char*
-fmtname(char *path)
-{
-  static char buf[DIRSIZ+1];
-  char *p;
-  
-  // Find first character after last slash.
-  for(p=path+strlen(path); p >= path && *p != '/'; p--)
-    ;
-  p++;
-  
-  // Return blank-padded name.
-  if(strlen(p) >= DIRSIZ)
-    return p;
-  memmove(buf, p, strlen(p));
-  memset(buf+strlen(p), ' ', DIRSIZ-strlen(p));
-  return buf;
-}
-
-void
-ls(char *path)
-{
-  char buf[512], *p;
-  int fd;
-  struct dirent de;
-  struct stat st;
-  
-  if((fd = open(path, 0)) < 0){
-    printf(2, "ls: cannot open %s\n", path);
-    return;
-  }
-  
-  if(fstat(fd, &st) < 0){
-    printf(2, "ls: cannot stat %s\n", path);
-    close(fd);
-    return;
-  }
-  
-  switch(st.type){
-  case T_FILE:
-    printf(1, "%s %d %d %d\n", fmtname(path), st.type, st.ino, st.size);
-    break;
-  
-  case T_DIR:
-    if(strlen(path) + 1 + DIRSIZ + 1 > sizeof buf){
-      printf(1, "ls: path too long\n");
-      break;
-    }
-    strcpy(buf, path);
-    p = buf+strlen(buf);
-    *p++ = '/';
-    while(read(fd, &de, sizeof(de)) == sizeof(de)){
-      if(de.inum == 0)
-        continue;
-      memmove(p, de.name, DIRSIZ);
-      p[DIRSIZ] = 0;
-      if(stat(buf, &st) < 0){
-        printf(1, "ls: cannot stat %s\n", buf);
-        continue;
-      }
-      printf(1, "%s %d %d %d\n", fmtname(buf), st.type, st.ino, st.size);
-    }
-    break;
-  }
-  close(fd);
-}
-
-int
-main(int argc, char *argv[])
-{
-  int i;
-
-  if(argc < 2){
-    ls(".");
-    exit(EXIT_STATUS_DEFAULT);
-  }
-  for(i=1; i<argc; i++)
-    ls(argv[i]);
-  exit(EXIT_STATUS_DEFAULT);
-}
diff --git a/xv6/ls.d b/xv6/ls.d
deleted file mode 100644
index ae486b7..0000000
--- a/xv6/ls.d
+++ /dev/null
@@ -1 +0,0 @@
-ls.o: ls.c types.h stat.h user.h fs.h
diff --git a/xv6/ls.sym b/xv6/ls.sym
deleted file mode 100644
index 10ec98b..0000000
--- a/xv6/ls.sym
+++ /dev/null
@@ -1,68 +0,0 @@
-00000000 .text
-00000b2b .rodata
-00000b7c .eh_frame
-00000e0c .data
-00000e20 .bss
-00000000 .comment
-00000000 .debug_aranges
-00000000 .debug_info
-00000000 .debug_abbrev
-00000000 .debug_line
-00000000 .debug_str
-00000000 .debug_loc
-00000000 ls.c
-00000e20 buf.931
-00000000 ulib.c
-00000364 stosb
-00000000 printf.c
-00000690 putc
-000006b8 printint
-00000e0c digits.923
-00000000 umalloc.c
-00000e30 base
-00000e38 freep
-000009f3 morecore
-00000389 strcpy
-00000000 fmtname
-00000668 waitpid
-00000767 printf
-00000582 memmove
-00000610 mknod
-00000680 foreground
-0000047a gets
-00000648 getpid
-00000a4b malloc
-00000658 sleep
-00000688 set_priority
-00000670 wait_stat
-000005d8 pipe
-000005e8 write
-00000620 fstat
-000005f8 kill
-00000638 chdir
-00000600 exec
-000005d0 wait
-000005e0 read
-00000618 unlink
-000005c0 fork
-00000650 sbrk
-00000660 uptime
-00000e20 __bss_start
-00000423 memset
-00000302 main
-000003bd strcmp
-00000640 dup
-00000678 list_pgroup
-000004e9 stat
-00000e20 _edata
-00000e3c _end
-00000628 link
-000000ae ls
-000005c8 exit
-00000537 atoi
-000003fe strlen
-00000608 open
-00000447 strchr
-00000630 mkdir
-000005f0 close
-0000091c free
diff --git a/xv6/main.c b/xv6/main.c
deleted file mode 100644
index 143c392..0000000
--- a/xv6/main.c
+++ /dev/null
@@ -1,121 +0,0 @@
-#include "types.h"
-#include "defs.h"
-#include "param.h"
-#include "memlayout.h"
-#include "mmu.h"
-#include "proc.h"
-#include "x86.h"
-
-static void startothers(void);
-static void mpmain(void)  __attribute__((noreturn));
-extern pde_t *kpgdir;
-extern char end[]; // first address after kernel loaded from ELF file
-// Bootstrap processor starts running C code here.
-// Allocate a real stack and switch to it, first
-// doing some setup required for memory allocator to work.
-int
-main(void)
-{
-  kinit1(end, P2V(4*1024*1024)); // phys page allocator
-  kvmalloc();      // kernel page table
-  mpinit();        // collect info about this machine
-  lapicinit();
-  seginit();       // set up segments
-  cprintf("\ncpu%d: starting xv6\n\n", cpu->id);
-  picinit();       // interrupt controller
-  ioapicinit();    // another interrupt controller
-  consoleinit();   // I/O devices & their interrupts
-  uartinit();      // serial port
-  pinit();         // process table
-  tvinit();        // trap vectors
-  binit();         // buffer cache
-  fileinit();      // file table
-  iinit();         // inode cache
-  ideinit();       // disk
-  if(!ismp)
-    timerinit();   // uniprocessor timer
-  startothers();   // start other processors
-  kinit2(P2V(4*1024*1024), P2V(PHYSTOP)); // must come after startothers()
-  userinit();      // first user process
-  // Finish setting up this processor in mpmain.
-  mpmain();
-
-
-}
-
-// Other CPUs jump here from entryother.S.
-static void
-mpenter(void)
-{
-  switchkvm(); 
-  seginit();
-  lapicinit();
-  mpmain();
-}
-
-// Common CPU setup code.
-static void
-mpmain(void)
-{
-  cprintf("cpu%d: starting\n", cpu->id);
-  idtinit();       // load idt register
-  xchg(&cpu->started, 1); // tell startothers() we're up
-
-  scheduler();     // start running processes
-}
-
-pde_t entrypgdir[];  // For entry.S
-
-// Start the non-boot (AP) processors.
-static void
-startothers(void)
-{
-  extern uchar _binary_entryother_start[], _binary_entryother_size[];
-  uchar *code;
-  struct cpu *c;
-  char *stack;
-
-  // Write entry code to unused memory at 0x7000.
-  // The linker has placed the image of entryother.S in
-  // _binary_entryother_start.
-  code = p2v(0x7000);
-  memmove(code, _binary_entryother_start, (uint)_binary_entryother_size);
-
-  for(c = cpus; c < cpus+ncpu; c++){
-    if(c == cpus+cpunum())  // We've started already.
-      continue;
-
-    // Tell entryother.S what stack to use, where to enter, and what 
-    // pgdir to use. We cannot use kpgdir yet, because the AP processor
-    // is running in low  memory, so we use entrypgdir for the APs too.
-    stack = kalloc();
-    *(void**)(code-4) = stack + KSTACKSIZE;
-    *(void**)(code-8) = mpenter;
-    *(int**)(code-12) = (void *) v2p(entrypgdir);
-
-    lapicstartap(c->id, v2p(code));
-
-    // wait for cpu to finish mpmain()
-    while(c->started == 0)
-      ;
-  }
-}
-
-// Boot page table used in entry.S and entryother.S.
-// Page directories (and page tables), must start on a page boundary,
-// hence the "__aligned__" attribute.  
-// Use PTE_PS in page directory entry to enable 4Mbyte pages.
-__attribute__((__aligned__(PGSIZE)))
-pde_t entrypgdir[NPDENTRIES] = {
-  // Map VA's [0, 4MB) to PA's [0, 4MB)
-  [0] = (0) | PTE_P | PTE_W | PTE_PS,
-  // Map VA's [KERNBASE, KERNBASE+4MB) to PA's [0, 4MB)
-  [KERNBASE>>PDXSHIFT] = (0) | PTE_P | PTE_W | PTE_PS,
-};
-
-//PAGEBREAK!
-// Blank page.
-//PAGEBREAK!
-// Blank page.
-//PAGEBREAK!
-// Blank page.
diff --git a/xv6/main.d b/xv6/main.d
deleted file mode 100644
index bb0f48d..0000000
--- a/xv6/main.d
+++ /dev/null
@@ -1 +0,0 @@
-main.o: main.c types.h defs.h param.h memlayout.h mmu.h proc.h x86.h
diff --git a/xv6/memide.c b/xv6/memide.c
deleted file mode 100644
index d2c5bb7..0000000
--- a/xv6/memide.c
+++ /dev/null
@@ -1,58 +0,0 @@
-// Fake IDE disk; stores blocks in memory.
-// Useful for running kernel without scratch disk.
-
-#include "types.h"
-#include "defs.h"
-#include "param.h"
-#include "mmu.h"
-#include "proc.h"
-#include "x86.h"
-#include "traps.h"
-#include "spinlock.h"
-#include "buf.h"
-
-extern uchar _binary_fs_img_start[], _binary_fs_img_size[];
-
-static int disksize;
-static uchar *memdisk;
-
-void
-ideinit(void)
-{
-  memdisk = _binary_fs_img_start;
-  disksize = (uint)_binary_fs_img_size/512;
-}
-
-// Interrupt handler.
-void
-ideintr(void)
-{
-  // no-op
-}
-
-// Sync buf with disk. 
-// If B_DIRTY is set, write buf to disk, clear B_DIRTY, set B_VALID.
-// Else if B_VALID is not set, read buf from disk, set B_VALID.
-void
-iderw(struct buf *b)
-{
-  uchar *p;
-
-  if(!(b->flags & B_BUSY))
-    panic("iderw: buf not busy");
-  if((b->flags & (B_VALID|B_DIRTY)) == B_VALID)
-    panic("iderw: nothing to do");
-  if(b->dev != 1)
-    panic("iderw: request not for disk 1");
-  if(b->sector >= disksize)
-    panic("iderw: sector out of range");
-
-  p = memdisk + b->sector*512;
-  
-  if(b->flags & B_DIRTY){
-    b->flags &= ~B_DIRTY;
-    memmove(p, b->data, 512);
-  } else
-    memmove(b->data, p, 512);
-  b->flags |= B_VALID;
-}
diff --git a/xv6/memlayout.h b/xv6/memlayout.h
deleted file mode 100644
index 6a62cd7..0000000
--- a/xv6/memlayout.h
+++ /dev/null
@@ -1,22 +0,0 @@
-// Memory layout
-
-#define EXTMEM  0x100000            // Start of extended memory
-#define PHYSTOP 0xE000000           // Top physical memory
-#define DEVSPACE 0xFE000000         // Other devices are at high addresses
-
-// Key addresses for address space layout (see kmap in vm.c for layout)
-#define KERNBASE 0x80000000         // First kernel virtual address
-#define KERNLINK (KERNBASE+EXTMEM)  // Address where kernel is linked
-
-#ifndef __ASSEMBLER__
-
-static inline uint v2p(void *a) { return ((uint) (a))  - KERNBASE; }
-static inline void *p2v(uint a) { return (void *) ((a) + KERNBASE); }
-
-#endif
-
-#define V2P(a) (((uint) (a)) - KERNBASE)
-#define P2V(a) (((void *) (a)) + KERNBASE)
-
-#define V2P_WO(x) ((x) - KERNBASE)    // same as V2P, but without casts
-#define P2V_WO(x) ((x) + KERNBASE)    // same as V2P, but without casts
diff --git a/xv6/mkdir.asm b/xv6/mkdir.asm
deleted file mode 100644
index 5a4ad57..0000000
--- a/xv6/mkdir.asm
+++ /dev/null
@@ -1,1227 +0,0 @@
-
-_mkdir:     file format elf32-i386
-
-
-Disassembly of section .text:
-
-00000000 <main>:
-#include "stat.h"
-#include "user.h"
-
-int
-main(int argc, char *argv[])
-{
-   0:	55                   	push   %ebp
-   1:	89 e5                	mov    %esp,%ebp
-   3:	83 e4 f0             	and    $0xfffffff0,%esp
-   6:	83 ec 20             	sub    $0x20,%esp
-  int i;
-
-  if(argc < 2){
-   9:	83 7d 08 01          	cmpl   $0x1,0x8(%ebp)
-   d:	7f 20                	jg     2f <main+0x2f>
-    printf(2, "Usage: mkdir files...\n");
-   f:	c7 44 24 04 5b 08 00 	movl   $0x85b,0x4(%esp)
-  16:	00 
-  17:	c7 04 24 02 00 00 00 	movl   $0x2,(%esp)
-  1e:	e8 74 04 00 00       	call   497 <printf>
-    exit(EXIT_STATUS_DEFAULT);
-  23:	c7 04 24 02 00 00 00 	movl   $0x2,(%esp)
-  2a:	e8 c9 02 00 00       	call   2f8 <exit>
-  }
-
-  for(i = 1; i < argc; i++){
-  2f:	c7 44 24 1c 01 00 00 	movl   $0x1,0x1c(%esp)
-  36:	00 
-  37:	eb 43                	jmp    7c <main+0x7c>
-    if(mkdir(argv[i]) < 0){
-  39:	8b 44 24 1c          	mov    0x1c(%esp),%eax
-  3d:	c1 e0 02             	shl    $0x2,%eax
-  40:	03 45 0c             	add    0xc(%ebp),%eax
-  43:	8b 00                	mov    (%eax),%eax
-  45:	89 04 24             	mov    %eax,(%esp)
-  48:	e8 13 03 00 00       	call   360 <mkdir>
-  4d:	85 c0                	test   %eax,%eax
-  4f:	79 26                	jns    77 <main+0x77>
-      printf(2, "mkdir: %s failed to create\n", argv[i]);
-  51:	8b 44 24 1c          	mov    0x1c(%esp),%eax
-  55:	c1 e0 02             	shl    $0x2,%eax
-  58:	03 45 0c             	add    0xc(%ebp),%eax
-  5b:	8b 00                	mov    (%eax),%eax
-  5d:	89 44 24 08          	mov    %eax,0x8(%esp)
-  61:	c7 44 24 04 72 08 00 	movl   $0x872,0x4(%esp)
-  68:	00 
-  69:	c7 04 24 02 00 00 00 	movl   $0x2,(%esp)
-  70:	e8 22 04 00 00       	call   497 <printf>
-      break;
-  75:	eb 0e                	jmp    85 <main+0x85>
-  if(argc < 2){
-    printf(2, "Usage: mkdir files...\n");
-    exit(EXIT_STATUS_DEFAULT);
-  }
-
-  for(i = 1; i < argc; i++){
-  77:	83 44 24 1c 01       	addl   $0x1,0x1c(%esp)
-  7c:	8b 44 24 1c          	mov    0x1c(%esp),%eax
-  80:	3b 45 08             	cmp    0x8(%ebp),%eax
-  83:	7c b4                	jl     39 <main+0x39>
-      printf(2, "mkdir: %s failed to create\n", argv[i]);
-      break;
-    }
-  }
-
-  exit(EXIT_STATUS_DEFAULT);
-  85:	c7 04 24 02 00 00 00 	movl   $0x2,(%esp)
-  8c:	e8 67 02 00 00       	call   2f8 <exit>
-  91:	90                   	nop
-  92:	90                   	nop
-  93:	90                   	nop
-
-00000094 <stosb>:
-               "cc");
-}
-
-static inline void
-stosb(void *addr, int data, int cnt)
-{
-  94:	55                   	push   %ebp
-  95:	89 e5                	mov    %esp,%ebp
-  97:	57                   	push   %edi
-  98:	53                   	push   %ebx
-  asm volatile("cld; rep stosb" :
-  99:	8b 4d 08             	mov    0x8(%ebp),%ecx
-  9c:	8b 55 10             	mov    0x10(%ebp),%edx
-  9f:	8b 45 0c             	mov    0xc(%ebp),%eax
-  a2:	89 cb                	mov    %ecx,%ebx
-  a4:	89 df                	mov    %ebx,%edi
-  a6:	89 d1                	mov    %edx,%ecx
-  a8:	fc                   	cld    
-  a9:	f3 aa                	rep stos %al,%es:(%edi)
-  ab:	89 ca                	mov    %ecx,%edx
-  ad:	89 fb                	mov    %edi,%ebx
-  af:	89 5d 08             	mov    %ebx,0x8(%ebp)
-  b2:	89 55 10             	mov    %edx,0x10(%ebp)
-               "=D" (addr), "=c" (cnt) :
-               "0" (addr), "1" (cnt), "a" (data) :
-               "memory", "cc");
-}
-  b5:	5b                   	pop    %ebx
-  b6:	5f                   	pop    %edi
-  b7:	5d                   	pop    %ebp
-  b8:	c3                   	ret    
-
-000000b9 <strcpy>:
-#include "user.h"
-#include "x86.h"
-
-char*
-strcpy(char *s, char *t)
-{
-  b9:	55                   	push   %ebp
-  ba:	89 e5                	mov    %esp,%ebp
-  bc:	83 ec 10             	sub    $0x10,%esp
-  char *os;
-
-  os = s;
-  bf:	8b 45 08             	mov    0x8(%ebp),%eax
-  c2:	89 45 fc             	mov    %eax,-0x4(%ebp)
-  while((*s++ = *t++) != 0)
-  c5:	90                   	nop
-  c6:	8b 45 0c             	mov    0xc(%ebp),%eax
-  c9:	0f b6 10             	movzbl (%eax),%edx
-  cc:	8b 45 08             	mov    0x8(%ebp),%eax
-  cf:	88 10                	mov    %dl,(%eax)
-  d1:	8b 45 08             	mov    0x8(%ebp),%eax
-  d4:	0f b6 00             	movzbl (%eax),%eax
-  d7:	84 c0                	test   %al,%al
-  d9:	0f 95 c0             	setne  %al
-  dc:	83 45 08 01          	addl   $0x1,0x8(%ebp)
-  e0:	83 45 0c 01          	addl   $0x1,0xc(%ebp)
-  e4:	84 c0                	test   %al,%al
-  e6:	75 de                	jne    c6 <strcpy+0xd>
-    ;
-  return os;
-  e8:	8b 45 fc             	mov    -0x4(%ebp),%eax
-}
-  eb:	c9                   	leave  
-  ec:	c3                   	ret    
-
-000000ed <strcmp>:
-
-int
-strcmp(const char *p, const char *q)
-{
-  ed:	55                   	push   %ebp
-  ee:	89 e5                	mov    %esp,%ebp
-  while(*p && *p == *q)
-  f0:	eb 08                	jmp    fa <strcmp+0xd>
-    p++, q++;
-  f2:	83 45 08 01          	addl   $0x1,0x8(%ebp)
-  f6:	83 45 0c 01          	addl   $0x1,0xc(%ebp)
-}
-
-int
-strcmp(const char *p, const char *q)
-{
-  while(*p && *p == *q)
-  fa:	8b 45 08             	mov    0x8(%ebp),%eax
-  fd:	0f b6 00             	movzbl (%eax),%eax
- 100:	84 c0                	test   %al,%al
- 102:	74 10                	je     114 <strcmp+0x27>
- 104:	8b 45 08             	mov    0x8(%ebp),%eax
- 107:	0f b6 10             	movzbl (%eax),%edx
- 10a:	8b 45 0c             	mov    0xc(%ebp),%eax
- 10d:	0f b6 00             	movzbl (%eax),%eax
- 110:	38 c2                	cmp    %al,%dl
- 112:	74 de                	je     f2 <strcmp+0x5>
-    p++, q++;
-  return (uchar)*p - (uchar)*q;
- 114:	8b 45 08             	mov    0x8(%ebp),%eax
- 117:	0f b6 00             	movzbl (%eax),%eax
- 11a:	0f b6 d0             	movzbl %al,%edx
- 11d:	8b 45 0c             	mov    0xc(%ebp),%eax
- 120:	0f b6 00             	movzbl (%eax),%eax
- 123:	0f b6 c0             	movzbl %al,%eax
- 126:	89 d1                	mov    %edx,%ecx
- 128:	29 c1                	sub    %eax,%ecx
- 12a:	89 c8                	mov    %ecx,%eax
-}
- 12c:	5d                   	pop    %ebp
- 12d:	c3                   	ret    
-
-0000012e <strlen>:
-
-uint
-strlen(char *s)
-{
- 12e:	55                   	push   %ebp
- 12f:	89 e5                	mov    %esp,%ebp
- 131:	83 ec 10             	sub    $0x10,%esp
-  int n;
-
-  for(n = 0; s[n]; n++)
- 134:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
- 13b:	eb 04                	jmp    141 <strlen+0x13>
- 13d:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
- 141:	8b 45 fc             	mov    -0x4(%ebp),%eax
- 144:	03 45 08             	add    0x8(%ebp),%eax
- 147:	0f b6 00             	movzbl (%eax),%eax
- 14a:	84 c0                	test   %al,%al
- 14c:	75 ef                	jne    13d <strlen+0xf>
-    ;
-  return n;
- 14e:	8b 45 fc             	mov    -0x4(%ebp),%eax
-}
- 151:	c9                   	leave  
- 152:	c3                   	ret    
-
-00000153 <memset>:
-
-void*
-memset(void *dst, int c, uint n)
-{
- 153:	55                   	push   %ebp
- 154:	89 e5                	mov    %esp,%ebp
- 156:	83 ec 0c             	sub    $0xc,%esp
-  stosb(dst, c, n);
- 159:	8b 45 10             	mov    0x10(%ebp),%eax
- 15c:	89 44 24 08          	mov    %eax,0x8(%esp)
- 160:	8b 45 0c             	mov    0xc(%ebp),%eax
- 163:	89 44 24 04          	mov    %eax,0x4(%esp)
- 167:	8b 45 08             	mov    0x8(%ebp),%eax
- 16a:	89 04 24             	mov    %eax,(%esp)
- 16d:	e8 22 ff ff ff       	call   94 <stosb>
-  return dst;
- 172:	8b 45 08             	mov    0x8(%ebp),%eax
-}
- 175:	c9                   	leave  
- 176:	c3                   	ret    
-
-00000177 <strchr>:
-
-char*
-strchr(const char *s, char c)
-{
- 177:	55                   	push   %ebp
- 178:	89 e5                	mov    %esp,%ebp
- 17a:	83 ec 04             	sub    $0x4,%esp
- 17d:	8b 45 0c             	mov    0xc(%ebp),%eax
- 180:	88 45 fc             	mov    %al,-0x4(%ebp)
-  for(; *s; s++)
- 183:	eb 14                	jmp    199 <strchr+0x22>
-    if(*s == c)
- 185:	8b 45 08             	mov    0x8(%ebp),%eax
- 188:	0f b6 00             	movzbl (%eax),%eax
- 18b:	3a 45 fc             	cmp    -0x4(%ebp),%al
- 18e:	75 05                	jne    195 <strchr+0x1e>
-      return (char*)s;
- 190:	8b 45 08             	mov    0x8(%ebp),%eax
- 193:	eb 13                	jmp    1a8 <strchr+0x31>
-}
-
-char*
-strchr(const char *s, char c)
-{
-  for(; *s; s++)
- 195:	83 45 08 01          	addl   $0x1,0x8(%ebp)
- 199:	8b 45 08             	mov    0x8(%ebp),%eax
- 19c:	0f b6 00             	movzbl (%eax),%eax
- 19f:	84 c0                	test   %al,%al
- 1a1:	75 e2                	jne    185 <strchr+0xe>
-    if(*s == c)
-      return (char*)s;
-  return 0;
- 1a3:	b8 00 00 00 00       	mov    $0x0,%eax
-}
- 1a8:	c9                   	leave  
- 1a9:	c3                   	ret    
-
-000001aa <gets>:
-
-char*
-gets(char *buf, int max)
-{
- 1aa:	55                   	push   %ebp
- 1ab:	89 e5                	mov    %esp,%ebp
- 1ad:	83 ec 28             	sub    $0x28,%esp
-  int i, cc;
-  char c;
-
-  for(i=0; i+1 < max; ){
- 1b0:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
- 1b7:	eb 44                	jmp    1fd <gets+0x53>
-    cc = read(0, &c, 1);
- 1b9:	c7 44 24 08 01 00 00 	movl   $0x1,0x8(%esp)
- 1c0:	00 
- 1c1:	8d 45 ef             	lea    -0x11(%ebp),%eax
- 1c4:	89 44 24 04          	mov    %eax,0x4(%esp)
- 1c8:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
- 1cf:	e8 3c 01 00 00       	call   310 <read>
- 1d4:	89 45 f0             	mov    %eax,-0x10(%ebp)
-    if(cc < 1)
- 1d7:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
- 1db:	7e 2d                	jle    20a <gets+0x60>
-      break;
-    buf[i++] = c;
- 1dd:	8b 45 f4             	mov    -0xc(%ebp),%eax
- 1e0:	03 45 08             	add    0x8(%ebp),%eax
- 1e3:	0f b6 55 ef          	movzbl -0x11(%ebp),%edx
- 1e7:	88 10                	mov    %dl,(%eax)
- 1e9:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
-    if(c == '\n' || c == '\r')
- 1ed:	0f b6 45 ef          	movzbl -0x11(%ebp),%eax
- 1f1:	3c 0a                	cmp    $0xa,%al
- 1f3:	74 16                	je     20b <gets+0x61>
- 1f5:	0f b6 45 ef          	movzbl -0x11(%ebp),%eax
- 1f9:	3c 0d                	cmp    $0xd,%al
- 1fb:	74 0e                	je     20b <gets+0x61>
-gets(char *buf, int max)
-{
-  int i, cc;
-  char c;
-
-  for(i=0; i+1 < max; ){
- 1fd:	8b 45 f4             	mov    -0xc(%ebp),%eax
- 200:	83 c0 01             	add    $0x1,%eax
- 203:	3b 45 0c             	cmp    0xc(%ebp),%eax
- 206:	7c b1                	jl     1b9 <gets+0xf>
- 208:	eb 01                	jmp    20b <gets+0x61>
-    cc = read(0, &c, 1);
-    if(cc < 1)
-      break;
- 20a:	90                   	nop
-    buf[i++] = c;
-    if(c == '\n' || c == '\r')
-      break;
-  }
-  buf[i] = '\0';
- 20b:	8b 45 f4             	mov    -0xc(%ebp),%eax
- 20e:	03 45 08             	add    0x8(%ebp),%eax
- 211:	c6 00 00             	movb   $0x0,(%eax)
-  return buf;
- 214:	8b 45 08             	mov    0x8(%ebp),%eax
-}
- 217:	c9                   	leave  
- 218:	c3                   	ret    
-
-00000219 <stat>:
-
-int
-stat(char *n, struct stat *st)
-{
- 219:	55                   	push   %ebp
- 21a:	89 e5                	mov    %esp,%ebp
- 21c:	83 ec 28             	sub    $0x28,%esp
-  int fd;
-  int r;
-
-  fd = open(n, O_RDONLY);
- 21f:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
- 226:	00 
- 227:	8b 45 08             	mov    0x8(%ebp),%eax
- 22a:	89 04 24             	mov    %eax,(%esp)
- 22d:	e8 06 01 00 00       	call   338 <open>
- 232:	89 45 f4             	mov    %eax,-0xc(%ebp)
-  if(fd < 0)
- 235:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
- 239:	79 07                	jns    242 <stat+0x29>
-    return -1;
- 23b:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
- 240:	eb 23                	jmp    265 <stat+0x4c>
-  r = fstat(fd, st);
- 242:	8b 45 0c             	mov    0xc(%ebp),%eax
- 245:	89 44 24 04          	mov    %eax,0x4(%esp)
- 249:	8b 45 f4             	mov    -0xc(%ebp),%eax
- 24c:	89 04 24             	mov    %eax,(%esp)
- 24f:	e8 fc 00 00 00       	call   350 <fstat>
- 254:	89 45 f0             	mov    %eax,-0x10(%ebp)
-  close(fd);
- 257:	8b 45 f4             	mov    -0xc(%ebp),%eax
- 25a:	89 04 24             	mov    %eax,(%esp)
- 25d:	e8 be 00 00 00       	call   320 <close>
-  return r;
- 262:	8b 45 f0             	mov    -0x10(%ebp),%eax
-}
- 265:	c9                   	leave  
- 266:	c3                   	ret    
-
-00000267 <atoi>:
-
-int
-atoi(const char *s)
-{
- 267:	55                   	push   %ebp
- 268:	89 e5                	mov    %esp,%ebp
- 26a:	83 ec 10             	sub    $0x10,%esp
-  int n;
-
-  n = 0;
- 26d:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
-  while('0' <= *s && *s <= '9')
- 274:	eb 23                	jmp    299 <atoi+0x32>
-    n = n*10 + *s++ - '0';
- 276:	8b 55 fc             	mov    -0x4(%ebp),%edx
- 279:	89 d0                	mov    %edx,%eax
- 27b:	c1 e0 02             	shl    $0x2,%eax
- 27e:	01 d0                	add    %edx,%eax
- 280:	01 c0                	add    %eax,%eax
- 282:	89 c2                	mov    %eax,%edx
- 284:	8b 45 08             	mov    0x8(%ebp),%eax
- 287:	0f b6 00             	movzbl (%eax),%eax
- 28a:	0f be c0             	movsbl %al,%eax
- 28d:	01 d0                	add    %edx,%eax
- 28f:	83 e8 30             	sub    $0x30,%eax
- 292:	89 45 fc             	mov    %eax,-0x4(%ebp)
- 295:	83 45 08 01          	addl   $0x1,0x8(%ebp)
-atoi(const char *s)
-{
-  int n;
-
-  n = 0;
-  while('0' <= *s && *s <= '9')
- 299:	8b 45 08             	mov    0x8(%ebp),%eax
- 29c:	0f b6 00             	movzbl (%eax),%eax
- 29f:	3c 2f                	cmp    $0x2f,%al
- 2a1:	7e 0a                	jle    2ad <atoi+0x46>
- 2a3:	8b 45 08             	mov    0x8(%ebp),%eax
- 2a6:	0f b6 00             	movzbl (%eax),%eax
- 2a9:	3c 39                	cmp    $0x39,%al
- 2ab:	7e c9                	jle    276 <atoi+0xf>
-    n = n*10 + *s++ - '0';
-  return n;
- 2ad:	8b 45 fc             	mov    -0x4(%ebp),%eax
-}
- 2b0:	c9                   	leave  
- 2b1:	c3                   	ret    
-
-000002b2 <memmove>:
-
-void*
-memmove(void *vdst, void *vsrc, int n)
-{
- 2b2:	55                   	push   %ebp
- 2b3:	89 e5                	mov    %esp,%ebp
- 2b5:	83 ec 10             	sub    $0x10,%esp
-  char *dst, *src;
-  
-  dst = vdst;
- 2b8:	8b 45 08             	mov    0x8(%ebp),%eax
- 2bb:	89 45 fc             	mov    %eax,-0x4(%ebp)
-  src = vsrc;
- 2be:	8b 45 0c             	mov    0xc(%ebp),%eax
- 2c1:	89 45 f8             	mov    %eax,-0x8(%ebp)
-  while(n-- > 0)
- 2c4:	eb 13                	jmp    2d9 <memmove+0x27>
-    *dst++ = *src++;
- 2c6:	8b 45 f8             	mov    -0x8(%ebp),%eax
- 2c9:	0f b6 10             	movzbl (%eax),%edx
- 2cc:	8b 45 fc             	mov    -0x4(%ebp),%eax
- 2cf:	88 10                	mov    %dl,(%eax)
- 2d1:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
- 2d5:	83 45 f8 01          	addl   $0x1,-0x8(%ebp)
-{
-  char *dst, *src;
-  
-  dst = vdst;
-  src = vsrc;
-  while(n-- > 0)
- 2d9:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
- 2dd:	0f 9f c0             	setg   %al
- 2e0:	83 6d 10 01          	subl   $0x1,0x10(%ebp)
- 2e4:	84 c0                	test   %al,%al
- 2e6:	75 de                	jne    2c6 <memmove+0x14>
-    *dst++ = *src++;
-  return vdst;
- 2e8:	8b 45 08             	mov    0x8(%ebp),%eax
-}
- 2eb:	c9                   	leave  
- 2ec:	c3                   	ret    
- 2ed:	90                   	nop
- 2ee:	90                   	nop
- 2ef:	90                   	nop
-
-000002f0 <fork>:
-  name: \
-    movl $SYS_ ## name, %eax; \
-    int $T_SYSCALL; \
-    ret
-
-SYSCALL(fork)
- 2f0:	b8 01 00 00 00       	mov    $0x1,%eax
- 2f5:	cd 40                	int    $0x40
- 2f7:	c3                   	ret    
-
-000002f8 <exit>:
-SYSCALL(exit)
- 2f8:	b8 02 00 00 00       	mov    $0x2,%eax
- 2fd:	cd 40                	int    $0x40
- 2ff:	c3                   	ret    
-
-00000300 <wait>:
-SYSCALL(wait)
- 300:	b8 03 00 00 00       	mov    $0x3,%eax
- 305:	cd 40                	int    $0x40
- 307:	c3                   	ret    
-
-00000308 <pipe>:
-SYSCALL(pipe)
- 308:	b8 04 00 00 00       	mov    $0x4,%eax
- 30d:	cd 40                	int    $0x40
- 30f:	c3                   	ret    
-
-00000310 <read>:
-SYSCALL(read)
- 310:	b8 05 00 00 00       	mov    $0x5,%eax
- 315:	cd 40                	int    $0x40
- 317:	c3                   	ret    
-
-00000318 <write>:
-SYSCALL(write)
- 318:	b8 10 00 00 00       	mov    $0x10,%eax
- 31d:	cd 40                	int    $0x40
- 31f:	c3                   	ret    
-
-00000320 <close>:
-SYSCALL(close)
- 320:	b8 15 00 00 00       	mov    $0x15,%eax
- 325:	cd 40                	int    $0x40
- 327:	c3                   	ret    
-
-00000328 <kill>:
-SYSCALL(kill)
- 328:	b8 06 00 00 00       	mov    $0x6,%eax
- 32d:	cd 40                	int    $0x40
- 32f:	c3                   	ret    
-
-00000330 <exec>:
-SYSCALL(exec)
- 330:	b8 07 00 00 00       	mov    $0x7,%eax
- 335:	cd 40                	int    $0x40
- 337:	c3                   	ret    
-
-00000338 <open>:
-SYSCALL(open)
- 338:	b8 0f 00 00 00       	mov    $0xf,%eax
- 33d:	cd 40                	int    $0x40
- 33f:	c3                   	ret    
-
-00000340 <mknod>:
-SYSCALL(mknod)
- 340:	b8 11 00 00 00       	mov    $0x11,%eax
- 345:	cd 40                	int    $0x40
- 347:	c3                   	ret    
-
-00000348 <unlink>:
-SYSCALL(unlink)
- 348:	b8 12 00 00 00       	mov    $0x12,%eax
- 34d:	cd 40                	int    $0x40
- 34f:	c3                   	ret    
-
-00000350 <fstat>:
-SYSCALL(fstat)
- 350:	b8 08 00 00 00       	mov    $0x8,%eax
- 355:	cd 40                	int    $0x40
- 357:	c3                   	ret    
-
-00000358 <link>:
-SYSCALL(link)
- 358:	b8 13 00 00 00       	mov    $0x13,%eax
- 35d:	cd 40                	int    $0x40
- 35f:	c3                   	ret    
-
-00000360 <mkdir>:
-SYSCALL(mkdir)
- 360:	b8 14 00 00 00       	mov    $0x14,%eax
- 365:	cd 40                	int    $0x40
- 367:	c3                   	ret    
-
-00000368 <chdir>:
-SYSCALL(chdir)
- 368:	b8 09 00 00 00       	mov    $0x9,%eax
- 36d:	cd 40                	int    $0x40
- 36f:	c3                   	ret    
-
-00000370 <dup>:
-SYSCALL(dup)
- 370:	b8 0a 00 00 00       	mov    $0xa,%eax
- 375:	cd 40                	int    $0x40
- 377:	c3                   	ret    
-
-00000378 <getpid>:
-SYSCALL(getpid)
- 378:	b8 0b 00 00 00       	mov    $0xb,%eax
- 37d:	cd 40                	int    $0x40
- 37f:	c3                   	ret    
-
-00000380 <sbrk>:
-SYSCALL(sbrk)
- 380:	b8 0c 00 00 00       	mov    $0xc,%eax
- 385:	cd 40                	int    $0x40
- 387:	c3                   	ret    
-
-00000388 <sleep>:
-SYSCALL(sleep)
- 388:	b8 0d 00 00 00       	mov    $0xd,%eax
- 38d:	cd 40                	int    $0x40
- 38f:	c3                   	ret    
-
-00000390 <uptime>:
-SYSCALL(uptime)
- 390:	b8 0e 00 00 00       	mov    $0xe,%eax
- 395:	cd 40                	int    $0x40
- 397:	c3                   	ret    
-
-00000398 <waitpid>:
-SYSCALL(waitpid)
- 398:	b8 16 00 00 00       	mov    $0x16,%eax
- 39d:	cd 40                	int    $0x40
- 39f:	c3                   	ret    
-
-000003a0 <wait_stat>:
-SYSCALL(wait_stat)
- 3a0:	b8 17 00 00 00       	mov    $0x17,%eax
- 3a5:	cd 40                	int    $0x40
- 3a7:	c3                   	ret    
-
-000003a8 <list_pgroup>:
-SYSCALL(list_pgroup)
- 3a8:	b8 18 00 00 00       	mov    $0x18,%eax
- 3ad:	cd 40                	int    $0x40
- 3af:	c3                   	ret    
-
-000003b0 <foreground>:
-SYSCALL(foreground)
- 3b0:	b8 19 00 00 00       	mov    $0x19,%eax
- 3b5:	cd 40                	int    $0x40
- 3b7:	c3                   	ret    
-
-000003b8 <set_priority>:
-SYSCALL(set_priority)
- 3b8:	b8 1a 00 00 00       	mov    $0x1a,%eax
- 3bd:	cd 40                	int    $0x40
- 3bf:	c3                   	ret    
-
-000003c0 <putc>:
-#include "stat.h"
-#include "user.h"
-
-static void
-putc(int fd, char c)
-{
- 3c0:	55                   	push   %ebp
- 3c1:	89 e5                	mov    %esp,%ebp
- 3c3:	83 ec 28             	sub    $0x28,%esp
- 3c6:	8b 45 0c             	mov    0xc(%ebp),%eax
- 3c9:	88 45 f4             	mov    %al,-0xc(%ebp)
-  write(fd, &c, 1);
- 3cc:	c7 44 24 08 01 00 00 	movl   $0x1,0x8(%esp)
- 3d3:	00 
- 3d4:	8d 45 f4             	lea    -0xc(%ebp),%eax
- 3d7:	89 44 24 04          	mov    %eax,0x4(%esp)
- 3db:	8b 45 08             	mov    0x8(%ebp),%eax
- 3de:	89 04 24             	mov    %eax,(%esp)
- 3e1:	e8 32 ff ff ff       	call   318 <write>
-}
- 3e6:	c9                   	leave  
- 3e7:	c3                   	ret    
-
-000003e8 <printint>:
-
-static void
-printint(int fd, int xx, int base, int sgn)
-{
- 3e8:	55                   	push   %ebp
- 3e9:	89 e5                	mov    %esp,%ebp
- 3eb:	83 ec 48             	sub    $0x48,%esp
-  static char digits[] = "0123456789ABCDEF";
-  char buf[16];
-  int i, neg;
-  uint x;
-
-  neg = 0;
- 3ee:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
-  if(sgn && xx < 0){
- 3f5:	83 7d 14 00          	cmpl   $0x0,0x14(%ebp)
- 3f9:	74 17                	je     412 <printint+0x2a>
- 3fb:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
- 3ff:	79 11                	jns    412 <printint+0x2a>
-    neg = 1;
- 401:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
-    x = -xx;
- 408:	8b 45 0c             	mov    0xc(%ebp),%eax
- 40b:	f7 d8                	neg    %eax
- 40d:	89 45 ec             	mov    %eax,-0x14(%ebp)
- 410:	eb 06                	jmp    418 <printint+0x30>
-  } else {
-    x = xx;
- 412:	8b 45 0c             	mov    0xc(%ebp),%eax
- 415:	89 45 ec             	mov    %eax,-0x14(%ebp)
-  }
-
-  i = 0;
- 418:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
-  do{
-    buf[i++] = digits[x % base];
- 41f:	8b 4d 10             	mov    0x10(%ebp),%ecx
- 422:	8b 45 ec             	mov    -0x14(%ebp),%eax
- 425:	ba 00 00 00 00       	mov    $0x0,%edx
- 42a:	f7 f1                	div    %ecx
- 42c:	89 d0                	mov    %edx,%eax
- 42e:	0f b6 90 d4 0a 00 00 	movzbl 0xad4(%eax),%edx
- 435:	8d 45 dc             	lea    -0x24(%ebp),%eax
- 438:	03 45 f4             	add    -0xc(%ebp),%eax
- 43b:	88 10                	mov    %dl,(%eax)
- 43d:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
-  }while((x /= base) != 0);
- 441:	8b 55 10             	mov    0x10(%ebp),%edx
- 444:	89 55 d4             	mov    %edx,-0x2c(%ebp)
- 447:	8b 45 ec             	mov    -0x14(%ebp),%eax
- 44a:	ba 00 00 00 00       	mov    $0x0,%edx
- 44f:	f7 75 d4             	divl   -0x2c(%ebp)
- 452:	89 45 ec             	mov    %eax,-0x14(%ebp)
- 455:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
- 459:	75 c4                	jne    41f <printint+0x37>
-  if(neg)
- 45b:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
- 45f:	74 2a                	je     48b <printint+0xa3>
-    buf[i++] = '-';
- 461:	8d 45 dc             	lea    -0x24(%ebp),%eax
- 464:	03 45 f4             	add    -0xc(%ebp),%eax
- 467:	c6 00 2d             	movb   $0x2d,(%eax)
- 46a:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
-
-  while(--i >= 0)
- 46e:	eb 1b                	jmp    48b <printint+0xa3>
-    putc(fd, buf[i]);
- 470:	8d 45 dc             	lea    -0x24(%ebp),%eax
- 473:	03 45 f4             	add    -0xc(%ebp),%eax
- 476:	0f b6 00             	movzbl (%eax),%eax
- 479:	0f be c0             	movsbl %al,%eax
- 47c:	89 44 24 04          	mov    %eax,0x4(%esp)
- 480:	8b 45 08             	mov    0x8(%ebp),%eax
- 483:	89 04 24             	mov    %eax,(%esp)
- 486:	e8 35 ff ff ff       	call   3c0 <putc>
-    buf[i++] = digits[x % base];
-  }while((x /= base) != 0);
-  if(neg)
-    buf[i++] = '-';
-
-  while(--i >= 0)
- 48b:	83 6d f4 01          	subl   $0x1,-0xc(%ebp)
- 48f:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
- 493:	79 db                	jns    470 <printint+0x88>
-    putc(fd, buf[i]);
-}
- 495:	c9                   	leave  
- 496:	c3                   	ret    
-
-00000497 <printf>:
-
-// Print to the given fd. Only understands %d, %x, %p, %s.
-void
-printf(int fd, char *fmt, ...)
-{
- 497:	55                   	push   %ebp
- 498:	89 e5                	mov    %esp,%ebp
- 49a:	83 ec 38             	sub    $0x38,%esp
-  char *s;
-  int c, i, state;
-  uint *ap;
-
-  state = 0;
- 49d:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
-  ap = (uint*)(void*)&fmt + 1;
- 4a4:	8d 45 0c             	lea    0xc(%ebp),%eax
- 4a7:	83 c0 04             	add    $0x4,%eax
- 4aa:	89 45 e8             	mov    %eax,-0x18(%ebp)
-  for(i = 0; fmt[i]; i++){
- 4ad:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
- 4b4:	e9 7d 01 00 00       	jmp    636 <printf+0x19f>
-    c = fmt[i] & 0xff;
- 4b9:	8b 55 0c             	mov    0xc(%ebp),%edx
- 4bc:	8b 45 f0             	mov    -0x10(%ebp),%eax
- 4bf:	01 d0                	add    %edx,%eax
- 4c1:	0f b6 00             	movzbl (%eax),%eax
- 4c4:	0f be c0             	movsbl %al,%eax
- 4c7:	25 ff 00 00 00       	and    $0xff,%eax
- 4cc:	89 45 e4             	mov    %eax,-0x1c(%ebp)
-    if(state == 0){
- 4cf:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
- 4d3:	75 2c                	jne    501 <printf+0x6a>
-      if(c == '%'){
- 4d5:	83 7d e4 25          	cmpl   $0x25,-0x1c(%ebp)
- 4d9:	75 0c                	jne    4e7 <printf+0x50>
-        state = '%';
- 4db:	c7 45 ec 25 00 00 00 	movl   $0x25,-0x14(%ebp)
- 4e2:	e9 4b 01 00 00       	jmp    632 <printf+0x19b>
-      } else {
-        putc(fd, c);
- 4e7:	8b 45 e4             	mov    -0x1c(%ebp),%eax
- 4ea:	0f be c0             	movsbl %al,%eax
- 4ed:	89 44 24 04          	mov    %eax,0x4(%esp)
- 4f1:	8b 45 08             	mov    0x8(%ebp),%eax
- 4f4:	89 04 24             	mov    %eax,(%esp)
- 4f7:	e8 c4 fe ff ff       	call   3c0 <putc>
- 4fc:	e9 31 01 00 00       	jmp    632 <printf+0x19b>
-      }
-    } else if(state == '%'){
- 501:	83 7d ec 25          	cmpl   $0x25,-0x14(%ebp)
- 505:	0f 85 27 01 00 00    	jne    632 <printf+0x19b>
-      if(c == 'd'){
- 50b:	83 7d e4 64          	cmpl   $0x64,-0x1c(%ebp)
- 50f:	75 2d                	jne    53e <printf+0xa7>
-        printint(fd, *ap, 10, 1);
- 511:	8b 45 e8             	mov    -0x18(%ebp),%eax
- 514:	8b 00                	mov    (%eax),%eax
- 516:	c7 44 24 0c 01 00 00 	movl   $0x1,0xc(%esp)
- 51d:	00 
- 51e:	c7 44 24 08 0a 00 00 	movl   $0xa,0x8(%esp)
- 525:	00 
- 526:	89 44 24 04          	mov    %eax,0x4(%esp)
- 52a:	8b 45 08             	mov    0x8(%ebp),%eax
- 52d:	89 04 24             	mov    %eax,(%esp)
- 530:	e8 b3 fe ff ff       	call   3e8 <printint>
-        ap++;
- 535:	83 45 e8 04          	addl   $0x4,-0x18(%ebp)
- 539:	e9 ed 00 00 00       	jmp    62b <printf+0x194>
-      } else if(c == 'x' || c == 'p'){
- 53e:	83 7d e4 78          	cmpl   $0x78,-0x1c(%ebp)
- 542:	74 06                	je     54a <printf+0xb3>
- 544:	83 7d e4 70          	cmpl   $0x70,-0x1c(%ebp)
- 548:	75 2d                	jne    577 <printf+0xe0>
-        printint(fd, *ap, 16, 0);
- 54a:	8b 45 e8             	mov    -0x18(%ebp),%eax
- 54d:	8b 00                	mov    (%eax),%eax
- 54f:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
- 556:	00 
- 557:	c7 44 24 08 10 00 00 	movl   $0x10,0x8(%esp)
- 55e:	00 
- 55f:	89 44 24 04          	mov    %eax,0x4(%esp)
- 563:	8b 45 08             	mov    0x8(%ebp),%eax
- 566:	89 04 24             	mov    %eax,(%esp)
- 569:	e8 7a fe ff ff       	call   3e8 <printint>
-        ap++;
- 56e:	83 45 e8 04          	addl   $0x4,-0x18(%ebp)
- 572:	e9 b4 00 00 00       	jmp    62b <printf+0x194>
-      } else if(c == 's'){
- 577:	83 7d e4 73          	cmpl   $0x73,-0x1c(%ebp)
- 57b:	75 46                	jne    5c3 <printf+0x12c>
-        s = (char*)*ap;
- 57d:	8b 45 e8             	mov    -0x18(%ebp),%eax
- 580:	8b 00                	mov    (%eax),%eax
- 582:	89 45 f4             	mov    %eax,-0xc(%ebp)
-        ap++;
- 585:	83 45 e8 04          	addl   $0x4,-0x18(%ebp)
-        if(s == 0)
- 589:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
- 58d:	75 27                	jne    5b6 <printf+0x11f>
-          s = "(null)";
- 58f:	c7 45 f4 8e 08 00 00 	movl   $0x88e,-0xc(%ebp)
-        while(*s != 0){
- 596:	eb 1e                	jmp    5b6 <printf+0x11f>
-          putc(fd, *s);
- 598:	8b 45 f4             	mov    -0xc(%ebp),%eax
- 59b:	0f b6 00             	movzbl (%eax),%eax
- 59e:	0f be c0             	movsbl %al,%eax
- 5a1:	89 44 24 04          	mov    %eax,0x4(%esp)
- 5a5:	8b 45 08             	mov    0x8(%ebp),%eax
- 5a8:	89 04 24             	mov    %eax,(%esp)
- 5ab:	e8 10 fe ff ff       	call   3c0 <putc>
-          s++;
- 5b0:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
- 5b4:	eb 01                	jmp    5b7 <printf+0x120>
-      } else if(c == 's'){
-        s = (char*)*ap;
-        ap++;
-        if(s == 0)
-          s = "(null)";
-        while(*s != 0){
- 5b6:	90                   	nop
- 5b7:	8b 45 f4             	mov    -0xc(%ebp),%eax
- 5ba:	0f b6 00             	movzbl (%eax),%eax
- 5bd:	84 c0                	test   %al,%al
- 5bf:	75 d7                	jne    598 <printf+0x101>
- 5c1:	eb 68                	jmp    62b <printf+0x194>
-          putc(fd, *s);
-          s++;
-        }
-      } else if(c == 'c'){
- 5c3:	83 7d e4 63          	cmpl   $0x63,-0x1c(%ebp)
- 5c7:	75 1d                	jne    5e6 <printf+0x14f>
-        putc(fd, *ap);
- 5c9:	8b 45 e8             	mov    -0x18(%ebp),%eax
- 5cc:	8b 00                	mov    (%eax),%eax
- 5ce:	0f be c0             	movsbl %al,%eax
- 5d1:	89 44 24 04          	mov    %eax,0x4(%esp)
- 5d5:	8b 45 08             	mov    0x8(%ebp),%eax
- 5d8:	89 04 24             	mov    %eax,(%esp)
- 5db:	e8 e0 fd ff ff       	call   3c0 <putc>
-        ap++;
- 5e0:	83 45 e8 04          	addl   $0x4,-0x18(%ebp)
- 5e4:	eb 45                	jmp    62b <printf+0x194>
-      } else if(c == '%'){
- 5e6:	83 7d e4 25          	cmpl   $0x25,-0x1c(%ebp)
- 5ea:	75 17                	jne    603 <printf+0x16c>
-        putc(fd, c);
- 5ec:	8b 45 e4             	mov    -0x1c(%ebp),%eax
- 5ef:	0f be c0             	movsbl %al,%eax
- 5f2:	89 44 24 04          	mov    %eax,0x4(%esp)
- 5f6:	8b 45 08             	mov    0x8(%ebp),%eax
- 5f9:	89 04 24             	mov    %eax,(%esp)
- 5fc:	e8 bf fd ff ff       	call   3c0 <putc>
- 601:	eb 28                	jmp    62b <printf+0x194>
-      } else {
-        // Unknown % sequence.  Print it to draw attention.
-        putc(fd, '%');
- 603:	c7 44 24 04 25 00 00 	movl   $0x25,0x4(%esp)
- 60a:	00 
- 60b:	8b 45 08             	mov    0x8(%ebp),%eax
- 60e:	89 04 24             	mov    %eax,(%esp)
- 611:	e8 aa fd ff ff       	call   3c0 <putc>
-        putc(fd, c);
- 616:	8b 45 e4             	mov    -0x1c(%ebp),%eax
- 619:	0f be c0             	movsbl %al,%eax
- 61c:	89 44 24 04          	mov    %eax,0x4(%esp)
- 620:	8b 45 08             	mov    0x8(%ebp),%eax
- 623:	89 04 24             	mov    %eax,(%esp)
- 626:	e8 95 fd ff ff       	call   3c0 <putc>
-      }
-      state = 0;
- 62b:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
-  int c, i, state;
-  uint *ap;
-
-  state = 0;
-  ap = (uint*)(void*)&fmt + 1;
-  for(i = 0; fmt[i]; i++){
- 632:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)
- 636:	8b 55 0c             	mov    0xc(%ebp),%edx
- 639:	8b 45 f0             	mov    -0x10(%ebp),%eax
- 63c:	01 d0                	add    %edx,%eax
- 63e:	0f b6 00             	movzbl (%eax),%eax
- 641:	84 c0                	test   %al,%al
- 643:	0f 85 70 fe ff ff    	jne    4b9 <printf+0x22>
-        putc(fd, c);
-      }
-      state = 0;
-    }
-  }
-}
- 649:	c9                   	leave  
- 64a:	c3                   	ret    
- 64b:	90                   	nop
-
-0000064c <free>:
-static Header base;
-static Header *freep;
-
-void
-free(void *ap)
-{
- 64c:	55                   	push   %ebp
- 64d:	89 e5                	mov    %esp,%ebp
- 64f:	83 ec 10             	sub    $0x10,%esp
-  Header *bp, *p;
-
-  bp = (Header*)ap - 1;
- 652:	8b 45 08             	mov    0x8(%ebp),%eax
- 655:	83 e8 08             	sub    $0x8,%eax
- 658:	89 45 f8             	mov    %eax,-0x8(%ebp)
-  for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
- 65b:	a1 f0 0a 00 00       	mov    0xaf0,%eax
- 660:	89 45 fc             	mov    %eax,-0x4(%ebp)
- 663:	eb 24                	jmp    689 <free+0x3d>
-    if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
- 665:	8b 45 fc             	mov    -0x4(%ebp),%eax
- 668:	8b 00                	mov    (%eax),%eax
- 66a:	3b 45 fc             	cmp    -0x4(%ebp),%eax
- 66d:	77 12                	ja     681 <free+0x35>
- 66f:	8b 45 f8             	mov    -0x8(%ebp),%eax
- 672:	3b 45 fc             	cmp    -0x4(%ebp),%eax
- 675:	77 24                	ja     69b <free+0x4f>
- 677:	8b 45 fc             	mov    -0x4(%ebp),%eax
- 67a:	8b 00                	mov    (%eax),%eax
- 67c:	3b 45 f8             	cmp    -0x8(%ebp),%eax
- 67f:	77 1a                	ja     69b <free+0x4f>
-free(void *ap)
-{
-  Header *bp, *p;
-
-  bp = (Header*)ap - 1;
-  for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
- 681:	8b 45 fc             	mov    -0x4(%ebp),%eax
- 684:	8b 00                	mov    (%eax),%eax
- 686:	89 45 fc             	mov    %eax,-0x4(%ebp)
- 689:	8b 45 f8             	mov    -0x8(%ebp),%eax
- 68c:	3b 45 fc             	cmp    -0x4(%ebp),%eax
- 68f:	76 d4                	jbe    665 <free+0x19>
- 691:	8b 45 fc             	mov    -0x4(%ebp),%eax
- 694:	8b 00                	mov    (%eax),%eax
- 696:	3b 45 f8             	cmp    -0x8(%ebp),%eax
- 699:	76 ca                	jbe    665 <free+0x19>
-    if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
-      break;
-  if(bp + bp->s.size == p->s.ptr){
- 69b:	8b 45 f8             	mov    -0x8(%ebp),%eax
- 69e:	8b 40 04             	mov    0x4(%eax),%eax
- 6a1:	c1 e0 03             	shl    $0x3,%eax
- 6a4:	89 c2                	mov    %eax,%edx
- 6a6:	03 55 f8             	add    -0x8(%ebp),%edx
- 6a9:	8b 45 fc             	mov    -0x4(%ebp),%eax
- 6ac:	8b 00                	mov    (%eax),%eax
- 6ae:	39 c2                	cmp    %eax,%edx
- 6b0:	75 24                	jne    6d6 <free+0x8a>
-    bp->s.size += p->s.ptr->s.size;
- 6b2:	8b 45 f8             	mov    -0x8(%ebp),%eax
- 6b5:	8b 50 04             	mov    0x4(%eax),%edx
- 6b8:	8b 45 fc             	mov    -0x4(%ebp),%eax
- 6bb:	8b 00                	mov    (%eax),%eax
- 6bd:	8b 40 04             	mov    0x4(%eax),%eax
- 6c0:	01 c2                	add    %eax,%edx
- 6c2:	8b 45 f8             	mov    -0x8(%ebp),%eax
- 6c5:	89 50 04             	mov    %edx,0x4(%eax)
-    bp->s.ptr = p->s.ptr->s.ptr;
- 6c8:	8b 45 fc             	mov    -0x4(%ebp),%eax
- 6cb:	8b 00                	mov    (%eax),%eax
- 6cd:	8b 10                	mov    (%eax),%edx
- 6cf:	8b 45 f8             	mov    -0x8(%ebp),%eax
- 6d2:	89 10                	mov    %edx,(%eax)
- 6d4:	eb 0a                	jmp    6e0 <free+0x94>
-  } else
-    bp->s.ptr = p->s.ptr;
- 6d6:	8b 45 fc             	mov    -0x4(%ebp),%eax
- 6d9:	8b 10                	mov    (%eax),%edx
- 6db:	8b 45 f8             	mov    -0x8(%ebp),%eax
- 6de:	89 10                	mov    %edx,(%eax)
-  if(p + p->s.size == bp){
- 6e0:	8b 45 fc             	mov    -0x4(%ebp),%eax
- 6e3:	8b 40 04             	mov    0x4(%eax),%eax
- 6e6:	c1 e0 03             	shl    $0x3,%eax
- 6e9:	03 45 fc             	add    -0x4(%ebp),%eax
- 6ec:	3b 45 f8             	cmp    -0x8(%ebp),%eax
- 6ef:	75 20                	jne    711 <free+0xc5>
-    p->s.size += bp->s.size;
- 6f1:	8b 45 fc             	mov    -0x4(%ebp),%eax
- 6f4:	8b 50 04             	mov    0x4(%eax),%edx
- 6f7:	8b 45 f8             	mov    -0x8(%ebp),%eax
- 6fa:	8b 40 04             	mov    0x4(%eax),%eax
- 6fd:	01 c2                	add    %eax,%edx
- 6ff:	8b 45 fc             	mov    -0x4(%ebp),%eax
- 702:	89 50 04             	mov    %edx,0x4(%eax)
-    p->s.ptr = bp->s.ptr;
- 705:	8b 45 f8             	mov    -0x8(%ebp),%eax
- 708:	8b 10                	mov    (%eax),%edx
- 70a:	8b 45 fc             	mov    -0x4(%ebp),%eax
- 70d:	89 10                	mov    %edx,(%eax)
- 70f:	eb 08                	jmp    719 <free+0xcd>
-  } else
-    p->s.ptr = bp;
- 711:	8b 45 fc             	mov    -0x4(%ebp),%eax
- 714:	8b 55 f8             	mov    -0x8(%ebp),%edx
- 717:	89 10                	mov    %edx,(%eax)
-  freep = p;
- 719:	8b 45 fc             	mov    -0x4(%ebp),%eax
- 71c:	a3 f0 0a 00 00       	mov    %eax,0xaf0
-}
- 721:	c9                   	leave  
- 722:	c3                   	ret    
-
-00000723 <morecore>:
-
-static Header*
-morecore(uint nu)
-{
- 723:	55                   	push   %ebp
- 724:	89 e5                	mov    %esp,%ebp
- 726:	83 ec 28             	sub    $0x28,%esp
-  char *p;
-  Header *hp;
-
-  if(nu < 4096)
- 729:	81 7d 08 ff 0f 00 00 	cmpl   $0xfff,0x8(%ebp)
- 730:	77 07                	ja     739 <morecore+0x16>
-    nu = 4096;
- 732:	c7 45 08 00 10 00 00 	movl   $0x1000,0x8(%ebp)
-  p = sbrk(nu * sizeof(Header));
- 739:	8b 45 08             	mov    0x8(%ebp),%eax
- 73c:	c1 e0 03             	shl    $0x3,%eax
- 73f:	89 04 24             	mov    %eax,(%esp)
- 742:	e8 39 fc ff ff       	call   380 <sbrk>
- 747:	89 45 f4             	mov    %eax,-0xc(%ebp)
-  if(p == (char*)-1)
- 74a:	83 7d f4 ff          	cmpl   $0xffffffff,-0xc(%ebp)
- 74e:	75 07                	jne    757 <morecore+0x34>
-    return 0;
- 750:	b8 00 00 00 00       	mov    $0x0,%eax
- 755:	eb 22                	jmp    779 <morecore+0x56>
-  hp = (Header*)p;
- 757:	8b 45 f4             	mov    -0xc(%ebp),%eax
- 75a:	89 45 f0             	mov    %eax,-0x10(%ebp)
-  hp->s.size = nu;
- 75d:	8b 45 f0             	mov    -0x10(%ebp),%eax
- 760:	8b 55 08             	mov    0x8(%ebp),%edx
- 763:	89 50 04             	mov    %edx,0x4(%eax)
-  free((void*)(hp + 1));
- 766:	8b 45 f0             	mov    -0x10(%ebp),%eax
- 769:	83 c0 08             	add    $0x8,%eax
- 76c:	89 04 24             	mov    %eax,(%esp)
- 76f:	e8 d8 fe ff ff       	call   64c <free>
-  return freep;
- 774:	a1 f0 0a 00 00       	mov    0xaf0,%eax
-}
- 779:	c9                   	leave  
- 77a:	c3                   	ret    
-
-0000077b <malloc>:
-
-void*
-malloc(uint nbytes)
-{
- 77b:	55                   	push   %ebp
- 77c:	89 e5                	mov    %esp,%ebp
- 77e:	83 ec 28             	sub    $0x28,%esp
-  Header *p, *prevp;
-  uint nunits;
-
-  nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;
- 781:	8b 45 08             	mov    0x8(%ebp),%eax
- 784:	83 c0 07             	add    $0x7,%eax
- 787:	c1 e8 03             	shr    $0x3,%eax
- 78a:	83 c0 01             	add    $0x1,%eax
- 78d:	89 45 ec             	mov    %eax,-0x14(%ebp)
-  if((prevp = freep) == 0){
- 790:	a1 f0 0a 00 00       	mov    0xaf0,%eax
- 795:	89 45 f0             	mov    %eax,-0x10(%ebp)
- 798:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
- 79c:	75 23                	jne    7c1 <malloc+0x46>
-    base.s.ptr = freep = prevp = &base;
- 79e:	c7 45 f0 e8 0a 00 00 	movl   $0xae8,-0x10(%ebp)
- 7a5:	8b 45 f0             	mov    -0x10(%ebp),%eax
- 7a8:	a3 f0 0a 00 00       	mov    %eax,0xaf0
- 7ad:	a1 f0 0a 00 00       	mov    0xaf0,%eax
- 7b2:	a3 e8 0a 00 00       	mov    %eax,0xae8
-    base.s.size = 0;
- 7b7:	c7 05 ec 0a 00 00 00 	movl   $0x0,0xaec
- 7be:	00 00 00 
-  }
-  for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
- 7c1:	8b 45 f0             	mov    -0x10(%ebp),%eax
- 7c4:	8b 00                	mov    (%eax),%eax
- 7c6:	89 45 f4             	mov    %eax,-0xc(%ebp)
-    if(p->s.size >= nunits){
- 7c9:	8b 45 f4             	mov    -0xc(%ebp),%eax
- 7cc:	8b 40 04             	mov    0x4(%eax),%eax
- 7cf:	3b 45 ec             	cmp    -0x14(%ebp),%eax
- 7d2:	72 4d                	jb     821 <malloc+0xa6>
-      if(p->s.size == nunits)
- 7d4:	8b 45 f4             	mov    -0xc(%ebp),%eax
- 7d7:	8b 40 04             	mov    0x4(%eax),%eax
- 7da:	3b 45 ec             	cmp    -0x14(%ebp),%eax
- 7dd:	75 0c                	jne    7eb <malloc+0x70>
-        prevp->s.ptr = p->s.ptr;
- 7df:	8b 45 f4             	mov    -0xc(%ebp),%eax
- 7e2:	8b 10                	mov    (%eax),%edx
- 7e4:	8b 45 f0             	mov    -0x10(%ebp),%eax
- 7e7:	89 10                	mov    %edx,(%eax)
- 7e9:	eb 26                	jmp    811 <malloc+0x96>
-      else {
-        p->s.size -= nunits;
- 7eb:	8b 45 f4             	mov    -0xc(%ebp),%eax
- 7ee:	8b 40 04             	mov    0x4(%eax),%eax
- 7f1:	89 c2                	mov    %eax,%edx
- 7f3:	2b 55 ec             	sub    -0x14(%ebp),%edx
- 7f6:	8b 45 f4             	mov    -0xc(%ebp),%eax
- 7f9:	89 50 04             	mov    %edx,0x4(%eax)
-        p += p->s.size;
- 7fc:	8b 45 f4             	mov    -0xc(%ebp),%eax
- 7ff:	8b 40 04             	mov    0x4(%eax),%eax
- 802:	c1 e0 03             	shl    $0x3,%eax
- 805:	01 45 f4             	add    %eax,-0xc(%ebp)
-        p->s.size = nunits;
- 808:	8b 45 f4             	mov    -0xc(%ebp),%eax
- 80b:	8b 55 ec             	mov    -0x14(%ebp),%edx
- 80e:	89 50 04             	mov    %edx,0x4(%eax)
-      }
-      freep = prevp;
- 811:	8b 45 f0             	mov    -0x10(%ebp),%eax
- 814:	a3 f0 0a 00 00       	mov    %eax,0xaf0
-      return (void*)(p + 1);
- 819:	8b 45 f4             	mov    -0xc(%ebp),%eax
- 81c:	83 c0 08             	add    $0x8,%eax
- 81f:	eb 38                	jmp    859 <malloc+0xde>
-    }
-    if(p == freep)
- 821:	a1 f0 0a 00 00       	mov    0xaf0,%eax
- 826:	39 45 f4             	cmp    %eax,-0xc(%ebp)
- 829:	75 1b                	jne    846 <malloc+0xcb>
-      if((p = morecore(nunits)) == 0)
- 82b:	8b 45 ec             	mov    -0x14(%ebp),%eax
- 82e:	89 04 24             	mov    %eax,(%esp)
- 831:	e8 ed fe ff ff       	call   723 <morecore>
- 836:	89 45 f4             	mov    %eax,-0xc(%ebp)
- 839:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
- 83d:	75 07                	jne    846 <malloc+0xcb>
-        return 0;
- 83f:	b8 00 00 00 00       	mov    $0x0,%eax
- 844:	eb 13                	jmp    859 <malloc+0xde>
-  nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;
-  if((prevp = freep) == 0){
-    base.s.ptr = freep = prevp = &base;
-    base.s.size = 0;
-  }
-  for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
- 846:	8b 45 f4             	mov    -0xc(%ebp),%eax
- 849:	89 45 f0             	mov    %eax,-0x10(%ebp)
- 84c:	8b 45 f4             	mov    -0xc(%ebp),%eax
- 84f:	8b 00                	mov    (%eax),%eax
- 851:	89 45 f4             	mov    %eax,-0xc(%ebp)
-      return (void*)(p + 1);
-    }
-    if(p == freep)
-      if((p = morecore(nunits)) == 0)
-        return 0;
-  }
- 854:	e9 70 ff ff ff       	jmp    7c9 <malloc+0x4e>
-}
- 859:	c9                   	leave  
- 85a:	c3                   	ret    
diff --git a/xv6/mkdir.c b/xv6/mkdir.c
deleted file mode 100644
index 41e263b..0000000
--- a/xv6/mkdir.c
+++ /dev/null
@@ -1,23 +0,0 @@
-#include "types.h"
-#include "stat.h"
-#include "user.h"
-
-int
-main(int argc, char *argv[])
-{
-  int i;
-
-  if(argc < 2){
-    printf(2, "Usage: mkdir files...\n");
-    exit(EXIT_STATUS_DEFAULT);
-  }
-
-  for(i = 1; i < argc; i++){
-    if(mkdir(argv[i]) < 0){
-      printf(2, "mkdir: %s failed to create\n", argv[i]);
-      break;
-    }
-  }
-
-  exit(EXIT_STATUS_DEFAULT);
-}
diff --git a/xv6/mkdir.d b/xv6/mkdir.d
deleted file mode 100644
index f543196..0000000
--- a/xv6/mkdir.d
+++ /dev/null
@@ -1 +0,0 @@
-mkdir.o: mkdir.c types.h stat.h user.h
diff --git a/xv6/mkdir.sym b/xv6/mkdir.sym
deleted file mode 100644
index 53559b9..0000000
--- a/xv6/mkdir.sym
+++ /dev/null
@@ -1,65 +0,0 @@
-00000000 .text
-0000085b .rodata
-00000898 .eh_frame
-00000ad4 .data
-00000ae8 .bss
-00000000 .comment
-00000000 .debug_aranges
-00000000 .debug_info
-00000000 .debug_abbrev
-00000000 .debug_line
-00000000 .debug_str
-00000000 .debug_loc
-00000000 mkdir.c
-00000000 ulib.c
-00000094 stosb
-00000000 printf.c
-000003c0 putc
-000003e8 printint
-00000ad4 digits.923
-00000000 umalloc.c
-00000ae8 base
-00000af0 freep
-00000723 morecore
-000000b9 strcpy
-00000398 waitpid
-00000497 printf
-000002b2 memmove
-00000340 mknod
-000003b0 foreground
-000001aa gets
-00000378 getpid
-0000077b malloc
-00000388 sleep
-000003b8 set_priority
-000003a0 wait_stat
-00000308 pipe
-00000318 write
-00000350 fstat
-00000328 kill
-00000368 chdir
-00000330 exec
-00000300 wait
-00000310 read
-00000348 unlink
-000002f0 fork
-00000380 sbrk
-00000390 uptime
-00000ae8 __bss_start
-00000153 memset
-00000000 main
-000000ed strcmp
-00000370 dup
-000003a8 list_pgroup
-00000219 stat
-00000ae8 _edata
-00000af4 _end
-00000358 link
-000002f8 exit
-00000267 atoi
-0000012e strlen
-00000338 open
-00000177 strchr
-00000360 mkdir
-00000320 close
-0000064c free
diff --git a/xv6/mkfs.c b/xv6/mkfs.c
deleted file mode 100644
index c168377..0000000
--- a/xv6/mkfs.c
+++ /dev/null
@@ -1,298 +0,0 @@
-#include <stdio.h>
-#include <unistd.h>
-#include <stdlib.h>
-#include <string.h>
-#include <fcntl.h>
-#include <assert.h>
-
-#define stat xv6_stat  // avoid clash with host struct stat
-#include "types.h"
-#include "fs.h"
-#include "stat.h"
-#include "param.h"
-
-#define static_assert(a, b) do { switch (0) case 0: case (a): ; } while (0)
-
-int nblocks = (995-LOGSIZE);
-int nlog = LOGSIZE;
-int ninodes = 200;
-int size = 1024;
-
-int fsfd;
-struct superblock sb;
-char zeroes[512];
-uint freeblock;
-uint usedblocks;
-uint bitblocks;
-uint freeinode = 1;
-
-void balloc(int);
-void wsect(uint, void*);
-void winode(uint, struct dinode*);
-void rinode(uint inum, struct dinode *ip);
-void rsect(uint sec, void *buf);
-uint ialloc(ushort type);
-void iappend(uint inum, void *p, int n);
-
-// convert to intel byte order
-ushort
-xshort(ushort x)
-{
-  ushort y;
-  uchar *a = (uchar*)&y;
-  a[0] = x;
-  a[1] = x >> 8;
-  return y;
-}
-
-uint
-xint(uint x)
-{
-  uint y;
-  uchar *a = (uchar*)&y;
-  a[0] = x;
-  a[1] = x >> 8;
-  a[2] = x >> 16;
-  a[3] = x >> 24;
-  return y;
-}
-
-int
-main(int argc, char *argv[])
-{
-  int i, cc, fd;
-  uint rootino, inum, off;
-  struct dirent de;
-  char buf[512];
-  struct dinode din;
-
-
-  static_assert(sizeof(int) == 4, "Integers must be 4 bytes!");
-
-  if(argc < 2){
-    fprintf(stderr, "Usage: mkfs fs.img files...\n");
-    exit(1);
-  }
-
-  assert((512 % sizeof(struct dinode)) == 0);
-  assert((512 % sizeof(struct dirent)) == 0);
-
-  fsfd = open(argv[1], O_RDWR|O_CREAT|O_TRUNC, 0666);
-  if(fsfd < 0){
-    perror(argv[1]);
-    exit(1);
-  }
-
-  sb.size = xint(size);
-  sb.nblocks = xint(nblocks); // so whole disk is size sectors
-  sb.ninodes = xint(ninodes);
-  sb.nlog = xint(nlog);
-
-  bitblocks = size/(512*8) + 1;
-  usedblocks = ninodes / IPB + 3 + bitblocks;
-  freeblock = usedblocks;
-
-  printf("used %d (bit %d ninode %zu) free %u log %u total %d\n", usedblocks,
-         bitblocks, ninodes/IPB + 1, freeblock, nlog, nblocks+usedblocks+nlog);
-
-  assert(nblocks + usedblocks + nlog == size);
-
-  for(i = 0; i < nblocks + usedblocks + nlog; i++)
-    wsect(i, zeroes);
-
-  memset(buf, 0, sizeof(buf));
-  memmove(buf, &sb, sizeof(sb));
-  wsect(1, buf);
-
-  rootino = ialloc(T_DIR);
-  assert(rootino == ROOTINO);
-
-  bzero(&de, sizeof(de));
-  de.inum = xshort(rootino);
-  strcpy(de.name, ".");
-  iappend(rootino, &de, sizeof(de));
-
-  bzero(&de, sizeof(de));
-  de.inum = xshort(rootino);
-  strcpy(de.name, "..");
-  iappend(rootino, &de, sizeof(de));
-
-  for(i = 2; i < argc; i++){
-    assert(index(argv[i], '/') == 0);
-
-    if((fd = open(argv[i], 0)) < 0){
-      perror(argv[i]);
-      exit(1);
-    }
-    
-    // Skip leading _ in name when writing to file system.
-    // The binaries are named _rm, _cat, etc. to keep the
-    // build operating system from trying to execute them
-    // in place of system binaries like rm and cat.
-    if(argv[i][0] == '_')
-      ++argv[i];
-
-    inum = ialloc(T_FILE);
-
-    bzero(&de, sizeof(de));
-    de.inum = xshort(inum);
-    strncpy(de.name, argv[i], DIRSIZ);
-    iappend(rootino, &de, sizeof(de));
-
-    while((cc = read(fd, buf, sizeof(buf))) > 0)
-      iappend(inum, buf, cc);
-
-    close(fd);
-  }
-
-  // fix size of root inode dir
-  rinode(rootino, &din);
-  off = xint(din.size);
-  off = ((off/BSIZE) + 1) * BSIZE;
-  din.size = xint(off);
-  winode(rootino, &din);
-
-  balloc(usedblocks);
-
-  exit(0);
-}
-
-void
-wsect(uint sec, void *buf)
-{
-  if(lseek(fsfd, sec * 512L, 0) != sec * 512L){
-    perror("lseek");
-    exit(1);
-  }
-  if(write(fsfd, buf, 512) != 512){
-    perror("write");
-    exit(1);
-  }
-}
-
-uint
-i2b(uint inum)
-{
-  return (inum / IPB) + 2;
-}
-
-void
-winode(uint inum, struct dinode *ip)
-{
-  char buf[512];
-  uint bn;
-  struct dinode *dip;
-
-  bn = i2b(inum);
-  rsect(bn, buf);
-  dip = ((struct dinode*)buf) + (inum % IPB);
-  *dip = *ip;
-  wsect(bn, buf);
-}
-
-void
-rinode(uint inum, struct dinode *ip)
-{
-  char buf[512];
-  uint bn;
-  struct dinode *dip;
-
-  bn = i2b(inum);
-  rsect(bn, buf);
-  dip = ((struct dinode*)buf) + (inum % IPB);
-  *ip = *dip;
-}
-
-void
-rsect(uint sec, void *buf)
-{
-  if(lseek(fsfd, sec * 512L, 0) != sec * 512L){
-    perror("lseek");
-    exit(1);
-  }
-  if(read(fsfd, buf, 512) != 512){
-    perror("read");
-    exit(1);
-  }
-}
-
-uint
-ialloc(ushort type)
-{
-  uint inum = freeinode++;
-  struct dinode din;
-
-  bzero(&din, sizeof(din));
-  din.type = xshort(type);
-  din.nlink = xshort(1);
-  din.size = xint(0);
-  winode(inum, &din);
-  return inum;
-}
-
-void
-balloc(int used)
-{
-  uchar buf[512];
-  int i;
-
-  printf("balloc: first %d blocks have been allocated\n", used);
-  assert(used < 512*8);
-  bzero(buf, 512);
-  for(i = 0; i < used; i++){
-    buf[i/8] = buf[i/8] | (0x1 << (i%8));
-  }
-  printf("balloc: write bitmap block at sector %zu\n", ninodes/IPB + 3);
-  wsect(ninodes / IPB + 3, buf);
-}
-
-#define min(a, b) ((a) < (b) ? (a) : (b))
-
-void
-iappend(uint inum, void *xp, int n)
-{
-  char *p = (char*)xp;
-  uint fbn, off, n1;
-  struct dinode din;
-  char buf[512];
-  uint indirect[NINDIRECT];
-  uint x;
-
-  rinode(inum, &din);
-
-  off = xint(din.size);
-  while(n > 0){
-    fbn = off / 512;
-    assert(fbn < MAXFILE);
-    if(fbn < NDIRECT){
-      if(xint(din.addrs[fbn]) == 0){
-        din.addrs[fbn] = xint(freeblock++);
-        usedblocks++;
-      }
-      x = xint(din.addrs[fbn]);
-    } else {
-      if(xint(din.addrs[NDIRECT]) == 0){
-        // printf("allocate indirect block\n");
-        din.addrs[NDIRECT] = xint(freeblock++);
-        usedblocks++;
-      }
-      // printf("read indirect block\n");
-      rsect(xint(din.addrs[NDIRECT]), (char*)indirect);
-      if(indirect[fbn - NDIRECT] == 0){
-        indirect[fbn - NDIRECT] = xint(freeblock++);
-        usedblocks++;
-        wsect(xint(din.addrs[NDIRECT]), (char*)indirect);
-      }
-      x = xint(indirect[fbn-NDIRECT]);
-    }
-    n1 = min(n, (fbn + 1) * 512 - off);
-    rsect(x, buf);
-    bcopy(p, buf + off - (fbn * 512), n1);
-    wsect(x, buf);
-    n -= n1;
-    off += n1;
-    p += n1;
-  }
-  din.size = xint(off);
-  winode(inum, &din);
-}
diff --git a/xv6/mmu.h b/xv6/mmu.h
deleted file mode 100644
index 685f51d..0000000
--- a/xv6/mmu.h
+++ /dev/null
@@ -1,226 +0,0 @@
-// This file contains definitions for the 
-// x86 memory management unit (MMU).
-
-// Eflags register
-#define FL_CF           0x00000001      // Carry Flag
-#define FL_PF           0x00000004      // Parity Flag
-#define FL_AF           0x00000010      // Auxiliary carry Flag
-#define FL_ZF           0x00000040      // Zero Flag
-#define FL_SF           0x00000080      // Sign Flag
-#define FL_TF           0x00000100      // Trap Flag
-#define FL_IF           0x00000200      // Interrupt Enable
-#define FL_DF           0x00000400      // Direction Flag
-#define FL_OF           0x00000800      // Overflow Flag
-#define FL_IOPL_MASK    0x00003000      // I/O Privilege Level bitmask
-#define FL_IOPL_0       0x00000000      //   IOPL == 0
-#define FL_IOPL_1       0x00001000      //   IOPL == 1
-#define FL_IOPL_2       0x00002000      //   IOPL == 2
-#define FL_IOPL_3       0x00003000      //   IOPL == 3
-#define FL_NT           0x00004000      // Nested Task
-#define FL_RF           0x00010000      // Resume Flag
-#define FL_VM           0x00020000      // Virtual 8086 mode
-#define FL_AC           0x00040000      // Alignment Check
-#define FL_VIF          0x00080000      // Virtual Interrupt Flag
-#define FL_VIP          0x00100000      // Virtual Interrupt Pending
-#define FL_ID           0x00200000      // ID flag
-
-// Control Register flags
-#define CR0_PE          0x00000001      // Protection Enable
-#define CR0_MP          0x00000002      // Monitor coProcessor
-#define CR0_EM          0x00000004      // Emulation
-#define CR0_TS          0x00000008      // Task Switched
-#define CR0_ET          0x00000010      // Extension Type
-#define CR0_NE          0x00000020      // Numeric Errror
-#define CR0_WP          0x00010000      // Write Protect
-#define CR0_AM          0x00040000      // Alignment Mask
-#define CR0_NW          0x20000000      // Not Writethrough
-#define CR0_CD          0x40000000      // Cache Disable
-#define CR0_PG          0x80000000      // Paging
-
-#define CR4_PSE         0x00000010      // Page size extension
-
-#define SEG_KCODE 1  // kernel code
-#define SEG_KDATA 2  // kernel data+stack
-#define SEG_KCPU  3  // kernel per-cpu data
-#define SEG_UCODE 4  // user code
-#define SEG_UDATA 5  // user data+stack
-#define SEG_TSS   6  // this process's task state
-
-//PAGEBREAK!
-#ifndef __ASSEMBLER__
-// Segment Descriptor
-struct segdesc {
-  uint lim_15_0 : 16;  // Low bits of segment limit
-  uint base_15_0 : 16; // Low bits of segment base address
-  uint base_23_16 : 8; // Middle bits of segment base address
-  uint type : 4;       // Segment type (see STS_ constants)
-  uint s : 1;          // 0 = system, 1 = application
-  uint dpl : 2;        // Descriptor Privilege Level
-  uint p : 1;          // Present
-  uint lim_19_16 : 4;  // High bits of segment limit
-  uint avl : 1;        // Unused (available for software use)
-  uint rsv1 : 1;       // Reserved
-  uint db : 1;         // 0 = 16-bit segment, 1 = 32-bit segment
-  uint g : 1;          // Granularity: limit scaled by 4K when set
-  uint base_31_24 : 8; // High bits of segment base address
-};
-
-// Normal segment
-#define SEG(type, base, lim, dpl) (struct segdesc)    \
-{ ((lim) >> 12) & 0xffff, (uint)(base) & 0xffff,      \
-  ((uint)(base) >> 16) & 0xff, type, 1, dpl, 1,       \
-  (uint)(lim) >> 28, 0, 0, 1, 1, (uint)(base) >> 24 }
-#define SEG16(type, base, lim, dpl) (struct segdesc)  \
-{ (lim) & 0xffff, (uint)(base) & 0xffff,              \
-  ((uint)(base) >> 16) & 0xff, type, 1, dpl, 1,       \
-  (uint)(lim) >> 16, 0, 0, 1, 0, (uint)(base) >> 24 }
-#endif
-
-#define DPL_USER    0x3     // User DPL
-
-// Application segment type bits
-#define STA_X       0x8     // Executable segment
-#define STA_E       0x4     // Expand down (non-executable segments)
-#define STA_C       0x4     // Conforming code segment (executable only)
-#define STA_W       0x2     // Writeable (non-executable segments)
-#define STA_R       0x2     // Readable (executable segments)
-#define STA_A       0x1     // Accessed
-
-// System segment type bits
-#define STS_T16A    0x1     // Available 16-bit TSS
-#define STS_LDT     0x2     // Local Descriptor Table
-#define STS_T16B    0x3     // Busy 16-bit TSS
-#define STS_CG16    0x4     // 16-bit Call Gate
-#define STS_TG      0x5     // Task Gate / Coum Transmitions
-#define STS_IG16    0x6     // 16-bit Interrupt Gate
-#define STS_TG16    0x7     // 16-bit Trap Gate
-#define STS_T32A    0x9     // Available 32-bit TSS
-#define STS_T32B    0xB     // Busy 32-bit TSS
-#define STS_CG32    0xC     // 32-bit Call Gate
-#define STS_IG32    0xE     // 32-bit Interrupt Gate
-#define STS_TG32    0xF     // 32-bit Trap Gate
-
-// A virtual address 'la' has a three-part structure as follows:
-//
-// +--------10------+-------10-------+---------12----------+
-// | Page Directory |   Page Table   | Offset within Page  |
-// |      Index     |      Index     |                     |
-// +----------------+----------------+---------------------+
-//  \--- PDX(va) --/ \--- PTX(va) --/ 
-
-// page directory index
-#define PDX(va)         (((uint)(va) >> PDXSHIFT) & 0x3FF)
-
-// page table index
-#define PTX(va)         (((uint)(va) >> PTXSHIFT) & 0x3FF)
-
-// construct virtual address from indexes and offset
-#define PGADDR(d, t, o) ((uint)((d) << PDXSHIFT | (t) << PTXSHIFT | (o)))
-
-// Page directory and page table constants.
-#define NPDENTRIES      1024    // # directory entries per page directory
-#define NPTENTRIES      1024    // # PTEs per page table
-#define PGSIZE          4096    // bytes mapped by a page
-
-#define PGSHIFT         12      // log2(PGSIZE)
-#define PTXSHIFT        12      // offset of PTX in a linear address
-#define PDXSHIFT        22      // offset of PDX in a linear address
-
-#define PGROUNDUP(sz)  (((sz)+PGSIZE-1) & ~(PGSIZE-1))
-#define PGROUNDDOWN(a) (((a)) & ~(PGSIZE-1))
-
-// Page table/directory entry flags.
-#define PTE_P           0x001   // Present
-#define PTE_W           0x002   // Writeable
-#define PTE_U           0x004   // User
-#define PTE_PWT         0x008   // Write-Through
-#define PTE_PCD         0x010   // Cache-Disable
-#define PTE_A           0x020   // Accessed
-#define PTE_D           0x040   // Dirty
-#define PTE_PS          0x080   // Page Size
-#define PTE_MBZ         0x180   // Bits must be zero
-
-// Address in page table or page directory entry
-#define PTE_ADDR(pte)   ((uint)(pte) & ~0xFFF)
-#define PTE_FLAGS(pte)  ((uint)(pte) &  0xFFF)
-
-#ifndef __ASSEMBLER__
-typedef uint pte_t;
-
-// Task state segment format
-struct taskstate {
-  uint link;         // Old ts selector
-  uint esp0;         // Stack pointers and segment selectors
-  ushort ss0;        //   after an increase in privilege level
-  ushort padding1;
-  uint *esp1;
-  ushort ss1;
-  ushort padding2;
-  uint *esp2;
-  ushort ss2;
-  ushort padding3;
-  void *cr3;         // Page directory base
-  uint *eip;         // Saved state from last task switch
-  uint eflags;
-  uint eax;          // More saved state (registers)
-  uint ecx;
-  uint edx;
-  uint ebx;
-  uint *esp;
-  uint *ebp;
-  uint esi;
-  uint edi;
-  ushort es;         // Even more saved state (segment selectors)
-  ushort padding4;
-  ushort cs;
-  ushort padding5;
-  ushort ss;
-  ushort padding6;
-  ushort ds;
-  ushort padding7;
-  ushort fs;
-  ushort padding8;
-  ushort gs;
-  ushort padding9;
-  ushort ldt;
-  ushort padding10;
-  ushort t;          // Trap on task switch
-  ushort iomb;       // I/O map base address
-};
-
-// PAGEBREAK: 12
-// Gate descriptors for interrupts and traps
-struct gatedesc {
-  uint off_15_0 : 16;   // low 16 bits of offset in segment
-  uint cs : 16;         // code segment selector
-  uint args : 5;        // # args, 0 for interrupt/trap gates
-  uint rsv1 : 3;        // reserved(should be zero I guess)
-  uint type : 4;        // type(STS_{TG,IG32,TG32})
-  uint s : 1;           // must be 0 (system)
-  uint dpl : 2;         // descriptor(meaning new) privilege level
-  uint p : 1;           // Present
-  uint off_31_16 : 16;  // high bits of offset in segment
-};
-
-// Set up a normal interrupt/trap gate descriptor.
-// - istrap: 1 for a trap (= exception) gate, 0 for an interrupt gate.
-//   interrupt gate clears FL_IF, trap gate leaves FL_IF alone
-// - sel: Code segment selector for interrupt/trap handler
-// - off: Offset in code segment for interrupt/trap handler
-// - dpl: Descriptor Privilege Level -
-//        the privilege level required for software to invoke
-//        this interrupt/trap gate explicitly using an int instruction.
-#define SETGATE(gate, istrap, sel, off, d)                \
-{                                                         \
-  (gate).off_15_0 = (uint)(off) & 0xffff;                \
-  (gate).cs = (sel);                                      \
-  (gate).args = 0;                                        \
-  (gate).rsv1 = 0;                                        \
-  (gate).type = (istrap) ? STS_TG32 : STS_IG32;           \
-  (gate).s = 0;                                           \
-  (gate).dpl = (d);                                       \
-  (gate).p = 1;                                           \
-  (gate).off_31_16 = (uint)(off) >> 16;                  \
-}
-
-#endif
diff --git a/xv6/mp.c b/xv6/mp.c
deleted file mode 100644
index 5b52a98..0000000
--- a/xv6/mp.c
+++ /dev/null
@@ -1,156 +0,0 @@
-// Multiprocessor support
-// Search memory for MP description structures.
-// http://developer.intel.com/design/pentium/datashts/24201606.pdf
-
-#include "types.h"
-#include "defs.h"
-#include "param.h"
-#include "memlayout.h"
-#include "mp.h"
-#include "x86.h"
-#include "mmu.h"
-#include "proc.h"
-
-struct cpu cpus[NCPU];
-static struct cpu *bcpu;
-int ismp;
-int ncpu;
-uchar ioapicid;
-
-int
-mpbcpu(void)
-{
-  return bcpu-cpus;
-}
-
-static uchar
-sum(uchar *addr, int len)
-{
-  int i, sum;
-  
-  sum = 0;
-  for(i=0; i<len; i++)
-    sum += addr[i];
-  return sum;
-}
-
-// Look for an MP structure in the len bytes at addr.
-static struct mp*
-mpsearch1(uint a, int len)
-{
-  uchar *e, *p, *addr;
-
-  addr = p2v(a);
-  e = addr+len;
-  for(p = addr; p < e; p += sizeof(struct mp))
-    if(memcmp(p, "_MP_", 4) == 0 && sum(p, sizeof(struct mp)) == 0)
-      return (struct mp*)p;
-  return 0;
-}
-
-// Search for the MP Floating Pointer Structure, which according to the
-// spec is in one of the following three locations:
-// 1) in the first KB of the EBDA;
-// 2) in the last KB of system base memory;
-// 3) in the BIOS ROM between 0xE0000 and 0xFFFFF.
-static struct mp*
-mpsearch(void)
-{
-  uchar *bda;
-  uint p;
-  struct mp *mp;
-
-  bda = (uchar *) P2V(0x400);
-  if((p = ((bda[0x0F]<<8)| bda[0x0E]) << 4)){
-    if((mp = mpsearch1(p, 1024)))
-      return mp;
-  } else {
-    p = ((bda[0x14]<<8)|bda[0x13])*1024;
-    if((mp = mpsearch1(p-1024, 1024)))
-      return mp;
-  }
-  return mpsearch1(0xF0000, 0x10000);
-}
-
-// Search for an MP configuration table.  For now,
-// don't accept the default configurations (physaddr == 0).
-// Check for correct signature, calculate the checksum and,
-// if correct, check the version.
-// To do: check extended table checksum.
-static struct mpconf*
-mpconfig(struct mp **pmp)
-{
-  struct mpconf *conf;
-  struct mp *mp;
-
-  if((mp = mpsearch()) == 0 || mp->physaddr == 0)
-    return 0;
-  conf = (struct mpconf*) p2v((uint) mp->physaddr);
-  if(memcmp(conf, "PCMP", 4) != 0)
-    return 0;
-  if(conf->version != 1 && conf->version != 4)
-    return 0;
-  if(sum((uchar*)conf, conf->length) != 0)
-    return 0;
-  *pmp = mp;
-  return conf;
-}
-
-void
-mpinit(void)
-{
-  uchar *p, *e;
-  struct mp *mp;
-  struct mpconf *conf;
-  struct mpproc *proc;
-  struct mpioapic *ioapic;
-
-  bcpu = &cpus[0];
-  if((conf = mpconfig(&mp)) == 0)
-    return;
-  ismp = 1;
-  lapic = (uint*)conf->lapicaddr;
-  for(p=(uchar*)(conf+1), e=(uchar*)conf+conf->length; p<e; ){
-    switch(*p){
-    case MPPROC:
-      proc = (struct mpproc*)p;
-      if(ncpu != proc->apicid){
-        cprintf("mpinit: ncpu=%d apicid=%d\n", ncpu, proc->apicid);
-        ismp = 0;
-      }
-      if(proc->flags & MPBOOT)
-        bcpu = &cpus[ncpu];
-      cpus[ncpu].id = ncpu;
-      ncpu++;
-      p += sizeof(struct mpproc);
-      continue;
-    case MPIOAPIC:
-      ioapic = (struct mpioapic*)p;
-      ioapicid = ioapic->apicno;
-      p += sizeof(struct mpioapic);
-      continue;
-    case MPBUS:
-    case MPIOINTR:
-    case MPLINTR:
-      p += 8;
-      continue;
-    default:
-      cprintf("mpinit: unknown config type %x\n", *p);
-      ismp = 0;
-    }
-  }
-  if(!ismp){
-    // Didn't like what we found; fall back to no MP.
-    ncpu = 1;
-    lapic = 0;
-    ioapicid = 0;
-    return;
-  }
-
-  if(mp->imcrp){
-    // Bochs doesn't support IMCR, so this doesn't run on Bochs.
-    // But it would on real hardware.
-    outb(0x22, 0x70);   // Select IMCR
-    outb(0x23, inb(0x23) | 1);  // Mask external interrupts.
-  }
-}
diff --git a/xv6/mp.d b/xv6/mp.d
deleted file mode 100644
index 48eb935..0000000
--- a/xv6/mp.d
+++ /dev/null
@@ -1 +0,0 @@
-mp.o: mp.c types.h defs.h param.h memlayout.h mp.h x86.h mmu.h proc.h
diff --git a/xv6/mp.h b/xv6/mp.h
deleted file mode 100644
index 4d17283..0000000
--- a/xv6/mp.h
+++ /dev/null
@@ -1,56 +0,0 @@
-// See MultiProcessor Specification Version 1.[14]
-
-struct mp {             // floating pointer
-  uchar signature[4];           // "_MP_"
-  void *physaddr;               // phys addr of MP config table
-  uchar length;                 // 1
-  uchar specrev;                // [14]
-  uchar checksum;               // all bytes must add up to 0
-  uchar type;                   // MP system config type
-  uchar imcrp;
-  uchar reserved[3];
-};
-
-struct mpconf {         // configuration table header
-  uchar signature[4];           // "PCMP"
-  ushort length;                // total table length
-  uchar version;                // [14]
-  uchar checksum;               // all bytes must add up to 0
-  uchar product[20];            // product id
-  uint *oemtable;               // OEM table pointer
-  ushort oemlength;             // OEM table length
-  ushort entry;                 // entry count
-  uint *lapicaddr;              // address of local APIC
-  ushort xlength;               // extended table length
-  uchar xchecksum;              // extended table checksum
-  uchar reserved;
-};
-
-struct mpproc {         // processor table entry
-  uchar type;                   // entry type (0)
-  uchar apicid;                 // local APIC id
-  uchar version;                // local APIC verison
-  uchar flags;                  // CPU flags
-    #define MPBOOT 0x02           // This proc is the bootstrap processor.
-  uchar signature[4];           // CPU signature
-  uint feature;                 // feature flags from CPUID instruction
-  uchar reserved[8];
-};
-
-struct mpioapic {       // I/O APIC table entry
-  uchar type;                   // entry type (2)
-  uchar apicno;                 // I/O APIC id
-  uchar version;                // I/O APIC version
-  uchar flags;                  // I/O APIC flags
-  uint *addr;                  // I/O APIC address
-};
-
-// Table entry types
-#define MPPROC    0x00  // One per processor
-#define MPBUS     0x01  // One per bus
-#define MPIOAPIC  0x02  // One per I/O APIC
-#define MPIOINTR  0x03  // One per bus interrupt source
-#define MPLINTR   0x04  // One per system interrupt source
-
-//PAGEBREAK!
-// Blank page.
diff --git a/xv6/param.h b/xv6/param.h
deleted file mode 100644
index c8083c3..0000000
--- a/xv6/param.h
+++ /dev/null
@@ -1,14 +0,0 @@
-#define NPROC        64  // maximum number of processes
-#define KSTACKSIZE 4096  // size of per-process kernel stack
-#define NCPU          8  // maximum number of CPUs
-#define NOFILE       16  // open files per process
-#define NFILE       100  // open files per system
-#define NINODE       50  // maximum number of active i-nodes
-#define NDEV         10  // maximum major device number
-#define ROOTDEV       1  // device number of file system root disk
-#define MAXARG       32  // max exec arguments
-#define MAXOPBLOCKS  10  // max # of blocks any FS op writes
-#define LOGSIZE      (MAXOPBLOCKS*3)  // max data sectors in on-disk log
-#define NBUF         (MAXOPBLOCKS*3)  // size of disk block cache
-
-#define QUANTA 5	//quanta for scheduler
diff --git a/xv6/picirq.c b/xv6/picirq.c
deleted file mode 100644
index ff86831..0000000
--- a/xv6/picirq.c
+++ /dev/null
@@ -1,84 +0,0 @@
-// Intel 8259A programmable interrupt controllers.
-
-#include "types.h"
-#include "x86.h"
-#include "traps.h"
-
-// I/O Addresses of the two programmable interrupt controllers
-#define IO_PIC1         0x20    // Master (IRQs 0-7)
-#define IO_PIC2         0xA0    // Slave (IRQs 8-15)
-
-#define IRQ_SLAVE       2       // IRQ at which slave connects to master
-
-// Current IRQ mask.
-// Initial IRQ mask has interrupt 2 enabled (for slave 8259A).
-static ushort irqmask = 0xFFFF & ~(1<<IRQ_SLAVE);
-
-static void
-picsetmask(ushort mask)
-{
-  irqmask = mask;
-  outb(IO_PIC1+1, mask);
-  outb(IO_PIC2+1, mask >> 8);
-}
-
-void
-picenable(int irq)
-{
-  picsetmask(irqmask & ~(1<<irq));
-}
-
-// Initialize the 8259A interrupt controllers.
-void
-picinit(void)
-{
-  // mask all interrupts
-  outb(IO_PIC1+1, 0xFF);
-  outb(IO_PIC2+1, 0xFF);
-
-  // Set up master (8259A-1)
-
-  // ICW1:  0001g0hi
-  //    g:  0 = edge triggering, 1 = level triggering
-  //    h:  0 = cascaded PICs, 1 = master only
-  //    i:  0 = no ICW4, 1 = ICW4 required
-  outb(IO_PIC1, 0x11);
-
-  // ICW2:  Vector offset
-  outb(IO_PIC1+1, T_IRQ0);
-
-  // ICW3:  (master PIC) bit mask of IR lines connected to slaves
-  //        (slave PIC) 3-bit # of slave's connection to master
-  outb(IO_PIC1+1, 1<<IRQ_SLAVE);
-
-  // ICW4:  000nbmap
-  //    n:  1 = special fully nested mode
-  //    b:  1 = buffered mode
-  //    m:  0 = slave PIC, 1 = master PIC
-  //      (ignored when b is 0, as the master/slave role
-  //      can be hardwired).
-  //    a:  1 = Automatic EOI mode
-  //    p:  0 = MCS-80/85 mode, 1 = intel x86 mode
-  outb(IO_PIC1+1, 0x3);
-
-  // Set up slave (8259A-2)
-  outb(IO_PIC2, 0x11);                  // ICW1
-  outb(IO_PIC2+1, T_IRQ0 + 8);      // ICW2
-  outb(IO_PIC2+1, IRQ_SLAVE);           // ICW3
-  // NB Automatic EOI mode doesn't tend to work on the slave.
-  // Linux source code says it's "to be investigated".
-  outb(IO_PIC2+1, 0x3);                 // ICW4
-
-  // OCW3:  0ef01prs
-  //   ef:  0x = NOP, 10 = clear specific mask, 11 = set specific mask
-  //    p:  0 = no polling, 1 = polling mode
-  //   rs:  0x = NOP, 10 = read IRR, 11 = read ISR
-  outb(IO_PIC1, 0x68);             // clear specific mask
-  outb(IO_PIC1, 0x0a);             // read IRR by default
-
-  outb(IO_PIC2, 0x68);             // OCW3
-  outb(IO_PIC2, 0x0a);             // OCW3
-
-  if(irqmask != 0xFFFF)
-    picsetmask(irqmask);
-}
diff --git a/xv6/picirq.d b/xv6/picirq.d
deleted file mode 100644
index 84dbc0f..0000000
--- a/xv6/picirq.d
+++ /dev/null
@@ -1 +0,0 @@
-picirq.o: picirq.c types.h x86.h traps.h
diff --git a/xv6/pipe.c b/xv6/pipe.c
deleted file mode 100644
index f76ed5c..0000000
--- a/xv6/pipe.c
+++ /dev/null
@@ -1,120 +0,0 @@
-#include "types.h"
-#include "defs.h"
-#include "param.h"
-#include "mmu.h"
-#include "proc.h"
-#include "fs.h"
-#include "file.h"
-#include "spinlock.h"
-
-#define PIPESIZE 512
-
-struct pipe {
-  struct spinlock lock;
-  char data[PIPESIZE];
-  uint nread;     // number of bytes read
-  uint nwrite;    // number of bytes written
-  int readopen;   // read fd is still open
-  int writeopen;  // write fd is still open
-};
-
-int
-pipealloc(struct file **f0, struct file **f1)
-{
-  struct pipe *p;
-
-  p = 0;
-  *f0 = *f1 = 0;
-  if((*f0 = filealloc()) == 0 || (*f1 = filealloc()) == 0)
-    goto bad;
-  if((p = (struct pipe*)kalloc()) == 0)
-    goto bad;
-  p->readopen = 1;
-  p->writeopen = 1;
-  p->nwrite = 0;
-  p->nread = 0;
-  initlock(&p->lock, "pipe");
-  (*f0)->type = FD_PIPE;
-  (*f0)->readable = 1;
-  (*f0)->writable = 0;
-  (*f0)->pipe = p;
-  (*f1)->type = FD_PIPE;
-  (*f1)->readable = 0;
-  (*f1)->writable = 1;
-  (*f1)->pipe = p;
-  return 0;
-
-//PAGEBREAK: 20
- bad:
-  if(p)
-    kfree((char*)p);
-  if(*f0)
-    fileclose(*f0);
-  if(*f1)
-    fileclose(*f1);
-  return -1;
-}
-
-void
-pipeclose(struct pipe *p, int writable)
-{
-  acquire(&p->lock);
-  if(writable){
-    p->writeopen = 0;
-    wakeup(&p->nread);
-  } else {
-    p->readopen = 0;
-    wakeup(&p->nwrite);
-  }
-  if(p->readopen == 0 && p->writeopen == 0){
-    release(&p->lock);
-    kfree((char*)p);
-  } else
-    release(&p->lock);
-}
-
-//PAGEBREAK: 40
-int
-pipewrite(struct pipe *p, char *addr, int n)
-{
-  int i;
-
-  acquire(&p->lock);
-  for(i = 0; i < n; i++){
-    while(p->nwrite == p->nread + PIPESIZE){  //DOC: pipewrite-full
-      if(p->readopen == 0 || proc->killed){
-        release(&p->lock);
-        return -1;
-      }
-      wakeup(&p->nread);
-      sleep(&p->nwrite, &p->lock);  //DOC: pipewrite-sleep
-    }
-    p->data[p->nwrite++ % PIPESIZE] = addr[i];
-  }
-  wakeup(&p->nread);  //DOC: pipewrite-wakeup1
-  release(&p->lock);
-  return n;
-}
-
-int
-piperead(struct pipe *p, char *addr, int n)
-{
-  int i;
-
-  acquire(&p->lock);
-  while(p->nread == p->nwrite && p->writeopen){  //DOC: pipe-empty
-    if(proc->killed){
-      release(&p->lock);
-      return -1;
-    }
-    sleep(&p->nread, &p->lock); //DOC: piperead-sleep
-  }
-  for(i = 0; i < n; i++){  //DOC: piperead-copy
-    if(p->nread == p->nwrite)
-      break;
-    addr[i] = p->data[p->nread++ % PIPESIZE];
-  }
-  wakeup(&p->nwrite);  //DOC: piperead-wakeup
-  release(&p->lock);
-  return i;
-}
diff --git a/xv6/pipe.d b/xv6/pipe.d
deleted file mode 100644
index 285fda3..0000000
--- a/xv6/pipe.d
+++ /dev/null
@@ -1 +0,0 @@
-pipe.o: pipe.c types.h defs.h param.h mmu.h proc.h fs.h file.h spinlock.h
diff --git a/xv6/pr.pl b/xv6/pr.pl
deleted file mode 100755
index 46905bd..0000000
--- a/xv6/pr.pl
+++ /dev/null
@@ -1,36 +0,0 @@
-#!/usr/bin/perl
-
-use POSIX qw(strftime);
-
-if($ARGV[0] eq "-h"){
-	shift @ARGV;
-	$h = $ARGV[0];
-	shift @ARGV;
-}else{
-	$h = $ARGV[0];
-}
-
-$page = 0;
-$now = strftime "%b %e %H:%M %Y", localtime;
-
-@lines = <>;
-for($i=0; $i<@lines; $i+=50){
-	print "\n\n";
-	++$page;
-	print "$now  $h  Page $page\n";
-	print "\n\n";
-	for($j=$i; $j<@lines && $j<$i +50; $j++){
-		$lines[$j] =~ s!//DOC.*!!;
-		print $lines[$j];
-	}
-	for(; $j<$i+50; $j++){
-		print "\n";
-	}
-	$sheet = "";
-	if($lines[$i] =~ /^([0-9][0-9])[0-9][0-9] /){
-		$sheet = "Sheet $1";
-	}
-	print "\n\n";
-	print "$sheet\n";
-	print "\n\n";
-}
diff --git a/xv6/printf.c b/xv6/printf.c
deleted file mode 100644
index 9972b45..0000000
--- a/xv6/printf.c
+++ /dev/null
@@ -1,85 +0,0 @@
-#include "types.h"
-#include "stat.h"
-#include "user.h"
-
-static void
-putc(int fd, char c)
-{
-  write(fd, &c, 1);
-}
-
-static void
-printint(int fd, int xx, int base, int sgn)
-{
-  static char digits[] = "0123456789ABCDEF";
-  char buf[16];
-  int i, neg;
-  uint x;
-
-  neg = 0;
-  if(sgn && xx < 0){
-    neg = 1;
-    x = -xx;
-  } else {
-    x = xx;
-  }
-
-  i = 0;
-  do{
-    buf[i++] = digits[x % base];
-  }while((x /= base) != 0);
-  if(neg)
-    buf[i++] = '-';
-
-  while(--i >= 0)
-    putc(fd, buf[i]);
-}
-
-// Print to the given fd. Only understands %d, %x, %p, %s.
-void
-printf(int fd, char *fmt, ...)
-{
-  char *s;
-  int c, i, state;
-  uint *ap;
-
-  state = 0;
-  ap = (uint*)(void*)&fmt + 1;
-  for(i = 0; fmt[i]; i++){
-    c = fmt[i] & 0xff;
-    if(state == 0){
-      if(c == '%'){
-        state = '%';
-      } else {
-        putc(fd, c);
-      }
-    } else if(state == '%'){
-      if(c == 'd'){
-        printint(fd, *ap, 10, 1);
-        ap++;
-      } else if(c == 'x' || c == 'p'){
-        printint(fd, *ap, 16, 0);
-        ap++;
-      } else if(c == 's'){
-        s = (char*)*ap;
-        ap++;
-        if(s == 0)
-          s = "(null)";
-        while(*s != 0){
-          putc(fd, *s);
-          s++;
-        }
-      } else if(c == 'c'){
-        putc(fd, *ap);
-        ap++;
-      } else if(c == '%'){
-        putc(fd, c);
-      } else {
-        // Unknown % sequence.  Print it to draw attention.
-        putc(fd, '%');
-        putc(fd, c);
-      }
-      state = 0;
-    }
-  }
-}
diff --git a/xv6/printf.d b/xv6/printf.d
deleted file mode 100644
index 5a7846a..0000000
--- a/xv6/printf.d
+++ /dev/null
@@ -1 +0,0 @@
-printf.o: printf.c types.h stat.h user.h
diff --git a/xv6/printpcs b/xv6/printpcs
deleted file mode 100755
index 81d039b..0000000
--- a/xv6/printpcs
+++ /dev/null
@@ -1,14 +0,0 @@
-#!/bin/sh
-
-# Decode the symbols from a panic EIP list
-
-# Find a working addr2line
-for p in i386-jos-elf-addr2line addr2line; do
-    if which $p 2>&1 >/dev/null && \
-       $p -h 2>&1 | grep -q '\belf32-i386\b'; then
-        break
-    fi
-done
-
-# Enable as much pretty-printing as this addr2line can do
-$p $($p -h | grep ' -[aipsf] ' | awk '{print $1}') -e kernel "$@"
diff --git a/xv6/proc.c b/xv6/proc.c
deleted file mode 100644
index a7669a5..0000000
--- a/xv6/proc.c
+++ /dev/null
@@ -1,891 +0,0 @@
-#include "types.h"
-#include "defs.h"
-#include "param.h"
-#include "memlayout.h"
-#include "mmu.h"
-#include "x86.h"
-#include "proc.h"
-#include "spinlock.h"
-
-#include "linkedList.h"
-
-#define SHELL_PID 2
-
-struct {
-  struct spinlock lock;
-  struct proc proc[NPROC];
-} ptable;
-
-static struct proc *initproc;
-
-#if defined(FRR) || defined(FCFS)
-static linkedList plist; //TODO ifdef
-#endif
-
-int nextpid = 1;
-extern void forkret(void);
-extern void trapret(void);
-
-static void wakeup1(void *chan);
-
-void
-pinit(void)
-{
-  initlock(&ptable.lock, "ptable");
-	#if defined(FRR) || defined(FCFS)
-	  init_linkedList(&plist,NPROC);
-	#endif
-}
-
-//PAGEBREAK: 32
-// Look in the process table for an UNUSED proc.
-// If found, change state to EMBRYO and initialize
-// state required to run in the kernel.
-// Otherwise return 0.
-static struct proc*
-allocproc(void)
-{
-  struct proc *p;
-  char *sp;
-
-  acquire(&ptable.lock);
-  for(p = ptable.proc; p < &ptable.proc[NPROC]; p++)
-    if(p->state == UNUSED)
-      goto found;
-  release(&ptable.lock);
-  return 0;
-
-found:
-  p->state = EMBRYO;
-  p->pid = nextpid++;
-  p->ctime = ticks;
-  p->priority = PRIORITY_MEDIUM;
-  release(&ptable.lock);
-
-  // Allocate kernel stack.
-  if((p->kstack = kalloc()) == 0){
-    p->state = UNUSED;
-    return 0;
-  }
-  sp = p->kstack + KSTACKSIZE;
-  
-  // Leave room for trap frame.
-  sp -= sizeof *p->tf;
-  p->tf = (struct trapframe*)sp;
-  
-  // Set up new context to start executing at forkret,
-  // which returns to trapret.
-  sp -= 4;
-  *(uint*)sp = (uint)trapret;
-
-  sp -= sizeof *p->context;
-  p->context = (struct context*)sp;
-  memset(p->context, 0, sizeof *p->context);
-  p->context->eip = (uint)forkret;
-
-  return p;
-}
-
-//PAGEBREAK: 32
-// Set up first user process.
-void
-userinit(void)
-{
-  struct proc *p;
-  extern char _binary_initcode_start[], _binary_initcode_size[];
-  
-  p = allocproc();
-  initproc = p;
-  if((p->pgdir = setupkvm()) == 0)
-    panic("userinit: out of memory?");
-  inituvm(p->pgdir, _binary_initcode_start, (int)_binary_initcode_size);
-  p->sz = PGSIZE;
-  memset(p->tf, 0, sizeof(*p->tf));
-  p->tf->cs = (SEG_UCODE << 3) | DPL_USER;
-  p->tf->ds = (SEG_UDATA << 3) | DPL_USER;
-  p->tf->es = p->tf->ds;
-  p->tf->ss = p->tf->ds;
-  p->tf->eflags = FL_IF;
-  p->tf->esp = PGSIZE;
-  p->tf->eip = 0;  // beginning of initcode.S
-
-  safestrcpy(p->name, "initcode", sizeof(p->name));
-  p->cwd = namei("/");
-
-  p->state = RUNNABLE;
-
-  #if defined(FRR) || defined(FCFS)
-	  acquire(&ptable.lock);	//wasnt here
-	  plist.add(&plist, p->pid, p);
-	  release(&ptable.lock);
-  #endif
-
-}
-
-// Grow current process's memory by n bytes.
-// Return 0 on success, -1 on failure.
-int
-growproc(int n)
-{
-  uint sz;
-  
-  sz = proc->sz;
-  if(n > 0){
-    if((sz = allocuvm(proc->pgdir, sz, sz + n)) == 0)
-      return -1;
-  } else if(n < 0){
-    if((sz = deallocuvm(proc->pgdir, sz, sz + n)) == 0)
-      return -1;
-  }
-  proc->sz = sz;
-  switchuvm(proc);
-  return 0;
-}
-
-// Create a new process copying p as the parent.
-// Sets up stack to return as if from system call.
-// Caller must set state of returned proc to RUNNABLE.
-int
-fork(void)
-{
-//  char* TAG = "fork";
-  int i, pid, gid;
-  struct proc *np;
-
-  // Allocate process.
-  if((np = allocproc()) == 0)
-    return -1;
-
-  // Copy process state from p.
-  if((np->pgdir = copyuvm(proc->pgdir, proc->sz)) == 0){
-    kfree(np->kstack);
-    np->kstack = 0;
-    np->state = UNUSED;
-    return -1;
-  }
-  np->sz = proc->sz;
-  np->parent = proc;
-  *np->tf = *proc->tf;
-
-  // Clear %eax so that fork returns 0 in the child.
-  np->tf->eax = 0;
-
-  for(i = 0; i < NOFILE; i++)
-    if(proc->ofile[i])
-      np->ofile[i] = filedup(proc->ofile[i]);
-  np->cwd = idup(proc->cwd);
-
-  safestrcpy(np->name, proc->name, sizeof(proc->name));
- 
-  pid = np->pid;
-
-  //Set group id
-  //if father is shell -> gid = this new process pid
-  if( proc->pid == SHELL_PID){
-	  gid = pid;
-  }
-  //else, take father gid
-  else{
-	  gid = proc->gid;
-  }
-
-  np->gid = gid;
-
-  //cprintf("\n[debug] [fork] Created a new process son of '%s' with pid %d, and guid: %d\n", np->name, pid, gid);
-  // lock to force the compiler to emit the np->state write last.
-  acquire(&ptable.lock);
-  np->state = RUNNABLE;
-  
-#if defined(FRR) || defined(FCFS)
-
-  plist.add(&plist, pid, np); //todo ifdef
-#endif
-
-  release(&ptable.lock);
-
-
-
-  return pid;
-}
-
-// Exit the current process.  Does not return.
-// An exited process remains in the zombie state
-// until its parent calls wait() to find out it exited.
-void
-exit(int status)
-{
-//  char* TAG = "exit";
-  struct proc *p;
-  int fd;
-
-  //cprintf("\n[debug] [exit] Process '%s' (%d) Exited with status code %d\n", proc->name, proc->pid, status);
-
-  if(proc == initproc)
-    panic("init exiting");
-
-  // Close all open files.
-  for(fd = 0; fd < NOFILE; fd++){
-    if(proc->ofile[fd]){
-      fileclose(proc->ofile[fd]);
-      proc->ofile[fd] = 0;
-    }
-  }
-
-  begin_op();
-  iput(proc->cwd);
-  end_op();
-  proc->cwd = 0;
-
-
-  acquire(&ptable.lock);
-
-  proc->status = status;
-  proc->ttime = ticks;
-  // Parent might be sleeping in wait().
-  wakeup1(proc->parent);
-//  cprintf("\n This is your captin speaking, here is : %s \n", ptable.proc[SHELL_PID].name);
-
-
-  // Pass abandoned children to init.
-  for(p = ptable.proc; p < &ptable.proc[NPROC]; p++){
-    if(p->parent == proc){
-      p->parent = initproc;
-      if(p->state == ZOMBIE)
-        wakeup1(initproc);
-    }
-  }
-
-  // Jump into the scheduler, never to return.
-  proc->state = ZOMBIE;
-  sched();
-  panic("zombie exit");
-
-
-}
-int clean_proc_entry(struct proc* p){
-	int pid;
-    // Found one.
-    pid = p->pid;
-    kfree(p->kstack);
-    p->kstack = 0;
-    freevm(p->pgdir);
-    p->state = UNUSED;
-    p->pid = 0;
-    p->parent = 0;
-    p->name[0] = 0;
-    p->killed = 0;
-    p->retime = 0;
-    p->rutime = 0;
-    p->stime = 0;
-    p->ttime = 0;
-    p->ctime = 0;
-    p->vruntime = 0;
-    p->priority = PRIORITY_MEDIUM;
-//    plist.remove_link(&plist,pid); //todo ifdef
-    return pid;
-}
-
-// Wait for a child process to exit and return its pid.
-// Return -1 if this process has no children.
-int
-wait(int* status)
-{
-  struct proc *p;
-  int havekids, pid;
-
-  acquire(&ptable.lock);
-  for(;;){
-    // Scan through table looking for zombie children.
-    havekids = 0;
-    for(p = ptable.proc; p < &ptable.proc[NPROC]; p++){
-      if(p->parent != proc)
-        continue;
-      havekids = 1;
-      if(p->state == ZOMBIE){
-        // Found one.
-        pid = clean_proc_entry(p);
-
-        if(status){ // if user did not send status=0 (do not care)
-            *status = p->status; //return status to caller
-        }
-
-        release(&ptable.lock);
-
-        return pid;
-      }
-    }
-
-    // No point waiting if we don't have any children.
-    if(!havekids || proc->killed){
-      release(&ptable.lock);
-      return -1;
-    }
-
-    // Wait for children to exit.  (See wakeup1 call in proc_exit.)
-    sleep(proc, &ptable.lock);  //DOC: wait-sleep
-  }
-}
-
-int
-shellWait(int childPid)
-{
-  struct proc *p;
- // int havekids, pid, isMyChild;
-  int pid;
-
-  for(;;){
-    // Scan through table looking for zombie children.
-   // havekids = 0;
-   // isMyChild = 0;
-
-    for(p = ptable.proc; p < &ptable.proc[NPROC]; p++){
-      if(p->parent != proc)
-        continue;
-    //  havekids = 1;
-      if( p->pid == childPid ){
-    	 //isMyChild = 1;
-		 if(p->state == ZOMBIE ){
-			pid = clean_proc_entry(p);
-			release(&ptable.lock);
-
-			return pid;
-		  }
-      }
-
-    }
-	sleep(proc, &ptable.lock);
-  }
-}
-
-// Wait for a child process *with a specific pid* to exit and return its pid.
-// Return -1 if this process has no children.
-int
-waitpid(int childPid, int* status, int options)
-{
-  struct proc *p;
-  int havekids, pid, isMyChild;
-
-  acquire(&ptable.lock);
-  for(;;){
-    // Scan through table looking for zombie children.
-    havekids = 0;
-    isMyChild = 0;
-
-    for(p = ptable.proc; p < &ptable.proc[NPROC]; p++){
-      if(p->parent != proc)
-        continue;
-      havekids = 1;
-      if( p->pid == childPid ){
-    	 isMyChild = 1;
-		 if(p->state == ZOMBIE ){
-			pid = clean_proc_entry(p);
-
-			if(status){ // if user did not send status=0 (do not care)
-				*status = p->status; //return status to caller
-			}
-
-			release(&ptable.lock);
-
-			return pid;
-		  }
-      }
-
-    }
-
-    // No point waiting if we don't have any children.
-    if(!havekids || !isMyChild || proc->killed){
-      release(&ptable.lock);
-      return -1;
-    }
-
-    switch (options) {
-		case BLOCKING:
-			sleep(proc, &ptable.lock);
-			break;
-		case NONBLOCKING:
-			release(&ptable.lock);
-			return -1;
-			break;
-		default:
-			release(&ptable.lock);
-			return -1;
-			break;
-	}
-
-  }
-}
-
-int
-wait_stat(int* wtime, int* rtime, int* iotime, int* status)
-{
-	  struct proc *p;
-	  int havekids, pid;
-
-	  acquire(&ptable.lock);
-	  for(;;){
-	    // Scan through table looking for zombie children.
-	    havekids = 0;
-	    for(p = ptable.proc; p < &ptable.proc[NPROC]; p++){
-	      if(p->parent != proc)
-	        continue;
-	      havekids = 1;
-	      if(p->state == ZOMBIE){
-	        // Found one.
-	    	*wtime = p->retime;
-	    	*rtime = p->rutime;
-	    	*iotime = p->stime;
-
-	        pid = clean_proc_entry(p);
-
-	        if(status){ // if user did not send status=0 (do not care)
-	            *status = p->status; //return status to caller
-	        }
-
-	        release(&ptable.lock);
-
-	        return pid;
-	      }
-	    }
-
-	    // No point waiting if we don't have any children.
-	    if(!havekids || proc->killed){
-	      release(&ptable.lock);
-	      return -1;
-	    }
-
-	    // Wait for children to exit.  (See wakeup1 call in proc_exit.)
-	    sleep(proc, &ptable.lock);  //DOC: wait-sleep
-	  }
-}
-
-int
-foreground(int gid)
-{
-	struct proc* p;
-	int pids[64];
-	int counter = 0;
-//	int i, status;
-	int i;
-	int retVal = -1;
-
-	//cprintf("called fg with gid: %d \n", gid);
-	acquire(&ptable.lock);
-	for(p = ptable.proc; p < &ptable.proc[NPROC]; p++){
-			if( ( p->state == RUNNING ||  p->state == RUNNABLE ||  p->state == SLEEPING) &&
-				(p->parent == initproc) &&
-				(p->gid == gid) )
-			{
-				p->parent = &ptable.proc[1]; //parent = shell
-				pids[counter] = p->pid;
-				counter++;
-			}
-	}
-	for(i=0; i < counter; i++){
-		//cprintf("**waiting for: %d \n ",pids[i]);
-		if (shellWait(pids[i]) != -1)	retVal = 1;
-	}
-	release(&ptable.lock);
-/*
-	for(i=0; i < counter; i++){
-		cprintf("**waiting for: %d \n ",pids[i]);
-		waitpid(pids[i], &status, BLOCKING);
-	}
-	*/
-
-	return retVal;
-}
-
-int
-set_priority(int priority)
-{
-#ifndef CFS
-	return -1;
-#endif
-	acquire(&ptable.lock);
-	proc->priority = priority;
-	release(&ptable.lock);
-	return 1;
-}
-
-// Filling process_info_entry array with <pid,name> that is not zombie and has required <gid>
-// should be called with a 64(=MAX NUM OF PROCESSES), will set <size> accordingly
-int
-list_pgroup(int gid, process_info_entry* arr, int* size)
-{
-	struct proc* p;
-	int i = 0;
-//	struct node* head;
-//
-//	linkedList plist;
-//	  init_linkedList(&plist, 64);
-//	  head = create_link(&plist);
-//	  head->id = 18;
-//	  head->data = 0;
-//
-//	  add_last(&plist,head);
-//	plist.print(&plist);
-	acquire(&ptable.lock);
-
-//	cprintf("10 entire from process table:\n");
-//
-//	cprintf("pid   name   gid   father   father_name   \n");
-//
-//	for(p = ptable.proc; p < &ptable.proc[10]; p++){
-//		cprintf("%d %d   %s   %d   %d   %s  \n", j, p->pid, p->name, p->gid,p->parent->pid,p->parent->name);
-//		j++;
-//	}
-
-//	cprintf("requested listing of processes with group id %d \n", gid);
-
-	for(p = ptable.proc; p < &ptable.proc[NPROC]; p++){
-		if( ( p->state == RUNNING ||  p->state == RUNNABLE ||  p->state == SLEEPING) &&
-			p->gid == gid ){
-
-			arr[i].pid = p->pid;
-			safestrcpy(arr[i].name, p->name, sizeof(arr[i].name));
-			i++;
-		}
-	}
-
-//	cprintf("found %d for group id %d  \n", i, gid);
-
-	*size = i;
-	release(&ptable.lock);
-
-	return 0;
-}
-
-
-#ifdef DEFAULT
-
-//PAGEBREAK: 42
-// Per-CPU process scheduler.
-// Each CPU calls scheduler() after setting itself up.
-// Scheduler never returns.  It loops, doing:
-//  - choose a process to run
-//  - swtch to start running that process
-//  - eventually that process transfers control
-//      via swtch back to the scheduler.
-void
-scheduler_default(void)
-{
-  struct proc *p;
-
-  for(;;){
-    // Enable interrupts on this processor.
-    sti();
-
-    // Loop over process table looking for process to run.
-    acquire(&ptable.lock);
-    for(p = ptable.proc; p < &ptable.proc[NPROC]; p++){
-      if(p->state != RUNNABLE)
-        continue;
-
-      // Switch to chosen process.  It is the process's job
-      // to release ptable.lock and then reacquire it
-      // before jumping back to us.
-      proc = p;
-      switchuvm(p);
-      p->state = RUNNING;
-      swtch(&cpu->scheduler, proc->context);
-      switchkvm();
-
-      // Process is done running for now.
-      // It should have changed its p->state before coming back.
-      proc = 0;
-    }
-    release(&ptable.lock);
-
-  }
-}
-#endif
-
-#if defined(FRR) || defined(FCFS)
-void
-scheduler_frr_fcfs(void)
-{
-	  struct proc *p;
-
-	  for(;;){
-	    // Enable interrupts on this processor.
-	    sti();
-
-	    acquire(&ptable.lock);
-	    if (plist.size)
-	    {
-			  p = plist.remove_first(&plist);
-			  if(p->state != RUNNABLE){
-				  cprintf("ERROR: linkedlist contains a proc which is not RUNNABLE");
-			  }
-
-			  // Switch to chosen process.  It is the process's job
-			  // to release ptable.lock and then reacquire it
-			  // before jumping back to us.
-			  proc = p;
-			  switchuvm(p);
-			  p->state = RUNNING;
-			  swtch(&cpu->scheduler, proc->context);
-			  switchkvm();
-
-			  // Process is done running for now.
-			  // It should have changed its p->state before coming back.
-			  proc = 0;
-	    }
-	    release(&ptable.lock);
-
-	  }
-	}
-#endif
-
-
-#ifdef CFS
-
-void
-scheduler_cfs(void)
-{
-  struct proc *p;
-  struct proc* minimum_vruntime_proc;
-
-
-  for(;;){
-    // Enable interrupts on this processor.
-    sti();
-
-    // Loop over process table looking for process to run.
-    acquire(&ptable.lock);
-
-    minimum_vruntime_proc = 0;	//null
-    for(p = ptable.proc; p < &ptable.proc[NPROC]; p++){
-      if(p->state != RUNNABLE)	continue;
-
-      if (!minimum_vruntime_proc || p->vruntime < minimum_vruntime_proc->vruntime){
-    	  minimum_vruntime_proc = p;
-      }
-
-    }
-    p = minimum_vruntime_proc;
-    if (p)
-    {
-    	//cprintf("[%d:%d]", p->pid, p->vruntime);
-		// Switch to chosen process.  It is the process's job
-		// to release ptable.lock and then reacquire it
-		// before jumping back to us.
-		proc = p;
-		switchuvm(p);
-		p->state = RUNNING;
-		swtch(&cpu->scheduler, proc->context);
-		switchkvm();
-
-		// Process is done running for now.
-		// It should have changed its p->state before coming back.
-		proc = 0;
-    }
-
-    release(&ptable.lock);
-
-  }
-}
-
-#endif
-
-
-void
-scheduler(void)
-{
-	#if FRR
-		cprintf("SCHEDULAR = FRR\n");
-		scheduler_frr_fcfs();
-	#elif FCFS
-		cprintf("SCHEDULAR = FCFS\n");
-		scheduler_frr_fcfs();
-	#elif CFS
-		cprintf("SCHEDULAR = CFS\n");
-		scheduler_cfs();
-	#else
-		cprintf("SCHEDULAR = DEFAULT\n");
-		scheduler_default();
-	#endif
-
-	for(;;){}	//must be no-return
-}
-
-// Enter scheduler.  Must hold only ptable.lock
-// and have changed proc->state.
-void
-sched(void)
-{
-  int intena;
-
-  if(!holding(&ptable.lock))
-    panic("sched ptable.lock");
-  if(cpu->ncli != 1)
-    panic("sched locks");
-  if(proc->state == RUNNING)
-    panic("sched running");
-  if(readeflags()&FL_IF)
-    panic("sched interruptible");
-  intena = cpu->intena;
-  swtch(&proc->context, cpu->scheduler);
-  cpu->intena = intena;
-}
-
-// Give up the CPU for one scheduling round.
-void
-yield(void)
-{
-  acquire(&ptable.lock);  //DOC: yieldlock
-#if defined(FRR) || defined(FCFS)
-  if(proc->state != RUNNABLE) plist.add(&plist, proc->pid, proc); //todo ifdef
-#endif
-  proc->state = RUNNABLE;
-
-  sched();
-  release(&ptable.lock);
-}
-
-// A fork child's very first scheduling by scheduler()
-// will swtch here.  "Return" to user space.
-void
-forkret(void)
-{
-  static int first = 1;
-  // Still holding ptable.lock from scheduler.
-  release(&ptable.lock);
-
-  if (first) {
-    // Some initialization functions must be run in the context
-    // of a regular process (e.g., they call sleep), and thus cannot 
-    // be run from main().
-    first = 0;
-    initlog();
-  }
-  
-  // Return to "caller", actually trapret (see allocproc).
-}
-
-// Atomically release lock and sleep on chan.
-// Reacquires lock when awakened.
-void
-sleep(void *chan, struct spinlock *lk)
-{
-  if(proc == 0)
-    panic("sleep");
-
-  if(lk == 0)
-    panic("sleep without lk");
-
-  // Must acquire ptable.lock in order to
-  // change p->state and then call sched.
-  // Once we hold ptable.lock, we can be
-  // guaranteed that we won't miss any wakeup
-  // (wakeup runs with ptable.lock locked),
-  // so it's okay to release lk.
-  if(lk != &ptable.lock){  //DOC: sleeplock0
-    acquire(&ptable.lock);  //DOC: sleeplock1
-    release(lk);
-  }
-
-  // Go to sleep.
-  proc->chan = chan;
-  proc->state = SLEEPING;
-  sched();
-
-  // Tidy up.
-  proc->chan = 0;
-
-  // Reacquire original lock.
-  if(lk != &ptable.lock){  //DOC: sleeplock2
-    release(&ptable.lock);
-    acquire(lk);
-  }
-}
-
-//PAGEBREAK!
-// Wake up all processes sleeping on chan.
-// The ptable lock must be held.
-static void
-wakeup1(void *chan)
-{
-  struct proc *p;
-
-  for(p = ptable.proc; p < &ptable.proc[NPROC]; p++)
-    if(p->state == SLEEPING && p->chan == chan){
-        p->state = RUNNABLE;
-		#if defined(FRR) || defined(FCFS)
-        	plist.add(&plist,p->pid, p); //todo ifdef
-		#endif
-    }
-}
-
-// Wake up all processes sleeping on chan.
-void
-wakeup(void *chan)
-{
-  acquire(&ptable.lock);
-  wakeup1(chan);
-  release(&ptable.lock);
-}
-
-// Kill the process with the given pid.
-// Process won't exit until it returns
-// to user space (see trap in trap.c).
-int
-kill(int pid)
-{
-  struct proc *p;
-
-  acquire(&ptable.lock);
-  for(p = ptable.proc; p < &ptable.proc[NPROC]; p++){
-    if(p->pid == pid){
-      p->killed = 1;
-      // Wake process from sleep if necessary.
-      if(p->state == SLEEPING){
-        p->state = RUNNABLE;
-		#if defined(FRR) || defined(FCFS)
-        	plist.add(&plist,p->pid,p); //todo ifdef
-		#endif
-      }
-      release(&ptable.lock);
-      return 0;
-    }
-  }
-  release(&ptable.lock);
-  return -1;
-}
-
-//PAGEBREAK: 36
-// Print a process listing to console.  For debugging.
-// Runs when user types ^P on console.
-// No lock to avoid wedging a stuck machine further.
-void
-procdump(void)
-{
-  static char *states[] = {
-  [UNUSED]    "unused",
-  [EMBRYO]    "embryo",
-  [SLEEPING]  "sleep ",
-  [RUNNABLE]  "runble",
-  [RUNNING]   "run   ",
-  [ZOMBIE]    "zombie"
-  };
-  int i;
-  struct proc *p;
-  char *state;
-  uint pc[10];
-  
-  for(p = ptable.proc; p < &ptable.proc[NPROC]; p++){
-    if(p->state == UNUSED)
-      continue;
-    if(p->state >= 0 && p->state < NELEM(states) && states[p->state])
-      state = states[p->state];
-    else
-      state = "???";
-    cprintf("%d %s %s", p->pid, state, p->name);
-    if(p->state == SLEEPING){
-      getcallerpcs((uint*)p->context->ebp+2, pc);
-      for(i=0; i<10 && pc[i] != 0; i++)
-        cprintf(" %p", pc[i]);
-    }
-    cprintf("\n");
-  }
-}
diff --git a/xv6/proc.d b/xv6/proc.d
deleted file mode 100644
index b066e11..0000000
--- a/xv6/proc.d
+++ /dev/null
@@ -1,2 +0,0 @@
-proc.o: proc.c types.h defs.h param.h memlayout.h mmu.h x86.h proc.h \
- spinlock.h linkedList.h
diff --git a/xv6/proc.h b/xv6/proc.h
deleted file mode 100644
index a37b0a2..0000000
--- a/xv6/proc.h
+++ /dev/null
@@ -1,84 +0,0 @@
-// Segments in proc->gdt.
-#define NSEGS     7
-
-// Per-CPU state
-struct cpu {
-  uchar id;                    // Local APIC ID; index into cpus[] below
-  struct context *scheduler;   // swtch() here to enter scheduler
-  struct taskstate ts;         // Used by x86 to find stack for interrupt
-  struct segdesc gdt[NSEGS];   // x86 global descriptor table
-  volatile uint started;       // Has the CPU started?
-  int ncli;                    // Depth of pushcli nesting.
-  int intena;                  // Were interrupts enabled before pushcli?
-  
-  // Cpu-local storage variables; see below
-  struct cpu *cpu;
-  struct proc *proc;           // The currently-running process.
-};
-
-extern struct cpu cpus[NCPU];
-extern int ncpu;
-
-// Per-CPU variables, holding pointers to the
-// current cpu and to the current process.
-// The asm suffix tells gcc to use "%gs:0" to refer to cpu
-// and "%gs:4" to refer to proc.  seginit sets up the
-// %gs segment register so that %gs refers to the memory
-// holding those two variables in the local cpu's struct cpu.
-// This is similar to how thread-local variables are implemented
-// in thread libraries such as Linux pthreads.
-extern struct cpu *cpu asm("%gs:0");       // &cpus[cpunum()]
-extern struct proc *proc asm("%gs:4");     // cpus[cpunum()].proc
-
-//PAGEBREAK: 17
-// Saved registers for kernel context switches.
-// Don't need to save all the segment registers (%cs, etc),
-// because they are constant across kernel contexts.
-// Don't need to save %eax, %ecx, %edx, because the
-// x86 convention is that the caller has saved them.
-// Contexts are stored at the bottom of the stack they
-// describe; the stack pointer is the address of the context.
-// The layout of the context matches the layout of the stack in swtch.S
-// at the "Switch stacks" comment. Switch doesn't save eip explicitly,
-// but it is on the stack and allocproc() manipulates it.
-struct context {
-  uint edi;
-  uint esi;
-  uint ebx;
-  uint ebp;
-  uint eip;
-};
-
-enum procstate { UNUSED, EMBRYO, SLEEPING, RUNNABLE, RUNNING, ZOMBIE };
-
-// Per-process state
-struct proc {
-  uint sz;                     // Size of process memory (bytes)
-  pde_t* pgdir;                // Page table
-  char *kstack;                // Bottom of kernel stack for this process
-  enum procstate state;        // Process state
-  int pid;                     // Process ID
-  int gid;						// Process group id
-  struct proc *parent;         // Parent process
-  struct trapframe *tf;        // Trap frame for current syscall
-  struct context *context;     // swtch() here to run process
-  void *chan;                  // If non-zero, sleeping on chan
-  int killed;                  // If non-zero, have been killed
-  struct file *ofile[NOFILE];  // Open files
-  struct inode *cwd;           // Current directory
-  char name[16];               // Process name (debugging)
-  int status;				   // Exit status
-  int ctime;					//Creation time
-  int ttime;					//Termination time
-  int stime;					//Sleeping (IO) time
-  int retime;					// Ready (Runnable) time
-  int rutime;					// Running time
-  int priority;					// Priority
-  int vruntime;					//Higher value means lower current priority
-};
-
-// Process memory is laid out contiguously, low addresses first:
-//   text
-//   original data and bss
-//   fixed-size stack
-//   expandable heap
diff --git a/xv6/read.asm b/xv6/read.asm
deleted file mode 100644
index bf9b996..0000000
--- a/xv6/read.asm
+++ /dev/null
@@ -1,1220 +0,0 @@
-
-_read:     file format elf32-i386
-
-
-Disassembly of section .text:
-
-00000000 <main>:
-#include "stat.h"
-#include "user.h"
-
-int
-main(int argc, char *argv[])
-{
-   0:	55                   	push   %ebp
-   1:	89 e5                	mov    %esp,%ebp
-   3:	83 e4 f0             	and    $0xfffffff0,%esp
-   6:	83 ec 20             	sub    $0x20,%esp
-	char c[2] = {0,0};
-   9:	c6 44 24 1a 00       	movb   $0x0,0x1a(%esp)
-   e:	c6 44 24 1b 00       	movb   $0x0,0x1b(%esp)
-	int pos = 0;
-  13:	c7 44 24 1c 00 00 00 	movl   $0x0,0x1c(%esp)
-  1a:	00 
-
-	while(1){
-		read(0,&c[pos],1);
-  1b:	8b 44 24 1c          	mov    0x1c(%esp),%eax
-  1f:	8d 54 24 1a          	lea    0x1a(%esp),%edx
-  23:	01 d0                	add    %edx,%eax
-  25:	c7 44 24 08 01 00 00 	movl   $0x1,0x8(%esp)
-  2c:	00 
-  2d:	89 44 24 04          	mov    %eax,0x4(%esp)
-  31:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
-  38:	e8 e3 02 00 00       	call   320 <read>
-		write(1,&c[pos],1);
-  3d:	8b 44 24 1c          	mov    0x1c(%esp),%eax
-  41:	8d 54 24 1a          	lea    0x1a(%esp),%edx
-  45:	01 d0                	add    %edx,%eax
-  47:	c7 44 24 08 01 00 00 	movl   $0x1,0x8(%esp)
-  4e:	00 
-  4f:	89 44 24 04          	mov    %eax,0x4(%esp)
-  53:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
-  5a:	e8 c9 02 00 00       	call   328 <write>
-
-		if(c[pos] == '\n' && c[!pos] == 'q'){
-  5f:	8d 44 24 1a          	lea    0x1a(%esp),%eax
-  63:	03 44 24 1c          	add    0x1c(%esp),%eax
-  67:	0f b6 00             	movzbl (%eax),%eax
-  6a:	3c 0a                	cmp    $0xa,%al
-  6c:	75 20                	jne    8e <main+0x8e>
-  6e:	83 7c 24 1c 00       	cmpl   $0x0,0x1c(%esp)
-  73:	0f 94 c0             	sete   %al
-  76:	0f b6 c0             	movzbl %al,%eax
-  79:	0f b6 44 04 1a       	movzbl 0x1a(%esp,%eax,1),%eax
-  7e:	3c 71                	cmp    $0x71,%al
-  80:	75 0c                	jne    8e <main+0x8e>
-			exit(0);
-  82:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
-  89:	e8 7a 02 00 00       	call   308 <exit>
-		}
-
-		pos = !pos;
-  8e:	83 7c 24 1c 00       	cmpl   $0x0,0x1c(%esp)
-  93:	0f 94 c0             	sete   %al
-  96:	0f b6 c0             	movzbl %al,%eax
-  99:	89 44 24 1c          	mov    %eax,0x1c(%esp)
-
-	}
-  9d:	e9 79 ff ff ff       	jmp    1b <main+0x1b>
-  a2:	90                   	nop
-  a3:	90                   	nop
-
-000000a4 <stosb>:
-               "cc");
-}
-
-static inline void
-stosb(void *addr, int data, int cnt)
-{
-  a4:	55                   	push   %ebp
-  a5:	89 e5                	mov    %esp,%ebp
-  a7:	57                   	push   %edi
-  a8:	53                   	push   %ebx
-  asm volatile("cld; rep stosb" :
-  a9:	8b 4d 08             	mov    0x8(%ebp),%ecx
-  ac:	8b 55 10             	mov    0x10(%ebp),%edx
-  af:	8b 45 0c             	mov    0xc(%ebp),%eax
-  b2:	89 cb                	mov    %ecx,%ebx
-  b4:	89 df                	mov    %ebx,%edi
-  b6:	89 d1                	mov    %edx,%ecx
-  b8:	fc                   	cld    
-  b9:	f3 aa                	rep stos %al,%es:(%edi)
-  bb:	89 ca                	mov    %ecx,%edx
-  bd:	89 fb                	mov    %edi,%ebx
-  bf:	89 5d 08             	mov    %ebx,0x8(%ebp)
-  c2:	89 55 10             	mov    %edx,0x10(%ebp)
-               "=D" (addr), "=c" (cnt) :
-               "0" (addr), "1" (cnt), "a" (data) :
-               "memory", "cc");
-}
-  c5:	5b                   	pop    %ebx
-  c6:	5f                   	pop    %edi
-  c7:	5d                   	pop    %ebp
-  c8:	c3                   	ret    
-
-000000c9 <strcpy>:
-#include "user.h"
-#include "x86.h"
-
-char*
-strcpy(char *s, char *t)
-{
-  c9:	55                   	push   %ebp
-  ca:	89 e5                	mov    %esp,%ebp
-  cc:	83 ec 10             	sub    $0x10,%esp
-  char *os;
-
-  os = s;
-  cf:	8b 45 08             	mov    0x8(%ebp),%eax
-  d2:	89 45 fc             	mov    %eax,-0x4(%ebp)
-  while((*s++ = *t++) != 0)
-  d5:	90                   	nop
-  d6:	8b 45 0c             	mov    0xc(%ebp),%eax
-  d9:	0f b6 10             	movzbl (%eax),%edx
-  dc:	8b 45 08             	mov    0x8(%ebp),%eax
-  df:	88 10                	mov    %dl,(%eax)
-  e1:	8b 45 08             	mov    0x8(%ebp),%eax
-  e4:	0f b6 00             	movzbl (%eax),%eax
-  e7:	84 c0                	test   %al,%al
-  e9:	0f 95 c0             	setne  %al
-  ec:	83 45 08 01          	addl   $0x1,0x8(%ebp)
-  f0:	83 45 0c 01          	addl   $0x1,0xc(%ebp)
-  f4:	84 c0                	test   %al,%al
-  f6:	75 de                	jne    d6 <strcpy+0xd>
-    ;
-  return os;
-  f8:	8b 45 fc             	mov    -0x4(%ebp),%eax
-}
-  fb:	c9                   	leave  
-  fc:	c3                   	ret    
-
-000000fd <strcmp>:
-
-int
-strcmp(const char *p, const char *q)
-{
-  fd:	55                   	push   %ebp
-  fe:	89 e5                	mov    %esp,%ebp
-  while(*p && *p == *q)
- 100:	eb 08                	jmp    10a <strcmp+0xd>
-    p++, q++;
- 102:	83 45 08 01          	addl   $0x1,0x8(%ebp)
- 106:	83 45 0c 01          	addl   $0x1,0xc(%ebp)
-}
-
-int
-strcmp(const char *p, const char *q)
-{
-  while(*p && *p == *q)
- 10a:	8b 45 08             	mov    0x8(%ebp),%eax
- 10d:	0f b6 00             	movzbl (%eax),%eax
- 110:	84 c0                	test   %al,%al
- 112:	74 10                	je     124 <strcmp+0x27>
- 114:	8b 45 08             	mov    0x8(%ebp),%eax
- 117:	0f b6 10             	movzbl (%eax),%edx
- 11a:	8b 45 0c             	mov    0xc(%ebp),%eax
- 11d:	0f b6 00             	movzbl (%eax),%eax
- 120:	38 c2                	cmp    %al,%dl
- 122:	74 de                	je     102 <strcmp+0x5>
-    p++, q++;
-  return (uchar)*p - (uchar)*q;
- 124:	8b 45 08             	mov    0x8(%ebp),%eax
- 127:	0f b6 00             	movzbl (%eax),%eax
- 12a:	0f b6 d0             	movzbl %al,%edx
- 12d:	8b 45 0c             	mov    0xc(%ebp),%eax
- 130:	0f b6 00             	movzbl (%eax),%eax
- 133:	0f b6 c0             	movzbl %al,%eax
- 136:	89 d1                	mov    %edx,%ecx
- 138:	29 c1                	sub    %eax,%ecx
- 13a:	89 c8                	mov    %ecx,%eax
-}
- 13c:	5d                   	pop    %ebp
- 13d:	c3                   	ret    
-
-0000013e <strlen>:
-
-uint
-strlen(char *s)
-{
- 13e:	55                   	push   %ebp
- 13f:	89 e5                	mov    %esp,%ebp
- 141:	83 ec 10             	sub    $0x10,%esp
-  int n;
-
-  for(n = 0; s[n]; n++)
- 144:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
- 14b:	eb 04                	jmp    151 <strlen+0x13>
- 14d:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
- 151:	8b 45 fc             	mov    -0x4(%ebp),%eax
- 154:	03 45 08             	add    0x8(%ebp),%eax
- 157:	0f b6 00             	movzbl (%eax),%eax
- 15a:	84 c0                	test   %al,%al
- 15c:	75 ef                	jne    14d <strlen+0xf>
-    ;
-  return n;
- 15e:	8b 45 fc             	mov    -0x4(%ebp),%eax
-}
- 161:	c9                   	leave  
- 162:	c3                   	ret    
-
-00000163 <memset>:
-
-void*
-memset(void *dst, int c, uint n)
-{
- 163:	55                   	push   %ebp
- 164:	89 e5                	mov    %esp,%ebp
- 166:	83 ec 0c             	sub    $0xc,%esp
-  stosb(dst, c, n);
- 169:	8b 45 10             	mov    0x10(%ebp),%eax
- 16c:	89 44 24 08          	mov    %eax,0x8(%esp)
- 170:	8b 45 0c             	mov    0xc(%ebp),%eax
- 173:	89 44 24 04          	mov    %eax,0x4(%esp)
- 177:	8b 45 08             	mov    0x8(%ebp),%eax
- 17a:	89 04 24             	mov    %eax,(%esp)
- 17d:	e8 22 ff ff ff       	call   a4 <stosb>
-  return dst;
- 182:	8b 45 08             	mov    0x8(%ebp),%eax
-}
- 185:	c9                   	leave  
- 186:	c3                   	ret    
-
-00000187 <strchr>:
-
-char*
-strchr(const char *s, char c)
-{
- 187:	55                   	push   %ebp
- 188:	89 e5                	mov    %esp,%ebp
- 18a:	83 ec 04             	sub    $0x4,%esp
- 18d:	8b 45 0c             	mov    0xc(%ebp),%eax
- 190:	88 45 fc             	mov    %al,-0x4(%ebp)
-  for(; *s; s++)
- 193:	eb 14                	jmp    1a9 <strchr+0x22>
-    if(*s == c)
- 195:	8b 45 08             	mov    0x8(%ebp),%eax
- 198:	0f b6 00             	movzbl (%eax),%eax
- 19b:	3a 45 fc             	cmp    -0x4(%ebp),%al
- 19e:	75 05                	jne    1a5 <strchr+0x1e>
-      return (char*)s;
- 1a0:	8b 45 08             	mov    0x8(%ebp),%eax
- 1a3:	eb 13                	jmp    1b8 <strchr+0x31>
-}
-
-char*
-strchr(const char *s, char c)
-{
-  for(; *s; s++)
- 1a5:	83 45 08 01          	addl   $0x1,0x8(%ebp)
- 1a9:	8b 45 08             	mov    0x8(%ebp),%eax
- 1ac:	0f b6 00             	movzbl (%eax),%eax
- 1af:	84 c0                	test   %al,%al
- 1b1:	75 e2                	jne    195 <strchr+0xe>
-    if(*s == c)
-      return (char*)s;
-  return 0;
- 1b3:	b8 00 00 00 00       	mov    $0x0,%eax
-}
- 1b8:	c9                   	leave  
- 1b9:	c3                   	ret    
-
-000001ba <gets>:
-
-char*
-gets(char *buf, int max)
-{
- 1ba:	55                   	push   %ebp
- 1bb:	89 e5                	mov    %esp,%ebp
- 1bd:	83 ec 28             	sub    $0x28,%esp
-  int i, cc;
-  char c;
-
-  for(i=0; i+1 < max; ){
- 1c0:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
- 1c7:	eb 44                	jmp    20d <gets+0x53>
-    cc = read(0, &c, 1);
- 1c9:	c7 44 24 08 01 00 00 	movl   $0x1,0x8(%esp)
- 1d0:	00 
- 1d1:	8d 45 ef             	lea    -0x11(%ebp),%eax
- 1d4:	89 44 24 04          	mov    %eax,0x4(%esp)
- 1d8:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
- 1df:	e8 3c 01 00 00       	call   320 <read>
- 1e4:	89 45 f0             	mov    %eax,-0x10(%ebp)
-    if(cc < 1)
- 1e7:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
- 1eb:	7e 2d                	jle    21a <gets+0x60>
-      break;
-    buf[i++] = c;
- 1ed:	8b 45 f4             	mov    -0xc(%ebp),%eax
- 1f0:	03 45 08             	add    0x8(%ebp),%eax
- 1f3:	0f b6 55 ef          	movzbl -0x11(%ebp),%edx
- 1f7:	88 10                	mov    %dl,(%eax)
- 1f9:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
-    if(c == '\n' || c == '\r')
- 1fd:	0f b6 45 ef          	movzbl -0x11(%ebp),%eax
- 201:	3c 0a                	cmp    $0xa,%al
- 203:	74 16                	je     21b <gets+0x61>
- 205:	0f b6 45 ef          	movzbl -0x11(%ebp),%eax
- 209:	3c 0d                	cmp    $0xd,%al
- 20b:	74 0e                	je     21b <gets+0x61>
-gets(char *buf, int max)
-{
-  int i, cc;
-  char c;
-
-  for(i=0; i+1 < max; ){
- 20d:	8b 45 f4             	mov    -0xc(%ebp),%eax
- 210:	83 c0 01             	add    $0x1,%eax
- 213:	3b 45 0c             	cmp    0xc(%ebp),%eax
- 216:	7c b1                	jl     1c9 <gets+0xf>
- 218:	eb 01                	jmp    21b <gets+0x61>
-    cc = read(0, &c, 1);
-    if(cc < 1)
-      break;
- 21a:	90                   	nop
-    buf[i++] = c;
-    if(c == '\n' || c == '\r')
-      break;
-  }
-  buf[i] = '\0';
- 21b:	8b 45 f4             	mov    -0xc(%ebp),%eax
- 21e:	03 45 08             	add    0x8(%ebp),%eax
- 221:	c6 00 00             	movb   $0x0,(%eax)
-  return buf;
- 224:	8b 45 08             	mov    0x8(%ebp),%eax
-}
- 227:	c9                   	leave  
- 228:	c3                   	ret    
-
-00000229 <stat>:
-
-int
-stat(char *n, struct stat *st)
-{
- 229:	55                   	push   %ebp
- 22a:	89 e5                	mov    %esp,%ebp
- 22c:	83 ec 28             	sub    $0x28,%esp
-  int fd;
-  int r;
-
-  fd = open(n, O_RDONLY);
- 22f:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
- 236:	00 
- 237:	8b 45 08             	mov    0x8(%ebp),%eax
- 23a:	89 04 24             	mov    %eax,(%esp)
- 23d:	e8 06 01 00 00       	call   348 <open>
- 242:	89 45 f4             	mov    %eax,-0xc(%ebp)
-  if(fd < 0)
- 245:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
- 249:	79 07                	jns    252 <stat+0x29>
-    return -1;
- 24b:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
- 250:	eb 23                	jmp    275 <stat+0x4c>
-  r = fstat(fd, st);
- 252:	8b 45 0c             	mov    0xc(%ebp),%eax
- 255:	89 44 24 04          	mov    %eax,0x4(%esp)
- 259:	8b 45 f4             	mov    -0xc(%ebp),%eax
- 25c:	89 04 24             	mov    %eax,(%esp)
- 25f:	e8 fc 00 00 00       	call   360 <fstat>
- 264:	89 45 f0             	mov    %eax,-0x10(%ebp)
-  close(fd);
- 267:	8b 45 f4             	mov    -0xc(%ebp),%eax
- 26a:	89 04 24             	mov    %eax,(%esp)
- 26d:	e8 be 00 00 00       	call   330 <close>
-  return r;
- 272:	8b 45 f0             	mov    -0x10(%ebp),%eax
-}
- 275:	c9                   	leave  
- 276:	c3                   	ret    
-
-00000277 <atoi>:
-
-int
-atoi(const char *s)
-{
- 277:	55                   	push   %ebp
- 278:	89 e5                	mov    %esp,%ebp
- 27a:	83 ec 10             	sub    $0x10,%esp
-  int n;
-
-  n = 0;
- 27d:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
-  while('0' <= *s && *s <= '9')
- 284:	eb 23                	jmp    2a9 <atoi+0x32>
-    n = n*10 + *s++ - '0';
- 286:	8b 55 fc             	mov    -0x4(%ebp),%edx
- 289:	89 d0                	mov    %edx,%eax
- 28b:	c1 e0 02             	shl    $0x2,%eax
- 28e:	01 d0                	add    %edx,%eax
- 290:	01 c0                	add    %eax,%eax
- 292:	89 c2                	mov    %eax,%edx
- 294:	8b 45 08             	mov    0x8(%ebp),%eax
- 297:	0f b6 00             	movzbl (%eax),%eax
- 29a:	0f be c0             	movsbl %al,%eax
- 29d:	01 d0                	add    %edx,%eax
- 29f:	83 e8 30             	sub    $0x30,%eax
- 2a2:	89 45 fc             	mov    %eax,-0x4(%ebp)
- 2a5:	83 45 08 01          	addl   $0x1,0x8(%ebp)
-atoi(const char *s)
-{
-  int n;
-
-  n = 0;
-  while('0' <= *s && *s <= '9')
- 2a9:	8b 45 08             	mov    0x8(%ebp),%eax
- 2ac:	0f b6 00             	movzbl (%eax),%eax
- 2af:	3c 2f                	cmp    $0x2f,%al
- 2b1:	7e 0a                	jle    2bd <atoi+0x46>
- 2b3:	8b 45 08             	mov    0x8(%ebp),%eax
- 2b6:	0f b6 00             	movzbl (%eax),%eax
- 2b9:	3c 39                	cmp    $0x39,%al
- 2bb:	7e c9                	jle    286 <atoi+0xf>
-    n = n*10 + *s++ - '0';
-  return n;
- 2bd:	8b 45 fc             	mov    -0x4(%ebp),%eax
-}
- 2c0:	c9                   	leave  
- 2c1:	c3                   	ret    
-
-000002c2 <memmove>:
-
-void*
-memmove(void *vdst, void *vsrc, int n)
-{
- 2c2:	55                   	push   %ebp
- 2c3:	89 e5                	mov    %esp,%ebp
- 2c5:	83 ec 10             	sub    $0x10,%esp
-  char *dst, *src;
-  
-  dst = vdst;
- 2c8:	8b 45 08             	mov    0x8(%ebp),%eax
- 2cb:	89 45 fc             	mov    %eax,-0x4(%ebp)
-  src = vsrc;
- 2ce:	8b 45 0c             	mov    0xc(%ebp),%eax
- 2d1:	89 45 f8             	mov    %eax,-0x8(%ebp)
-  while(n-- > 0)
- 2d4:	eb 13                	jmp    2e9 <memmove+0x27>
-    *dst++ = *src++;
- 2d6:	8b 45 f8             	mov    -0x8(%ebp),%eax
- 2d9:	0f b6 10             	movzbl (%eax),%edx
- 2dc:	8b 45 fc             	mov    -0x4(%ebp),%eax
- 2df:	88 10                	mov    %dl,(%eax)
- 2e1:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
- 2e5:	83 45 f8 01          	addl   $0x1,-0x8(%ebp)
-{
-  char *dst, *src;
-  
-  dst = vdst;
-  src = vsrc;
-  while(n-- > 0)
- 2e9:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
- 2ed:	0f 9f c0             	setg   %al
- 2f0:	83 6d 10 01          	subl   $0x1,0x10(%ebp)
- 2f4:	84 c0                	test   %al,%al
- 2f6:	75 de                	jne    2d6 <memmove+0x14>
-    *dst++ = *src++;
-  return vdst;
- 2f8:	8b 45 08             	mov    0x8(%ebp),%eax
-}
- 2fb:	c9                   	leave  
- 2fc:	c3                   	ret    
- 2fd:	90                   	nop
- 2fe:	90                   	nop
- 2ff:	90                   	nop
-
-00000300 <fork>:
-  name: \
-    movl $SYS_ ## name, %eax; \
-    int $T_SYSCALL; \
-    ret
-
-SYSCALL(fork)
- 300:	b8 01 00 00 00       	mov    $0x1,%eax
- 305:	cd 40                	int    $0x40
- 307:	c3                   	ret    
-
-00000308 <exit>:
-SYSCALL(exit)
- 308:	b8 02 00 00 00       	mov    $0x2,%eax
- 30d:	cd 40                	int    $0x40
- 30f:	c3                   	ret    
-
-00000310 <wait>:
-SYSCALL(wait)
- 310:	b8 03 00 00 00       	mov    $0x3,%eax
- 315:	cd 40                	int    $0x40
- 317:	c3                   	ret    
-
-00000318 <pipe>:
-SYSCALL(pipe)
- 318:	b8 04 00 00 00       	mov    $0x4,%eax
- 31d:	cd 40                	int    $0x40
- 31f:	c3                   	ret    
-
-00000320 <read>:
-SYSCALL(read)
- 320:	b8 05 00 00 00       	mov    $0x5,%eax
- 325:	cd 40                	int    $0x40
- 327:	c3                   	ret    
-
-00000328 <write>:
-SYSCALL(write)
- 328:	b8 10 00 00 00       	mov    $0x10,%eax
- 32d:	cd 40                	int    $0x40
- 32f:	c3                   	ret    
-
-00000330 <close>:
-SYSCALL(close)
- 330:	b8 15 00 00 00       	mov    $0x15,%eax
- 335:	cd 40                	int    $0x40
- 337:	c3                   	ret    
-
-00000338 <kill>:
-SYSCALL(kill)
- 338:	b8 06 00 00 00       	mov    $0x6,%eax
- 33d:	cd 40                	int    $0x40
- 33f:	c3                   	ret    
-
-00000340 <exec>:
-SYSCALL(exec)
- 340:	b8 07 00 00 00       	mov    $0x7,%eax
- 345:	cd 40                	int    $0x40
- 347:	c3                   	ret    
-
-00000348 <open>:
-SYSCALL(open)
- 348:	b8 0f 00 00 00       	mov    $0xf,%eax
- 34d:	cd 40                	int    $0x40
- 34f:	c3                   	ret    
-
-00000350 <mknod>:
-SYSCALL(mknod)
- 350:	b8 11 00 00 00       	mov    $0x11,%eax
- 355:	cd 40                	int    $0x40
- 357:	c3                   	ret    
-
-00000358 <unlink>:
-SYSCALL(unlink)
- 358:	b8 12 00 00 00       	mov    $0x12,%eax
- 35d:	cd 40                	int    $0x40
- 35f:	c3                   	ret    
-
-00000360 <fstat>:
-SYSCALL(fstat)
- 360:	b8 08 00 00 00       	mov    $0x8,%eax
- 365:	cd 40                	int    $0x40
- 367:	c3                   	ret    
-
-00000368 <link>:
-SYSCALL(link)
- 368:	b8 13 00 00 00       	mov    $0x13,%eax
- 36d:	cd 40                	int    $0x40
- 36f:	c3                   	ret    
-
-00000370 <mkdir>:
-SYSCALL(mkdir)
- 370:	b8 14 00 00 00       	mov    $0x14,%eax
- 375:	cd 40                	int    $0x40
- 377:	c3                   	ret    
-
-00000378 <chdir>:
-SYSCALL(chdir)
- 378:	b8 09 00 00 00       	mov    $0x9,%eax
- 37d:	cd 40                	int    $0x40
- 37f:	c3                   	ret    
-
-00000380 <dup>:
-SYSCALL(dup)
- 380:	b8 0a 00 00 00       	mov    $0xa,%eax
- 385:	cd 40                	int    $0x40
- 387:	c3                   	ret    
-
-00000388 <getpid>:
-SYSCALL(getpid)
- 388:	b8 0b 00 00 00       	mov    $0xb,%eax
- 38d:	cd 40                	int    $0x40
- 38f:	c3                   	ret    
-
-00000390 <sbrk>:
-SYSCALL(sbrk)
- 390:	b8 0c 00 00 00       	mov    $0xc,%eax
- 395:	cd 40                	int    $0x40
- 397:	c3                   	ret    
-
-00000398 <sleep>:
-SYSCALL(sleep)
- 398:	b8 0d 00 00 00       	mov    $0xd,%eax
- 39d:	cd 40                	int    $0x40
- 39f:	c3                   	ret    
-
-000003a0 <uptime>:
-SYSCALL(uptime)
- 3a0:	b8 0e 00 00 00       	mov    $0xe,%eax
- 3a5:	cd 40                	int    $0x40
- 3a7:	c3                   	ret    
-
-000003a8 <waitpid>:
-SYSCALL(waitpid)
- 3a8:	b8 16 00 00 00       	mov    $0x16,%eax
- 3ad:	cd 40                	int    $0x40
- 3af:	c3                   	ret    
-
-000003b0 <wait_stat>:
-SYSCALL(wait_stat)
- 3b0:	b8 17 00 00 00       	mov    $0x17,%eax
- 3b5:	cd 40                	int    $0x40
- 3b7:	c3                   	ret    
-
-000003b8 <list_pgroup>:
-SYSCALL(list_pgroup)
- 3b8:	b8 18 00 00 00       	mov    $0x18,%eax
- 3bd:	cd 40                	int    $0x40
- 3bf:	c3                   	ret    
-
-000003c0 <foreground>:
-SYSCALL(foreground)
- 3c0:	b8 19 00 00 00       	mov    $0x19,%eax
- 3c5:	cd 40                	int    $0x40
- 3c7:	c3                   	ret    
-
-000003c8 <set_priority>:
-SYSCALL(set_priority)
- 3c8:	b8 1a 00 00 00       	mov    $0x1a,%eax
- 3cd:	cd 40                	int    $0x40
- 3cf:	c3                   	ret    
-
-000003d0 <putc>:
-#include "stat.h"
-#include "user.h"
-
-static void
-putc(int fd, char c)
-{
- 3d0:	55                   	push   %ebp
- 3d1:	89 e5                	mov    %esp,%ebp
- 3d3:	83 ec 28             	sub    $0x28,%esp
- 3d6:	8b 45 0c             	mov    0xc(%ebp),%eax
- 3d9:	88 45 f4             	mov    %al,-0xc(%ebp)
-  write(fd, &c, 1);
- 3dc:	c7 44 24 08 01 00 00 	movl   $0x1,0x8(%esp)
- 3e3:	00 
- 3e4:	8d 45 f4             	lea    -0xc(%ebp),%eax
- 3e7:	89 44 24 04          	mov    %eax,0x4(%esp)
- 3eb:	8b 45 08             	mov    0x8(%ebp),%eax
- 3ee:	89 04 24             	mov    %eax,(%esp)
- 3f1:	e8 32 ff ff ff       	call   328 <write>
-}
- 3f6:	c9                   	leave  
- 3f7:	c3                   	ret    
-
-000003f8 <printint>:
-
-static void
-printint(int fd, int xx, int base, int sgn)
-{
- 3f8:	55                   	push   %ebp
- 3f9:	89 e5                	mov    %esp,%ebp
- 3fb:	83 ec 48             	sub    $0x48,%esp
-  static char digits[] = "0123456789ABCDEF";
-  char buf[16];
-  int i, neg;
-  uint x;
-
-  neg = 0;
- 3fe:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
-  if(sgn && xx < 0){
- 405:	83 7d 14 00          	cmpl   $0x0,0x14(%ebp)
- 409:	74 17                	je     422 <printint+0x2a>
- 40b:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
- 40f:	79 11                	jns    422 <printint+0x2a>
-    neg = 1;
- 411:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
-    x = -xx;
- 418:	8b 45 0c             	mov    0xc(%ebp),%eax
- 41b:	f7 d8                	neg    %eax
- 41d:	89 45 ec             	mov    %eax,-0x14(%ebp)
- 420:	eb 06                	jmp    428 <printint+0x30>
-  } else {
-    x = xx;
- 422:	8b 45 0c             	mov    0xc(%ebp),%eax
- 425:	89 45 ec             	mov    %eax,-0x14(%ebp)
-  }
-
-  i = 0;
- 428:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
-  do{
-    buf[i++] = digits[x % base];
- 42f:	8b 4d 10             	mov    0x10(%ebp),%ecx
- 432:	8b 45 ec             	mov    -0x14(%ebp),%eax
- 435:	ba 00 00 00 00       	mov    $0x0,%edx
- 43a:	f7 f1                	div    %ecx
- 43c:	89 d0                	mov    %edx,%eax
- 43e:	0f b6 90 b0 0a 00 00 	movzbl 0xab0(%eax),%edx
- 445:	8d 45 dc             	lea    -0x24(%ebp),%eax
- 448:	03 45 f4             	add    -0xc(%ebp),%eax
- 44b:	88 10                	mov    %dl,(%eax)
- 44d:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
-  }while((x /= base) != 0);
- 451:	8b 55 10             	mov    0x10(%ebp),%edx
- 454:	89 55 d4             	mov    %edx,-0x2c(%ebp)
- 457:	8b 45 ec             	mov    -0x14(%ebp),%eax
- 45a:	ba 00 00 00 00       	mov    $0x0,%edx
- 45f:	f7 75 d4             	divl   -0x2c(%ebp)
- 462:	89 45 ec             	mov    %eax,-0x14(%ebp)
- 465:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
- 469:	75 c4                	jne    42f <printint+0x37>
-  if(neg)
- 46b:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
- 46f:	74 2a                	je     49b <printint+0xa3>
-    buf[i++] = '-';
- 471:	8d 45 dc             	lea    -0x24(%ebp),%eax
- 474:	03 45 f4             	add    -0xc(%ebp),%eax
- 477:	c6 00 2d             	movb   $0x2d,(%eax)
- 47a:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
-
-  while(--i >= 0)
- 47e:	eb 1b                	jmp    49b <printint+0xa3>
-    putc(fd, buf[i]);
- 480:	8d 45 dc             	lea    -0x24(%ebp),%eax
- 483:	03 45 f4             	add    -0xc(%ebp),%eax
- 486:	0f b6 00             	movzbl (%eax),%eax
- 489:	0f be c0             	movsbl %al,%eax
- 48c:	89 44 24 04          	mov    %eax,0x4(%esp)
- 490:	8b 45 08             	mov    0x8(%ebp),%eax
- 493:	89 04 24             	mov    %eax,(%esp)
- 496:	e8 35 ff ff ff       	call   3d0 <putc>
-    buf[i++] = digits[x % base];
-  }while((x /= base) != 0);
-  if(neg)
-    buf[i++] = '-';
-
-  while(--i >= 0)
- 49b:	83 6d f4 01          	subl   $0x1,-0xc(%ebp)
- 49f:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
- 4a3:	79 db                	jns    480 <printint+0x88>
-    putc(fd, buf[i]);
-}
- 4a5:	c9                   	leave  
- 4a6:	c3                   	ret    
-
-000004a7 <printf>:
-
-// Print to the given fd. Only understands %d, %x, %p, %s.
-void
-printf(int fd, char *fmt, ...)
-{
- 4a7:	55                   	push   %ebp
- 4a8:	89 e5                	mov    %esp,%ebp
- 4aa:	83 ec 38             	sub    $0x38,%esp
-  char *s;
-  int c, i, state;
-  uint *ap;
-
-  state = 0;
- 4ad:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
-  ap = (uint*)(void*)&fmt + 1;
- 4b4:	8d 45 0c             	lea    0xc(%ebp),%eax
- 4b7:	83 c0 04             	add    $0x4,%eax
- 4ba:	89 45 e8             	mov    %eax,-0x18(%ebp)
-  for(i = 0; fmt[i]; i++){
- 4bd:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
- 4c4:	e9 7d 01 00 00       	jmp    646 <printf+0x19f>
-    c = fmt[i] & 0xff;
- 4c9:	8b 55 0c             	mov    0xc(%ebp),%edx
- 4cc:	8b 45 f0             	mov    -0x10(%ebp),%eax
- 4cf:	01 d0                	add    %edx,%eax
- 4d1:	0f b6 00             	movzbl (%eax),%eax
- 4d4:	0f be c0             	movsbl %al,%eax
- 4d7:	25 ff 00 00 00       	and    $0xff,%eax
- 4dc:	89 45 e4             	mov    %eax,-0x1c(%ebp)
-    if(state == 0){
- 4df:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
- 4e3:	75 2c                	jne    511 <printf+0x6a>
-      if(c == '%'){
- 4e5:	83 7d e4 25          	cmpl   $0x25,-0x1c(%ebp)
- 4e9:	75 0c                	jne    4f7 <printf+0x50>
-        state = '%';
- 4eb:	c7 45 ec 25 00 00 00 	movl   $0x25,-0x14(%ebp)
- 4f2:	e9 4b 01 00 00       	jmp    642 <printf+0x19b>
-      } else {
-        putc(fd, c);
- 4f7:	8b 45 e4             	mov    -0x1c(%ebp),%eax
- 4fa:	0f be c0             	movsbl %al,%eax
- 4fd:	89 44 24 04          	mov    %eax,0x4(%esp)
- 501:	8b 45 08             	mov    0x8(%ebp),%eax
- 504:	89 04 24             	mov    %eax,(%esp)
- 507:	e8 c4 fe ff ff       	call   3d0 <putc>
- 50c:	e9 31 01 00 00       	jmp    642 <printf+0x19b>
-      }
-    } else if(state == '%'){
- 511:	83 7d ec 25          	cmpl   $0x25,-0x14(%ebp)
- 515:	0f 85 27 01 00 00    	jne    642 <printf+0x19b>
-      if(c == 'd'){
- 51b:	83 7d e4 64          	cmpl   $0x64,-0x1c(%ebp)
- 51f:	75 2d                	jne    54e <printf+0xa7>
-        printint(fd, *ap, 10, 1);
- 521:	8b 45 e8             	mov    -0x18(%ebp),%eax
- 524:	8b 00                	mov    (%eax),%eax
- 526:	c7 44 24 0c 01 00 00 	movl   $0x1,0xc(%esp)
- 52d:	00 
- 52e:	c7 44 24 08 0a 00 00 	movl   $0xa,0x8(%esp)
- 535:	00 
- 536:	89 44 24 04          	mov    %eax,0x4(%esp)
- 53a:	8b 45 08             	mov    0x8(%ebp),%eax
- 53d:	89 04 24             	mov    %eax,(%esp)
- 540:	e8 b3 fe ff ff       	call   3f8 <printint>
-        ap++;
- 545:	83 45 e8 04          	addl   $0x4,-0x18(%ebp)
- 549:	e9 ed 00 00 00       	jmp    63b <printf+0x194>
-      } else if(c == 'x' || c == 'p'){
- 54e:	83 7d e4 78          	cmpl   $0x78,-0x1c(%ebp)
- 552:	74 06                	je     55a <printf+0xb3>
- 554:	83 7d e4 70          	cmpl   $0x70,-0x1c(%ebp)
- 558:	75 2d                	jne    587 <printf+0xe0>
-        printint(fd, *ap, 16, 0);
- 55a:	8b 45 e8             	mov    -0x18(%ebp),%eax
- 55d:	8b 00                	mov    (%eax),%eax
- 55f:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
- 566:	00 
- 567:	c7 44 24 08 10 00 00 	movl   $0x10,0x8(%esp)
- 56e:	00 
- 56f:	89 44 24 04          	mov    %eax,0x4(%esp)
- 573:	8b 45 08             	mov    0x8(%ebp),%eax
- 576:	89 04 24             	mov    %eax,(%esp)
- 579:	e8 7a fe ff ff       	call   3f8 <printint>
-        ap++;
- 57e:	83 45 e8 04          	addl   $0x4,-0x18(%ebp)
- 582:	e9 b4 00 00 00       	jmp    63b <printf+0x194>
-      } else if(c == 's'){
- 587:	83 7d e4 73          	cmpl   $0x73,-0x1c(%ebp)
- 58b:	75 46                	jne    5d3 <printf+0x12c>
-        s = (char*)*ap;
- 58d:	8b 45 e8             	mov    -0x18(%ebp),%eax
- 590:	8b 00                	mov    (%eax),%eax
- 592:	89 45 f4             	mov    %eax,-0xc(%ebp)
-        ap++;
- 595:	83 45 e8 04          	addl   $0x4,-0x18(%ebp)
-        if(s == 0)
- 599:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
- 59d:	75 27                	jne    5c6 <printf+0x11f>
-          s = "(null)";
- 59f:	c7 45 f4 6b 08 00 00 	movl   $0x86b,-0xc(%ebp)
-        while(*s != 0){
- 5a6:	eb 1e                	jmp    5c6 <printf+0x11f>
-          putc(fd, *s);
- 5a8:	8b 45 f4             	mov    -0xc(%ebp),%eax
- 5ab:	0f b6 00             	movzbl (%eax),%eax
- 5ae:	0f be c0             	movsbl %al,%eax
- 5b1:	89 44 24 04          	mov    %eax,0x4(%esp)
- 5b5:	8b 45 08             	mov    0x8(%ebp),%eax
- 5b8:	89 04 24             	mov    %eax,(%esp)
- 5bb:	e8 10 fe ff ff       	call   3d0 <putc>
-          s++;
- 5c0:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
- 5c4:	eb 01                	jmp    5c7 <printf+0x120>
-      } else if(c == 's'){
-        s = (char*)*ap;
-        ap++;
-        if(s == 0)
-          s = "(null)";
-        while(*s != 0){
- 5c6:	90                   	nop
- 5c7:	8b 45 f4             	mov    -0xc(%ebp),%eax
- 5ca:	0f b6 00             	movzbl (%eax),%eax
- 5cd:	84 c0                	test   %al,%al
- 5cf:	75 d7                	jne    5a8 <printf+0x101>
- 5d1:	eb 68                	jmp    63b <printf+0x194>
-          putc(fd, *s);
-          s++;
-        }
-      } else if(c == 'c'){
- 5d3:	83 7d e4 63          	cmpl   $0x63,-0x1c(%ebp)
- 5d7:	75 1d                	jne    5f6 <printf+0x14f>
-        putc(fd, *ap);
- 5d9:	8b 45 e8             	mov    -0x18(%ebp),%eax
- 5dc:	8b 00                	mov    (%eax),%eax
- 5de:	0f be c0             	movsbl %al,%eax
- 5e1:	89 44 24 04          	mov    %eax,0x4(%esp)
- 5e5:	8b 45 08             	mov    0x8(%ebp),%eax
- 5e8:	89 04 24             	mov    %eax,(%esp)
- 5eb:	e8 e0 fd ff ff       	call   3d0 <putc>
-        ap++;
- 5f0:	83 45 e8 04          	addl   $0x4,-0x18(%ebp)
- 5f4:	eb 45                	jmp    63b <printf+0x194>
-      } else if(c == '%'){
- 5f6:	83 7d e4 25          	cmpl   $0x25,-0x1c(%ebp)
- 5fa:	75 17                	jne    613 <printf+0x16c>
-        putc(fd, c);
- 5fc:	8b 45 e4             	mov    -0x1c(%ebp),%eax
- 5ff:	0f be c0             	movsbl %al,%eax
- 602:	89 44 24 04          	mov    %eax,0x4(%esp)
- 606:	8b 45 08             	mov    0x8(%ebp),%eax
- 609:	89 04 24             	mov    %eax,(%esp)
- 60c:	e8 bf fd ff ff       	call   3d0 <putc>
- 611:	eb 28                	jmp    63b <printf+0x194>
-      } else {
-        // Unknown % sequence.  Print it to draw attention.
-        putc(fd, '%');
- 613:	c7 44 24 04 25 00 00 	movl   $0x25,0x4(%esp)
- 61a:	00 
- 61b:	8b 45 08             	mov    0x8(%ebp),%eax
- 61e:	89 04 24             	mov    %eax,(%esp)
- 621:	e8 aa fd ff ff       	call   3d0 <putc>
-        putc(fd, c);
- 626:	8b 45 e4             	mov    -0x1c(%ebp),%eax
- 629:	0f be c0             	movsbl %al,%eax
- 62c:	89 44 24 04          	mov    %eax,0x4(%esp)
- 630:	8b 45 08             	mov    0x8(%ebp),%eax
- 633:	89 04 24             	mov    %eax,(%esp)
- 636:	e8 95 fd ff ff       	call   3d0 <putc>
-      }
-      state = 0;
- 63b:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
-  int c, i, state;
-  uint *ap;
-
-  state = 0;
-  ap = (uint*)(void*)&fmt + 1;
-  for(i = 0; fmt[i]; i++){
- 642:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)
- 646:	8b 55 0c             	mov    0xc(%ebp),%edx
- 649:	8b 45 f0             	mov    -0x10(%ebp),%eax
- 64c:	01 d0                	add    %edx,%eax
- 64e:	0f b6 00             	movzbl (%eax),%eax
- 651:	84 c0                	test   %al,%al
- 653:	0f 85 70 fe ff ff    	jne    4c9 <printf+0x22>
-        putc(fd, c);
-      }
-      state = 0;
-    }
-  }
-}
- 659:	c9                   	leave  
- 65a:	c3                   	ret    
- 65b:	90                   	nop
-
-0000065c <free>:
-static Header base;
-static Header *freep;
-
-void
-free(void *ap)
-{
- 65c:	55                   	push   %ebp
- 65d:	89 e5                	mov    %esp,%ebp
- 65f:	83 ec 10             	sub    $0x10,%esp
-  Header *bp, *p;
-
-  bp = (Header*)ap - 1;
- 662:	8b 45 08             	mov    0x8(%ebp),%eax
- 665:	83 e8 08             	sub    $0x8,%eax
- 668:	89 45 f8             	mov    %eax,-0x8(%ebp)
-  for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
- 66b:	a1 cc 0a 00 00       	mov    0xacc,%eax
- 670:	89 45 fc             	mov    %eax,-0x4(%ebp)
- 673:	eb 24                	jmp    699 <free+0x3d>
-    if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
- 675:	8b 45 fc             	mov    -0x4(%ebp),%eax
- 678:	8b 00                	mov    (%eax),%eax
- 67a:	3b 45 fc             	cmp    -0x4(%ebp),%eax
- 67d:	77 12                	ja     691 <free+0x35>
- 67f:	8b 45 f8             	mov    -0x8(%ebp),%eax
- 682:	3b 45 fc             	cmp    -0x4(%ebp),%eax
- 685:	77 24                	ja     6ab <free+0x4f>
- 687:	8b 45 fc             	mov    -0x4(%ebp),%eax
- 68a:	8b 00                	mov    (%eax),%eax
- 68c:	3b 45 f8             	cmp    -0x8(%ebp),%eax
- 68f:	77 1a                	ja     6ab <free+0x4f>
-free(void *ap)
-{
-  Header *bp, *p;
-
-  bp = (Header*)ap - 1;
-  for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
- 691:	8b 45 fc             	mov    -0x4(%ebp),%eax
- 694:	8b 00                	mov    (%eax),%eax
- 696:	89 45 fc             	mov    %eax,-0x4(%ebp)
- 699:	8b 45 f8             	mov    -0x8(%ebp),%eax
- 69c:	3b 45 fc             	cmp    -0x4(%ebp),%eax
- 69f:	76 d4                	jbe    675 <free+0x19>
- 6a1:	8b 45 fc             	mov    -0x4(%ebp),%eax
- 6a4:	8b 00                	mov    (%eax),%eax
- 6a6:	3b 45 f8             	cmp    -0x8(%ebp),%eax
- 6a9:	76 ca                	jbe    675 <free+0x19>
-    if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
-      break;
-  if(bp + bp->s.size == p->s.ptr){
- 6ab:	8b 45 f8             	mov    -0x8(%ebp),%eax
- 6ae:	8b 40 04             	mov    0x4(%eax),%eax
- 6b1:	c1 e0 03             	shl    $0x3,%eax
- 6b4:	89 c2                	mov    %eax,%edx
- 6b6:	03 55 f8             	add    -0x8(%ebp),%edx
- 6b9:	8b 45 fc             	mov    -0x4(%ebp),%eax
- 6bc:	8b 00                	mov    (%eax),%eax
- 6be:	39 c2                	cmp    %eax,%edx
- 6c0:	75 24                	jne    6e6 <free+0x8a>
-    bp->s.size += p->s.ptr->s.size;
- 6c2:	8b 45 f8             	mov    -0x8(%ebp),%eax
- 6c5:	8b 50 04             	mov    0x4(%eax),%edx
- 6c8:	8b 45 fc             	mov    -0x4(%ebp),%eax
- 6cb:	8b 00                	mov    (%eax),%eax
- 6cd:	8b 40 04             	mov    0x4(%eax),%eax
- 6d0:	01 c2                	add    %eax,%edx
- 6d2:	8b 45 f8             	mov    -0x8(%ebp),%eax
- 6d5:	89 50 04             	mov    %edx,0x4(%eax)
-    bp->s.ptr = p->s.ptr->s.ptr;
- 6d8:	8b 45 fc             	mov    -0x4(%ebp),%eax
- 6db:	8b 00                	mov    (%eax),%eax
- 6dd:	8b 10                	mov    (%eax),%edx
- 6df:	8b 45 f8             	mov    -0x8(%ebp),%eax
- 6e2:	89 10                	mov    %edx,(%eax)
- 6e4:	eb 0a                	jmp    6f0 <free+0x94>
-  } else
-    bp->s.ptr = p->s.ptr;
- 6e6:	8b 45 fc             	mov    -0x4(%ebp),%eax
- 6e9:	8b 10                	mov    (%eax),%edx
- 6eb:	8b 45 f8             	mov    -0x8(%ebp),%eax
- 6ee:	89 10                	mov    %edx,(%eax)
-  if(p + p->s.size == bp){
- 6f0:	8b 45 fc             	mov    -0x4(%ebp),%eax
- 6f3:	8b 40 04             	mov    0x4(%eax),%eax
- 6f6:	c1 e0 03             	shl    $0x3,%eax
- 6f9:	03 45 fc             	add    -0x4(%ebp),%eax
- 6fc:	3b 45 f8             	cmp    -0x8(%ebp),%eax
- 6ff:	75 20                	jne    721 <free+0xc5>
-    p->s.size += bp->s.size;
- 701:	8b 45 fc             	mov    -0x4(%ebp),%eax
- 704:	8b 50 04             	mov    0x4(%eax),%edx
- 707:	8b 45 f8             	mov    -0x8(%ebp),%eax
- 70a:	8b 40 04             	mov    0x4(%eax),%eax
- 70d:	01 c2                	add    %eax,%edx
- 70f:	8b 45 fc             	mov    -0x4(%ebp),%eax
- 712:	89 50 04             	mov    %edx,0x4(%eax)
-    p->s.ptr = bp->s.ptr;
- 715:	8b 45 f8             	mov    -0x8(%ebp),%eax
- 718:	8b 10                	mov    (%eax),%edx
- 71a:	8b 45 fc             	mov    -0x4(%ebp),%eax
- 71d:	89 10                	mov    %edx,(%eax)
- 71f:	eb 08                	jmp    729 <free+0xcd>
-  } else
-    p->s.ptr = bp;
- 721:	8b 45 fc             	mov    -0x4(%ebp),%eax
- 724:	8b 55 f8             	mov    -0x8(%ebp),%edx
- 727:	89 10                	mov    %edx,(%eax)
-  freep = p;
- 729:	8b 45 fc             	mov    -0x4(%ebp),%eax
- 72c:	a3 cc 0a 00 00       	mov    %eax,0xacc
-}
- 731:	c9                   	leave  
- 732:	c3                   	ret    
-
-00000733 <morecore>:
-
-static Header*
-morecore(uint nu)
-{
- 733:	55                   	push   %ebp
- 734:	89 e5                	mov    %esp,%ebp
- 736:	83 ec 28             	sub    $0x28,%esp
-  char *p;
-  Header *hp;
-
-  if(nu < 4096)
- 739:	81 7d 08 ff 0f 00 00 	cmpl   $0xfff,0x8(%ebp)
- 740:	77 07                	ja     749 <morecore+0x16>
-    nu = 4096;
- 742:	c7 45 08 00 10 00 00 	movl   $0x1000,0x8(%ebp)
-  p = sbrk(nu * sizeof(Header));
- 749:	8b 45 08             	mov    0x8(%ebp),%eax
- 74c:	c1 e0 03             	shl    $0x3,%eax
- 74f:	89 04 24             	mov    %eax,(%esp)
- 752:	e8 39 fc ff ff       	call   390 <sbrk>
- 757:	89 45 f4             	mov    %eax,-0xc(%ebp)
-  if(p == (char*)-1)
- 75a:	83 7d f4 ff          	cmpl   $0xffffffff,-0xc(%ebp)
- 75e:	75 07                	jne    767 <morecore+0x34>
-    return 0;
- 760:	b8 00 00 00 00       	mov    $0x0,%eax
- 765:	eb 22                	jmp    789 <morecore+0x56>
-  hp = (Header*)p;
- 767:	8b 45 f4             	mov    -0xc(%ebp),%eax
- 76a:	89 45 f0             	mov    %eax,-0x10(%ebp)
-  hp->s.size = nu;
- 76d:	8b 45 f0             	mov    -0x10(%ebp),%eax
- 770:	8b 55 08             	mov    0x8(%ebp),%edx
- 773:	89 50 04             	mov    %edx,0x4(%eax)
-  free((void*)(hp + 1));
- 776:	8b 45 f0             	mov    -0x10(%ebp),%eax
- 779:	83 c0 08             	add    $0x8,%eax
- 77c:	89 04 24             	mov    %eax,(%esp)
- 77f:	e8 d8 fe ff ff       	call   65c <free>
-  return freep;
- 784:	a1 cc 0a 00 00       	mov    0xacc,%eax
-}
- 789:	c9                   	leave  
- 78a:	c3                   	ret    
-
-0000078b <malloc>:
-
-void*
-malloc(uint nbytes)
-{
- 78b:	55                   	push   %ebp
- 78c:	89 e5                	mov    %esp,%ebp
- 78e:	83 ec 28             	sub    $0x28,%esp
-  Header *p, *prevp;
-  uint nunits;
-
-  nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;
- 791:	8b 45 08             	mov    0x8(%ebp),%eax
- 794:	83 c0 07             	add    $0x7,%eax
- 797:	c1 e8 03             	shr    $0x3,%eax
- 79a:	83 c0 01             	add    $0x1,%eax
- 79d:	89 45 ec             	mov    %eax,-0x14(%ebp)
-  if((prevp = freep) == 0){
- 7a0:	a1 cc 0a 00 00       	mov    0xacc,%eax
- 7a5:	89 45 f0             	mov    %eax,-0x10(%ebp)
- 7a8:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
- 7ac:	75 23                	jne    7d1 <malloc+0x46>
-    base.s.ptr = freep = prevp = &base;
- 7ae:	c7 45 f0 c4 0a 00 00 	movl   $0xac4,-0x10(%ebp)
- 7b5:	8b 45 f0             	mov    -0x10(%ebp),%eax
- 7b8:	a3 cc 0a 00 00       	mov    %eax,0xacc
- 7bd:	a1 cc 0a 00 00       	mov    0xacc,%eax
- 7c2:	a3 c4 0a 00 00       	mov    %eax,0xac4
-    base.s.size = 0;
- 7c7:	c7 05 c8 0a 00 00 00 	movl   $0x0,0xac8
- 7ce:	00 00 00 
-  }
-  for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
- 7d1:	8b 45 f0             	mov    -0x10(%ebp),%eax
- 7d4:	8b 00                	mov    (%eax),%eax
- 7d6:	89 45 f4             	mov    %eax,-0xc(%ebp)
-    if(p->s.size >= nunits){
- 7d9:	8b 45 f4             	mov    -0xc(%ebp),%eax
- 7dc:	8b 40 04             	mov    0x4(%eax),%eax
- 7df:	3b 45 ec             	cmp    -0x14(%ebp),%eax
- 7e2:	72 4d                	jb     831 <malloc+0xa6>
-      if(p->s.size == nunits)
- 7e4:	8b 45 f4             	mov    -0xc(%ebp),%eax
- 7e7:	8b 40 04             	mov    0x4(%eax),%eax
- 7ea:	3b 45 ec             	cmp    -0x14(%ebp),%eax
- 7ed:	75 0c                	jne    7fb <malloc+0x70>
-        prevp->s.ptr = p->s.ptr;
- 7ef:	8b 45 f4             	mov    -0xc(%ebp),%eax
- 7f2:	8b 10                	mov    (%eax),%edx
- 7f4:	8b 45 f0             	mov    -0x10(%ebp),%eax
- 7f7:	89 10                	mov    %edx,(%eax)
- 7f9:	eb 26                	jmp    821 <malloc+0x96>
-      else {
-        p->s.size -= nunits;
- 7fb:	8b 45 f4             	mov    -0xc(%ebp),%eax
- 7fe:	8b 40 04             	mov    0x4(%eax),%eax
- 801:	89 c2                	mov    %eax,%edx
- 803:	2b 55 ec             	sub    -0x14(%ebp),%edx
- 806:	8b 45 f4             	mov    -0xc(%ebp),%eax
- 809:	89 50 04             	mov    %edx,0x4(%eax)
-        p += p->s.size;
- 80c:	8b 45 f4             	mov    -0xc(%ebp),%eax
- 80f:	8b 40 04             	mov    0x4(%eax),%eax
- 812:	c1 e0 03             	shl    $0x3,%eax
- 815:	01 45 f4             	add    %eax,-0xc(%ebp)
-        p->s.size = nunits;
- 818:	8b 45 f4             	mov    -0xc(%ebp),%eax
- 81b:	8b 55 ec             	mov    -0x14(%ebp),%edx
- 81e:	89 50 04             	mov    %edx,0x4(%eax)
-      }
-      freep = prevp;
- 821:	8b 45 f0             	mov    -0x10(%ebp),%eax
- 824:	a3 cc 0a 00 00       	mov    %eax,0xacc
-      return (void*)(p + 1);
- 829:	8b 45 f4             	mov    -0xc(%ebp),%eax
- 82c:	83 c0 08             	add    $0x8,%eax
- 82f:	eb 38                	jmp    869 <malloc+0xde>
-    }
-    if(p == freep)
- 831:	a1 cc 0a 00 00       	mov    0xacc,%eax
- 836:	39 45 f4             	cmp    %eax,-0xc(%ebp)
- 839:	75 1b                	jne    856 <malloc+0xcb>
-      if((p = morecore(nunits)) == 0)
- 83b:	8b 45 ec             	mov    -0x14(%ebp),%eax
- 83e:	89 04 24             	mov    %eax,(%esp)
- 841:	e8 ed fe ff ff       	call   733 <morecore>
- 846:	89 45 f4             	mov    %eax,-0xc(%ebp)
- 849:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
- 84d:	75 07                	jne    856 <malloc+0xcb>
-        return 0;
- 84f:	b8 00 00 00 00       	mov    $0x0,%eax
- 854:	eb 13                	jmp    869 <malloc+0xde>
-  nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;
-  if((prevp = freep) == 0){
-    base.s.ptr = freep = prevp = &base;
-    base.s.size = 0;
-  }
-  for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
- 856:	8b 45 f4             	mov    -0xc(%ebp),%eax
- 859:	89 45 f0             	mov    %eax,-0x10(%ebp)
- 85c:	8b 45 f4             	mov    -0xc(%ebp),%eax
- 85f:	8b 00                	mov    (%eax),%eax
- 861:	89 45 f4             	mov    %eax,-0xc(%ebp)
-      return (void*)(p + 1);
-    }
-    if(p == freep)
-      if((p = morecore(nunits)) == 0)
-        return 0;
-  }
- 864:	e9 70 ff ff ff       	jmp    7d9 <malloc+0x4e>
-}
- 869:	c9                   	leave  
- 86a:	c3                   	ret    
diff --git a/xv6/read.c b/xv6/read.c
deleted file mode 100644
index 6cc94de..0000000
--- a/xv6/read.c
+++ /dev/null
@@ -1,23 +0,0 @@
-#include "types.h"
-#include "stat.h"
-#include "user.h"
-
-int
-main(int argc, char *argv[])
-{
-	char c[2] = {0,0};
-	int pos = 0;
-
-	while(1){
-		read(0,&c[pos],1);
-		write(1,&c[pos],1);
-
-		if(c[pos] == '\n' && c[!pos] == 'q'){
-			exit(0);
-		}
-
-		pos = !pos;
-
-	}
-	return 0;
-}
diff --git a/xv6/read.d b/xv6/read.d
deleted file mode 100644
index bc9fcfd..0000000
--- a/xv6/read.d
+++ /dev/null
@@ -1 +0,0 @@
-read.o: read.c types.h stat.h user.h
diff --git a/xv6/read.sym b/xv6/read.sym
deleted file mode 100644
index 7226752..0000000
--- a/xv6/read.sym
+++ /dev/null
@@ -1,65 +0,0 @@
-00000000 .text
-0000086b .rodata
-00000874 .eh_frame
-00000ab0 .data
-00000ac4 .bss
-00000000 .comment
-00000000 .debug_aranges
-00000000 .debug_info
-00000000 .debug_abbrev
-00000000 .debug_line
-00000000 .debug_str
-00000000 .debug_loc
-00000000 read.c
-00000000 ulib.c
-000000a4 stosb
-00000000 printf.c
-000003d0 putc
-000003f8 printint
-00000ab0 digits.923
-00000000 umalloc.c
-00000ac4 base
-00000acc freep
-00000733 morecore
-000000c9 strcpy
-000003a8 waitpid
-000004a7 printf
-000002c2 memmove
-00000350 mknod
-000003c0 foreground
-000001ba gets
-00000388 getpid
-0000078b malloc
-00000398 sleep
-000003c8 set_priority
-000003b0 wait_stat
-00000318 pipe
-00000328 write
-00000360 fstat
-00000338 kill
-00000378 chdir
-00000340 exec
-00000310 wait
-00000320 read
-00000358 unlink
-00000300 fork
-00000390 sbrk
-000003a0 uptime
-00000ac4 __bss_start
-00000163 memset
-00000000 main
-000000fd strcmp
-00000380 dup
-000003b8 list_pgroup
-00000229 stat
-00000ac4 _edata
-00000ad0 _end
-00000368 link
-00000308 exit
-00000277 atoi
-0000013e strlen
-00000348 open
-00000187 strchr
-00000370 mkdir
-00000330 close
-0000065c free
diff --git a/xv6/rm.asm b/xv6/rm.asm
deleted file mode 100644
index c706a40..0000000
--- a/xv6/rm.asm
+++ /dev/null
@@ -1,1227 +0,0 @@
-
-_rm:     file format elf32-i386
-
-
-Disassembly of section .text:
-
-00000000 <main>:
-#include "stat.h"
-#include "user.h"
-
-int
-main(int argc, char *argv[])
-{
-   0:	55                   	push   %ebp
-   1:	89 e5                	mov    %esp,%ebp
-   3:	83 e4 f0             	and    $0xfffffff0,%esp
-   6:	83 ec 20             	sub    $0x20,%esp
-  int i;
-
-  if(argc < 2){
-   9:	83 7d 08 01          	cmpl   $0x1,0x8(%ebp)
-   d:	7f 20                	jg     2f <main+0x2f>
-    printf(2, "Usage: rm files...\n");
-   f:	c7 44 24 04 5b 08 00 	movl   $0x85b,0x4(%esp)
-  16:	00 
-  17:	c7 04 24 02 00 00 00 	movl   $0x2,(%esp)
-  1e:	e8 74 04 00 00       	call   497 <printf>
-    exit(EXIT_STATUS_DEFAULT);
-  23:	c7 04 24 02 00 00 00 	movl   $0x2,(%esp)
-  2a:	e8 c9 02 00 00       	call   2f8 <exit>
-  }
-
-  for(i = 1; i < argc; i++){
-  2f:	c7 44 24 1c 01 00 00 	movl   $0x1,0x1c(%esp)
-  36:	00 
-  37:	eb 43                	jmp    7c <main+0x7c>
-    if(unlink(argv[i]) < 0){
-  39:	8b 44 24 1c          	mov    0x1c(%esp),%eax
-  3d:	c1 e0 02             	shl    $0x2,%eax
-  40:	03 45 0c             	add    0xc(%ebp),%eax
-  43:	8b 00                	mov    (%eax),%eax
-  45:	89 04 24             	mov    %eax,(%esp)
-  48:	e8 fb 02 00 00       	call   348 <unlink>
-  4d:	85 c0                	test   %eax,%eax
-  4f:	79 26                	jns    77 <main+0x77>
-      printf(2, "rm: %s failed to delete\n", argv[i]);
-  51:	8b 44 24 1c          	mov    0x1c(%esp),%eax
-  55:	c1 e0 02             	shl    $0x2,%eax
-  58:	03 45 0c             	add    0xc(%ebp),%eax
-  5b:	8b 00                	mov    (%eax),%eax
-  5d:	89 44 24 08          	mov    %eax,0x8(%esp)
-  61:	c7 44 24 04 6f 08 00 	movl   $0x86f,0x4(%esp)
-  68:	00 
-  69:	c7 04 24 02 00 00 00 	movl   $0x2,(%esp)
-  70:	e8 22 04 00 00       	call   497 <printf>
-      break;
-  75:	eb 0e                	jmp    85 <main+0x85>
-  if(argc < 2){
-    printf(2, "Usage: rm files...\n");
-    exit(EXIT_STATUS_DEFAULT);
-  }
-
-  for(i = 1; i < argc; i++){
-  77:	83 44 24 1c 01       	addl   $0x1,0x1c(%esp)
-  7c:	8b 44 24 1c          	mov    0x1c(%esp),%eax
-  80:	3b 45 08             	cmp    0x8(%ebp),%eax
-  83:	7c b4                	jl     39 <main+0x39>
-      printf(2, "rm: %s failed to delete\n", argv[i]);
-      break;
-    }
-  }
-
-  exit(EXIT_STATUS_DEFAULT);
-  85:	c7 04 24 02 00 00 00 	movl   $0x2,(%esp)
-  8c:	e8 67 02 00 00       	call   2f8 <exit>
-  91:	90                   	nop
-  92:	90                   	nop
-  93:	90                   	nop
-
-00000094 <stosb>:
-               "cc");
-}
-
-static inline void
-stosb(void *addr, int data, int cnt)
-{
-  94:	55                   	push   %ebp
-  95:	89 e5                	mov    %esp,%ebp
-  97:	57                   	push   %edi
-  98:	53                   	push   %ebx
-  asm volatile("cld; rep stosb" :
-  99:	8b 4d 08             	mov    0x8(%ebp),%ecx
-  9c:	8b 55 10             	mov    0x10(%ebp),%edx
-  9f:	8b 45 0c             	mov    0xc(%ebp),%eax
-  a2:	89 cb                	mov    %ecx,%ebx
-  a4:	89 df                	mov    %ebx,%edi
-  a6:	89 d1                	mov    %edx,%ecx
-  a8:	fc                   	cld    
-  a9:	f3 aa                	rep stos %al,%es:(%edi)
-  ab:	89 ca                	mov    %ecx,%edx
-  ad:	89 fb                	mov    %edi,%ebx
-  af:	89 5d 08             	mov    %ebx,0x8(%ebp)
-  b2:	89 55 10             	mov    %edx,0x10(%ebp)
-               "=D" (addr), "=c" (cnt) :
-               "0" (addr), "1" (cnt), "a" (data) :
-               "memory", "cc");
-}
-  b5:	5b                   	pop    %ebx
-  b6:	5f                   	pop    %edi
-  b7:	5d                   	pop    %ebp
-  b8:	c3                   	ret    
-
-000000b9 <strcpy>:
-#include "user.h"
-#include "x86.h"
-
-char*
-strcpy(char *s, char *t)
-{
-  b9:	55                   	push   %ebp
-  ba:	89 e5                	mov    %esp,%ebp
-  bc:	83 ec 10             	sub    $0x10,%esp
-  char *os;
-
-  os = s;
-  bf:	8b 45 08             	mov    0x8(%ebp),%eax
-  c2:	89 45 fc             	mov    %eax,-0x4(%ebp)
-  while((*s++ = *t++) != 0)
-  c5:	90                   	nop
-  c6:	8b 45 0c             	mov    0xc(%ebp),%eax
-  c9:	0f b6 10             	movzbl (%eax),%edx
-  cc:	8b 45 08             	mov    0x8(%ebp),%eax
-  cf:	88 10                	mov    %dl,(%eax)
-  d1:	8b 45 08             	mov    0x8(%ebp),%eax
-  d4:	0f b6 00             	movzbl (%eax),%eax
-  d7:	84 c0                	test   %al,%al
-  d9:	0f 95 c0             	setne  %al
-  dc:	83 45 08 01          	addl   $0x1,0x8(%ebp)
-  e0:	83 45 0c 01          	addl   $0x1,0xc(%ebp)
-  e4:	84 c0                	test   %al,%al
-  e6:	75 de                	jne    c6 <strcpy+0xd>
-    ;
-  return os;
-  e8:	8b 45 fc             	mov    -0x4(%ebp),%eax
-}
-  eb:	c9                   	leave  
-  ec:	c3                   	ret    
-
-000000ed <strcmp>:
-
-int
-strcmp(const char *p, const char *q)
-{
-  ed:	55                   	push   %ebp
-  ee:	89 e5                	mov    %esp,%ebp
-  while(*p && *p == *q)
-  f0:	eb 08                	jmp    fa <strcmp+0xd>
-    p++, q++;
-  f2:	83 45 08 01          	addl   $0x1,0x8(%ebp)
-  f6:	83 45 0c 01          	addl   $0x1,0xc(%ebp)
-}
-
-int
-strcmp(const char *p, const char *q)
-{
-  while(*p && *p == *q)
-  fa:	8b 45 08             	mov    0x8(%ebp),%eax
-  fd:	0f b6 00             	movzbl (%eax),%eax
- 100:	84 c0                	test   %al,%al
- 102:	74 10                	je     114 <strcmp+0x27>
- 104:	8b 45 08             	mov    0x8(%ebp),%eax
- 107:	0f b6 10             	movzbl (%eax),%edx
- 10a:	8b 45 0c             	mov    0xc(%ebp),%eax
- 10d:	0f b6 00             	movzbl (%eax),%eax
- 110:	38 c2                	cmp    %al,%dl
- 112:	74 de                	je     f2 <strcmp+0x5>
-    p++, q++;
-  return (uchar)*p - (uchar)*q;
- 114:	8b 45 08             	mov    0x8(%ebp),%eax
- 117:	0f b6 00             	movzbl (%eax),%eax
- 11a:	0f b6 d0             	movzbl %al,%edx
- 11d:	8b 45 0c             	mov    0xc(%ebp),%eax
- 120:	0f b6 00             	movzbl (%eax),%eax
- 123:	0f b6 c0             	movzbl %al,%eax
- 126:	89 d1                	mov    %edx,%ecx
- 128:	29 c1                	sub    %eax,%ecx
- 12a:	89 c8                	mov    %ecx,%eax
-}
- 12c:	5d                   	pop    %ebp
- 12d:	c3                   	ret    
-
-0000012e <strlen>:
-
-uint
-strlen(char *s)
-{
- 12e:	55                   	push   %ebp
- 12f:	89 e5                	mov    %esp,%ebp
- 131:	83 ec 10             	sub    $0x10,%esp
-  int n;
-
-  for(n = 0; s[n]; n++)
- 134:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
- 13b:	eb 04                	jmp    141 <strlen+0x13>
- 13d:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
- 141:	8b 45 fc             	mov    -0x4(%ebp),%eax
- 144:	03 45 08             	add    0x8(%ebp),%eax
- 147:	0f b6 00             	movzbl (%eax),%eax
- 14a:	84 c0                	test   %al,%al
- 14c:	75 ef                	jne    13d <strlen+0xf>
-    ;
-  return n;
- 14e:	8b 45 fc             	mov    -0x4(%ebp),%eax
-}
- 151:	c9                   	leave  
- 152:	c3                   	ret    
-
-00000153 <memset>:
-
-void*
-memset(void *dst, int c, uint n)
-{
- 153:	55                   	push   %ebp
- 154:	89 e5                	mov    %esp,%ebp
- 156:	83 ec 0c             	sub    $0xc,%esp
-  stosb(dst, c, n);
- 159:	8b 45 10             	mov    0x10(%ebp),%eax
- 15c:	89 44 24 08          	mov    %eax,0x8(%esp)
- 160:	8b 45 0c             	mov    0xc(%ebp),%eax
- 163:	89 44 24 04          	mov    %eax,0x4(%esp)
- 167:	8b 45 08             	mov    0x8(%ebp),%eax
- 16a:	89 04 24             	mov    %eax,(%esp)
- 16d:	e8 22 ff ff ff       	call   94 <stosb>
-  return dst;
- 172:	8b 45 08             	mov    0x8(%ebp),%eax
-}
- 175:	c9                   	leave  
- 176:	c3                   	ret    
-
-00000177 <strchr>:
-
-char*
-strchr(const char *s, char c)
-{
- 177:	55                   	push   %ebp
- 178:	89 e5                	mov    %esp,%ebp
- 17a:	83 ec 04             	sub    $0x4,%esp
- 17d:	8b 45 0c             	mov    0xc(%ebp),%eax
- 180:	88 45 fc             	mov    %al,-0x4(%ebp)
-  for(; *s; s++)
- 183:	eb 14                	jmp    199 <strchr+0x22>
-    if(*s == c)
- 185:	8b 45 08             	mov    0x8(%ebp),%eax
- 188:	0f b6 00             	movzbl (%eax),%eax
- 18b:	3a 45 fc             	cmp    -0x4(%ebp),%al
- 18e:	75 05                	jne    195 <strchr+0x1e>
-      return (char*)s;
- 190:	8b 45 08             	mov    0x8(%ebp),%eax
- 193:	eb 13                	jmp    1a8 <strchr+0x31>
-}
-
-char*
-strchr(const char *s, char c)
-{
-  for(; *s; s++)
- 195:	83 45 08 01          	addl   $0x1,0x8(%ebp)
- 199:	8b 45 08             	mov    0x8(%ebp),%eax
- 19c:	0f b6 00             	movzbl (%eax),%eax
- 19f:	84 c0                	test   %al,%al
- 1a1:	75 e2                	jne    185 <strchr+0xe>
-    if(*s == c)
-      return (char*)s;
-  return 0;
- 1a3:	b8 00 00 00 00       	mov    $0x0,%eax
-}
- 1a8:	c9                   	leave  
- 1a9:	c3                   	ret    
-
-000001aa <gets>:
-
-char*
-gets(char *buf, int max)
-{
- 1aa:	55                   	push   %ebp
- 1ab:	89 e5                	mov    %esp,%ebp
- 1ad:	83 ec 28             	sub    $0x28,%esp
-  int i, cc;
-  char c;
-
-  for(i=0; i+1 < max; ){
- 1b0:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
- 1b7:	eb 44                	jmp    1fd <gets+0x53>
-    cc = read(0, &c, 1);
- 1b9:	c7 44 24 08 01 00 00 	movl   $0x1,0x8(%esp)
- 1c0:	00 
- 1c1:	8d 45 ef             	lea    -0x11(%ebp),%eax
- 1c4:	89 44 24 04          	mov    %eax,0x4(%esp)
- 1c8:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
- 1cf:	e8 3c 01 00 00       	call   310 <read>
- 1d4:	89 45 f0             	mov    %eax,-0x10(%ebp)
-    if(cc < 1)
- 1d7:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
- 1db:	7e 2d                	jle    20a <gets+0x60>
-      break;
-    buf[i++] = c;
- 1dd:	8b 45 f4             	mov    -0xc(%ebp),%eax
- 1e0:	03 45 08             	add    0x8(%ebp),%eax
- 1e3:	0f b6 55 ef          	movzbl -0x11(%ebp),%edx
- 1e7:	88 10                	mov    %dl,(%eax)
- 1e9:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
-    if(c == '\n' || c == '\r')
- 1ed:	0f b6 45 ef          	movzbl -0x11(%ebp),%eax
- 1f1:	3c 0a                	cmp    $0xa,%al
- 1f3:	74 16                	je     20b <gets+0x61>
- 1f5:	0f b6 45 ef          	movzbl -0x11(%ebp),%eax
- 1f9:	3c 0d                	cmp    $0xd,%al
- 1fb:	74 0e                	je     20b <gets+0x61>
-gets(char *buf, int max)
-{
-  int i, cc;
-  char c;
-
-  for(i=0; i+1 < max; ){
- 1fd:	8b 45 f4             	mov    -0xc(%ebp),%eax
- 200:	83 c0 01             	add    $0x1,%eax
- 203:	3b 45 0c             	cmp    0xc(%ebp),%eax
- 206:	7c b1                	jl     1b9 <gets+0xf>
- 208:	eb 01                	jmp    20b <gets+0x61>
-    cc = read(0, &c, 1);
-    if(cc < 1)
-      break;
- 20a:	90                   	nop
-    buf[i++] = c;
-    if(c == '\n' || c == '\r')
-      break;
-  }
-  buf[i] = '\0';
- 20b:	8b 45 f4             	mov    -0xc(%ebp),%eax
- 20e:	03 45 08             	add    0x8(%ebp),%eax
- 211:	c6 00 00             	movb   $0x0,(%eax)
-  return buf;
- 214:	8b 45 08             	mov    0x8(%ebp),%eax
-}
- 217:	c9                   	leave  
- 218:	c3                   	ret    
-
-00000219 <stat>:
-
-int
-stat(char *n, struct stat *st)
-{
- 219:	55                   	push   %ebp
- 21a:	89 e5                	mov    %esp,%ebp
- 21c:	83 ec 28             	sub    $0x28,%esp
-  int fd;
-  int r;
-
-  fd = open(n, O_RDONLY);
- 21f:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
- 226:	00 
- 227:	8b 45 08             	mov    0x8(%ebp),%eax
- 22a:	89 04 24             	mov    %eax,(%esp)
- 22d:	e8 06 01 00 00       	call   338 <open>
- 232:	89 45 f4             	mov    %eax,-0xc(%ebp)
-  if(fd < 0)
- 235:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
- 239:	79 07                	jns    242 <stat+0x29>
-    return -1;
- 23b:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
- 240:	eb 23                	jmp    265 <stat+0x4c>
-  r = fstat(fd, st);
- 242:	8b 45 0c             	mov    0xc(%ebp),%eax
- 245:	89 44 24 04          	mov    %eax,0x4(%esp)
- 249:	8b 45 f4             	mov    -0xc(%ebp),%eax
- 24c:	89 04 24             	mov    %eax,(%esp)
- 24f:	e8 fc 00 00 00       	call   350 <fstat>
- 254:	89 45 f0             	mov    %eax,-0x10(%ebp)
-  close(fd);
- 257:	8b 45 f4             	mov    -0xc(%ebp),%eax
- 25a:	89 04 24             	mov    %eax,(%esp)
- 25d:	e8 be 00 00 00       	call   320 <close>
-  return r;
- 262:	8b 45 f0             	mov    -0x10(%ebp),%eax
-}
- 265:	c9                   	leave  
- 266:	c3                   	ret    
-
-00000267 <atoi>:
-
-int
-atoi(const char *s)
-{
- 267:	55                   	push   %ebp
- 268:	89 e5                	mov    %esp,%ebp
- 26a:	83 ec 10             	sub    $0x10,%esp
-  int n;
-
-  n = 0;
- 26d:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
-  while('0' <= *s && *s <= '9')
- 274:	eb 23                	jmp    299 <atoi+0x32>
-    n = n*10 + *s++ - '0';
- 276:	8b 55 fc             	mov    -0x4(%ebp),%edx
- 279:	89 d0                	mov    %edx,%eax
- 27b:	c1 e0 02             	shl    $0x2,%eax
- 27e:	01 d0                	add    %edx,%eax
- 280:	01 c0                	add    %eax,%eax
- 282:	89 c2                	mov    %eax,%edx
- 284:	8b 45 08             	mov    0x8(%ebp),%eax
- 287:	0f b6 00             	movzbl (%eax),%eax
- 28a:	0f be c0             	movsbl %al,%eax
- 28d:	01 d0                	add    %edx,%eax
- 28f:	83 e8 30             	sub    $0x30,%eax
- 292:	89 45 fc             	mov    %eax,-0x4(%ebp)
- 295:	83 45 08 01          	addl   $0x1,0x8(%ebp)
-atoi(const char *s)
-{
-  int n;
-
-  n = 0;
-  while('0' <= *s && *s <= '9')
- 299:	8b 45 08             	mov    0x8(%ebp),%eax
- 29c:	0f b6 00             	movzbl (%eax),%eax
- 29f:	3c 2f                	cmp    $0x2f,%al
- 2a1:	7e 0a                	jle    2ad <atoi+0x46>
- 2a3:	8b 45 08             	mov    0x8(%ebp),%eax
- 2a6:	0f b6 00             	movzbl (%eax),%eax
- 2a9:	3c 39                	cmp    $0x39,%al
- 2ab:	7e c9                	jle    276 <atoi+0xf>
-    n = n*10 + *s++ - '0';
-  return n;
- 2ad:	8b 45 fc             	mov    -0x4(%ebp),%eax
-}
- 2b0:	c9                   	leave  
- 2b1:	c3                   	ret    
-
-000002b2 <memmove>:
-
-void*
-memmove(void *vdst, void *vsrc, int n)
-{
- 2b2:	55                   	push   %ebp
- 2b3:	89 e5                	mov    %esp,%ebp
- 2b5:	83 ec 10             	sub    $0x10,%esp
-  char *dst, *src;
-  
-  dst = vdst;
- 2b8:	8b 45 08             	mov    0x8(%ebp),%eax
- 2bb:	89 45 fc             	mov    %eax,-0x4(%ebp)
-  src = vsrc;
- 2be:	8b 45 0c             	mov    0xc(%ebp),%eax
- 2c1:	89 45 f8             	mov    %eax,-0x8(%ebp)
-  while(n-- > 0)
- 2c4:	eb 13                	jmp    2d9 <memmove+0x27>
-    *dst++ = *src++;
- 2c6:	8b 45 f8             	mov    -0x8(%ebp),%eax
- 2c9:	0f b6 10             	movzbl (%eax),%edx
- 2cc:	8b 45 fc             	mov    -0x4(%ebp),%eax
- 2cf:	88 10                	mov    %dl,(%eax)
- 2d1:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
- 2d5:	83 45 f8 01          	addl   $0x1,-0x8(%ebp)
-{
-  char *dst, *src;
-  
-  dst = vdst;
-  src = vsrc;
-  while(n-- > 0)
- 2d9:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
- 2dd:	0f 9f c0             	setg   %al
- 2e0:	83 6d 10 01          	subl   $0x1,0x10(%ebp)
- 2e4:	84 c0                	test   %al,%al
- 2e6:	75 de                	jne    2c6 <memmove+0x14>
-    *dst++ = *src++;
-  return vdst;
- 2e8:	8b 45 08             	mov    0x8(%ebp),%eax
-}
- 2eb:	c9                   	leave  
- 2ec:	c3                   	ret    
- 2ed:	90                   	nop
- 2ee:	90                   	nop
- 2ef:	90                   	nop
-
-000002f0 <fork>:
-  name: \
-    movl $SYS_ ## name, %eax; \
-    int $T_SYSCALL; \
-    ret
-
-SYSCALL(fork)
- 2f0:	b8 01 00 00 00       	mov    $0x1,%eax
- 2f5:	cd 40                	int    $0x40
- 2f7:	c3                   	ret    
-
-000002f8 <exit>:
-SYSCALL(exit)
- 2f8:	b8 02 00 00 00       	mov    $0x2,%eax
- 2fd:	cd 40                	int    $0x40
- 2ff:	c3                   	ret    
-
-00000300 <wait>:
-SYSCALL(wait)
- 300:	b8 03 00 00 00       	mov    $0x3,%eax
- 305:	cd 40                	int    $0x40
- 307:	c3                   	ret    
-
-00000308 <pipe>:
-SYSCALL(pipe)
- 308:	b8 04 00 00 00       	mov    $0x4,%eax
- 30d:	cd 40                	int    $0x40
- 30f:	c3                   	ret    
-
-00000310 <read>:
-SYSCALL(read)
- 310:	b8 05 00 00 00       	mov    $0x5,%eax
- 315:	cd 40                	int    $0x40
- 317:	c3                   	ret    
-
-00000318 <write>:
-SYSCALL(write)
- 318:	b8 10 00 00 00       	mov    $0x10,%eax
- 31d:	cd 40                	int    $0x40
- 31f:	c3                   	ret    
-
-00000320 <close>:
-SYSCALL(close)
- 320:	b8 15 00 00 00       	mov    $0x15,%eax
- 325:	cd 40                	int    $0x40
- 327:	c3                   	ret    
-
-00000328 <kill>:
-SYSCALL(kill)
- 328:	b8 06 00 00 00       	mov    $0x6,%eax
- 32d:	cd 40                	int    $0x40
- 32f:	c3                   	ret    
-
-00000330 <exec>:
-SYSCALL(exec)
- 330:	b8 07 00 00 00       	mov    $0x7,%eax
- 335:	cd 40                	int    $0x40
- 337:	c3                   	ret    
-
-00000338 <open>:
-SYSCALL(open)
- 338:	b8 0f 00 00 00       	mov    $0xf,%eax
- 33d:	cd 40                	int    $0x40
- 33f:	c3                   	ret    
-
-00000340 <mknod>:
-SYSCALL(mknod)
- 340:	b8 11 00 00 00       	mov    $0x11,%eax
- 345:	cd 40                	int    $0x40
- 347:	c3                   	ret    
-
-00000348 <unlink>:
-SYSCALL(unlink)
- 348:	b8 12 00 00 00       	mov    $0x12,%eax
- 34d:	cd 40                	int    $0x40
- 34f:	c3                   	ret    
-
-00000350 <fstat>:
-SYSCALL(fstat)
- 350:	b8 08 00 00 00       	mov    $0x8,%eax
- 355:	cd 40                	int    $0x40
- 357:	c3                   	ret    
-
-00000358 <link>:
-SYSCALL(link)
- 358:	b8 13 00 00 00       	mov    $0x13,%eax
- 35d:	cd 40                	int    $0x40
- 35f:	c3                   	ret    
-
-00000360 <mkdir>:
-SYSCALL(mkdir)
- 360:	b8 14 00 00 00       	mov    $0x14,%eax
- 365:	cd 40                	int    $0x40
- 367:	c3                   	ret    
-
-00000368 <chdir>:
-SYSCALL(chdir)
- 368:	b8 09 00 00 00       	mov    $0x9,%eax
- 36d:	cd 40                	int    $0x40
- 36f:	c3                   	ret    
-
-00000370 <dup>:
-SYSCALL(dup)
- 370:	b8 0a 00 00 00       	mov    $0xa,%eax
- 375:	cd 40                	int    $0x40
- 377:	c3                   	ret    
-
-00000378 <getpid>:
-SYSCALL(getpid)
- 378:	b8 0b 00 00 00       	mov    $0xb,%eax
- 37d:	cd 40                	int    $0x40
- 37f:	c3                   	ret    
-
-00000380 <sbrk>:
-SYSCALL(sbrk)
- 380:	b8 0c 00 00 00       	mov    $0xc,%eax
- 385:	cd 40                	int    $0x40
- 387:	c3                   	ret    
-
-00000388 <sleep>:
-SYSCALL(sleep)
- 388:	b8 0d 00 00 00       	mov    $0xd,%eax
- 38d:	cd 40                	int    $0x40
- 38f:	c3                   	ret    
-
-00000390 <uptime>:
-SYSCALL(uptime)
- 390:	b8 0e 00 00 00       	mov    $0xe,%eax
- 395:	cd 40                	int    $0x40
- 397:	c3                   	ret    
-
-00000398 <waitpid>:
-SYSCALL(waitpid)
- 398:	b8 16 00 00 00       	mov    $0x16,%eax
- 39d:	cd 40                	int    $0x40
- 39f:	c3                   	ret    
-
-000003a0 <wait_stat>:
-SYSCALL(wait_stat)
- 3a0:	b8 17 00 00 00       	mov    $0x17,%eax
- 3a5:	cd 40                	int    $0x40
- 3a7:	c3                   	ret    
-
-000003a8 <list_pgroup>:
-SYSCALL(list_pgroup)
- 3a8:	b8 18 00 00 00       	mov    $0x18,%eax
- 3ad:	cd 40                	int    $0x40
- 3af:	c3                   	ret    
-
-000003b0 <foreground>:
-SYSCALL(foreground)
- 3b0:	b8 19 00 00 00       	mov    $0x19,%eax
- 3b5:	cd 40                	int    $0x40
- 3b7:	c3                   	ret    
-
-000003b8 <set_priority>:
-SYSCALL(set_priority)
- 3b8:	b8 1a 00 00 00       	mov    $0x1a,%eax
- 3bd:	cd 40                	int    $0x40
- 3bf:	c3                   	ret    
-
-000003c0 <putc>:
-#include "stat.h"
-#include "user.h"
-
-static void
-putc(int fd, char c)
-{
- 3c0:	55                   	push   %ebp
- 3c1:	89 e5                	mov    %esp,%ebp
- 3c3:	83 ec 28             	sub    $0x28,%esp
- 3c6:	8b 45 0c             	mov    0xc(%ebp),%eax
- 3c9:	88 45 f4             	mov    %al,-0xc(%ebp)
-  write(fd, &c, 1);
- 3cc:	c7 44 24 08 01 00 00 	movl   $0x1,0x8(%esp)
- 3d3:	00 
- 3d4:	8d 45 f4             	lea    -0xc(%ebp),%eax
- 3d7:	89 44 24 04          	mov    %eax,0x4(%esp)
- 3db:	8b 45 08             	mov    0x8(%ebp),%eax
- 3de:	89 04 24             	mov    %eax,(%esp)
- 3e1:	e8 32 ff ff ff       	call   318 <write>
-}
- 3e6:	c9                   	leave  
- 3e7:	c3                   	ret    
-
-000003e8 <printint>:
-
-static void
-printint(int fd, int xx, int base, int sgn)
-{
- 3e8:	55                   	push   %ebp
- 3e9:	89 e5                	mov    %esp,%ebp
- 3eb:	83 ec 48             	sub    $0x48,%esp
-  static char digits[] = "0123456789ABCDEF";
-  char buf[16];
-  int i, neg;
-  uint x;
-
-  neg = 0;
- 3ee:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
-  if(sgn && xx < 0){
- 3f5:	83 7d 14 00          	cmpl   $0x0,0x14(%ebp)
- 3f9:	74 17                	je     412 <printint+0x2a>
- 3fb:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
- 3ff:	79 11                	jns    412 <printint+0x2a>
-    neg = 1;
- 401:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
-    x = -xx;
- 408:	8b 45 0c             	mov    0xc(%ebp),%eax
- 40b:	f7 d8                	neg    %eax
- 40d:	89 45 ec             	mov    %eax,-0x14(%ebp)
- 410:	eb 06                	jmp    418 <printint+0x30>
-  } else {
-    x = xx;
- 412:	8b 45 0c             	mov    0xc(%ebp),%eax
- 415:	89 45 ec             	mov    %eax,-0x14(%ebp)
-  }
-
-  i = 0;
- 418:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
-  do{
-    buf[i++] = digits[x % base];
- 41f:	8b 4d 10             	mov    0x10(%ebp),%ecx
- 422:	8b 45 ec             	mov    -0x14(%ebp),%eax
- 425:	ba 00 00 00 00       	mov    $0x0,%edx
- 42a:	f7 f1                	div    %ecx
- 42c:	89 d0                	mov    %edx,%eax
- 42e:	0f b6 90 cc 0a 00 00 	movzbl 0xacc(%eax),%edx
- 435:	8d 45 dc             	lea    -0x24(%ebp),%eax
- 438:	03 45 f4             	add    -0xc(%ebp),%eax
- 43b:	88 10                	mov    %dl,(%eax)
- 43d:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
-  }while((x /= base) != 0);
- 441:	8b 55 10             	mov    0x10(%ebp),%edx
- 444:	89 55 d4             	mov    %edx,-0x2c(%ebp)
- 447:	8b 45 ec             	mov    -0x14(%ebp),%eax
- 44a:	ba 00 00 00 00       	mov    $0x0,%edx
- 44f:	f7 75 d4             	divl   -0x2c(%ebp)
- 452:	89 45 ec             	mov    %eax,-0x14(%ebp)
- 455:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
- 459:	75 c4                	jne    41f <printint+0x37>
-  if(neg)
- 45b:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
- 45f:	74 2a                	je     48b <printint+0xa3>
-    buf[i++] = '-';
- 461:	8d 45 dc             	lea    -0x24(%ebp),%eax
- 464:	03 45 f4             	add    -0xc(%ebp),%eax
- 467:	c6 00 2d             	movb   $0x2d,(%eax)
- 46a:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
-
-  while(--i >= 0)
- 46e:	eb 1b                	jmp    48b <printint+0xa3>
-    putc(fd, buf[i]);
- 470:	8d 45 dc             	lea    -0x24(%ebp),%eax
- 473:	03 45 f4             	add    -0xc(%ebp),%eax
- 476:	0f b6 00             	movzbl (%eax),%eax
- 479:	0f be c0             	movsbl %al,%eax
- 47c:	89 44 24 04          	mov    %eax,0x4(%esp)
- 480:	8b 45 08             	mov    0x8(%ebp),%eax
- 483:	89 04 24             	mov    %eax,(%esp)
- 486:	e8 35 ff ff ff       	call   3c0 <putc>
-    buf[i++] = digits[x % base];
-  }while((x /= base) != 0);
-  if(neg)
-    buf[i++] = '-';
-
-  while(--i >= 0)
- 48b:	83 6d f4 01          	subl   $0x1,-0xc(%ebp)
- 48f:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
- 493:	79 db                	jns    470 <printint+0x88>
-    putc(fd, buf[i]);
-}
- 495:	c9                   	leave  
- 496:	c3                   	ret    
-
-00000497 <printf>:
-
-// Print to the given fd. Only understands %d, %x, %p, %s.
-void
-printf(int fd, char *fmt, ...)
-{
- 497:	55                   	push   %ebp
- 498:	89 e5                	mov    %esp,%ebp
- 49a:	83 ec 38             	sub    $0x38,%esp
-  char *s;
-  int c, i, state;
-  uint *ap;
-
-  state = 0;
- 49d:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
-  ap = (uint*)(void*)&fmt + 1;
- 4a4:	8d 45 0c             	lea    0xc(%ebp),%eax
- 4a7:	83 c0 04             	add    $0x4,%eax
- 4aa:	89 45 e8             	mov    %eax,-0x18(%ebp)
-  for(i = 0; fmt[i]; i++){
- 4ad:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
- 4b4:	e9 7d 01 00 00       	jmp    636 <printf+0x19f>
-    c = fmt[i] & 0xff;
- 4b9:	8b 55 0c             	mov    0xc(%ebp),%edx
- 4bc:	8b 45 f0             	mov    -0x10(%ebp),%eax
- 4bf:	01 d0                	add    %edx,%eax
- 4c1:	0f b6 00             	movzbl (%eax),%eax
- 4c4:	0f be c0             	movsbl %al,%eax
- 4c7:	25 ff 00 00 00       	and    $0xff,%eax
- 4cc:	89 45 e4             	mov    %eax,-0x1c(%ebp)
-    if(state == 0){
- 4cf:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
- 4d3:	75 2c                	jne    501 <printf+0x6a>
-      if(c == '%'){
- 4d5:	83 7d e4 25          	cmpl   $0x25,-0x1c(%ebp)
- 4d9:	75 0c                	jne    4e7 <printf+0x50>
-        state = '%';
- 4db:	c7 45 ec 25 00 00 00 	movl   $0x25,-0x14(%ebp)
- 4e2:	e9 4b 01 00 00       	jmp    632 <printf+0x19b>
-      } else {
-        putc(fd, c);
- 4e7:	8b 45 e4             	mov    -0x1c(%ebp),%eax
- 4ea:	0f be c0             	movsbl %al,%eax
- 4ed:	89 44 24 04          	mov    %eax,0x4(%esp)
- 4f1:	8b 45 08             	mov    0x8(%ebp),%eax
- 4f4:	89 04 24             	mov    %eax,(%esp)
- 4f7:	e8 c4 fe ff ff       	call   3c0 <putc>
- 4fc:	e9 31 01 00 00       	jmp    632 <printf+0x19b>
-      }
-    } else if(state == '%'){
- 501:	83 7d ec 25          	cmpl   $0x25,-0x14(%ebp)
- 505:	0f 85 27 01 00 00    	jne    632 <printf+0x19b>
-      if(c == 'd'){
- 50b:	83 7d e4 64          	cmpl   $0x64,-0x1c(%ebp)
- 50f:	75 2d                	jne    53e <printf+0xa7>
-        printint(fd, *ap, 10, 1);
- 511:	8b 45 e8             	mov    -0x18(%ebp),%eax
- 514:	8b 00                	mov    (%eax),%eax
- 516:	c7 44 24 0c 01 00 00 	movl   $0x1,0xc(%esp)
- 51d:	00 
- 51e:	c7 44 24 08 0a 00 00 	movl   $0xa,0x8(%esp)
- 525:	00 
- 526:	89 44 24 04          	mov    %eax,0x4(%esp)
- 52a:	8b 45 08             	mov    0x8(%ebp),%eax
- 52d:	89 04 24             	mov    %eax,(%esp)
- 530:	e8 b3 fe ff ff       	call   3e8 <printint>
-        ap++;
- 535:	83 45 e8 04          	addl   $0x4,-0x18(%ebp)
- 539:	e9 ed 00 00 00       	jmp    62b <printf+0x194>
-      } else if(c == 'x' || c == 'p'){
- 53e:	83 7d e4 78          	cmpl   $0x78,-0x1c(%ebp)
- 542:	74 06                	je     54a <printf+0xb3>
- 544:	83 7d e4 70          	cmpl   $0x70,-0x1c(%ebp)
- 548:	75 2d                	jne    577 <printf+0xe0>
-        printint(fd, *ap, 16, 0);
- 54a:	8b 45 e8             	mov    -0x18(%ebp),%eax
- 54d:	8b 00                	mov    (%eax),%eax
- 54f:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
- 556:	00 
- 557:	c7 44 24 08 10 00 00 	movl   $0x10,0x8(%esp)
- 55e:	00 
- 55f:	89 44 24 04          	mov    %eax,0x4(%esp)
- 563:	8b 45 08             	mov    0x8(%ebp),%eax
- 566:	89 04 24             	mov    %eax,(%esp)
- 569:	e8 7a fe ff ff       	call   3e8 <printint>
-        ap++;
- 56e:	83 45 e8 04          	addl   $0x4,-0x18(%ebp)
- 572:	e9 b4 00 00 00       	jmp    62b <printf+0x194>
-      } else if(c == 's'){
- 577:	83 7d e4 73          	cmpl   $0x73,-0x1c(%ebp)
- 57b:	75 46                	jne    5c3 <printf+0x12c>
-        s = (char*)*ap;
- 57d:	8b 45 e8             	mov    -0x18(%ebp),%eax
- 580:	8b 00                	mov    (%eax),%eax
- 582:	89 45 f4             	mov    %eax,-0xc(%ebp)
-        ap++;
- 585:	83 45 e8 04          	addl   $0x4,-0x18(%ebp)
-        if(s == 0)
- 589:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
- 58d:	75 27                	jne    5b6 <printf+0x11f>
-          s = "(null)";
- 58f:	c7 45 f4 88 08 00 00 	movl   $0x888,-0xc(%ebp)
-        while(*s != 0){
- 596:	eb 1e                	jmp    5b6 <printf+0x11f>
-          putc(fd, *s);
- 598:	8b 45 f4             	mov    -0xc(%ebp),%eax
- 59b:	0f b6 00             	movzbl (%eax),%eax
- 59e:	0f be c0             	movsbl %al,%eax
- 5a1:	89 44 24 04          	mov    %eax,0x4(%esp)
- 5a5:	8b 45 08             	mov    0x8(%ebp),%eax
- 5a8:	89 04 24             	mov    %eax,(%esp)
- 5ab:	e8 10 fe ff ff       	call   3c0 <putc>
-          s++;
- 5b0:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
- 5b4:	eb 01                	jmp    5b7 <printf+0x120>
-      } else if(c == 's'){
-        s = (char*)*ap;
-        ap++;
-        if(s == 0)
-          s = "(null)";
-        while(*s != 0){
- 5b6:	90                   	nop
- 5b7:	8b 45 f4             	mov    -0xc(%ebp),%eax
- 5ba:	0f b6 00             	movzbl (%eax),%eax
- 5bd:	84 c0                	test   %al,%al
- 5bf:	75 d7                	jne    598 <printf+0x101>
- 5c1:	eb 68                	jmp    62b <printf+0x194>
-          putc(fd, *s);
-          s++;
-        }
-      } else if(c == 'c'){
- 5c3:	83 7d e4 63          	cmpl   $0x63,-0x1c(%ebp)
- 5c7:	75 1d                	jne    5e6 <printf+0x14f>
-        putc(fd, *ap);
- 5c9:	8b 45 e8             	mov    -0x18(%ebp),%eax
- 5cc:	8b 00                	mov    (%eax),%eax
- 5ce:	0f be c0             	movsbl %al,%eax
- 5d1:	89 44 24 04          	mov    %eax,0x4(%esp)
- 5d5:	8b 45 08             	mov    0x8(%ebp),%eax
- 5d8:	89 04 24             	mov    %eax,(%esp)
- 5db:	e8 e0 fd ff ff       	call   3c0 <putc>
-        ap++;
- 5e0:	83 45 e8 04          	addl   $0x4,-0x18(%ebp)
- 5e4:	eb 45                	jmp    62b <printf+0x194>
-      } else if(c == '%'){
- 5e6:	83 7d e4 25          	cmpl   $0x25,-0x1c(%ebp)
- 5ea:	75 17                	jne    603 <printf+0x16c>
-        putc(fd, c);
- 5ec:	8b 45 e4             	mov    -0x1c(%ebp),%eax
- 5ef:	0f be c0             	movsbl %al,%eax
- 5f2:	89 44 24 04          	mov    %eax,0x4(%esp)
- 5f6:	8b 45 08             	mov    0x8(%ebp),%eax
- 5f9:	89 04 24             	mov    %eax,(%esp)
- 5fc:	e8 bf fd ff ff       	call   3c0 <putc>
- 601:	eb 28                	jmp    62b <printf+0x194>
-      } else {
-        // Unknown % sequence.  Print it to draw attention.
-        putc(fd, '%');
- 603:	c7 44 24 04 25 00 00 	movl   $0x25,0x4(%esp)
- 60a:	00 
- 60b:	8b 45 08             	mov    0x8(%ebp),%eax
- 60e:	89 04 24             	mov    %eax,(%esp)
- 611:	e8 aa fd ff ff       	call   3c0 <putc>
-        putc(fd, c);
- 616:	8b 45 e4             	mov    -0x1c(%ebp),%eax
- 619:	0f be c0             	movsbl %al,%eax
- 61c:	89 44 24 04          	mov    %eax,0x4(%esp)
- 620:	8b 45 08             	mov    0x8(%ebp),%eax
- 623:	89 04 24             	mov    %eax,(%esp)
- 626:	e8 95 fd ff ff       	call   3c0 <putc>
-      }
-      state = 0;
- 62b:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
-  int c, i, state;
-  uint *ap;
-
-  state = 0;
-  ap = (uint*)(void*)&fmt + 1;
-  for(i = 0; fmt[i]; i++){
- 632:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)
- 636:	8b 55 0c             	mov    0xc(%ebp),%edx
- 639:	8b 45 f0             	mov    -0x10(%ebp),%eax
- 63c:	01 d0                	add    %edx,%eax
- 63e:	0f b6 00             	movzbl (%eax),%eax
- 641:	84 c0                	test   %al,%al
- 643:	0f 85 70 fe ff ff    	jne    4b9 <printf+0x22>
-        putc(fd, c);
-      }
-      state = 0;
-    }
-  }
-}
- 649:	c9                   	leave  
- 64a:	c3                   	ret    
- 64b:	90                   	nop
-
-0000064c <free>:
-static Header base;
-static Header *freep;
-
-void
-free(void *ap)
-{
- 64c:	55                   	push   %ebp
- 64d:	89 e5                	mov    %esp,%ebp
- 64f:	83 ec 10             	sub    $0x10,%esp
-  Header *bp, *p;
-
-  bp = (Header*)ap - 1;
- 652:	8b 45 08             	mov    0x8(%ebp),%eax
- 655:	83 e8 08             	sub    $0x8,%eax
- 658:	89 45 f8             	mov    %eax,-0x8(%ebp)
-  for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
- 65b:	a1 e8 0a 00 00       	mov    0xae8,%eax
- 660:	89 45 fc             	mov    %eax,-0x4(%ebp)
- 663:	eb 24                	jmp    689 <free+0x3d>
-    if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
- 665:	8b 45 fc             	mov    -0x4(%ebp),%eax
- 668:	8b 00                	mov    (%eax),%eax
- 66a:	3b 45 fc             	cmp    -0x4(%ebp),%eax
- 66d:	77 12                	ja     681 <free+0x35>
- 66f:	8b 45 f8             	mov    -0x8(%ebp),%eax
- 672:	3b 45 fc             	cmp    -0x4(%ebp),%eax
- 675:	77 24                	ja     69b <free+0x4f>
- 677:	8b 45 fc             	mov    -0x4(%ebp),%eax
- 67a:	8b 00                	mov    (%eax),%eax
- 67c:	3b 45 f8             	cmp    -0x8(%ebp),%eax
- 67f:	77 1a                	ja     69b <free+0x4f>
-free(void *ap)
-{
-  Header *bp, *p;
-
-  bp = (Header*)ap - 1;
-  for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
- 681:	8b 45 fc             	mov    -0x4(%ebp),%eax
- 684:	8b 00                	mov    (%eax),%eax
- 686:	89 45 fc             	mov    %eax,-0x4(%ebp)
- 689:	8b 45 f8             	mov    -0x8(%ebp),%eax
- 68c:	3b 45 fc             	cmp    -0x4(%ebp),%eax
- 68f:	76 d4                	jbe    665 <free+0x19>
- 691:	8b 45 fc             	mov    -0x4(%ebp),%eax
- 694:	8b 00                	mov    (%eax),%eax
- 696:	3b 45 f8             	cmp    -0x8(%ebp),%eax
- 699:	76 ca                	jbe    665 <free+0x19>
-    if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
-      break;
-  if(bp + bp->s.size == p->s.ptr){
- 69b:	8b 45 f8             	mov    -0x8(%ebp),%eax
- 69e:	8b 40 04             	mov    0x4(%eax),%eax
- 6a1:	c1 e0 03             	shl    $0x3,%eax
- 6a4:	89 c2                	mov    %eax,%edx
- 6a6:	03 55 f8             	add    -0x8(%ebp),%edx
- 6a9:	8b 45 fc             	mov    -0x4(%ebp),%eax
- 6ac:	8b 00                	mov    (%eax),%eax
- 6ae:	39 c2                	cmp    %eax,%edx
- 6b0:	75 24                	jne    6d6 <free+0x8a>
-    bp->s.size += p->s.ptr->s.size;
- 6b2:	8b 45 f8             	mov    -0x8(%ebp),%eax
- 6b5:	8b 50 04             	mov    0x4(%eax),%edx
- 6b8:	8b 45 fc             	mov    -0x4(%ebp),%eax
- 6bb:	8b 00                	mov    (%eax),%eax
- 6bd:	8b 40 04             	mov    0x4(%eax),%eax
- 6c0:	01 c2                	add    %eax,%edx
- 6c2:	8b 45 f8             	mov    -0x8(%ebp),%eax
- 6c5:	89 50 04             	mov    %edx,0x4(%eax)
-    bp->s.ptr = p->s.ptr->s.ptr;
- 6c8:	8b 45 fc             	mov    -0x4(%ebp),%eax
- 6cb:	8b 00                	mov    (%eax),%eax
- 6cd:	8b 10                	mov    (%eax),%edx
- 6cf:	8b 45 f8             	mov    -0x8(%ebp),%eax
- 6d2:	89 10                	mov    %edx,(%eax)
- 6d4:	eb 0a                	jmp    6e0 <free+0x94>
-  } else
-    bp->s.ptr = p->s.ptr;
- 6d6:	8b 45 fc             	mov    -0x4(%ebp),%eax
- 6d9:	8b 10                	mov    (%eax),%edx
- 6db:	8b 45 f8             	mov    -0x8(%ebp),%eax
- 6de:	89 10                	mov    %edx,(%eax)
-  if(p + p->s.size == bp){
- 6e0:	8b 45 fc             	mov    -0x4(%ebp),%eax
- 6e3:	8b 40 04             	mov    0x4(%eax),%eax
- 6e6:	c1 e0 03             	shl    $0x3,%eax
- 6e9:	03 45 fc             	add    -0x4(%ebp),%eax
- 6ec:	3b 45 f8             	cmp    -0x8(%ebp),%eax
- 6ef:	75 20                	jne    711 <free+0xc5>
-    p->s.size += bp->s.size;
- 6f1:	8b 45 fc             	mov    -0x4(%ebp),%eax
- 6f4:	8b 50 04             	mov    0x4(%eax),%edx
- 6f7:	8b 45 f8             	mov    -0x8(%ebp),%eax
- 6fa:	8b 40 04             	mov    0x4(%eax),%eax
- 6fd:	01 c2                	add    %eax,%edx
- 6ff:	8b 45 fc             	mov    -0x4(%ebp),%eax
- 702:	89 50 04             	mov    %edx,0x4(%eax)
-    p->s.ptr = bp->s.ptr;
- 705:	8b 45 f8             	mov    -0x8(%ebp),%eax
- 708:	8b 10                	mov    (%eax),%edx
- 70a:	8b 45 fc             	mov    -0x4(%ebp),%eax
- 70d:	89 10                	mov    %edx,(%eax)
- 70f:	eb 08                	jmp    719 <free+0xcd>
-  } else
-    p->s.ptr = bp;
- 711:	8b 45 fc             	mov    -0x4(%ebp),%eax
- 714:	8b 55 f8             	mov    -0x8(%ebp),%edx
- 717:	89 10                	mov    %edx,(%eax)
-  freep = p;
- 719:	8b 45 fc             	mov    -0x4(%ebp),%eax
- 71c:	a3 e8 0a 00 00       	mov    %eax,0xae8
-}
- 721:	c9                   	leave  
- 722:	c3                   	ret    
-
-00000723 <morecore>:
-
-static Header*
-morecore(uint nu)
-{
- 723:	55                   	push   %ebp
- 724:	89 e5                	mov    %esp,%ebp
- 726:	83 ec 28             	sub    $0x28,%esp
-  char *p;
-  Header *hp;
-
-  if(nu < 4096)
- 729:	81 7d 08 ff 0f 00 00 	cmpl   $0xfff,0x8(%ebp)
- 730:	77 07                	ja     739 <morecore+0x16>
-    nu = 4096;
- 732:	c7 45 08 00 10 00 00 	movl   $0x1000,0x8(%ebp)
-  p = sbrk(nu * sizeof(Header));
- 739:	8b 45 08             	mov    0x8(%ebp),%eax
- 73c:	c1 e0 03             	shl    $0x3,%eax
- 73f:	89 04 24             	mov    %eax,(%esp)
- 742:	e8 39 fc ff ff       	call   380 <sbrk>
- 747:	89 45 f4             	mov    %eax,-0xc(%ebp)
-  if(p == (char*)-1)
- 74a:	83 7d f4 ff          	cmpl   $0xffffffff,-0xc(%ebp)
- 74e:	75 07                	jne    757 <morecore+0x34>
-    return 0;
- 750:	b8 00 00 00 00       	mov    $0x0,%eax
- 755:	eb 22                	jmp    779 <morecore+0x56>
-  hp = (Header*)p;
- 757:	8b 45 f4             	mov    -0xc(%ebp),%eax
- 75a:	89 45 f0             	mov    %eax,-0x10(%ebp)
-  hp->s.size = nu;
- 75d:	8b 45 f0             	mov    -0x10(%ebp),%eax
- 760:	8b 55 08             	mov    0x8(%ebp),%edx
- 763:	89 50 04             	mov    %edx,0x4(%eax)
-  free((void*)(hp + 1));
- 766:	8b 45 f0             	mov    -0x10(%ebp),%eax
- 769:	83 c0 08             	add    $0x8,%eax
- 76c:	89 04 24             	mov    %eax,(%esp)
- 76f:	e8 d8 fe ff ff       	call   64c <free>
-  return freep;
- 774:	a1 e8 0a 00 00       	mov    0xae8,%eax
-}
- 779:	c9                   	leave  
- 77a:	c3                   	ret    
-
-0000077b <malloc>:
-
-void*
-malloc(uint nbytes)
-{
- 77b:	55                   	push   %ebp
- 77c:	89 e5                	mov    %esp,%ebp
- 77e:	83 ec 28             	sub    $0x28,%esp
-  Header *p, *prevp;
-  uint nunits;
-
-  nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;
- 781:	8b 45 08             	mov    0x8(%ebp),%eax
- 784:	83 c0 07             	add    $0x7,%eax
- 787:	c1 e8 03             	shr    $0x3,%eax
- 78a:	83 c0 01             	add    $0x1,%eax
- 78d:	89 45 ec             	mov    %eax,-0x14(%ebp)
-  if((prevp = freep) == 0){
- 790:	a1 e8 0a 00 00       	mov    0xae8,%eax
- 795:	89 45 f0             	mov    %eax,-0x10(%ebp)
- 798:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
- 79c:	75 23                	jne    7c1 <malloc+0x46>
-    base.s.ptr = freep = prevp = &base;
- 79e:	c7 45 f0 e0 0a 00 00 	movl   $0xae0,-0x10(%ebp)
- 7a5:	8b 45 f0             	mov    -0x10(%ebp),%eax
- 7a8:	a3 e8 0a 00 00       	mov    %eax,0xae8
- 7ad:	a1 e8 0a 00 00       	mov    0xae8,%eax
- 7b2:	a3 e0 0a 00 00       	mov    %eax,0xae0
-    base.s.size = 0;
- 7b7:	c7 05 e4 0a 00 00 00 	movl   $0x0,0xae4
- 7be:	00 00 00 
-  }
-  for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
- 7c1:	8b 45 f0             	mov    -0x10(%ebp),%eax
- 7c4:	8b 00                	mov    (%eax),%eax
- 7c6:	89 45 f4             	mov    %eax,-0xc(%ebp)
-    if(p->s.size >= nunits){
- 7c9:	8b 45 f4             	mov    -0xc(%ebp),%eax
- 7cc:	8b 40 04             	mov    0x4(%eax),%eax
- 7cf:	3b 45 ec             	cmp    -0x14(%ebp),%eax
- 7d2:	72 4d                	jb     821 <malloc+0xa6>
-      if(p->s.size == nunits)
- 7d4:	8b 45 f4             	mov    -0xc(%ebp),%eax
- 7d7:	8b 40 04             	mov    0x4(%eax),%eax
- 7da:	3b 45 ec             	cmp    -0x14(%ebp),%eax
- 7dd:	75 0c                	jne    7eb <malloc+0x70>
-        prevp->s.ptr = p->s.ptr;
- 7df:	8b 45 f4             	mov    -0xc(%ebp),%eax
- 7e2:	8b 10                	mov    (%eax),%edx
- 7e4:	8b 45 f0             	mov    -0x10(%ebp),%eax
- 7e7:	89 10                	mov    %edx,(%eax)
- 7e9:	eb 26                	jmp    811 <malloc+0x96>
-      else {
-        p->s.size -= nunits;
- 7eb:	8b 45 f4             	mov    -0xc(%ebp),%eax
- 7ee:	8b 40 04             	mov    0x4(%eax),%eax
- 7f1:	89 c2                	mov    %eax,%edx
- 7f3:	2b 55 ec             	sub    -0x14(%ebp),%edx
- 7f6:	8b 45 f4             	mov    -0xc(%ebp),%eax
- 7f9:	89 50 04             	mov    %edx,0x4(%eax)
-        p += p->s.size;
- 7fc:	8b 45 f4             	mov    -0xc(%ebp),%eax
- 7ff:	8b 40 04             	mov    0x4(%eax),%eax
- 802:	c1 e0 03             	shl    $0x3,%eax
- 805:	01 45 f4             	add    %eax,-0xc(%ebp)
-        p->s.size = nunits;
- 808:	8b 45 f4             	mov    -0xc(%ebp),%eax
- 80b:	8b 55 ec             	mov    -0x14(%ebp),%edx
- 80e:	89 50 04             	mov    %edx,0x4(%eax)
-      }
-      freep = prevp;
- 811:	8b 45 f0             	mov    -0x10(%ebp),%eax
- 814:	a3 e8 0a 00 00       	mov    %eax,0xae8
-      return (void*)(p + 1);
- 819:	8b 45 f4             	mov    -0xc(%ebp),%eax
- 81c:	83 c0 08             	add    $0x8,%eax
- 81f:	eb 38                	jmp    859 <malloc+0xde>
-    }
-    if(p == freep)
- 821:	a1 e8 0a 00 00       	mov    0xae8,%eax
- 826:	39 45 f4             	cmp    %eax,-0xc(%ebp)
- 829:	75 1b                	jne    846 <malloc+0xcb>
-      if((p = morecore(nunits)) == 0)
- 82b:	8b 45 ec             	mov    -0x14(%ebp),%eax
- 82e:	89 04 24             	mov    %eax,(%esp)
- 831:	e8 ed fe ff ff       	call   723 <morecore>
- 836:	89 45 f4             	mov    %eax,-0xc(%ebp)
- 839:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
- 83d:	75 07                	jne    846 <malloc+0xcb>
-        return 0;
- 83f:	b8 00 00 00 00       	mov    $0x0,%eax
- 844:	eb 13                	jmp    859 <malloc+0xde>
-  nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;
-  if((prevp = freep) == 0){
-    base.s.ptr = freep = prevp = &base;
-    base.s.size = 0;
-  }
-  for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
- 846:	8b 45 f4             	mov    -0xc(%ebp),%eax
- 849:	89 45 f0             	mov    %eax,-0x10(%ebp)
- 84c:	8b 45 f4             	mov    -0xc(%ebp),%eax
- 84f:	8b 00                	mov    (%eax),%eax
- 851:	89 45 f4             	mov    %eax,-0xc(%ebp)
-      return (void*)(p + 1);
-    }
-    if(p == freep)
-      if((p = morecore(nunits)) == 0)
-        return 0;
-  }
- 854:	e9 70 ff ff ff       	jmp    7c9 <malloc+0x4e>
-}
- 859:	c9                   	leave  
- 85a:	c3                   	ret    
diff --git a/xv6/rm.c b/xv6/rm.c
deleted file mode 100644
index 2bdc752..0000000
--- a/xv6/rm.c
+++ /dev/null
@@ -1,23 +0,0 @@
-#include "types.h"
-#include "stat.h"
-#include "user.h"
-
-int
-main(int argc, char *argv[])
-{
-  int i;
-
-  if(argc < 2){
-    printf(2, "Usage: rm files...\n");
-    exit(EXIT_STATUS_DEFAULT);
-  }
-
-  for(i = 1; i < argc; i++){
-    if(unlink(argv[i]) < 0){
-      printf(2, "rm: %s failed to delete\n", argv[i]);
-      break;
-    }
-  }
-
-  exit(EXIT_STATUS_DEFAULT);
-}
diff --git a/xv6/rm.d b/xv6/rm.d
deleted file mode 100644
index 63d2045..0000000
--- a/xv6/rm.d
+++ /dev/null
@@ -1 +0,0 @@
-rm.o: rm.c types.h stat.h user.h
diff --git a/xv6/rm.sym b/xv6/rm.sym
deleted file mode 100644
index ad7c8b8..0000000
--- a/xv6/rm.sym
+++ /dev/null
@@ -1,65 +0,0 @@
-00000000 .text
-0000085b .rodata
-00000890 .eh_frame
-00000acc .data
-00000ae0 .bss
-00000000 .comment
-00000000 .debug_aranges
-00000000 .debug_info
-00000000 .debug_abbrev
-00000000 .debug_line
-00000000 .debug_str
-00000000 .debug_loc
-00000000 rm.c
-00000000 ulib.c
-00000094 stosb
-00000000 printf.c
-000003c0 putc
-000003e8 printint
-00000acc digits.923
-00000000 umalloc.c
-00000ae0 base
-00000ae8 freep
-00000723 morecore
-000000b9 strcpy
-00000398 waitpid
-00000497 printf
-000002b2 memmove
-00000340 mknod
-000003b0 foreground
-000001aa gets
-00000378 getpid
-0000077b malloc
-00000388 sleep
-000003b8 set_priority
-000003a0 wait_stat
-00000308 pipe
-00000318 write
-00000350 fstat
-00000328 kill
-00000368 chdir
-00000330 exec
-00000300 wait
-00000310 read
-00000348 unlink
-000002f0 fork
-00000380 sbrk
-00000390 uptime
-00000ae0 __bss_start
-00000153 memset
-00000000 main
-000000ed strcmp
-00000370 dup
-000003a8 list_pgroup
-00000219 stat
-00000ae0 _edata
-00000aec _end
-00000358 link
-000002f8 exit
-00000267 atoi
-0000012e strlen
-00000338 open
-00000177 strchr
-00000360 mkdir
-00000320 close
-0000064c free
diff --git a/xv6/runoff b/xv6/runoff
deleted file mode 100755
index 26593af..0000000
--- a/xv6/runoff
+++ /dev/null
@@ -1,243 +0,0 @@
-#!/bin/sh
-
-echo This script takes a minute to run.  Be patient. 1>&2
-
-LC_CTYPE=C export LC_CTYPE
-
-# pad stdin to multiple of 120 lines
-pad()
-{
-	awk '{print} END{for(; NR%120!=0; NR++) print ""}'
-}
-
-# create formatted (numbered) files
-mkdir -p fmt
-rm -f fmt/*
-cp README fmt
-files=`grep -v '^#' runoff.list | awk '{print $1}'`
-n=99
-for i in $files
-do
-	./runoff1 -n $n $i >fmt/$i
-	nn=`tail -1 fmt/$i | sed 's/ .*//; s/^0*//'`
-	if [ "x$nn" != x ]; then
-		n=$nn
-	fi
-done
-
-# create table of contents
-cat toc.hdr >fmt/toc
-pr -e8 -t runoff.list | awk '
-/^[a-z0-9]/ {
-	s=$0
-	f="fmt/"$1
-	getline<f
-	close(f)
-	n=$1
-	printf("%02d %s\n", n/100, s);
-	printf("TOC: %04d %s\n", n, s) >"fmt/tocdata"
-	next
-}
-{
-	print
-}' | pr -3 -t >>fmt/toc
-cat toc.ftr >>fmt/toc
-
-# check for bad alignments
-perl -e '
-	$leftwarn = 0;
-	while(<>){
-		chomp;
-		s!#.*!!;
-		s!\s+! !g;
-		s! +$!!;
-		next if /^$/;
-		
-		if(/TOC: (\d+) (.*)/){
-			$toc{$2} = $1;
-			next;
-		}
-		
-		if(/sheet1: (left|right)$/){
-			print STDERR "assuming that sheet 1 is a $1 page.  double-check!\n";
-			$left = $1 eq "left" ? "13579" : "02468";
-			$right = $1 eq "left" ? "02468" : "13579";
-			next;
-		}
-		
-		if(/even: (.*)/){
-			$file = $1;
-			if(!defined($toc{$file})){
-				print STDERR "Have no toc for $file\n";
-				next;
-			}
-			if($toc{$file} =~ /^\d\d[^0]/){
-				print STDERR "$file does not start on a fresh page.\n";
-			}
-			next;
-		}
-		
-		if(/odd: (.*)/){
-			$file = $1;
-			if(!defined($toc{$file})){
-				print STDERR "Have no toc for $file\n";
-				next;
-			}
-			if($toc{$file} !~ /^\d\d5/){
-				print STDERR "$file does not start on a second half page.\n";
-			}
-			next;
-		}
-		
-		if(/(left|right): (.*)/){
-			$what = $1;
-			$file = $2;
-			if(!defined($toc{$file})){
-				print STDERR "Have no toc for $file\n";
-				next;
-			}
-			if($what eq "left" && !($toc{$file} =~ /^\d[$left][05]/)){
-				print STDERR "$file does not start on a left page [$toc{$file}]\n";
-			}
-			# why does this not work if I inline $x in the if?
-			$x = ($toc{$file} =~ /^\d[$right][05]/);
-			if($what eq "right" && !$x){
-				print STDERR "$file does not start on a right page [$toc{$file}] [$x]\n";
-			}
-			next;
-		}
-		
-		print STDERR "Unknown spec: $_\n";
-	}
-' fmt/tocdata runoff.spec
-
-# make definition list
-cd fmt
-perl -e '
-	while(<>) {
-		chomp;
-
-		s!//.*!!;
-		s!/\*([^*]|[*][^/])*\*/!!g;
-		s!\s! !g;
-		s! +$!!;
-
-		# look for declarations like char* x;
-		if (/^[0-9]+ typedef .* u(int|short|long|char);/) {
-			next;
-		}
-		if (/^[0-9]+ extern/) {
-			next;
-		}
-		if (/^[0-9]+ struct [a-zA-Z0-9_]+;/) {
-			next;
-		}
-		if (/^([0-9]+) #define +([A-za-z0-9_]+) +?\(.*/) {
-			print "$1 $2\n"
-		}
-		elsif (/^([0-9]+) #define +([A-Za-z0-9_]+) +([^ ]+)/) {
-			print "$1 $2 $3\n";
-		}
-		elsif (/^([0-9]+) #define +([A-Za-z0-9_]+)/) {
-			print "$1 $2\n";
-		}
-		
-		if(/^^([0-9]+) \.globl ([a-zA-Z0-9_]+)/){
-			$isglobl{$2} = 1;
-		}
-		if(/^^([0-9]+) ([a-zA-Z0-9_]+):$/ && $isglobl{$2}){
-			print "$1 $2\n";
-		}
-		
-		if (/\(/) {
-			next;
-		}
-
-		if (/^([0-9]+) (((static|struct|extern|union|enum) +)*([A-Za-z0-9_]+))( .*)? +([A-Za-z_][A-Za-z0-9_]*)(,|;|=| =)/) {
-			print "$1 $7\n";
-		}
-		
-		elsif(/^([0-9]+) (enum|struct|union) +([A-Za-z0-9_]+) +{/){ 
-			print "$1 $3\n";
-		}
-		# TODO: enum members
-	}
-' $files >defs
-
-(for i in $files
-do
-	case "$i" in
-	*.S)
-		cat $i | sed 's;#.*;;; s;//.*;;;'
-		;;
-	*)
-		cat $i | sed 's;//.*;;; s;"([^"\\]|\\.)*";;;'
-	esac
-done
-) >alltext
-
-perl -n -e 'print if s/^([0-9]+ [a-zA-Z0-9_]+)\(.*$/\1/;' alltext |
-	egrep -v ' (STUB|usage|main|if|for)$' >>defs
-#perl -n -e 'print if s/^([0-9]+) STUB\(([a-zA-Z0-9_]+)\)$/\1 \2/;' alltext \
-#	>>defs
-(
->s.defs
-
-# make reference list
-for i in `awk '{print $2}' defs | sort -f | uniq`
-do
-	defs=`egrep '^[0-9]+ '$i'( |$)' defs | awk '{print $1}'`
-	echo $i $defs >>s.defs
-	uses=`egrep -h '([^a-zA-Z_0-9])'$i'($|[^a-zA-Z_0-9])' alltext | awk '{print $1}'`
-	if [ "x$defs" != "x$uses" ]; then
-		echo $i $defs
-		echo $uses |fmt -29 | sed 's/^/    /'
-#	else
-#		echo $i defined but not used >&2
-	fi
-done
-) >refs
-
-# build defs list
-awk '
-{
-	printf("%04d %s\n", $2, $1);
-	for(i=3; i<=NF; i++)
-		printf("%04d    \" \n", $i);
-}
-' s.defs > t.defs
-
-# format the whole thing
-(
-	../pr.pl README
-	../pr.pl -h "table of contents" toc
-	# pr -t -2 t.defs | ../pr.pl -h "definitions" | pad
-	pr -t -l50 -2 refs | ../pr.pl -h "cross-references" | pad
-	# pr.pl -h "definitions" -2 t.defs | pad
-	# pr.pl -h "cross-references" -2 refs | pad 
-	for i in $files
-	do
-		../pr.pl -h "xv6/$i" $i
-	done
-) | mpage -m50t50b -o -bLetter -T -t -2 -FCourier -L60 >all.ps
-grep Pages: all.ps
-
-# if we have the nice font, use it
-nicefont=LucidaSans-Typewriter83
-if [ ! -f ../$nicefont ]
-then
-	if git cat-file blob font:$nicefont > ../$nicefont~; then
-		mv ../$nicefont~ ../$nicefont
-	fi
-fi
-if [ -f ../$nicefont ]
-then
-	echo nicefont
-	(sed 1q all.ps; cat ../$nicefont; sed "1d; s/Courier/$nicefont/" all.ps) >allf.ps
-else
-	echo ugly font!
-	cp all.ps allf.ps
-fi
-ps2pdf allf.ps ../xv6.pdf
-# cd ..
-# pdftops xv6.pdf xv6.ps
diff --git a/xv6/runoff.list b/xv6/runoff.list
deleted file mode 100644
index 73d39f7..0000000
--- a/xv6/runoff.list
+++ /dev/null
@@ -1,77 +0,0 @@
-# basic headers
-types.h
-param.h
-memlayout.h
-defs.h
-x86.h
-asm.h
-mmu.h
-elf.h
-
-# entering xv6
-entry.S
-entryother.S
-main.c
-
-# locks
-spinlock.h
-spinlock.c
-
-# processes
-vm.c
-proc.h
-proc.c
-swtch.S
-kalloc.c
-
-# system calls
-traps.h
-vectors.pl
-trapasm.S
-trap.c
-syscall.h
-syscall.c
-sysproc.c
-
-# file system
-buf.h
-fcntl.h
-stat.h
-fs.h
-file.h
-ide.c
-bio.c
-log.c
-fs.c
-file.c
-sysfile.c
-exec.c
-
-# pipes
-pipe.c
-
-# string operations
-string.c
-
-# low-level hardware
-mp.h
-mp.c
-lapic.c
-ioapic.c
-picirq.c
-kbd.h
-kbd.c
-console.c
-timer.c
-uart.c
-
-# user-level
-initcode.S
-usys.S
-init.c
-sh.c
-
-# bootloader
-bootasm.S
-bootmain.c
-
diff --git a/xv6/runoff.spec b/xv6/runoff.spec
deleted file mode 100644
index 9247948..0000000
--- a/xv6/runoff.spec
+++ /dev/null
@@ -1,102 +0,0 @@
-# Is sheet 01 (after the TOC) a left sheet or a right sheet?
-sheet1: left
-
-# "left" and "right" specify which page of a two-page spread a file
-# must start on.  "left" means that a file must start on the first of
-# the two pages.  "right" means it must start on the second of the two
-# pages.  The file may start in either column.
-#
-# "even" and "odd" specify which column a file must start on.  "even"
-# means it must start in the left of the two columns (00).  "odd" means it
-# must start in the right of the two columns (50).
-#
-# You'd think these would be the other way around.
-
-# types.h either
-# param.h either
-# defs.h either
-# x86.h either
-# asm.h either
-# mmu.h either
-# elf.h either
-# mp.h either
-
-even: entry.S  # mild preference
-even: entryother.S  # mild preference
-even: main.c
-# mp.c don't care at all
-# even: initcode.S
-# odd: init.c
-
-left: spinlock.h
-even: spinlock.h
-
-# This gets struct proc and allocproc on the same spread
-left: proc.h
-even: proc.h
-
-# goal is to have two action-packed 2-page spreads,
-# one with
-#     userinit growproc fork exit wait
-# and another with
-#     scheduler sched yield forkret sleep wakeup1 wakeup
-right: proc.c   # VERY important
-even: proc.c   # VERY important
-
-# A few more action packed spreads
-# page table creation and process loading
-#     walkpgdir mappages setupkvm switch[ku]vm inituvm (loaduvm)
-# process memory management
-#     allocuvm deallocuvm freevm
-left: vm.c
-
-even: kalloc.c  # mild preference
-
-# syscall.h either
-# trapasm.S either
-# traps.h either
-# even: trap.c
-# vectors.pl either
-# syscall.c either
-# sysproc.c either
-
-# buf.h either
-# dev.h either
-# fcntl.h either
-# stat.h either
-# file.h either
-# fs.h either
-# fsvar.h either
-# left: ide.c # mild preference
-even: ide.c
-# odd: bio.c
-
-# log.c fits nicely in a spread
-even: log.c
-left: log.c
-
-# with fs.c starting on 2nd column of a left page, we get these 2-page spreads:
-#	ialloc iupdate iget idup ilock iunlock iput iunlockput
-#	bmap itrunc stati readi writei
-#	namecmp dirlookup dirlink skipelem namex namei
-#	fileinit filealloc filedup fileclose filestat fileread filewrite
-# starting on 2nd column of a right page is not terrible either
-odd: fs.c   # VERY important
-left: fs.c  # mild preference
-# file.c either
-# exec.c either
-# sysfile.c either
-
-# Mild preference, but makes spreads of mp.c, lapic.c, and ioapic.c+picirq.c
-even: mp.c
-left: mp.c
-
-# even: pipe.c  # mild preference
-# string.c either
-# left: kbd.h  # mild preference
-even: kbd.h
-even: console.c
-odd: sh.c
-
-even: bootasm.S   # mild preference
-even: bootmain.c  # mild preference
diff --git a/xv6/runoff1 b/xv6/runoff1
deleted file mode 100755
index 532f844..0000000
--- a/xv6/runoff1
+++ /dev/null
@@ -1,108 +0,0 @@
-#!/usr/bin/perl
-
-$n = 0;
-$v = 0;
-if($ARGV[0] eq "-v") {
-	$v = 1;
-	shift @ARGV;
-}
-if($ARGV[0] eq "-n") {
-	$n = $ARGV[1];
-	shift @ARGV;
-	shift @ARGV;
-}
-$n = int(($n+49)/50)*50 - 1;
-
-$file = $ARGV[0];
-@lines = <>;
-$linenum = 0;
-foreach (@lines) {
-	$linenum++;
-	chomp;
-	s/\s+$//;
-	if(length() >= 75){
-		print STDERR "$file:$linenum: line too long\n";
-	}
-}
-@outlines = ();
-$nextout = 0;
-
-for($i=0; $i<@lines; ){
-	# Skip leading blank lines.
-	$i++ while $i<@lines && $lines[$i] =~ /^$/;
-	last if $i>=@lines;
-
-	# If the rest of the file fits, use the whole thing.
-	if(@lines <= $i+50 && !grep { /PAGEBREAK/ } @lines){
-		$breakbefore = @lines;
-	}else{
-		# Find a good next page break;
-		# Hope for end of function.
-		# but settle for a blank line (but not first blank line
-		# in function, which comes after variable declarations).
-		$breakbefore = $i;
-		$lastblank = $i;
-		$sawbrace = 0;
-		$breaksize = 15;  # 15 lines to get to function
-		for($j=$i; $j<$i+50 && $j < @lines; $j++){
-			if($lines[$j] =~ /PAGEBREAK!/){
-				$lines[$j] = "";
-				$breakbefore = $j;
-				$breaksize = 100;
-				last;
-			}
-			if($lines[$j] =~ /PAGEBREAK:\s*([0-9]+)/){
-				$breaksize = $1;
-				$breakbefore = $j;
-				$lines[$j] = "";
-			}
-			if($lines[$j] =~ /^};?$/){
-				$breakbefore = $j+1;
-				$breaksize = 15;
-			}
-			if($lines[$j] =~ /^{$/){
-				$sawbrace = 1;
-			}
-			if($lines[$j] =~ /^$/){
-				if($sawbrace){
-					$sawbrace = 0;
-				}else{
-					$lastblank = $j;
-				}
-			}
-		}
-		if($j<@lines && $lines[$j] =~ /^$/){
-			$lastblank = $j;
-		}
-
-		# If we are not putting enough on a page, try a blank line.
-		if($breakbefore - $i < 50 - $breaksize && $lastblank > $breakbefore && $lastblank >= $i+50 - 5){
-			if($v){
-				print STDERR "breakbefore $breakbefore i $i breaksize $breaksize\n";
-			}
-			$breakbefore = $lastblank;
-			$breaksize = 5;  # only 5 lines to get to blank line
-		}
-
-		# If we are not putting enough on a page, force a full page.
-		if($breakbefore - $i < 50 - $breaksize && $breakbefore != @lines){
-			$breakbefore = $i + 50;
-			$breakbefore = @lines if @lines < $breakbefore;
-		}
-
-		if($breakbefore < $i+2){
-			$breakbefore = $i+2;
-		}
-	}
-
-	# Emit the page.
-	$i50 = $i + 50;
-	for(; $i<$breakbefore; $i++){
-		printf "%04d %s\n", ++$n, $lines[$i];
-	}
-
-	# Finish page
-	for($j=$i; $j<$i50; $j++){
-		printf "%04d \n", ++$n;
-	}
-}
diff --git a/xv6/sanity.asm b/xv6/sanity.asm
deleted file mode 100644
index 9dae8b5..0000000
--- a/xv6/sanity.asm
+++ /dev/null
@@ -1,1470 +0,0 @@
-
-_sanity:     file format elf32-i386
-
-
-Disassembly of section .text:
-
-00000000 <getTheNPrimeNumber>:
-#define NUM_OF_CHLIDREN 20
-#define CALC_SIZE		3000	//8000 is 1min for 1 proc in Ami's laptop
-
-
-long getTheNPrimeNumber(int n)
-{
-   0:	55                   	push   %ebp
-   1:	89 e5                	mov    %esp,%ebp
-   3:	83 ec 10             	sub    $0x10,%esp
-	long i=2;
-   6:	c7 45 fc 02 00 00 00 	movl   $0x2,-0x4(%ebp)
-	long j;
-	int isPrime = 1;
-   d:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
-
-	for (;;) {
-		for (j = 2; j < i && isPrime; ++j) {
-  14:	c7 45 f8 02 00 00 00 	movl   $0x2,-0x8(%ebp)
-  1b:	eb 1e                	jmp    3b <getTheNPrimeNumber+0x3b>
-			if (i%j == 0){
-  1d:	8b 45 fc             	mov    -0x4(%ebp),%eax
-  20:	89 c2                	mov    %eax,%edx
-  22:	c1 fa 1f             	sar    $0x1f,%edx
-  25:	f7 7d f8             	idivl  -0x8(%ebp)
-  28:	89 d0                	mov    %edx,%eax
-  2a:	85 c0                	test   %eax,%eax
-  2c:	75 09                	jne    37 <getTheNPrimeNumber+0x37>
-				isPrime = 0;
-  2e:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
-				break;
-  35:	eb 12                	jmp    49 <getTheNPrimeNumber+0x49>
-	long i=2;
-	long j;
-	int isPrime = 1;
-
-	for (;;) {
-		for (j = 2; j < i && isPrime; ++j) {
-  37:	83 45 f8 01          	addl   $0x1,-0x8(%ebp)
-  3b:	8b 45 f8             	mov    -0x8(%ebp),%eax
-  3e:	3b 45 fc             	cmp    -0x4(%ebp),%eax
-  41:	7d 06                	jge    49 <getTheNPrimeNumber+0x49>
-  43:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
-  47:	75 d4                	jne    1d <getTheNPrimeNumber+0x1d>
-			if (i%j == 0){
-				isPrime = 0;
-				break;
-			}
-		}
-		if (isPrime && ((n--)==1))	return i;
-  49:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
-  4d:	74 14                	je     63 <getTheNPrimeNumber+0x63>
-  4f:	83 7d 08 01          	cmpl   $0x1,0x8(%ebp)
-  53:	0f 94 c0             	sete   %al
-  56:	83 6d 08 01          	subl   $0x1,0x8(%ebp)
-  5a:	84 c0                	test   %al,%al
-  5c:	74 05                	je     63 <getTheNPrimeNumber+0x63>
-  5e:	8b 45 fc             	mov    -0x4(%ebp),%eax
-		i++;
-		isPrime=1;
-	}
-}
-  61:	c9                   	leave  
-  62:	c3                   	ret    
-				isPrime = 0;
-				break;
-			}
-		}
-		if (isPrime && ((n--)==1))	return i;
-		i++;
-  63:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
-		isPrime=1;
-  67:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
-	}
-  6e:	eb a4                	jmp    14 <getTheNPrimeNumber+0x14>
-
-00000070 <main>:
-}
-
-int
-main(int argc, char *argv[])
-{
-  70:	55                   	push   %ebp
-  71:	89 e5                	mov    %esp,%ebp
-  73:	53                   	push   %ebx
-  74:	83 e4 f0             	and    $0xfffffff0,%esp
-  77:	81 ec 90 00 00 00    	sub    $0x90,%esp
-	int i, pid, status;
-	int wtime, rtime, iotime;
-	int presence[NUM_OF_CHLIDREN];
-
-	set_priority(PRIORITY_HIGH);
-  7d:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
-  84:	e8 8f 05 00 00       	call   618 <set_priority>
-	memset(presence,0,NUM_OF_CHLIDREN);
-  89:	c7 44 24 08 14 00 00 	movl   $0x14,0x8(%esp)
-  90:	00 
-  91:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
-  98:	00 
-  99:	8d 44 24 28          	lea    0x28(%esp),%eax
-  9d:	89 04 24             	mov    %eax,(%esp)
-  a0:	e8 0e 03 00 00       	call   3b3 <memset>
-
-	printf(1, "NUM_OF_CHLIDREN=%d CALC_SIZE=%d\n",NUM_OF_CHLIDREN, CALC_SIZE);
-  a5:	c7 44 24 0c b8 0b 00 	movl   $0xbb8,0xc(%esp)
-  ac:	00 
-  ad:	c7 44 24 08 14 00 00 	movl   $0x14,0x8(%esp)
-  b4:	00 
-  b5:	c7 44 24 04 bc 0a 00 	movl   $0xabc,0x4(%esp)
-  bc:	00 
-  bd:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
-  c4:	e8 2e 06 00 00       	call   6f7 <printf>
-
-
-	for (i = 0; i < NUM_OF_CHLIDREN; ++i) {
-  c9:	c7 84 24 8c 00 00 00 	movl   $0x0,0x8c(%esp)
-  d0:	00 00 00 00 
-  d4:	e9 ae 00 00 00       	jmp    187 <main+0x117>
-		if ((pid = fork()) > 0){	//parent
-  d9:	e8 72 04 00 00       	call   550 <fork>
-  de:	89 84 24 88 00 00 00 	mov    %eax,0x88(%esp)
-  e5:	83 bc 24 88 00 00 00 	cmpl   $0x0,0x88(%esp)
-  ec:	00 
-  ed:	7e 29                	jle    118 <main+0xa8>
-			printf(1, "(fork:%d)",pid);
-  ef:	8b 84 24 88 00 00 00 	mov    0x88(%esp),%eax
-  f6:	89 44 24 08          	mov    %eax,0x8(%esp)
-  fa:	c7 44 24 04 dd 0a 00 	movl   $0xadd,0x4(%esp)
- 101:	00 
- 102:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
- 109:	e8 e9 05 00 00       	call   6f7 <printf>
-	memset(presence,0,NUM_OF_CHLIDREN);
-
-	printf(1, "NUM_OF_CHLIDREN=%d CALC_SIZE=%d\n",NUM_OF_CHLIDREN, CALC_SIZE);
-
-
-	for (i = 0; i < NUM_OF_CHLIDREN; ++i) {
- 10e:	83 84 24 8c 00 00 00 	addl   $0x1,0x8c(%esp)
- 115:	01 
- 116:	eb 6f                	jmp    187 <main+0x117>
-		if ((pid = fork()) > 0){	//parent
-			printf(1, "(fork:%d)",pid);
-		}
-		else if (pid == 0){	//child
- 118:	83 bc 24 88 00 00 00 	cmpl   $0x0,0x88(%esp)
- 11f:	00 
- 120:	75 45                	jne    167 <main+0xf7>
-			set_priority((i%3)+1);
- 122:	8b 8c 24 8c 00 00 00 	mov    0x8c(%esp),%ecx
- 129:	ba 56 55 55 55       	mov    $0x55555556,%edx
- 12e:	89 c8                	mov    %ecx,%eax
- 130:	f7 ea                	imul   %edx
- 132:	89 c8                	mov    %ecx,%eax
- 134:	c1 f8 1f             	sar    $0x1f,%eax
- 137:	29 c2                	sub    %eax,%edx
- 139:	89 d0                	mov    %edx,%eax
- 13b:	01 c0                	add    %eax,%eax
- 13d:	01 d0                	add    %edx,%eax
- 13f:	89 ca                	mov    %ecx,%edx
- 141:	29 c2                	sub    %eax,%edx
- 143:	8d 42 01             	lea    0x1(%edx),%eax
- 146:	89 04 24             	mov    %eax,(%esp)
- 149:	e8 ca 04 00 00       	call   618 <set_priority>
-			getTheNPrimeNumber(CALC_SIZE);
- 14e:	c7 04 24 b8 0b 00 00 	movl   $0xbb8,(%esp)
- 155:	e8 a6 fe ff ff       	call   0 <getTheNPrimeNumber>
-			exit(getpid());
- 15a:	e8 79 04 00 00       	call   5d8 <getpid>
- 15f:	89 04 24             	mov    %eax,(%esp)
- 162:	e8 f1 03 00 00       	call   558 <exit>
-		}
-		else{
-			printf(1, "\nERROR: Fork failed\n");
- 167:	c7 44 24 04 e7 0a 00 	movl   $0xae7,0x4(%esp)
- 16e:	00 
- 16f:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
- 176:	e8 7c 05 00 00       	call   6f7 <printf>
-			exit(EXIT_STATUS_FAILURE);
- 17b:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
- 182:	e8 d1 03 00 00       	call   558 <exit>
-	memset(presence,0,NUM_OF_CHLIDREN);
-
-	printf(1, "NUM_OF_CHLIDREN=%d CALC_SIZE=%d\n",NUM_OF_CHLIDREN, CALC_SIZE);
-
-
-	for (i = 0; i < NUM_OF_CHLIDREN; ++i) {
- 187:	83 bc 24 8c 00 00 00 	cmpl   $0x13,0x8c(%esp)
- 18e:	13 
- 18f:	0f 8e 44 ff ff ff    	jle    d9 <main+0x69>
-		else{
-			printf(1, "\nERROR: Fork failed\n");
-			exit(EXIT_STATUS_FAILURE);
-		}
-	}
-	printf(1,"\n");
- 195:	c7 44 24 04 fc 0a 00 	movl   $0xafc,0x4(%esp)
- 19c:	00 
- 19d:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
- 1a4:	e8 4e 05 00 00       	call   6f7 <printf>
-
-	for (i = 0; i < NUM_OF_CHLIDREN; ++i){
- 1a9:	c7 84 24 8c 00 00 00 	movl   $0x0,0x8c(%esp)
- 1b0:	00 00 00 00 
- 1b4:	e9 bf 00 00 00       	jmp    278 <main+0x208>
-		//status returned should be pid
-		pid = wait_stat(&wtime,&rtime,&iotime,&status);
- 1b9:	8d 84 24 84 00 00 00 	lea    0x84(%esp),%eax
- 1c0:	89 44 24 0c          	mov    %eax,0xc(%esp)
- 1c4:	8d 44 24 78          	lea    0x78(%esp),%eax
- 1c8:	89 44 24 08          	mov    %eax,0x8(%esp)
- 1cc:	8d 44 24 7c          	lea    0x7c(%esp),%eax
- 1d0:	89 44 24 04          	mov    %eax,0x4(%esp)
- 1d4:	8d 84 24 80 00 00 00 	lea    0x80(%esp),%eax
- 1db:	89 04 24             	mov    %eax,(%esp)
- 1de:	e8 1d 04 00 00       	call   600 <wait_stat>
- 1e3:	89 84 24 88 00 00 00 	mov    %eax,0x88(%esp)
-		if (pid<0){
- 1ea:	83 bc 24 88 00 00 00 	cmpl   $0x0,0x88(%esp)
- 1f1:	00 
- 1f2:	79 20                	jns    214 <main+0x1a4>
-			printf(1, "\nERROR: Not enought waits.\n");
- 1f4:	c7 44 24 04 fe 0a 00 	movl   $0xafe,0x4(%esp)
- 1fb:	00 
- 1fc:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
- 203:	e8 ef 04 00 00       	call   6f7 <printf>
-			exit(EXIT_STATUS_FAILURE);
- 208:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
- 20f:	e8 44 03 00 00       	call   558 <exit>
-		}
-		printf(1,"Done(%d): waiting (RUNNABLE): %d | running: %d | turnaround : %d\n",
-				status, wtime, rtime, wtime+rtime+iotime);
- 214:	8b 94 24 80 00 00 00 	mov    0x80(%esp),%edx
- 21b:	8b 44 24 7c          	mov    0x7c(%esp),%eax
- 21f:	01 c2                	add    %eax,%edx
-		pid = wait_stat(&wtime,&rtime,&iotime,&status);
-		if (pid<0){
-			printf(1, "\nERROR: Not enought waits.\n");
-			exit(EXIT_STATUS_FAILURE);
-		}
-		printf(1,"Done(%d): waiting (RUNNABLE): %d | running: %d | turnaround : %d\n",
- 221:	8b 44 24 78          	mov    0x78(%esp),%eax
- 225:	8d 1c 02             	lea    (%edx,%eax,1),%ebx
- 228:	8b 4c 24 7c          	mov    0x7c(%esp),%ecx
- 22c:	8b 94 24 80 00 00 00 	mov    0x80(%esp),%edx
- 233:	8b 84 24 84 00 00 00 	mov    0x84(%esp),%eax
- 23a:	89 5c 24 14          	mov    %ebx,0x14(%esp)
- 23e:	89 4c 24 10          	mov    %ecx,0x10(%esp)
- 242:	89 54 24 0c          	mov    %edx,0xc(%esp)
- 246:	89 44 24 08          	mov    %eax,0x8(%esp)
- 24a:	c7 44 24 04 1c 0b 00 	movl   $0xb1c,0x4(%esp)
- 251:	00 
- 252:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
- 259:	e8 99 04 00 00       	call   6f7 <printf>
-				status, wtime, rtime, wtime+rtime+iotime);
-		presence[i] = status;
- 25e:	8b 94 24 84 00 00 00 	mov    0x84(%esp),%edx
- 265:	8b 84 24 8c 00 00 00 	mov    0x8c(%esp),%eax
- 26c:	89 54 84 28          	mov    %edx,0x28(%esp,%eax,4)
-			exit(EXIT_STATUS_FAILURE);
-		}
-	}
-	printf(1,"\n");
-
-	for (i = 0; i < NUM_OF_CHLIDREN; ++i){
- 270:	83 84 24 8c 00 00 00 	addl   $0x1,0x8c(%esp)
- 277:	01 
- 278:	83 bc 24 8c 00 00 00 	cmpl   $0x13,0x8c(%esp)
- 27f:	13 
- 280:	0f 8e 33 ff ff ff    	jle    1b9 <main+0x149>
-		printf(1,"Done(%d): waiting (RUNNABLE): %d | running: %d | turnaround : %d\n",
-				status, wtime, rtime, wtime+rtime+iotime);
-		presence[i] = status;
-	}
-
-	for (i = 0; i < NUM_OF_CHLIDREN; ++i){
- 286:	c7 84 24 8c 00 00 00 	movl   $0x0,0x8c(%esp)
- 28d:	00 00 00 00 
- 291:	eb 37                	jmp    2ca <main+0x25a>
-		if(!presence[i]){
- 293:	8b 84 24 8c 00 00 00 	mov    0x8c(%esp),%eax
- 29a:	8b 44 84 28          	mov    0x28(%esp,%eax,4),%eax
- 29e:	85 c0                	test   %eax,%eax
- 2a0:	75 20                	jne    2c2 <main+0x252>
-			printf(1, "\nERROR: Not enough waits.\n");
- 2a2:	c7 44 24 04 5e 0b 00 	movl   $0xb5e,0x4(%esp)
- 2a9:	00 
- 2aa:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
- 2b1:	e8 41 04 00 00       	call   6f7 <printf>
-			exit(EXIT_STATUS_FAILURE);
- 2b6:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
- 2bd:	e8 96 02 00 00       	call   558 <exit>
-		printf(1,"Done(%d): waiting (RUNNABLE): %d | running: %d | turnaround : %d\n",
-				status, wtime, rtime, wtime+rtime+iotime);
-		presence[i] = status;
-	}
-
-	for (i = 0; i < NUM_OF_CHLIDREN; ++i){
- 2c2:	83 84 24 8c 00 00 00 	addl   $0x1,0x8c(%esp)
- 2c9:	01 
- 2ca:	83 bc 24 8c 00 00 00 	cmpl   $0x13,0x8c(%esp)
- 2d1:	13 
- 2d2:	7e bf                	jle    293 <main+0x223>
-		if(!presence[i]){
-			printf(1, "\nERROR: Not enough waits.\n");
-			exit(EXIT_STATUS_FAILURE);
-		}
-	}
-	printf(1, "Success: Great Success!.\n");
- 2d4:	c7 44 24 04 79 0b 00 	movl   $0xb79,0x4(%esp)
- 2db:	00 
- 2dc:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
- 2e3:	e8 0f 04 00 00       	call   6f7 <printf>
-	exit(EXIT_STATUS_SUCCESS);
- 2e8:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
- 2ef:	e8 64 02 00 00       	call   558 <exit>
-
-000002f4 <stosb>:
-               "cc");
-}
-
-static inline void
-stosb(void *addr, int data, int cnt)
-{
- 2f4:	55                   	push   %ebp
- 2f5:	89 e5                	mov    %esp,%ebp
- 2f7:	57                   	push   %edi
- 2f8:	53                   	push   %ebx
-  asm volatile("cld; rep stosb" :
- 2f9:	8b 4d 08             	mov    0x8(%ebp),%ecx
- 2fc:	8b 55 10             	mov    0x10(%ebp),%edx
- 2ff:	8b 45 0c             	mov    0xc(%ebp),%eax
- 302:	89 cb                	mov    %ecx,%ebx
- 304:	89 df                	mov    %ebx,%edi
- 306:	89 d1                	mov    %edx,%ecx
- 308:	fc                   	cld    
- 309:	f3 aa                	rep stos %al,%es:(%edi)
- 30b:	89 ca                	mov    %ecx,%edx
- 30d:	89 fb                	mov    %edi,%ebx
- 30f:	89 5d 08             	mov    %ebx,0x8(%ebp)
- 312:	89 55 10             	mov    %edx,0x10(%ebp)
-               "=D" (addr), "=c" (cnt) :
-               "0" (addr), "1" (cnt), "a" (data) :
-               "memory", "cc");
-}
- 315:	5b                   	pop    %ebx
- 316:	5f                   	pop    %edi
- 317:	5d                   	pop    %ebp
- 318:	c3                   	ret    
-
-00000319 <strcpy>:
-#include "user.h"
-#include "x86.h"
-
-char*
-strcpy(char *s, char *t)
-{
- 319:	55                   	push   %ebp
- 31a:	89 e5                	mov    %esp,%ebp
- 31c:	83 ec 10             	sub    $0x10,%esp
-  char *os;
-
-  os = s;
- 31f:	8b 45 08             	mov    0x8(%ebp),%eax
- 322:	89 45 fc             	mov    %eax,-0x4(%ebp)
-  while((*s++ = *t++) != 0)
- 325:	90                   	nop
- 326:	8b 45 0c             	mov    0xc(%ebp),%eax
- 329:	0f b6 10             	movzbl (%eax),%edx
- 32c:	8b 45 08             	mov    0x8(%ebp),%eax
- 32f:	88 10                	mov    %dl,(%eax)
- 331:	8b 45 08             	mov    0x8(%ebp),%eax
- 334:	0f b6 00             	movzbl (%eax),%eax
- 337:	84 c0                	test   %al,%al
- 339:	0f 95 c0             	setne  %al
- 33c:	83 45 08 01          	addl   $0x1,0x8(%ebp)
- 340:	83 45 0c 01          	addl   $0x1,0xc(%ebp)
- 344:	84 c0                	test   %al,%al
- 346:	75 de                	jne    326 <strcpy+0xd>
-    ;
-  return os;
- 348:	8b 45 fc             	mov    -0x4(%ebp),%eax
-}
- 34b:	c9                   	leave  
- 34c:	c3                   	ret    
-
-0000034d <strcmp>:
-
-int
-strcmp(const char *p, const char *q)
-{
- 34d:	55                   	push   %ebp
- 34e:	89 e5                	mov    %esp,%ebp
-  while(*p && *p == *q)
- 350:	eb 08                	jmp    35a <strcmp+0xd>
-    p++, q++;
- 352:	83 45 08 01          	addl   $0x1,0x8(%ebp)
- 356:	83 45 0c 01          	addl   $0x1,0xc(%ebp)
-}
-
-int
-strcmp(const char *p, const char *q)
-{
-  while(*p && *p == *q)
- 35a:	8b 45 08             	mov    0x8(%ebp),%eax
- 35d:	0f b6 00             	movzbl (%eax),%eax
- 360:	84 c0                	test   %al,%al
- 362:	74 10                	je     374 <strcmp+0x27>
- 364:	8b 45 08             	mov    0x8(%ebp),%eax
- 367:	0f b6 10             	movzbl (%eax),%edx
- 36a:	8b 45 0c             	mov    0xc(%ebp),%eax
- 36d:	0f b6 00             	movzbl (%eax),%eax
- 370:	38 c2                	cmp    %al,%dl
- 372:	74 de                	je     352 <strcmp+0x5>
-    p++, q++;
-  return (uchar)*p - (uchar)*q;
- 374:	8b 45 08             	mov    0x8(%ebp),%eax
- 377:	0f b6 00             	movzbl (%eax),%eax
- 37a:	0f b6 d0             	movzbl %al,%edx
- 37d:	8b 45 0c             	mov    0xc(%ebp),%eax
- 380:	0f b6 00             	movzbl (%eax),%eax
- 383:	0f b6 c0             	movzbl %al,%eax
- 386:	89 d1                	mov    %edx,%ecx
- 388:	29 c1                	sub    %eax,%ecx
- 38a:	89 c8                	mov    %ecx,%eax
-}
- 38c:	5d                   	pop    %ebp
- 38d:	c3                   	ret    
-
-0000038e <strlen>:
-
-uint
-strlen(char *s)
-{
- 38e:	55                   	push   %ebp
- 38f:	89 e5                	mov    %esp,%ebp
- 391:	83 ec 10             	sub    $0x10,%esp
-  int n;
-
-  for(n = 0; s[n]; n++)
- 394:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
- 39b:	eb 04                	jmp    3a1 <strlen+0x13>
- 39d:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
- 3a1:	8b 45 fc             	mov    -0x4(%ebp),%eax
- 3a4:	03 45 08             	add    0x8(%ebp),%eax
- 3a7:	0f b6 00             	movzbl (%eax),%eax
- 3aa:	84 c0                	test   %al,%al
- 3ac:	75 ef                	jne    39d <strlen+0xf>
-    ;
-  return n;
- 3ae:	8b 45 fc             	mov    -0x4(%ebp),%eax
-}
- 3b1:	c9                   	leave  
- 3b2:	c3                   	ret    
-
-000003b3 <memset>:
-
-void*
-memset(void *dst, int c, uint n)
-{
- 3b3:	55                   	push   %ebp
- 3b4:	89 e5                	mov    %esp,%ebp
- 3b6:	83 ec 0c             	sub    $0xc,%esp
-  stosb(dst, c, n);
- 3b9:	8b 45 10             	mov    0x10(%ebp),%eax
- 3bc:	89 44 24 08          	mov    %eax,0x8(%esp)
- 3c0:	8b 45 0c             	mov    0xc(%ebp),%eax
- 3c3:	89 44 24 04          	mov    %eax,0x4(%esp)
- 3c7:	8b 45 08             	mov    0x8(%ebp),%eax
- 3ca:	89 04 24             	mov    %eax,(%esp)
- 3cd:	e8 22 ff ff ff       	call   2f4 <stosb>
-  return dst;
- 3d2:	8b 45 08             	mov    0x8(%ebp),%eax
-}
- 3d5:	c9                   	leave  
- 3d6:	c3                   	ret    
-
-000003d7 <strchr>:
-
-char*
-strchr(const char *s, char c)
-{
- 3d7:	55                   	push   %ebp
- 3d8:	89 e5                	mov    %esp,%ebp
- 3da:	83 ec 04             	sub    $0x4,%esp
- 3dd:	8b 45 0c             	mov    0xc(%ebp),%eax
- 3e0:	88 45 fc             	mov    %al,-0x4(%ebp)
-  for(; *s; s++)
- 3e3:	eb 14                	jmp    3f9 <strchr+0x22>
-    if(*s == c)
- 3e5:	8b 45 08             	mov    0x8(%ebp),%eax
- 3e8:	0f b6 00             	movzbl (%eax),%eax
- 3eb:	3a 45 fc             	cmp    -0x4(%ebp),%al
- 3ee:	75 05                	jne    3f5 <strchr+0x1e>
-      return (char*)s;
- 3f0:	8b 45 08             	mov    0x8(%ebp),%eax
- 3f3:	eb 13                	jmp    408 <strchr+0x31>
-}
-
-char*
-strchr(const char *s, char c)
-{
-  for(; *s; s++)
- 3f5:	83 45 08 01          	addl   $0x1,0x8(%ebp)
- 3f9:	8b 45 08             	mov    0x8(%ebp),%eax
- 3fc:	0f b6 00             	movzbl (%eax),%eax
- 3ff:	84 c0                	test   %al,%al
- 401:	75 e2                	jne    3e5 <strchr+0xe>
-    if(*s == c)
-      return (char*)s;
-  return 0;
- 403:	b8 00 00 00 00       	mov    $0x0,%eax
-}
- 408:	c9                   	leave  
- 409:	c3                   	ret    
-
-0000040a <gets>:
-
-char*
-gets(char *buf, int max)
-{
- 40a:	55                   	push   %ebp
- 40b:	89 e5                	mov    %esp,%ebp
- 40d:	83 ec 28             	sub    $0x28,%esp
-  int i, cc;
-  char c;
-
-  for(i=0; i+1 < max; ){
- 410:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
- 417:	eb 44                	jmp    45d <gets+0x53>
-    cc = read(0, &c, 1);
- 419:	c7 44 24 08 01 00 00 	movl   $0x1,0x8(%esp)
- 420:	00 
- 421:	8d 45 ef             	lea    -0x11(%ebp),%eax
- 424:	89 44 24 04          	mov    %eax,0x4(%esp)
- 428:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
- 42f:	e8 3c 01 00 00       	call   570 <read>
- 434:	89 45 f0             	mov    %eax,-0x10(%ebp)
-    if(cc < 1)
- 437:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
- 43b:	7e 2d                	jle    46a <gets+0x60>
-      break;
-    buf[i++] = c;
- 43d:	8b 45 f4             	mov    -0xc(%ebp),%eax
- 440:	03 45 08             	add    0x8(%ebp),%eax
- 443:	0f b6 55 ef          	movzbl -0x11(%ebp),%edx
- 447:	88 10                	mov    %dl,(%eax)
- 449:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
-    if(c == '\n' || c == '\r')
- 44d:	0f b6 45 ef          	movzbl -0x11(%ebp),%eax
- 451:	3c 0a                	cmp    $0xa,%al
- 453:	74 16                	je     46b <gets+0x61>
- 455:	0f b6 45 ef          	movzbl -0x11(%ebp),%eax
- 459:	3c 0d                	cmp    $0xd,%al
- 45b:	74 0e                	je     46b <gets+0x61>
-gets(char *buf, int max)
-{
-  int i, cc;
-  char c;
-
-  for(i=0; i+1 < max; ){
- 45d:	8b 45 f4             	mov    -0xc(%ebp),%eax
- 460:	83 c0 01             	add    $0x1,%eax
- 463:	3b 45 0c             	cmp    0xc(%ebp),%eax
- 466:	7c b1                	jl     419 <gets+0xf>
- 468:	eb 01                	jmp    46b <gets+0x61>
-    cc = read(0, &c, 1);
-    if(cc < 1)
-      break;
- 46a:	90                   	nop
-    buf[i++] = c;
-    if(c == '\n' || c == '\r')
-      break;
-  }
-  buf[i] = '\0';
- 46b:	8b 45 f4             	mov    -0xc(%ebp),%eax
- 46e:	03 45 08             	add    0x8(%ebp),%eax
- 471:	c6 00 00             	movb   $0x0,(%eax)
-  return buf;
- 474:	8b 45 08             	mov    0x8(%ebp),%eax
-}
- 477:	c9                   	leave  
- 478:	c3                   	ret    
-
-00000479 <stat>:
-
-int
-stat(char *n, struct stat *st)
-{
- 479:	55                   	push   %ebp
- 47a:	89 e5                	mov    %esp,%ebp
- 47c:	83 ec 28             	sub    $0x28,%esp
-  int fd;
-  int r;
-
-  fd = open(n, O_RDONLY);
- 47f:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
- 486:	00 
- 487:	8b 45 08             	mov    0x8(%ebp),%eax
- 48a:	89 04 24             	mov    %eax,(%esp)
- 48d:	e8 06 01 00 00       	call   598 <open>
- 492:	89 45 f4             	mov    %eax,-0xc(%ebp)
-  if(fd < 0)
- 495:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
- 499:	79 07                	jns    4a2 <stat+0x29>
-    return -1;
- 49b:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
- 4a0:	eb 23                	jmp    4c5 <stat+0x4c>
-  r = fstat(fd, st);
- 4a2:	8b 45 0c             	mov    0xc(%ebp),%eax
- 4a5:	89 44 24 04          	mov    %eax,0x4(%esp)
- 4a9:	8b 45 f4             	mov    -0xc(%ebp),%eax
- 4ac:	89 04 24             	mov    %eax,(%esp)
- 4af:	e8 fc 00 00 00       	call   5b0 <fstat>
- 4b4:	89 45 f0             	mov    %eax,-0x10(%ebp)
-  close(fd);
- 4b7:	8b 45 f4             	mov    -0xc(%ebp),%eax
- 4ba:	89 04 24             	mov    %eax,(%esp)
- 4bd:	e8 be 00 00 00       	call   580 <close>
-  return r;
- 4c2:	8b 45 f0             	mov    -0x10(%ebp),%eax
-}
- 4c5:	c9                   	leave  
- 4c6:	c3                   	ret    
-
-000004c7 <atoi>:
-
-int
-atoi(const char *s)
-{
- 4c7:	55                   	push   %ebp
- 4c8:	89 e5                	mov    %esp,%ebp
- 4ca:	83 ec 10             	sub    $0x10,%esp
-  int n;
-
-  n = 0;
- 4cd:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
-  while('0' <= *s && *s <= '9')
- 4d4:	eb 23                	jmp    4f9 <atoi+0x32>
-    n = n*10 + *s++ - '0';
- 4d6:	8b 55 fc             	mov    -0x4(%ebp),%edx
- 4d9:	89 d0                	mov    %edx,%eax
- 4db:	c1 e0 02             	shl    $0x2,%eax
- 4de:	01 d0                	add    %edx,%eax
- 4e0:	01 c0                	add    %eax,%eax
- 4e2:	89 c2                	mov    %eax,%edx
- 4e4:	8b 45 08             	mov    0x8(%ebp),%eax
- 4e7:	0f b6 00             	movzbl (%eax),%eax
- 4ea:	0f be c0             	movsbl %al,%eax
- 4ed:	01 d0                	add    %edx,%eax
- 4ef:	83 e8 30             	sub    $0x30,%eax
- 4f2:	89 45 fc             	mov    %eax,-0x4(%ebp)
- 4f5:	83 45 08 01          	addl   $0x1,0x8(%ebp)
-atoi(const char *s)
-{
-  int n;
-
-  n = 0;
-  while('0' <= *s && *s <= '9')
- 4f9:	8b 45 08             	mov    0x8(%ebp),%eax
- 4fc:	0f b6 00             	movzbl (%eax),%eax
- 4ff:	3c 2f                	cmp    $0x2f,%al
- 501:	7e 0a                	jle    50d <atoi+0x46>
- 503:	8b 45 08             	mov    0x8(%ebp),%eax
- 506:	0f b6 00             	movzbl (%eax),%eax
- 509:	3c 39                	cmp    $0x39,%al
- 50b:	7e c9                	jle    4d6 <atoi+0xf>
-    n = n*10 + *s++ - '0';
-  return n;
- 50d:	8b 45 fc             	mov    -0x4(%ebp),%eax
-}
- 510:	c9                   	leave  
- 511:	c3                   	ret    
-
-00000512 <memmove>:
-
-void*
-memmove(void *vdst, void *vsrc, int n)
-{
- 512:	55                   	push   %ebp
- 513:	89 e5                	mov    %esp,%ebp
- 515:	83 ec 10             	sub    $0x10,%esp
-  char *dst, *src;
-  
-  dst = vdst;
- 518:	8b 45 08             	mov    0x8(%ebp),%eax
- 51b:	89 45 fc             	mov    %eax,-0x4(%ebp)
-  src = vsrc;
- 51e:	8b 45 0c             	mov    0xc(%ebp),%eax
- 521:	89 45 f8             	mov    %eax,-0x8(%ebp)
-  while(n-- > 0)
- 524:	eb 13                	jmp    539 <memmove+0x27>
-    *dst++ = *src++;
- 526:	8b 45 f8             	mov    -0x8(%ebp),%eax
- 529:	0f b6 10             	movzbl (%eax),%edx
- 52c:	8b 45 fc             	mov    -0x4(%ebp),%eax
- 52f:	88 10                	mov    %dl,(%eax)
- 531:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
- 535:	83 45 f8 01          	addl   $0x1,-0x8(%ebp)
-{
-  char *dst, *src;
-  
-  dst = vdst;
-  src = vsrc;
-  while(n-- > 0)
- 539:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
- 53d:	0f 9f c0             	setg   %al
- 540:	83 6d 10 01          	subl   $0x1,0x10(%ebp)
- 544:	84 c0                	test   %al,%al
- 546:	75 de                	jne    526 <memmove+0x14>
-    *dst++ = *src++;
-  return vdst;
- 548:	8b 45 08             	mov    0x8(%ebp),%eax
-}
- 54b:	c9                   	leave  
- 54c:	c3                   	ret    
- 54d:	90                   	nop
- 54e:	90                   	nop
- 54f:	90                   	nop
-
-00000550 <fork>:
-  name: \
-    movl $SYS_ ## name, %eax; \
-    int $T_SYSCALL; \
-    ret
-
-SYSCALL(fork)
- 550:	b8 01 00 00 00       	mov    $0x1,%eax
- 555:	cd 40                	int    $0x40
- 557:	c3                   	ret    
-
-00000558 <exit>:
-SYSCALL(exit)
- 558:	b8 02 00 00 00       	mov    $0x2,%eax
- 55d:	cd 40                	int    $0x40
- 55f:	c3                   	ret    
-
-00000560 <wait>:
-SYSCALL(wait)
- 560:	b8 03 00 00 00       	mov    $0x3,%eax
- 565:	cd 40                	int    $0x40
- 567:	c3                   	ret    
-
-00000568 <pipe>:
-SYSCALL(pipe)
- 568:	b8 04 00 00 00       	mov    $0x4,%eax
- 56d:	cd 40                	int    $0x40
- 56f:	c3                   	ret    
-
-00000570 <read>:
-SYSCALL(read)
- 570:	b8 05 00 00 00       	mov    $0x5,%eax
- 575:	cd 40                	int    $0x40
- 577:	c3                   	ret    
-
-00000578 <write>:
-SYSCALL(write)
- 578:	b8 10 00 00 00       	mov    $0x10,%eax
- 57d:	cd 40                	int    $0x40
- 57f:	c3                   	ret    
-
-00000580 <close>:
-SYSCALL(close)
- 580:	b8 15 00 00 00       	mov    $0x15,%eax
- 585:	cd 40                	int    $0x40
- 587:	c3                   	ret    
-
-00000588 <kill>:
-SYSCALL(kill)
- 588:	b8 06 00 00 00       	mov    $0x6,%eax
- 58d:	cd 40                	int    $0x40
- 58f:	c3                   	ret    
-
-00000590 <exec>:
-SYSCALL(exec)
- 590:	b8 07 00 00 00       	mov    $0x7,%eax
- 595:	cd 40                	int    $0x40
- 597:	c3                   	ret    
-
-00000598 <open>:
-SYSCALL(open)
- 598:	b8 0f 00 00 00       	mov    $0xf,%eax
- 59d:	cd 40                	int    $0x40
- 59f:	c3                   	ret    
-
-000005a0 <mknod>:
-SYSCALL(mknod)
- 5a0:	b8 11 00 00 00       	mov    $0x11,%eax
- 5a5:	cd 40                	int    $0x40
- 5a7:	c3                   	ret    
-
-000005a8 <unlink>:
-SYSCALL(unlink)
- 5a8:	b8 12 00 00 00       	mov    $0x12,%eax
- 5ad:	cd 40                	int    $0x40
- 5af:	c3                   	ret    
-
-000005b0 <fstat>:
-SYSCALL(fstat)
- 5b0:	b8 08 00 00 00       	mov    $0x8,%eax
- 5b5:	cd 40                	int    $0x40
- 5b7:	c3                   	ret    
-
-000005b8 <link>:
-SYSCALL(link)
- 5b8:	b8 13 00 00 00       	mov    $0x13,%eax
- 5bd:	cd 40                	int    $0x40
- 5bf:	c3                   	ret    
-
-000005c0 <mkdir>:
-SYSCALL(mkdir)
- 5c0:	b8 14 00 00 00       	mov    $0x14,%eax
- 5c5:	cd 40                	int    $0x40
- 5c7:	c3                   	ret    
-
-000005c8 <chdir>:
-SYSCALL(chdir)
- 5c8:	b8 09 00 00 00       	mov    $0x9,%eax
- 5cd:	cd 40                	int    $0x40
- 5cf:	c3                   	ret    
-
-000005d0 <dup>:
-SYSCALL(dup)
- 5d0:	b8 0a 00 00 00       	mov    $0xa,%eax
- 5d5:	cd 40                	int    $0x40
- 5d7:	c3                   	ret    
-
-000005d8 <getpid>:
-SYSCALL(getpid)
- 5d8:	b8 0b 00 00 00       	mov    $0xb,%eax
- 5dd:	cd 40                	int    $0x40
- 5df:	c3                   	ret    
-
-000005e0 <sbrk>:
-SYSCALL(sbrk)
- 5e0:	b8 0c 00 00 00       	mov    $0xc,%eax
- 5e5:	cd 40                	int    $0x40
- 5e7:	c3                   	ret    
-
-000005e8 <sleep>:
-SYSCALL(sleep)
- 5e8:	b8 0d 00 00 00       	mov    $0xd,%eax
- 5ed:	cd 40                	int    $0x40
- 5ef:	c3                   	ret    
-
-000005f0 <uptime>:
-SYSCALL(uptime)
- 5f0:	b8 0e 00 00 00       	mov    $0xe,%eax
- 5f5:	cd 40                	int    $0x40
- 5f7:	c3                   	ret    
-
-000005f8 <waitpid>:
-SYSCALL(waitpid)
- 5f8:	b8 16 00 00 00       	mov    $0x16,%eax
- 5fd:	cd 40                	int    $0x40
- 5ff:	c3                   	ret    
-
-00000600 <wait_stat>:
-SYSCALL(wait_stat)
- 600:	b8 17 00 00 00       	mov    $0x17,%eax
- 605:	cd 40                	int    $0x40
- 607:	c3                   	ret    
-
-00000608 <list_pgroup>:
-SYSCALL(list_pgroup)
- 608:	b8 18 00 00 00       	mov    $0x18,%eax
- 60d:	cd 40                	int    $0x40
- 60f:	c3                   	ret    
-
-00000610 <foreground>:
-SYSCALL(foreground)
- 610:	b8 19 00 00 00       	mov    $0x19,%eax
- 615:	cd 40                	int    $0x40
- 617:	c3                   	ret    
-
-00000618 <set_priority>:
-SYSCALL(set_priority)
- 618:	b8 1a 00 00 00       	mov    $0x1a,%eax
- 61d:	cd 40                	int    $0x40
- 61f:	c3                   	ret    
-
-00000620 <putc>:
-#include "stat.h"
-#include "user.h"
-
-static void
-putc(int fd, char c)
-{
- 620:	55                   	push   %ebp
- 621:	89 e5                	mov    %esp,%ebp
- 623:	83 ec 28             	sub    $0x28,%esp
- 626:	8b 45 0c             	mov    0xc(%ebp),%eax
- 629:	88 45 f4             	mov    %al,-0xc(%ebp)
-  write(fd, &c, 1);
- 62c:	c7 44 24 08 01 00 00 	movl   $0x1,0x8(%esp)
- 633:	00 
- 634:	8d 45 f4             	lea    -0xc(%ebp),%eax
- 637:	89 44 24 04          	mov    %eax,0x4(%esp)
- 63b:	8b 45 08             	mov    0x8(%ebp),%eax
- 63e:	89 04 24             	mov    %eax,(%esp)
- 641:	e8 32 ff ff ff       	call   578 <write>
-}
- 646:	c9                   	leave  
- 647:	c3                   	ret    
-
-00000648 <printint>:
-
-static void
-printint(int fd, int xx, int base, int sgn)
-{
- 648:	55                   	push   %ebp
- 649:	89 e5                	mov    %esp,%ebp
- 64b:	83 ec 48             	sub    $0x48,%esp
-  static char digits[] = "0123456789ABCDEF";
-  char buf[16];
-  int i, neg;
-  uint x;
-
-  neg = 0;
- 64e:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
-  if(sgn && xx < 0){
- 655:	83 7d 14 00          	cmpl   $0x0,0x14(%ebp)
- 659:	74 17                	je     672 <printint+0x2a>
- 65b:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
- 65f:	79 11                	jns    672 <printint+0x2a>
-    neg = 1;
- 661:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
-    x = -xx;
- 668:	8b 45 0c             	mov    0xc(%ebp),%eax
- 66b:	f7 d8                	neg    %eax
- 66d:	89 45 ec             	mov    %eax,-0x14(%ebp)
- 670:	eb 06                	jmp    678 <printint+0x30>
-  } else {
-    x = xx;
- 672:	8b 45 0c             	mov    0xc(%ebp),%eax
- 675:	89 45 ec             	mov    %eax,-0x14(%ebp)
-  }
-
-  i = 0;
- 678:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
-  do{
-    buf[i++] = digits[x % base];
- 67f:	8b 4d 10             	mov    0x10(%ebp),%ecx
- 682:	8b 45 ec             	mov    -0x14(%ebp),%eax
- 685:	ba 00 00 00 00       	mov    $0x0,%edx
- 68a:	f7 f1                	div    %ecx
- 68c:	89 d0                	mov    %edx,%eax
- 68e:	0f b6 90 fc 0d 00 00 	movzbl 0xdfc(%eax),%edx
- 695:	8d 45 dc             	lea    -0x24(%ebp),%eax
- 698:	03 45 f4             	add    -0xc(%ebp),%eax
- 69b:	88 10                	mov    %dl,(%eax)
- 69d:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
-  }while((x /= base) != 0);
- 6a1:	8b 55 10             	mov    0x10(%ebp),%edx
- 6a4:	89 55 d4             	mov    %edx,-0x2c(%ebp)
- 6a7:	8b 45 ec             	mov    -0x14(%ebp),%eax
- 6aa:	ba 00 00 00 00       	mov    $0x0,%edx
- 6af:	f7 75 d4             	divl   -0x2c(%ebp)
- 6b2:	89 45 ec             	mov    %eax,-0x14(%ebp)
- 6b5:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
- 6b9:	75 c4                	jne    67f <printint+0x37>
-  if(neg)
- 6bb:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
- 6bf:	74 2a                	je     6eb <printint+0xa3>
-    buf[i++] = '-';
- 6c1:	8d 45 dc             	lea    -0x24(%ebp),%eax
- 6c4:	03 45 f4             	add    -0xc(%ebp),%eax
- 6c7:	c6 00 2d             	movb   $0x2d,(%eax)
- 6ca:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
-
-  while(--i >= 0)
- 6ce:	eb 1b                	jmp    6eb <printint+0xa3>
-    putc(fd, buf[i]);
- 6d0:	8d 45 dc             	lea    -0x24(%ebp),%eax
- 6d3:	03 45 f4             	add    -0xc(%ebp),%eax
- 6d6:	0f b6 00             	movzbl (%eax),%eax
- 6d9:	0f be c0             	movsbl %al,%eax
- 6dc:	89 44 24 04          	mov    %eax,0x4(%esp)
- 6e0:	8b 45 08             	mov    0x8(%ebp),%eax
- 6e3:	89 04 24             	mov    %eax,(%esp)
- 6e6:	e8 35 ff ff ff       	call   620 <putc>
-    buf[i++] = digits[x % base];
-  }while((x /= base) != 0);
-  if(neg)
-    buf[i++] = '-';
-
-  while(--i >= 0)
- 6eb:	83 6d f4 01          	subl   $0x1,-0xc(%ebp)
- 6ef:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
- 6f3:	79 db                	jns    6d0 <printint+0x88>
-    putc(fd, buf[i]);
-}
- 6f5:	c9                   	leave  
- 6f6:	c3                   	ret    
-
-000006f7 <printf>:
-
-// Print to the given fd. Only understands %d, %x, %p, %s.
-void
-printf(int fd, char *fmt, ...)
-{
- 6f7:	55                   	push   %ebp
- 6f8:	89 e5                	mov    %esp,%ebp
- 6fa:	83 ec 38             	sub    $0x38,%esp
-  char *s;
-  int c, i, state;
-  uint *ap;
-
-  state = 0;
- 6fd:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
-  ap = (uint*)(void*)&fmt + 1;
- 704:	8d 45 0c             	lea    0xc(%ebp),%eax
- 707:	83 c0 04             	add    $0x4,%eax
- 70a:	89 45 e8             	mov    %eax,-0x18(%ebp)
-  for(i = 0; fmt[i]; i++){
- 70d:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
- 714:	e9 7d 01 00 00       	jmp    896 <printf+0x19f>
-    c = fmt[i] & 0xff;
- 719:	8b 55 0c             	mov    0xc(%ebp),%edx
- 71c:	8b 45 f0             	mov    -0x10(%ebp),%eax
- 71f:	01 d0                	add    %edx,%eax
- 721:	0f b6 00             	movzbl (%eax),%eax
- 724:	0f be c0             	movsbl %al,%eax
- 727:	25 ff 00 00 00       	and    $0xff,%eax
- 72c:	89 45 e4             	mov    %eax,-0x1c(%ebp)
-    if(state == 0){
- 72f:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
- 733:	75 2c                	jne    761 <printf+0x6a>
-      if(c == '%'){
- 735:	83 7d e4 25          	cmpl   $0x25,-0x1c(%ebp)
- 739:	75 0c                	jne    747 <printf+0x50>
-        state = '%';
- 73b:	c7 45 ec 25 00 00 00 	movl   $0x25,-0x14(%ebp)
- 742:	e9 4b 01 00 00       	jmp    892 <printf+0x19b>
-      } else {
-        putc(fd, c);
- 747:	8b 45 e4             	mov    -0x1c(%ebp),%eax
- 74a:	0f be c0             	movsbl %al,%eax
- 74d:	89 44 24 04          	mov    %eax,0x4(%esp)
- 751:	8b 45 08             	mov    0x8(%ebp),%eax
- 754:	89 04 24             	mov    %eax,(%esp)
- 757:	e8 c4 fe ff ff       	call   620 <putc>
- 75c:	e9 31 01 00 00       	jmp    892 <printf+0x19b>
-      }
-    } else if(state == '%'){
- 761:	83 7d ec 25          	cmpl   $0x25,-0x14(%ebp)
- 765:	0f 85 27 01 00 00    	jne    892 <printf+0x19b>
-      if(c == 'd'){
- 76b:	83 7d e4 64          	cmpl   $0x64,-0x1c(%ebp)
- 76f:	75 2d                	jne    79e <printf+0xa7>
-        printint(fd, *ap, 10, 1);
- 771:	8b 45 e8             	mov    -0x18(%ebp),%eax
- 774:	8b 00                	mov    (%eax),%eax
- 776:	c7 44 24 0c 01 00 00 	movl   $0x1,0xc(%esp)
- 77d:	00 
- 77e:	c7 44 24 08 0a 00 00 	movl   $0xa,0x8(%esp)
- 785:	00 
- 786:	89 44 24 04          	mov    %eax,0x4(%esp)
- 78a:	8b 45 08             	mov    0x8(%ebp),%eax
- 78d:	89 04 24             	mov    %eax,(%esp)
- 790:	e8 b3 fe ff ff       	call   648 <printint>
-        ap++;
- 795:	83 45 e8 04          	addl   $0x4,-0x18(%ebp)
- 799:	e9 ed 00 00 00       	jmp    88b <printf+0x194>
-      } else if(c == 'x' || c == 'p'){
- 79e:	83 7d e4 78          	cmpl   $0x78,-0x1c(%ebp)
- 7a2:	74 06                	je     7aa <printf+0xb3>
- 7a4:	83 7d e4 70          	cmpl   $0x70,-0x1c(%ebp)
- 7a8:	75 2d                	jne    7d7 <printf+0xe0>
-        printint(fd, *ap, 16, 0);
- 7aa:	8b 45 e8             	mov    -0x18(%ebp),%eax
- 7ad:	8b 00                	mov    (%eax),%eax
- 7af:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
- 7b6:	00 
- 7b7:	c7 44 24 08 10 00 00 	movl   $0x10,0x8(%esp)
- 7be:	00 
- 7bf:	89 44 24 04          	mov    %eax,0x4(%esp)
- 7c3:	8b 45 08             	mov    0x8(%ebp),%eax
- 7c6:	89 04 24             	mov    %eax,(%esp)
- 7c9:	e8 7a fe ff ff       	call   648 <printint>
-        ap++;
- 7ce:	83 45 e8 04          	addl   $0x4,-0x18(%ebp)
- 7d2:	e9 b4 00 00 00       	jmp    88b <printf+0x194>
-      } else if(c == 's'){
- 7d7:	83 7d e4 73          	cmpl   $0x73,-0x1c(%ebp)
- 7db:	75 46                	jne    823 <printf+0x12c>
-        s = (char*)*ap;
- 7dd:	8b 45 e8             	mov    -0x18(%ebp),%eax
- 7e0:	8b 00                	mov    (%eax),%eax
- 7e2:	89 45 f4             	mov    %eax,-0xc(%ebp)
-        ap++;
- 7e5:	83 45 e8 04          	addl   $0x4,-0x18(%ebp)
-        if(s == 0)
- 7e9:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
- 7ed:	75 27                	jne    816 <printf+0x11f>
-          s = "(null)";
- 7ef:	c7 45 f4 93 0b 00 00 	movl   $0xb93,-0xc(%ebp)
-        while(*s != 0){
- 7f6:	eb 1e                	jmp    816 <printf+0x11f>
-          putc(fd, *s);
- 7f8:	8b 45 f4             	mov    -0xc(%ebp),%eax
- 7fb:	0f b6 00             	movzbl (%eax),%eax
- 7fe:	0f be c0             	movsbl %al,%eax
- 801:	89 44 24 04          	mov    %eax,0x4(%esp)
- 805:	8b 45 08             	mov    0x8(%ebp),%eax
- 808:	89 04 24             	mov    %eax,(%esp)
- 80b:	e8 10 fe ff ff       	call   620 <putc>
-          s++;
- 810:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
- 814:	eb 01                	jmp    817 <printf+0x120>
-      } else if(c == 's'){
-        s = (char*)*ap;
-        ap++;
-        if(s == 0)
-          s = "(null)";
-        while(*s != 0){
- 816:	90                   	nop
- 817:	8b 45 f4             	mov    -0xc(%ebp),%eax
- 81a:	0f b6 00             	movzbl (%eax),%eax
- 81d:	84 c0                	test   %al,%al
- 81f:	75 d7                	jne    7f8 <printf+0x101>
- 821:	eb 68                	jmp    88b <printf+0x194>
-          putc(fd, *s);
-          s++;
-        }
-      } else if(c == 'c'){
- 823:	83 7d e4 63          	cmpl   $0x63,-0x1c(%ebp)
- 827:	75 1d                	jne    846 <printf+0x14f>
-        putc(fd, *ap);
- 829:	8b 45 e8             	mov    -0x18(%ebp),%eax
- 82c:	8b 00                	mov    (%eax),%eax
- 82e:	0f be c0             	movsbl %al,%eax
- 831:	89 44 24 04          	mov    %eax,0x4(%esp)
- 835:	8b 45 08             	mov    0x8(%ebp),%eax
- 838:	89 04 24             	mov    %eax,(%esp)
- 83b:	e8 e0 fd ff ff       	call   620 <putc>
-        ap++;
- 840:	83 45 e8 04          	addl   $0x4,-0x18(%ebp)
- 844:	eb 45                	jmp    88b <printf+0x194>
-      } else if(c == '%'){
- 846:	83 7d e4 25          	cmpl   $0x25,-0x1c(%ebp)
- 84a:	75 17                	jne    863 <printf+0x16c>
-        putc(fd, c);
- 84c:	8b 45 e4             	mov    -0x1c(%ebp),%eax
- 84f:	0f be c0             	movsbl %al,%eax
- 852:	89 44 24 04          	mov    %eax,0x4(%esp)
- 856:	8b 45 08             	mov    0x8(%ebp),%eax
- 859:	89 04 24             	mov    %eax,(%esp)
- 85c:	e8 bf fd ff ff       	call   620 <putc>
- 861:	eb 28                	jmp    88b <printf+0x194>
-      } else {
-        // Unknown % sequence.  Print it to draw attention.
-        putc(fd, '%');
- 863:	c7 44 24 04 25 00 00 	movl   $0x25,0x4(%esp)
- 86a:	00 
- 86b:	8b 45 08             	mov    0x8(%ebp),%eax
- 86e:	89 04 24             	mov    %eax,(%esp)
- 871:	e8 aa fd ff ff       	call   620 <putc>
-        putc(fd, c);
- 876:	8b 45 e4             	mov    -0x1c(%ebp),%eax
- 879:	0f be c0             	movsbl %al,%eax
- 87c:	89 44 24 04          	mov    %eax,0x4(%esp)
- 880:	8b 45 08             	mov    0x8(%ebp),%eax
- 883:	89 04 24             	mov    %eax,(%esp)
- 886:	e8 95 fd ff ff       	call   620 <putc>
-      }
-      state = 0;
- 88b:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
-  int c, i, state;
-  uint *ap;
-
-  state = 0;
-  ap = (uint*)(void*)&fmt + 1;
-  for(i = 0; fmt[i]; i++){
- 892:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)
- 896:	8b 55 0c             	mov    0xc(%ebp),%edx
- 899:	8b 45 f0             	mov    -0x10(%ebp),%eax
- 89c:	01 d0                	add    %edx,%eax
- 89e:	0f b6 00             	movzbl (%eax),%eax
- 8a1:	84 c0                	test   %al,%al
- 8a3:	0f 85 70 fe ff ff    	jne    719 <printf+0x22>
-        putc(fd, c);
-      }
-      state = 0;
-    }
-  }
-}
- 8a9:	c9                   	leave  
- 8aa:	c3                   	ret    
- 8ab:	90                   	nop
-
-000008ac <free>:
-static Header base;
-static Header *freep;
-
-void
-free(void *ap)
-{
- 8ac:	55                   	push   %ebp
- 8ad:	89 e5                	mov    %esp,%ebp
- 8af:	83 ec 10             	sub    $0x10,%esp
-  Header *bp, *p;
-
-  bp = (Header*)ap - 1;
- 8b2:	8b 45 08             	mov    0x8(%ebp),%eax
- 8b5:	83 e8 08             	sub    $0x8,%eax
- 8b8:	89 45 f8             	mov    %eax,-0x8(%ebp)
-  for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
- 8bb:	a1 18 0e 00 00       	mov    0xe18,%eax
- 8c0:	89 45 fc             	mov    %eax,-0x4(%ebp)
- 8c3:	eb 24                	jmp    8e9 <free+0x3d>
-    if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
- 8c5:	8b 45 fc             	mov    -0x4(%ebp),%eax
- 8c8:	8b 00                	mov    (%eax),%eax
- 8ca:	3b 45 fc             	cmp    -0x4(%ebp),%eax
- 8cd:	77 12                	ja     8e1 <free+0x35>
- 8cf:	8b 45 f8             	mov    -0x8(%ebp),%eax
- 8d2:	3b 45 fc             	cmp    -0x4(%ebp),%eax
- 8d5:	77 24                	ja     8fb <free+0x4f>
- 8d7:	8b 45 fc             	mov    -0x4(%ebp),%eax
- 8da:	8b 00                	mov    (%eax),%eax
- 8dc:	3b 45 f8             	cmp    -0x8(%ebp),%eax
- 8df:	77 1a                	ja     8fb <free+0x4f>
-free(void *ap)
-{
-  Header *bp, *p;
-
-  bp = (Header*)ap - 1;
-  for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
- 8e1:	8b 45 fc             	mov    -0x4(%ebp),%eax
- 8e4:	8b 00                	mov    (%eax),%eax
- 8e6:	89 45 fc             	mov    %eax,-0x4(%ebp)
- 8e9:	8b 45 f8             	mov    -0x8(%ebp),%eax
- 8ec:	3b 45 fc             	cmp    -0x4(%ebp),%eax
- 8ef:	76 d4                	jbe    8c5 <free+0x19>
- 8f1:	8b 45 fc             	mov    -0x4(%ebp),%eax
- 8f4:	8b 00                	mov    (%eax),%eax
- 8f6:	3b 45 f8             	cmp    -0x8(%ebp),%eax
- 8f9:	76 ca                	jbe    8c5 <free+0x19>
-    if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
-      break;
-  if(bp + bp->s.size == p->s.ptr){
- 8fb:	8b 45 f8             	mov    -0x8(%ebp),%eax
- 8fe:	8b 40 04             	mov    0x4(%eax),%eax
- 901:	c1 e0 03             	shl    $0x3,%eax
- 904:	89 c2                	mov    %eax,%edx
- 906:	03 55 f8             	add    -0x8(%ebp),%edx
- 909:	8b 45 fc             	mov    -0x4(%ebp),%eax
- 90c:	8b 00                	mov    (%eax),%eax
- 90e:	39 c2                	cmp    %eax,%edx
- 910:	75 24                	jne    936 <free+0x8a>
-    bp->s.size += p->s.ptr->s.size;
- 912:	8b 45 f8             	mov    -0x8(%ebp),%eax
- 915:	8b 50 04             	mov    0x4(%eax),%edx
- 918:	8b 45 fc             	mov    -0x4(%ebp),%eax
- 91b:	8b 00                	mov    (%eax),%eax
- 91d:	8b 40 04             	mov    0x4(%eax),%eax
- 920:	01 c2                	add    %eax,%edx
- 922:	8b 45 f8             	mov    -0x8(%ebp),%eax
- 925:	89 50 04             	mov    %edx,0x4(%eax)
-    bp->s.ptr = p->s.ptr->s.ptr;
- 928:	8b 45 fc             	mov    -0x4(%ebp),%eax
- 92b:	8b 00                	mov    (%eax),%eax
- 92d:	8b 10                	mov    (%eax),%edx
- 92f:	8b 45 f8             	mov    -0x8(%ebp),%eax
- 932:	89 10                	mov    %edx,(%eax)
- 934:	eb 0a                	jmp    940 <free+0x94>
-  } else
-    bp->s.ptr = p->s.ptr;
- 936:	8b 45 fc             	mov    -0x4(%ebp),%eax
- 939:	8b 10                	mov    (%eax),%edx
- 93b:	8b 45 f8             	mov    -0x8(%ebp),%eax
- 93e:	89 10                	mov    %edx,(%eax)
-  if(p + p->s.size == bp){
- 940:	8b 45 fc             	mov    -0x4(%ebp),%eax
- 943:	8b 40 04             	mov    0x4(%eax),%eax
- 946:	c1 e0 03             	shl    $0x3,%eax
- 949:	03 45 fc             	add    -0x4(%ebp),%eax
- 94c:	3b 45 f8             	cmp    -0x8(%ebp),%eax
- 94f:	75 20                	jne    971 <free+0xc5>
-    p->s.size += bp->s.size;
- 951:	8b 45 fc             	mov    -0x4(%ebp),%eax
- 954:	8b 50 04             	mov    0x4(%eax),%edx
- 957:	8b 45 f8             	mov    -0x8(%ebp),%eax
- 95a:	8b 40 04             	mov    0x4(%eax),%eax
- 95d:	01 c2                	add    %eax,%edx
- 95f:	8b 45 fc             	mov    -0x4(%ebp),%eax
- 962:	89 50 04             	mov    %edx,0x4(%eax)
-    p->s.ptr = bp->s.ptr;
- 965:	8b 45 f8             	mov    -0x8(%ebp),%eax
- 968:	8b 10                	mov    (%eax),%edx
- 96a:	8b 45 fc             	mov    -0x4(%ebp),%eax
- 96d:	89 10                	mov    %edx,(%eax)
- 96f:	eb 08                	jmp    979 <free+0xcd>
-  } else
-    p->s.ptr = bp;
- 971:	8b 45 fc             	mov    -0x4(%ebp),%eax
- 974:	8b 55 f8             	mov    -0x8(%ebp),%edx
- 977:	89 10                	mov    %edx,(%eax)
-  freep = p;
- 979:	8b 45 fc             	mov    -0x4(%ebp),%eax
- 97c:	a3 18 0e 00 00       	mov    %eax,0xe18
-}
- 981:	c9                   	leave  
- 982:	c3                   	ret    
-
-00000983 <morecore>:
-
-static Header*
-morecore(uint nu)
-{
- 983:	55                   	push   %ebp
- 984:	89 e5                	mov    %esp,%ebp
- 986:	83 ec 28             	sub    $0x28,%esp
-  char *p;
-  Header *hp;
-
-  if(nu < 4096)
- 989:	81 7d 08 ff 0f 00 00 	cmpl   $0xfff,0x8(%ebp)
- 990:	77 07                	ja     999 <morecore+0x16>
-    nu = 4096;
- 992:	c7 45 08 00 10 00 00 	movl   $0x1000,0x8(%ebp)
-  p = sbrk(nu * sizeof(Header));
- 999:	8b 45 08             	mov    0x8(%ebp),%eax
- 99c:	c1 e0 03             	shl    $0x3,%eax
- 99f:	89 04 24             	mov    %eax,(%esp)
- 9a2:	e8 39 fc ff ff       	call   5e0 <sbrk>
- 9a7:	89 45 f4             	mov    %eax,-0xc(%ebp)
-  if(p == (char*)-1)
- 9aa:	83 7d f4 ff          	cmpl   $0xffffffff,-0xc(%ebp)
- 9ae:	75 07                	jne    9b7 <morecore+0x34>
-    return 0;
- 9b0:	b8 00 00 00 00       	mov    $0x0,%eax
- 9b5:	eb 22                	jmp    9d9 <morecore+0x56>
-  hp = (Header*)p;
- 9b7:	8b 45 f4             	mov    -0xc(%ebp),%eax
- 9ba:	89 45 f0             	mov    %eax,-0x10(%ebp)
-  hp->s.size = nu;
- 9bd:	8b 45 f0             	mov    -0x10(%ebp),%eax
- 9c0:	8b 55 08             	mov    0x8(%ebp),%edx
- 9c3:	89 50 04             	mov    %edx,0x4(%eax)
-  free((void*)(hp + 1));
- 9c6:	8b 45 f0             	mov    -0x10(%ebp),%eax
- 9c9:	83 c0 08             	add    $0x8,%eax
- 9cc:	89 04 24             	mov    %eax,(%esp)
- 9cf:	e8 d8 fe ff ff       	call   8ac <free>
-  return freep;
- 9d4:	a1 18 0e 00 00       	mov    0xe18,%eax
-}
- 9d9:	c9                   	leave  
- 9da:	c3                   	ret    
-
-000009db <malloc>:
-
-void*
-malloc(uint nbytes)
-{
- 9db:	55                   	push   %ebp
- 9dc:	89 e5                	mov    %esp,%ebp
- 9de:	83 ec 28             	sub    $0x28,%esp
-  Header *p, *prevp;
-  uint nunits;
-
-  nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;
- 9e1:	8b 45 08             	mov    0x8(%ebp),%eax
- 9e4:	83 c0 07             	add    $0x7,%eax
- 9e7:	c1 e8 03             	shr    $0x3,%eax
- 9ea:	83 c0 01             	add    $0x1,%eax
- 9ed:	89 45 ec             	mov    %eax,-0x14(%ebp)
-  if((prevp = freep) == 0){
- 9f0:	a1 18 0e 00 00       	mov    0xe18,%eax
- 9f5:	89 45 f0             	mov    %eax,-0x10(%ebp)
- 9f8:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
- 9fc:	75 23                	jne    a21 <malloc+0x46>
-    base.s.ptr = freep = prevp = &base;
- 9fe:	c7 45 f0 10 0e 00 00 	movl   $0xe10,-0x10(%ebp)
- a05:	8b 45 f0             	mov    -0x10(%ebp),%eax
- a08:	a3 18 0e 00 00       	mov    %eax,0xe18
- a0d:	a1 18 0e 00 00       	mov    0xe18,%eax
- a12:	a3 10 0e 00 00       	mov    %eax,0xe10
-    base.s.size = 0;
- a17:	c7 05 14 0e 00 00 00 	movl   $0x0,0xe14
- a1e:	00 00 00 
-  }
-  for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
- a21:	8b 45 f0             	mov    -0x10(%ebp),%eax
- a24:	8b 00                	mov    (%eax),%eax
- a26:	89 45 f4             	mov    %eax,-0xc(%ebp)
-    if(p->s.size >= nunits){
- a29:	8b 45 f4             	mov    -0xc(%ebp),%eax
- a2c:	8b 40 04             	mov    0x4(%eax),%eax
- a2f:	3b 45 ec             	cmp    -0x14(%ebp),%eax
- a32:	72 4d                	jb     a81 <malloc+0xa6>
-      if(p->s.size == nunits)
- a34:	8b 45 f4             	mov    -0xc(%ebp),%eax
- a37:	8b 40 04             	mov    0x4(%eax),%eax
- a3a:	3b 45 ec             	cmp    -0x14(%ebp),%eax
- a3d:	75 0c                	jne    a4b <malloc+0x70>
-        prevp->s.ptr = p->s.ptr;
- a3f:	8b 45 f4             	mov    -0xc(%ebp),%eax
- a42:	8b 10                	mov    (%eax),%edx
- a44:	8b 45 f0             	mov    -0x10(%ebp),%eax
- a47:	89 10                	mov    %edx,(%eax)
- a49:	eb 26                	jmp    a71 <malloc+0x96>
-      else {
-        p->s.size -= nunits;
- a4b:	8b 45 f4             	mov    -0xc(%ebp),%eax
- a4e:	8b 40 04             	mov    0x4(%eax),%eax
- a51:	89 c2                	mov    %eax,%edx
- a53:	2b 55 ec             	sub    -0x14(%ebp),%edx
- a56:	8b 45 f4             	mov    -0xc(%ebp),%eax
- a59:	89 50 04             	mov    %edx,0x4(%eax)
-        p += p->s.size;
- a5c:	8b 45 f4             	mov    -0xc(%ebp),%eax
- a5f:	8b 40 04             	mov    0x4(%eax),%eax
- a62:	c1 e0 03             	shl    $0x3,%eax
- a65:	01 45 f4             	add    %eax,-0xc(%ebp)
-        p->s.size = nunits;
- a68:	8b 45 f4             	mov    -0xc(%ebp),%eax
- a6b:	8b 55 ec             	mov    -0x14(%ebp),%edx
- a6e:	89 50 04             	mov    %edx,0x4(%eax)
-      }
-      freep = prevp;
- a71:	8b 45 f0             	mov    -0x10(%ebp),%eax
- a74:	a3 18 0e 00 00       	mov    %eax,0xe18
-      return (void*)(p + 1);
- a79:	8b 45 f4             	mov    -0xc(%ebp),%eax
- a7c:	83 c0 08             	add    $0x8,%eax
- a7f:	eb 38                	jmp    ab9 <malloc+0xde>
-    }
-    if(p == freep)
- a81:	a1 18 0e 00 00       	mov    0xe18,%eax
- a86:	39 45 f4             	cmp    %eax,-0xc(%ebp)
- a89:	75 1b                	jne    aa6 <malloc+0xcb>
-      if((p = morecore(nunits)) == 0)
- a8b:	8b 45 ec             	mov    -0x14(%ebp),%eax
- a8e:	89 04 24             	mov    %eax,(%esp)
- a91:	e8 ed fe ff ff       	call   983 <morecore>
- a96:	89 45 f4             	mov    %eax,-0xc(%ebp)
- a99:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
- a9d:	75 07                	jne    aa6 <malloc+0xcb>
-        return 0;
- a9f:	b8 00 00 00 00       	mov    $0x0,%eax
- aa4:	eb 13                	jmp    ab9 <malloc+0xde>
-  nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;
-  if((prevp = freep) == 0){
-    base.s.ptr = freep = prevp = &base;
-    base.s.size = 0;
-  }
-  for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
- aa6:	8b 45 f4             	mov    -0xc(%ebp),%eax
- aa9:	89 45 f0             	mov    %eax,-0x10(%ebp)
- aac:	8b 45 f4             	mov    -0xc(%ebp),%eax
- aaf:	8b 00                	mov    (%eax),%eax
- ab1:	89 45 f4             	mov    %eax,-0xc(%ebp)
-      return (void*)(p + 1);
-    }
-    if(p == freep)
-      if((p = morecore(nunits)) == 0)
-        return 0;
-  }
- ab4:	e9 70 ff ff ff       	jmp    a29 <malloc+0x4e>
-}
- ab9:	c9                   	leave  
- aba:	c3                   	ret    
diff --git a/xv6/sanity.c b/xv6/sanity.c
deleted file mode 100644
index dc52f8e..0000000
--- a/xv6/sanity.c
+++ /dev/null
@@ -1,77 +0,0 @@
-#include "types.h"
-#include "stat.h"
-#include "user.h"
-
-#define NUM_OF_CHLIDREN 20
-#define CALC_SIZE		3000	//8000 is 1min for 1 proc in Ami's laptop
-
-
-long getTheNPrimeNumber(int n)
-{
-	long i=2;
-	long j;
-	int isPrime = 1;
-
-	for (;;) {
-		for (j = 2; j < i && isPrime; ++j) {
-			if (i%j == 0){
-				isPrime = 0;
-				break;
-			}
-		}
-		if (isPrime && ((n--)==1))	return i;
-		i++;
-		isPrime=1;
-	}
-}
-
-int
-main(int argc, char *argv[])
-{
-	int i, pid, status;
-	int wtime, rtime, iotime;
-	int presence[NUM_OF_CHLIDREN];
-
-	set_priority(PRIORITY_HIGH);
-	memset(presence,0,NUM_OF_CHLIDREN);
-
-	printf(1, "NUM_OF_CHLIDREN=%d CALC_SIZE=%d\n",NUM_OF_CHLIDREN, CALC_SIZE);
-
-
-	for (i = 0; i < NUM_OF_CHLIDREN; ++i) {
-		if ((pid = fork()) > 0){	//parent
-			printf(1, "(fork:%d)",pid);
-		}
-		else if (pid == 0){	//child
-			set_priority((i%3)+1);
-			getTheNPrimeNumber(CALC_SIZE);
-			exit(getpid());
-		}
-		else{
-			printf(1, "\nERROR: Fork failed\n");
-			exit(EXIT_STATUS_FAILURE);
-		}
-	}
-	printf(1,"\n");
-
-	for (i = 0; i < NUM_OF_CHLIDREN; ++i){
-		//status returned should be pid
-		pid = wait_stat(&wtime,&rtime,&iotime,&status);
-		if (pid<0){
-			printf(1, "\nERROR: Not enought waits.\n");
-			exit(EXIT_STATUS_FAILURE);
-		}
-		printf(1,"Done(%d): waiting (RUNNABLE): %d | running: %d | turnaround : %d\n",
-				status, wtime, rtime, wtime+rtime+iotime);
-		presence[i] = status;
-	}
-
-	for (i = 0; i < NUM_OF_CHLIDREN; ++i){
-		if(!presence[i]){
-			printf(1, "\nERROR: Not enough waits.\n");
-			exit(EXIT_STATUS_FAILURE);
-		}
-	}
-	printf(1, "Success: Great Success!.\n");
-	exit(EXIT_STATUS_SUCCESS);
-}
diff --git a/xv6/sanity.d b/xv6/sanity.d
deleted file mode 100644
index a45563b..0000000
--- a/xv6/sanity.d
+++ /dev/null
@@ -1 +0,0 @@
-sanity.o: sanity.c types.h stat.h user.h
diff --git a/xv6/sanity.sym b/xv6/sanity.sym
deleted file mode 100644
index bf2b8a5..0000000
--- a/xv6/sanity.sym
+++ /dev/null
@@ -1,66 +0,0 @@
-00000000 .text
-00000abc .rodata
-00000b9c .eh_frame
-00000dfc .data
-00000e10 .bss
-00000000 .comment
-00000000 .debug_aranges
-00000000 .debug_info
-00000000 .debug_abbrev
-00000000 .debug_line
-00000000 .debug_str
-00000000 .debug_loc
-00000000 sanity.c
-00000000 ulib.c
-000002f4 stosb
-00000000 printf.c
-00000620 putc
-00000648 printint
-00000dfc digits.923
-00000000 umalloc.c
-00000e10 base
-00000e18 freep
-00000983 morecore
-00000319 strcpy
-000005f8 waitpid
-000006f7 printf
-00000512 memmove
-000005a0 mknod
-00000610 foreground
-0000040a gets
-000005d8 getpid
-000009db malloc
-000005e8 sleep
-00000618 set_priority
-00000600 wait_stat
-00000000 getTheNPrimeNumber
-00000568 pipe
-00000578 write
-000005b0 fstat
-00000588 kill
-000005c8 chdir
-00000590 exec
-00000560 wait
-00000570 read
-000005a8 unlink
-00000550 fork
-000005e0 sbrk
-000005f0 uptime
-00000e10 __bss_start
-000003b3 memset
-00000070 main
-0000034d strcmp
-000005d0 dup
-00000608 list_pgroup
-00000479 stat
-00000e10 _edata
-00000e1c _end
-000005b8 link
-00000558 exit
-000004c7 atoi
-0000038e strlen
-00000598 open
-000003d7 strchr
-000005c0 mkdir
-00000580 close
-000008ac free
diff --git a/xv6/sh.asm b/xv6/sh.asm
deleted file mode 100644
index bf7d712..0000000
--- a/xv6/sh.asm
+++ /dev/null
@@ -1,3122 +0,0 @@
-
-_sh:     file format elf32-i386
-
-
-Disassembly of section .text:
-
-00000000 <copyString>:
-int fork1(void);  // Fork but panics on failure.
-void panic(char*);
-struct cmd *parsecmd(char*);
-
-//copies string without \n
-void copyString(char* dst, char* src){
-       0:	55                   	push   %ebp
-       1:	89 e5                	mov    %esp,%ebp
-       3:	83 ec 10             	sub    $0x10,%esp
-	int i = 0;
-       6:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
-	while(src[i] != 0 && src[i] != '\n'){
-       d:	eb 15                	jmp    24 <copyString+0x24>
-		dst[i] = src[i];
-       f:	8b 45 fc             	mov    -0x4(%ebp),%eax
-      12:	03 45 08             	add    0x8(%ebp),%eax
-      15:	8b 55 fc             	mov    -0x4(%ebp),%edx
-      18:	03 55 0c             	add    0xc(%ebp),%edx
-      1b:	0f b6 12             	movzbl (%edx),%edx
-      1e:	88 10                	mov    %dl,(%eax)
-		i++;
-      20:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
-struct cmd *parsecmd(char*);
-
-//copies string without \n
-void copyString(char* dst, char* src){
-	int i = 0;
-	while(src[i] != 0 && src[i] != '\n'){
-      24:	8b 45 fc             	mov    -0x4(%ebp),%eax
-      27:	03 45 0c             	add    0xc(%ebp),%eax
-      2a:	0f b6 00             	movzbl (%eax),%eax
-      2d:	84 c0                	test   %al,%al
-      2f:	74 0d                	je     3e <copyString+0x3e>
-      31:	8b 45 fc             	mov    -0x4(%ebp),%eax
-      34:	03 45 0c             	add    0xc(%ebp),%eax
-      37:	0f b6 00             	movzbl (%eax),%eax
-      3a:	3c 0a                	cmp    $0xa,%al
-      3c:	75 d1                	jne    f <copyString+0xf>
-		dst[i] = src[i];
-		i++;
-	}
-}
-      3e:	c9                   	leave  
-      3f:	c3                   	ret    
-
-00000040 <runcmd>:
-// Execute cmd.  Never returns.
-void
-runcmd(struct cmd *cmd)
-{
-      40:	55                   	push   %ebp
-      41:	89 e5                	mov    %esp,%ebp
-      43:	83 ec 48             	sub    $0x48,%esp
-  struct execcmd *ecmd;
-  struct listcmd *lcmd;
-  struct pipecmd *pcmd;
-  struct redircmd *rcmd;
-
-  if(cmd == 0)
-      46:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
-      4a:	75 0c                	jne    58 <runcmd+0x18>
-    exit(EXIT_STATUS_DEFAULT);
-      4c:	c7 04 24 02 00 00 00 	movl   $0x2,(%esp)
-      53:	e8 74 13 00 00       	call   13cc <exit>
-  
-  switch(cmd->type){
-      58:	8b 45 08             	mov    0x8(%ebp),%eax
-      5b:	8b 00                	mov    (%eax),%eax
-      5d:	83 f8 05             	cmp    $0x5,%eax
-      60:	77 09                	ja     6b <runcmd+0x2b>
-      62:	8b 04 85 5c 19 00 00 	mov    0x195c(,%eax,4),%eax
-      69:	ff e0                	jmp    *%eax
-  default:
-    panic("runcmd");
-      6b:	c7 04 24 30 19 00 00 	movl   $0x1930,(%esp)
-      72:	e8 49 07 00 00       	call   7c0 <panic>
-
-  case EXEC:
-    ecmd = (struct execcmd*)cmd;
-      77:	8b 45 08             	mov    0x8(%ebp),%eax
-      7a:	89 45 f4             	mov    %eax,-0xc(%ebp)
-    if(ecmd->argv[0] == 0)
-      7d:	8b 45 f4             	mov    -0xc(%ebp),%eax
-      80:	8b 40 04             	mov    0x4(%eax),%eax
-      83:	85 c0                	test   %eax,%eax
-      85:	75 0c                	jne    93 <runcmd+0x53>
-      exit(EXIT_STATUS_DEFAULT);
-      87:	c7 04 24 02 00 00 00 	movl   $0x2,(%esp)
-      8e:	e8 39 13 00 00       	call   13cc <exit>
-    exec(ecmd->argv[0], ecmd->argv);
-      93:	8b 45 f4             	mov    -0xc(%ebp),%eax
-      96:	8d 50 04             	lea    0x4(%eax),%edx
-      99:	8b 45 f4             	mov    -0xc(%ebp),%eax
-      9c:	8b 40 04             	mov    0x4(%eax),%eax
-      9f:	89 54 24 04          	mov    %edx,0x4(%esp)
-      a3:	89 04 24             	mov    %eax,(%esp)
-      a6:	e8 59 13 00 00       	call   1404 <exec>
-    printf(2, "exec %s failed\n", ecmd->argv[0]);
-      ab:	8b 45 f4             	mov    -0xc(%ebp),%eax
-      ae:	8b 40 04             	mov    0x4(%eax),%eax
-      b1:	89 44 24 08          	mov    %eax,0x8(%esp)
-      b5:	c7 44 24 04 37 19 00 	movl   $0x1937,0x4(%esp)
-      bc:	00 
-      bd:	c7 04 24 02 00 00 00 	movl   $0x2,(%esp)
-      c4:	e8 a2 14 00 00       	call   156b <printf>
-    break;
-      c9:	e9 aa 01 00 00       	jmp    278 <runcmd+0x238>
-
-  case REDIR:
-    rcmd = (struct redircmd*)cmd;
-      ce:	8b 45 08             	mov    0x8(%ebp),%eax
-      d1:	89 45 f0             	mov    %eax,-0x10(%ebp)
-    close(rcmd->fd);
-      d4:	8b 45 f0             	mov    -0x10(%ebp),%eax
-      d7:	8b 40 14             	mov    0x14(%eax),%eax
-      da:	89 04 24             	mov    %eax,(%esp)
-      dd:	e8 12 13 00 00       	call   13f4 <close>
-    if(open(rcmd->file, rcmd->mode) < 0){
-      e2:	8b 45 f0             	mov    -0x10(%ebp),%eax
-      e5:	8b 50 10             	mov    0x10(%eax),%edx
-      e8:	8b 45 f0             	mov    -0x10(%ebp),%eax
-      eb:	8b 40 08             	mov    0x8(%eax),%eax
-      ee:	89 54 24 04          	mov    %edx,0x4(%esp)
-      f2:	89 04 24             	mov    %eax,(%esp)
-      f5:	e8 12 13 00 00       	call   140c <open>
-      fa:	85 c0                	test   %eax,%eax
-      fc:	79 2a                	jns    128 <runcmd+0xe8>
-      printf(2, "open %s failed\n", rcmd->file);
-      fe:	8b 45 f0             	mov    -0x10(%ebp),%eax
-     101:	8b 40 08             	mov    0x8(%eax),%eax
-     104:	89 44 24 08          	mov    %eax,0x8(%esp)
-     108:	c7 44 24 04 47 19 00 	movl   $0x1947,0x4(%esp)
-     10f:	00 
-     110:	c7 04 24 02 00 00 00 	movl   $0x2,(%esp)
-     117:	e8 4f 14 00 00       	call   156b <printf>
-      exit(EXIT_STATUS_DEFAULT);
-     11c:	c7 04 24 02 00 00 00 	movl   $0x2,(%esp)
-     123:	e8 a4 12 00 00       	call   13cc <exit>
-    }
-    runcmd(rcmd->cmd);
-     128:	8b 45 f0             	mov    -0x10(%ebp),%eax
-     12b:	8b 40 04             	mov    0x4(%eax),%eax
-     12e:	89 04 24             	mov    %eax,(%esp)
-     131:	e8 0a ff ff ff       	call   40 <runcmd>
-    break;
-     136:	e9 3d 01 00 00       	jmp    278 <runcmd+0x238>
-
-  case LIST:
-    lcmd = (struct listcmd*)cmd;
-     13b:	8b 45 08             	mov    0x8(%ebp),%eax
-     13e:	89 45 ec             	mov    %eax,-0x14(%ebp)
-    if(fork1() == 0)
-     141:	e8 a7 06 00 00       	call   7ed <fork1>
-     146:	85 c0                	test   %eax,%eax
-     148:	75 0e                	jne    158 <runcmd+0x118>
-      runcmd(lcmd->left);
-     14a:	8b 45 ec             	mov    -0x14(%ebp),%eax
-     14d:	8b 40 04             	mov    0x4(%eax),%eax
-     150:	89 04 24             	mov    %eax,(%esp)
-     153:	e8 e8 fe ff ff       	call   40 <runcmd>
-    wait(0);
-     158:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
-     15f:	e8 70 12 00 00       	call   13d4 <wait>
-    runcmd(lcmd->right);
-     164:	8b 45 ec             	mov    -0x14(%ebp),%eax
-     167:	8b 40 08             	mov    0x8(%eax),%eax
-     16a:	89 04 24             	mov    %eax,(%esp)
-     16d:	e8 ce fe ff ff       	call   40 <runcmd>
-    break;
-     172:	e9 01 01 00 00       	jmp    278 <runcmd+0x238>
-
-  case PIPE:
-    pcmd = (struct pipecmd*)cmd;
-     177:	8b 45 08             	mov    0x8(%ebp),%eax
-     17a:	89 45 e8             	mov    %eax,-0x18(%ebp)
-    if(pipe(p) < 0)
-     17d:	8d 45 d4             	lea    -0x2c(%ebp),%eax
-     180:	89 04 24             	mov    %eax,(%esp)
-     183:	e8 54 12 00 00       	call   13dc <pipe>
-     188:	85 c0                	test   %eax,%eax
-     18a:	79 0c                	jns    198 <runcmd+0x158>
-      panic("pipe");
-     18c:	c7 04 24 57 19 00 00 	movl   $0x1957,(%esp)
-     193:	e8 28 06 00 00       	call   7c0 <panic>
-
-    if( (left = fork1()) == 0){
-     198:	e8 50 06 00 00       	call   7ed <fork1>
-     19d:	89 45 e4             	mov    %eax,-0x1c(%ebp)
-     1a0:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
-     1a4:	75 3b                	jne    1e1 <runcmd+0x1a1>
-      close(1);
-     1a6:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
-     1ad:	e8 42 12 00 00       	call   13f4 <close>
-      dup(p[1]);
-     1b2:	8b 45 d8             	mov    -0x28(%ebp),%eax
-     1b5:	89 04 24             	mov    %eax,(%esp)
-     1b8:	e8 87 12 00 00       	call   1444 <dup>
-      close(p[0]);
-     1bd:	8b 45 d4             	mov    -0x2c(%ebp),%eax
-     1c0:	89 04 24             	mov    %eax,(%esp)
-     1c3:	e8 2c 12 00 00       	call   13f4 <close>
-      close(p[1]);
-     1c8:	8b 45 d8             	mov    -0x28(%ebp),%eax
-     1cb:	89 04 24             	mov    %eax,(%esp)
-     1ce:	e8 21 12 00 00       	call   13f4 <close>
-      runcmd(pcmd->left);
-     1d3:	8b 45 e8             	mov    -0x18(%ebp),%eax
-     1d6:	8b 40 04             	mov    0x4(%eax),%eax
-     1d9:	89 04 24             	mov    %eax,(%esp)
-     1dc:	e8 5f fe ff ff       	call   40 <runcmd>
-    }
-
-    if( (right = fork1() ) == 0){
-     1e1:	e8 07 06 00 00       	call   7ed <fork1>
-     1e6:	89 45 e0             	mov    %eax,-0x20(%ebp)
-     1e9:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
-     1ed:	75 3b                	jne    22a <runcmd+0x1ea>
-      close(0);
-     1ef:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
-     1f6:	e8 f9 11 00 00       	call   13f4 <close>
-      dup(p[0]);
-     1fb:	8b 45 d4             	mov    -0x2c(%ebp),%eax
-     1fe:	89 04 24             	mov    %eax,(%esp)
-     201:	e8 3e 12 00 00       	call   1444 <dup>
-      close(p[0]);
-     206:	8b 45 d4             	mov    -0x2c(%ebp),%eax
-     209:	89 04 24             	mov    %eax,(%esp)
-     20c:	e8 e3 11 00 00       	call   13f4 <close>
-      close(p[1]);
-     211:	8b 45 d8             	mov    -0x28(%ebp),%eax
-     214:	89 04 24             	mov    %eax,(%esp)
-     217:	e8 d8 11 00 00       	call   13f4 <close>
-      runcmd(pcmd->right);
-     21c:	8b 45 e8             	mov    -0x18(%ebp),%eax
-     21f:	8b 40 08             	mov    0x8(%eax),%eax
-     222:	89 04 24             	mov    %eax,(%esp)
-     225:	e8 16 fe ff ff       	call   40 <runcmd>
-    }
-    close(p[0]);
-     22a:	8b 45 d4             	mov    -0x2c(%ebp),%eax
-     22d:	89 04 24             	mov    %eax,(%esp)
-     230:	e8 bf 11 00 00       	call   13f4 <close>
-    close(p[1]);
-     235:	8b 45 d8             	mov    -0x28(%ebp),%eax
-     238:	89 04 24             	mov    %eax,(%esp)
-     23b:	e8 b4 11 00 00       	call   13f4 <close>
-    wait(0);
-     240:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
-     247:	e8 88 11 00 00       	call   13d4 <wait>
-    wait(0);
-     24c:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
-     253:	e8 7c 11 00 00       	call   13d4 <wait>
-    break;
-     258:	eb 1e                	jmp    278 <runcmd+0x238>
-    
-  case BACK:
-    bcmd = (struct backcmd*)cmd;
-     25a:	8b 45 08             	mov    0x8(%ebp),%eax
-     25d:	89 45 dc             	mov    %eax,-0x24(%ebp)
-    if(fork1() == 0)
-     260:	e8 88 05 00 00       	call   7ed <fork1>
-     265:	85 c0                	test   %eax,%eax
-     267:	75 0e                	jne    277 <runcmd+0x237>
-      runcmd(bcmd->cmd);
-     269:	8b 45 dc             	mov    -0x24(%ebp),%eax
-     26c:	8b 40 04             	mov    0x4(%eax),%eax
-     26f:	89 04 24             	mov    %eax,(%esp)
-     272:	e8 c9 fd ff ff       	call   40 <runcmd>
-    break;
-     277:	90                   	nop
-  }
-  exit(EXIT_STATUS_DEFAULT);
-     278:	c7 04 24 02 00 00 00 	movl   $0x2,(%esp)
-     27f:	e8 48 11 00 00       	call   13cc <exit>
-
-00000284 <getcmd>:
-}
-
-int
-getcmd(char *buf, int nbuf)
-{
-     284:	55                   	push   %ebp
-     285:	89 e5                	mov    %esp,%ebp
-     287:	83 ec 18             	sub    $0x18,%esp
-  printf(2, "$ ");
-     28a:	c7 44 24 04 74 19 00 	movl   $0x1974,0x4(%esp)
-     291:	00 
-     292:	c7 04 24 02 00 00 00 	movl   $0x2,(%esp)
-     299:	e8 cd 12 00 00       	call   156b <printf>
-  memset(buf, 0, nbuf);
-     29e:	8b 45 0c             	mov    0xc(%ebp),%eax
-     2a1:	89 44 24 08          	mov    %eax,0x8(%esp)
-     2a5:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
-     2ac:	00 
-     2ad:	8b 45 08             	mov    0x8(%ebp),%eax
-     2b0:	89 04 24             	mov    %eax,(%esp)
-     2b3:	e8 6f 0f 00 00       	call   1227 <memset>
-  gets(buf, nbuf);
-     2b8:	8b 45 0c             	mov    0xc(%ebp),%eax
-     2bb:	89 44 24 04          	mov    %eax,0x4(%esp)
-     2bf:	8b 45 08             	mov    0x8(%ebp),%eax
-     2c2:	89 04 24             	mov    %eax,(%esp)
-     2c5:	e8 b4 0f 00 00       	call   127e <gets>
-  if(buf[0] == 0) // EOF
-     2ca:	8b 45 08             	mov    0x8(%ebp),%eax
-     2cd:	0f b6 00             	movzbl (%eax),%eax
-     2d0:	84 c0                	test   %al,%al
-     2d2:	75 07                	jne    2db <getcmd+0x57>
-    return -1;
-     2d4:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
-     2d9:	eb 05                	jmp    2e0 <getcmd+0x5c>
-  return 0;
-     2db:	b8 00 00 00 00       	mov    $0x0,%eax
-}
-     2e0:	c9                   	leave  
-     2e1:	c3                   	ret    
-
-000002e2 <listJobs>:
-
-void listJobs(){
-     2e2:	55                   	push   %ebp
-     2e3:	89 e5                	mov    %esp,%ebp
-     2e5:	81 ec 38 05 00 00    	sub    $0x538,%esp
-	int i,j;
-	int size;
-	int hasJobs = 0;
-     2eb:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
-	process_info_entry arr[64];
-
-	for(i=0; i< jobs_counter; i++){
-     2f2:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
-     2f9:	e9 3a 01 00 00       	jmp    438 <listJobs+0x156>
-		if(jobs_table[i].active){
-     2fe:	8b 45 f4             	mov    -0xc(%ebp),%eax
-     301:	c1 e0 04             	shl    $0x4,%eax
-     304:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
-     30b:	29 c2                	sub    %eax,%edx
-     30d:	8d 82 e0 1f 00 00    	lea    0x1fe0(%edx),%eax
-     313:	8b 40 0c             	mov    0xc(%eax),%eax
-     316:	85 c0                	test   %eax,%eax
-     318:	0f 84 16 01 00 00    	je     434 <listJobs+0x152>
-			list_pgroup(jobs_table[i].gid, arr, &size);
-     31e:	8b 45 f4             	mov    -0xc(%ebp),%eax
-     321:	c1 e0 04             	shl    $0x4,%eax
-     324:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
-     32b:	29 c2                	sub    %eax,%edx
-     32d:	8d 82 e0 1f 00 00    	lea    0x1fe0(%edx),%eax
-     333:	8b 40 08             	mov    0x8(%eax),%eax
-     336:	8d 55 e8             	lea    -0x18(%ebp),%edx
-     339:	89 54 24 08          	mov    %edx,0x8(%esp)
-     33d:	8d 95 e8 fa ff ff    	lea    -0x518(%ebp),%edx
-     343:	89 54 24 04          	mov    %edx,0x4(%esp)
-     347:	89 04 24             	mov    %eax,(%esp)
-     34a:	e8 2d 11 00 00       	call   147c <list_pgroup>
-			if( size > 0){
-     34f:	8b 45 e8             	mov    -0x18(%ebp),%eax
-     352:	85 c0                	test   %eax,%eax
-     354:	0f 8e be 00 00 00    	jle    418 <listJobs+0x136>
-				hasJobs = 1;
-     35a:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
-				printf(1,"Job %d: %s (%d) \n", i, jobs_table[i].cmd, jobs_table[i].gid);
-     361:	8b 45 f4             	mov    -0xc(%ebp),%eax
-     364:	c1 e0 04             	shl    $0x4,%eax
-     367:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
-     36e:	29 c2                	sub    %eax,%edx
-     370:	8d 82 e0 1f 00 00    	lea    0x1fe0(%edx),%eax
-     376:	8b 48 08             	mov    0x8(%eax),%ecx
-     379:	8b 45 f4             	mov    -0xc(%ebp),%eax
-     37c:	c1 e0 04             	shl    $0x4,%eax
-     37f:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
-     386:	29 c2                	sub    %eax,%edx
-     388:	8d 82 80 1f 00 00    	lea    0x1f80(%edx),%eax
-     38e:	83 c0 04             	add    $0x4,%eax
-     391:	89 4c 24 10          	mov    %ecx,0x10(%esp)
-     395:	89 44 24 0c          	mov    %eax,0xc(%esp)
-     399:	8b 45 f4             	mov    -0xc(%ebp),%eax
-     39c:	89 44 24 08          	mov    %eax,0x8(%esp)
-     3a0:	c7 44 24 04 77 19 00 	movl   $0x1977,0x4(%esp)
-     3a7:	00 
-     3a8:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
-     3af:	e8 b7 11 00 00       	call   156b <printf>
-				for(j=0; j< size; j++){
-     3b4:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
-     3bb:	eb 51                	jmp    40e <listJobs+0x12c>
-					printf(1,"%d: %s \n", arr[j].pid, arr[j].name);
-     3bd:	8d 8d e8 fa ff ff    	lea    -0x518(%ebp),%ecx
-     3c3:	8b 55 f0             	mov    -0x10(%ebp),%edx
-     3c6:	89 d0                	mov    %edx,%eax
-     3c8:	c1 e0 02             	shl    $0x2,%eax
-     3cb:	01 d0                	add    %edx,%eax
-     3cd:	c1 e0 02             	shl    $0x2,%eax
-     3d0:	01 c8                	add    %ecx,%eax
-     3d2:	8d 48 04             	lea    0x4(%eax),%ecx
-     3d5:	8b 55 f0             	mov    -0x10(%ebp),%edx
-     3d8:	89 d0                	mov    %edx,%eax
-     3da:	c1 e0 02             	shl    $0x2,%eax
-     3dd:	01 d0                	add    %edx,%eax
-     3df:	c1 e0 02             	shl    $0x2,%eax
-     3e2:	8d 55 f8             	lea    -0x8(%ebp),%edx
-     3e5:	01 d0                	add    %edx,%eax
-     3e7:	2d 10 05 00 00       	sub    $0x510,%eax
-     3ec:	8b 00                	mov    (%eax),%eax
-     3ee:	89 4c 24 0c          	mov    %ecx,0xc(%esp)
-     3f2:	89 44 24 08          	mov    %eax,0x8(%esp)
-     3f6:	c7 44 24 04 89 19 00 	movl   $0x1989,0x4(%esp)
-     3fd:	00 
-     3fe:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
-     405:	e8 61 11 00 00       	call   156b <printf>
-		if(jobs_table[i].active){
-			list_pgroup(jobs_table[i].gid, arr, &size);
-			if( size > 0){
-				hasJobs = 1;
-				printf(1,"Job %d: %s (%d) \n", i, jobs_table[i].cmd, jobs_table[i].gid);
-				for(j=0; j< size; j++){
-     40a:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)
-     40e:	8b 45 e8             	mov    -0x18(%ebp),%eax
-     411:	39 45 f0             	cmp    %eax,-0x10(%ebp)
-     414:	7c a7                	jl     3bd <listJobs+0xdb>
-     416:	eb 1c                	jmp    434 <listJobs+0x152>
-					printf(1,"%d: %s \n", arr[j].pid, arr[j].name);
-				}
-			}
-			else{
-				jobs_table[i].active = 0;
-     418:	8b 45 f4             	mov    -0xc(%ebp),%eax
-     41b:	c1 e0 04             	shl    $0x4,%eax
-     41e:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
-     425:	29 c2                	sub    %eax,%edx
-     427:	8d 82 e0 1f 00 00    	lea    0x1fe0(%edx),%eax
-     42d:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%eax)
-	int i,j;
-	int size;
-	int hasJobs = 0;
-	process_info_entry arr[64];
-
-	for(i=0; i< jobs_counter; i++){
-     434:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
-     438:	a1 80 df 01 00       	mov    0x1df80,%eax
-     43d:	39 45 f4             	cmp    %eax,-0xc(%ebp)
-     440:	0f 8c b8 fe ff ff    	jl     2fe <listJobs+0x1c>
-			else{
-				jobs_table[i].active = 0;
-			}
-		}
-	}
-	if(!hasJobs){
-     446:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
-     44a:	75 14                	jne    460 <listJobs+0x17e>
-		printf(1, "There are no jobs\n");
-     44c:	c7 44 24 04 92 19 00 	movl   $0x1992,0x4(%esp)
-     453:	00 
-     454:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
-     45b:	e8 0b 11 00 00       	call   156b <printf>
-	}
-}
-     460:	c9                   	leave  
-     461:	c3                   	ret    
-
-00000462 <move_to_foreground>:
-
-int move_to_foreground(int job_id){
-     462:	55                   	push   %ebp
-     463:	89 e5                	mov    %esp,%ebp
-     465:	83 ec 28             	sub    $0x28,%esp
-	int i;//, desired_job_idx;
-	int fgRet = -1;
-     468:	c7 45 f0 ff ff ff ff 	movl   $0xffffffff,-0x10(%ebp)
-	//printf(1," asked to fg %d \n", job_id);
-
-	if(job_id == -1){
-     46f:	83 7d 08 ff          	cmpl   $0xffffffff,0x8(%ebp)
-     473:	0f 85 81 00 00 00    	jne    4fa <move_to_foreground+0x98>
-		for (i = 0; i < jobs_counter; i++) {
-     479:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
-     480:	eb 6c                	jmp    4ee <move_to_foreground+0x8c>
-			if( jobs_table[i].active){
-     482:	8b 45 f4             	mov    -0xc(%ebp),%eax
-     485:	c1 e0 04             	shl    $0x4,%eax
-     488:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
-     48f:	29 c2                	sub    %eax,%edx
-     491:	8d 82 e0 1f 00 00    	lea    0x1fe0(%edx),%eax
-     497:	8b 40 0c             	mov    0xc(%eax),%eax
-     49a:	85 c0                	test   %eax,%eax
-     49c:	74 4c                	je     4ea <move_to_foreground+0x88>
-				fgRet = foreground(jobs_table[i].gid);
-     49e:	8b 45 f4             	mov    -0xc(%ebp),%eax
-     4a1:	c1 e0 04             	shl    $0x4,%eax
-     4a4:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
-     4ab:	29 c2                	sub    %eax,%edx
-     4ad:	8d 82 e0 1f 00 00    	lea    0x1fe0(%edx),%eax
-     4b3:	8b 40 08             	mov    0x8(%eax),%eax
-     4b6:	89 04 24             	mov    %eax,(%esp)
-     4b9:	e8 c6 0f 00 00       	call   1484 <foreground>
-     4be:	89 45 f0             	mov    %eax,-0x10(%ebp)
-				jobs_table[i].active = 0;
-     4c1:	8b 45 f4             	mov    -0xc(%ebp),%eax
-     4c4:	c1 e0 04             	shl    $0x4,%eax
-     4c7:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
-     4ce:	29 c2                	sub    %eax,%edx
-     4d0:	8d 82 e0 1f 00 00    	lea    0x1fe0(%edx),%eax
-     4d6:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%eax)
-				if (fgRet != -1) return 0;
-     4dd:	83 7d f0 ff          	cmpl   $0xffffffff,-0x10(%ebp)
-     4e1:	74 07                	je     4ea <move_to_foreground+0x88>
-     4e3:	b8 00 00 00 00       	mov    $0x0,%eax
-     4e8:	eb 74                	jmp    55e <move_to_foreground+0xfc>
-	int i;//, desired_job_idx;
-	int fgRet = -1;
-	//printf(1," asked to fg %d \n", job_id);
-
-	if(job_id == -1){
-		for (i = 0; i < jobs_counter; i++) {
-     4ea:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
-     4ee:	a1 80 df 01 00       	mov    0x1df80,%eax
-     4f3:	39 45 f4             	cmp    %eax,-0xc(%ebp)
-     4f6:	7c 8a                	jl     482 <move_to_foreground+0x20>
-     4f8:	eb 5f                	jmp    559 <move_to_foreground+0xf7>
-				jobs_table[i].active = 0;
-				if (fgRet != -1) return 0;
-			}
-		}
-	}
-	else if( jobs_table[job_id].active){
-     4fa:	8b 45 08             	mov    0x8(%ebp),%eax
-     4fd:	c1 e0 04             	shl    $0x4,%eax
-     500:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
-     507:	29 c2                	sub    %eax,%edx
-     509:	8d 82 e0 1f 00 00    	lea    0x1fe0(%edx),%eax
-     50f:	8b 40 0c             	mov    0xc(%eax),%eax
-     512:	85 c0                	test   %eax,%eax
-     514:	74 43                	je     559 <move_to_foreground+0xf7>
-		foreground(jobs_table[job_id].gid);
-     516:	8b 45 08             	mov    0x8(%ebp),%eax
-     519:	c1 e0 04             	shl    $0x4,%eax
-     51c:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
-     523:	29 c2                	sub    %eax,%edx
-     525:	8d 82 e0 1f 00 00    	lea    0x1fe0(%edx),%eax
-     52b:	8b 40 08             	mov    0x8(%eax),%eax
-     52e:	89 04 24             	mov    %eax,(%esp)
-     531:	e8 4e 0f 00 00       	call   1484 <foreground>
-		jobs_table[job_id].active = 0;
-     536:	8b 45 08             	mov    0x8(%ebp),%eax
-     539:	c1 e0 04             	shl    $0x4,%eax
-     53c:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
-     543:	29 c2                	sub    %eax,%edx
-     545:	8d 82 e0 1f 00 00    	lea    0x1fe0(%edx),%eax
-     54b:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%eax)
-		return 0;
-     552:	b8 00 00 00 00       	mov    $0x0,%eax
-     557:	eb 05                	jmp    55e <move_to_foreground+0xfc>
-	}
-
-	return -1;
-     559:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
-}
-     55e:	c9                   	leave  
-     55f:	c3                   	ret    
-
-00000560 <main>:
-//	printf(1," asta la vista babe ;\n");
-//	return (found? 0 : -1);
-//}
-int
-main(void)
-{
-     560:	55                   	push   %ebp
-     561:	89 e5                	mov    %esp,%ebp
-     563:	83 e4 f0             	and    $0xfffffff0,%esp
-     566:	83 ec 20             	sub    $0x20,%esp
-  static char buf[100];
-  int fd;
-  int child_pid;
-  int job_id;
-  
-  jobs_table[0].active = 0;
-     569:	c7 05 ec 1f 00 00 00 	movl   $0x0,0x1fec
-     570:	00 00 00 
-  if(jobs_table[0].active) printf(1, " just so it wont cry on unused");
-     573:	a1 ec 1f 00 00       	mov    0x1fec,%eax
-     578:	85 c0                	test   %eax,%eax
-     57a:	74 2f                	je     5ab <main+0x4b>
-     57c:	c7 44 24 04 a8 19 00 	movl   $0x19a8,0x4(%esp)
-     583:	00 
-     584:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
-     58b:	e8 db 0f 00 00       	call   156b <printf>
-
-  // Assumes three file descriptors open.
-  while((fd = open("console", O_RDWR)) >= 0){
-     590:	eb 19                	jmp    5ab <main+0x4b>
-    if(fd >= 3){
-     592:	83 7c 24 18 02       	cmpl   $0x2,0x18(%esp)
-     597:	7e 12                	jle    5ab <main+0x4b>
-      close(fd);
-     599:	8b 44 24 18          	mov    0x18(%esp),%eax
-     59d:	89 04 24             	mov    %eax,(%esp)
-     5a0:	e8 4f 0e 00 00       	call   13f4 <close>
-      break;
-     5a5:	90                   	nop
-    }
-  }
-  
-  // Read and run input commands.
-  while(getcmd(buf, sizeof(buf)) >= 0){
-     5a6:	e9 ed 01 00 00       	jmp    798 <main+0x238>
-  
-  jobs_table[0].active = 0;
-  if(jobs_table[0].active) printf(1, " just so it wont cry on unused");
-
-  // Assumes three file descriptors open.
-  while((fd = open("console", O_RDWR)) >= 0){
-     5ab:	c7 44 24 04 02 00 00 	movl   $0x2,0x4(%esp)
-     5b2:	00 
-     5b3:	c7 04 24 c7 19 00 00 	movl   $0x19c7,(%esp)
-     5ba:	e8 4d 0e 00 00       	call   140c <open>
-     5bf:	89 44 24 18          	mov    %eax,0x18(%esp)
-     5c3:	83 7c 24 18 00       	cmpl   $0x0,0x18(%esp)
-     5c8:	79 c8                	jns    592 <main+0x32>
-      break;
-    }
-  }
-  
-  // Read and run input commands.
-  while(getcmd(buf, sizeof(buf)) >= 0){
-     5ca:	e9 c9 01 00 00       	jmp    798 <main+0x238>
-    if(buf[0] == 'c' && buf[1] == 'd' && buf[2] == ' '){
-     5cf:	0f b6 05 a0 df 01 00 	movzbl 0x1dfa0,%eax
-     5d6:	3c 63                	cmp    $0x63,%al
-     5d8:	75 61                	jne    63b <main+0xdb>
-     5da:	0f b6 05 a1 df 01 00 	movzbl 0x1dfa1,%eax
-     5e1:	3c 64                	cmp    $0x64,%al
-     5e3:	75 56                	jne    63b <main+0xdb>
-     5e5:	0f b6 05 a2 df 01 00 	movzbl 0x1dfa2,%eax
-     5ec:	3c 20                	cmp    $0x20,%al
-     5ee:	75 4b                	jne    63b <main+0xdb>
-      // Clumsy but will have to do for now.
-      // Chdir has no effect on the parent if run in the child.
-      buf[strlen(buf)-1] = 0;  // chop \n
-     5f0:	c7 04 24 a0 df 01 00 	movl   $0x1dfa0,(%esp)
-     5f7:	e8 06 0c 00 00       	call   1202 <strlen>
-     5fc:	83 e8 01             	sub    $0x1,%eax
-     5ff:	c6 80 a0 df 01 00 00 	movb   $0x0,0x1dfa0(%eax)
-      if(chdir(buf+3) < 0)
-     606:	c7 04 24 a3 df 01 00 	movl   $0x1dfa3,(%esp)
-     60d:	e8 2a 0e 00 00       	call   143c <chdir>
-     612:	85 c0                	test   %eax,%eax
-     614:	0f 89 7d 01 00 00    	jns    797 <main+0x237>
-        printf(2, "cannot cd %s\n", buf+3);
-     61a:	c7 44 24 08 a3 df 01 	movl   $0x1dfa3,0x8(%esp)
-     621:	00 
-     622:	c7 44 24 04 cf 19 00 	movl   $0x19cf,0x4(%esp)
-     629:	00 
-     62a:	c7 04 24 02 00 00 00 	movl   $0x2,(%esp)
-     631:	e8 35 0f 00 00       	call   156b <printf>
-      continue;
-     636:	e9 5c 01 00 00       	jmp    797 <main+0x237>
-    }
-
-    if(buf[0] == 'j' && buf[1] == 'o' && buf[2] == 'b' && buf[3] == 's' && buf[4] == '\n'){
-     63b:	0f b6 05 a0 df 01 00 	movzbl 0x1dfa0,%eax
-     642:	3c 6a                	cmp    $0x6a,%al
-     644:	75 36                	jne    67c <main+0x11c>
-     646:	0f b6 05 a1 df 01 00 	movzbl 0x1dfa1,%eax
-     64d:	3c 6f                	cmp    $0x6f,%al
-     64f:	75 2b                	jne    67c <main+0x11c>
-     651:	0f b6 05 a2 df 01 00 	movzbl 0x1dfa2,%eax
-     658:	3c 62                	cmp    $0x62,%al
-     65a:	75 20                	jne    67c <main+0x11c>
-     65c:	0f b6 05 a3 df 01 00 	movzbl 0x1dfa3,%eax
-     663:	3c 73                	cmp    $0x73,%al
-     665:	75 15                	jne    67c <main+0x11c>
-     667:	0f b6 05 a4 df 01 00 	movzbl 0x1dfa4,%eax
-     66e:	3c 0a                	cmp    $0xa,%al
-     670:	75 0a                	jne    67c <main+0x11c>
-      listJobs();
-     672:	e8 6b fc ff ff       	call   2e2 <listJobs>
-	  continue;
-     677:	e9 1c 01 00 00       	jmp    798 <main+0x238>
-	}
-
-    if(buf[0] == 'f' && buf[1] == 'g' ){
-     67c:	0f b6 05 a0 df 01 00 	movzbl 0x1dfa0,%eax
-     683:	3c 66                	cmp    $0x66,%al
-     685:	75 4c                	jne    6d3 <main+0x173>
-     687:	0f b6 05 a1 df 01 00 	movzbl 0x1dfa1,%eax
-     68e:	3c 67                	cmp    $0x67,%al
-     690:	75 41                	jne    6d3 <main+0x173>
-		if( buf[2] == '\n' ){
-     692:	0f b6 05 a2 df 01 00 	movzbl 0x1dfa2,%eax
-     699:	3c 0a                	cmp    $0xa,%al
-     69b:	75 0a                	jne    6a7 <main+0x147>
-			job_id = -1;
-     69d:	c7 44 24 1c ff ff ff 	movl   $0xffffffff,0x1c(%esp)
-     6a4:	ff 
-     6a5:	eb 1b                	jmp    6c2 <main+0x162>
-		}
-		else if( buf[2] == ' ' ){
-     6a7:	0f b6 05 a2 df 01 00 	movzbl 0x1dfa2,%eax
-     6ae:	3c 20                	cmp    $0x20,%al
-     6b0:	75 10                	jne    6c2 <main+0x162>
-			job_id = atoi(buf+3);
-     6b2:	c7 04 24 a3 df 01 00 	movl   $0x1dfa3,(%esp)
-     6b9:	e8 7d 0c 00 00       	call   133b <atoi>
-     6be:	89 44 24 1c          	mov    %eax,0x1c(%esp)
-		}
-
-		move_to_foreground(job_id);
-     6c2:	8b 44 24 1c          	mov    0x1c(%esp),%eax
-     6c6:	89 04 24             	mov    %eax,(%esp)
-     6c9:	e8 94 fd ff ff       	call   462 <move_to_foreground>
-		continue;
-     6ce:	e9 c5 00 00 00       	jmp    798 <main+0x238>
-	}
-
-    if((child_pid = fork1()) == 0){
-     6d3:	e8 15 01 00 00       	call   7ed <fork1>
-     6d8:	89 44 24 14          	mov    %eax,0x14(%esp)
-     6dc:	83 7c 24 14 00       	cmpl   $0x0,0x14(%esp)
-     6e1:	75 14                	jne    6f7 <main+0x197>
-        runcmd(parsecmd(buf));
-     6e3:	c7 04 24 a0 df 01 00 	movl   $0x1dfa0,(%esp)
-     6ea:	e8 70 04 00 00       	call   b5f <parsecmd>
-     6ef:	89 04 24             	mov    %eax,(%esp)
-     6f2:	e8 49 f9 ff ff       	call   40 <runcmd>
-    }
-    //keep track on jobs
-    jobs_table[jobs_counter].gid = child_pid;
-     6f7:	a1 80 df 01 00       	mov    0x1df80,%eax
-     6fc:	c1 e0 04             	shl    $0x4,%eax
-     6ff:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
-     706:	29 c2                	sub    %eax,%edx
-     708:	81 c2 e0 1f 00 00    	add    $0x1fe0,%edx
-     70e:	8b 44 24 14          	mov    0x14(%esp),%eax
-     712:	89 42 08             	mov    %eax,0x8(%edx)
-    jobs_table[jobs_counter].num = jobs_counter;
-     715:	a1 80 df 01 00       	mov    0x1df80,%eax
-     71a:	8b 0d 80 df 01 00    	mov    0x1df80,%ecx
-     720:	c1 e0 04             	shl    $0x4,%eax
-     723:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
-     72a:	29 c2                	sub    %eax,%edx
-     72c:	8d 82 80 1f 00 00    	lea    0x1f80(%edx),%eax
-     732:	89 08                	mov    %ecx,(%eax)
-    jobs_table[jobs_counter].active = 1;
-     734:	a1 80 df 01 00       	mov    0x1df80,%eax
-     739:	c1 e0 04             	shl    $0x4,%eax
-     73c:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
-     743:	29 c2                	sub    %eax,%edx
-     745:	8d 82 e0 1f 00 00    	lea    0x1fe0(%edx),%eax
-     74b:	c7 40 0c 01 00 00 00 	movl   $0x1,0xc(%eax)
-    copyString(jobs_table[jobs_counter].cmd, buf);
-     752:	a1 80 df 01 00       	mov    0x1df80,%eax
-     757:	c1 e0 04             	shl    $0x4,%eax
-     75a:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
-     761:	29 c2                	sub    %eax,%edx
-     763:	8d 82 80 1f 00 00    	lea    0x1f80(%edx),%eax
-     769:	83 c0 04             	add    $0x4,%eax
-     76c:	c7 44 24 04 a0 df 01 	movl   $0x1dfa0,0x4(%esp)
-     773:	00 
-     774:	89 04 24             	mov    %eax,(%esp)
-     777:	e8 84 f8 ff ff       	call   0 <copyString>
-	jobs_counter++;
-     77c:	a1 80 df 01 00       	mov    0x1df80,%eax
-     781:	83 c0 01             	add    $0x1,%eax
-     784:	a3 80 df 01 00       	mov    %eax,0x1df80
-
-    wait(0);
-     789:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
-     790:	e8 3f 0c 00 00       	call   13d4 <wait>
-     795:	eb 01                	jmp    798 <main+0x238>
-      // Clumsy but will have to do for now.
-      // Chdir has no effect on the parent if run in the child.
-      buf[strlen(buf)-1] = 0;  // chop \n
-      if(chdir(buf+3) < 0)
-        printf(2, "cannot cd %s\n", buf+3);
-      continue;
-     797:	90                   	nop
-      break;
-    }
-  }
-  
-  // Read and run input commands.
-  while(getcmd(buf, sizeof(buf)) >= 0){
-     798:	c7 44 24 04 64 00 00 	movl   $0x64,0x4(%esp)
-     79f:	00 
-     7a0:	c7 04 24 a0 df 01 00 	movl   $0x1dfa0,(%esp)
-     7a7:	e8 d8 fa ff ff       	call   284 <getcmd>
-     7ac:	85 c0                	test   %eax,%eax
-     7ae:	0f 89 1b fe ff ff    	jns    5cf <main+0x6f>
-    copyString(jobs_table[jobs_counter].cmd, buf);
-	jobs_counter++;
-
-    wait(0);
-  }
-  exit(EXIT_STATUS_DEFAULT);
-     7b4:	c7 04 24 02 00 00 00 	movl   $0x2,(%esp)
-     7bb:	e8 0c 0c 00 00       	call   13cc <exit>
-
-000007c0 <panic>:
-}
-
-void
-panic(char *s)
-{
-     7c0:	55                   	push   %ebp
-     7c1:	89 e5                	mov    %esp,%ebp
-     7c3:	83 ec 18             	sub    $0x18,%esp
-  printf(2, "%s\n", s);
-     7c6:	8b 45 08             	mov    0x8(%ebp),%eax
-     7c9:	89 44 24 08          	mov    %eax,0x8(%esp)
-     7cd:	c7 44 24 04 dd 19 00 	movl   $0x19dd,0x4(%esp)
-     7d4:	00 
-     7d5:	c7 04 24 02 00 00 00 	movl   $0x2,(%esp)
-     7dc:	e8 8a 0d 00 00       	call   156b <printf>
-  exit(EXIT_STATUS_DEFAULT);
-     7e1:	c7 04 24 02 00 00 00 	movl   $0x2,(%esp)
-     7e8:	e8 df 0b 00 00       	call   13cc <exit>
-
-000007ed <fork1>:
-}
-
-int
-fork1(void)
-{
-     7ed:	55                   	push   %ebp
-     7ee:	89 e5                	mov    %esp,%ebp
-     7f0:	83 ec 28             	sub    $0x28,%esp
-  int pid;
-  
-  pid = fork();
-     7f3:	e8 cc 0b 00 00       	call   13c4 <fork>
-     7f8:	89 45 f4             	mov    %eax,-0xc(%ebp)
-  if(pid == -1)
-     7fb:	83 7d f4 ff          	cmpl   $0xffffffff,-0xc(%ebp)
-     7ff:	75 0c                	jne    80d <fork1+0x20>
-    panic("fork");
-     801:	c7 04 24 e1 19 00 00 	movl   $0x19e1,(%esp)
-     808:	e8 b3 ff ff ff       	call   7c0 <panic>
-  return pid;
-     80d:	8b 45 f4             	mov    -0xc(%ebp),%eax
-}
-     810:	c9                   	leave  
-     811:	c3                   	ret    
-
-00000812 <execcmd>:
-//PAGEBREAK!
-// Constructors
-
-struct cmd*
-execcmd(void)
-{
-     812:	55                   	push   %ebp
-     813:	89 e5                	mov    %esp,%ebp
-     815:	83 ec 28             	sub    $0x28,%esp
-  struct execcmd *cmd;
-
-  cmd = malloc(sizeof(*cmd));
-     818:	c7 04 24 54 00 00 00 	movl   $0x54,(%esp)
-     81f:	e8 2b 10 00 00       	call   184f <malloc>
-     824:	89 45 f4             	mov    %eax,-0xc(%ebp)
-  memset(cmd, 0, sizeof(*cmd));
-     827:	c7 44 24 08 54 00 00 	movl   $0x54,0x8(%esp)
-     82e:	00 
-     82f:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
-     836:	00 
-     837:	8b 45 f4             	mov    -0xc(%ebp),%eax
-     83a:	89 04 24             	mov    %eax,(%esp)
-     83d:	e8 e5 09 00 00       	call   1227 <memset>
-  cmd->type = EXEC;
-     842:	8b 45 f4             	mov    -0xc(%ebp),%eax
-     845:	c7 00 01 00 00 00    	movl   $0x1,(%eax)
-  return (struct cmd*)cmd;
-     84b:	8b 45 f4             	mov    -0xc(%ebp),%eax
-}
-     84e:	c9                   	leave  
-     84f:	c3                   	ret    
-
-00000850 <redircmd>:
-
-struct cmd*
-redircmd(struct cmd *subcmd, char *file, char *efile, int mode, int fd)
-{
-     850:	55                   	push   %ebp
-     851:	89 e5                	mov    %esp,%ebp
-     853:	83 ec 28             	sub    $0x28,%esp
-  struct redircmd *cmd;
-
-  cmd = malloc(sizeof(*cmd));
-     856:	c7 04 24 18 00 00 00 	movl   $0x18,(%esp)
-     85d:	e8 ed 0f 00 00       	call   184f <malloc>
-     862:	89 45 f4             	mov    %eax,-0xc(%ebp)
-  memset(cmd, 0, sizeof(*cmd));
-     865:	c7 44 24 08 18 00 00 	movl   $0x18,0x8(%esp)
-     86c:	00 
-     86d:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
-     874:	00 
-     875:	8b 45 f4             	mov    -0xc(%ebp),%eax
-     878:	89 04 24             	mov    %eax,(%esp)
-     87b:	e8 a7 09 00 00       	call   1227 <memset>
-  cmd->type = REDIR;
-     880:	8b 45 f4             	mov    -0xc(%ebp),%eax
-     883:	c7 00 02 00 00 00    	movl   $0x2,(%eax)
-  cmd->cmd = subcmd;
-     889:	8b 45 f4             	mov    -0xc(%ebp),%eax
-     88c:	8b 55 08             	mov    0x8(%ebp),%edx
-     88f:	89 50 04             	mov    %edx,0x4(%eax)
-  cmd->file = file;
-     892:	8b 45 f4             	mov    -0xc(%ebp),%eax
-     895:	8b 55 0c             	mov    0xc(%ebp),%edx
-     898:	89 50 08             	mov    %edx,0x8(%eax)
-  cmd->efile = efile;
-     89b:	8b 45 f4             	mov    -0xc(%ebp),%eax
-     89e:	8b 55 10             	mov    0x10(%ebp),%edx
-     8a1:	89 50 0c             	mov    %edx,0xc(%eax)
-  cmd->mode = mode;
-     8a4:	8b 45 f4             	mov    -0xc(%ebp),%eax
-     8a7:	8b 55 14             	mov    0x14(%ebp),%edx
-     8aa:	89 50 10             	mov    %edx,0x10(%eax)
-  cmd->fd = fd;
-     8ad:	8b 45 f4             	mov    -0xc(%ebp),%eax
-     8b0:	8b 55 18             	mov    0x18(%ebp),%edx
-     8b3:	89 50 14             	mov    %edx,0x14(%eax)
-  return (struct cmd*)cmd;
-     8b6:	8b 45 f4             	mov    -0xc(%ebp),%eax
-}
-     8b9:	c9                   	leave  
-     8ba:	c3                   	ret    
-
-000008bb <pipecmd>:
-
-struct cmd*
-pipecmd(struct cmd *left, struct cmd *right)
-{
-     8bb:	55                   	push   %ebp
-     8bc:	89 e5                	mov    %esp,%ebp
-     8be:	83 ec 28             	sub    $0x28,%esp
-  struct pipecmd *cmd;
-
-  cmd = malloc(sizeof(*cmd));
-     8c1:	c7 04 24 0c 00 00 00 	movl   $0xc,(%esp)
-     8c8:	e8 82 0f 00 00       	call   184f <malloc>
-     8cd:	89 45 f4             	mov    %eax,-0xc(%ebp)
-  memset(cmd, 0, sizeof(*cmd));
-     8d0:	c7 44 24 08 0c 00 00 	movl   $0xc,0x8(%esp)
-     8d7:	00 
-     8d8:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
-     8df:	00 
-     8e0:	8b 45 f4             	mov    -0xc(%ebp),%eax
-     8e3:	89 04 24             	mov    %eax,(%esp)
-     8e6:	e8 3c 09 00 00       	call   1227 <memset>
-  cmd->type = PIPE;
-     8eb:	8b 45 f4             	mov    -0xc(%ebp),%eax
-     8ee:	c7 00 03 00 00 00    	movl   $0x3,(%eax)
-  cmd->left = left;
-     8f4:	8b 45 f4             	mov    -0xc(%ebp),%eax
-     8f7:	8b 55 08             	mov    0x8(%ebp),%edx
-     8fa:	89 50 04             	mov    %edx,0x4(%eax)
-  cmd->right = right;
-     8fd:	8b 45 f4             	mov    -0xc(%ebp),%eax
-     900:	8b 55 0c             	mov    0xc(%ebp),%edx
-     903:	89 50 08             	mov    %edx,0x8(%eax)
-  return (struct cmd*)cmd;
-     906:	8b 45 f4             	mov    -0xc(%ebp),%eax
-}
-     909:	c9                   	leave  
-     90a:	c3                   	ret    
-
-0000090b <listcmd>:
-
-struct cmd*
-listcmd(struct cmd *left, struct cmd *right)
-{
-     90b:	55                   	push   %ebp
-     90c:	89 e5                	mov    %esp,%ebp
-     90e:	83 ec 28             	sub    $0x28,%esp
-  struct listcmd *cmd;
-
-  cmd = malloc(sizeof(*cmd));
-     911:	c7 04 24 0c 00 00 00 	movl   $0xc,(%esp)
-     918:	e8 32 0f 00 00       	call   184f <malloc>
-     91d:	89 45 f4             	mov    %eax,-0xc(%ebp)
-  memset(cmd, 0, sizeof(*cmd));
-     920:	c7 44 24 08 0c 00 00 	movl   $0xc,0x8(%esp)
-     927:	00 
-     928:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
-     92f:	00 
-     930:	8b 45 f4             	mov    -0xc(%ebp),%eax
-     933:	89 04 24             	mov    %eax,(%esp)
-     936:	e8 ec 08 00 00       	call   1227 <memset>
-  cmd->type = LIST;
-     93b:	8b 45 f4             	mov    -0xc(%ebp),%eax
-     93e:	c7 00 04 00 00 00    	movl   $0x4,(%eax)
-  cmd->left = left;
-     944:	8b 45 f4             	mov    -0xc(%ebp),%eax
-     947:	8b 55 08             	mov    0x8(%ebp),%edx
-     94a:	89 50 04             	mov    %edx,0x4(%eax)
-  cmd->right = right;
-     94d:	8b 45 f4             	mov    -0xc(%ebp),%eax
-     950:	8b 55 0c             	mov    0xc(%ebp),%edx
-     953:	89 50 08             	mov    %edx,0x8(%eax)
-  return (struct cmd*)cmd;
-     956:	8b 45 f4             	mov    -0xc(%ebp),%eax
-}
-     959:	c9                   	leave  
-     95a:	c3                   	ret    
-
-0000095b <backcmd>:
-
-struct cmd*
-backcmd(struct cmd *subcmd)
-{
-     95b:	55                   	push   %ebp
-     95c:	89 e5                	mov    %esp,%ebp
-     95e:	83 ec 28             	sub    $0x28,%esp
-  struct backcmd *cmd;
-
-  cmd = malloc(sizeof(*cmd));
-     961:	c7 04 24 08 00 00 00 	movl   $0x8,(%esp)
-     968:	e8 e2 0e 00 00       	call   184f <malloc>
-     96d:	89 45 f4             	mov    %eax,-0xc(%ebp)
-  memset(cmd, 0, sizeof(*cmd));
-     970:	c7 44 24 08 08 00 00 	movl   $0x8,0x8(%esp)
-     977:	00 
-     978:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
-     97f:	00 
-     980:	8b 45 f4             	mov    -0xc(%ebp),%eax
-     983:	89 04 24             	mov    %eax,(%esp)
-     986:	e8 9c 08 00 00       	call   1227 <memset>
-  cmd->type = BACK;
-     98b:	8b 45 f4             	mov    -0xc(%ebp),%eax
-     98e:	c7 00 05 00 00 00    	movl   $0x5,(%eax)
-  cmd->cmd = subcmd;
-     994:	8b 45 f4             	mov    -0xc(%ebp),%eax
-     997:	8b 55 08             	mov    0x8(%ebp),%edx
-     99a:	89 50 04             	mov    %edx,0x4(%eax)
-  return (struct cmd*)cmd;
-     99d:	8b 45 f4             	mov    -0xc(%ebp),%eax
-}
-     9a0:	c9                   	leave  
-     9a1:	c3                   	ret    
-
-000009a2 <gettoken>:
-char whitespace[] = " \t\r\n\v";
-char symbols[] = "<|>&;()";
-
-int
-gettoken(char **ps, char *es, char **q, char **eq)
-{
-     9a2:	55                   	push   %ebp
-     9a3:	89 e5                	mov    %esp,%ebp
-     9a5:	83 ec 28             	sub    $0x28,%esp
-  char *s;
-  int ret;
-  
-  s = *ps;
-     9a8:	8b 45 08             	mov    0x8(%ebp),%eax
-     9ab:	8b 00                	mov    (%eax),%eax
-     9ad:	89 45 f4             	mov    %eax,-0xc(%ebp)
-  while(s < es && strchr(whitespace, *s))
-     9b0:	eb 04                	jmp    9b6 <gettoken+0x14>
-    s++;
-     9b2:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
-{
-  char *s;
-  int ret;
-  
-  s = *ps;
-  while(s < es && strchr(whitespace, *s))
-     9b6:	8b 45 f4             	mov    -0xc(%ebp),%eax
-     9b9:	3b 45 0c             	cmp    0xc(%ebp),%eax
-     9bc:	73 1d                	jae    9db <gettoken+0x39>
-     9be:	8b 45 f4             	mov    -0xc(%ebp),%eax
-     9c1:	0f b6 00             	movzbl (%eax),%eax
-     9c4:	0f be c0             	movsbl %al,%eax
-     9c7:	89 44 24 04          	mov    %eax,0x4(%esp)
-     9cb:	c7 04 24 50 1f 00 00 	movl   $0x1f50,(%esp)
-     9d2:	e8 74 08 00 00       	call   124b <strchr>
-     9d7:	85 c0                	test   %eax,%eax
-     9d9:	75 d7                	jne    9b2 <gettoken+0x10>
-    s++;
-  if(q)
-     9db:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
-     9df:	74 08                	je     9e9 <gettoken+0x47>
-    *q = s;
-     9e1:	8b 45 10             	mov    0x10(%ebp),%eax
-     9e4:	8b 55 f4             	mov    -0xc(%ebp),%edx
-     9e7:	89 10                	mov    %edx,(%eax)
-  ret = *s;
-     9e9:	8b 45 f4             	mov    -0xc(%ebp),%eax
-     9ec:	0f b6 00             	movzbl (%eax),%eax
-     9ef:	0f be c0             	movsbl %al,%eax
-     9f2:	89 45 f0             	mov    %eax,-0x10(%ebp)
-  switch(*s){
-     9f5:	8b 45 f4             	mov    -0xc(%ebp),%eax
-     9f8:	0f b6 00             	movzbl (%eax),%eax
-     9fb:	0f be c0             	movsbl %al,%eax
-     9fe:	83 f8 3c             	cmp    $0x3c,%eax
-     a01:	7f 1e                	jg     a21 <gettoken+0x7f>
-     a03:	83 f8 3b             	cmp    $0x3b,%eax
-     a06:	7d 23                	jge    a2b <gettoken+0x89>
-     a08:	83 f8 29             	cmp    $0x29,%eax
-     a0b:	7f 3f                	jg     a4c <gettoken+0xaa>
-     a0d:	83 f8 28             	cmp    $0x28,%eax
-     a10:	7d 19                	jge    a2b <gettoken+0x89>
-     a12:	85 c0                	test   %eax,%eax
-     a14:	0f 84 83 00 00 00    	je     a9d <gettoken+0xfb>
-     a1a:	83 f8 26             	cmp    $0x26,%eax
-     a1d:	74 0c                	je     a2b <gettoken+0x89>
-     a1f:	eb 2b                	jmp    a4c <gettoken+0xaa>
-     a21:	83 f8 3e             	cmp    $0x3e,%eax
-     a24:	74 0b                	je     a31 <gettoken+0x8f>
-     a26:	83 f8 7c             	cmp    $0x7c,%eax
-     a29:	75 21                	jne    a4c <gettoken+0xaa>
-  case '(':
-  case ')':
-  case ';':
-  case '&':
-  case '<':
-    s++;
-     a2b:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
-    break;
-     a2f:	eb 73                	jmp    aa4 <gettoken+0x102>
-  case '>':
-    s++;
-     a31:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
-    if(*s == '>'){
-     a35:	8b 45 f4             	mov    -0xc(%ebp),%eax
-     a38:	0f b6 00             	movzbl (%eax),%eax
-     a3b:	3c 3e                	cmp    $0x3e,%al
-     a3d:	75 61                	jne    aa0 <gettoken+0xfe>
-      ret = '+';
-     a3f:	c7 45 f0 2b 00 00 00 	movl   $0x2b,-0x10(%ebp)
-      s++;
-     a46:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
-    }
-    break;
-     a4a:	eb 54                	jmp    aa0 <gettoken+0xfe>
-  default:
-    ret = 'a';
-     a4c:	c7 45 f0 61 00 00 00 	movl   $0x61,-0x10(%ebp)
-    while(s < es && !strchr(whitespace, *s) && !strchr(symbols, *s))
-     a53:	eb 04                	jmp    a59 <gettoken+0xb7>
-      s++;
-     a55:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
-      s++;
-    }
-    break;
-  default:
-    ret = 'a';
-    while(s < es && !strchr(whitespace, *s) && !strchr(symbols, *s))
-     a59:	8b 45 f4             	mov    -0xc(%ebp),%eax
-     a5c:	3b 45 0c             	cmp    0xc(%ebp),%eax
-     a5f:	73 42                	jae    aa3 <gettoken+0x101>
-     a61:	8b 45 f4             	mov    -0xc(%ebp),%eax
-     a64:	0f b6 00             	movzbl (%eax),%eax
-     a67:	0f be c0             	movsbl %al,%eax
-     a6a:	89 44 24 04          	mov    %eax,0x4(%esp)
-     a6e:	c7 04 24 50 1f 00 00 	movl   $0x1f50,(%esp)
-     a75:	e8 d1 07 00 00       	call   124b <strchr>
-     a7a:	85 c0                	test   %eax,%eax
-     a7c:	75 25                	jne    aa3 <gettoken+0x101>
-     a7e:	8b 45 f4             	mov    -0xc(%ebp),%eax
-     a81:	0f b6 00             	movzbl (%eax),%eax
-     a84:	0f be c0             	movsbl %al,%eax
-     a87:	89 44 24 04          	mov    %eax,0x4(%esp)
-     a8b:	c7 04 24 56 1f 00 00 	movl   $0x1f56,(%esp)
-     a92:	e8 b4 07 00 00       	call   124b <strchr>
-     a97:	85 c0                	test   %eax,%eax
-     a99:	74 ba                	je     a55 <gettoken+0xb3>
-      s++;
-    break;
-     a9b:	eb 06                	jmp    aa3 <gettoken+0x101>
-  if(q)
-    *q = s;
-  ret = *s;
-  switch(*s){
-  case 0:
-    break;
-     a9d:	90                   	nop
-     a9e:	eb 04                	jmp    aa4 <gettoken+0x102>
-    s++;
-    if(*s == '>'){
-      ret = '+';
-      s++;
-    }
-    break;
-     aa0:	90                   	nop
-     aa1:	eb 01                	jmp    aa4 <gettoken+0x102>
-  default:
-    ret = 'a';
-    while(s < es && !strchr(whitespace, *s) && !strchr(symbols, *s))
-      s++;
-    break;
-     aa3:	90                   	nop
-  }
-  if(eq)
-     aa4:	83 7d 14 00          	cmpl   $0x0,0x14(%ebp)
-     aa8:	74 0e                	je     ab8 <gettoken+0x116>
-    *eq = s;
-     aaa:	8b 45 14             	mov    0x14(%ebp),%eax
-     aad:	8b 55 f4             	mov    -0xc(%ebp),%edx
-     ab0:	89 10                	mov    %edx,(%eax)
-  
-  while(s < es && strchr(whitespace, *s))
-     ab2:	eb 04                	jmp    ab8 <gettoken+0x116>
-    s++;
-     ab4:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
-    break;
-  }
-  if(eq)
-    *eq = s;
-  
-  while(s < es && strchr(whitespace, *s))
-     ab8:	8b 45 f4             	mov    -0xc(%ebp),%eax
-     abb:	3b 45 0c             	cmp    0xc(%ebp),%eax
-     abe:	73 1d                	jae    add <gettoken+0x13b>
-     ac0:	8b 45 f4             	mov    -0xc(%ebp),%eax
-     ac3:	0f b6 00             	movzbl (%eax),%eax
-     ac6:	0f be c0             	movsbl %al,%eax
-     ac9:	89 44 24 04          	mov    %eax,0x4(%esp)
-     acd:	c7 04 24 50 1f 00 00 	movl   $0x1f50,(%esp)
-     ad4:	e8 72 07 00 00       	call   124b <strchr>
-     ad9:	85 c0                	test   %eax,%eax
-     adb:	75 d7                	jne    ab4 <gettoken+0x112>
-    s++;
-  *ps = s;
-     add:	8b 45 08             	mov    0x8(%ebp),%eax
-     ae0:	8b 55 f4             	mov    -0xc(%ebp),%edx
-     ae3:	89 10                	mov    %edx,(%eax)
-  return ret;
-     ae5:	8b 45 f0             	mov    -0x10(%ebp),%eax
-}
-     ae8:	c9                   	leave  
-     ae9:	c3                   	ret    
-
-00000aea <peek>:
-
-int
-peek(char **ps, char *es, char *toks)
-{
-     aea:	55                   	push   %ebp
-     aeb:	89 e5                	mov    %esp,%ebp
-     aed:	83 ec 28             	sub    $0x28,%esp
-  char *s;
-  
-  s = *ps;
-     af0:	8b 45 08             	mov    0x8(%ebp),%eax
-     af3:	8b 00                	mov    (%eax),%eax
-     af5:	89 45 f4             	mov    %eax,-0xc(%ebp)
-  while(s < es && strchr(whitespace, *s))
-     af8:	eb 04                	jmp    afe <peek+0x14>
-    s++;
-     afa:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
-peek(char **ps, char *es, char *toks)
-{
-  char *s;
-  
-  s = *ps;
-  while(s < es && strchr(whitespace, *s))
-     afe:	8b 45 f4             	mov    -0xc(%ebp),%eax
-     b01:	3b 45 0c             	cmp    0xc(%ebp),%eax
-     b04:	73 1d                	jae    b23 <peek+0x39>
-     b06:	8b 45 f4             	mov    -0xc(%ebp),%eax
-     b09:	0f b6 00             	movzbl (%eax),%eax
-     b0c:	0f be c0             	movsbl %al,%eax
-     b0f:	89 44 24 04          	mov    %eax,0x4(%esp)
-     b13:	c7 04 24 50 1f 00 00 	movl   $0x1f50,(%esp)
-     b1a:	e8 2c 07 00 00       	call   124b <strchr>
-     b1f:	85 c0                	test   %eax,%eax
-     b21:	75 d7                	jne    afa <peek+0x10>
-    s++;
-  *ps = s;
-     b23:	8b 45 08             	mov    0x8(%ebp),%eax
-     b26:	8b 55 f4             	mov    -0xc(%ebp),%edx
-     b29:	89 10                	mov    %edx,(%eax)
-  return *s && strchr(toks, *s);
-     b2b:	8b 45 f4             	mov    -0xc(%ebp),%eax
-     b2e:	0f b6 00             	movzbl (%eax),%eax
-     b31:	84 c0                	test   %al,%al
-     b33:	74 23                	je     b58 <peek+0x6e>
-     b35:	8b 45 f4             	mov    -0xc(%ebp),%eax
-     b38:	0f b6 00             	movzbl (%eax),%eax
-     b3b:	0f be c0             	movsbl %al,%eax
-     b3e:	89 44 24 04          	mov    %eax,0x4(%esp)
-     b42:	8b 45 10             	mov    0x10(%ebp),%eax
-     b45:	89 04 24             	mov    %eax,(%esp)
-     b48:	e8 fe 06 00 00       	call   124b <strchr>
-     b4d:	85 c0                	test   %eax,%eax
-     b4f:	74 07                	je     b58 <peek+0x6e>
-     b51:	b8 01 00 00 00       	mov    $0x1,%eax
-     b56:	eb 05                	jmp    b5d <peek+0x73>
-     b58:	b8 00 00 00 00       	mov    $0x0,%eax
-}
-     b5d:	c9                   	leave  
-     b5e:	c3                   	ret    
-
-00000b5f <parsecmd>:
-struct cmd *parseexec(char**, char*);
-struct cmd *nulterminate(struct cmd*);
-
-struct cmd*
-parsecmd(char *s)
-{
-     b5f:	55                   	push   %ebp
-     b60:	89 e5                	mov    %esp,%ebp
-     b62:	53                   	push   %ebx
-     b63:	83 ec 24             	sub    $0x24,%esp
-  char *es;
-  struct cmd *cmd;
-
-  es = s + strlen(s);
-     b66:	8b 5d 08             	mov    0x8(%ebp),%ebx
-     b69:	8b 45 08             	mov    0x8(%ebp),%eax
-     b6c:	89 04 24             	mov    %eax,(%esp)
-     b6f:	e8 8e 06 00 00       	call   1202 <strlen>
-     b74:	01 d8                	add    %ebx,%eax
-     b76:	89 45 f4             	mov    %eax,-0xc(%ebp)
-  cmd = parseline(&s, es);
-     b79:	8b 45 f4             	mov    -0xc(%ebp),%eax
-     b7c:	89 44 24 04          	mov    %eax,0x4(%esp)
-     b80:	8d 45 08             	lea    0x8(%ebp),%eax
-     b83:	89 04 24             	mov    %eax,(%esp)
-     b86:	e8 60 00 00 00       	call   beb <parseline>
-     b8b:	89 45 f0             	mov    %eax,-0x10(%ebp)
-  peek(&s, es, "");
-     b8e:	c7 44 24 08 e6 19 00 	movl   $0x19e6,0x8(%esp)
-     b95:	00 
-     b96:	8b 45 f4             	mov    -0xc(%ebp),%eax
-     b99:	89 44 24 04          	mov    %eax,0x4(%esp)
-     b9d:	8d 45 08             	lea    0x8(%ebp),%eax
-     ba0:	89 04 24             	mov    %eax,(%esp)
-     ba3:	e8 42 ff ff ff       	call   aea <peek>
-  if(s != es){
-     ba8:	8b 45 08             	mov    0x8(%ebp),%eax
-     bab:	3b 45 f4             	cmp    -0xc(%ebp),%eax
-     bae:	74 27                	je     bd7 <parsecmd+0x78>
-    printf(2, "leftovers: %s\n", s);
-     bb0:	8b 45 08             	mov    0x8(%ebp),%eax
-     bb3:	89 44 24 08          	mov    %eax,0x8(%esp)
-     bb7:	c7 44 24 04 e7 19 00 	movl   $0x19e7,0x4(%esp)
-     bbe:	00 
-     bbf:	c7 04 24 02 00 00 00 	movl   $0x2,(%esp)
-     bc6:	e8 a0 09 00 00       	call   156b <printf>
-    panic("syntax");
-     bcb:	c7 04 24 f6 19 00 00 	movl   $0x19f6,(%esp)
-     bd2:	e8 e9 fb ff ff       	call   7c0 <panic>
-  }
-  nulterminate(cmd);
-     bd7:	8b 45 f0             	mov    -0x10(%ebp),%eax
-     bda:	89 04 24             	mov    %eax,(%esp)
-     bdd:	e8 a5 04 00 00       	call   1087 <nulterminate>
-  return cmd;
-     be2:	8b 45 f0             	mov    -0x10(%ebp),%eax
-}
-     be5:	83 c4 24             	add    $0x24,%esp
-     be8:	5b                   	pop    %ebx
-     be9:	5d                   	pop    %ebp
-     bea:	c3                   	ret    
-
-00000beb <parseline>:
-
-struct cmd*
-parseline(char **ps, char *es)
-{
-     beb:	55                   	push   %ebp
-     bec:	89 e5                	mov    %esp,%ebp
-     bee:	83 ec 28             	sub    $0x28,%esp
-  struct cmd *cmd;
-
-  cmd = parsepipe(ps, es);
-     bf1:	8b 45 0c             	mov    0xc(%ebp),%eax
-     bf4:	89 44 24 04          	mov    %eax,0x4(%esp)
-     bf8:	8b 45 08             	mov    0x8(%ebp),%eax
-     bfb:	89 04 24             	mov    %eax,(%esp)
-     bfe:	e8 bc 00 00 00       	call   cbf <parsepipe>
-     c03:	89 45 f4             	mov    %eax,-0xc(%ebp)
-  while(peek(ps, es, "&")){
-     c06:	eb 30                	jmp    c38 <parseline+0x4d>
-    gettoken(ps, es, 0, 0);
-     c08:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
-     c0f:	00 
-     c10:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
-     c17:	00 
-     c18:	8b 45 0c             	mov    0xc(%ebp),%eax
-     c1b:	89 44 24 04          	mov    %eax,0x4(%esp)
-     c1f:	8b 45 08             	mov    0x8(%ebp),%eax
-     c22:	89 04 24             	mov    %eax,(%esp)
-     c25:	e8 78 fd ff ff       	call   9a2 <gettoken>
-    cmd = backcmd(cmd);
-     c2a:	8b 45 f4             	mov    -0xc(%ebp),%eax
-     c2d:	89 04 24             	mov    %eax,(%esp)
-     c30:	e8 26 fd ff ff       	call   95b <backcmd>
-     c35:	89 45 f4             	mov    %eax,-0xc(%ebp)
-parseline(char **ps, char *es)
-{
-  struct cmd *cmd;
-
-  cmd = parsepipe(ps, es);
-  while(peek(ps, es, "&")){
-     c38:	c7 44 24 08 fd 19 00 	movl   $0x19fd,0x8(%esp)
-     c3f:	00 
-     c40:	8b 45 0c             	mov    0xc(%ebp),%eax
-     c43:	89 44 24 04          	mov    %eax,0x4(%esp)
-     c47:	8b 45 08             	mov    0x8(%ebp),%eax
-     c4a:	89 04 24             	mov    %eax,(%esp)
-     c4d:	e8 98 fe ff ff       	call   aea <peek>
-     c52:	85 c0                	test   %eax,%eax
-     c54:	75 b2                	jne    c08 <parseline+0x1d>
-    gettoken(ps, es, 0, 0);
-    cmd = backcmd(cmd);
-  }
-  if(peek(ps, es, ";")){
-     c56:	c7 44 24 08 ff 19 00 	movl   $0x19ff,0x8(%esp)
-     c5d:	00 
-     c5e:	8b 45 0c             	mov    0xc(%ebp),%eax
-     c61:	89 44 24 04          	mov    %eax,0x4(%esp)
-     c65:	8b 45 08             	mov    0x8(%ebp),%eax
-     c68:	89 04 24             	mov    %eax,(%esp)
-     c6b:	e8 7a fe ff ff       	call   aea <peek>
-     c70:	85 c0                	test   %eax,%eax
-     c72:	74 46                	je     cba <parseline+0xcf>
-    gettoken(ps, es, 0, 0);
-     c74:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
-     c7b:	00 
-     c7c:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
-     c83:	00 
-     c84:	8b 45 0c             	mov    0xc(%ebp),%eax
-     c87:	89 44 24 04          	mov    %eax,0x4(%esp)
-     c8b:	8b 45 08             	mov    0x8(%ebp),%eax
-     c8e:	89 04 24             	mov    %eax,(%esp)
-     c91:	e8 0c fd ff ff       	call   9a2 <gettoken>
-    cmd = listcmd(cmd, parseline(ps, es));
-     c96:	8b 45 0c             	mov    0xc(%ebp),%eax
-     c99:	89 44 24 04          	mov    %eax,0x4(%esp)
-     c9d:	8b 45 08             	mov    0x8(%ebp),%eax
-     ca0:	89 04 24             	mov    %eax,(%esp)
-     ca3:	e8 43 ff ff ff       	call   beb <parseline>
-     ca8:	89 44 24 04          	mov    %eax,0x4(%esp)
-     cac:	8b 45 f4             	mov    -0xc(%ebp),%eax
-     caf:	89 04 24             	mov    %eax,(%esp)
-     cb2:	e8 54 fc ff ff       	call   90b <listcmd>
-     cb7:	89 45 f4             	mov    %eax,-0xc(%ebp)
-  }
-  return cmd;
-     cba:	8b 45 f4             	mov    -0xc(%ebp),%eax
-}
-     cbd:	c9                   	leave  
-     cbe:	c3                   	ret    
-
-00000cbf <parsepipe>:
-
-struct cmd*
-parsepipe(char **ps, char *es)
-{
-     cbf:	55                   	push   %ebp
-     cc0:	89 e5                	mov    %esp,%ebp
-     cc2:	83 ec 28             	sub    $0x28,%esp
-  struct cmd *cmd;
-
-  cmd = parseexec(ps, es);
-     cc5:	8b 45 0c             	mov    0xc(%ebp),%eax
-     cc8:	89 44 24 04          	mov    %eax,0x4(%esp)
-     ccc:	8b 45 08             	mov    0x8(%ebp),%eax
-     ccf:	89 04 24             	mov    %eax,(%esp)
-     cd2:	e8 68 02 00 00       	call   f3f <parseexec>
-     cd7:	89 45 f4             	mov    %eax,-0xc(%ebp)
-  if(peek(ps, es, "|")){
-     cda:	c7 44 24 08 01 1a 00 	movl   $0x1a01,0x8(%esp)
-     ce1:	00 
-     ce2:	8b 45 0c             	mov    0xc(%ebp),%eax
-     ce5:	89 44 24 04          	mov    %eax,0x4(%esp)
-     ce9:	8b 45 08             	mov    0x8(%ebp),%eax
-     cec:	89 04 24             	mov    %eax,(%esp)
-     cef:	e8 f6 fd ff ff       	call   aea <peek>
-     cf4:	85 c0                	test   %eax,%eax
-     cf6:	74 46                	je     d3e <parsepipe+0x7f>
-    gettoken(ps, es, 0, 0);
-     cf8:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
-     cff:	00 
-     d00:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
-     d07:	00 
-     d08:	8b 45 0c             	mov    0xc(%ebp),%eax
-     d0b:	89 44 24 04          	mov    %eax,0x4(%esp)
-     d0f:	8b 45 08             	mov    0x8(%ebp),%eax
-     d12:	89 04 24             	mov    %eax,(%esp)
-     d15:	e8 88 fc ff ff       	call   9a2 <gettoken>
-    cmd = pipecmd(cmd, parsepipe(ps, es));
-     d1a:	8b 45 0c             	mov    0xc(%ebp),%eax
-     d1d:	89 44 24 04          	mov    %eax,0x4(%esp)
-     d21:	8b 45 08             	mov    0x8(%ebp),%eax
-     d24:	89 04 24             	mov    %eax,(%esp)
-     d27:	e8 93 ff ff ff       	call   cbf <parsepipe>
-     d2c:	89 44 24 04          	mov    %eax,0x4(%esp)
-     d30:	8b 45 f4             	mov    -0xc(%ebp),%eax
-     d33:	89 04 24             	mov    %eax,(%esp)
-     d36:	e8 80 fb ff ff       	call   8bb <pipecmd>
-     d3b:	89 45 f4             	mov    %eax,-0xc(%ebp)
-  }
-  return cmd;
-     d3e:	8b 45 f4             	mov    -0xc(%ebp),%eax
-}
-     d41:	c9                   	leave  
-     d42:	c3                   	ret    
-
-00000d43 <parseredirs>:
-
-struct cmd*
-parseredirs(struct cmd *cmd, char **ps, char *es)
-{
-     d43:	55                   	push   %ebp
-     d44:	89 e5                	mov    %esp,%ebp
-     d46:	83 ec 38             	sub    $0x38,%esp
-  int tok;
-  char *q, *eq;
-
-  while(peek(ps, es, "<>")){
-     d49:	e9 f6 00 00 00       	jmp    e44 <parseredirs+0x101>
-    tok = gettoken(ps, es, 0, 0);
-     d4e:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
-     d55:	00 
-     d56:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
-     d5d:	00 
-     d5e:	8b 45 10             	mov    0x10(%ebp),%eax
-     d61:	89 44 24 04          	mov    %eax,0x4(%esp)
-     d65:	8b 45 0c             	mov    0xc(%ebp),%eax
-     d68:	89 04 24             	mov    %eax,(%esp)
-     d6b:	e8 32 fc ff ff       	call   9a2 <gettoken>
-     d70:	89 45 f4             	mov    %eax,-0xc(%ebp)
-    if(gettoken(ps, es, &q, &eq) != 'a')
-     d73:	8d 45 ec             	lea    -0x14(%ebp),%eax
-     d76:	89 44 24 0c          	mov    %eax,0xc(%esp)
-     d7a:	8d 45 f0             	lea    -0x10(%ebp),%eax
-     d7d:	89 44 24 08          	mov    %eax,0x8(%esp)
-     d81:	8b 45 10             	mov    0x10(%ebp),%eax
-     d84:	89 44 24 04          	mov    %eax,0x4(%esp)
-     d88:	8b 45 0c             	mov    0xc(%ebp),%eax
-     d8b:	89 04 24             	mov    %eax,(%esp)
-     d8e:	e8 0f fc ff ff       	call   9a2 <gettoken>
-     d93:	83 f8 61             	cmp    $0x61,%eax
-     d96:	74 0c                	je     da4 <parseredirs+0x61>
-      panic("missing file for redirection");
-     d98:	c7 04 24 03 1a 00 00 	movl   $0x1a03,(%esp)
-     d9f:	e8 1c fa ff ff       	call   7c0 <panic>
-    switch(tok){
-     da4:	8b 45 f4             	mov    -0xc(%ebp),%eax
-     da7:	83 f8 3c             	cmp    $0x3c,%eax
-     daa:	74 0f                	je     dbb <parseredirs+0x78>
-     dac:	83 f8 3e             	cmp    $0x3e,%eax
-     daf:	74 38                	je     de9 <parseredirs+0xa6>
-     db1:	83 f8 2b             	cmp    $0x2b,%eax
-     db4:	74 61                	je     e17 <parseredirs+0xd4>
-     db6:	e9 89 00 00 00       	jmp    e44 <parseredirs+0x101>
-    case '<':
-      cmd = redircmd(cmd, q, eq, O_RDONLY, 0);
-     dbb:	8b 55 ec             	mov    -0x14(%ebp),%edx
-     dbe:	8b 45 f0             	mov    -0x10(%ebp),%eax
-     dc1:	c7 44 24 10 00 00 00 	movl   $0x0,0x10(%esp)
-     dc8:	00 
-     dc9:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
-     dd0:	00 
-     dd1:	89 54 24 08          	mov    %edx,0x8(%esp)
-     dd5:	89 44 24 04          	mov    %eax,0x4(%esp)
-     dd9:	8b 45 08             	mov    0x8(%ebp),%eax
-     ddc:	89 04 24             	mov    %eax,(%esp)
-     ddf:	e8 6c fa ff ff       	call   850 <redircmd>
-     de4:	89 45 08             	mov    %eax,0x8(%ebp)
-      break;
-     de7:	eb 5b                	jmp    e44 <parseredirs+0x101>
-    case '>':
-      cmd = redircmd(cmd, q, eq, O_WRONLY|O_CREATE, 1);
-     de9:	8b 55 ec             	mov    -0x14(%ebp),%edx
-     dec:	8b 45 f0             	mov    -0x10(%ebp),%eax
-     def:	c7 44 24 10 01 00 00 	movl   $0x1,0x10(%esp)
-     df6:	00 
-     df7:	c7 44 24 0c 01 02 00 	movl   $0x201,0xc(%esp)
-     dfe:	00 
-     dff:	89 54 24 08          	mov    %edx,0x8(%esp)
-     e03:	89 44 24 04          	mov    %eax,0x4(%esp)
-     e07:	8b 45 08             	mov    0x8(%ebp),%eax
-     e0a:	89 04 24             	mov    %eax,(%esp)
-     e0d:	e8 3e fa ff ff       	call   850 <redircmd>
-     e12:	89 45 08             	mov    %eax,0x8(%ebp)
-      break;
-     e15:	eb 2d                	jmp    e44 <parseredirs+0x101>
-    case '+':  // >>
-      cmd = redircmd(cmd, q, eq, O_WRONLY|O_CREATE, 1);
-     e17:	8b 55 ec             	mov    -0x14(%ebp),%edx
-     e1a:	8b 45 f0             	mov    -0x10(%ebp),%eax
-     e1d:	c7 44 24 10 01 00 00 	movl   $0x1,0x10(%esp)
-     e24:	00 
-     e25:	c7 44 24 0c 01 02 00 	movl   $0x201,0xc(%esp)
-     e2c:	00 
-     e2d:	89 54 24 08          	mov    %edx,0x8(%esp)
-     e31:	89 44 24 04          	mov    %eax,0x4(%esp)
-     e35:	8b 45 08             	mov    0x8(%ebp),%eax
-     e38:	89 04 24             	mov    %eax,(%esp)
-     e3b:	e8 10 fa ff ff       	call   850 <redircmd>
-     e40:	89 45 08             	mov    %eax,0x8(%ebp)
-      break;
-     e43:	90                   	nop
-parseredirs(struct cmd *cmd, char **ps, char *es)
-{
-  int tok;
-  char *q, *eq;
-
-  while(peek(ps, es, "<>")){
-     e44:	c7 44 24 08 20 1a 00 	movl   $0x1a20,0x8(%esp)
-     e4b:	00 
-     e4c:	8b 45 10             	mov    0x10(%ebp),%eax
-     e4f:	89 44 24 04          	mov    %eax,0x4(%esp)
-     e53:	8b 45 0c             	mov    0xc(%ebp),%eax
-     e56:	89 04 24             	mov    %eax,(%esp)
-     e59:	e8 8c fc ff ff       	call   aea <peek>
-     e5e:	85 c0                	test   %eax,%eax
-     e60:	0f 85 e8 fe ff ff    	jne    d4e <parseredirs+0xb>
-    case '+':  // >>
-      cmd = redircmd(cmd, q, eq, O_WRONLY|O_CREATE, 1);
-      break;
-    }
-  }
-  return cmd;
-     e66:	8b 45 08             	mov    0x8(%ebp),%eax
-}
-     e69:	c9                   	leave  
-     e6a:	c3                   	ret    
-
-00000e6b <parseblock>:
-
-struct cmd*
-parseblock(char **ps, char *es)
-{
-     e6b:	55                   	push   %ebp
-     e6c:	89 e5                	mov    %esp,%ebp
-     e6e:	83 ec 28             	sub    $0x28,%esp
-  struct cmd *cmd;
-
-  if(!peek(ps, es, "("))
-     e71:	c7 44 24 08 23 1a 00 	movl   $0x1a23,0x8(%esp)
-     e78:	00 
-     e79:	8b 45 0c             	mov    0xc(%ebp),%eax
-     e7c:	89 44 24 04          	mov    %eax,0x4(%esp)
-     e80:	8b 45 08             	mov    0x8(%ebp),%eax
-     e83:	89 04 24             	mov    %eax,(%esp)
-     e86:	e8 5f fc ff ff       	call   aea <peek>
-     e8b:	85 c0                	test   %eax,%eax
-     e8d:	75 0c                	jne    e9b <parseblock+0x30>
-    panic("parseblock");
-     e8f:	c7 04 24 25 1a 00 00 	movl   $0x1a25,(%esp)
-     e96:	e8 25 f9 ff ff       	call   7c0 <panic>
-  gettoken(ps, es, 0, 0);
-     e9b:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
-     ea2:	00 
-     ea3:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
-     eaa:	00 
-     eab:	8b 45 0c             	mov    0xc(%ebp),%eax
-     eae:	89 44 24 04          	mov    %eax,0x4(%esp)
-     eb2:	8b 45 08             	mov    0x8(%ebp),%eax
-     eb5:	89 04 24             	mov    %eax,(%esp)
-     eb8:	e8 e5 fa ff ff       	call   9a2 <gettoken>
-  cmd = parseline(ps, es);
-     ebd:	8b 45 0c             	mov    0xc(%ebp),%eax
-     ec0:	89 44 24 04          	mov    %eax,0x4(%esp)
-     ec4:	8b 45 08             	mov    0x8(%ebp),%eax
-     ec7:	89 04 24             	mov    %eax,(%esp)
-     eca:	e8 1c fd ff ff       	call   beb <parseline>
-     ecf:	89 45 f4             	mov    %eax,-0xc(%ebp)
-  if(!peek(ps, es, ")"))
-     ed2:	c7 44 24 08 30 1a 00 	movl   $0x1a30,0x8(%esp)
-     ed9:	00 
-     eda:	8b 45 0c             	mov    0xc(%ebp),%eax
-     edd:	89 44 24 04          	mov    %eax,0x4(%esp)
-     ee1:	8b 45 08             	mov    0x8(%ebp),%eax
-     ee4:	89 04 24             	mov    %eax,(%esp)
-     ee7:	e8 fe fb ff ff       	call   aea <peek>
-     eec:	85 c0                	test   %eax,%eax
-     eee:	75 0c                	jne    efc <parseblock+0x91>
-    panic("syntax - missing )");
-     ef0:	c7 04 24 32 1a 00 00 	movl   $0x1a32,(%esp)
-     ef7:	e8 c4 f8 ff ff       	call   7c0 <panic>
-  gettoken(ps, es, 0, 0);
-     efc:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
-     f03:	00 
-     f04:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
-     f0b:	00 
-     f0c:	8b 45 0c             	mov    0xc(%ebp),%eax
-     f0f:	89 44 24 04          	mov    %eax,0x4(%esp)
-     f13:	8b 45 08             	mov    0x8(%ebp),%eax
-     f16:	89 04 24             	mov    %eax,(%esp)
-     f19:	e8 84 fa ff ff       	call   9a2 <gettoken>
-  cmd = parseredirs(cmd, ps, es);
-     f1e:	8b 45 0c             	mov    0xc(%ebp),%eax
-     f21:	89 44 24 08          	mov    %eax,0x8(%esp)
-     f25:	8b 45 08             	mov    0x8(%ebp),%eax
-     f28:	89 44 24 04          	mov    %eax,0x4(%esp)
-     f2c:	8b 45 f4             	mov    -0xc(%ebp),%eax
-     f2f:	89 04 24             	mov    %eax,(%esp)
-     f32:	e8 0c fe ff ff       	call   d43 <parseredirs>
-     f37:	89 45 f4             	mov    %eax,-0xc(%ebp)
-  return cmd;
-     f3a:	8b 45 f4             	mov    -0xc(%ebp),%eax
-}
-     f3d:	c9                   	leave  
-     f3e:	c3                   	ret    
-
-00000f3f <parseexec>:
-
-struct cmd*
-parseexec(char **ps, char *es)
-{
-     f3f:	55                   	push   %ebp
-     f40:	89 e5                	mov    %esp,%ebp
-     f42:	83 ec 38             	sub    $0x38,%esp
-  char *q, *eq;
-  int tok, argc;
-  struct execcmd *cmd;
-  struct cmd *ret;
-  
-  if(peek(ps, es, "("))
-     f45:	c7 44 24 08 23 1a 00 	movl   $0x1a23,0x8(%esp)
-     f4c:	00 
-     f4d:	8b 45 0c             	mov    0xc(%ebp),%eax
-     f50:	89 44 24 04          	mov    %eax,0x4(%esp)
-     f54:	8b 45 08             	mov    0x8(%ebp),%eax
-     f57:	89 04 24             	mov    %eax,(%esp)
-     f5a:	e8 8b fb ff ff       	call   aea <peek>
-     f5f:	85 c0                	test   %eax,%eax
-     f61:	74 17                	je     f7a <parseexec+0x3b>
-    return parseblock(ps, es);
-     f63:	8b 45 0c             	mov    0xc(%ebp),%eax
-     f66:	89 44 24 04          	mov    %eax,0x4(%esp)
-     f6a:	8b 45 08             	mov    0x8(%ebp),%eax
-     f6d:	89 04 24             	mov    %eax,(%esp)
-     f70:	e8 f6 fe ff ff       	call   e6b <parseblock>
-     f75:	e9 0b 01 00 00       	jmp    1085 <parseexec+0x146>
-
-  ret = execcmd();
-     f7a:	e8 93 f8 ff ff       	call   812 <execcmd>
-     f7f:	89 45 f0             	mov    %eax,-0x10(%ebp)
-  cmd = (struct execcmd*)ret;
-     f82:	8b 45 f0             	mov    -0x10(%ebp),%eax
-     f85:	89 45 ec             	mov    %eax,-0x14(%ebp)
-
-  argc = 0;
-     f88:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
-  ret = parseredirs(ret, ps, es);
-     f8f:	8b 45 0c             	mov    0xc(%ebp),%eax
-     f92:	89 44 24 08          	mov    %eax,0x8(%esp)
-     f96:	8b 45 08             	mov    0x8(%ebp),%eax
-     f99:	89 44 24 04          	mov    %eax,0x4(%esp)
-     f9d:	8b 45 f0             	mov    -0x10(%ebp),%eax
-     fa0:	89 04 24             	mov    %eax,(%esp)
-     fa3:	e8 9b fd ff ff       	call   d43 <parseredirs>
-     fa8:	89 45 f0             	mov    %eax,-0x10(%ebp)
-  while(!peek(ps, es, "|)&;")){
-     fab:	e9 8e 00 00 00       	jmp    103e <parseexec+0xff>
-    if((tok=gettoken(ps, es, &q, &eq)) == 0)
-     fb0:	8d 45 e0             	lea    -0x20(%ebp),%eax
-     fb3:	89 44 24 0c          	mov    %eax,0xc(%esp)
-     fb7:	8d 45 e4             	lea    -0x1c(%ebp),%eax
-     fba:	89 44 24 08          	mov    %eax,0x8(%esp)
-     fbe:	8b 45 0c             	mov    0xc(%ebp),%eax
-     fc1:	89 44 24 04          	mov    %eax,0x4(%esp)
-     fc5:	8b 45 08             	mov    0x8(%ebp),%eax
-     fc8:	89 04 24             	mov    %eax,(%esp)
-     fcb:	e8 d2 f9 ff ff       	call   9a2 <gettoken>
-     fd0:	89 45 e8             	mov    %eax,-0x18(%ebp)
-     fd3:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
-     fd7:	0f 84 85 00 00 00    	je     1062 <parseexec+0x123>
-      break;
-    if(tok != 'a')
-     fdd:	83 7d e8 61          	cmpl   $0x61,-0x18(%ebp)
-     fe1:	74 0c                	je     fef <parseexec+0xb0>
-      panic("syntax");
-     fe3:	c7 04 24 f6 19 00 00 	movl   $0x19f6,(%esp)
-     fea:	e8 d1 f7 ff ff       	call   7c0 <panic>
-    cmd->argv[argc] = q;
-     fef:	8b 4d e4             	mov    -0x1c(%ebp),%ecx
-     ff2:	8b 45 ec             	mov    -0x14(%ebp),%eax
-     ff5:	8b 55 f4             	mov    -0xc(%ebp),%edx
-     ff8:	89 4c 90 04          	mov    %ecx,0x4(%eax,%edx,4)
-    cmd->eargv[argc] = eq;
-     ffc:	8b 55 e0             	mov    -0x20(%ebp),%edx
-     fff:	8b 45 ec             	mov    -0x14(%ebp),%eax
-    1002:	8b 4d f4             	mov    -0xc(%ebp),%ecx
-    1005:	83 c1 08             	add    $0x8,%ecx
-    1008:	89 54 88 0c          	mov    %edx,0xc(%eax,%ecx,4)
-    argc++;
-    100c:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
-    if(argc >= MAXARGS)
-    1010:	83 7d f4 09          	cmpl   $0x9,-0xc(%ebp)
-    1014:	7e 0c                	jle    1022 <parseexec+0xe3>
-      panic("too many args");
-    1016:	c7 04 24 45 1a 00 00 	movl   $0x1a45,(%esp)
-    101d:	e8 9e f7 ff ff       	call   7c0 <panic>
-    ret = parseredirs(ret, ps, es);
-    1022:	8b 45 0c             	mov    0xc(%ebp),%eax
-    1025:	89 44 24 08          	mov    %eax,0x8(%esp)
-    1029:	8b 45 08             	mov    0x8(%ebp),%eax
-    102c:	89 44 24 04          	mov    %eax,0x4(%esp)
-    1030:	8b 45 f0             	mov    -0x10(%ebp),%eax
-    1033:	89 04 24             	mov    %eax,(%esp)
-    1036:	e8 08 fd ff ff       	call   d43 <parseredirs>
-    103b:	89 45 f0             	mov    %eax,-0x10(%ebp)
-  ret = execcmd();
-  cmd = (struct execcmd*)ret;
-
-  argc = 0;
-  ret = parseredirs(ret, ps, es);
-  while(!peek(ps, es, "|)&;")){
-    103e:	c7 44 24 08 53 1a 00 	movl   $0x1a53,0x8(%esp)
-    1045:	00 
-    1046:	8b 45 0c             	mov    0xc(%ebp),%eax
-    1049:	89 44 24 04          	mov    %eax,0x4(%esp)
-    104d:	8b 45 08             	mov    0x8(%ebp),%eax
-    1050:	89 04 24             	mov    %eax,(%esp)
-    1053:	e8 92 fa ff ff       	call   aea <peek>
-    1058:	85 c0                	test   %eax,%eax
-    105a:	0f 84 50 ff ff ff    	je     fb0 <parseexec+0x71>
-    1060:	eb 01                	jmp    1063 <parseexec+0x124>
-    if((tok=gettoken(ps, es, &q, &eq)) == 0)
-      break;
-    1062:	90                   	nop
-    argc++;
-    if(argc >= MAXARGS)
-      panic("too many args");
-    ret = parseredirs(ret, ps, es);
-  }
-  cmd->argv[argc] = 0;
-    1063:	8b 45 ec             	mov    -0x14(%ebp),%eax
-    1066:	8b 55 f4             	mov    -0xc(%ebp),%edx
-    1069:	c7 44 90 04 00 00 00 	movl   $0x0,0x4(%eax,%edx,4)
-    1070:	00 
-  cmd->eargv[argc] = 0;
-    1071:	8b 45 ec             	mov    -0x14(%ebp),%eax
-    1074:	8b 55 f4             	mov    -0xc(%ebp),%edx
-    1077:	83 c2 08             	add    $0x8,%edx
-    107a:	c7 44 90 0c 00 00 00 	movl   $0x0,0xc(%eax,%edx,4)
-    1081:	00 
-  return ret;
-    1082:	8b 45 f0             	mov    -0x10(%ebp),%eax
-}
-    1085:	c9                   	leave  
-    1086:	c3                   	ret    
-
-00001087 <nulterminate>:
-
-// NUL-terminate all the counted strings.
-struct cmd*
-nulterminate(struct cmd *cmd)
-{
-    1087:	55                   	push   %ebp
-    1088:	89 e5                	mov    %esp,%ebp
-    108a:	83 ec 38             	sub    $0x38,%esp
-  struct execcmd *ecmd;
-  struct listcmd *lcmd;
-  struct pipecmd *pcmd;
-  struct redircmd *rcmd;
-
-  if(cmd == 0)
-    108d:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
-    1091:	75 0a                	jne    109d <nulterminate+0x16>
-    return 0;
-    1093:	b8 00 00 00 00       	mov    $0x0,%eax
-    1098:	e9 c9 00 00 00       	jmp    1166 <nulterminate+0xdf>
-  
-  switch(cmd->type){
-    109d:	8b 45 08             	mov    0x8(%ebp),%eax
-    10a0:	8b 00                	mov    (%eax),%eax
-    10a2:	83 f8 05             	cmp    $0x5,%eax
-    10a5:	0f 87 b8 00 00 00    	ja     1163 <nulterminate+0xdc>
-    10ab:	8b 04 85 58 1a 00 00 	mov    0x1a58(,%eax,4),%eax
-    10b2:	ff e0                	jmp    *%eax
-  case EXEC:
-    ecmd = (struct execcmd*)cmd;
-    10b4:	8b 45 08             	mov    0x8(%ebp),%eax
-    10b7:	89 45 f0             	mov    %eax,-0x10(%ebp)
-    for(i=0; ecmd->argv[i]; i++)
-    10ba:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
-    10c1:	eb 14                	jmp    10d7 <nulterminate+0x50>
-      *ecmd->eargv[i] = 0;
-    10c3:	8b 45 f0             	mov    -0x10(%ebp),%eax
-    10c6:	8b 55 f4             	mov    -0xc(%ebp),%edx
-    10c9:	83 c2 08             	add    $0x8,%edx
-    10cc:	8b 44 90 0c          	mov    0xc(%eax,%edx,4),%eax
-    10d0:	c6 00 00             	movb   $0x0,(%eax)
-    return 0;
-  
-  switch(cmd->type){
-  case EXEC:
-    ecmd = (struct execcmd*)cmd;
-    for(i=0; ecmd->argv[i]; i++)
-    10d3:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
-    10d7:	8b 45 f0             	mov    -0x10(%ebp),%eax
-    10da:	8b 55 f4             	mov    -0xc(%ebp),%edx
-    10dd:	8b 44 90 04          	mov    0x4(%eax,%edx,4),%eax
-    10e1:	85 c0                	test   %eax,%eax
-    10e3:	75 de                	jne    10c3 <nulterminate+0x3c>
-      *ecmd->eargv[i] = 0;
-    break;
-    10e5:	eb 7c                	jmp    1163 <nulterminate+0xdc>
-
-  case REDIR:
-    rcmd = (struct redircmd*)cmd;
-    10e7:	8b 45 08             	mov    0x8(%ebp),%eax
-    10ea:	89 45 ec             	mov    %eax,-0x14(%ebp)
-    nulterminate(rcmd->cmd);
-    10ed:	8b 45 ec             	mov    -0x14(%ebp),%eax
-    10f0:	8b 40 04             	mov    0x4(%eax),%eax
-    10f3:	89 04 24             	mov    %eax,(%esp)
-    10f6:	e8 8c ff ff ff       	call   1087 <nulterminate>
-    *rcmd->efile = 0;
-    10fb:	8b 45 ec             	mov    -0x14(%ebp),%eax
-    10fe:	8b 40 0c             	mov    0xc(%eax),%eax
-    1101:	c6 00 00             	movb   $0x0,(%eax)
-    break;
-    1104:	eb 5d                	jmp    1163 <nulterminate+0xdc>
-
-  case PIPE:
-    pcmd = (struct pipecmd*)cmd;
-    1106:	8b 45 08             	mov    0x8(%ebp),%eax
-    1109:	89 45 e8             	mov    %eax,-0x18(%ebp)
-    nulterminate(pcmd->left);
-    110c:	8b 45 e8             	mov    -0x18(%ebp),%eax
-    110f:	8b 40 04             	mov    0x4(%eax),%eax
-    1112:	89 04 24             	mov    %eax,(%esp)
-    1115:	e8 6d ff ff ff       	call   1087 <nulterminate>
-    nulterminate(pcmd->right);
-    111a:	8b 45 e8             	mov    -0x18(%ebp),%eax
-    111d:	8b 40 08             	mov    0x8(%eax),%eax
-    1120:	89 04 24             	mov    %eax,(%esp)
-    1123:	e8 5f ff ff ff       	call   1087 <nulterminate>
-    break;
-    1128:	eb 39                	jmp    1163 <nulterminate+0xdc>
-    
-  case LIST:
-    lcmd = (struct listcmd*)cmd;
-    112a:	8b 45 08             	mov    0x8(%ebp),%eax
-    112d:	89 45 e4             	mov    %eax,-0x1c(%ebp)
-    nulterminate(lcmd->left);
-    1130:	8b 45 e4             	mov    -0x1c(%ebp),%eax
-    1133:	8b 40 04             	mov    0x4(%eax),%eax
-    1136:	89 04 24             	mov    %eax,(%esp)
-    1139:	e8 49 ff ff ff       	call   1087 <nulterminate>
-    nulterminate(lcmd->right);
-    113e:	8b 45 e4             	mov    -0x1c(%ebp),%eax
-    1141:	8b 40 08             	mov    0x8(%eax),%eax
-    1144:	89 04 24             	mov    %eax,(%esp)
-    1147:	e8 3b ff ff ff       	call   1087 <nulterminate>
-    break;
-    114c:	eb 15                	jmp    1163 <nulterminate+0xdc>
-
-  case BACK:
-    bcmd = (struct backcmd*)cmd;
-    114e:	8b 45 08             	mov    0x8(%ebp),%eax
-    1151:	89 45 e0             	mov    %eax,-0x20(%ebp)
-    nulterminate(bcmd->cmd);
-    1154:	8b 45 e0             	mov    -0x20(%ebp),%eax
-    1157:	8b 40 04             	mov    0x4(%eax),%eax
-    115a:	89 04 24             	mov    %eax,(%esp)
-    115d:	e8 25 ff ff ff       	call   1087 <nulterminate>
-    break;
-    1162:	90                   	nop
-  }
-  return cmd;
-    1163:	8b 45 08             	mov    0x8(%ebp),%eax
-}
-    1166:	c9                   	leave  
-    1167:	c3                   	ret    
-
-00001168 <stosb>:
-               "cc");
-}
-
-static inline void
-stosb(void *addr, int data, int cnt)
-{
-    1168:	55                   	push   %ebp
-    1169:	89 e5                	mov    %esp,%ebp
-    116b:	57                   	push   %edi
-    116c:	53                   	push   %ebx
-  asm volatile("cld; rep stosb" :
-    116d:	8b 4d 08             	mov    0x8(%ebp),%ecx
-    1170:	8b 55 10             	mov    0x10(%ebp),%edx
-    1173:	8b 45 0c             	mov    0xc(%ebp),%eax
-    1176:	89 cb                	mov    %ecx,%ebx
-    1178:	89 df                	mov    %ebx,%edi
-    117a:	89 d1                	mov    %edx,%ecx
-    117c:	fc                   	cld    
-    117d:	f3 aa                	rep stos %al,%es:(%edi)
-    117f:	89 ca                	mov    %ecx,%edx
-    1181:	89 fb                	mov    %edi,%ebx
-    1183:	89 5d 08             	mov    %ebx,0x8(%ebp)
-    1186:	89 55 10             	mov    %edx,0x10(%ebp)
-               "=D" (addr), "=c" (cnt) :
-               "0" (addr), "1" (cnt), "a" (data) :
-               "memory", "cc");
-}
-    1189:	5b                   	pop    %ebx
-    118a:	5f                   	pop    %edi
-    118b:	5d                   	pop    %ebp
-    118c:	c3                   	ret    
-
-0000118d <strcpy>:
-#include "user.h"
-#include "x86.h"
-
-char*
-strcpy(char *s, char *t)
-{
-    118d:	55                   	push   %ebp
-    118e:	89 e5                	mov    %esp,%ebp
-    1190:	83 ec 10             	sub    $0x10,%esp
-  char *os;
-
-  os = s;
-    1193:	8b 45 08             	mov    0x8(%ebp),%eax
-    1196:	89 45 fc             	mov    %eax,-0x4(%ebp)
-  while((*s++ = *t++) != 0)
-    1199:	90                   	nop
-    119a:	8b 45 0c             	mov    0xc(%ebp),%eax
-    119d:	0f b6 10             	movzbl (%eax),%edx
-    11a0:	8b 45 08             	mov    0x8(%ebp),%eax
-    11a3:	88 10                	mov    %dl,(%eax)
-    11a5:	8b 45 08             	mov    0x8(%ebp),%eax
-    11a8:	0f b6 00             	movzbl (%eax),%eax
-    11ab:	84 c0                	test   %al,%al
-    11ad:	0f 95 c0             	setne  %al
-    11b0:	83 45 08 01          	addl   $0x1,0x8(%ebp)
-    11b4:	83 45 0c 01          	addl   $0x1,0xc(%ebp)
-    11b8:	84 c0                	test   %al,%al
-    11ba:	75 de                	jne    119a <strcpy+0xd>
-    ;
-  return os;
-    11bc:	8b 45 fc             	mov    -0x4(%ebp),%eax
-}
-    11bf:	c9                   	leave  
-    11c0:	c3                   	ret    
-
-000011c1 <strcmp>:
-
-int
-strcmp(const char *p, const char *q)
-{
-    11c1:	55                   	push   %ebp
-    11c2:	89 e5                	mov    %esp,%ebp
-  while(*p && *p == *q)
-    11c4:	eb 08                	jmp    11ce <strcmp+0xd>
-    p++, q++;
-    11c6:	83 45 08 01          	addl   $0x1,0x8(%ebp)
-    11ca:	83 45 0c 01          	addl   $0x1,0xc(%ebp)
-}
-
-int
-strcmp(const char *p, const char *q)
-{
-  while(*p && *p == *q)
-    11ce:	8b 45 08             	mov    0x8(%ebp),%eax
-    11d1:	0f b6 00             	movzbl (%eax),%eax
-    11d4:	84 c0                	test   %al,%al
-    11d6:	74 10                	je     11e8 <strcmp+0x27>
-    11d8:	8b 45 08             	mov    0x8(%ebp),%eax
-    11db:	0f b6 10             	movzbl (%eax),%edx
-    11de:	8b 45 0c             	mov    0xc(%ebp),%eax
-    11e1:	0f b6 00             	movzbl (%eax),%eax
-    11e4:	38 c2                	cmp    %al,%dl
-    11e6:	74 de                	je     11c6 <strcmp+0x5>
-    p++, q++;
-  return (uchar)*p - (uchar)*q;
-    11e8:	8b 45 08             	mov    0x8(%ebp),%eax
-    11eb:	0f b6 00             	movzbl (%eax),%eax
-    11ee:	0f b6 d0             	movzbl %al,%edx
-    11f1:	8b 45 0c             	mov    0xc(%ebp),%eax
-    11f4:	0f b6 00             	movzbl (%eax),%eax
-    11f7:	0f b6 c0             	movzbl %al,%eax
-    11fa:	89 d1                	mov    %edx,%ecx
-    11fc:	29 c1                	sub    %eax,%ecx
-    11fe:	89 c8                	mov    %ecx,%eax
-}
-    1200:	5d                   	pop    %ebp
-    1201:	c3                   	ret    
-
-00001202 <strlen>:
-
-uint
-strlen(char *s)
-{
-    1202:	55                   	push   %ebp
-    1203:	89 e5                	mov    %esp,%ebp
-    1205:	83 ec 10             	sub    $0x10,%esp
-  int n;
-
-  for(n = 0; s[n]; n++)
-    1208:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
-    120f:	eb 04                	jmp    1215 <strlen+0x13>
-    1211:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
-    1215:	8b 45 fc             	mov    -0x4(%ebp),%eax
-    1218:	03 45 08             	add    0x8(%ebp),%eax
-    121b:	0f b6 00             	movzbl (%eax),%eax
-    121e:	84 c0                	test   %al,%al
-    1220:	75 ef                	jne    1211 <strlen+0xf>
-    ;
-  return n;
-    1222:	8b 45 fc             	mov    -0x4(%ebp),%eax
-}
-    1225:	c9                   	leave  
-    1226:	c3                   	ret    
-
-00001227 <memset>:
-
-void*
-memset(void *dst, int c, uint n)
-{
-    1227:	55                   	push   %ebp
-    1228:	89 e5                	mov    %esp,%ebp
-    122a:	83 ec 0c             	sub    $0xc,%esp
-  stosb(dst, c, n);
-    122d:	8b 45 10             	mov    0x10(%ebp),%eax
-    1230:	89 44 24 08          	mov    %eax,0x8(%esp)
-    1234:	8b 45 0c             	mov    0xc(%ebp),%eax
-    1237:	89 44 24 04          	mov    %eax,0x4(%esp)
-    123b:	8b 45 08             	mov    0x8(%ebp),%eax
-    123e:	89 04 24             	mov    %eax,(%esp)
-    1241:	e8 22 ff ff ff       	call   1168 <stosb>
-  return dst;
-    1246:	8b 45 08             	mov    0x8(%ebp),%eax
-}
-    1249:	c9                   	leave  
-    124a:	c3                   	ret    
-
-0000124b <strchr>:
-
-char*
-strchr(const char *s, char c)
-{
-    124b:	55                   	push   %ebp
-    124c:	89 e5                	mov    %esp,%ebp
-    124e:	83 ec 04             	sub    $0x4,%esp
-    1251:	8b 45 0c             	mov    0xc(%ebp),%eax
-    1254:	88 45 fc             	mov    %al,-0x4(%ebp)
-  for(; *s; s++)
-    1257:	eb 14                	jmp    126d <strchr+0x22>
-    if(*s == c)
-    1259:	8b 45 08             	mov    0x8(%ebp),%eax
-    125c:	0f b6 00             	movzbl (%eax),%eax
-    125f:	3a 45 fc             	cmp    -0x4(%ebp),%al
-    1262:	75 05                	jne    1269 <strchr+0x1e>
-      return (char*)s;
-    1264:	8b 45 08             	mov    0x8(%ebp),%eax
-    1267:	eb 13                	jmp    127c <strchr+0x31>
-}
-
-char*
-strchr(const char *s, char c)
-{
-  for(; *s; s++)
-    1269:	83 45 08 01          	addl   $0x1,0x8(%ebp)
-    126d:	8b 45 08             	mov    0x8(%ebp),%eax
-    1270:	0f b6 00             	movzbl (%eax),%eax
-    1273:	84 c0                	test   %al,%al
-    1275:	75 e2                	jne    1259 <strchr+0xe>
-    if(*s == c)
-      return (char*)s;
-  return 0;
-    1277:	b8 00 00 00 00       	mov    $0x0,%eax
-}
-    127c:	c9                   	leave  
-    127d:	c3                   	ret    
-
-0000127e <gets>:
-
-char*
-gets(char *buf, int max)
-{
-    127e:	55                   	push   %ebp
-    127f:	89 e5                	mov    %esp,%ebp
-    1281:	83 ec 28             	sub    $0x28,%esp
-  int i, cc;
-  char c;
-
-  for(i=0; i+1 < max; ){
-    1284:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
-    128b:	eb 44                	jmp    12d1 <gets+0x53>
-    cc = read(0, &c, 1);
-    128d:	c7 44 24 08 01 00 00 	movl   $0x1,0x8(%esp)
-    1294:	00 
-    1295:	8d 45 ef             	lea    -0x11(%ebp),%eax
-    1298:	89 44 24 04          	mov    %eax,0x4(%esp)
-    129c:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
-    12a3:	e8 3c 01 00 00       	call   13e4 <read>
-    12a8:	89 45 f0             	mov    %eax,-0x10(%ebp)
-    if(cc < 1)
-    12ab:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
-    12af:	7e 2d                	jle    12de <gets+0x60>
-      break;
-    buf[i++] = c;
-    12b1:	8b 45 f4             	mov    -0xc(%ebp),%eax
-    12b4:	03 45 08             	add    0x8(%ebp),%eax
-    12b7:	0f b6 55 ef          	movzbl -0x11(%ebp),%edx
-    12bb:	88 10                	mov    %dl,(%eax)
-    12bd:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
-    if(c == '\n' || c == '\r')
-    12c1:	0f b6 45 ef          	movzbl -0x11(%ebp),%eax
-    12c5:	3c 0a                	cmp    $0xa,%al
-    12c7:	74 16                	je     12df <gets+0x61>
-    12c9:	0f b6 45 ef          	movzbl -0x11(%ebp),%eax
-    12cd:	3c 0d                	cmp    $0xd,%al
-    12cf:	74 0e                	je     12df <gets+0x61>
-gets(char *buf, int max)
-{
-  int i, cc;
-  char c;
-
-  for(i=0; i+1 < max; ){
-    12d1:	8b 45 f4             	mov    -0xc(%ebp),%eax
-    12d4:	83 c0 01             	add    $0x1,%eax
-    12d7:	3b 45 0c             	cmp    0xc(%ebp),%eax
-    12da:	7c b1                	jl     128d <gets+0xf>
-    12dc:	eb 01                	jmp    12df <gets+0x61>
-    cc = read(0, &c, 1);
-    if(cc < 1)
-      break;
-    12de:	90                   	nop
-    buf[i++] = c;
-    if(c == '\n' || c == '\r')
-      break;
-  }
-  buf[i] = '\0';
-    12df:	8b 45 f4             	mov    -0xc(%ebp),%eax
-    12e2:	03 45 08             	add    0x8(%ebp),%eax
-    12e5:	c6 00 00             	movb   $0x0,(%eax)
-  return buf;
-    12e8:	8b 45 08             	mov    0x8(%ebp),%eax
-}
-    12eb:	c9                   	leave  
-    12ec:	c3                   	ret    
-
-000012ed <stat>:
-
-int
-stat(char *n, struct stat *st)
-{
-    12ed:	55                   	push   %ebp
-    12ee:	89 e5                	mov    %esp,%ebp
-    12f0:	83 ec 28             	sub    $0x28,%esp
-  int fd;
-  int r;
-
-  fd = open(n, O_RDONLY);
-    12f3:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
-    12fa:	00 
-    12fb:	8b 45 08             	mov    0x8(%ebp),%eax
-    12fe:	89 04 24             	mov    %eax,(%esp)
-    1301:	e8 06 01 00 00       	call   140c <open>
-    1306:	89 45 f4             	mov    %eax,-0xc(%ebp)
-  if(fd < 0)
-    1309:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
-    130d:	79 07                	jns    1316 <stat+0x29>
-    return -1;
-    130f:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
-    1314:	eb 23                	jmp    1339 <stat+0x4c>
-  r = fstat(fd, st);
-    1316:	8b 45 0c             	mov    0xc(%ebp),%eax
-    1319:	89 44 24 04          	mov    %eax,0x4(%esp)
-    131d:	8b 45 f4             	mov    -0xc(%ebp),%eax
-    1320:	89 04 24             	mov    %eax,(%esp)
-    1323:	e8 fc 00 00 00       	call   1424 <fstat>
-    1328:	89 45 f0             	mov    %eax,-0x10(%ebp)
-  close(fd);
-    132b:	8b 45 f4             	mov    -0xc(%ebp),%eax
-    132e:	89 04 24             	mov    %eax,(%esp)
-    1331:	e8 be 00 00 00       	call   13f4 <close>
-  return r;
-    1336:	8b 45 f0             	mov    -0x10(%ebp),%eax
-}
-    1339:	c9                   	leave  
-    133a:	c3                   	ret    
-
-0000133b <atoi>:
-
-int
-atoi(const char *s)
-{
-    133b:	55                   	push   %ebp
-    133c:	89 e5                	mov    %esp,%ebp
-    133e:	83 ec 10             	sub    $0x10,%esp
-  int n;
-
-  n = 0;
-    1341:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
-  while('0' <= *s && *s <= '9')
-    1348:	eb 23                	jmp    136d <atoi+0x32>
-    n = n*10 + *s++ - '0';
-    134a:	8b 55 fc             	mov    -0x4(%ebp),%edx
-    134d:	89 d0                	mov    %edx,%eax
-    134f:	c1 e0 02             	shl    $0x2,%eax
-    1352:	01 d0                	add    %edx,%eax
-    1354:	01 c0                	add    %eax,%eax
-    1356:	89 c2                	mov    %eax,%edx
-    1358:	8b 45 08             	mov    0x8(%ebp),%eax
-    135b:	0f b6 00             	movzbl (%eax),%eax
-    135e:	0f be c0             	movsbl %al,%eax
-    1361:	01 d0                	add    %edx,%eax
-    1363:	83 e8 30             	sub    $0x30,%eax
-    1366:	89 45 fc             	mov    %eax,-0x4(%ebp)
-    1369:	83 45 08 01          	addl   $0x1,0x8(%ebp)
-atoi(const char *s)
-{
-  int n;
-
-  n = 0;
-  while('0' <= *s && *s <= '9')
-    136d:	8b 45 08             	mov    0x8(%ebp),%eax
-    1370:	0f b6 00             	movzbl (%eax),%eax
-    1373:	3c 2f                	cmp    $0x2f,%al
-    1375:	7e 0a                	jle    1381 <atoi+0x46>
-    1377:	8b 45 08             	mov    0x8(%ebp),%eax
-    137a:	0f b6 00             	movzbl (%eax),%eax
-    137d:	3c 39                	cmp    $0x39,%al
-    137f:	7e c9                	jle    134a <atoi+0xf>
-    n = n*10 + *s++ - '0';
-  return n;
-    1381:	8b 45 fc             	mov    -0x4(%ebp),%eax
-}
-    1384:	c9                   	leave  
-    1385:	c3                   	ret    
-
-00001386 <memmove>:
-
-void*
-memmove(void *vdst, void *vsrc, int n)
-{
-    1386:	55                   	push   %ebp
-    1387:	89 e5                	mov    %esp,%ebp
-    1389:	83 ec 10             	sub    $0x10,%esp
-  char *dst, *src;
-  
-  dst = vdst;
-    138c:	8b 45 08             	mov    0x8(%ebp),%eax
-    138f:	89 45 fc             	mov    %eax,-0x4(%ebp)
-  src = vsrc;
-    1392:	8b 45 0c             	mov    0xc(%ebp),%eax
-    1395:	89 45 f8             	mov    %eax,-0x8(%ebp)
-  while(n-- > 0)
-    1398:	eb 13                	jmp    13ad <memmove+0x27>
-    *dst++ = *src++;
-    139a:	8b 45 f8             	mov    -0x8(%ebp),%eax
-    139d:	0f b6 10             	movzbl (%eax),%edx
-    13a0:	8b 45 fc             	mov    -0x4(%ebp),%eax
-    13a3:	88 10                	mov    %dl,(%eax)
-    13a5:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
-    13a9:	83 45 f8 01          	addl   $0x1,-0x8(%ebp)
-{
-  char *dst, *src;
-  
-  dst = vdst;
-  src = vsrc;
-  while(n-- > 0)
-    13ad:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
-    13b1:	0f 9f c0             	setg   %al
-    13b4:	83 6d 10 01          	subl   $0x1,0x10(%ebp)
-    13b8:	84 c0                	test   %al,%al
-    13ba:	75 de                	jne    139a <memmove+0x14>
-    *dst++ = *src++;
-  return vdst;
-    13bc:	8b 45 08             	mov    0x8(%ebp),%eax
-}
-    13bf:	c9                   	leave  
-    13c0:	c3                   	ret    
-    13c1:	90                   	nop
-    13c2:	90                   	nop
-    13c3:	90                   	nop
-
-000013c4 <fork>:
-  name: \
-    movl $SYS_ ## name, %eax; \
-    int $T_SYSCALL; \
-    ret
-
-SYSCALL(fork)
-    13c4:	b8 01 00 00 00       	mov    $0x1,%eax
-    13c9:	cd 40                	int    $0x40
-    13cb:	c3                   	ret    
-
-000013cc <exit>:
-SYSCALL(exit)
-    13cc:	b8 02 00 00 00       	mov    $0x2,%eax
-    13d1:	cd 40                	int    $0x40
-    13d3:	c3                   	ret    
-
-000013d4 <wait>:
-SYSCALL(wait)
-    13d4:	b8 03 00 00 00       	mov    $0x3,%eax
-    13d9:	cd 40                	int    $0x40
-    13db:	c3                   	ret    
-
-000013dc <pipe>:
-SYSCALL(pipe)
-    13dc:	b8 04 00 00 00       	mov    $0x4,%eax
-    13e1:	cd 40                	int    $0x40
-    13e3:	c3                   	ret    
-
-000013e4 <read>:
-SYSCALL(read)
-    13e4:	b8 05 00 00 00       	mov    $0x5,%eax
-    13e9:	cd 40                	int    $0x40
-    13eb:	c3                   	ret    
-
-000013ec <write>:
-SYSCALL(write)
-    13ec:	b8 10 00 00 00       	mov    $0x10,%eax
-    13f1:	cd 40                	int    $0x40
-    13f3:	c3                   	ret    
-
-000013f4 <close>:
-SYSCALL(close)
-    13f4:	b8 15 00 00 00       	mov    $0x15,%eax
-    13f9:	cd 40                	int    $0x40
-    13fb:	c3                   	ret    
-
-000013fc <kill>:
-SYSCALL(kill)
-    13fc:	b8 06 00 00 00       	mov    $0x6,%eax
-    1401:	cd 40                	int    $0x40
-    1403:	c3                   	ret    
-
-00001404 <exec>:
-SYSCALL(exec)
-    1404:	b8 07 00 00 00       	mov    $0x7,%eax
-    1409:	cd 40                	int    $0x40
-    140b:	c3                   	ret    
-
-0000140c <open>:
-SYSCALL(open)
-    140c:	b8 0f 00 00 00       	mov    $0xf,%eax
-    1411:	cd 40                	int    $0x40
-    1413:	c3                   	ret    
-
-00001414 <mknod>:
-SYSCALL(mknod)
-    1414:	b8 11 00 00 00       	mov    $0x11,%eax
-    1419:	cd 40                	int    $0x40
-    141b:	c3                   	ret    
-
-0000141c <unlink>:
-SYSCALL(unlink)
-    141c:	b8 12 00 00 00       	mov    $0x12,%eax
-    1421:	cd 40                	int    $0x40
-    1423:	c3                   	ret    
-
-00001424 <fstat>:
-SYSCALL(fstat)
-    1424:	b8 08 00 00 00       	mov    $0x8,%eax
-    1429:	cd 40                	int    $0x40
-    142b:	c3                   	ret    
-
-0000142c <link>:
-SYSCALL(link)
-    142c:	b8 13 00 00 00       	mov    $0x13,%eax
-    1431:	cd 40                	int    $0x40
-    1433:	c3                   	ret    
-
-00001434 <mkdir>:
-SYSCALL(mkdir)
-    1434:	b8 14 00 00 00       	mov    $0x14,%eax
-    1439:	cd 40                	int    $0x40
-    143b:	c3                   	ret    
-
-0000143c <chdir>:
-SYSCALL(chdir)
-    143c:	b8 09 00 00 00       	mov    $0x9,%eax
-    1441:	cd 40                	int    $0x40
-    1443:	c3                   	ret    
-
-00001444 <dup>:
-SYSCALL(dup)
-    1444:	b8 0a 00 00 00       	mov    $0xa,%eax
-    1449:	cd 40                	int    $0x40
-    144b:	c3                   	ret    
-
-0000144c <getpid>:
-SYSCALL(getpid)
-    144c:	b8 0b 00 00 00       	mov    $0xb,%eax
-    1451:	cd 40                	int    $0x40
-    1453:	c3                   	ret    
-
-00001454 <sbrk>:
-SYSCALL(sbrk)
-    1454:	b8 0c 00 00 00       	mov    $0xc,%eax
-    1459:	cd 40                	int    $0x40
-    145b:	c3                   	ret    
-
-0000145c <sleep>:
-SYSCALL(sleep)
-    145c:	b8 0d 00 00 00       	mov    $0xd,%eax
-    1461:	cd 40                	int    $0x40
-    1463:	c3                   	ret    
-
-00001464 <uptime>:
-SYSCALL(uptime)
-    1464:	b8 0e 00 00 00       	mov    $0xe,%eax
-    1469:	cd 40                	int    $0x40
-    146b:	c3                   	ret    
-
-0000146c <waitpid>:
-SYSCALL(waitpid)
-    146c:	b8 16 00 00 00       	mov    $0x16,%eax
-    1471:	cd 40                	int    $0x40
-    1473:	c3                   	ret    
-
-00001474 <wait_stat>:
-SYSCALL(wait_stat)
-    1474:	b8 17 00 00 00       	mov    $0x17,%eax
-    1479:	cd 40                	int    $0x40
-    147b:	c3                   	ret    
-
-0000147c <list_pgroup>:
-SYSCALL(list_pgroup)
-    147c:	b8 18 00 00 00       	mov    $0x18,%eax
-    1481:	cd 40                	int    $0x40
-    1483:	c3                   	ret    
-
-00001484 <foreground>:
-SYSCALL(foreground)
-    1484:	b8 19 00 00 00       	mov    $0x19,%eax
-    1489:	cd 40                	int    $0x40
-    148b:	c3                   	ret    
-
-0000148c <set_priority>:
-SYSCALL(set_priority)
-    148c:	b8 1a 00 00 00       	mov    $0x1a,%eax
-    1491:	cd 40                	int    $0x40
-    1493:	c3                   	ret    
-
-00001494 <putc>:
-#include "stat.h"
-#include "user.h"
-
-static void
-putc(int fd, char c)
-{
-    1494:	55                   	push   %ebp
-    1495:	89 e5                	mov    %esp,%ebp
-    1497:	83 ec 28             	sub    $0x28,%esp
-    149a:	8b 45 0c             	mov    0xc(%ebp),%eax
-    149d:	88 45 f4             	mov    %al,-0xc(%ebp)
-  write(fd, &c, 1);
-    14a0:	c7 44 24 08 01 00 00 	movl   $0x1,0x8(%esp)
-    14a7:	00 
-    14a8:	8d 45 f4             	lea    -0xc(%ebp),%eax
-    14ab:	89 44 24 04          	mov    %eax,0x4(%esp)
-    14af:	8b 45 08             	mov    0x8(%ebp),%eax
-    14b2:	89 04 24             	mov    %eax,(%esp)
-    14b5:	e8 32 ff ff ff       	call   13ec <write>
-}
-    14ba:	c9                   	leave  
-    14bb:	c3                   	ret    
-
-000014bc <printint>:
-
-static void
-printint(int fd, int xx, int base, int sgn)
-{
-    14bc:	55                   	push   %ebp
-    14bd:	89 e5                	mov    %esp,%ebp
-    14bf:	83 ec 48             	sub    $0x48,%esp
-  static char digits[] = "0123456789ABCDEF";
-  char buf[16];
-  int i, neg;
-  uint x;
-
-  neg = 0;
-    14c2:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
-  if(sgn && xx < 0){
-    14c9:	83 7d 14 00          	cmpl   $0x0,0x14(%ebp)
-    14cd:	74 17                	je     14e6 <printint+0x2a>
-    14cf:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
-    14d3:	79 11                	jns    14e6 <printint+0x2a>
-    neg = 1;
-    14d5:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
-    x = -xx;
-    14dc:	8b 45 0c             	mov    0xc(%ebp),%eax
-    14df:	f7 d8                	neg    %eax
-    14e1:	89 45 ec             	mov    %eax,-0x14(%ebp)
-    14e4:	eb 06                	jmp    14ec <printint+0x30>
-  } else {
-    x = xx;
-    14e6:	8b 45 0c             	mov    0xc(%ebp),%eax
-    14e9:	89 45 ec             	mov    %eax,-0x14(%ebp)
-  }
-
-  i = 0;
-    14ec:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
-  do{
-    buf[i++] = digits[x % base];
-    14f3:	8b 4d 10             	mov    0x10(%ebp),%ecx
-    14f6:	8b 45 ec             	mov    -0x14(%ebp),%eax
-    14f9:	ba 00 00 00 00       	mov    $0x0,%edx
-    14fe:	f7 f1                	div    %ecx
-    1500:	89 d0                	mov    %edx,%eax
-    1502:	0f b6 90 60 1f 00 00 	movzbl 0x1f60(%eax),%edx
-    1509:	8d 45 dc             	lea    -0x24(%ebp),%eax
-    150c:	03 45 f4             	add    -0xc(%ebp),%eax
-    150f:	88 10                	mov    %dl,(%eax)
-    1511:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
-  }while((x /= base) != 0);
-    1515:	8b 55 10             	mov    0x10(%ebp),%edx
-    1518:	89 55 d4             	mov    %edx,-0x2c(%ebp)
-    151b:	8b 45 ec             	mov    -0x14(%ebp),%eax
-    151e:	ba 00 00 00 00       	mov    $0x0,%edx
-    1523:	f7 75 d4             	divl   -0x2c(%ebp)
-    1526:	89 45 ec             	mov    %eax,-0x14(%ebp)
-    1529:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
-    152d:	75 c4                	jne    14f3 <printint+0x37>
-  if(neg)
-    152f:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
-    1533:	74 2a                	je     155f <printint+0xa3>
-    buf[i++] = '-';
-    1535:	8d 45 dc             	lea    -0x24(%ebp),%eax
-    1538:	03 45 f4             	add    -0xc(%ebp),%eax
-    153b:	c6 00 2d             	movb   $0x2d,(%eax)
-    153e:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
-
-  while(--i >= 0)
-    1542:	eb 1b                	jmp    155f <printint+0xa3>
-    putc(fd, buf[i]);
-    1544:	8d 45 dc             	lea    -0x24(%ebp),%eax
-    1547:	03 45 f4             	add    -0xc(%ebp),%eax
-    154a:	0f b6 00             	movzbl (%eax),%eax
-    154d:	0f be c0             	movsbl %al,%eax
-    1550:	89 44 24 04          	mov    %eax,0x4(%esp)
-    1554:	8b 45 08             	mov    0x8(%ebp),%eax
-    1557:	89 04 24             	mov    %eax,(%esp)
-    155a:	e8 35 ff ff ff       	call   1494 <putc>
-    buf[i++] = digits[x % base];
-  }while((x /= base) != 0);
-  if(neg)
-    buf[i++] = '-';
-
-  while(--i >= 0)
-    155f:	83 6d f4 01          	subl   $0x1,-0xc(%ebp)
-    1563:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
-    1567:	79 db                	jns    1544 <printint+0x88>
-    putc(fd, buf[i]);
-}
-    1569:	c9                   	leave  
-    156a:	c3                   	ret    
-
-0000156b <printf>:
-
-// Print to the given fd. Only understands %d, %x, %p, %s.
-void
-printf(int fd, char *fmt, ...)
-{
-    156b:	55                   	push   %ebp
-    156c:	89 e5                	mov    %esp,%ebp
-    156e:	83 ec 38             	sub    $0x38,%esp
-  char *s;
-  int c, i, state;
-  uint *ap;
-
-  state = 0;
-    1571:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
-  ap = (uint*)(void*)&fmt + 1;
-    1578:	8d 45 0c             	lea    0xc(%ebp),%eax
-    157b:	83 c0 04             	add    $0x4,%eax
-    157e:	89 45 e8             	mov    %eax,-0x18(%ebp)
-  for(i = 0; fmt[i]; i++){
-    1581:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
-    1588:	e9 7d 01 00 00       	jmp    170a <printf+0x19f>
-    c = fmt[i] & 0xff;
-    158d:	8b 55 0c             	mov    0xc(%ebp),%edx
-    1590:	8b 45 f0             	mov    -0x10(%ebp),%eax
-    1593:	01 d0                	add    %edx,%eax
-    1595:	0f b6 00             	movzbl (%eax),%eax
-    1598:	0f be c0             	movsbl %al,%eax
-    159b:	25 ff 00 00 00       	and    $0xff,%eax
-    15a0:	89 45 e4             	mov    %eax,-0x1c(%ebp)
-    if(state == 0){
-    15a3:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
-    15a7:	75 2c                	jne    15d5 <printf+0x6a>
-      if(c == '%'){
-    15a9:	83 7d e4 25          	cmpl   $0x25,-0x1c(%ebp)
-    15ad:	75 0c                	jne    15bb <printf+0x50>
-        state = '%';
-    15af:	c7 45 ec 25 00 00 00 	movl   $0x25,-0x14(%ebp)
-    15b6:	e9 4b 01 00 00       	jmp    1706 <printf+0x19b>
-      } else {
-        putc(fd, c);
-    15bb:	8b 45 e4             	mov    -0x1c(%ebp),%eax
-    15be:	0f be c0             	movsbl %al,%eax
-    15c1:	89 44 24 04          	mov    %eax,0x4(%esp)
-    15c5:	8b 45 08             	mov    0x8(%ebp),%eax
-    15c8:	89 04 24             	mov    %eax,(%esp)
-    15cb:	e8 c4 fe ff ff       	call   1494 <putc>
-    15d0:	e9 31 01 00 00       	jmp    1706 <printf+0x19b>
-      }
-    } else if(state == '%'){
-    15d5:	83 7d ec 25          	cmpl   $0x25,-0x14(%ebp)
-    15d9:	0f 85 27 01 00 00    	jne    1706 <printf+0x19b>
-      if(c == 'd'){
-    15df:	83 7d e4 64          	cmpl   $0x64,-0x1c(%ebp)
-    15e3:	75 2d                	jne    1612 <printf+0xa7>
-        printint(fd, *ap, 10, 1);
-    15e5:	8b 45 e8             	mov    -0x18(%ebp),%eax
-    15e8:	8b 00                	mov    (%eax),%eax
-    15ea:	c7 44 24 0c 01 00 00 	movl   $0x1,0xc(%esp)
-    15f1:	00 
-    15f2:	c7 44 24 08 0a 00 00 	movl   $0xa,0x8(%esp)
-    15f9:	00 
-    15fa:	89 44 24 04          	mov    %eax,0x4(%esp)
-    15fe:	8b 45 08             	mov    0x8(%ebp),%eax
-    1601:	89 04 24             	mov    %eax,(%esp)
-    1604:	e8 b3 fe ff ff       	call   14bc <printint>
-        ap++;
-    1609:	83 45 e8 04          	addl   $0x4,-0x18(%ebp)
-    160d:	e9 ed 00 00 00       	jmp    16ff <printf+0x194>
-      } else if(c == 'x' || c == 'p'){
-    1612:	83 7d e4 78          	cmpl   $0x78,-0x1c(%ebp)
-    1616:	74 06                	je     161e <printf+0xb3>
-    1618:	83 7d e4 70          	cmpl   $0x70,-0x1c(%ebp)
-    161c:	75 2d                	jne    164b <printf+0xe0>
-        printint(fd, *ap, 16, 0);
-    161e:	8b 45 e8             	mov    -0x18(%ebp),%eax
-    1621:	8b 00                	mov    (%eax),%eax
-    1623:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
-    162a:	00 
-    162b:	c7 44 24 08 10 00 00 	movl   $0x10,0x8(%esp)
-    1632:	00 
-    1633:	89 44 24 04          	mov    %eax,0x4(%esp)
-    1637:	8b 45 08             	mov    0x8(%ebp),%eax
-    163a:	89 04 24             	mov    %eax,(%esp)
-    163d:	e8 7a fe ff ff       	call   14bc <printint>
-        ap++;
-    1642:	83 45 e8 04          	addl   $0x4,-0x18(%ebp)
-    1646:	e9 b4 00 00 00       	jmp    16ff <printf+0x194>
-      } else if(c == 's'){
-    164b:	83 7d e4 73          	cmpl   $0x73,-0x1c(%ebp)
-    164f:	75 46                	jne    1697 <printf+0x12c>
-        s = (char*)*ap;
-    1651:	8b 45 e8             	mov    -0x18(%ebp),%eax
-    1654:	8b 00                	mov    (%eax),%eax
-    1656:	89 45 f4             	mov    %eax,-0xc(%ebp)
-        ap++;
-    1659:	83 45 e8 04          	addl   $0x4,-0x18(%ebp)
-        if(s == 0)
-    165d:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
-    1661:	75 27                	jne    168a <printf+0x11f>
-          s = "(null)";
-    1663:	c7 45 f4 70 1a 00 00 	movl   $0x1a70,-0xc(%ebp)
-        while(*s != 0){
-    166a:	eb 1e                	jmp    168a <printf+0x11f>
-          putc(fd, *s);
-    166c:	8b 45 f4             	mov    -0xc(%ebp),%eax
-    166f:	0f b6 00             	movzbl (%eax),%eax
-    1672:	0f be c0             	movsbl %al,%eax
-    1675:	89 44 24 04          	mov    %eax,0x4(%esp)
-    1679:	8b 45 08             	mov    0x8(%ebp),%eax
-    167c:	89 04 24             	mov    %eax,(%esp)
-    167f:	e8 10 fe ff ff       	call   1494 <putc>
-          s++;
-    1684:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
-    1688:	eb 01                	jmp    168b <printf+0x120>
-      } else if(c == 's'){
-        s = (char*)*ap;
-        ap++;
-        if(s == 0)
-          s = "(null)";
-        while(*s != 0){
-    168a:	90                   	nop
-    168b:	8b 45 f4             	mov    -0xc(%ebp),%eax
-    168e:	0f b6 00             	movzbl (%eax),%eax
-    1691:	84 c0                	test   %al,%al
-    1693:	75 d7                	jne    166c <printf+0x101>
-    1695:	eb 68                	jmp    16ff <printf+0x194>
-          putc(fd, *s);
-          s++;
-        }
-      } else if(c == 'c'){
-    1697:	83 7d e4 63          	cmpl   $0x63,-0x1c(%ebp)
-    169b:	75 1d                	jne    16ba <printf+0x14f>
-        putc(fd, *ap);
-    169d:	8b 45 e8             	mov    -0x18(%ebp),%eax
-    16a0:	8b 00                	mov    (%eax),%eax
-    16a2:	0f be c0             	movsbl %al,%eax
-    16a5:	89 44 24 04          	mov    %eax,0x4(%esp)
-    16a9:	8b 45 08             	mov    0x8(%ebp),%eax
-    16ac:	89 04 24             	mov    %eax,(%esp)
-    16af:	e8 e0 fd ff ff       	call   1494 <putc>
-        ap++;
-    16b4:	83 45 e8 04          	addl   $0x4,-0x18(%ebp)
-    16b8:	eb 45                	jmp    16ff <printf+0x194>
-      } else if(c == '%'){
-    16ba:	83 7d e4 25          	cmpl   $0x25,-0x1c(%ebp)
-    16be:	75 17                	jne    16d7 <printf+0x16c>
-        putc(fd, c);
-    16c0:	8b 45 e4             	mov    -0x1c(%ebp),%eax
-    16c3:	0f be c0             	movsbl %al,%eax
-    16c6:	89 44 24 04          	mov    %eax,0x4(%esp)
-    16ca:	8b 45 08             	mov    0x8(%ebp),%eax
-    16cd:	89 04 24             	mov    %eax,(%esp)
-    16d0:	e8 bf fd ff ff       	call   1494 <putc>
-    16d5:	eb 28                	jmp    16ff <printf+0x194>
-      } else {
-        // Unknown % sequence.  Print it to draw attention.
-        putc(fd, '%');
-    16d7:	c7 44 24 04 25 00 00 	movl   $0x25,0x4(%esp)
-    16de:	00 
-    16df:	8b 45 08             	mov    0x8(%ebp),%eax
-    16e2:	89 04 24             	mov    %eax,(%esp)
-    16e5:	e8 aa fd ff ff       	call   1494 <putc>
-        putc(fd, c);
-    16ea:	8b 45 e4             	mov    -0x1c(%ebp),%eax
-    16ed:	0f be c0             	movsbl %al,%eax
-    16f0:	89 44 24 04          	mov    %eax,0x4(%esp)
-    16f4:	8b 45 08             	mov    0x8(%ebp),%eax
-    16f7:	89 04 24             	mov    %eax,(%esp)
-    16fa:	e8 95 fd ff ff       	call   1494 <putc>
-      }
-      state = 0;
-    16ff:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
-  int c, i, state;
-  uint *ap;
-
-  state = 0;
-  ap = (uint*)(void*)&fmt + 1;
-  for(i = 0; fmt[i]; i++){
-    1706:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)
-    170a:	8b 55 0c             	mov    0xc(%ebp),%edx
-    170d:	8b 45 f0             	mov    -0x10(%ebp),%eax
-    1710:	01 d0                	add    %edx,%eax
-    1712:	0f b6 00             	movzbl (%eax),%eax
-    1715:	84 c0                	test   %al,%al
-    1717:	0f 85 70 fe ff ff    	jne    158d <printf+0x22>
-        putc(fd, c);
-      }
-      state = 0;
-    }
-  }
-}
-    171d:	c9                   	leave  
-    171e:	c3                   	ret    
-    171f:	90                   	nop
-
-00001720 <free>:
-static Header base;
-static Header *freep;
-
-void
-free(void *ap)
-{
-    1720:	55                   	push   %ebp
-    1721:	89 e5                	mov    %esp,%ebp
-    1723:	83 ec 10             	sub    $0x10,%esp
-  Header *bp, *p;
-
-  bp = (Header*)ap - 1;
-    1726:	8b 45 08             	mov    0x8(%ebp),%eax
-    1729:	83 e8 08             	sub    $0x8,%eax
-    172c:	89 45 f8             	mov    %eax,-0x8(%ebp)
-  for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
-    172f:	a1 0c e0 01 00       	mov    0x1e00c,%eax
-    1734:	89 45 fc             	mov    %eax,-0x4(%ebp)
-    1737:	eb 24                	jmp    175d <free+0x3d>
-    if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
-    1739:	8b 45 fc             	mov    -0x4(%ebp),%eax
-    173c:	8b 00                	mov    (%eax),%eax
-    173e:	3b 45 fc             	cmp    -0x4(%ebp),%eax
-    1741:	77 12                	ja     1755 <free+0x35>
-    1743:	8b 45 f8             	mov    -0x8(%ebp),%eax
-    1746:	3b 45 fc             	cmp    -0x4(%ebp),%eax
-    1749:	77 24                	ja     176f <free+0x4f>
-    174b:	8b 45 fc             	mov    -0x4(%ebp),%eax
-    174e:	8b 00                	mov    (%eax),%eax
-    1750:	3b 45 f8             	cmp    -0x8(%ebp),%eax
-    1753:	77 1a                	ja     176f <free+0x4f>
-free(void *ap)
-{
-  Header *bp, *p;
-
-  bp = (Header*)ap - 1;
-  for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
-    1755:	8b 45 fc             	mov    -0x4(%ebp),%eax
-    1758:	8b 00                	mov    (%eax),%eax
-    175a:	89 45 fc             	mov    %eax,-0x4(%ebp)
-    175d:	8b 45 f8             	mov    -0x8(%ebp),%eax
-    1760:	3b 45 fc             	cmp    -0x4(%ebp),%eax
-    1763:	76 d4                	jbe    1739 <free+0x19>
-    1765:	8b 45 fc             	mov    -0x4(%ebp),%eax
-    1768:	8b 00                	mov    (%eax),%eax
-    176a:	3b 45 f8             	cmp    -0x8(%ebp),%eax
-    176d:	76 ca                	jbe    1739 <free+0x19>
-    if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
-      break;
-  if(bp + bp->s.size == p->s.ptr){
-    176f:	8b 45 f8             	mov    -0x8(%ebp),%eax
-    1772:	8b 40 04             	mov    0x4(%eax),%eax
-    1775:	c1 e0 03             	shl    $0x3,%eax
-    1778:	89 c2                	mov    %eax,%edx
-    177a:	03 55 f8             	add    -0x8(%ebp),%edx
-    177d:	8b 45 fc             	mov    -0x4(%ebp),%eax
-    1780:	8b 00                	mov    (%eax),%eax
-    1782:	39 c2                	cmp    %eax,%edx
-    1784:	75 24                	jne    17aa <free+0x8a>
-    bp->s.size += p->s.ptr->s.size;
-    1786:	8b 45 f8             	mov    -0x8(%ebp),%eax
-    1789:	8b 50 04             	mov    0x4(%eax),%edx
-    178c:	8b 45 fc             	mov    -0x4(%ebp),%eax
-    178f:	8b 00                	mov    (%eax),%eax
-    1791:	8b 40 04             	mov    0x4(%eax),%eax
-    1794:	01 c2                	add    %eax,%edx
-    1796:	8b 45 f8             	mov    -0x8(%ebp),%eax
-    1799:	89 50 04             	mov    %edx,0x4(%eax)
-    bp->s.ptr = p->s.ptr->s.ptr;
-    179c:	8b 45 fc             	mov    -0x4(%ebp),%eax
-    179f:	8b 00                	mov    (%eax),%eax
-    17a1:	8b 10                	mov    (%eax),%edx
-    17a3:	8b 45 f8             	mov    -0x8(%ebp),%eax
-    17a6:	89 10                	mov    %edx,(%eax)
-    17a8:	eb 0a                	jmp    17b4 <free+0x94>
-  } else
-    bp->s.ptr = p->s.ptr;
-    17aa:	8b 45 fc             	mov    -0x4(%ebp),%eax
-    17ad:	8b 10                	mov    (%eax),%edx
-    17af:	8b 45 f8             	mov    -0x8(%ebp),%eax
-    17b2:	89 10                	mov    %edx,(%eax)
-  if(p + p->s.size == bp){
-    17b4:	8b 45 fc             	mov    -0x4(%ebp),%eax
-    17b7:	8b 40 04             	mov    0x4(%eax),%eax
-    17ba:	c1 e0 03             	shl    $0x3,%eax
-    17bd:	03 45 fc             	add    -0x4(%ebp),%eax
-    17c0:	3b 45 f8             	cmp    -0x8(%ebp),%eax
-    17c3:	75 20                	jne    17e5 <free+0xc5>
-    p->s.size += bp->s.size;
-    17c5:	8b 45 fc             	mov    -0x4(%ebp),%eax
-    17c8:	8b 50 04             	mov    0x4(%eax),%edx
-    17cb:	8b 45 f8             	mov    -0x8(%ebp),%eax
-    17ce:	8b 40 04             	mov    0x4(%eax),%eax
-    17d1:	01 c2                	add    %eax,%edx
-    17d3:	8b 45 fc             	mov    -0x4(%ebp),%eax
-    17d6:	89 50 04             	mov    %edx,0x4(%eax)
-    p->s.ptr = bp->s.ptr;
-    17d9:	8b 45 f8             	mov    -0x8(%ebp),%eax
-    17dc:	8b 10                	mov    (%eax),%edx
-    17de:	8b 45 fc             	mov    -0x4(%ebp),%eax
-    17e1:	89 10                	mov    %edx,(%eax)
-    17e3:	eb 08                	jmp    17ed <free+0xcd>
-  } else
-    p->s.ptr = bp;
-    17e5:	8b 45 fc             	mov    -0x4(%ebp),%eax
-    17e8:	8b 55 f8             	mov    -0x8(%ebp),%edx
-    17eb:	89 10                	mov    %edx,(%eax)
-  freep = p;
-    17ed:	8b 45 fc             	mov    -0x4(%ebp),%eax
-    17f0:	a3 0c e0 01 00       	mov    %eax,0x1e00c
-}
-    17f5:	c9                   	leave  
-    17f6:	c3                   	ret    
-
-000017f7 <morecore>:
-
-static Header*
-morecore(uint nu)
-{
-    17f7:	55                   	push   %ebp
-    17f8:	89 e5                	mov    %esp,%ebp
-    17fa:	83 ec 28             	sub    $0x28,%esp
-  char *p;
-  Header *hp;
-
-  if(nu < 4096)
-    17fd:	81 7d 08 ff 0f 00 00 	cmpl   $0xfff,0x8(%ebp)
-    1804:	77 07                	ja     180d <morecore+0x16>
-    nu = 4096;
-    1806:	c7 45 08 00 10 00 00 	movl   $0x1000,0x8(%ebp)
-  p = sbrk(nu * sizeof(Header));
-    180d:	8b 45 08             	mov    0x8(%ebp),%eax
-    1810:	c1 e0 03             	shl    $0x3,%eax
-    1813:	89 04 24             	mov    %eax,(%esp)
-    1816:	e8 39 fc ff ff       	call   1454 <sbrk>
-    181b:	89 45 f4             	mov    %eax,-0xc(%ebp)
-  if(p == (char*)-1)
-    181e:	83 7d f4 ff          	cmpl   $0xffffffff,-0xc(%ebp)
-    1822:	75 07                	jne    182b <morecore+0x34>
-    return 0;
-    1824:	b8 00 00 00 00       	mov    $0x0,%eax
-    1829:	eb 22                	jmp    184d <morecore+0x56>
-  hp = (Header*)p;
-    182b:	8b 45 f4             	mov    -0xc(%ebp),%eax
-    182e:	89 45 f0             	mov    %eax,-0x10(%ebp)
-  hp->s.size = nu;
-    1831:	8b 45 f0             	mov    -0x10(%ebp),%eax
-    1834:	8b 55 08             	mov    0x8(%ebp),%edx
-    1837:	89 50 04             	mov    %edx,0x4(%eax)
-  free((void*)(hp + 1));
-    183a:	8b 45 f0             	mov    -0x10(%ebp),%eax
-    183d:	83 c0 08             	add    $0x8,%eax
-    1840:	89 04 24             	mov    %eax,(%esp)
-    1843:	e8 d8 fe ff ff       	call   1720 <free>
-  return freep;
-    1848:	a1 0c e0 01 00       	mov    0x1e00c,%eax
-}
-    184d:	c9                   	leave  
-    184e:	c3                   	ret    
-
-0000184f <malloc>:
-
-void*
-malloc(uint nbytes)
-{
-    184f:	55                   	push   %ebp
-    1850:	89 e5                	mov    %esp,%ebp
-    1852:	83 ec 28             	sub    $0x28,%esp
-  Header *p, *prevp;
-  uint nunits;
-
-  nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;
-    1855:	8b 45 08             	mov    0x8(%ebp),%eax
-    1858:	83 c0 07             	add    $0x7,%eax
-    185b:	c1 e8 03             	shr    $0x3,%eax
-    185e:	83 c0 01             	add    $0x1,%eax
-    1861:	89 45 ec             	mov    %eax,-0x14(%ebp)
-  if((prevp = freep) == 0){
-    1864:	a1 0c e0 01 00       	mov    0x1e00c,%eax
-    1869:	89 45 f0             	mov    %eax,-0x10(%ebp)
-    186c:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
-    1870:	75 23                	jne    1895 <malloc+0x46>
-    base.s.ptr = freep = prevp = &base;
-    1872:	c7 45 f0 04 e0 01 00 	movl   $0x1e004,-0x10(%ebp)
-    1879:	8b 45 f0             	mov    -0x10(%ebp),%eax
-    187c:	a3 0c e0 01 00       	mov    %eax,0x1e00c
-    1881:	a1 0c e0 01 00       	mov    0x1e00c,%eax
-    1886:	a3 04 e0 01 00       	mov    %eax,0x1e004
-    base.s.size = 0;
-    188b:	c7 05 08 e0 01 00 00 	movl   $0x0,0x1e008
-    1892:	00 00 00 
-  }
-  for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
-    1895:	8b 45 f0             	mov    -0x10(%ebp),%eax
-    1898:	8b 00                	mov    (%eax),%eax
-    189a:	89 45 f4             	mov    %eax,-0xc(%ebp)
-    if(p->s.size >= nunits){
-    189d:	8b 45 f4             	mov    -0xc(%ebp),%eax
-    18a0:	8b 40 04             	mov    0x4(%eax),%eax
-    18a3:	3b 45 ec             	cmp    -0x14(%ebp),%eax
-    18a6:	72 4d                	jb     18f5 <malloc+0xa6>
-      if(p->s.size == nunits)
-    18a8:	8b 45 f4             	mov    -0xc(%ebp),%eax
-    18ab:	8b 40 04             	mov    0x4(%eax),%eax
-    18ae:	3b 45 ec             	cmp    -0x14(%ebp),%eax
-    18b1:	75 0c                	jne    18bf <malloc+0x70>
-        prevp->s.ptr = p->s.ptr;
-    18b3:	8b 45 f4             	mov    -0xc(%ebp),%eax
-    18b6:	8b 10                	mov    (%eax),%edx
-    18b8:	8b 45 f0             	mov    -0x10(%ebp),%eax
-    18bb:	89 10                	mov    %edx,(%eax)
-    18bd:	eb 26                	jmp    18e5 <malloc+0x96>
-      else {
-        p->s.size -= nunits;
-    18bf:	8b 45 f4             	mov    -0xc(%ebp),%eax
-    18c2:	8b 40 04             	mov    0x4(%eax),%eax
-    18c5:	89 c2                	mov    %eax,%edx
-    18c7:	2b 55 ec             	sub    -0x14(%ebp),%edx
-    18ca:	8b 45 f4             	mov    -0xc(%ebp),%eax
-    18cd:	89 50 04             	mov    %edx,0x4(%eax)
-        p += p->s.size;
-    18d0:	8b 45 f4             	mov    -0xc(%ebp),%eax
-    18d3:	8b 40 04             	mov    0x4(%eax),%eax
-    18d6:	c1 e0 03             	shl    $0x3,%eax
-    18d9:	01 45 f4             	add    %eax,-0xc(%ebp)
-        p->s.size = nunits;
-    18dc:	8b 45 f4             	mov    -0xc(%ebp),%eax
-    18df:	8b 55 ec             	mov    -0x14(%ebp),%edx
-    18e2:	89 50 04             	mov    %edx,0x4(%eax)
-      }
-      freep = prevp;
-    18e5:	8b 45 f0             	mov    -0x10(%ebp),%eax
-    18e8:	a3 0c e0 01 00       	mov    %eax,0x1e00c
-      return (void*)(p + 1);
-    18ed:	8b 45 f4             	mov    -0xc(%ebp),%eax
-    18f0:	83 c0 08             	add    $0x8,%eax
-    18f3:	eb 38                	jmp    192d <malloc+0xde>
-    }
-    if(p == freep)
-    18f5:	a1 0c e0 01 00       	mov    0x1e00c,%eax
-    18fa:	39 45 f4             	cmp    %eax,-0xc(%ebp)
-    18fd:	75 1b                	jne    191a <malloc+0xcb>
-      if((p = morecore(nunits)) == 0)
-    18ff:	8b 45 ec             	mov    -0x14(%ebp),%eax
-    1902:	89 04 24             	mov    %eax,(%esp)
-    1905:	e8 ed fe ff ff       	call   17f7 <morecore>
-    190a:	89 45 f4             	mov    %eax,-0xc(%ebp)
-    190d:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
-    1911:	75 07                	jne    191a <malloc+0xcb>
-        return 0;
-    1913:	b8 00 00 00 00       	mov    $0x0,%eax
-    1918:	eb 13                	jmp    192d <malloc+0xde>
-  nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;
-  if((prevp = freep) == 0){
-    base.s.ptr = freep = prevp = &base;
-    base.s.size = 0;
-  }
-  for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
-    191a:	8b 45 f4             	mov    -0xc(%ebp),%eax
-    191d:	89 45 f0             	mov    %eax,-0x10(%ebp)
-    1920:	8b 45 f4             	mov    -0xc(%ebp),%eax
-    1923:	8b 00                	mov    (%eax),%eax
-    1925:	89 45 f4             	mov    %eax,-0xc(%ebp)
-      return (void*)(p + 1);
-    }
-    if(p == freep)
-      if((p = morecore(nunits)) == 0)
-        return 0;
-  }
-    1928:	e9 70 ff ff ff       	jmp    189d <malloc+0x4e>
-}
-    192d:	c9                   	leave  
-    192e:	c3                   	ret    
diff --git a/xv6/sh.c b/xv6/sh.c
deleted file mode 100644
index 96ded2a..0000000
--- a/xv6/sh.c
+++ /dev/null
@@ -1,616 +0,0 @@
-// Shell.
-
-#include "types.h"
-#include "user.h"
-#include "fcntl.h"
-
-// Parsed command representation
-#define EXEC  1
-#define REDIR 2
-#define PIPE  3
-#define LIST  4
-#define BACK  5
-#define JOBS  6
-
-#define MAXARGS 10
-
-struct job {
-  int num;
-  char cmd[100];
-  int gid;
-  int active;
-};
-
-static struct job jobs_table[1024];
-static int jobs_counter = 0;
-
-
-struct cmd {
-  int type;
-};
-
-struct execcmd {
-  int type;
-  char *argv[MAXARGS];
-  char *eargv[MAXARGS];
-};
-
-struct redircmd {
-  int type;
-  struct cmd *cmd;
-  char *file;
-  char *efile;
-  int mode;
-  int fd;
-};
-
-struct pipecmd {
-  int type;
-  struct cmd *left;
-  struct cmd *right;
-};
-
-struct listcmd {
-  int type;
-  struct cmd *left;
-  struct cmd *right;
-};
-
-struct backcmd {
-  int type;
-  struct cmd *cmd;
-};
-
-int fork1(void);  // Fork but panics on failure.
-void panic(char*);
-struct cmd *parsecmd(char*);
-
-//copies string without \n
-void copyString(char* dst, char* src){
-	int i = 0;
-	while(src[i] != 0 && src[i] != '\n'){
-		dst[i] = src[i];
-		i++;
-	}
-}
-// Execute cmd.  Never returns.
-void
-runcmd(struct cmd *cmd)
-{
-  int p[2], left, right;
-  struct backcmd *bcmd;
-  struct execcmd *ecmd;
-  struct listcmd *lcmd;
-  struct pipecmd *pcmd;
-  struct redircmd *rcmd;
-
-  if(cmd == 0)
-    exit(EXIT_STATUS_DEFAULT);
-  
-  switch(cmd->type){
-  default:
-    panic("runcmd");
-
-  case EXEC:
-    ecmd = (struct execcmd*)cmd;
-    if(ecmd->argv[0] == 0)
-      exit(EXIT_STATUS_DEFAULT);
-    exec(ecmd->argv[0], ecmd->argv);
-    printf(2, "exec %s failed\n", ecmd->argv[0]);
-    break;
-
-  case REDIR:
-    rcmd = (struct redircmd*)cmd;
-    close(rcmd->fd);
-    if(open(rcmd->file, rcmd->mode) < 0){
-      printf(2, "open %s failed\n", rcmd->file);
-      exit(EXIT_STATUS_DEFAULT);
-    }
-    runcmd(rcmd->cmd);
-    break;
-
-  case LIST:
-    lcmd = (struct listcmd*)cmd;
-    if(fork1() == 0)
-      runcmd(lcmd->left);
-    wait(0);
-    runcmd(lcmd->right);
-    break;
-
-  case PIPE:
-    pcmd = (struct pipecmd*)cmd;
-    if(pipe(p) < 0)
-      panic("pipe");
-
-    if( (left = fork1()) == 0){
-      close(1);
-      dup(p[1]);
-      close(p[0]);
-      close(p[1]);
-      runcmd(pcmd->left);
-    }
-
-    if( (right = fork1() ) == 0){
-      close(0);
-      dup(p[0]);
-      close(p[0]);
-      close(p[1]);
-      runcmd(pcmd->right);
-    }
-    close(p[0]);
-    close(p[1]);
-    wait(0);
-    wait(0);
-    break;
-    
-  case BACK:
-    bcmd = (struct backcmd*)cmd;
-    if(fork1() == 0)
-      runcmd(bcmd->cmd);
-    break;
-  }
-  exit(EXIT_STATUS_DEFAULT);
-}
-
-int
-getcmd(char *buf, int nbuf)
-{
-  printf(2, "$ ");
-  memset(buf, 0, nbuf);
-  gets(buf, nbuf);
-  if(buf[0] == 0) // EOF
-    return -1;
-  return 0;
-}
-
-void listJobs(){
-	int i,j;
-	int size;
-	int hasJobs = 0;
-	process_info_entry arr[64];
-
-	for(i=0; i< jobs_counter; i++){
-		if(jobs_table[i].active){
-			list_pgroup(jobs_table[i].gid, arr, &size);
-			if( size > 0){
-				hasJobs = 1;
-				printf(1,"Job %d: %s (%d) \n", i, jobs_table[i].cmd, jobs_table[i].gid);
-				for(j=0; j< size; j++){
-					printf(1,"%d: %s \n", arr[j].pid, arr[j].name);
-				}
-			}
-			else{
-				jobs_table[i].active = 0;
-			}
-		}
-	}
-	if(!hasJobs){
-		printf(1, "There are no jobs\n");
-	}
-}
-
-int move_to_foreground(int job_id){
-	int i;//, desired_job_idx;
-	int fgRet = -1;
-	//printf(1," asked to fg %d \n", job_id);
-
-	if(job_id == -1){
-		for (i = 0; i < jobs_counter; i++) {
-			if( jobs_table[i].active){
-				fgRet = foreground(jobs_table[i].gid);
-				jobs_table[i].active = 0;
-				if (fgRet != -1) return 0;
-			}
-		}
-	}
-	else if( jobs_table[job_id].active){
-		foreground(jobs_table[job_id].gid);
-		jobs_table[job_id].active = 0;
-		return 0;
-	}
-
-	return -1;
-}
-//	if(job_id == -1){
-//		for (i = 0; i < !found && jobs_counter; i++) {
-//			if( jobs_table[i].active){
-//				job_id = i;
-//				found = 1;
-//				break;
-//			}
-//		}
-//	}
-
-//	if(job_id != -1 && jobs_table[job_id].active ){
-//		while(  ret != -1){
-//			ret = foreground(jobs_table[i].gid);
-//		};
-//		foreground(jobs_table[i].gid);
-//		found = 1;
-////	}
-//
-//	printf(1," asta la vista babe ;\n");
-//	return (found? 0 : -1);
-//}
-int
-main(void)
-{
-  static char buf[100];
-  int fd;
-  int child_pid;
-  int job_id;
-  
-  jobs_table[0].active = 0;
-  if(jobs_table[0].active) printf(1, " just so it wont cry on unused");
-
-  // Assumes three file descriptors open.
-  while((fd = open("console", O_RDWR)) >= 0){
-    if(fd >= 3){
-      close(fd);
-      break;
-    }
-  }
-  
-  // Read and run input commands.
-  while(getcmd(buf, sizeof(buf)) >= 0){
-    if(buf[0] == 'c' && buf[1] == 'd' && buf[2] == ' '){
-      // Clumsy but will have to do for now.
-      // Chdir has no effect on the parent if run in the child.
-      buf[strlen(buf)-1] = 0;  // chop \n
-      if(chdir(buf+3) < 0)
-        printf(2, "cannot cd %s\n", buf+3);
-      continue;
-    }
-
-    if(buf[0] == 'j' && buf[1] == 'o' && buf[2] == 'b' && buf[3] == 's' && buf[4] == '\n'){
-      listJobs();
-	  continue;
-	}
-
-    if(buf[0] == 'f' && buf[1] == 'g' ){
-		if( buf[2] == '\n' ){
-			job_id = -1;
-		}
-		else if( buf[2] == ' ' ){
-			job_id = atoi(buf+3);
-		}
-
-		move_to_foreground(job_id);
-		continue;
-	}
-
-    if((child_pid = fork1()) == 0){
-        runcmd(parsecmd(buf));
-    }
-    //keep track on jobs
-    jobs_table[jobs_counter].gid = child_pid;
-    jobs_table[jobs_counter].num = jobs_counter;
-    jobs_table[jobs_counter].active = 1;
-    copyString(jobs_table[jobs_counter].cmd, buf);
-	jobs_counter++;
-
-    wait(0);
-  }
-  exit(EXIT_STATUS_DEFAULT);
-}
-
-void
-panic(char *s)
-{
-  printf(2, "%s\n", s);
-  exit(EXIT_STATUS_DEFAULT);
-}
-
-int
-fork1(void)
-{
-  int pid;
-  
-  pid = fork();
-  if(pid == -1)
-    panic("fork");
-  return pid;
-}
-
-//PAGEBREAK!
-// Constructors
-
-struct cmd*
-execcmd(void)
-{
-  struct execcmd *cmd;
-
-  cmd = malloc(sizeof(*cmd));
-  memset(cmd, 0, sizeof(*cmd));
-  cmd->type = EXEC;
-  return (struct cmd*)cmd;
-}
-
-struct cmd*
-redircmd(struct cmd *subcmd, char *file, char *efile, int mode, int fd)
-{
-  struct redircmd *cmd;
-
-  cmd = malloc(sizeof(*cmd));
-  memset(cmd, 0, sizeof(*cmd));
-  cmd->type = REDIR;
-  cmd->cmd = subcmd;
-  cmd->file = file;
-  cmd->efile = efile;
-  cmd->mode = mode;
-  cmd->fd = fd;
-  return (struct cmd*)cmd;
-}
-
-struct cmd*
-pipecmd(struct cmd *left, struct cmd *right)
-{
-  struct pipecmd *cmd;
-
-  cmd = malloc(sizeof(*cmd));
-  memset(cmd, 0, sizeof(*cmd));
-  cmd->type = PIPE;
-  cmd->left = left;
-  cmd->right = right;
-  return (struct cmd*)cmd;
-}
-
-struct cmd*
-listcmd(struct cmd *left, struct cmd *right)
-{
-  struct listcmd *cmd;
-
-  cmd = malloc(sizeof(*cmd));
-  memset(cmd, 0, sizeof(*cmd));
-  cmd->type = LIST;
-  cmd->left = left;
-  cmd->right = right;
-  return (struct cmd*)cmd;
-}
-
-struct cmd*
-backcmd(struct cmd *subcmd)
-{
-  struct backcmd *cmd;
-
-  cmd = malloc(sizeof(*cmd));
-  memset(cmd, 0, sizeof(*cmd));
-  cmd->type = BACK;
-  cmd->cmd = subcmd;
-  return (struct cmd*)cmd;
-}
-//PAGEBREAK!
-// Parsing
-
-char whitespace[] = " \t\r\n\v";
-char symbols[] = "<|>&;()";
-
-int
-gettoken(char **ps, char *es, char **q, char **eq)
-{
-  char *s;
-  int ret;
-  
-  s = *ps;
-  while(s < es && strchr(whitespace, *s))
-    s++;
-  if(q)
-    *q = s;
-  ret = *s;
-  switch(*s){
-  case 0:
-    break;
-  case '|':
-  case '(':
-  case ')':
-  case ';':
-  case '&':
-  case '<':
-    s++;
-    break;
-  case '>':
-    s++;
-    if(*s == '>'){
-      ret = '+';
-      s++;
-    }
-    break;
-  default:
-    ret = 'a';
-    while(s < es && !strchr(whitespace, *s) && !strchr(symbols, *s))
-      s++;
-    break;
-  }
-  if(eq)
-    *eq = s;
-  
-  while(s < es && strchr(whitespace, *s))
-    s++;
-  *ps = s;
-  return ret;
-}
-
-int
-peek(char **ps, char *es, char *toks)
-{
-  char *s;
-  
-  s = *ps;
-  while(s < es && strchr(whitespace, *s))
-    s++;
-  *ps = s;
-  return *s && strchr(toks, *s);
-}
-
-struct cmd *parseline(char**, char*);
-struct cmd *parsepipe(char**, char*);
-struct cmd *parseexec(char**, char*);
-struct cmd *nulterminate(struct cmd*);
-
-struct cmd*
-parsecmd(char *s)
-{
-  char *es;
-  struct cmd *cmd;
-
-  es = s + strlen(s);
-  cmd = parseline(&s, es);
-  peek(&s, es, "");
-  if(s != es){
-    printf(2, "leftovers: %s\n", s);
-    panic("syntax");
-  }
-  nulterminate(cmd);
-  return cmd;
-}
-
-struct cmd*
-parseline(char **ps, char *es)
-{
-  struct cmd *cmd;
-
-  cmd = parsepipe(ps, es);
-  while(peek(ps, es, "&")){
-    gettoken(ps, es, 0, 0);
-    cmd = backcmd(cmd);
-  }
-  if(peek(ps, es, ";")){
-    gettoken(ps, es, 0, 0);
-    cmd = listcmd(cmd, parseline(ps, es));
-  }
-  return cmd;
-}
-
-struct cmd*
-parsepipe(char **ps, char *es)
-{
-  struct cmd *cmd;
-
-  cmd = parseexec(ps, es);
-  if(peek(ps, es, "|")){
-    gettoken(ps, es, 0, 0);
-    cmd = pipecmd(cmd, parsepipe(ps, es));
-  }
-  return cmd;
-}
-
-struct cmd*
-parseredirs(struct cmd *cmd, char **ps, char *es)
-{
-  int tok;
-  char *q, *eq;
-
-  while(peek(ps, es, "<>")){
-    tok = gettoken(ps, es, 0, 0);
-    if(gettoken(ps, es, &q, &eq) != 'a')
-      panic("missing file for redirection");
-    switch(tok){
-    case '<':
-      cmd = redircmd(cmd, q, eq, O_RDONLY, 0);
-      break;
-    case '>':
-      cmd = redircmd(cmd, q, eq, O_WRONLY|O_CREATE, 1);
-      break;
-    case '+':  // >>
-      cmd = redircmd(cmd, q, eq, O_WRONLY|O_CREATE, 1);
-      break;
-    }
-  }
-  return cmd;
-}
-
-struct cmd*
-parseblock(char **ps, char *es)
-{
-  struct cmd *cmd;
-
-  if(!peek(ps, es, "("))
-    panic("parseblock");
-  gettoken(ps, es, 0, 0);
-  cmd = parseline(ps, es);
-  if(!peek(ps, es, ")"))
-    panic("syntax - missing )");
-  gettoken(ps, es, 0, 0);
-  cmd = parseredirs(cmd, ps, es);
-  return cmd;
-}
-
-struct cmd*
-parseexec(char **ps, char *es)
-{
-  char *q, *eq;
-  int tok, argc;
-  struct execcmd *cmd;
-  struct cmd *ret;
-  
-  if(peek(ps, es, "("))
-    return parseblock(ps, es);
-
-  ret = execcmd();
-  cmd = (struct execcmd*)ret;
-
-  argc = 0;
-  ret = parseredirs(ret, ps, es);
-  while(!peek(ps, es, "|)&;")){
-    if((tok=gettoken(ps, es, &q, &eq)) == 0)
-      break;
-    if(tok != 'a')
-      panic("syntax");
-    cmd->argv[argc] = q;
-    cmd->eargv[argc] = eq;
-    argc++;
-    if(argc >= MAXARGS)
-      panic("too many args");
-    ret = parseredirs(ret, ps, es);
-  }
-  cmd->argv[argc] = 0;
-  cmd->eargv[argc] = 0;
-  return ret;
-}
-
-// NUL-terminate all the counted strings.
-struct cmd*
-nulterminate(struct cmd *cmd)
-{
-  int i;
-  struct backcmd *bcmd;
-  struct execcmd *ecmd;
-  struct listcmd *lcmd;
-  struct pipecmd *pcmd;
-  struct redircmd *rcmd;
-
-  if(cmd == 0)
-    return 0;
-  
-  switch(cmd->type){
-  case EXEC:
-    ecmd = (struct execcmd*)cmd;
-    for(i=0; ecmd->argv[i]; i++)
-      *ecmd->eargv[i] = 0;
-    break;
-
-  case REDIR:
-    rcmd = (struct redircmd*)cmd;
-    nulterminate(rcmd->cmd);
-    *rcmd->efile = 0;
-    break;
-
-  case PIPE:
-    pcmd = (struct pipecmd*)cmd;
-    nulterminate(pcmd->left);
-    nulterminate(pcmd->right);
-    break;
-    
-  case LIST:
-    lcmd = (struct listcmd*)cmd;
-    nulterminate(lcmd->left);
-    nulterminate(lcmd->right);
-    break;
-
-  case BACK:
-    bcmd = (struct backcmd*)cmd;
-    nulterminate(bcmd->cmd);
-    break;
-  }
-  return cmd;
-}
diff --git a/xv6/sh.d b/xv6/sh.d
deleted file mode 100644
index f1f59c0..0000000
--- a/xv6/sh.d
+++ /dev/null
@@ -1 +0,0 @@
-sh.o: sh.c types.h user.h fcntl.h
diff --git a/xv6/sh.sym b/xv6/sh.sym
deleted file mode 100644
index b48ff5a..0000000
--- a/xv6/sh.sym
+++ /dev/null
@@ -1,91 +0,0 @@
-00000000 .text
-00001930 .rodata
-00001a78 .eh_frame
-00001f50 .data
-00001f80 .bss
-00000000 .comment
-00000000 .debug_aranges
-00000000 .debug_info
-00000000 .debug_abbrev
-00000000 .debug_line
-00000000 .debug_str
-00000000 .debug_loc
-00000000 sh.c
-00001f80 jobs_table
-0001df80 jobs_counter
-0001dfa0 buf.999
-00000000 ulib.c
-00001168 stosb
-00000000 printf.c
-00001494 putc
-000014bc printint
-00001f60 digits.923
-00000000 umalloc.c
-0001e004 base
-0001e00c freep
-000017f7 morecore
-0000118d strcpy
-0000146c waitpid
-0000156b printf
-00001386 memmove
-00001414 mknod
-00000812 execcmd
-00001484 foreground
-0000127e gets
-0000144c getpid
-00000cbf parsepipe
-00000b5f parsecmd
-0000095b backcmd
-00000aea peek
-00000d43 parseredirs
-000009a2 gettoken
-0000184f malloc
-0000145c sleep
-00001f50 whitespace
-0000148c set_priority
-00001474 wait_stat
-000007ed fork1
-00001087 nulterminate
-000013dc pipe
-000002e2 listJobs
-00000284 getcmd
-000013ec write
-00001424 fstat
-000013fc kill
-0000143c chdir
-00000beb parseline
-00000040 runcmd
-00000e6b parseblock
-00001404 exec
-000013d4 wait
-00001f56 symbols
-000013e4 read
-00000f3f parseexec
-0000141c unlink
-00000462 move_to_foreground
-00000000 copyString
-000007c0 panic
-000013c4 fork
-00001454 sbrk
-00001464 uptime
-00001f74 __bss_start
-00001227 memset
-00000560 main
-000011c1 strcmp
-00001444 dup
-000008bb pipecmd
-00000850 redircmd
-0000147c list_pgroup
-000012ed stat
-00001f74 _edata
-0001e010 _end
-0000142c link
-000013cc exit
-0000133b atoi
-00001202 strlen
-0000140c open
-0000124b strchr
-00001434 mkdir
-000013f4 close
-0000090b listcmd
-00001720 free
diff --git a/xv6/show1 b/xv6/show1
deleted file mode 100755
index e0d3d83..0000000
--- a/xv6/show1
+++ /dev/null
@@ -1,3 +0,0 @@
-#!/bin/sh
-
-runoff1 "$@" | pr.pl -h "xv6/$@" | mpage -m50t50b -o -bLetter -T -t -2 -FLucidaSans-Typewriter83 -L60 >x.ps; gv --swap x.ps
diff --git a/xv6/sign.pl b/xv6/sign.pl
deleted file mode 100755
index d793035..0000000
--- a/xv6/sign.pl
+++ /dev/null
@@ -1,19 +0,0 @@
-#!/usr/bin/perl
-
-open(SIG, $ARGV[0]) || die "open $ARGV[0]: $!";
-
-$n = sysread(SIG, $buf, 1000);
-
-if($n > 510){
-  print STDERR "boot block too large: $n bytes (max 510)\n";
-  exit 1;
-}
-
-print STDERR "boot block is $n bytes (max 510)\n";
-
-$buf .= "\0" x (510-$n);
-$buf .= "\x55\xAA";
-
-open(SIG, ">$ARGV[0]") || die "open >$ARGV[0]: $!";
-print SIG $buf;
-close SIG;
diff --git a/xv6/sleep1.p b/xv6/sleep1.p
deleted file mode 100644
index af69772..0000000
--- a/xv6/sleep1.p
+++ /dev/null
@@ -1,134 +0,0 @@
-/*
-This file defines a Promela model for xv6's
-acquire, release, sleep, and wakeup, along with
-a model of a simple producer/consumer queue.
-
-To run:
-	spinp sleep1.p
-
-(You may need to install Spin, available at http://spinroot.com/.)
-
-After a successful run spin prints something like:
-
-	unreached in proctype consumer
-		(0 of 37 states)
-	unreached in proctype producer
-		(0 of 23 states)
-
-After an unsuccessful run, the spinp script prints
-an execution trace that causes a deadlock.
-
-The safe body of producer reads:
-
-		acquire(lk);
-		x = value; value = x + 1; x = 0;
-		wakeup(0);
-		release(lk);
-		i = i + 1;
-
-If this is changed to:
-
-		x = value; value = x + 1; x = 0;
-		acquire(lk);
-		wakeup(0);
-		release(lk);
-		i = i + 1;
-
-then a deadlock can happen, because the non-atomic
-increment of value conflicts with the non-atomic 
-decrement in consumer, causing value to have a bad value.
-Try this.
-
-If it is changed to:
-
-		acquire(lk);
-		x = value; value = x + 1; x = 0;
-		release(lk);
-		wakeup(0);
-		i = i + 1;
-
-then nothing bad happens: it is okay to wakeup after release
-instead of before, although it seems morally wrong.
-*/
-
-#define ITER 4
-#define N 2
-
-bit lk;
-byte value;
-bit sleeping[N];
-
-inline acquire(x)
-{
-	atomic { x == 0; x = 1 }
-}
-
-inline release(x)
-{
-	assert x==1;
-	x = 0
-}
-
-inline sleep(cond, lk)
-{
-	assert !sleeping[_pid];
-	if
-	:: cond ->
-		skip
-	:: else ->
-		atomic { release(lk); sleeping[_pid] = 1 };
-		sleeping[_pid] == 0;
-		acquire(lk)
-	fi
-}
-
-inline wakeup()
-{
-	w = 0;
-	do
-	:: w < N ->
-		sleeping[w] = 0;
-		w = w + 1
-	:: else ->
-		break
-	od
-}
-
-active[N] proctype consumer()
-{
-	byte i, x;
-	
-	i = 0;
-	do
-	:: i < ITER ->
-		acquire(lk);
-		sleep(value > 0, lk);
-		x = value; value = x - 1; x = 0;
-		release(lk);
-		i = i + 1;
-	:: else ->
-		break
-	od;
-	i = 0;
-	skip
-}
-
-active[N] proctype producer()
-{
-	byte i, x, w;
-	
-	i = 0;
-	do
-	:: i < ITER ->
-		acquire(lk);
-		x = value; value = x + 1; x = 0;
-		release(lk);
-		wakeup();
-		i = i + 1;
-	:: else ->
-		break
-	od;
-	i = 0;
-	skip	
-}
-
diff --git a/xv6/spinlock.c b/xv6/spinlock.c
deleted file mode 100644
index a16621c..0000000
--- a/xv6/spinlock.c
+++ /dev/null
@@ -1,117 +0,0 @@
-// Mutual exclusion spin locks.
-
-#include "types.h"
-#include "defs.h"
-#include "param.h"
-#include "x86.h"
-#include "memlayout.h"
-#include "mmu.h"
-#include "proc.h"
-#include "spinlock.h"
-
-void
-initlock(struct spinlock *lk, char *name)
-{
-  lk->name = name;
-  lk->locked = 0;
-  lk->cpu = 0;
-}
-
-// Acquire the lock.
-// Loops (spins) until the lock is acquired.
-// Holding a lock for a long time may cause
-// other CPUs to waste time spinning to acquire it.
-void
-acquire(struct spinlock *lk)
-{
-  pushcli(); // disable interrupts to avoid deadlock.
-  if(holding(lk))
-    panic("acquire");
-
-  // The xchg is atomic.
-  // It also serializes, so that reads after acquire are not
-  // reordered before it. 
-  while(xchg(&lk->locked, 1) != 0)
-    ;
-
-  // Record info about lock acquisition for debugging.
-  lk->cpu = cpu;
-  getcallerpcs(&lk, lk->pcs);
-}
-
-// Release the lock.
-void
-release(struct spinlock *lk)
-{
-  if(!holding(lk))
-    panic("release");
-
-  lk->pcs[0] = 0;
-  lk->cpu = 0;
-
-  // The xchg serializes, so that reads before release are 
-  // not reordered after it.  The 1996 PentiumPro manual (Volume 3,
-  // 7.2) says reads can be carried out speculatively and in
-  // any order, which implies we need to serialize here.
-  // But the 2007 Intel 64 Architecture Memory Ordering White
-  // Paper says that Intel 64 and IA-32 will not move a load
-  // after a store. So lock->locked = 0 would work here.
-  // The xchg being asm volatile ensures gcc emits it after
-  // the above assignments (and after the critical section).
-  xchg(&lk->locked, 0);
-
-  popcli();
-}
-
-// Record the current call stack in pcs[] by following the %ebp chain.
-void
-getcallerpcs(void *v, uint pcs[])
-{
-  uint *ebp;
-  int i;
-  
-  ebp = (uint*)v - 2;
-  for(i = 0; i < 10; i++){
-    if(ebp == 0 || ebp < (uint*)KERNBASE || ebp == (uint*)0xffffffff)
-      break;
-    pcs[i] = ebp[1];     // saved %eip
-    ebp = (uint*)ebp[0]; // saved %ebp
-  }
-  for(; i < 10; i++)
-    pcs[i] = 0;
-}
-
-// Check whether this cpu is holding the lock.
-int
-holding(struct spinlock *lock)
-{
-  return lock->locked && lock->cpu == cpu;
-}
-
-
-// Pushcli/popcli are like cli/sti except that they are matched:
-// it takes two popcli to undo two pushcli.  Also, if interrupts
-// are off, then pushcli, popcli leaves them off.
-
-void
-pushcli(void)
-{
-  int eflags;
-  
-  eflags = readeflags();
-  cli();
-  if(cpu->ncli++ == 0)
-    cpu->intena = eflags & FL_IF;
-}
-
-void
-popcli(void)
-{
-  if(readeflags()&FL_IF)
-    panic("popcli - interruptible");
-  if(--cpu->ncli < 0)
-    panic("popcli");
-  if(cpu->ncli == 0 && cpu->intena)
-    sti();
-}
-
diff --git a/xv6/spinlock.d b/xv6/spinlock.d
deleted file mode 100644
index fc0b596..0000000
--- a/xv6/spinlock.d
+++ /dev/null
@@ -1,2 +0,0 @@
-spinlock.o: spinlock.c types.h defs.h param.h x86.h memlayout.h mmu.h \
- proc.h spinlock.h
diff --git a/xv6/spinlock.h b/xv6/spinlock.h
deleted file mode 100644
index fdda016..0000000
--- a/xv6/spinlock.h
+++ /dev/null
@@ -1,11 +0,0 @@
-// Mutual exclusion lock.
-struct spinlock {
-  uint locked;       // Is the lock held?
-  
-  // For debugging:
-  char *name;        // Name of lock.
-  struct cpu *cpu;   // The cpu holding the lock.
-  uint pcs[10];      // The call stack (an array of program counters)
-                     // that locked the lock.
-};
-
diff --git a/xv6/spinp b/xv6/spinp
deleted file mode 100755
index db9614b..0000000
--- a/xv6/spinp
+++ /dev/null
@@ -1,16 +0,0 @@
-#!/bin/sh
-
-if [ $# != 1 ] || [ ! -f "$1" ]; then
-	echo 'usage: spinp file.p' 1>&2
-	exit 1
-fi
-
-rm -f $1.trail
-spin -a $1 || exit 1
-cc -DSAFETY -DREACH -DMEMLIM=500 -o pan pan.c
-pan -i
-rm pan.* pan
-if [ -f $1.trail ]; then
-	spin -t -p $1
-fi
-
diff --git a/xv6/stat.h b/xv6/stat.h
deleted file mode 100644
index edc32f8..0000000
--- a/xv6/stat.h
+++ /dev/null
@@ -1,12 +0,0 @@
-#define T_DIR  1   // Directory
-#define T_FILE 2   // File
-#define T_DEV  3   // Device
-
-
-struct stat {
-  short type;  // Type of file
-  int dev;     // File system's disk device
-  uint ino;    // Inode number
-  short nlink; // Number of links to file
-  uint size;   // Size of file in bytes
-};
diff --git a/xv6/stressfs.asm b/xv6/stressfs.asm
deleted file mode 100644
index 1dd9203..0000000
--- a/xv6/stressfs.asm
+++ /dev/null
@@ -1,1318 +0,0 @@
-
-_stressfs:     file format elf32-i386
-
-
-Disassembly of section .text:
-
-00000000 <main>:
-#include "fs.h"
-#include "fcntl.h"
-
-int
-main(int argc, char *argv[])
-{
-   0:	55                   	push   %ebp
-   1:	89 e5                	mov    %esp,%ebp
-   3:	83 e4 f0             	and    $0xfffffff0,%esp
-   6:	81 ec 30 02 00 00    	sub    $0x230,%esp
-  int fd, i;
-  char path[] = "stressfs0";
-   c:	c7 84 24 1e 02 00 00 	movl   $0x65727473,0x21e(%esp)
-  13:	73 74 72 65 
-  17:	c7 84 24 22 02 00 00 	movl   $0x73667373,0x222(%esp)
-  1e:	73 73 66 73 
-  22:	66 c7 84 24 26 02 00 	movw   $0x30,0x226(%esp)
-  29:	00 30 00 
-  char data[512];
-
-  printf(1, "stressfs starting\n");
-  2c:	c7 44 24 04 8b 09 00 	movl   $0x98b,0x4(%esp)
-  33:	00 
-  34:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
-  3b:	e8 87 05 00 00       	call   5c7 <printf>
-  memset(data, 'a', sizeof(data));
-  40:	c7 44 24 08 00 02 00 	movl   $0x200,0x8(%esp)
-  47:	00 
-  48:	c7 44 24 04 61 00 00 	movl   $0x61,0x4(%esp)
-  4f:	00 
-  50:	8d 44 24 1e          	lea    0x1e(%esp),%eax
-  54:	89 04 24             	mov    %eax,(%esp)
-  57:	e8 27 02 00 00       	call   283 <memset>
-
-  for(i = 0; i < 4; i++)
-  5c:	c7 84 24 2c 02 00 00 	movl   $0x0,0x22c(%esp)
-  63:	00 00 00 00 
-  67:	eb 11                	jmp    7a <main+0x7a>
-    if(fork() > 0)
-  69:	e8 b2 03 00 00       	call   420 <fork>
-  6e:	85 c0                	test   %eax,%eax
-  70:	7f 14                	jg     86 <main+0x86>
-  char data[512];
-
-  printf(1, "stressfs starting\n");
-  memset(data, 'a', sizeof(data));
-
-  for(i = 0; i < 4; i++)
-  72:	83 84 24 2c 02 00 00 	addl   $0x1,0x22c(%esp)
-  79:	01 
-  7a:	83 bc 24 2c 02 00 00 	cmpl   $0x3,0x22c(%esp)
-  81:	03 
-  82:	7e e5                	jle    69 <main+0x69>
-  84:	eb 01                	jmp    87 <main+0x87>
-    if(fork() > 0)
-      break;
-  86:	90                   	nop
-
-  printf(1, "write %d\n", i);
-  87:	8b 84 24 2c 02 00 00 	mov    0x22c(%esp),%eax
-  8e:	89 44 24 08          	mov    %eax,0x8(%esp)
-  92:	c7 44 24 04 9e 09 00 	movl   $0x99e,0x4(%esp)
-  99:	00 
-  9a:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
-  a1:	e8 21 05 00 00       	call   5c7 <printf>
-
-  path[8] += i;
-  a6:	0f b6 84 24 26 02 00 	movzbl 0x226(%esp),%eax
-  ad:	00 
-  ae:	89 c2                	mov    %eax,%edx
-  b0:	8b 84 24 2c 02 00 00 	mov    0x22c(%esp),%eax
-  b7:	01 d0                	add    %edx,%eax
-  b9:	88 84 24 26 02 00 00 	mov    %al,0x226(%esp)
-  fd = open(path, O_CREATE | O_RDWR);
-  c0:	c7 44 24 04 02 02 00 	movl   $0x202,0x4(%esp)
-  c7:	00 
-  c8:	8d 84 24 1e 02 00 00 	lea    0x21e(%esp),%eax
-  cf:	89 04 24             	mov    %eax,(%esp)
-  d2:	e8 91 03 00 00       	call   468 <open>
-  d7:	89 84 24 28 02 00 00 	mov    %eax,0x228(%esp)
-  for(i = 0; i < 20; i++)
-  de:	c7 84 24 2c 02 00 00 	movl   $0x0,0x22c(%esp)
-  e5:	00 00 00 00 
-  e9:	eb 27                	jmp    112 <main+0x112>
-//    printf(fd, "%d\n", i);
-    write(fd, data, sizeof(data));
-  eb:	c7 44 24 08 00 02 00 	movl   $0x200,0x8(%esp)
-  f2:	00 
-  f3:	8d 44 24 1e          	lea    0x1e(%esp),%eax
-  f7:	89 44 24 04          	mov    %eax,0x4(%esp)
-  fb:	8b 84 24 28 02 00 00 	mov    0x228(%esp),%eax
- 102:	89 04 24             	mov    %eax,(%esp)
- 105:	e8 3e 03 00 00       	call   448 <write>
-
-  printf(1, "write %d\n", i);
-
-  path[8] += i;
-  fd = open(path, O_CREATE | O_RDWR);
-  for(i = 0; i < 20; i++)
- 10a:	83 84 24 2c 02 00 00 	addl   $0x1,0x22c(%esp)
- 111:	01 
- 112:	83 bc 24 2c 02 00 00 	cmpl   $0x13,0x22c(%esp)
- 119:	13 
- 11a:	7e cf                	jle    eb <main+0xeb>
-//    printf(fd, "%d\n", i);
-    write(fd, data, sizeof(data));
-  close(fd);
- 11c:	8b 84 24 28 02 00 00 	mov    0x228(%esp),%eax
- 123:	89 04 24             	mov    %eax,(%esp)
- 126:	e8 25 03 00 00       	call   450 <close>
-
-  printf(1, "read\n");
- 12b:	c7 44 24 04 a8 09 00 	movl   $0x9a8,0x4(%esp)
- 132:	00 
- 133:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
- 13a:	e8 88 04 00 00       	call   5c7 <printf>
-
-  fd = open(path, O_RDONLY);
- 13f:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
- 146:	00 
- 147:	8d 84 24 1e 02 00 00 	lea    0x21e(%esp),%eax
- 14e:	89 04 24             	mov    %eax,(%esp)
- 151:	e8 12 03 00 00       	call   468 <open>
- 156:	89 84 24 28 02 00 00 	mov    %eax,0x228(%esp)
-  for (i = 0; i < 20; i++)
- 15d:	c7 84 24 2c 02 00 00 	movl   $0x0,0x22c(%esp)
- 164:	00 00 00 00 
- 168:	eb 27                	jmp    191 <main+0x191>
-    read(fd, data, sizeof(data));
- 16a:	c7 44 24 08 00 02 00 	movl   $0x200,0x8(%esp)
- 171:	00 
- 172:	8d 44 24 1e          	lea    0x1e(%esp),%eax
- 176:	89 44 24 04          	mov    %eax,0x4(%esp)
- 17a:	8b 84 24 28 02 00 00 	mov    0x228(%esp),%eax
- 181:	89 04 24             	mov    %eax,(%esp)
- 184:	e8 b7 02 00 00       	call   440 <read>
-  close(fd);
-
-  printf(1, "read\n");
-
-  fd = open(path, O_RDONLY);
-  for (i = 0; i < 20; i++)
- 189:	83 84 24 2c 02 00 00 	addl   $0x1,0x22c(%esp)
- 190:	01 
- 191:	83 bc 24 2c 02 00 00 	cmpl   $0x13,0x22c(%esp)
- 198:	13 
- 199:	7e cf                	jle    16a <main+0x16a>
-    read(fd, data, sizeof(data));
-  close(fd);
- 19b:	8b 84 24 28 02 00 00 	mov    0x228(%esp),%eax
- 1a2:	89 04 24             	mov    %eax,(%esp)
- 1a5:	e8 a6 02 00 00       	call   450 <close>
-
-  wait(0);
- 1aa:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
- 1b1:	e8 7a 02 00 00       	call   430 <wait>
-  
-  exit(EXIT_STATUS_DEFAULT);
- 1b6:	c7 04 24 02 00 00 00 	movl   $0x2,(%esp)
- 1bd:	e8 66 02 00 00       	call   428 <exit>
- 1c2:	90                   	nop
- 1c3:	90                   	nop
-
-000001c4 <stosb>:
-               "cc");
-}
-
-static inline void
-stosb(void *addr, int data, int cnt)
-{
- 1c4:	55                   	push   %ebp
- 1c5:	89 e5                	mov    %esp,%ebp
- 1c7:	57                   	push   %edi
- 1c8:	53                   	push   %ebx
-  asm volatile("cld; rep stosb" :
- 1c9:	8b 4d 08             	mov    0x8(%ebp),%ecx
- 1cc:	8b 55 10             	mov    0x10(%ebp),%edx
- 1cf:	8b 45 0c             	mov    0xc(%ebp),%eax
- 1d2:	89 cb                	mov    %ecx,%ebx
- 1d4:	89 df                	mov    %ebx,%edi
- 1d6:	89 d1                	mov    %edx,%ecx
- 1d8:	fc                   	cld    
- 1d9:	f3 aa                	rep stos %al,%es:(%edi)
- 1db:	89 ca                	mov    %ecx,%edx
- 1dd:	89 fb                	mov    %edi,%ebx
- 1df:	89 5d 08             	mov    %ebx,0x8(%ebp)
- 1e2:	89 55 10             	mov    %edx,0x10(%ebp)
-               "=D" (addr), "=c" (cnt) :
-               "0" (addr), "1" (cnt), "a" (data) :
-               "memory", "cc");
-}
- 1e5:	5b                   	pop    %ebx
- 1e6:	5f                   	pop    %edi
- 1e7:	5d                   	pop    %ebp
- 1e8:	c3                   	ret    
-
-000001e9 <strcpy>:
-#include "user.h"
-#include "x86.h"
-
-char*
-strcpy(char *s, char *t)
-{
- 1e9:	55                   	push   %ebp
- 1ea:	89 e5                	mov    %esp,%ebp
- 1ec:	83 ec 10             	sub    $0x10,%esp
-  char *os;
-
-  os = s;
- 1ef:	8b 45 08             	mov    0x8(%ebp),%eax
- 1f2:	89 45 fc             	mov    %eax,-0x4(%ebp)
-  while((*s++ = *t++) != 0)
- 1f5:	90                   	nop
- 1f6:	8b 45 0c             	mov    0xc(%ebp),%eax
- 1f9:	0f b6 10             	movzbl (%eax),%edx
- 1fc:	8b 45 08             	mov    0x8(%ebp),%eax
- 1ff:	88 10                	mov    %dl,(%eax)
- 201:	8b 45 08             	mov    0x8(%ebp),%eax
- 204:	0f b6 00             	movzbl (%eax),%eax
- 207:	84 c0                	test   %al,%al
- 209:	0f 95 c0             	setne  %al
- 20c:	83 45 08 01          	addl   $0x1,0x8(%ebp)
- 210:	83 45 0c 01          	addl   $0x1,0xc(%ebp)
- 214:	84 c0                	test   %al,%al
- 216:	75 de                	jne    1f6 <strcpy+0xd>
-    ;
-  return os;
- 218:	8b 45 fc             	mov    -0x4(%ebp),%eax
-}
- 21b:	c9                   	leave  
- 21c:	c3                   	ret    
-
-0000021d <strcmp>:
-
-int
-strcmp(const char *p, const char *q)
-{
- 21d:	55                   	push   %ebp
- 21e:	89 e5                	mov    %esp,%ebp
-  while(*p && *p == *q)
- 220:	eb 08                	jmp    22a <strcmp+0xd>
-    p++, q++;
- 222:	83 45 08 01          	addl   $0x1,0x8(%ebp)
- 226:	83 45 0c 01          	addl   $0x1,0xc(%ebp)
-}
-
-int
-strcmp(const char *p, const char *q)
-{
-  while(*p && *p == *q)
- 22a:	8b 45 08             	mov    0x8(%ebp),%eax
- 22d:	0f b6 00             	movzbl (%eax),%eax
- 230:	84 c0                	test   %al,%al
- 232:	74 10                	je     244 <strcmp+0x27>
- 234:	8b 45 08             	mov    0x8(%ebp),%eax
- 237:	0f b6 10             	movzbl (%eax),%edx
- 23a:	8b 45 0c             	mov    0xc(%ebp),%eax
- 23d:	0f b6 00             	movzbl (%eax),%eax
- 240:	38 c2                	cmp    %al,%dl
- 242:	74 de                	je     222 <strcmp+0x5>
-    p++, q++;
-  return (uchar)*p - (uchar)*q;
- 244:	8b 45 08             	mov    0x8(%ebp),%eax
- 247:	0f b6 00             	movzbl (%eax),%eax
- 24a:	0f b6 d0             	movzbl %al,%edx
- 24d:	8b 45 0c             	mov    0xc(%ebp),%eax
- 250:	0f b6 00             	movzbl (%eax),%eax
- 253:	0f b6 c0             	movzbl %al,%eax
- 256:	89 d1                	mov    %edx,%ecx
- 258:	29 c1                	sub    %eax,%ecx
- 25a:	89 c8                	mov    %ecx,%eax
-}
- 25c:	5d                   	pop    %ebp
- 25d:	c3                   	ret    
-
-0000025e <strlen>:
-
-uint
-strlen(char *s)
-{
- 25e:	55                   	push   %ebp
- 25f:	89 e5                	mov    %esp,%ebp
- 261:	83 ec 10             	sub    $0x10,%esp
-  int n;
-
-  for(n = 0; s[n]; n++)
- 264:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
- 26b:	eb 04                	jmp    271 <strlen+0x13>
- 26d:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
- 271:	8b 45 fc             	mov    -0x4(%ebp),%eax
- 274:	03 45 08             	add    0x8(%ebp),%eax
- 277:	0f b6 00             	movzbl (%eax),%eax
- 27a:	84 c0                	test   %al,%al
- 27c:	75 ef                	jne    26d <strlen+0xf>
-    ;
-  return n;
- 27e:	8b 45 fc             	mov    -0x4(%ebp),%eax
-}
- 281:	c9                   	leave  
- 282:	c3                   	ret    
-
-00000283 <memset>:
-
-void*
-memset(void *dst, int c, uint n)
-{
- 283:	55                   	push   %ebp
- 284:	89 e5                	mov    %esp,%ebp
- 286:	83 ec 0c             	sub    $0xc,%esp
-  stosb(dst, c, n);
- 289:	8b 45 10             	mov    0x10(%ebp),%eax
- 28c:	89 44 24 08          	mov    %eax,0x8(%esp)
- 290:	8b 45 0c             	mov    0xc(%ebp),%eax
- 293:	89 44 24 04          	mov    %eax,0x4(%esp)
- 297:	8b 45 08             	mov    0x8(%ebp),%eax
- 29a:	89 04 24             	mov    %eax,(%esp)
- 29d:	e8 22 ff ff ff       	call   1c4 <stosb>
-  return dst;
- 2a2:	8b 45 08             	mov    0x8(%ebp),%eax
-}
- 2a5:	c9                   	leave  
- 2a6:	c3                   	ret    
-
-000002a7 <strchr>:
-
-char*
-strchr(const char *s, char c)
-{
- 2a7:	55                   	push   %ebp
- 2a8:	89 e5                	mov    %esp,%ebp
- 2aa:	83 ec 04             	sub    $0x4,%esp
- 2ad:	8b 45 0c             	mov    0xc(%ebp),%eax
- 2b0:	88 45 fc             	mov    %al,-0x4(%ebp)
-  for(; *s; s++)
- 2b3:	eb 14                	jmp    2c9 <strchr+0x22>
-    if(*s == c)
- 2b5:	8b 45 08             	mov    0x8(%ebp),%eax
- 2b8:	0f b6 00             	movzbl (%eax),%eax
- 2bb:	3a 45 fc             	cmp    -0x4(%ebp),%al
- 2be:	75 05                	jne    2c5 <strchr+0x1e>
-      return (char*)s;
- 2c0:	8b 45 08             	mov    0x8(%ebp),%eax
- 2c3:	eb 13                	jmp    2d8 <strchr+0x31>
-}
-
-char*
-strchr(const char *s, char c)
-{
-  for(; *s; s++)
- 2c5:	83 45 08 01          	addl   $0x1,0x8(%ebp)
- 2c9:	8b 45 08             	mov    0x8(%ebp),%eax
- 2cc:	0f b6 00             	movzbl (%eax),%eax
- 2cf:	84 c0                	test   %al,%al
- 2d1:	75 e2                	jne    2b5 <strchr+0xe>
-    if(*s == c)
-      return (char*)s;
-  return 0;
- 2d3:	b8 00 00 00 00       	mov    $0x0,%eax
-}
- 2d8:	c9                   	leave  
- 2d9:	c3                   	ret    
-
-000002da <gets>:
-
-char*
-gets(char *buf, int max)
-{
- 2da:	55                   	push   %ebp
- 2db:	89 e5                	mov    %esp,%ebp
- 2dd:	83 ec 28             	sub    $0x28,%esp
-  int i, cc;
-  char c;
-
-  for(i=0; i+1 < max; ){
- 2e0:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
- 2e7:	eb 44                	jmp    32d <gets+0x53>
-    cc = read(0, &c, 1);
- 2e9:	c7 44 24 08 01 00 00 	movl   $0x1,0x8(%esp)
- 2f0:	00 
- 2f1:	8d 45 ef             	lea    -0x11(%ebp),%eax
- 2f4:	89 44 24 04          	mov    %eax,0x4(%esp)
- 2f8:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
- 2ff:	e8 3c 01 00 00       	call   440 <read>
- 304:	89 45 f0             	mov    %eax,-0x10(%ebp)
-    if(cc < 1)
- 307:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
- 30b:	7e 2d                	jle    33a <gets+0x60>
-      break;
-    buf[i++] = c;
- 30d:	8b 45 f4             	mov    -0xc(%ebp),%eax
- 310:	03 45 08             	add    0x8(%ebp),%eax
- 313:	0f b6 55 ef          	movzbl -0x11(%ebp),%edx
- 317:	88 10                	mov    %dl,(%eax)
- 319:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
-    if(c == '\n' || c == '\r')
- 31d:	0f b6 45 ef          	movzbl -0x11(%ebp),%eax
- 321:	3c 0a                	cmp    $0xa,%al
- 323:	74 16                	je     33b <gets+0x61>
- 325:	0f b6 45 ef          	movzbl -0x11(%ebp),%eax
- 329:	3c 0d                	cmp    $0xd,%al
- 32b:	74 0e                	je     33b <gets+0x61>
-gets(char *buf, int max)
-{
-  int i, cc;
-  char c;
-
-  for(i=0; i+1 < max; ){
- 32d:	8b 45 f4             	mov    -0xc(%ebp),%eax
- 330:	83 c0 01             	add    $0x1,%eax
- 333:	3b 45 0c             	cmp    0xc(%ebp),%eax
- 336:	7c b1                	jl     2e9 <gets+0xf>
- 338:	eb 01                	jmp    33b <gets+0x61>
-    cc = read(0, &c, 1);
-    if(cc < 1)
-      break;
- 33a:	90                   	nop
-    buf[i++] = c;
-    if(c == '\n' || c == '\r')
-      break;
-  }
-  buf[i] = '\0';
- 33b:	8b 45 f4             	mov    -0xc(%ebp),%eax
- 33e:	03 45 08             	add    0x8(%ebp),%eax
- 341:	c6 00 00             	movb   $0x0,(%eax)
-  return buf;
- 344:	8b 45 08             	mov    0x8(%ebp),%eax
-}
- 347:	c9                   	leave  
- 348:	c3                   	ret    
-
-00000349 <stat>:
-
-int
-stat(char *n, struct stat *st)
-{
- 349:	55                   	push   %ebp
- 34a:	89 e5                	mov    %esp,%ebp
- 34c:	83 ec 28             	sub    $0x28,%esp
-  int fd;
-  int r;
-
-  fd = open(n, O_RDONLY);
- 34f:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
- 356:	00 
- 357:	8b 45 08             	mov    0x8(%ebp),%eax
- 35a:	89 04 24             	mov    %eax,(%esp)
- 35d:	e8 06 01 00 00       	call   468 <open>
- 362:	89 45 f4             	mov    %eax,-0xc(%ebp)
-  if(fd < 0)
- 365:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
- 369:	79 07                	jns    372 <stat+0x29>
-    return -1;
- 36b:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
- 370:	eb 23                	jmp    395 <stat+0x4c>
-  r = fstat(fd, st);
- 372:	8b 45 0c             	mov    0xc(%ebp),%eax
- 375:	89 44 24 04          	mov    %eax,0x4(%esp)
- 379:	8b 45 f4             	mov    -0xc(%ebp),%eax
- 37c:	89 04 24             	mov    %eax,(%esp)
- 37f:	e8 fc 00 00 00       	call   480 <fstat>
- 384:	89 45 f0             	mov    %eax,-0x10(%ebp)
-  close(fd);
- 387:	8b 45 f4             	mov    -0xc(%ebp),%eax
- 38a:	89 04 24             	mov    %eax,(%esp)
- 38d:	e8 be 00 00 00       	call   450 <close>
-  return r;
- 392:	8b 45 f0             	mov    -0x10(%ebp),%eax
-}
- 395:	c9                   	leave  
- 396:	c3                   	ret    
-
-00000397 <atoi>:
-
-int
-atoi(const char *s)
-{
- 397:	55                   	push   %ebp
- 398:	89 e5                	mov    %esp,%ebp
- 39a:	83 ec 10             	sub    $0x10,%esp
-  int n;
-
-  n = 0;
- 39d:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
-  while('0' <= *s && *s <= '9')
- 3a4:	eb 23                	jmp    3c9 <atoi+0x32>
-    n = n*10 + *s++ - '0';
- 3a6:	8b 55 fc             	mov    -0x4(%ebp),%edx
- 3a9:	89 d0                	mov    %edx,%eax
- 3ab:	c1 e0 02             	shl    $0x2,%eax
- 3ae:	01 d0                	add    %edx,%eax
- 3b0:	01 c0                	add    %eax,%eax
- 3b2:	89 c2                	mov    %eax,%edx
- 3b4:	8b 45 08             	mov    0x8(%ebp),%eax
- 3b7:	0f b6 00             	movzbl (%eax),%eax
- 3ba:	0f be c0             	movsbl %al,%eax
- 3bd:	01 d0                	add    %edx,%eax
- 3bf:	83 e8 30             	sub    $0x30,%eax
- 3c2:	89 45 fc             	mov    %eax,-0x4(%ebp)
- 3c5:	83 45 08 01          	addl   $0x1,0x8(%ebp)
-atoi(const char *s)
-{
-  int n;
-
-  n = 0;
-  while('0' <= *s && *s <= '9')
- 3c9:	8b 45 08             	mov    0x8(%ebp),%eax
- 3cc:	0f b6 00             	movzbl (%eax),%eax
- 3cf:	3c 2f                	cmp    $0x2f,%al
- 3d1:	7e 0a                	jle    3dd <atoi+0x46>
- 3d3:	8b 45 08             	mov    0x8(%ebp),%eax
- 3d6:	0f b6 00             	movzbl (%eax),%eax
- 3d9:	3c 39                	cmp    $0x39,%al
- 3db:	7e c9                	jle    3a6 <atoi+0xf>
-    n = n*10 + *s++ - '0';
-  return n;
- 3dd:	8b 45 fc             	mov    -0x4(%ebp),%eax
-}
- 3e0:	c9                   	leave  
- 3e1:	c3                   	ret    
-
-000003e2 <memmove>:
-
-void*
-memmove(void *vdst, void *vsrc, int n)
-{
- 3e2:	55                   	push   %ebp
- 3e3:	89 e5                	mov    %esp,%ebp
- 3e5:	83 ec 10             	sub    $0x10,%esp
-  char *dst, *src;
-  
-  dst = vdst;
- 3e8:	8b 45 08             	mov    0x8(%ebp),%eax
- 3eb:	89 45 fc             	mov    %eax,-0x4(%ebp)
-  src = vsrc;
- 3ee:	8b 45 0c             	mov    0xc(%ebp),%eax
- 3f1:	89 45 f8             	mov    %eax,-0x8(%ebp)
-  while(n-- > 0)
- 3f4:	eb 13                	jmp    409 <memmove+0x27>
-    *dst++ = *src++;
- 3f6:	8b 45 f8             	mov    -0x8(%ebp),%eax
- 3f9:	0f b6 10             	movzbl (%eax),%edx
- 3fc:	8b 45 fc             	mov    -0x4(%ebp),%eax
- 3ff:	88 10                	mov    %dl,(%eax)
- 401:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
- 405:	83 45 f8 01          	addl   $0x1,-0x8(%ebp)
-{
-  char *dst, *src;
-  
-  dst = vdst;
-  src = vsrc;
-  while(n-- > 0)
- 409:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
- 40d:	0f 9f c0             	setg   %al
- 410:	83 6d 10 01          	subl   $0x1,0x10(%ebp)
- 414:	84 c0                	test   %al,%al
- 416:	75 de                	jne    3f6 <memmove+0x14>
-    *dst++ = *src++;
-  return vdst;
- 418:	8b 45 08             	mov    0x8(%ebp),%eax
-}
- 41b:	c9                   	leave  
- 41c:	c3                   	ret    
- 41d:	90                   	nop
- 41e:	90                   	nop
- 41f:	90                   	nop
-
-00000420 <fork>:
-  name: \
-    movl $SYS_ ## name, %eax; \
-    int $T_SYSCALL; \
-    ret
-
-SYSCALL(fork)
- 420:	b8 01 00 00 00       	mov    $0x1,%eax
- 425:	cd 40                	int    $0x40
- 427:	c3                   	ret    
-
-00000428 <exit>:
-SYSCALL(exit)
- 428:	b8 02 00 00 00       	mov    $0x2,%eax
- 42d:	cd 40                	int    $0x40
- 42f:	c3                   	ret    
-
-00000430 <wait>:
-SYSCALL(wait)
- 430:	b8 03 00 00 00       	mov    $0x3,%eax
- 435:	cd 40                	int    $0x40
- 437:	c3                   	ret    
-
-00000438 <pipe>:
-SYSCALL(pipe)
- 438:	b8 04 00 00 00       	mov    $0x4,%eax
- 43d:	cd 40                	int    $0x40
- 43f:	c3                   	ret    
-
-00000440 <read>:
-SYSCALL(read)
- 440:	b8 05 00 00 00       	mov    $0x5,%eax
- 445:	cd 40                	int    $0x40
- 447:	c3                   	ret    
-
-00000448 <write>:
-SYSCALL(write)
- 448:	b8 10 00 00 00       	mov    $0x10,%eax
- 44d:	cd 40                	int    $0x40
- 44f:	c3                   	ret    
-
-00000450 <close>:
-SYSCALL(close)
- 450:	b8 15 00 00 00       	mov    $0x15,%eax
- 455:	cd 40                	int    $0x40
- 457:	c3                   	ret    
-
-00000458 <kill>:
-SYSCALL(kill)
- 458:	b8 06 00 00 00       	mov    $0x6,%eax
- 45d:	cd 40                	int    $0x40
- 45f:	c3                   	ret    
-
-00000460 <exec>:
-SYSCALL(exec)
- 460:	b8 07 00 00 00       	mov    $0x7,%eax
- 465:	cd 40                	int    $0x40
- 467:	c3                   	ret    
-
-00000468 <open>:
-SYSCALL(open)
- 468:	b8 0f 00 00 00       	mov    $0xf,%eax
- 46d:	cd 40                	int    $0x40
- 46f:	c3                   	ret    
-
-00000470 <mknod>:
-SYSCALL(mknod)
- 470:	b8 11 00 00 00       	mov    $0x11,%eax
- 475:	cd 40                	int    $0x40
- 477:	c3                   	ret    
-
-00000478 <unlink>:
-SYSCALL(unlink)
- 478:	b8 12 00 00 00       	mov    $0x12,%eax
- 47d:	cd 40                	int    $0x40
- 47f:	c3                   	ret    
-
-00000480 <fstat>:
-SYSCALL(fstat)
- 480:	b8 08 00 00 00       	mov    $0x8,%eax
- 485:	cd 40                	int    $0x40
- 487:	c3                   	ret    
-
-00000488 <link>:
-SYSCALL(link)
- 488:	b8 13 00 00 00       	mov    $0x13,%eax
- 48d:	cd 40                	int    $0x40
- 48f:	c3                   	ret    
-
-00000490 <mkdir>:
-SYSCALL(mkdir)
- 490:	b8 14 00 00 00       	mov    $0x14,%eax
- 495:	cd 40                	int    $0x40
- 497:	c3                   	ret    
-
-00000498 <chdir>:
-SYSCALL(chdir)
- 498:	b8 09 00 00 00       	mov    $0x9,%eax
- 49d:	cd 40                	int    $0x40
- 49f:	c3                   	ret    
-
-000004a0 <dup>:
-SYSCALL(dup)
- 4a0:	b8 0a 00 00 00       	mov    $0xa,%eax
- 4a5:	cd 40                	int    $0x40
- 4a7:	c3                   	ret    
-
-000004a8 <getpid>:
-SYSCALL(getpid)
- 4a8:	b8 0b 00 00 00       	mov    $0xb,%eax
- 4ad:	cd 40                	int    $0x40
- 4af:	c3                   	ret    
-
-000004b0 <sbrk>:
-SYSCALL(sbrk)
- 4b0:	b8 0c 00 00 00       	mov    $0xc,%eax
- 4b5:	cd 40                	int    $0x40
- 4b7:	c3                   	ret    
-
-000004b8 <sleep>:
-SYSCALL(sleep)
- 4b8:	b8 0d 00 00 00       	mov    $0xd,%eax
- 4bd:	cd 40                	int    $0x40
- 4bf:	c3                   	ret    
-
-000004c0 <uptime>:
-SYSCALL(uptime)
- 4c0:	b8 0e 00 00 00       	mov    $0xe,%eax
- 4c5:	cd 40                	int    $0x40
- 4c7:	c3                   	ret    
-
-000004c8 <waitpid>:
-SYSCALL(waitpid)
- 4c8:	b8 16 00 00 00       	mov    $0x16,%eax
- 4cd:	cd 40                	int    $0x40
- 4cf:	c3                   	ret    
-
-000004d0 <wait_stat>:
-SYSCALL(wait_stat)
- 4d0:	b8 17 00 00 00       	mov    $0x17,%eax
- 4d5:	cd 40                	int    $0x40
- 4d7:	c3                   	ret    
-
-000004d8 <list_pgroup>:
-SYSCALL(list_pgroup)
- 4d8:	b8 18 00 00 00       	mov    $0x18,%eax
- 4dd:	cd 40                	int    $0x40
- 4df:	c3                   	ret    
-
-000004e0 <foreground>:
-SYSCALL(foreground)
- 4e0:	b8 19 00 00 00       	mov    $0x19,%eax
- 4e5:	cd 40                	int    $0x40
- 4e7:	c3                   	ret    
-
-000004e8 <set_priority>:
-SYSCALL(set_priority)
- 4e8:	b8 1a 00 00 00       	mov    $0x1a,%eax
- 4ed:	cd 40                	int    $0x40
- 4ef:	c3                   	ret    
-
-000004f0 <putc>:
-#include "stat.h"
-#include "user.h"
-
-static void
-putc(int fd, char c)
-{
- 4f0:	55                   	push   %ebp
- 4f1:	89 e5                	mov    %esp,%ebp
- 4f3:	83 ec 28             	sub    $0x28,%esp
- 4f6:	8b 45 0c             	mov    0xc(%ebp),%eax
- 4f9:	88 45 f4             	mov    %al,-0xc(%ebp)
-  write(fd, &c, 1);
- 4fc:	c7 44 24 08 01 00 00 	movl   $0x1,0x8(%esp)
- 503:	00 
- 504:	8d 45 f4             	lea    -0xc(%ebp),%eax
- 507:	89 44 24 04          	mov    %eax,0x4(%esp)
- 50b:	8b 45 08             	mov    0x8(%ebp),%eax
- 50e:	89 04 24             	mov    %eax,(%esp)
- 511:	e8 32 ff ff ff       	call   448 <write>
-}
- 516:	c9                   	leave  
- 517:	c3                   	ret    
-
-00000518 <printint>:
-
-static void
-printint(int fd, int xx, int base, int sgn)
-{
- 518:	55                   	push   %ebp
- 519:	89 e5                	mov    %esp,%ebp
- 51b:	83 ec 48             	sub    $0x48,%esp
-  static char digits[] = "0123456789ABCDEF";
-  char buf[16];
-  int i, neg;
-  uint x;
-
-  neg = 0;
- 51e:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
-  if(sgn && xx < 0){
- 525:	83 7d 14 00          	cmpl   $0x0,0x14(%ebp)
- 529:	74 17                	je     542 <printint+0x2a>
- 52b:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
- 52f:	79 11                	jns    542 <printint+0x2a>
-    neg = 1;
- 531:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
-    x = -xx;
- 538:	8b 45 0c             	mov    0xc(%ebp),%eax
- 53b:	f7 d8                	neg    %eax
- 53d:	89 45 ec             	mov    %eax,-0x14(%ebp)
- 540:	eb 06                	jmp    548 <printint+0x30>
-  } else {
-    x = xx;
- 542:	8b 45 0c             	mov    0xc(%ebp),%eax
- 545:	89 45 ec             	mov    %eax,-0x14(%ebp)
-  }
-
-  i = 0;
- 548:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
-  do{
-    buf[i++] = digits[x % base];
- 54f:	8b 4d 10             	mov    0x10(%ebp),%ecx
- 552:	8b 45 ec             	mov    -0x14(%ebp),%eax
- 555:	ba 00 00 00 00       	mov    $0x0,%edx
- 55a:	f7 f1                	div    %ecx
- 55c:	89 d0                	mov    %edx,%eax
- 55e:	0f b6 90 f4 0b 00 00 	movzbl 0xbf4(%eax),%edx
- 565:	8d 45 dc             	lea    -0x24(%ebp),%eax
- 568:	03 45 f4             	add    -0xc(%ebp),%eax
- 56b:	88 10                	mov    %dl,(%eax)
- 56d:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
-  }while((x /= base) != 0);
- 571:	8b 55 10             	mov    0x10(%ebp),%edx
- 574:	89 55 d4             	mov    %edx,-0x2c(%ebp)
- 577:	8b 45 ec             	mov    -0x14(%ebp),%eax
- 57a:	ba 00 00 00 00       	mov    $0x0,%edx
- 57f:	f7 75 d4             	divl   -0x2c(%ebp)
- 582:	89 45 ec             	mov    %eax,-0x14(%ebp)
- 585:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
- 589:	75 c4                	jne    54f <printint+0x37>
-  if(neg)
- 58b:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
- 58f:	74 2a                	je     5bb <printint+0xa3>
-    buf[i++] = '-';
- 591:	8d 45 dc             	lea    -0x24(%ebp),%eax
- 594:	03 45 f4             	add    -0xc(%ebp),%eax
- 597:	c6 00 2d             	movb   $0x2d,(%eax)
- 59a:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
-
-  while(--i >= 0)
- 59e:	eb 1b                	jmp    5bb <printint+0xa3>
-    putc(fd, buf[i]);
- 5a0:	8d 45 dc             	lea    -0x24(%ebp),%eax
- 5a3:	03 45 f4             	add    -0xc(%ebp),%eax
- 5a6:	0f b6 00             	movzbl (%eax),%eax
- 5a9:	0f be c0             	movsbl %al,%eax
- 5ac:	89 44 24 04          	mov    %eax,0x4(%esp)
- 5b0:	8b 45 08             	mov    0x8(%ebp),%eax
- 5b3:	89 04 24             	mov    %eax,(%esp)
- 5b6:	e8 35 ff ff ff       	call   4f0 <putc>
-    buf[i++] = digits[x % base];
-  }while((x /= base) != 0);
-  if(neg)
-    buf[i++] = '-';
-
-  while(--i >= 0)
- 5bb:	83 6d f4 01          	subl   $0x1,-0xc(%ebp)
- 5bf:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
- 5c3:	79 db                	jns    5a0 <printint+0x88>
-    putc(fd, buf[i]);
-}
- 5c5:	c9                   	leave  
- 5c6:	c3                   	ret    
-
-000005c7 <printf>:
-
-// Print to the given fd. Only understands %d, %x, %p, %s.
-void
-printf(int fd, char *fmt, ...)
-{
- 5c7:	55                   	push   %ebp
- 5c8:	89 e5                	mov    %esp,%ebp
- 5ca:	83 ec 38             	sub    $0x38,%esp
-  char *s;
-  int c, i, state;
-  uint *ap;
-
-  state = 0;
- 5cd:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
-  ap = (uint*)(void*)&fmt + 1;
- 5d4:	8d 45 0c             	lea    0xc(%ebp),%eax
- 5d7:	83 c0 04             	add    $0x4,%eax
- 5da:	89 45 e8             	mov    %eax,-0x18(%ebp)
-  for(i = 0; fmt[i]; i++){
- 5dd:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
- 5e4:	e9 7d 01 00 00       	jmp    766 <printf+0x19f>
-    c = fmt[i] & 0xff;
- 5e9:	8b 55 0c             	mov    0xc(%ebp),%edx
- 5ec:	8b 45 f0             	mov    -0x10(%ebp),%eax
- 5ef:	01 d0                	add    %edx,%eax
- 5f1:	0f b6 00             	movzbl (%eax),%eax
- 5f4:	0f be c0             	movsbl %al,%eax
- 5f7:	25 ff 00 00 00       	and    $0xff,%eax
- 5fc:	89 45 e4             	mov    %eax,-0x1c(%ebp)
-    if(state == 0){
- 5ff:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
- 603:	75 2c                	jne    631 <printf+0x6a>
-      if(c == '%'){
- 605:	83 7d e4 25          	cmpl   $0x25,-0x1c(%ebp)
- 609:	75 0c                	jne    617 <printf+0x50>
-        state = '%';
- 60b:	c7 45 ec 25 00 00 00 	movl   $0x25,-0x14(%ebp)
- 612:	e9 4b 01 00 00       	jmp    762 <printf+0x19b>
-      } else {
-        putc(fd, c);
- 617:	8b 45 e4             	mov    -0x1c(%ebp),%eax
- 61a:	0f be c0             	movsbl %al,%eax
- 61d:	89 44 24 04          	mov    %eax,0x4(%esp)
- 621:	8b 45 08             	mov    0x8(%ebp),%eax
- 624:	89 04 24             	mov    %eax,(%esp)
- 627:	e8 c4 fe ff ff       	call   4f0 <putc>
- 62c:	e9 31 01 00 00       	jmp    762 <printf+0x19b>
-      }
-    } else if(state == '%'){
- 631:	83 7d ec 25          	cmpl   $0x25,-0x14(%ebp)
- 635:	0f 85 27 01 00 00    	jne    762 <printf+0x19b>
-      if(c == 'd'){
- 63b:	83 7d e4 64          	cmpl   $0x64,-0x1c(%ebp)
- 63f:	75 2d                	jne    66e <printf+0xa7>
-        printint(fd, *ap, 10, 1);
- 641:	8b 45 e8             	mov    -0x18(%ebp),%eax
- 644:	8b 00                	mov    (%eax),%eax
- 646:	c7 44 24 0c 01 00 00 	movl   $0x1,0xc(%esp)
- 64d:	00 
- 64e:	c7 44 24 08 0a 00 00 	movl   $0xa,0x8(%esp)
- 655:	00 
- 656:	89 44 24 04          	mov    %eax,0x4(%esp)
- 65a:	8b 45 08             	mov    0x8(%ebp),%eax
- 65d:	89 04 24             	mov    %eax,(%esp)
- 660:	e8 b3 fe ff ff       	call   518 <printint>
-        ap++;
- 665:	83 45 e8 04          	addl   $0x4,-0x18(%ebp)
- 669:	e9 ed 00 00 00       	jmp    75b <printf+0x194>
-      } else if(c == 'x' || c == 'p'){
- 66e:	83 7d e4 78          	cmpl   $0x78,-0x1c(%ebp)
- 672:	74 06                	je     67a <printf+0xb3>
- 674:	83 7d e4 70          	cmpl   $0x70,-0x1c(%ebp)
- 678:	75 2d                	jne    6a7 <printf+0xe0>
-        printint(fd, *ap, 16, 0);
- 67a:	8b 45 e8             	mov    -0x18(%ebp),%eax
- 67d:	8b 00                	mov    (%eax),%eax
- 67f:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
- 686:	00 
- 687:	c7 44 24 08 10 00 00 	movl   $0x10,0x8(%esp)
- 68e:	00 
- 68f:	89 44 24 04          	mov    %eax,0x4(%esp)
- 693:	8b 45 08             	mov    0x8(%ebp),%eax
- 696:	89 04 24             	mov    %eax,(%esp)
- 699:	e8 7a fe ff ff       	call   518 <printint>
-        ap++;
- 69e:	83 45 e8 04          	addl   $0x4,-0x18(%ebp)
- 6a2:	e9 b4 00 00 00       	jmp    75b <printf+0x194>
-      } else if(c == 's'){
- 6a7:	83 7d e4 73          	cmpl   $0x73,-0x1c(%ebp)
- 6ab:	75 46                	jne    6f3 <printf+0x12c>
-        s = (char*)*ap;
- 6ad:	8b 45 e8             	mov    -0x18(%ebp),%eax
- 6b0:	8b 00                	mov    (%eax),%eax
- 6b2:	89 45 f4             	mov    %eax,-0xc(%ebp)
-        ap++;
- 6b5:	83 45 e8 04          	addl   $0x4,-0x18(%ebp)
-        if(s == 0)
- 6b9:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
- 6bd:	75 27                	jne    6e6 <printf+0x11f>
-          s = "(null)";
- 6bf:	c7 45 f4 ae 09 00 00 	movl   $0x9ae,-0xc(%ebp)
-        while(*s != 0){
- 6c6:	eb 1e                	jmp    6e6 <printf+0x11f>
-          putc(fd, *s);
- 6c8:	8b 45 f4             	mov    -0xc(%ebp),%eax
- 6cb:	0f b6 00             	movzbl (%eax),%eax
- 6ce:	0f be c0             	movsbl %al,%eax
- 6d1:	89 44 24 04          	mov    %eax,0x4(%esp)
- 6d5:	8b 45 08             	mov    0x8(%ebp),%eax
- 6d8:	89 04 24             	mov    %eax,(%esp)
- 6db:	e8 10 fe ff ff       	call   4f0 <putc>
-          s++;
- 6e0:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
- 6e4:	eb 01                	jmp    6e7 <printf+0x120>
-      } else if(c == 's'){
-        s = (char*)*ap;
-        ap++;
-        if(s == 0)
-          s = "(null)";
-        while(*s != 0){
- 6e6:	90                   	nop
- 6e7:	8b 45 f4             	mov    -0xc(%ebp),%eax
- 6ea:	0f b6 00             	movzbl (%eax),%eax
- 6ed:	84 c0                	test   %al,%al
- 6ef:	75 d7                	jne    6c8 <printf+0x101>
- 6f1:	eb 68                	jmp    75b <printf+0x194>
-          putc(fd, *s);
-          s++;
-        }
-      } else if(c == 'c'){
- 6f3:	83 7d e4 63          	cmpl   $0x63,-0x1c(%ebp)
- 6f7:	75 1d                	jne    716 <printf+0x14f>
-        putc(fd, *ap);
- 6f9:	8b 45 e8             	mov    -0x18(%ebp),%eax
- 6fc:	8b 00                	mov    (%eax),%eax
- 6fe:	0f be c0             	movsbl %al,%eax
- 701:	89 44 24 04          	mov    %eax,0x4(%esp)
- 705:	8b 45 08             	mov    0x8(%ebp),%eax
- 708:	89 04 24             	mov    %eax,(%esp)
- 70b:	e8 e0 fd ff ff       	call   4f0 <putc>
-        ap++;
- 710:	83 45 e8 04          	addl   $0x4,-0x18(%ebp)
- 714:	eb 45                	jmp    75b <printf+0x194>
-      } else if(c == '%'){
- 716:	83 7d e4 25          	cmpl   $0x25,-0x1c(%ebp)
- 71a:	75 17                	jne    733 <printf+0x16c>
-        putc(fd, c);
- 71c:	8b 45 e4             	mov    -0x1c(%ebp),%eax
- 71f:	0f be c0             	movsbl %al,%eax
- 722:	89 44 24 04          	mov    %eax,0x4(%esp)
- 726:	8b 45 08             	mov    0x8(%ebp),%eax
- 729:	89 04 24             	mov    %eax,(%esp)
- 72c:	e8 bf fd ff ff       	call   4f0 <putc>
- 731:	eb 28                	jmp    75b <printf+0x194>
-      } else {
-        // Unknown % sequence.  Print it to draw attention.
-        putc(fd, '%');
- 733:	c7 44 24 04 25 00 00 	movl   $0x25,0x4(%esp)
- 73a:	00 
- 73b:	8b 45 08             	mov    0x8(%ebp),%eax
- 73e:	89 04 24             	mov    %eax,(%esp)
- 741:	e8 aa fd ff ff       	call   4f0 <putc>
-        putc(fd, c);
- 746:	8b 45 e4             	mov    -0x1c(%ebp),%eax
- 749:	0f be c0             	movsbl %al,%eax
- 74c:	89 44 24 04          	mov    %eax,0x4(%esp)
- 750:	8b 45 08             	mov    0x8(%ebp),%eax
- 753:	89 04 24             	mov    %eax,(%esp)
- 756:	e8 95 fd ff ff       	call   4f0 <putc>
-      }
-      state = 0;
- 75b:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
-  int c, i, state;
-  uint *ap;
-
-  state = 0;
-  ap = (uint*)(void*)&fmt + 1;
-  for(i = 0; fmt[i]; i++){
- 762:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)
- 766:	8b 55 0c             	mov    0xc(%ebp),%edx
- 769:	8b 45 f0             	mov    -0x10(%ebp),%eax
- 76c:	01 d0                	add    %edx,%eax
- 76e:	0f b6 00             	movzbl (%eax),%eax
- 771:	84 c0                	test   %al,%al
- 773:	0f 85 70 fe ff ff    	jne    5e9 <printf+0x22>
-        putc(fd, c);
-      }
-      state = 0;
-    }
-  }
-}
- 779:	c9                   	leave  
- 77a:	c3                   	ret    
- 77b:	90                   	nop
-
-0000077c <free>:
-static Header base;
-static Header *freep;
-
-void
-free(void *ap)
-{
- 77c:	55                   	push   %ebp
- 77d:	89 e5                	mov    %esp,%ebp
- 77f:	83 ec 10             	sub    $0x10,%esp
-  Header *bp, *p;
-
-  bp = (Header*)ap - 1;
- 782:	8b 45 08             	mov    0x8(%ebp),%eax
- 785:	83 e8 08             	sub    $0x8,%eax
- 788:	89 45 f8             	mov    %eax,-0x8(%ebp)
-  for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
- 78b:	a1 10 0c 00 00       	mov    0xc10,%eax
- 790:	89 45 fc             	mov    %eax,-0x4(%ebp)
- 793:	eb 24                	jmp    7b9 <free+0x3d>
-    if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
- 795:	8b 45 fc             	mov    -0x4(%ebp),%eax
- 798:	8b 00                	mov    (%eax),%eax
- 79a:	3b 45 fc             	cmp    -0x4(%ebp),%eax
- 79d:	77 12                	ja     7b1 <free+0x35>
- 79f:	8b 45 f8             	mov    -0x8(%ebp),%eax
- 7a2:	3b 45 fc             	cmp    -0x4(%ebp),%eax
- 7a5:	77 24                	ja     7cb <free+0x4f>
- 7a7:	8b 45 fc             	mov    -0x4(%ebp),%eax
- 7aa:	8b 00                	mov    (%eax),%eax
- 7ac:	3b 45 f8             	cmp    -0x8(%ebp),%eax
- 7af:	77 1a                	ja     7cb <free+0x4f>
-free(void *ap)
-{
-  Header *bp, *p;
-
-  bp = (Header*)ap - 1;
-  for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
- 7b1:	8b 45 fc             	mov    -0x4(%ebp),%eax
- 7b4:	8b 00                	mov    (%eax),%eax
- 7b6:	89 45 fc             	mov    %eax,-0x4(%ebp)
- 7b9:	8b 45 f8             	mov    -0x8(%ebp),%eax
- 7bc:	3b 45 fc             	cmp    -0x4(%ebp),%eax
- 7bf:	76 d4                	jbe    795 <free+0x19>
- 7c1:	8b 45 fc             	mov    -0x4(%ebp),%eax
- 7c4:	8b 00                	mov    (%eax),%eax
- 7c6:	3b 45 f8             	cmp    -0x8(%ebp),%eax
- 7c9:	76 ca                	jbe    795 <free+0x19>
-    if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
-      break;
-  if(bp + bp->s.size == p->s.ptr){
- 7cb:	8b 45 f8             	mov    -0x8(%ebp),%eax
- 7ce:	8b 40 04             	mov    0x4(%eax),%eax
- 7d1:	c1 e0 03             	shl    $0x3,%eax
- 7d4:	89 c2                	mov    %eax,%edx
- 7d6:	03 55 f8             	add    -0x8(%ebp),%edx
- 7d9:	8b 45 fc             	mov    -0x4(%ebp),%eax
- 7dc:	8b 00                	mov    (%eax),%eax
- 7de:	39 c2                	cmp    %eax,%edx
- 7e0:	75 24                	jne    806 <free+0x8a>
-    bp->s.size += p->s.ptr->s.size;
- 7e2:	8b 45 f8             	mov    -0x8(%ebp),%eax
- 7e5:	8b 50 04             	mov    0x4(%eax),%edx
- 7e8:	8b 45 fc             	mov    -0x4(%ebp),%eax
- 7eb:	8b 00                	mov    (%eax),%eax
- 7ed:	8b 40 04             	mov    0x4(%eax),%eax
- 7f0:	01 c2                	add    %eax,%edx
- 7f2:	8b 45 f8             	mov    -0x8(%ebp),%eax
- 7f5:	89 50 04             	mov    %edx,0x4(%eax)
-    bp->s.ptr = p->s.ptr->s.ptr;
- 7f8:	8b 45 fc             	mov    -0x4(%ebp),%eax
- 7fb:	8b 00                	mov    (%eax),%eax
- 7fd:	8b 10                	mov    (%eax),%edx
- 7ff:	8b 45 f8             	mov    -0x8(%ebp),%eax
- 802:	89 10                	mov    %edx,(%eax)
- 804:	eb 0a                	jmp    810 <free+0x94>
-  } else
-    bp->s.ptr = p->s.ptr;
- 806:	8b 45 fc             	mov    -0x4(%ebp),%eax
- 809:	8b 10                	mov    (%eax),%edx
- 80b:	8b 45 f8             	mov    -0x8(%ebp),%eax
- 80e:	89 10                	mov    %edx,(%eax)
-  if(p + p->s.size == bp){
- 810:	8b 45 fc             	mov    -0x4(%ebp),%eax
- 813:	8b 40 04             	mov    0x4(%eax),%eax
- 816:	c1 e0 03             	shl    $0x3,%eax
- 819:	03 45 fc             	add    -0x4(%ebp),%eax
- 81c:	3b 45 f8             	cmp    -0x8(%ebp),%eax
- 81f:	75 20                	jne    841 <free+0xc5>
-    p->s.size += bp->s.size;
- 821:	8b 45 fc             	mov    -0x4(%ebp),%eax
- 824:	8b 50 04             	mov    0x4(%eax),%edx
- 827:	8b 45 f8             	mov    -0x8(%ebp),%eax
- 82a:	8b 40 04             	mov    0x4(%eax),%eax
- 82d:	01 c2                	add    %eax,%edx
- 82f:	8b 45 fc             	mov    -0x4(%ebp),%eax
- 832:	89 50 04             	mov    %edx,0x4(%eax)
-    p->s.ptr = bp->s.ptr;
- 835:	8b 45 f8             	mov    -0x8(%ebp),%eax
- 838:	8b 10                	mov    (%eax),%edx
- 83a:	8b 45 fc             	mov    -0x4(%ebp),%eax
- 83d:	89 10                	mov    %edx,(%eax)
- 83f:	eb 08                	jmp    849 <free+0xcd>
-  } else
-    p->s.ptr = bp;
- 841:	8b 45 fc             	mov    -0x4(%ebp),%eax
- 844:	8b 55 f8             	mov    -0x8(%ebp),%edx
- 847:	89 10                	mov    %edx,(%eax)
-  freep = p;
- 849:	8b 45 fc             	mov    -0x4(%ebp),%eax
- 84c:	a3 10 0c 00 00       	mov    %eax,0xc10
-}
- 851:	c9                   	leave  
- 852:	c3                   	ret    
-
-00000853 <morecore>:
-
-static Header*
-morecore(uint nu)
-{
- 853:	55                   	push   %ebp
- 854:	89 e5                	mov    %esp,%ebp
- 856:	83 ec 28             	sub    $0x28,%esp
-  char *p;
-  Header *hp;
-
-  if(nu < 4096)
- 859:	81 7d 08 ff 0f 00 00 	cmpl   $0xfff,0x8(%ebp)
- 860:	77 07                	ja     869 <morecore+0x16>
-    nu = 4096;
- 862:	c7 45 08 00 10 00 00 	movl   $0x1000,0x8(%ebp)
-  p = sbrk(nu * sizeof(Header));
- 869:	8b 45 08             	mov    0x8(%ebp),%eax
- 86c:	c1 e0 03             	shl    $0x3,%eax
- 86f:	89 04 24             	mov    %eax,(%esp)
- 872:	e8 39 fc ff ff       	call   4b0 <sbrk>
- 877:	89 45 f4             	mov    %eax,-0xc(%ebp)
-  if(p == (char*)-1)
- 87a:	83 7d f4 ff          	cmpl   $0xffffffff,-0xc(%ebp)
- 87e:	75 07                	jne    887 <morecore+0x34>
-    return 0;
- 880:	b8 00 00 00 00       	mov    $0x0,%eax
- 885:	eb 22                	jmp    8a9 <morecore+0x56>
-  hp = (Header*)p;
- 887:	8b 45 f4             	mov    -0xc(%ebp),%eax
- 88a:	89 45 f0             	mov    %eax,-0x10(%ebp)
-  hp->s.size = nu;
- 88d:	8b 45 f0             	mov    -0x10(%ebp),%eax
- 890:	8b 55 08             	mov    0x8(%ebp),%edx
- 893:	89 50 04             	mov    %edx,0x4(%eax)
-  free((void*)(hp + 1));
- 896:	8b 45 f0             	mov    -0x10(%ebp),%eax
- 899:	83 c0 08             	add    $0x8,%eax
- 89c:	89 04 24             	mov    %eax,(%esp)
- 89f:	e8 d8 fe ff ff       	call   77c <free>
-  return freep;
- 8a4:	a1 10 0c 00 00       	mov    0xc10,%eax
-}
- 8a9:	c9                   	leave  
- 8aa:	c3                   	ret    
-
-000008ab <malloc>:
-
-void*
-malloc(uint nbytes)
-{
- 8ab:	55                   	push   %ebp
- 8ac:	89 e5                	mov    %esp,%ebp
- 8ae:	83 ec 28             	sub    $0x28,%esp
-  Header *p, *prevp;
-  uint nunits;
-
-  nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;
- 8b1:	8b 45 08             	mov    0x8(%ebp),%eax
- 8b4:	83 c0 07             	add    $0x7,%eax
- 8b7:	c1 e8 03             	shr    $0x3,%eax
- 8ba:	83 c0 01             	add    $0x1,%eax
- 8bd:	89 45 ec             	mov    %eax,-0x14(%ebp)
-  if((prevp = freep) == 0){
- 8c0:	a1 10 0c 00 00       	mov    0xc10,%eax
- 8c5:	89 45 f0             	mov    %eax,-0x10(%ebp)
- 8c8:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
- 8cc:	75 23                	jne    8f1 <malloc+0x46>
-    base.s.ptr = freep = prevp = &base;
- 8ce:	c7 45 f0 08 0c 00 00 	movl   $0xc08,-0x10(%ebp)
- 8d5:	8b 45 f0             	mov    -0x10(%ebp),%eax
- 8d8:	a3 10 0c 00 00       	mov    %eax,0xc10
- 8dd:	a1 10 0c 00 00       	mov    0xc10,%eax
- 8e2:	a3 08 0c 00 00       	mov    %eax,0xc08
-    base.s.size = 0;
- 8e7:	c7 05 0c 0c 00 00 00 	movl   $0x0,0xc0c
- 8ee:	00 00 00 
-  }
-  for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
- 8f1:	8b 45 f0             	mov    -0x10(%ebp),%eax
- 8f4:	8b 00                	mov    (%eax),%eax
- 8f6:	89 45 f4             	mov    %eax,-0xc(%ebp)
-    if(p->s.size >= nunits){
- 8f9:	8b 45 f4             	mov    -0xc(%ebp),%eax
- 8fc:	8b 40 04             	mov    0x4(%eax),%eax
- 8ff:	3b 45 ec             	cmp    -0x14(%ebp),%eax
- 902:	72 4d                	jb     951 <malloc+0xa6>
-      if(p->s.size == nunits)
- 904:	8b 45 f4             	mov    -0xc(%ebp),%eax
- 907:	8b 40 04             	mov    0x4(%eax),%eax
- 90a:	3b 45 ec             	cmp    -0x14(%ebp),%eax
- 90d:	75 0c                	jne    91b <malloc+0x70>
-        prevp->s.ptr = p->s.ptr;
- 90f:	8b 45 f4             	mov    -0xc(%ebp),%eax
- 912:	8b 10                	mov    (%eax),%edx
- 914:	8b 45 f0             	mov    -0x10(%ebp),%eax
- 917:	89 10                	mov    %edx,(%eax)
- 919:	eb 26                	jmp    941 <malloc+0x96>
-      else {
-        p->s.size -= nunits;
- 91b:	8b 45 f4             	mov    -0xc(%ebp),%eax
- 91e:	8b 40 04             	mov    0x4(%eax),%eax
- 921:	89 c2                	mov    %eax,%edx
- 923:	2b 55 ec             	sub    -0x14(%ebp),%edx
- 926:	8b 45 f4             	mov    -0xc(%ebp),%eax
- 929:	89 50 04             	mov    %edx,0x4(%eax)
-        p += p->s.size;
- 92c:	8b 45 f4             	mov    -0xc(%ebp),%eax
- 92f:	8b 40 04             	mov    0x4(%eax),%eax
- 932:	c1 e0 03             	shl    $0x3,%eax
- 935:	01 45 f4             	add    %eax,-0xc(%ebp)
-        p->s.size = nunits;
- 938:	8b 45 f4             	mov    -0xc(%ebp),%eax
- 93b:	8b 55 ec             	mov    -0x14(%ebp),%edx
- 93e:	89 50 04             	mov    %edx,0x4(%eax)
-      }
-      freep = prevp;
- 941:	8b 45 f0             	mov    -0x10(%ebp),%eax
- 944:	a3 10 0c 00 00       	mov    %eax,0xc10
-      return (void*)(p + 1);
- 949:	8b 45 f4             	mov    -0xc(%ebp),%eax
- 94c:	83 c0 08             	add    $0x8,%eax
- 94f:	eb 38                	jmp    989 <malloc+0xde>
-    }
-    if(p == freep)
- 951:	a1 10 0c 00 00       	mov    0xc10,%eax
- 956:	39 45 f4             	cmp    %eax,-0xc(%ebp)
- 959:	75 1b                	jne    976 <malloc+0xcb>
-      if((p = morecore(nunits)) == 0)
- 95b:	8b 45 ec             	mov    -0x14(%ebp),%eax
- 95e:	89 04 24             	mov    %eax,(%esp)
- 961:	e8 ed fe ff ff       	call   853 <morecore>
- 966:	89 45 f4             	mov    %eax,-0xc(%ebp)
- 969:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
- 96d:	75 07                	jne    976 <malloc+0xcb>
-        return 0;
- 96f:	b8 00 00 00 00       	mov    $0x0,%eax
- 974:	eb 13                	jmp    989 <malloc+0xde>
-  nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;
-  if((prevp = freep) == 0){
-    base.s.ptr = freep = prevp = &base;
-    base.s.size = 0;
-  }
-  for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
- 976:	8b 45 f4             	mov    -0xc(%ebp),%eax
- 979:	89 45 f0             	mov    %eax,-0x10(%ebp)
- 97c:	8b 45 f4             	mov    -0xc(%ebp),%eax
- 97f:	8b 00                	mov    (%eax),%eax
- 981:	89 45 f4             	mov    %eax,-0xc(%ebp)
-      return (void*)(p + 1);
-    }
-    if(p == freep)
-      if((p = morecore(nunits)) == 0)
-        return 0;
-  }
- 984:	e9 70 ff ff ff       	jmp    8f9 <malloc+0x4e>
-}
- 989:	c9                   	leave  
- 98a:	c3                   	ret    
diff --git a/xv6/stressfs.c b/xv6/stressfs.c
deleted file mode 100644
index d573e72..0000000
--- a/xv6/stressfs.c
+++ /dev/null
@@ -1,49 +0,0 @@
-// Demonstrate that moving the "acquire" in iderw after the loop that
-// appends to the idequeue results in a race.
-
-// For this to work, you should also add a spin within iderw's
-// idequeue traversal loop.  Adding the following demonstrated a panic
-// after about 5 runs of stressfs in QEMU on a 2.1GHz CPU:
-//    for (i = 0; i < 40000; i++)
-//      asm volatile("");
-
-#include "types.h"
-#include "stat.h"
-#include "user.h"
-#include "fs.h"
-#include "fcntl.h"
-
-int
-main(int argc, char *argv[])
-{
-  int fd, i;
-  char path[] = "stressfs0";
-  char data[512];
-
-  printf(1, "stressfs starting\n");
-  memset(data, 'a', sizeof(data));
-
-  for(i = 0; i < 4; i++)
-    if(fork() > 0)
-      break;
-
-  printf(1, "write %d\n", i);
-
-  path[8] += i;
-  fd = open(path, O_CREATE | O_RDWR);
-  for(i = 0; i < 20; i++)
-//    printf(fd, "%d\n", i);
-    write(fd, data, sizeof(data));
-  close(fd);
-
-  printf(1, "read\n");
-
-  fd = open(path, O_RDONLY);
-  for (i = 0; i < 20; i++)
-    read(fd, data, sizeof(data));
-  close(fd);
-
-  wait(0);
-  
-  exit(EXIT_STATUS_DEFAULT);
-}
diff --git a/xv6/stressfs.d b/xv6/stressfs.d
deleted file mode 100644
index dadfc82..0000000
--- a/xv6/stressfs.d
+++ /dev/null
@@ -1 +0,0 @@
-stressfs.o: stressfs.c types.h stat.h user.h fs.h fcntl.h
diff --git a/xv6/stressfs.sym b/xv6/stressfs.sym
deleted file mode 100644
index 03fa987..0000000
--- a/xv6/stressfs.sym
+++ /dev/null
@@ -1,65 +0,0 @@
-00000000 .text
-0000098b .rodata
-000009b8 .eh_frame
-00000bf4 .data
-00000c08 .bss
-00000000 .comment
-00000000 .debug_aranges
-00000000 .debug_info
-00000000 .debug_abbrev
-00000000 .debug_line
-00000000 .debug_str
-00000000 .debug_loc
-00000000 stressfs.c
-00000000 ulib.c
-000001c4 stosb
-00000000 printf.c
-000004f0 putc
-00000518 printint
-00000bf4 digits.923
-00000000 umalloc.c
-00000c08 base
-00000c10 freep
-00000853 morecore
-000001e9 strcpy
-000004c8 waitpid
-000005c7 printf
-000003e2 memmove
-00000470 mknod
-000004e0 foreground
-000002da gets
-000004a8 getpid
-000008ab malloc
-000004b8 sleep
-000004e8 set_priority
-000004d0 wait_stat
-00000438 pipe
-00000448 write
-00000480 fstat
-00000458 kill
-00000498 chdir
-00000460 exec
-00000430 wait
-00000440 read
-00000478 unlink
-00000420 fork
-000004b0 sbrk
-000004c0 uptime
-00000c08 __bss_start
-00000283 memset
-00000000 main
-0000021d strcmp
-000004a0 dup
-000004d8 list_pgroup
-00000349 stat
-00000c08 _edata
-00000c14 _end
-00000488 link
-00000428 exit
-00000397 atoi
-0000025e strlen
-00000468 open
-000002a7 strchr
-00000490 mkdir
-00000450 close
-0000077c free
diff --git a/xv6/string.c b/xv6/string.c
deleted file mode 100644
index d066c18..0000000
--- a/xv6/string.c
+++ /dev/null
@@ -1,105 +0,0 @@
-#include "types.h"
-#include "x86.h"
-
-void*
-memset(void *dst, int c, uint n)
-{
-  if ((int)dst%4 == 0 && n%4 == 0){
-    c &= 0xFF;
-    stosl(dst, (c<<24)|(c<<16)|(c<<8)|c, n/4);
-  } else
-    stosb(dst, c, n);
-  return dst;
-}
-
-int
-memcmp(const void *v1, const void *v2, uint n)
-{
-  const uchar *s1, *s2;
-  
-  s1 = v1;
-  s2 = v2;
-  while(n-- > 0){
-    if(*s1 != *s2)
-      return *s1 - *s2;
-    s1++, s2++;
-  }
-
-  return 0;
-}
-
-void*
-memmove(void *dst, const void *src, uint n)
-{
-  const char *s;
-  char *d;
-
-  s = src;
-  d = dst;
-  if(s < d && s + n > d){
-    s += n;
-    d += n;
-    while(n-- > 0)
-      *--d = *--s;
-  } else
-    while(n-- > 0)
-      *d++ = *s++;
-
-  return dst;
-}
-
-// memcpy exists to placate GCC.  Use memmove.
-void*
-memcpy(void *dst, const void *src, uint n)
-{
-  return memmove(dst, src, n);
-}
-
-int
-strncmp(const char *p, const char *q, uint n)
-{
-  while(n > 0 && *p && *p == *q)
-    n--, p++, q++;
-  if(n == 0)
-    return 0;
-  return (uchar)*p - (uchar)*q;
-}
-
-char*
-strncpy(char *s, const char *t, int n)
-{
-  char *os;
-  
-  os = s;
-  while(n-- > 0 && (*s++ = *t++) != 0)
-    ;
-  while(n-- > 0)
-    *s++ = 0;
-  return os;
-}
-
-// Like strncpy but guaranteed to NUL-terminate.
-char*
-safestrcpy(char *s, const char *t, int n)
-{
-  char *os;
-  
-  os = s;
-  if(n <= 0)
-    return os;
-  while(--n > 0 && (*s++ = *t++) != 0)
-    ;
-  *s = 0;
-  return os;
-}
-
-int
-strlen(const char *s)
-{
-  int n;
-
-  for(n = 0; s[n]; n++)
-    ;
-  return n;
-}
-
diff --git a/xv6/string.d b/xv6/string.d
deleted file mode 100644
index 3fbdfc5..0000000
--- a/xv6/string.d
+++ /dev/null
@@ -1 +0,0 @@
-string.o: string.c types.h x86.h
diff --git a/xv6/swtch.S b/xv6/swtch.S
deleted file mode 100644
index 8751317..0000000
--- a/xv6/swtch.S
+++ /dev/null
@@ -1,28 +0,0 @@
-# Context switch
-#
-#   void swtch(struct context **old, struct context *new);
-# 
-# Save current register context in old
-# and then load register context from new.
-
-.globl swtch
-swtch:
-  movl 4(%esp), %eax
-  movl 8(%esp), %edx
-
-  # Save old callee-save registers
-  pushl %ebp
-  pushl %ebx
-  pushl %esi
-  pushl %edi
-
-  # Switch stacks
-  movl %esp, (%eax)
-  movl %edx, %esp
-
-  # Load new callee-save registers
-  popl %edi
-  popl %esi
-  popl %ebx
-  popl %ebp
-  ret
diff --git a/xv6/symlink.patch b/xv6/symlink.patch
deleted file mode 100644
index c7caf23..0000000
--- a/xv6/symlink.patch
+++ /dev/null
@@ -1,151 +0,0 @@
-diff -r f8a4e40ab1d6 fs.c
---- a/fs.c	Thu Aug 30 14:32:06 2007 -0400
-+++ b/fs.c	Thu Aug 30 14:29:02 2007 -0400
-@@ -577,12 +577,18 @@ skipelem(char *path, char *name)
- // If parent != 0, return the inode for the parent and copy the final
- // path element into name, which must have room for DIRSIZ bytes.
- static struct inode*
--_namei(char *path, int parent, char *name)
-+_namei(struct inode *root, char *path, int parent, char *name, int depth)
- {
-   struct inode *ip, *next;
-+  char buf[100], tname[DIRSIZ];
-+
-+  if(depth > 5)
-+    return 0;
- 
-   if(*path == '/')
-     ip = iget(ROOTDEV, 1);
-+  else if(root)
-+    ip = idup(root);
-   else
-     ip = idup(cp->cwd);
- 
-@@ -598,10 +604,24 @@ _namei(char *path, int parent, char *nam
-       return ip;
-     }
-     if((next = dirlookup(ip, name, 0)) == 0){
-+      cprintf("did not find %s\n", name);
-       iunlockput(ip);
-       return 0;
-     }
--    iunlockput(ip);
-+    iunlock(ip);
-+    ilock(next);
-+    if(next->type == T_SYMLINK){
-+      if(next->size >= sizeof(buf) || readi(next, buf, 0, next->size) != next->size){
-+        iunlockput(next);
-+        iput(ip);
-+        return 0;
-+      }
-+      buf[next->size] = 0;
-+      iunlockput(next);
-+      next = _namei(ip, buf, 0, tname, depth+1);
-+    }else
-+      iunlock(next);
-+    iput(ip);
-     ip = next;
-   }
-   if(parent){
-@@ -615,11 +635,11 @@ namei(char *path)
- namei(char *path)
- {
-   char name[DIRSIZ];
--  return _namei(path, 0, name);
-+  return _namei(0, path, 0, name, 0);
- }
- 
- struct inode*
- nameiparent(char *path, char *name)
- {
--  return _namei(path, 1, name);
--}
-+  return _namei(0, path, 1, name, 0);
-+}
-diff -r f8a4e40ab1d6 fs.h
---- a/fs.h	Thu Aug 30 14:32:06 2007 -0400
-+++ b/fs.h	Thu Aug 30 13:05:43 2007 -0400
-@@ -33,6 +33,7 @@ struct dinode {
- #define T_DIR  1   // Directory
- #define T_FILE 2   // File
- #define T_DEV  3   // Special device
-+#define T_SYMLINK 4  // Symlink
- 
- // Inodes per block.
- #define IPB           (BSIZE / sizeof(struct dinode))
-diff -r f8a4e40ab1d6 syscall.c
---- a/syscall.c	Thu Aug 30 14:32:06 2007 -0400
-+++ b/syscall.c	Thu Aug 30 13:05:29 2007 -0400
-@@ -96,6 +96,7 @@ extern int sys_unlink(void);
- extern int sys_unlink(void);
- extern int sys_wait(void);
- extern int sys_write(void);
-+extern int sys_symlink(void);
- 
- static int (*syscalls[])(void) = {
- [SYS_chdir]   sys_chdir,
-@@ -118,6 +119,7 @@ static int (*syscalls[])(void) = {
- [SYS_unlink]  sys_unlink,
- [SYS_wait]    sys_wait,
- [SYS_write]   sys_write,
-+[SYS_symlink]	sys_symlink,
- };
- 
- void
-diff -r f8a4e40ab1d6 syscall.h
---- a/syscall.h	Thu Aug 30 14:32:06 2007 -0400
-+++ b/syscall.h	Thu Aug 30 13:02:48 2007 -0400
-@@ -19,3 +19,4 @@
- #define SYS_getpid 18
- #define SYS_sbrk   19
- #define SYS_sleep  20
-+#define SYS_symlink 21
-diff -r f8a4e40ab1d6 sysfile.c
---- a/sysfile.c	Thu Aug 30 14:32:06 2007 -0400
-+++ b/sysfile.c	Thu Aug 30 13:10:31 2007 -0400
-@@ -257,6 +257,21 @@ create(char *path, int canexist, short t
- }
- 
- int
-+sys_symlink(void)
-+{
-+  char *old, *new;
-+  struct inode *ip;
-+  
-+  if(argstr(0, &old) < 0 || argstr(1, &new) < 0)
-+    return -1;
-+  if((ip = create(new, 0, T_SYMLINK, 0, 0)) == 0)
-+    return -1;
-+  writei(ip, old, 0, strlen(old));
-+  iunlockput(ip);
-+  return 0;
-+}
-+
-+int
- sys_open(void)
- {
-   char *path;
-@@ -393,3 +408,4 @@ sys_pipe(void)
-   fd[1] = fd1;
-   return 0;
- }
-+
-diff -r f8a4e40ab1d6 user.h
---- a/user.h	Thu Aug 30 14:32:06 2007 -0400
-+++ b/user.h	Thu Aug 30 13:02:34 2007 -0400
-@@ -21,6 +21,7 @@ int getpid();
- int getpid();
- char* sbrk(int);
- int sleep(int);
-+int symlink(int);
- 
- // ulib.c
- int stat(char*, struct stat*);
-diff -r f8a4e40ab1d6 usys.S
---- a/usys.S	Thu Aug 30 14:32:06 2007 -0400
-+++ b/usys.S	Thu Aug 30 13:05:54 2007 -0400
-@@ -28,3 +28,4 @@ STUB(getpid)
- STUB(getpid)
- STUB(sbrk)
- STUB(sleep)
-+STUB(symlink)
diff --git a/xv6/syscall.c b/xv6/syscall.c
deleted file mode 100644
index 699b2e1..0000000
--- a/xv6/syscall.c
+++ /dev/null
@@ -1,150 +0,0 @@
-#include "types.h"
-#include "defs.h"
-#include "param.h"
-#include "memlayout.h"
-#include "mmu.h"
-#include "proc.h"
-#include "x86.h"
-#include "syscall.h"
-
-// User code makes a system call with INT T_SYSCALL.
-// System call number in %eax.
-// Arguments on the stack, from the user call to the C
-// library system call function. The saved user %esp points
-// to a saved program counter, and then the first argument.
-
-// Fetch the int at addr from the current process.
-int
-fetchint(uint addr, int *ip)
-{
-  if(addr >= proc->sz || addr+4 > proc->sz)
-    return -1;
-  *ip = *(int*)(addr);
-  return 0;
-}
-
-// Fetch the nul-terminated string at addr from the current process.
-// Doesn't actually copy the string - just sets *pp to point at it.
-// Returns length of string, not including nul.
-int
-fetchstr(uint addr, char **pp)
-{
-  char *s, *ep;
-
-  if(addr >= proc->sz)
-    return -1;
-  *pp = (char*)addr;
-  ep = (char*)proc->sz;
-  for(s = *pp; s < ep; s++)
-    if(*s == 0)
-      return s - *pp;
-  return -1;
-}
-
-// Fetch the nth 32-bit system call argument.
-int
-argint(int n, int *ip)
-{
-  return fetchint(proc->tf->esp + 4 + 4*n, ip);
-}
-
-// Fetch the nth word-sized system call argument as a pointer
-// to a block of memory of size n bytes.  Check that the pointer
-// lies within the process address space.
-int
-argptr(int n, char **pp, int size)
-{
-  int i;
-  
-  if(argint(n, &i) < 0)
-    return -1;
-  if((uint)i >= proc->sz || (uint)i+size > proc->sz)
-    return -1;
-  *pp = (char*)i;
-  return 0;
-}
-
-// Fetch the nth word-sized system call argument as a string pointer.
-// Check that the pointer is valid and the string is nul-terminated.
-// (There is no shared writable memory, so the string can't change
-// between this check and being used by the kernel.)
-int
-argstr(int n, char **pp)
-{
-  int addr;
-  if(argint(n, &addr) < 0)
-    return -1;
-  return fetchstr(addr, pp);
-}
-
-extern int sys_chdir(void);
-extern int sys_close(void);
-extern int sys_dup(void);
-extern int sys_exec(void);
-extern int sys_exit(void);
-extern int sys_fork(void);
-extern int sys_fstat(void);
-extern int sys_getpid(void);
-extern int sys_kill(void);
-extern int sys_link(void);
-extern int sys_mkdir(void);
-extern int sys_mknod(void);
-extern int sys_open(void);
-extern int sys_pipe(void);
-extern int sys_read(void);
-extern int sys_sbrk(void);
-extern int sys_sleep(void);
-extern int sys_unlink(void);
-extern int sys_wait(void);
-extern int sys_waitpid(void);
-extern int sys_wait_stat(void);
-extern int sys_list_pgroup(void);
-extern int sys_write(void);
-extern int sys_uptime(void);
-extern int sys_foreground(void);
-extern int sys_set_priority(void);
-
-
-static int (*syscalls[])(void) = {
-[SYS_fork]    sys_fork,
-[SYS_exit]    sys_exit,
-[SYS_wait]    sys_wait,
-[SYS_pipe]    sys_pipe,
-[SYS_read]    sys_read,
-[SYS_kill]    sys_kill,
-[SYS_exec]    sys_exec,
-[SYS_fstat]   sys_fstat,
-[SYS_chdir]   sys_chdir,
-[SYS_dup]     sys_dup,
-[SYS_getpid]  sys_getpid,
-[SYS_sbrk]    sys_sbrk,
-[SYS_sleep]   sys_sleep,
-[SYS_uptime]  sys_uptime,
-[SYS_open]    sys_open,
-[SYS_write]   sys_write,
-[SYS_mknod]   sys_mknod,
-[SYS_unlink]  sys_unlink,
-[SYS_link]    sys_link,
-[SYS_mkdir]   sys_mkdir,
-[SYS_close]   sys_close,
-[SYS_waitpid]    sys_waitpid,
-[SYS_wait_stat]    sys_wait_stat,
-[SYS_list_pgroup]    sys_list_pgroup,
-[SYS_foreground]    sys_foreground,
-[SYS_set_priority]	sys_set_priority,
-};
-
-void
-syscall(void)
-{
-  int num;
-
-  num = proc->tf->eax;
-  if(num > 0 && num < NELEM(syscalls) && syscalls[num]) {
-    proc->tf->eax = syscalls[num]();
-  } else {
-    cprintf("%d %s: unknown sys call %d\n",
-            proc->pid, proc->name, num);
-    proc->tf->eax = -1;
-  }
-}
diff --git a/xv6/syscall.d b/xv6/syscall.d
deleted file mode 100644
index 2b896a9..0000000
--- a/xv6/syscall.d
+++ /dev/null
@@ -1,2 +0,0 @@
-syscall.o: syscall.c types.h defs.h param.h memlayout.h mmu.h proc.h \
- x86.h syscall.h
diff --git a/xv6/syscall.h b/xv6/syscall.h
deleted file mode 100644
index 63f53fe..0000000
--- a/xv6/syscall.h
+++ /dev/null
@@ -1,28 +0,0 @@
-// System call numbers
-#define SYS_fork    1
-#define SYS_exit    2
-#define SYS_wait    3
-#define SYS_pipe    4
-#define SYS_read    5
-#define SYS_kill    6
-#define SYS_exec    7
-#define SYS_fstat   8
-#define SYS_chdir   9
-#define SYS_dup    10
-#define SYS_getpid 11
-#define SYS_sbrk   12
-#define SYS_sleep  13
-#define SYS_uptime 14
-#define SYS_open   15
-#define SYS_write  16
-#define SYS_mknod  17
-#define SYS_unlink 18
-#define SYS_link   19
-#define SYS_mkdir  20
-#define SYS_close  21
-#define SYS_waitpid   22
-#define SYS_wait_stat 23
-#define SYS_list_pgroup 24
-#define SYS_foreground 25
-#define SYS_set_priority 26
-
diff --git a/xv6/sysfile.c b/xv6/sysfile.c
deleted file mode 100644
index 2209f6e..0000000
--- a/xv6/sysfile.c
+++ /dev/null
@@ -1,442 +0,0 @@
-//
-// File-system system calls.
-// Mostly argument checking, since we don't trust
-// user code, and calls into file.c and fs.c.
-//
-
-#include "types.h"
-#include "defs.h"
-#include "param.h"
-#include "stat.h"
-#include "mmu.h"
-#include "proc.h"
-#include "fs.h"
-#include "file.h"
-#include "fcntl.h"
-
-// Fetch the nth word-sized system call argument as a file descriptor
-// and return both the descriptor and the corresponding struct file.
-static int
-argfd(int n, int *pfd, struct file **pf)
-{
-  int fd;
-  struct file *f;
-
-  if(argint(n, &fd) < 0)
-    return -1;
-  if(fd < 0 || fd >= NOFILE || (f=proc->ofile[fd]) == 0)
-    return -1;
-  if(pfd)
-    *pfd = fd;
-  if(pf)
-    *pf = f;
-  return 0;
-}
-
-// Allocate a file descriptor for the given file.
-// Takes over file reference from caller on success.
-static int
-fdalloc(struct file *f)
-{
-  int fd;
-
-  for(fd = 0; fd < NOFILE; fd++){
-    if(proc->ofile[fd] == 0){
-      proc->ofile[fd] = f;
-      return fd;
-    }
-  }
-  return -1;
-}
-
-int
-sys_dup(void)
-{
-  struct file *f;
-  int fd;
-  
-  if(argfd(0, 0, &f) < 0)
-    return -1;
-  if((fd=fdalloc(f)) < 0)
-    return -1;
-  filedup(f);
-  return fd;
-}
-
-int
-sys_read(void)
-{
-  struct file *f;
-  int n;
-  char *p;
-
-  if(argfd(0, 0, &f) < 0 || argint(2, &n) < 0 || argptr(1, &p, n) < 0)
-    return -1;
-  return fileread(f, p, n);
-}
-
-int
-sys_write(void)
-{
-  struct file *f;
-  int n;
-  char *p;
-
-  if(argfd(0, 0, &f) < 0 || argint(2, &n) < 0 || argptr(1, &p, n) < 0)
-    return -1;
-  return filewrite(f, p, n);
-}
-
-int
-sys_close(void)
-{
-  int fd;
-  struct file *f;
-  
-  if(argfd(0, &fd, &f) < 0)
-    return -1;
-  proc->ofile[fd] = 0;
-  fileclose(f);
-  return 0;
-}
-
-int
-sys_fstat(void)
-{
-  struct file *f;
-  struct stat *st;
-  
-  if(argfd(0, 0, &f) < 0 || argptr(1, (void*)&st, sizeof(*st)) < 0)
-    return -1;
-  return filestat(f, st);
-}
-
-// Create the path new as a link to the same inode as old.
-int
-sys_link(void)
-{
-  char name[DIRSIZ], *new, *old;
-  struct inode *dp, *ip;
-
-  if(argstr(0, &old) < 0 || argstr(1, &new) < 0)
-    return -1;
-
-  begin_op();
-  if((ip = namei(old)) == 0){
-    end_op();
-    return -1;
-  }
-
-  ilock(ip);
-  if(ip->type == T_DIR){
-    iunlockput(ip);
-    end_op();
-    return -1;
-  }
-
-  ip->nlink++;
-  iupdate(ip);
-  iunlock(ip);
-
-  if((dp = nameiparent(new, name)) == 0)
-    goto bad;
-  ilock(dp);
-  if(dp->dev != ip->dev || dirlink(dp, name, ip->inum) < 0){
-    iunlockput(dp);
-    goto bad;
-  }
-  iunlockput(dp);
-  iput(ip);
-
-  end_op();
-
-  return 0;
-
-bad:
-  ilock(ip);
-  ip->nlink--;
-  iupdate(ip);
-  iunlockput(ip);
-  end_op();
-  return -1;
-}
-
-// Is the directory dp empty except for "." and ".." ?
-static int
-isdirempty(struct inode *dp)
-{
-  int off;
-  struct dirent de;
-
-  for(off=2*sizeof(de); off<dp->size; off+=sizeof(de)){
-    if(readi(dp, (char*)&de, off, sizeof(de)) != sizeof(de))
-      panic("isdirempty: readi");
-    if(de.inum != 0)
-      return 0;
-  }
-  return 1;
-}
-
-//PAGEBREAK!
-int
-sys_unlink(void)
-{
-  struct inode *ip, *dp;
-  struct dirent de;
-  char name[DIRSIZ], *path;
-  uint off;
-
-  if(argstr(0, &path) < 0)
-    return -1;
-
-  begin_op();
-  if((dp = nameiparent(path, name)) == 0){
-    end_op();
-    return -1;
-  }
-
-  ilock(dp);
-
-  // Cannot unlink "." or "..".
-  if(namecmp(name, ".") == 0 || namecmp(name, "..") == 0)
-    goto bad;
-
-  if((ip = dirlookup(dp, name, &off)) == 0)
-    goto bad;
-  ilock(ip);
-
-  if(ip->nlink < 1)
-    panic("unlink: nlink < 1");
-  if(ip->type == T_DIR && !isdirempty(ip)){
-    iunlockput(ip);
-    goto bad;
-  }
-
-  memset(&de, 0, sizeof(de));
-  if(writei(dp, (char*)&de, off, sizeof(de)) != sizeof(de))
-    panic("unlink: writei");
-  if(ip->type == T_DIR){
-    dp->nlink--;
-    iupdate(dp);
-  }
-  iunlockput(dp);
-
-  ip->nlink--;
-  iupdate(ip);
-  iunlockput(ip);
-
-  end_op();
-
-  return 0;
-
-bad:
-  iunlockput(dp);
-  end_op();
-  return -1;
-}
-
-static struct inode*
-create(char *path, short type, short major, short minor)
-{
-  uint off;
-  struct inode *ip, *dp;
-  char name[DIRSIZ];
-
-  if((dp = nameiparent(path, name)) == 0)
-    return 0;
-  ilock(dp);
-
-  if((ip = dirlookup(dp, name, &off)) != 0){
-    iunlockput(dp);
-    ilock(ip);
-    if(type == T_FILE && ip->type == T_FILE)
-      return ip;
-    iunlockput(ip);
-    return 0;
-  }
-
-  if((ip = ialloc(dp->dev, type)) == 0)
-    panic("create: ialloc");
-
-  ilock(ip);
-  ip->major = major;
-  ip->minor = minor;
-  ip->nlink = 1;
-  iupdate(ip);
-
-  if(type == T_DIR){  // Create . and .. entries.
-    dp->nlink++;  // for ".."
-    iupdate(dp);
-    // No ip->nlink++ for ".": avoid cyclic ref count.
-    if(dirlink(ip, ".", ip->inum) < 0 || dirlink(ip, "..", dp->inum) < 0)
-      panic("create dots");
-  }
-
-  if(dirlink(dp, name, ip->inum) < 0)
-    panic("create: dirlink");
-
-  iunlockput(dp);
-
-  return ip;
-}
-
-int
-sys_open(void)
-{
-  char *path;
-  int fd, omode;
-  struct file *f;
-  struct inode *ip;
-
-  if(argstr(0, &path) < 0 || argint(1, &omode) < 0)
-    return -1;
-
-  begin_op();
-
-  if(omode & O_CREATE){
-    ip = create(path, T_FILE, 0, 0);
-    if(ip == 0){
-      end_op();
-      return -1;
-    }
-  } else {
-    if((ip = namei(path)) == 0){
-      end_op();
-      return -1;
-    }
-    ilock(ip);
-    if(ip->type == T_DIR && omode != O_RDONLY){
-      iunlockput(ip);
-      end_op();
-      return -1;
-    }
-  }
-
-  if((f = filealloc()) == 0 || (fd = fdalloc(f)) < 0){
-    if(f)
-      fileclose(f);
-    iunlockput(ip);
-    end_op();
-    return -1;
-  }
-  iunlock(ip);
-  end_op();
-
-  f->type = FD_INODE;
-  f->ip = ip;
-  f->off = 0;
-  f->readable = !(omode & O_WRONLY);
-  f->writable = (omode & O_WRONLY) || (omode & O_RDWR);
-  return fd;
-}
-
-int
-sys_mkdir(void)
-{
-  char *path;
-  struct inode *ip;
-
-  begin_op();
-  if(argstr(0, &path) < 0 || (ip = create(path, T_DIR, 0, 0)) == 0){
-    end_op();
-    return -1;
-  }
-  iunlockput(ip);
-  end_op();
-  return 0;
-}
-
-int
-sys_mknod(void)
-{
-  struct inode *ip;
-  char *path;
-  int len;
-  int major, minor;
-  
-  begin_op();
-  if((len=argstr(0, &path)) < 0 ||
-     argint(1, &major) < 0 ||
-     argint(2, &minor) < 0 ||
-     (ip = create(path, T_DEV, major, minor)) == 0){
-    end_op();
-    return -1;
-  }
-  iunlockput(ip);
-  end_op();
-  return 0;
-}
-
-int
-sys_chdir(void)
-{
-  char *path;
-  struct inode *ip;
-
-  begin_op();
-  if(argstr(0, &path) < 0 || (ip = namei(path)) == 0){
-    end_op();
-    return -1;
-  }
-  ilock(ip);
-  if(ip->type != T_DIR){
-    iunlockput(ip);
-    end_op();
-    return -1;
-  }
-  iunlock(ip);
-  iput(proc->cwd);
-  end_op();
-  proc->cwd = ip;
-  return 0;
-}
-
-int
-sys_exec(void)
-{
-  char *path, *argv[MAXARG];
-  int i;
-  uint uargv, uarg;
-
-  if(argstr(0, &path) < 0 || argint(1, (int*)&uargv) < 0){
-    return -1;
-  }
-  memset(argv, 0, sizeof(argv));
-  for(i=0;; i++){
-    if(i >= NELEM(argv))
-      return -1;
-    if(fetchint(uargv+4*i, (int*)&uarg) < 0)
-      return -1;
-    if(uarg == 0){
-      argv[i] = 0;
-      break;
-    }
-    if(fetchstr(uarg, &argv[i]) < 0)
-      return -1;
-  }
-  return exec(path, argv);
-}
-
-int
-sys_pipe(void)
-{
-  int *fd;
-  struct file *rf, *wf;
-  int fd0, fd1;
-
-  if(argptr(0, (void*)&fd, 2*sizeof(fd[0])) < 0)
-    return -1;
-  if(pipealloc(&rf, &wf) < 0)
-    return -1;
-  fd0 = -1;
-  if((fd0 = fdalloc(rf)) < 0 || (fd1 = fdalloc(wf)) < 0){
-    if(fd0 >= 0)
-      proc->ofile[fd0] = 0;
-    fileclose(rf);
-    fileclose(wf);
-    return -1;
-  }
-  fd[0] = fd0;
-  fd[1] = fd1;
-  return 0;
-}
diff --git a/xv6/sysfile.d b/xv6/sysfile.d
deleted file mode 100644
index e16b791..0000000
--- a/xv6/sysfile.d
+++ /dev/null
@@ -1,2 +0,0 @@
-sysfile.o: sysfile.c types.h defs.h param.h stat.h mmu.h proc.h fs.h \
- file.h fcntl.h
diff --git a/xv6/sysproc.c b/xv6/sysproc.c
deleted file mode 100644
index 5a5ce96..0000000
--- a/xv6/sysproc.c
+++ /dev/null
@@ -1,173 +0,0 @@
-#include "types.h"
-#include "x86.h"
-#include "defs.h"
-#include "date.h"
-#include "param.h"
-#include "memlayout.h"
-#include "mmu.h"
-#include "proc.h"
-
-int
-sys_fork(void)
-{
-  return fork();
-}
-
-int
-sys_exit(void)
-{
-	int status;
-	if(argint(0, &status) < 0)
-	    return -1;
-
-	exit(status);
-	return 0;  // not reached
-}
-
-int
-sys_wait(void)
-{
-	int* status;
-	//take argument from environment
-	if(argptr(0,(char**)&status, sizeof(int)) <0){ //error check
-		return -1;
-	}
-	return wait(status);
-}
-
-int
-sys_waitpid(void)
-{
-	int pid;
-	int *status;
-	int options;
-
-	if (	(argint(0, &pid) < 0) ||
-			(argptr(1,(char**)&status, sizeof(int)) < 0) ||
-			(argint(2, &options) < 0) ){
-
-		return -1;
-	}
-
-	return waitpid(pid, status, options);
-}
-
-int
-sys_wait_stat(void)
-{
-	int *wtime, *rtime, *iotime, *status;
-
-	if (	(argptr(0,(char**)&wtime, sizeof(int)) < 0) ||
-			(argptr(1,(char**)&rtime, sizeof(int)) < 0) ||
-			(argptr(2,(char**)&iotime, sizeof(int)) < 0) ||
-			(argptr(3,(char**)&status, sizeof(int)) < 0) ){
-
-		return -1;
-	}
-
-	return wait_stat(wtime, rtime, iotime, status);
-}
-
-int
-sys_list_pgroup(void)
-{
-	int gid;
-	process_info_entry* arr;
-	int* size;
-
-	if (	(argint(0, &gid) < 0) ||
-			(argptr(1,(char**)&arr, sizeof(process_info_entry)) < 0) ||
-			(argptr(2,(char**)&size, sizeof(int)) < 0)){
-
-		return -1;
-	}
-
-	return list_pgroup(gid, arr, size);
-}
-
-int
-sys_foreground(void)
-{
-	int gid;
-
-	if (argint(0, &gid) < 0){
-		return -1;
-	}
-
-	return foreground(gid);
-}
-
-int
-sys_set_priority(void)
-{
-	int priority;
-
-	if(argint(0, &priority) < 0)
-	return -1;
-	return set_priority(priority);
-}
-
-
-int
-sys_kill(void)
-{
-  int pid;
-
-  if(argint(0, &pid) < 0)
-    return -1;
-  return kill(pid);
-}
-
-int
-sys_getpid(void)
-{
-  return proc->pid;
-}
-
-int
-sys_sbrk(void)
-{
-  int addr;
-  int n;
-
-  if(argint(0, &n) < 0)
-    return -1;
-  addr = proc->sz;
-  if(growproc(n) < 0)
-    return -1;
-  return addr;
-}
-
-int
-sys_sleep(void)
-{
-  int n;
-  uint ticks0;
-  
-  if(argint(0, &n) < 0)
-    return -1;
-  acquire(&tickslock);
-  ticks0 = ticks;
-  while(ticks - ticks0 < n){
-    if(proc->killed){
-      release(&tickslock);
-      return -1;
-    }
-    sleep(&ticks, &tickslock);
-  }
-  release(&tickslock);
-  return 0;
-}
-
-// return how many clock tick interrupts have occurred
-// since start.
-int
-sys_uptime(void)
-{
-  uint xticks;
-  
-  acquire(&tickslock);
-  xticks = ticks;
-  release(&tickslock);
-  return xticks;
-}
diff --git a/xv6/sysproc.d b/xv6/sysproc.d
deleted file mode 100644
index 88bb55a..0000000
--- a/xv6/sysproc.d
+++ /dev/null
@@ -1,2 +0,0 @@
-sysproc.o: sysproc.c types.h x86.h defs.h date.h param.h memlayout.h \
- mmu.h proc.h
diff --git a/xv6/timer.c b/xv6/timer.c
deleted file mode 100644
index 8df75a9..0000000
--- a/xv6/timer.c
+++ /dev/null
@@ -1,32 +0,0 @@
-// Intel 8253/8254/82C54 Programmable Interval Timer (PIT).
-// Only used on uniprocessors;
-// SMP machines use the local APIC timer.
-
-#include "types.h"
-#include "defs.h"
-#include "traps.h"
-#include "x86.h"
-
-#define IO_TIMER1       0x040           // 8253 Timer #1
-
-// Frequency of all three count-down timers;
-// (TIMER_FREQ/freq) is the appropriate count
-// to generate a frequency of freq Hz.
-
-#define TIMER_FREQ      1193182
-#define TIMER_DIV(x)    ((TIMER_FREQ+(x)/2)/(x))
-
-#define TIMER_MODE      (IO_TIMER1 + 3) // timer mode port
-#define TIMER_SEL0      0x00    // select counter 0
-#define TIMER_RATEGEN   0x04    // mode 2, rate generator
-#define TIMER_16BIT     0x30    // r/w counter 16 bits, LSB first
-
-void
-timerinit(void)
-{
-  // Interrupt 100 times/sec.
-  outb(TIMER_MODE, TIMER_SEL0 | TIMER_RATEGEN | TIMER_16BIT);
-  outb(IO_TIMER1, TIMER_DIV(100) % 256);
-  outb(IO_TIMER1, TIMER_DIV(100) / 256);
-  picenable(IRQ_TIMER);
-}
diff --git a/xv6/timer.d b/xv6/timer.d
deleted file mode 100644
index e5b3ae6..0000000
--- a/xv6/timer.d
+++ /dev/null
@@ -1 +0,0 @@
-timer.o: timer.c types.h defs.h traps.h x86.h
diff --git a/xv6/toc.ftr b/xv6/toc.ftr
deleted file mode 100644
index 0061c1d..0000000
--- a/xv6/toc.ftr
+++ /dev/null
@@ -1,13 +0,0 @@
-
-
-The source listing is preceded by a cross-reference that lists every defined 
-constant, struct, global variable, and function in xv6.  Each entry gives,
-on the same line as the name, the line number (or, in a few cases, numbers)
-where the name is defined.  Successive lines in an entry list the line
-numbers where the name is used.  For example, this entry:
-
-    swtch 2658
-        0374 2428 2466 2657 2658
-
-indicates that swtch is defined on line 2658 and is mentioned on five lines
-on sheets 03, 24, and 26.
diff --git a/xv6/toc.hdr b/xv6/toc.hdr
deleted file mode 100644
index 3698d81..0000000
--- a/xv6/toc.hdr
+++ /dev/null
@@ -1,6 +0,0 @@
-The numbers to the left of the file names in the table are sheet numbers.
-The source code has been printed in a double column format with fifty
-lines per column, giving one hundred lines per sheet (or page).
-Thus there is a convenient relationship between line numbers and sheet numbers.
-
-
diff --git a/xv6/trap.c b/xv6/trap.c
deleted file mode 100644
index d186556..0000000
--- a/xv6/trap.c
+++ /dev/null
@@ -1,143 +0,0 @@
-#include "types.h"
-#include "defs.h"
-#include "param.h"
-#include "memlayout.h"
-#include "mmu.h"
-#include "proc.h"
-#include "x86.h"
-#include "traps.h"
-#include "spinlock.h"
-
-// Interrupt descriptor table (shared by all CPUs).
-struct gatedesc idt[256];
-extern uint vectors[];  // in vectors.S: array of 256 entry pointers
-struct spinlock tickslock;
-uint ticks;
-
-void
-tvinit(void)
-{
-  int i;
-
-  for(i = 0; i < 256; i++)
-    SETGATE(idt[i], 0, SEG_KCODE<<3, vectors[i], 0);
-  SETGATE(idt[T_SYSCALL], 1, SEG_KCODE<<3, vectors[T_SYSCALL], DPL_USER);
-  
-  initlock(&tickslock, "time");
-}
-
-void
-idtinit(void)
-{
-  lidt(idt, sizeof(idt));
-}
-
-struct {
-  struct spinlock lock;
-  struct proc proc[NPROC];
-} ptable;
-
-void updateStats()
-{
-	struct proc* p;
-    for(p = ptable.proc; p < &ptable.proc[NPROC]; p++){
-		switch (p->state) {
-			case SLEEPING:
-				p->stime++;
-				break;
-			case RUNNABLE:
-				p->retime++;
-				break;
-			case RUNNING:
-				p->rutime++;
-				p->vruntime += p->priority;
-				break;
-			default:
-				break;
-		}
-    }
-}
-
-
-//PAGEBREAK: 41
-void
-trap(struct trapframe *tf)
-{
-  if(tf->trapno == T_SYSCALL){
-    if(proc->killed)
-      exit(EXIT_STATUS_DEFAULT);
-    proc->tf = tf;
-    syscall();
-    if(proc->killed)
-      exit(EXIT_STATUS_DEFAULT);
-    return;
-  }
-
-  switch(tf->trapno){
-  case T_IRQ0 + IRQ_TIMER:
-    if(cpu->id == 0){
-      acquire(&tickslock);
-      ticks++;
-      wakeup(&ticks);
-      release(&tickslock);
-
-      updateStats();
-    }
-    lapiceoi();
-    break;
-  case T_IRQ0 + IRQ_IDE:
-    ideintr();
-    lapiceoi();
-    break;
-  case T_IRQ0 + IRQ_IDE+1:
-    // Bochs generates spurious IDE1 interrupts.
-    break;
-  case T_IRQ0 + IRQ_KBD:
-    kbdintr();
-    lapiceoi();
-    break;
-  case T_IRQ0 + IRQ_COM1:
-    uartintr();
-    lapiceoi();
-    break;
-  case T_IRQ0 + 7:
-  case T_IRQ0 + IRQ_SPURIOUS:
-    cprintf("cpu%d: spurious interrupt at %x:%x\n",
-            cpu->id, tf->cs, tf->eip);
-    lapiceoi();
-    break;
-   
-  //PAGEBREAK: 13
-  default:
-    if(proc == 0 || (tf->cs&3) == 0){
-      // In kernel, it must be our mistake.
-      cprintf("unexpected trap %d from cpu %d eip %x (cr2=0x%x)\n",
-              tf->trapno, cpu->id, tf->eip, rcr2());
-      panic("trap");
-    }
-    // In user space, assume process misbehaved.
-    cprintf("pid %d %s: trap %d err %d on cpu %d "
-            "eip 0x%x addr 0x%x--kill proc\n",
-            proc->pid, proc->name, tf->trapno, tf->err, cpu->id, tf->eip, 
-            rcr2());
-    proc->killed = 1;
-  }
-
-  // Force process exit if it has been killed and is in user space.
-  // (If it is still executing in the kernel, let it keep running 
-  // until it gets to the regular system call return.)
-  if(proc && proc->killed && (tf->cs&3) == DPL_USER)
-    exit(EXIT_STATUS_DEFAULT);
-
-#ifndef FCFS //all policies are preemptive besides FCFS
-  // Force process to give up CPU on <QUANTA> clock tick.
-  // If interrupts were on while locks held, would need to check nlock.
-  if(proc && proc->state == RUNNING && tf->trapno == T_IRQ0+IRQ_TIMER){
-	    if( !(ticks % QUANTA) ) yield();
-  }
-#endif
-
-  // Check if the process has been killed since we yielded
-  if(proc && proc->killed && (tf->cs&3) == DPL_USER)
-    exit(EXIT_STATUS_DEFAULT);
-}
diff --git a/xv6/trap.d b/xv6/trap.d
deleted file mode 100644
index d4976c9..0000000
--- a/xv6/trap.d
+++ /dev/null
@@ -1,2 +0,0 @@
-trap.o: trap.c types.h defs.h param.h memlayout.h mmu.h proc.h x86.h \
- traps.h spinlock.h
diff --git a/xv6/trapasm.S b/xv6/trapasm.S
deleted file mode 100644
index 787727f..0000000
--- a/xv6/trapasm.S
+++ /dev/null
@@ -1,35 +0,0 @@
-#include "mmu.h"
-
-  # vectors.S sends all traps here.
-.globl alltraps
-alltraps:
-  # Build trap frame.
-  pushl %ds
-  pushl %es
-  pushl %fs
-  pushl %gs
-  pushal
-  
-  # Set up data and per-cpu segments.
-  movw $(SEG_KDATA<<3), %ax
-  movw %ax, %ds
-  movw %ax, %es
-  movw $(SEG_KCPU<<3), %ax
-  movw %ax, %fs
-  movw %ax, %gs
-
-  # Call trap(tf), where tf=%esp
-  pushl %esp
-  call trap
-  addl $4, %esp
-
-  # Return falls through to trapret...
-.globl trapret
-trapret:
-  popal
-  popl %gs
-  popl %fs
-  popl %es
-  popl %ds
-  addl $0x8, %esp  # trapno and errcode
-  iret
diff --git a/xv6/traps.h b/xv6/traps.h
deleted file mode 100644
index 0bd1fd8..0000000
--- a/xv6/traps.h
+++ /dev/null
@@ -1,38 +0,0 @@
-// x86 trap and interrupt constants.
-
-// Processor-defined:
-#define T_DIVIDE         0      // divide error
-#define T_DEBUG          1      // debug exception
-#define T_NMI            2      // non-maskable interrupt
-#define T_BRKPT          3      // breakpoint
-#define T_OFLOW          4      // overflow
-#define T_BOUND          5      // bounds check
-#define T_ILLOP          6      // illegal opcode
-#define T_DEVICE         7      // device not available
-#define T_DBLFLT         8      // double fault
-// #define T_COPROC      9      // reserved (not used since 486)
-#define T_TSS           10      // invalid task switch segment
-#define T_SEGNP         11      // segment not present
-#define T_STACK         12      // stack exception
-#define T_GPFLT         13      // general protection fault
-#define T_PGFLT         14      // page fault
-// #define T_RES        15      // reserved
-#define T_FPERR         16      // floating point error
-#define T_ALIGN         17      // aligment check
-#define T_MCHK          18      // machine check
-#define T_SIMDERR       19      // SIMD floating point error
-
-// These are arbitrarily chosen, but with care not to overlap
-// processor defined exceptions or interrupt vectors.
-#define T_SYSCALL       64      // system call
-#define T_DEFAULT      500      // catchall
-
-#define T_IRQ0          32      // IRQ 0 corresponds to int T_IRQ
-
-#define IRQ_TIMER        0
-#define IRQ_KBD          1
-#define IRQ_COM1         4
-#define IRQ_IDE         14
-#define IRQ_ERROR       19
-#define IRQ_SPURIOUS    31
-
diff --git a/xv6/types.h b/xv6/types.h
deleted file mode 100644
index ca72d9b..0000000
--- a/xv6/types.h
+++ /dev/null
@@ -1,14 +0,0 @@
-enum status { EXIT_STATUS_FAILURE, EXIT_STATUS_SUCCESS, EXIT_STATUS_DEFAULT };
-enum wait_options { BLOCKING, NONBLOCKING, WAIT_GROUP };
-enum priority { PRIORITY_NONE, PRIORITY_HIGH, PRIORITY_MEDIUM, PRIORITY_LOW };
-
-
-typedef unsigned int   uint;
-typedef unsigned short ushort;
-typedef unsigned char  uchar;
-typedef uint pde_t;
-
-typedef struct process_info_entry{
-  int pid;
-  char name[16];
-} process_info_entry;
diff --git a/xv6/uart.c b/xv6/uart.c
deleted file mode 100644
index 576e254..0000000
--- a/xv6/uart.c
+++ /dev/null
@@ -1,77 +0,0 @@
-// Intel 8250 serial port (UART).
-
-#include "types.h"
-#include "defs.h"
-#include "param.h"
-#include "traps.h"
-#include "spinlock.h"
-#include "fs.h"
-#include "file.h"
-#include "mmu.h"
-#include "proc.h"
-#include "x86.h"
-
-#define COM1    0x3f8
-
-static int uart;    // is there a uart?
-
-void
-uartinit(void)
-{
-  char *p;
-
-  // Turn off the FIFO
-  outb(COM1+2, 0);
-  
-  // 9600 baud, 8 data bits, 1 stop bit, parity off.
-  outb(COM1+3, 0x80);    // Unlock divisor
-  outb(COM1+0, 115200/9600);
-  outb(COM1+1, 0);
-  outb(COM1+3, 0x03);    // Lock divisor, 8 data bits.
-  outb(COM1+4, 0);
-  outb(COM1+1, 0x01);    // Enable receive interrupts.
-
-  // If status is 0xFF, no serial port.
-  if(inb(COM1+5) == 0xFF)
-    return;
-  uart = 1;
-
-  // Acknowledge pre-existing interrupt conditions;
-  // enable interrupts.
-  inb(COM1+2);
-  inb(COM1+0);
-  picenable(IRQ_COM1);
-  ioapicenable(IRQ_COM1, 0);
-  
-  // Announce that we're here.
-  for(p="xv6...\n"; *p; p++)
-    uartputc(*p);
-}
-
-void
-uartputc(int c)
-{
-  int i;
-
-  if(!uart)
-    return;
-  for(i = 0; i < 128 && !(inb(COM1+5) & 0x20); i++)
-    microdelay(10);
-  outb(COM1+0, c);
-}
-
-static int
-uartgetc(void)
-{
-  if(!uart)
-    return -1;
-  if(!(inb(COM1+5) & 0x01))
-    return -1;
-  return inb(COM1+0);
-}
-
-void
-uartintr(void)
-{
-  consoleintr(uartgetc);
-}
diff --git a/xv6/uart.d b/xv6/uart.d
deleted file mode 100644
index 9eaffe9..0000000
--- a/xv6/uart.d
+++ /dev/null
@@ -1,2 +0,0 @@
-uart.o: uart.c types.h defs.h param.h traps.h spinlock.h fs.h file.h \
- mmu.h proc.h x86.h
diff --git a/xv6/ulib.c b/xv6/ulib.c
deleted file mode 100644
index dbbcfcf..0000000
--- a/xv6/ulib.c
+++ /dev/null
@@ -1,105 +0,0 @@
-#include "types.h"
-#include "stat.h"
-#include "fcntl.h"
-#include "user.h"
-#include "x86.h"
-
-char*
-strcpy(char *s, char *t)
-{
-  char *os;
-
-  os = s;
-  while((*s++ = *t++) != 0)
-    ;
-  return os;
-}
-
-int
-strcmp(const char *p, const char *q)
-{
-  while(*p && *p == *q)
-    p++, q++;
-  return (uchar)*p - (uchar)*q;
-}
-
-uint
-strlen(char *s)
-{
-  int n;
-
-  for(n = 0; s[n]; n++)
-    ;
-  return n;
-}
-
-void*
-memset(void *dst, int c, uint n)
-{
-  stosb(dst, c, n);
-  return dst;
-}
-
-char*
-strchr(const char *s, char c)
-{
-  for(; *s; s++)
-    if(*s == c)
-      return (char*)s;
-  return 0;
-}
-
-char*
-gets(char *buf, int max)
-{
-  int i, cc;
-  char c;
-
-  for(i=0; i+1 < max; ){
-    cc = read(0, &c, 1);
-    if(cc < 1)
-      break;
-    buf[i++] = c;
-    if(c == '\n' || c == '\r')
-      break;
-  }
-  buf[i] = '\0';
-  return buf;
-}
-
-int
-stat(char *n, struct stat *st)
-{
-  int fd;
-  int r;
-
-  fd = open(n, O_RDONLY);
-  if(fd < 0)
-    return -1;
-  r = fstat(fd, st);
-  close(fd);
-  return r;
-}
-
-int
-atoi(const char *s)
-{
-  int n;
-
-  n = 0;
-  while('0' <= *s && *s <= '9')
-    n = n*10 + *s++ - '0';
-  return n;
-}
-
-void*
-memmove(void *vdst, void *vsrc, int n)
-{
-  char *dst, *src;
-  
-  dst = vdst;
-  src = vsrc;
-  while(n-- > 0)
-    *dst++ = *src++;
-  return vdst;
-}
diff --git a/xv6/ulib.d b/xv6/ulib.d
deleted file mode 100644
index 14b02f5..0000000
--- a/xv6/ulib.d
+++ /dev/null
@@ -1 +0,0 @@
-ulib.o: ulib.c types.h stat.h fcntl.h user.h x86.h
diff --git a/xv6/umalloc.c b/xv6/umalloc.c
deleted file mode 100644
index a7e7d2c..0000000
--- a/xv6/umalloc.c
+++ /dev/null
@@ -1,90 +0,0 @@
-#include "types.h"
-#include "stat.h"
-#include "user.h"
-#include "param.h"
-
-// Memory allocator by Kernighan and Ritchie,
-// The C programming Language, 2nd ed.  Section 8.7.
-
-typedef long Align;
-
-union header {
-  struct {
-    union header *ptr;
-    uint size;
-  } s;
-  Align x;
-};
-
-typedef union header Header;
-
-static Header base;
-static Header *freep;
-
-void
-free(void *ap)
-{
-  Header *bp, *p;
-
-  bp = (Header*)ap - 1;
-  for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
-    if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
-      break;
-  if(bp + bp->s.size == p->s.ptr){
-    bp->s.size += p->s.ptr->s.size;
-    bp->s.ptr = p->s.ptr->s.ptr;
-  } else
-    bp->s.ptr = p->s.ptr;
-  if(p + p->s.size == bp){
-    p->s.size += bp->s.size;
-    p->s.ptr = bp->s.ptr;
-  } else
-    p->s.ptr = bp;
-  freep = p;
-}
-
-static Header*
-morecore(uint nu)
-{
-  char *p;
-  Header *hp;
-
-  if(nu < 4096)
-    nu = 4096;
-  p = sbrk(nu * sizeof(Header));
-  if(p == (char*)-1)
-    return 0;
-  hp = (Header*)p;
-  hp->s.size = nu;
-  free((void*)(hp + 1));
-  return freep;
-}
-
-void*
-malloc(uint nbytes)
-{
-  Header *p, *prevp;
-  uint nunits;
-
-  nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;
-  if((prevp = freep) == 0){
-    base.s.ptr = freep = prevp = &base;
-    base.s.size = 0;
-  }
-  for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
-    if(p->s.size >= nunits){
-      if(p->s.size == nunits)
-        prevp->s.ptr = p->s.ptr;
-      else {
-        p->s.size -= nunits;
-        p += p->s.size;
-        p->s.size = nunits;
-      }
-      freep = prevp;
-      return (void*)(p + 1);
-    }
-    if(p == freep)
-      if((p = morecore(nunits)) == 0)
-        return 0;
-  }
-}
diff --git a/xv6/umalloc.d b/xv6/umalloc.d
deleted file mode 100644
index 970d450..0000000
--- a/xv6/umalloc.d
+++ /dev/null
@@ -1 +0,0 @@
-umalloc.o: umalloc.c types.h stat.h user.h param.h
diff --git a/xv6/user.h b/xv6/user.h
deleted file mode 100644
index 032f879..0000000
--- a/xv6/user.h
+++ /dev/null
@@ -1,46 +0,0 @@
-struct stat;
-struct rtcdate;
-
-
-// system calls
-int fork(void);
-int exit(int) __attribute__((noreturn));
-int wait(int*);
-int pipe(int*);
-int write(int, void*, int);
-int read(int, void*, int);
-int close(int);
-int kill(int);
-int exec(char*, char**);
-int open(char*, int);
-int mknod(char*, short, short);
-int unlink(char*);
-int fstat(int fd, struct stat*);
-int link(char*, char*);
-int mkdir(char*);
-int chdir(char*);
-int dup(int);
-int getpid(void);
-char* sbrk(int);
-int sleep(int);
-int uptime(void);
-int waitpid(int, int*, int);
-int wait_stat(int*, int*, int*, int*);
-int list_pgroup(int, process_info_entry*, int*);
-int foreground(int);
-int set_priority(int);
-
-
-// ulib.c
-int stat(char*, struct stat*);
-char* strcpy(char*, char*);
-void *memmove(void*, void*, int);
-char* strchr(const char*, char c);
-int strcmp(const char*, const char*);
-void printf(int, char*, ...);
-char* gets(char*, int max);
-uint strlen(char*);
-void* memset(void*, int, uint);
-void* malloc(uint);
-void free(void*);
-int atoi(const char*);
diff --git a/xv6/usertests.asm b/xv6/usertests.asm
deleted file mode 100644
index c071485..0000000
--- a/xv6/usertests.asm
+++ /dev/null
@@ -1,7564 +0,0 @@
-
-_usertests:     file format elf32-i386
-
-
-Disassembly of section .text:
-
-00000000 <iputtest>:
-int stdout = 1;
-
-// does chdir() call iput(p->cwd) in a transaction?
-void
-iputtest(void)
-{
-       0:	55                   	push   %ebp
-       1:	89 e5                	mov    %esp,%ebp
-       3:	83 ec 18             	sub    $0x18,%esp
-  printf(stdout, "iput test\n");
-       6:	a1 80 68 00 00       	mov    0x6880,%eax
-       b:	c7 44 24 04 d6 49 00 	movl   $0x49d6,0x4(%esp)
-      12:	00 
-      13:	89 04 24             	mov    %eax,(%esp)
-      16:	e8 e0 45 00 00       	call   45fb <printf>
-
-  if(mkdir("iputdir") < 0){
-      1b:	c7 04 24 e1 49 00 00 	movl   $0x49e1,(%esp)
-      22:	e8 9d 44 00 00       	call   44c4 <mkdir>
-      27:	85 c0                	test   %eax,%eax
-      29:	79 21                	jns    4c <iputtest+0x4c>
-    printf(stdout, "mkdir failed\n");
-      2b:	a1 80 68 00 00       	mov    0x6880,%eax
-      30:	c7 44 24 04 e9 49 00 	movl   $0x49e9,0x4(%esp)
-      37:	00 
-      38:	89 04 24             	mov    %eax,(%esp)
-      3b:	e8 bb 45 00 00       	call   45fb <printf>
-    exit(EXIT_STATUS_DEFAULT);
-      40:	c7 04 24 02 00 00 00 	movl   $0x2,(%esp)
-      47:	e8 10 44 00 00       	call   445c <exit>
-  }
-  if(chdir("iputdir") < 0){
-      4c:	c7 04 24 e1 49 00 00 	movl   $0x49e1,(%esp)
-      53:	e8 74 44 00 00       	call   44cc <chdir>
-      58:	85 c0                	test   %eax,%eax
-      5a:	79 21                	jns    7d <iputtest+0x7d>
-    printf(stdout, "chdir iputdir failed\n");
-      5c:	a1 80 68 00 00       	mov    0x6880,%eax
-      61:	c7 44 24 04 f7 49 00 	movl   $0x49f7,0x4(%esp)
-      68:	00 
-      69:	89 04 24             	mov    %eax,(%esp)
-      6c:	e8 8a 45 00 00       	call   45fb <printf>
-    exit(EXIT_STATUS_DEFAULT);
-      71:	c7 04 24 02 00 00 00 	movl   $0x2,(%esp)
-      78:	e8 df 43 00 00       	call   445c <exit>
-  }
-  if(unlink("../iputdir") < 0){
-      7d:	c7 04 24 0d 4a 00 00 	movl   $0x4a0d,(%esp)
-      84:	e8 23 44 00 00       	call   44ac <unlink>
-      89:	85 c0                	test   %eax,%eax
-      8b:	79 21                	jns    ae <iputtest+0xae>
-    printf(stdout, "unlink ../iputdir failed\n");
-      8d:	a1 80 68 00 00       	mov    0x6880,%eax
-      92:	c7 44 24 04 18 4a 00 	movl   $0x4a18,0x4(%esp)
-      99:	00 
-      9a:	89 04 24             	mov    %eax,(%esp)
-      9d:	e8 59 45 00 00       	call   45fb <printf>
-    exit(EXIT_STATUS_DEFAULT);
-      a2:	c7 04 24 02 00 00 00 	movl   $0x2,(%esp)
-      a9:	e8 ae 43 00 00       	call   445c <exit>
-  }
-  if(chdir("/") < 0){
-      ae:	c7 04 24 32 4a 00 00 	movl   $0x4a32,(%esp)
-      b5:	e8 12 44 00 00       	call   44cc <chdir>
-      ba:	85 c0                	test   %eax,%eax
-      bc:	79 21                	jns    df <iputtest+0xdf>
-    printf(stdout, "chdir / failed\n");
-      be:	a1 80 68 00 00       	mov    0x6880,%eax
-      c3:	c7 44 24 04 34 4a 00 	movl   $0x4a34,0x4(%esp)
-      ca:	00 
-      cb:	89 04 24             	mov    %eax,(%esp)
-      ce:	e8 28 45 00 00       	call   45fb <printf>
-    exit(EXIT_STATUS_DEFAULT);
-      d3:	c7 04 24 02 00 00 00 	movl   $0x2,(%esp)
-      da:	e8 7d 43 00 00       	call   445c <exit>
-  }
-  printf(stdout, "iput test ok\n");
-      df:	a1 80 68 00 00       	mov    0x6880,%eax
-      e4:	c7 44 24 04 44 4a 00 	movl   $0x4a44,0x4(%esp)
-      eb:	00 
-      ec:	89 04 24             	mov    %eax,(%esp)
-      ef:	e8 07 45 00 00       	call   45fb <printf>
-}
-      f4:	c9                   	leave  
-      f5:	c3                   	ret    
-
-000000f6 <exitiputtest>:
-
-// does exit(EXIT_STATUS_DEFAULT) call iput(p->cwd) in a transaction?
-void
-exitiputtest(void)
-{
-      f6:	55                   	push   %ebp
-      f7:	89 e5                	mov    %esp,%ebp
-      f9:	83 ec 28             	sub    $0x28,%esp
-  int pid;
-
-  printf(stdout, "exitiput test\n");
-      fc:	a1 80 68 00 00       	mov    0x6880,%eax
-     101:	c7 44 24 04 52 4a 00 	movl   $0x4a52,0x4(%esp)
-     108:	00 
-     109:	89 04 24             	mov    %eax,(%esp)
-     10c:	e8 ea 44 00 00       	call   45fb <printf>
-
-  pid = fork();
-     111:	e8 3e 43 00 00       	call   4454 <fork>
-     116:	89 45 f4             	mov    %eax,-0xc(%ebp)
-  if(pid < 0){
-     119:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
-     11d:	79 21                	jns    140 <exitiputtest+0x4a>
-    printf(stdout, "fork failed\n");
-     11f:	a1 80 68 00 00       	mov    0x6880,%eax
-     124:	c7 44 24 04 61 4a 00 	movl   $0x4a61,0x4(%esp)
-     12b:	00 
-     12c:	89 04 24             	mov    %eax,(%esp)
-     12f:	e8 c7 44 00 00       	call   45fb <printf>
-    exit(EXIT_STATUS_DEFAULT);
-     134:	c7 04 24 02 00 00 00 	movl   $0x2,(%esp)
-     13b:	e8 1c 43 00 00       	call   445c <exit>
-  }
-  if(pid == 0){
-     140:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
-     144:	0f 85 9f 00 00 00    	jne    1e9 <exitiputtest+0xf3>
-    if(mkdir("iputdir") < 0){
-     14a:	c7 04 24 e1 49 00 00 	movl   $0x49e1,(%esp)
-     151:	e8 6e 43 00 00       	call   44c4 <mkdir>
-     156:	85 c0                	test   %eax,%eax
-     158:	79 21                	jns    17b <exitiputtest+0x85>
-      printf(stdout, "mkdir failed\n");
-     15a:	a1 80 68 00 00       	mov    0x6880,%eax
-     15f:	c7 44 24 04 e9 49 00 	movl   $0x49e9,0x4(%esp)
-     166:	00 
-     167:	89 04 24             	mov    %eax,(%esp)
-     16a:	e8 8c 44 00 00       	call   45fb <printf>
-      exit(EXIT_STATUS_DEFAULT);
-     16f:	c7 04 24 02 00 00 00 	movl   $0x2,(%esp)
-     176:	e8 e1 42 00 00       	call   445c <exit>
-    }
-    if(chdir("iputdir") < 0){
-     17b:	c7 04 24 e1 49 00 00 	movl   $0x49e1,(%esp)
-     182:	e8 45 43 00 00       	call   44cc <chdir>
-     187:	85 c0                	test   %eax,%eax
-     189:	79 21                	jns    1ac <exitiputtest+0xb6>
-      printf(stdout, "child chdir failed\n");
-     18b:	a1 80 68 00 00       	mov    0x6880,%eax
-     190:	c7 44 24 04 6e 4a 00 	movl   $0x4a6e,0x4(%esp)
-     197:	00 
-     198:	89 04 24             	mov    %eax,(%esp)
-     19b:	e8 5b 44 00 00       	call   45fb <printf>
-      exit(EXIT_STATUS_DEFAULT);
-     1a0:	c7 04 24 02 00 00 00 	movl   $0x2,(%esp)
-     1a7:	e8 b0 42 00 00       	call   445c <exit>
-    }
-    if(unlink("../iputdir") < 0){
-     1ac:	c7 04 24 0d 4a 00 00 	movl   $0x4a0d,(%esp)
-     1b3:	e8 f4 42 00 00       	call   44ac <unlink>
-     1b8:	85 c0                	test   %eax,%eax
-     1ba:	79 21                	jns    1dd <exitiputtest+0xe7>
-      printf(stdout, "unlink ../iputdir failed\n");
-     1bc:	a1 80 68 00 00       	mov    0x6880,%eax
-     1c1:	c7 44 24 04 18 4a 00 	movl   $0x4a18,0x4(%esp)
-     1c8:	00 
-     1c9:	89 04 24             	mov    %eax,(%esp)
-     1cc:	e8 2a 44 00 00       	call   45fb <printf>
-      exit(EXIT_STATUS_DEFAULT);
-     1d1:	c7 04 24 02 00 00 00 	movl   $0x2,(%esp)
-     1d8:	e8 7f 42 00 00       	call   445c <exit>
-    }
-    exit(EXIT_STATUS_DEFAULT);
-     1dd:	c7 04 24 02 00 00 00 	movl   $0x2,(%esp)
-     1e4:	e8 73 42 00 00       	call   445c <exit>
-  }
-  wait(0);
-     1e9:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
-     1f0:	e8 6f 42 00 00       	call   4464 <wait>
-  printf(stdout, "exitiput test ok\n");
-     1f5:	a1 80 68 00 00       	mov    0x6880,%eax
-     1fa:	c7 44 24 04 82 4a 00 	movl   $0x4a82,0x4(%esp)
-     201:	00 
-     202:	89 04 24             	mov    %eax,(%esp)
-     205:	e8 f1 43 00 00       	call   45fb <printf>
-}
-     20a:	c9                   	leave  
-     20b:	c3                   	ret    
-
-0000020c <openiputtest>:
-//      for(i = 0; i < 10000; i++)
-//        yield();
-//    }
-void
-openiputtest(void)
-{
-     20c:	55                   	push   %ebp
-     20d:	89 e5                	mov    %esp,%ebp
-     20f:	83 ec 28             	sub    $0x28,%esp
-  int pid;
-
-  printf(stdout, "openiput test\n");
-     212:	a1 80 68 00 00       	mov    0x6880,%eax
-     217:	c7 44 24 04 94 4a 00 	movl   $0x4a94,0x4(%esp)
-     21e:	00 
-     21f:	89 04 24             	mov    %eax,(%esp)
-     222:	e8 d4 43 00 00       	call   45fb <printf>
-  if(mkdir("oidir") < 0){
-     227:	c7 04 24 a3 4a 00 00 	movl   $0x4aa3,(%esp)
-     22e:	e8 91 42 00 00       	call   44c4 <mkdir>
-     233:	85 c0                	test   %eax,%eax
-     235:	79 21                	jns    258 <openiputtest+0x4c>
-    printf(stdout, "mkdir oidir failed\n");
-     237:	a1 80 68 00 00       	mov    0x6880,%eax
-     23c:	c7 44 24 04 a9 4a 00 	movl   $0x4aa9,0x4(%esp)
-     243:	00 
-     244:	89 04 24             	mov    %eax,(%esp)
-     247:	e8 af 43 00 00       	call   45fb <printf>
-    exit(EXIT_STATUS_DEFAULT);
-     24c:	c7 04 24 02 00 00 00 	movl   $0x2,(%esp)
-     253:	e8 04 42 00 00       	call   445c <exit>
-  }
-  pid = fork();
-     258:	e8 f7 41 00 00       	call   4454 <fork>
-     25d:	89 45 f4             	mov    %eax,-0xc(%ebp)
-  if(pid < 0){
-     260:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
-     264:	79 21                	jns    287 <openiputtest+0x7b>
-    printf(stdout, "fork failed\n");
-     266:	a1 80 68 00 00       	mov    0x6880,%eax
-     26b:	c7 44 24 04 61 4a 00 	movl   $0x4a61,0x4(%esp)
-     272:	00 
-     273:	89 04 24             	mov    %eax,(%esp)
-     276:	e8 80 43 00 00       	call   45fb <printf>
-    exit(EXIT_STATUS_DEFAULT);
-     27b:	c7 04 24 02 00 00 00 	movl   $0x2,(%esp)
-     282:	e8 d5 41 00 00       	call   445c <exit>
-  }
-  if(pid == 0){
-     287:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
-     28b:	75 4a                	jne    2d7 <openiputtest+0xcb>
-    int fd = open("oidir", O_RDWR);
-     28d:	c7 44 24 04 02 00 00 	movl   $0x2,0x4(%esp)
-     294:	00 
-     295:	c7 04 24 a3 4a 00 00 	movl   $0x4aa3,(%esp)
-     29c:	e8 fb 41 00 00       	call   449c <open>
-     2a1:	89 45 f0             	mov    %eax,-0x10(%ebp)
-    if(fd >= 0){
-     2a4:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
-     2a8:	78 21                	js     2cb <openiputtest+0xbf>
-      printf(stdout, "open directory for write succeeded\n");
-     2aa:	a1 80 68 00 00       	mov    0x6880,%eax
-     2af:	c7 44 24 04 c0 4a 00 	movl   $0x4ac0,0x4(%esp)
-     2b6:	00 
-     2b7:	89 04 24             	mov    %eax,(%esp)
-     2ba:	e8 3c 43 00 00       	call   45fb <printf>
-      exit(EXIT_STATUS_DEFAULT);
-     2bf:	c7 04 24 02 00 00 00 	movl   $0x2,(%esp)
-     2c6:	e8 91 41 00 00       	call   445c <exit>
-    }
-    exit(EXIT_STATUS_DEFAULT);
-     2cb:	c7 04 24 02 00 00 00 	movl   $0x2,(%esp)
-     2d2:	e8 85 41 00 00       	call   445c <exit>
-  }
-  sleep(1);
-     2d7:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
-     2de:	e8 09 42 00 00       	call   44ec <sleep>
-  if(unlink("oidir") != 0){
-     2e3:	c7 04 24 a3 4a 00 00 	movl   $0x4aa3,(%esp)
-     2ea:	e8 bd 41 00 00       	call   44ac <unlink>
-     2ef:	85 c0                	test   %eax,%eax
-     2f1:	74 21                	je     314 <openiputtest+0x108>
-    printf(stdout, "unlink failed\n");
-     2f3:	a1 80 68 00 00       	mov    0x6880,%eax
-     2f8:	c7 44 24 04 e4 4a 00 	movl   $0x4ae4,0x4(%esp)
-     2ff:	00 
-     300:	89 04 24             	mov    %eax,(%esp)
-     303:	e8 f3 42 00 00       	call   45fb <printf>
-    exit(EXIT_STATUS_DEFAULT);
-     308:	c7 04 24 02 00 00 00 	movl   $0x2,(%esp)
-     30f:	e8 48 41 00 00       	call   445c <exit>
-  }
-  wait(0);
-     314:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
-     31b:	e8 44 41 00 00       	call   4464 <wait>
-  printf(stdout, "openiput test ok\n");
-     320:	a1 80 68 00 00       	mov    0x6880,%eax
-     325:	c7 44 24 04 f3 4a 00 	movl   $0x4af3,0x4(%esp)
-     32c:	00 
-     32d:	89 04 24             	mov    %eax,(%esp)
-     330:	e8 c6 42 00 00       	call   45fb <printf>
-}
-     335:	c9                   	leave  
-     336:	c3                   	ret    
-
-00000337 <opentest>:
-
-// simple file system tests
-
-void
-opentest(void)
-{
-     337:	55                   	push   %ebp
-     338:	89 e5                	mov    %esp,%ebp
-     33a:	83 ec 28             	sub    $0x28,%esp
-  int fd;
-
-  printf(stdout, "open test\n");
-     33d:	a1 80 68 00 00       	mov    0x6880,%eax
-     342:	c7 44 24 04 05 4b 00 	movl   $0x4b05,0x4(%esp)
-     349:	00 
-     34a:	89 04 24             	mov    %eax,(%esp)
-     34d:	e8 a9 42 00 00       	call   45fb <printf>
-  fd = open("echo", 0);
-     352:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
-     359:	00 
-     35a:	c7 04 24 c0 49 00 00 	movl   $0x49c0,(%esp)
-     361:	e8 36 41 00 00       	call   449c <open>
-     366:	89 45 f4             	mov    %eax,-0xc(%ebp)
-  if(fd < 0){
-     369:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
-     36d:	79 21                	jns    390 <opentest+0x59>
-    printf(stdout, "open echo failed!\n");
-     36f:	a1 80 68 00 00       	mov    0x6880,%eax
-     374:	c7 44 24 04 10 4b 00 	movl   $0x4b10,0x4(%esp)
-     37b:	00 
-     37c:	89 04 24             	mov    %eax,(%esp)
-     37f:	e8 77 42 00 00       	call   45fb <printf>
-    exit(EXIT_STATUS_DEFAULT);
-     384:	c7 04 24 02 00 00 00 	movl   $0x2,(%esp)
-     38b:	e8 cc 40 00 00       	call   445c <exit>
-  }
-  close(fd);
-     390:	8b 45 f4             	mov    -0xc(%ebp),%eax
-     393:	89 04 24             	mov    %eax,(%esp)
-     396:	e8 e9 40 00 00       	call   4484 <close>
-  fd = open("doesnotexist", 0);
-     39b:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
-     3a2:	00 
-     3a3:	c7 04 24 23 4b 00 00 	movl   $0x4b23,(%esp)
-     3aa:	e8 ed 40 00 00       	call   449c <open>
-     3af:	89 45 f4             	mov    %eax,-0xc(%ebp)
-  if(fd >= 0){
-     3b2:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
-     3b6:	78 21                	js     3d9 <opentest+0xa2>
-    printf(stdout, "open doesnotexist succeeded!\n");
-     3b8:	a1 80 68 00 00       	mov    0x6880,%eax
-     3bd:	c7 44 24 04 30 4b 00 	movl   $0x4b30,0x4(%esp)
-     3c4:	00 
-     3c5:	89 04 24             	mov    %eax,(%esp)
-     3c8:	e8 2e 42 00 00       	call   45fb <printf>
-    exit(EXIT_STATUS_DEFAULT);
-     3cd:	c7 04 24 02 00 00 00 	movl   $0x2,(%esp)
-     3d4:	e8 83 40 00 00       	call   445c <exit>
-  }
-  printf(stdout, "open test ok\n");
-     3d9:	a1 80 68 00 00       	mov    0x6880,%eax
-     3de:	c7 44 24 04 4e 4b 00 	movl   $0x4b4e,0x4(%esp)
-     3e5:	00 
-     3e6:	89 04 24             	mov    %eax,(%esp)
-     3e9:	e8 0d 42 00 00       	call   45fb <printf>
-}
-     3ee:	c9                   	leave  
-     3ef:	c3                   	ret    
-
-000003f0 <writetest>:
-
-void
-writetest(void)
-{
-     3f0:	55                   	push   %ebp
-     3f1:	89 e5                	mov    %esp,%ebp
-     3f3:	83 ec 28             	sub    $0x28,%esp
-  int fd;
-  int i;
-
-  printf(stdout, "small file test\n");
-     3f6:	a1 80 68 00 00       	mov    0x6880,%eax
-     3fb:	c7 44 24 04 5c 4b 00 	movl   $0x4b5c,0x4(%esp)
-     402:	00 
-     403:	89 04 24             	mov    %eax,(%esp)
-     406:	e8 f0 41 00 00       	call   45fb <printf>
-  fd = open("small", O_CREATE|O_RDWR);
-     40b:	c7 44 24 04 02 02 00 	movl   $0x202,0x4(%esp)
-     412:	00 
-     413:	c7 04 24 6d 4b 00 00 	movl   $0x4b6d,(%esp)
-     41a:	e8 7d 40 00 00       	call   449c <open>
-     41f:	89 45 f0             	mov    %eax,-0x10(%ebp)
-  if(fd >= 0){
-     422:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
-     426:	78 21                	js     449 <writetest+0x59>
-    printf(stdout, "creat small succeeded; ok\n");
-     428:	a1 80 68 00 00       	mov    0x6880,%eax
-     42d:	c7 44 24 04 73 4b 00 	movl   $0x4b73,0x4(%esp)
-     434:	00 
-     435:	89 04 24             	mov    %eax,(%esp)
-     438:	e8 be 41 00 00       	call   45fb <printf>
-  } else {
-    printf(stdout, "error: creat small failed!\n");
-    exit(EXIT_STATUS_DEFAULT);
-  }
-  for(i = 0; i < 100; i++){
-     43d:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
-     444:	e9 b5 00 00 00       	jmp    4fe <writetest+0x10e>
-  printf(stdout, "small file test\n");
-  fd = open("small", O_CREATE|O_RDWR);
-  if(fd >= 0){
-    printf(stdout, "creat small succeeded; ok\n");
-  } else {
-    printf(stdout, "error: creat small failed!\n");
-     449:	a1 80 68 00 00       	mov    0x6880,%eax
-     44e:	c7 44 24 04 8e 4b 00 	movl   $0x4b8e,0x4(%esp)
-     455:	00 
-     456:	89 04 24             	mov    %eax,(%esp)
-     459:	e8 9d 41 00 00       	call   45fb <printf>
-    exit(EXIT_STATUS_DEFAULT);
-     45e:	c7 04 24 02 00 00 00 	movl   $0x2,(%esp)
-     465:	e8 f2 3f 00 00       	call   445c <exit>
-  }
-  for(i = 0; i < 100; i++){
-    if(write(fd, "aaaaaaaaaa", 10) != 10){
-     46a:	c7 44 24 08 0a 00 00 	movl   $0xa,0x8(%esp)
-     471:	00 
-     472:	c7 44 24 04 aa 4b 00 	movl   $0x4baa,0x4(%esp)
-     479:	00 
-     47a:	8b 45 f0             	mov    -0x10(%ebp),%eax
-     47d:	89 04 24             	mov    %eax,(%esp)
-     480:	e8 f7 3f 00 00       	call   447c <write>
-     485:	83 f8 0a             	cmp    $0xa,%eax
-     488:	74 28                	je     4b2 <writetest+0xc2>
-      printf(stdout, "error: write aa %d new file failed\n", i);
-     48a:	a1 80 68 00 00       	mov    0x6880,%eax
-     48f:	8b 55 f4             	mov    -0xc(%ebp),%edx
-     492:	89 54 24 08          	mov    %edx,0x8(%esp)
-     496:	c7 44 24 04 b8 4b 00 	movl   $0x4bb8,0x4(%esp)
-     49d:	00 
-     49e:	89 04 24             	mov    %eax,(%esp)
-     4a1:	e8 55 41 00 00       	call   45fb <printf>
-      exit(EXIT_STATUS_DEFAULT);
-     4a6:	c7 04 24 02 00 00 00 	movl   $0x2,(%esp)
-     4ad:	e8 aa 3f 00 00       	call   445c <exit>
-    }
-    if(write(fd, "bbbbbbbbbb", 10) != 10){
-     4b2:	c7 44 24 08 0a 00 00 	movl   $0xa,0x8(%esp)
-     4b9:	00 
-     4ba:	c7 44 24 04 dc 4b 00 	movl   $0x4bdc,0x4(%esp)
-     4c1:	00 
-     4c2:	8b 45 f0             	mov    -0x10(%ebp),%eax
-     4c5:	89 04 24             	mov    %eax,(%esp)
-     4c8:	e8 af 3f 00 00       	call   447c <write>
-     4cd:	83 f8 0a             	cmp    $0xa,%eax
-     4d0:	74 28                	je     4fa <writetest+0x10a>
-      printf(stdout, "error: write bb %d new file failed\n", i);
-     4d2:	a1 80 68 00 00       	mov    0x6880,%eax
-     4d7:	8b 55 f4             	mov    -0xc(%ebp),%edx
-     4da:	89 54 24 08          	mov    %edx,0x8(%esp)
-     4de:	c7 44 24 04 e8 4b 00 	movl   $0x4be8,0x4(%esp)
-     4e5:	00 
-     4e6:	89 04 24             	mov    %eax,(%esp)
-     4e9:	e8 0d 41 00 00       	call   45fb <printf>
-      exit(EXIT_STATUS_DEFAULT);
-     4ee:	c7 04 24 02 00 00 00 	movl   $0x2,(%esp)
-     4f5:	e8 62 3f 00 00       	call   445c <exit>
-    printf(stdout, "creat small succeeded; ok\n");
-  } else {
-    printf(stdout, "error: creat small failed!\n");
-    exit(EXIT_STATUS_DEFAULT);
-  }
-  for(i = 0; i < 100; i++){
-     4fa:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
-     4fe:	83 7d f4 63          	cmpl   $0x63,-0xc(%ebp)
-     502:	0f 8e 62 ff ff ff    	jle    46a <writetest+0x7a>
-    if(write(fd, "bbbbbbbbbb", 10) != 10){
-      printf(stdout, "error: write bb %d new file failed\n", i);
-      exit(EXIT_STATUS_DEFAULT);
-    }
-  }
-  printf(stdout, "writes ok\n");
-     508:	a1 80 68 00 00       	mov    0x6880,%eax
-     50d:	c7 44 24 04 0c 4c 00 	movl   $0x4c0c,0x4(%esp)
-     514:	00 
-     515:	89 04 24             	mov    %eax,(%esp)
-     518:	e8 de 40 00 00       	call   45fb <printf>
-  close(fd);
-     51d:	8b 45 f0             	mov    -0x10(%ebp),%eax
-     520:	89 04 24             	mov    %eax,(%esp)
-     523:	e8 5c 3f 00 00       	call   4484 <close>
-  fd = open("small", O_RDONLY);
-     528:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
-     52f:	00 
-     530:	c7 04 24 6d 4b 00 00 	movl   $0x4b6d,(%esp)
-     537:	e8 60 3f 00 00       	call   449c <open>
-     53c:	89 45 f0             	mov    %eax,-0x10(%ebp)
-  if(fd >= 0){
-     53f:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
-     543:	78 3e                	js     583 <writetest+0x193>
-    printf(stdout, "open small succeeded ok\n");
-     545:	a1 80 68 00 00       	mov    0x6880,%eax
-     54a:	c7 44 24 04 17 4c 00 	movl   $0x4c17,0x4(%esp)
-     551:	00 
-     552:	89 04 24             	mov    %eax,(%esp)
-     555:	e8 a1 40 00 00       	call   45fb <printf>
-  } else {
-    printf(stdout, "error: open small failed!\n");
-    exit(EXIT_STATUS_DEFAULT);
-  }
-  i = read(fd, buf, 2000);
-     55a:	c7 44 24 08 d0 07 00 	movl   $0x7d0,0x8(%esp)
-     561:	00 
-     562:	c7 44 24 04 60 90 00 	movl   $0x9060,0x4(%esp)
-     569:	00 
-     56a:	8b 45 f0             	mov    -0x10(%ebp),%eax
-     56d:	89 04 24             	mov    %eax,(%esp)
-     570:	e8 ff 3e 00 00       	call   4474 <read>
-     575:	89 45 f4             	mov    %eax,-0xc(%ebp)
-  if(i == 2000){
-     578:	81 7d f4 d0 07 00 00 	cmpl   $0x7d0,-0xc(%ebp)
-     57f:	74 23                	je     5a4 <writetest+0x1b4>
-     581:	eb 53                	jmp    5d6 <writetest+0x1e6>
-  close(fd);
-  fd = open("small", O_RDONLY);
-  if(fd >= 0){
-    printf(stdout, "open small succeeded ok\n");
-  } else {
-    printf(stdout, "error: open small failed!\n");
-     583:	a1 80 68 00 00       	mov    0x6880,%eax
-     588:	c7 44 24 04 30 4c 00 	movl   $0x4c30,0x4(%esp)
-     58f:	00 
-     590:	89 04 24             	mov    %eax,(%esp)
-     593:	e8 63 40 00 00       	call   45fb <printf>
-    exit(EXIT_STATUS_DEFAULT);
-     598:	c7 04 24 02 00 00 00 	movl   $0x2,(%esp)
-     59f:	e8 b8 3e 00 00       	call   445c <exit>
-  }
-  i = read(fd, buf, 2000);
-  if(i == 2000){
-    printf(stdout, "read succeeded ok\n");
-     5a4:	a1 80 68 00 00       	mov    0x6880,%eax
-     5a9:	c7 44 24 04 4b 4c 00 	movl   $0x4c4b,0x4(%esp)
-     5b0:	00 
-     5b1:	89 04 24             	mov    %eax,(%esp)
-     5b4:	e8 42 40 00 00       	call   45fb <printf>
-  } else {
-    printf(stdout, "read failed\n");
-    exit(EXIT_STATUS_DEFAULT);
-  }
-  close(fd);
-     5b9:	8b 45 f0             	mov    -0x10(%ebp),%eax
-     5bc:	89 04 24             	mov    %eax,(%esp)
-     5bf:	e8 c0 3e 00 00       	call   4484 <close>
-
-  if(unlink("small") < 0){
-     5c4:	c7 04 24 6d 4b 00 00 	movl   $0x4b6d,(%esp)
-     5cb:	e8 dc 3e 00 00       	call   44ac <unlink>
-     5d0:	85 c0                	test   %eax,%eax
-     5d2:	78 23                	js     5f7 <writetest+0x207>
-     5d4:	eb 42                	jmp    618 <writetest+0x228>
-  }
-  i = read(fd, buf, 2000);
-  if(i == 2000){
-    printf(stdout, "read succeeded ok\n");
-  } else {
-    printf(stdout, "read failed\n");
-     5d6:	a1 80 68 00 00       	mov    0x6880,%eax
-     5db:	c7 44 24 04 5e 4c 00 	movl   $0x4c5e,0x4(%esp)
-     5e2:	00 
-     5e3:	89 04 24             	mov    %eax,(%esp)
-     5e6:	e8 10 40 00 00       	call   45fb <printf>
-    exit(EXIT_STATUS_DEFAULT);
-     5eb:	c7 04 24 02 00 00 00 	movl   $0x2,(%esp)
-     5f2:	e8 65 3e 00 00       	call   445c <exit>
-  }
-  close(fd);
-
-  if(unlink("small") < 0){
-    printf(stdout, "unlink small failed\n");
-     5f7:	a1 80 68 00 00       	mov    0x6880,%eax
-     5fc:	c7 44 24 04 6b 4c 00 	movl   $0x4c6b,0x4(%esp)
-     603:	00 
-     604:	89 04 24             	mov    %eax,(%esp)
-     607:	e8 ef 3f 00 00       	call   45fb <printf>
-    exit(EXIT_STATUS_DEFAULT);
-     60c:	c7 04 24 02 00 00 00 	movl   $0x2,(%esp)
-     613:	e8 44 3e 00 00       	call   445c <exit>
-  }
-  printf(stdout, "small file test ok\n");
-     618:	a1 80 68 00 00       	mov    0x6880,%eax
-     61d:	c7 44 24 04 80 4c 00 	movl   $0x4c80,0x4(%esp)
-     624:	00 
-     625:	89 04 24             	mov    %eax,(%esp)
-     628:	e8 ce 3f 00 00       	call   45fb <printf>
-}
-     62d:	c9                   	leave  
-     62e:	c3                   	ret    
-
-0000062f <writetest1>:
-
-void
-writetest1(void)
-{
-     62f:	55                   	push   %ebp
-     630:	89 e5                	mov    %esp,%ebp
-     632:	83 ec 28             	sub    $0x28,%esp
-  int i, fd, n;
-
-  printf(stdout, "big files test\n");
-     635:	a1 80 68 00 00       	mov    0x6880,%eax
-     63a:	c7 44 24 04 94 4c 00 	movl   $0x4c94,0x4(%esp)
-     641:	00 
-     642:	89 04 24             	mov    %eax,(%esp)
-     645:	e8 b1 3f 00 00       	call   45fb <printf>
-
-  fd = open("big", O_CREATE|O_RDWR);
-     64a:	c7 44 24 04 02 02 00 	movl   $0x202,0x4(%esp)
-     651:	00 
-     652:	c7 04 24 a4 4c 00 00 	movl   $0x4ca4,(%esp)
-     659:	e8 3e 3e 00 00       	call   449c <open>
-     65e:	89 45 ec             	mov    %eax,-0x14(%ebp)
-  if(fd < 0){
-     661:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
-     665:	79 21                	jns    688 <writetest1+0x59>
-    printf(stdout, "error: creat big failed!\n");
-     667:	a1 80 68 00 00       	mov    0x6880,%eax
-     66c:	c7 44 24 04 a8 4c 00 	movl   $0x4ca8,0x4(%esp)
-     673:	00 
-     674:	89 04 24             	mov    %eax,(%esp)
-     677:	e8 7f 3f 00 00       	call   45fb <printf>
-    exit(EXIT_STATUS_DEFAULT);
-     67c:	c7 04 24 02 00 00 00 	movl   $0x2,(%esp)
-     683:	e8 d4 3d 00 00       	call   445c <exit>
-  }
-
-  for(i = 0; i < MAXFILE; i++){
-     688:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
-     68f:	eb 58                	jmp    6e9 <writetest1+0xba>
-    ((int*)buf)[0] = i;
-     691:	b8 60 90 00 00       	mov    $0x9060,%eax
-     696:	8b 55 f4             	mov    -0xc(%ebp),%edx
-     699:	89 10                	mov    %edx,(%eax)
-    if(write(fd, buf, 512) != 512){
-     69b:	c7 44 24 08 00 02 00 	movl   $0x200,0x8(%esp)
-     6a2:	00 
-     6a3:	c7 44 24 04 60 90 00 	movl   $0x9060,0x4(%esp)
-     6aa:	00 
-     6ab:	8b 45 ec             	mov    -0x14(%ebp),%eax
-     6ae:	89 04 24             	mov    %eax,(%esp)
-     6b1:	e8 c6 3d 00 00       	call   447c <write>
-     6b6:	3d 00 02 00 00       	cmp    $0x200,%eax
-     6bb:	74 28                	je     6e5 <writetest1+0xb6>
-      printf(stdout, "error: write big file failed\n", i);
-     6bd:	a1 80 68 00 00       	mov    0x6880,%eax
-     6c2:	8b 55 f4             	mov    -0xc(%ebp),%edx
-     6c5:	89 54 24 08          	mov    %edx,0x8(%esp)
-     6c9:	c7 44 24 04 c2 4c 00 	movl   $0x4cc2,0x4(%esp)
-     6d0:	00 
-     6d1:	89 04 24             	mov    %eax,(%esp)
-     6d4:	e8 22 3f 00 00       	call   45fb <printf>
-      exit(EXIT_STATUS_DEFAULT);
-     6d9:	c7 04 24 02 00 00 00 	movl   $0x2,(%esp)
-     6e0:	e8 77 3d 00 00       	call   445c <exit>
-  if(fd < 0){
-    printf(stdout, "error: creat big failed!\n");
-    exit(EXIT_STATUS_DEFAULT);
-  }
-
-  for(i = 0; i < MAXFILE; i++){
-     6e5:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
-     6e9:	8b 45 f4             	mov    -0xc(%ebp),%eax
-     6ec:	3d 8b 00 00 00       	cmp    $0x8b,%eax
-     6f1:	76 9e                	jbe    691 <writetest1+0x62>
-      printf(stdout, "error: write big file failed\n", i);
-      exit(EXIT_STATUS_DEFAULT);
-    }
-  }
-
-  close(fd);
-     6f3:	8b 45 ec             	mov    -0x14(%ebp),%eax
-     6f6:	89 04 24             	mov    %eax,(%esp)
-     6f9:	e8 86 3d 00 00       	call   4484 <close>
-
-  fd = open("big", O_RDONLY);
-     6fe:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
-     705:	00 
-     706:	c7 04 24 a4 4c 00 00 	movl   $0x4ca4,(%esp)
-     70d:	e8 8a 3d 00 00       	call   449c <open>
-     712:	89 45 ec             	mov    %eax,-0x14(%ebp)
-  if(fd < 0){
-     715:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
-     719:	79 21                	jns    73c <writetest1+0x10d>
-    printf(stdout, "error: open big failed!\n");
-     71b:	a1 80 68 00 00       	mov    0x6880,%eax
-     720:	c7 44 24 04 e0 4c 00 	movl   $0x4ce0,0x4(%esp)
-     727:	00 
-     728:	89 04 24             	mov    %eax,(%esp)
-     72b:	e8 cb 3e 00 00       	call   45fb <printf>
-    exit(EXIT_STATUS_DEFAULT);
-     730:	c7 04 24 02 00 00 00 	movl   $0x2,(%esp)
-     737:	e8 20 3d 00 00       	call   445c <exit>
-  }
-
-  n = 0;
-     73c:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
-  for(;;){
-    i = read(fd, buf, 512);
-     743:	c7 44 24 08 00 02 00 	movl   $0x200,0x8(%esp)
-     74a:	00 
-     74b:	c7 44 24 04 60 90 00 	movl   $0x9060,0x4(%esp)
-     752:	00 
-     753:	8b 45 ec             	mov    -0x14(%ebp),%eax
-     756:	89 04 24             	mov    %eax,(%esp)
-     759:	e8 16 3d 00 00       	call   4474 <read>
-     75e:	89 45 f4             	mov    %eax,-0xc(%ebp)
-    if(i == 0){
-     761:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
-     765:	75 35                	jne    79c <writetest1+0x16d>
-      if(n == MAXFILE - 1){
-     767:	81 7d f0 8b 00 00 00 	cmpl   $0x8b,-0x10(%ebp)
-     76e:	0f 85 a1 00 00 00    	jne    815 <writetest1+0x1e6>
-        printf(stdout, "read only %d blocks from big", n);
-     774:	a1 80 68 00 00       	mov    0x6880,%eax
-     779:	8b 55 f0             	mov    -0x10(%ebp),%edx
-     77c:	89 54 24 08          	mov    %edx,0x8(%esp)
-     780:	c7 44 24 04 f9 4c 00 	movl   $0x4cf9,0x4(%esp)
-     787:	00 
-     788:	89 04 24             	mov    %eax,(%esp)
-     78b:	e8 6b 3e 00 00       	call   45fb <printf>
-        exit(EXIT_STATUS_DEFAULT);
-     790:	c7 04 24 02 00 00 00 	movl   $0x2,(%esp)
-     797:	e8 c0 3c 00 00       	call   445c <exit>
-      }
-      break;
-    } else if(i != 512){
-     79c:	81 7d f4 00 02 00 00 	cmpl   $0x200,-0xc(%ebp)
-     7a3:	74 28                	je     7cd <writetest1+0x19e>
-      printf(stdout, "read failed %d\n", i);
-     7a5:	a1 80 68 00 00       	mov    0x6880,%eax
-     7aa:	8b 55 f4             	mov    -0xc(%ebp),%edx
-     7ad:	89 54 24 08          	mov    %edx,0x8(%esp)
-     7b1:	c7 44 24 04 16 4d 00 	movl   $0x4d16,0x4(%esp)
-     7b8:	00 
-     7b9:	89 04 24             	mov    %eax,(%esp)
-     7bc:	e8 3a 3e 00 00       	call   45fb <printf>
-      exit(EXIT_STATUS_DEFAULT);
-     7c1:	c7 04 24 02 00 00 00 	movl   $0x2,(%esp)
-     7c8:	e8 8f 3c 00 00       	call   445c <exit>
-    }
-    if(((int*)buf)[0] != n){
-     7cd:	b8 60 90 00 00       	mov    $0x9060,%eax
-     7d2:	8b 00                	mov    (%eax),%eax
-     7d4:	3b 45 f0             	cmp    -0x10(%ebp),%eax
-     7d7:	74 33                	je     80c <writetest1+0x1dd>
-      printf(stdout, "read content of block %d is %d\n",
-             n, ((int*)buf)[0]);
-     7d9:	b8 60 90 00 00       	mov    $0x9060,%eax
-    } else if(i != 512){
-      printf(stdout, "read failed %d\n", i);
-      exit(EXIT_STATUS_DEFAULT);
-    }
-    if(((int*)buf)[0] != n){
-      printf(stdout, "read content of block %d is %d\n",
-     7de:	8b 10                	mov    (%eax),%edx
-     7e0:	a1 80 68 00 00       	mov    0x6880,%eax
-     7e5:	89 54 24 0c          	mov    %edx,0xc(%esp)
-     7e9:	8b 55 f0             	mov    -0x10(%ebp),%edx
-     7ec:	89 54 24 08          	mov    %edx,0x8(%esp)
-     7f0:	c7 44 24 04 28 4d 00 	movl   $0x4d28,0x4(%esp)
-     7f7:	00 
-     7f8:	89 04 24             	mov    %eax,(%esp)
-     7fb:	e8 fb 3d 00 00       	call   45fb <printf>
-             n, ((int*)buf)[0]);
-      exit(EXIT_STATUS_DEFAULT);
-     800:	c7 04 24 02 00 00 00 	movl   $0x2,(%esp)
-     807:	e8 50 3c 00 00       	call   445c <exit>
-    }
-    n++;
-     80c:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)
-  }
-     810:	e9 2e ff ff ff       	jmp    743 <writetest1+0x114>
-    if(i == 0){
-      if(n == MAXFILE - 1){
-        printf(stdout, "read only %d blocks from big", n);
-        exit(EXIT_STATUS_DEFAULT);
-      }
-      break;
-     815:	90                   	nop
-             n, ((int*)buf)[0]);
-      exit(EXIT_STATUS_DEFAULT);
-    }
-    n++;
-  }
-  close(fd);
-     816:	8b 45 ec             	mov    -0x14(%ebp),%eax
-     819:	89 04 24             	mov    %eax,(%esp)
-     81c:	e8 63 3c 00 00       	call   4484 <close>
-  if(unlink("big") < 0){
-     821:	c7 04 24 a4 4c 00 00 	movl   $0x4ca4,(%esp)
-     828:	e8 7f 3c 00 00       	call   44ac <unlink>
-     82d:	85 c0                	test   %eax,%eax
-     82f:	79 21                	jns    852 <writetest1+0x223>
-    printf(stdout, "unlink big failed\n");
-     831:	a1 80 68 00 00       	mov    0x6880,%eax
-     836:	c7 44 24 04 48 4d 00 	movl   $0x4d48,0x4(%esp)
-     83d:	00 
-     83e:	89 04 24             	mov    %eax,(%esp)
-     841:	e8 b5 3d 00 00       	call   45fb <printf>
-    exit(EXIT_STATUS_DEFAULT);
-     846:	c7 04 24 02 00 00 00 	movl   $0x2,(%esp)
-     84d:	e8 0a 3c 00 00       	call   445c <exit>
-  }
-  printf(stdout, "big files ok\n");
-     852:	a1 80 68 00 00       	mov    0x6880,%eax
-     857:	c7 44 24 04 5b 4d 00 	movl   $0x4d5b,0x4(%esp)
-     85e:	00 
-     85f:	89 04 24             	mov    %eax,(%esp)
-     862:	e8 94 3d 00 00       	call   45fb <printf>
-}
-     867:	c9                   	leave  
-     868:	c3                   	ret    
-
-00000869 <createtest>:
-
-void
-createtest(void)
-{
-     869:	55                   	push   %ebp
-     86a:	89 e5                	mov    %esp,%ebp
-     86c:	83 ec 28             	sub    $0x28,%esp
-  int i, fd;
-
-  printf(stdout, "many creates, followed by unlink test\n");
-     86f:	a1 80 68 00 00       	mov    0x6880,%eax
-     874:	c7 44 24 04 6c 4d 00 	movl   $0x4d6c,0x4(%esp)
-     87b:	00 
-     87c:	89 04 24             	mov    %eax,(%esp)
-     87f:	e8 77 3d 00 00       	call   45fb <printf>
-
-  name[0] = 'a';
-     884:	c6 05 60 b0 00 00 61 	movb   $0x61,0xb060
-  name[2] = '\0';
-     88b:	c6 05 62 b0 00 00 00 	movb   $0x0,0xb062
-  for(i = 0; i < 52; i++){
-     892:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
-     899:	eb 31                	jmp    8cc <createtest+0x63>
-    name[1] = '0' + i;
-     89b:	8b 45 f4             	mov    -0xc(%ebp),%eax
-     89e:	83 c0 30             	add    $0x30,%eax
-     8a1:	a2 61 b0 00 00       	mov    %al,0xb061
-    fd = open(name, O_CREATE|O_RDWR);
-     8a6:	c7 44 24 04 02 02 00 	movl   $0x202,0x4(%esp)
-     8ad:	00 
-     8ae:	c7 04 24 60 b0 00 00 	movl   $0xb060,(%esp)
-     8b5:	e8 e2 3b 00 00       	call   449c <open>
-     8ba:	89 45 f0             	mov    %eax,-0x10(%ebp)
-    close(fd);
-     8bd:	8b 45 f0             	mov    -0x10(%ebp),%eax
-     8c0:	89 04 24             	mov    %eax,(%esp)
-     8c3:	e8 bc 3b 00 00       	call   4484 <close>
-
-  printf(stdout, "many creates, followed by unlink test\n");
-
-  name[0] = 'a';
-  name[2] = '\0';
-  for(i = 0; i < 52; i++){
-     8c8:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
-     8cc:	83 7d f4 33          	cmpl   $0x33,-0xc(%ebp)
-     8d0:	7e c9                	jle    89b <createtest+0x32>
-    name[1] = '0' + i;
-    fd = open(name, O_CREATE|O_RDWR);
-    close(fd);
-  }
-  name[0] = 'a';
-     8d2:	c6 05 60 b0 00 00 61 	movb   $0x61,0xb060
-  name[2] = '\0';
-     8d9:	c6 05 62 b0 00 00 00 	movb   $0x0,0xb062
-  for(i = 0; i < 52; i++){
-     8e0:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
-     8e7:	eb 1b                	jmp    904 <createtest+0x9b>
-    name[1] = '0' + i;
-     8e9:	8b 45 f4             	mov    -0xc(%ebp),%eax
-     8ec:	83 c0 30             	add    $0x30,%eax
-     8ef:	a2 61 b0 00 00       	mov    %al,0xb061
-    unlink(name);
-     8f4:	c7 04 24 60 b0 00 00 	movl   $0xb060,(%esp)
-     8fb:	e8 ac 3b 00 00       	call   44ac <unlink>
-    fd = open(name, O_CREATE|O_RDWR);
-    close(fd);
-  }
-  name[0] = 'a';
-  name[2] = '\0';
-  for(i = 0; i < 52; i++){
-     900:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
-     904:	83 7d f4 33          	cmpl   $0x33,-0xc(%ebp)
-     908:	7e df                	jle    8e9 <createtest+0x80>
-    name[1] = '0' + i;
-    unlink(name);
-  }
-  printf(stdout, "many creates, followed by unlink; ok\n");
-     90a:	a1 80 68 00 00       	mov    0x6880,%eax
-     90f:	c7 44 24 04 94 4d 00 	movl   $0x4d94,0x4(%esp)
-     916:	00 
-     917:	89 04 24             	mov    %eax,(%esp)
-     91a:	e8 dc 3c 00 00       	call   45fb <printf>
-}
-     91f:	c9                   	leave  
-     920:	c3                   	ret    
-
-00000921 <dirtest>:
-
-void dirtest(void)
-{
-     921:	55                   	push   %ebp
-     922:	89 e5                	mov    %esp,%ebp
-     924:	83 ec 18             	sub    $0x18,%esp
-  printf(stdout, "mkdir test\n");
-     927:	a1 80 68 00 00       	mov    0x6880,%eax
-     92c:	c7 44 24 04 ba 4d 00 	movl   $0x4dba,0x4(%esp)
-     933:	00 
-     934:	89 04 24             	mov    %eax,(%esp)
-     937:	e8 bf 3c 00 00       	call   45fb <printf>
-
-  if(mkdir("dir0") < 0){
-     93c:	c7 04 24 c6 4d 00 00 	movl   $0x4dc6,(%esp)
-     943:	e8 7c 3b 00 00       	call   44c4 <mkdir>
-     948:	85 c0                	test   %eax,%eax
-     94a:	79 21                	jns    96d <dirtest+0x4c>
-    printf(stdout, "mkdir failed\n");
-     94c:	a1 80 68 00 00       	mov    0x6880,%eax
-     951:	c7 44 24 04 e9 49 00 	movl   $0x49e9,0x4(%esp)
-     958:	00 
-     959:	89 04 24             	mov    %eax,(%esp)
-     95c:	e8 9a 3c 00 00       	call   45fb <printf>
-    exit(EXIT_STATUS_DEFAULT);
-     961:	c7 04 24 02 00 00 00 	movl   $0x2,(%esp)
-     968:	e8 ef 3a 00 00       	call   445c <exit>
-  }
-
-  if(chdir("dir0") < 0){
-     96d:	c7 04 24 c6 4d 00 00 	movl   $0x4dc6,(%esp)
-     974:	e8 53 3b 00 00       	call   44cc <chdir>
-     979:	85 c0                	test   %eax,%eax
-     97b:	79 21                	jns    99e <dirtest+0x7d>
-    printf(stdout, "chdir dir0 failed\n");
-     97d:	a1 80 68 00 00       	mov    0x6880,%eax
-     982:	c7 44 24 04 cb 4d 00 	movl   $0x4dcb,0x4(%esp)
-     989:	00 
-     98a:	89 04 24             	mov    %eax,(%esp)
-     98d:	e8 69 3c 00 00       	call   45fb <printf>
-    exit(EXIT_STATUS_DEFAULT);
-     992:	c7 04 24 02 00 00 00 	movl   $0x2,(%esp)
-     999:	e8 be 3a 00 00       	call   445c <exit>
-  }
-
-  if(chdir("..") < 0){
-     99e:	c7 04 24 de 4d 00 00 	movl   $0x4dde,(%esp)
-     9a5:	e8 22 3b 00 00       	call   44cc <chdir>
-     9aa:	85 c0                	test   %eax,%eax
-     9ac:	79 21                	jns    9cf <dirtest+0xae>
-    printf(stdout, "chdir .. failed\n");
-     9ae:	a1 80 68 00 00       	mov    0x6880,%eax
-     9b3:	c7 44 24 04 e1 4d 00 	movl   $0x4de1,0x4(%esp)
-     9ba:	00 
-     9bb:	89 04 24             	mov    %eax,(%esp)
-     9be:	e8 38 3c 00 00       	call   45fb <printf>
-    exit(EXIT_STATUS_DEFAULT);
-     9c3:	c7 04 24 02 00 00 00 	movl   $0x2,(%esp)
-     9ca:	e8 8d 3a 00 00       	call   445c <exit>
-  }
-
-  if(unlink("dir0") < 0){
-     9cf:	c7 04 24 c6 4d 00 00 	movl   $0x4dc6,(%esp)
-     9d6:	e8 d1 3a 00 00       	call   44ac <unlink>
-     9db:	85 c0                	test   %eax,%eax
-     9dd:	79 21                	jns    a00 <dirtest+0xdf>
-    printf(stdout, "unlink dir0 failed\n");
-     9df:	a1 80 68 00 00       	mov    0x6880,%eax
-     9e4:	c7 44 24 04 f2 4d 00 	movl   $0x4df2,0x4(%esp)
-     9eb:	00 
-     9ec:	89 04 24             	mov    %eax,(%esp)
-     9ef:	e8 07 3c 00 00       	call   45fb <printf>
-    exit(EXIT_STATUS_DEFAULT);
-     9f4:	c7 04 24 02 00 00 00 	movl   $0x2,(%esp)
-     9fb:	e8 5c 3a 00 00       	call   445c <exit>
-  }
-  printf(stdout, "mkdir test ok\n");
-     a00:	a1 80 68 00 00       	mov    0x6880,%eax
-     a05:	c7 44 24 04 06 4e 00 	movl   $0x4e06,0x4(%esp)
-     a0c:	00 
-     a0d:	89 04 24             	mov    %eax,(%esp)
-     a10:	e8 e6 3b 00 00       	call   45fb <printf>
-}
-     a15:	c9                   	leave  
-     a16:	c3                   	ret    
-
-00000a17 <exectest>:
-
-void
-exectest(void)
-{
-     a17:	55                   	push   %ebp
-     a18:	89 e5                	mov    %esp,%ebp
-     a1a:	83 ec 18             	sub    $0x18,%esp
-  printf(stdout, "exec test\n");
-     a1d:	a1 80 68 00 00       	mov    0x6880,%eax
-     a22:	c7 44 24 04 15 4e 00 	movl   $0x4e15,0x4(%esp)
-     a29:	00 
-     a2a:	89 04 24             	mov    %eax,(%esp)
-     a2d:	e8 c9 3b 00 00       	call   45fb <printf>
-  if(exec("echo", echoargv) < 0){
-     a32:	c7 44 24 04 6c 68 00 	movl   $0x686c,0x4(%esp)
-     a39:	00 
-     a3a:	c7 04 24 c0 49 00 00 	movl   $0x49c0,(%esp)
-     a41:	e8 4e 3a 00 00       	call   4494 <exec>
-     a46:	85 c0                	test   %eax,%eax
-     a48:	79 21                	jns    a6b <exectest+0x54>
-    printf(stdout, "exec echo failed\n");
-     a4a:	a1 80 68 00 00       	mov    0x6880,%eax
-     a4f:	c7 44 24 04 20 4e 00 	movl   $0x4e20,0x4(%esp)
-     a56:	00 
-     a57:	89 04 24             	mov    %eax,(%esp)
-     a5a:	e8 9c 3b 00 00       	call   45fb <printf>
-    exit(EXIT_STATUS_DEFAULT);
-     a5f:	c7 04 24 02 00 00 00 	movl   $0x2,(%esp)
-     a66:	e8 f1 39 00 00       	call   445c <exit>
-  }
-}
-     a6b:	c9                   	leave  
-     a6c:	c3                   	ret    
-
-00000a6d <pipe1>:
-
-// simple fork and pipe read/write
-
-void
-pipe1(void)
-{
-     a6d:	55                   	push   %ebp
-     a6e:	89 e5                	mov    %esp,%ebp
-     a70:	83 ec 38             	sub    $0x38,%esp
-  int fds[2], pid;
-  int seq, i, n, cc, total;
-
-  if(pipe(fds) != 0){
-     a73:	8d 45 d8             	lea    -0x28(%ebp),%eax
-     a76:	89 04 24             	mov    %eax,(%esp)
-     a79:	e8 ee 39 00 00       	call   446c <pipe>
-     a7e:	85 c0                	test   %eax,%eax
-     a80:	74 20                	je     aa2 <pipe1+0x35>
-    printf(1, "pipe() failed\n");
-     a82:	c7 44 24 04 32 4e 00 	movl   $0x4e32,0x4(%esp)
-     a89:	00 
-     a8a:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
-     a91:	e8 65 3b 00 00       	call   45fb <printf>
-    exit(EXIT_STATUS_DEFAULT);
-     a96:	c7 04 24 02 00 00 00 	movl   $0x2,(%esp)
-     a9d:	e8 ba 39 00 00       	call   445c <exit>
-  }
-  pid = fork();
-     aa2:	e8 ad 39 00 00       	call   4454 <fork>
-     aa7:	89 45 e0             	mov    %eax,-0x20(%ebp)
-  seq = 0;
-     aaa:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
-  if(pid == 0){
-     ab1:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
-     ab5:	0f 85 94 00 00 00    	jne    b4f <pipe1+0xe2>
-    close(fds[0]);
-     abb:	8b 45 d8             	mov    -0x28(%ebp),%eax
-     abe:	89 04 24             	mov    %eax,(%esp)
-     ac1:	e8 be 39 00 00       	call   4484 <close>
-    for(n = 0; n < 5; n++){
-     ac6:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
-     acd:	eb 6e                	jmp    b3d <pipe1+0xd0>
-      for(i = 0; i < 1033; i++)
-     acf:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
-     ad6:	eb 16                	jmp    aee <pipe1+0x81>
-        buf[i] = seq++;
-     ad8:	8b 45 f4             	mov    -0xc(%ebp),%eax
-     adb:	8b 55 f0             	mov    -0x10(%ebp),%edx
-     ade:	81 c2 60 90 00 00    	add    $0x9060,%edx
-     ae4:	88 02                	mov    %al,(%edx)
-     ae6:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
-  pid = fork();
-  seq = 0;
-  if(pid == 0){
-    close(fds[0]);
-    for(n = 0; n < 5; n++){
-      for(i = 0; i < 1033; i++)
-     aea:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)
-     aee:	81 7d f0 08 04 00 00 	cmpl   $0x408,-0x10(%ebp)
-     af5:	7e e1                	jle    ad8 <pipe1+0x6b>
-        buf[i] = seq++;
-      if(write(fds[1], buf, 1033) != 1033){
-     af7:	8b 45 dc             	mov    -0x24(%ebp),%eax
-     afa:	c7 44 24 08 09 04 00 	movl   $0x409,0x8(%esp)
-     b01:	00 
-     b02:	c7 44 24 04 60 90 00 	movl   $0x9060,0x4(%esp)
-     b09:	00 
-     b0a:	89 04 24             	mov    %eax,(%esp)
-     b0d:	e8 6a 39 00 00       	call   447c <write>
-     b12:	3d 09 04 00 00       	cmp    $0x409,%eax
-     b17:	74 20                	je     b39 <pipe1+0xcc>
-        printf(1, "pipe1 oops 1\n");
-     b19:	c7 44 24 04 41 4e 00 	movl   $0x4e41,0x4(%esp)
-     b20:	00 
-     b21:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
-     b28:	e8 ce 3a 00 00       	call   45fb <printf>
-        exit(EXIT_STATUS_DEFAULT);
-     b2d:	c7 04 24 02 00 00 00 	movl   $0x2,(%esp)
-     b34:	e8 23 39 00 00       	call   445c <exit>
-  }
-  pid = fork();
-  seq = 0;
-  if(pid == 0){
-    close(fds[0]);
-    for(n = 0; n < 5; n++){
-     b39:	83 45 ec 01          	addl   $0x1,-0x14(%ebp)
-     b3d:	83 7d ec 04          	cmpl   $0x4,-0x14(%ebp)
-     b41:	7e 8c                	jle    acf <pipe1+0x62>
-      if(write(fds[1], buf, 1033) != 1033){
-        printf(1, "pipe1 oops 1\n");
-        exit(EXIT_STATUS_DEFAULT);
-      }
-    }
-    exit(EXIT_STATUS_DEFAULT);
-     b43:	c7 04 24 02 00 00 00 	movl   $0x2,(%esp)
-     b4a:	e8 0d 39 00 00       	call   445c <exit>
-  } else if(pid > 0){
-     b4f:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
-     b53:	0f 8e 0a 01 00 00    	jle    c63 <pipe1+0x1f6>
-    close(fds[1]);
-     b59:	8b 45 dc             	mov    -0x24(%ebp),%eax
-     b5c:	89 04 24             	mov    %eax,(%esp)
-     b5f:	e8 20 39 00 00       	call   4484 <close>
-    total = 0;
-     b64:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
-    cc = 1;
-     b6b:	c7 45 e8 01 00 00 00 	movl   $0x1,-0x18(%ebp)
-    while((n = read(fds[0], buf, cc)) > 0){
-     b72:	eb 6b                	jmp    bdf <pipe1+0x172>
-      for(i = 0; i < n; i++){
-     b74:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
-     b7b:	eb 40                	jmp    bbd <pipe1+0x150>
-        if((buf[i] & 0xff) != (seq++ & 0xff)){
-     b7d:	8b 45 f0             	mov    -0x10(%ebp),%eax
-     b80:	05 60 90 00 00       	add    $0x9060,%eax
-     b85:	0f b6 00             	movzbl (%eax),%eax
-     b88:	0f be c0             	movsbl %al,%eax
-     b8b:	33 45 f4             	xor    -0xc(%ebp),%eax
-     b8e:	25 ff 00 00 00       	and    $0xff,%eax
-     b93:	85 c0                	test   %eax,%eax
-     b95:	0f 95 c0             	setne  %al
-     b98:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
-     b9c:	84 c0                	test   %al,%al
-     b9e:	74 19                	je     bb9 <pipe1+0x14c>
-          printf(1, "pipe1 oops 2\n");
-     ba0:	c7 44 24 04 4f 4e 00 	movl   $0x4e4f,0x4(%esp)
-     ba7:	00 
-     ba8:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
-     baf:	e8 47 3a 00 00       	call   45fb <printf>
-          return;
-     bb4:	e9 ca 00 00 00       	jmp    c83 <pipe1+0x216>
-  } else if(pid > 0){
-    close(fds[1]);
-    total = 0;
-    cc = 1;
-    while((n = read(fds[0], buf, cc)) > 0){
-      for(i = 0; i < n; i++){
-     bb9:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)
-     bbd:	8b 45 f0             	mov    -0x10(%ebp),%eax
-     bc0:	3b 45 ec             	cmp    -0x14(%ebp),%eax
-     bc3:	7c b8                	jl     b7d <pipe1+0x110>
-        if((buf[i] & 0xff) != (seq++ & 0xff)){
-          printf(1, "pipe1 oops 2\n");
-          return;
-        }
-      }
-      total += n;
-     bc5:	8b 45 ec             	mov    -0x14(%ebp),%eax
-     bc8:	01 45 e4             	add    %eax,-0x1c(%ebp)
-      cc = cc * 2;
-     bcb:	d1 65 e8             	shll   -0x18(%ebp)
-      if(cc > sizeof(buf))
-     bce:	8b 45 e8             	mov    -0x18(%ebp),%eax
-     bd1:	3d 00 20 00 00       	cmp    $0x2000,%eax
-     bd6:	76 07                	jbe    bdf <pipe1+0x172>
-        cc = sizeof(buf);
-     bd8:	c7 45 e8 00 20 00 00 	movl   $0x2000,-0x18(%ebp)
-    exit(EXIT_STATUS_DEFAULT);
-  } else if(pid > 0){
-    close(fds[1]);
-    total = 0;
-    cc = 1;
-    while((n = read(fds[0], buf, cc)) > 0){
-     bdf:	8b 45 d8             	mov    -0x28(%ebp),%eax
-     be2:	8b 55 e8             	mov    -0x18(%ebp),%edx
-     be5:	89 54 24 08          	mov    %edx,0x8(%esp)
-     be9:	c7 44 24 04 60 90 00 	movl   $0x9060,0x4(%esp)
-     bf0:	00 
-     bf1:	89 04 24             	mov    %eax,(%esp)
-     bf4:	e8 7b 38 00 00       	call   4474 <read>
-     bf9:	89 45 ec             	mov    %eax,-0x14(%ebp)
-     bfc:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
-     c00:	0f 8f 6e ff ff ff    	jg     b74 <pipe1+0x107>
-      total += n;
-      cc = cc * 2;
-      if(cc > sizeof(buf))
-        cc = sizeof(buf);
-    }
-    if(total != 5 * 1033){
-     c06:	81 7d e4 2d 14 00 00 	cmpl   $0x142d,-0x1c(%ebp)
-     c0d:	74 27                	je     c36 <pipe1+0x1c9>
-      printf(1, "pipe1 oops 3 total %d\n", total);
-     c0f:	8b 45 e4             	mov    -0x1c(%ebp),%eax
-     c12:	89 44 24 08          	mov    %eax,0x8(%esp)
-     c16:	c7 44 24 04 5d 4e 00 	movl   $0x4e5d,0x4(%esp)
-     c1d:	00 
-     c1e:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
-     c25:	e8 d1 39 00 00       	call   45fb <printf>
-      exit(EXIT_STATUS_DEFAULT);
-     c2a:	c7 04 24 02 00 00 00 	movl   $0x2,(%esp)
-     c31:	e8 26 38 00 00       	call   445c <exit>
-    }
-    close(fds[0]);
-     c36:	8b 45 d8             	mov    -0x28(%ebp),%eax
-     c39:	89 04 24             	mov    %eax,(%esp)
-     c3c:	e8 43 38 00 00       	call   4484 <close>
-    wait(0);
-     c41:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
-     c48:	e8 17 38 00 00       	call   4464 <wait>
-  } else {
-    printf(1, "fork() failed\n");
-    exit(EXIT_STATUS_DEFAULT);
-  }
-  printf(1, "pipe1 ok\n");
-     c4d:	c7 44 24 04 74 4e 00 	movl   $0x4e74,0x4(%esp)
-     c54:	00 
-     c55:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
-     c5c:	e8 9a 39 00 00       	call   45fb <printf>
-     c61:	eb 20                	jmp    c83 <pipe1+0x216>
-      exit(EXIT_STATUS_DEFAULT);
-    }
-    close(fds[0]);
-    wait(0);
-  } else {
-    printf(1, "fork() failed\n");
-     c63:	c7 44 24 04 7e 4e 00 	movl   $0x4e7e,0x4(%esp)
-     c6a:	00 
-     c6b:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
-     c72:	e8 84 39 00 00       	call   45fb <printf>
-    exit(EXIT_STATUS_DEFAULT);
-     c77:	c7 04 24 02 00 00 00 	movl   $0x2,(%esp)
-     c7e:	e8 d9 37 00 00       	call   445c <exit>
-  }
-  printf(1, "pipe1 ok\n");
-}
-     c83:	c9                   	leave  
-     c84:	c3                   	ret    
-
-00000c85 <preempt>:
-
-// meant to be run w/ at most two CPUs
-void
-preempt(void)
-{
-     c85:	55                   	push   %ebp
-     c86:	89 e5                	mov    %esp,%ebp
-     c88:	83 ec 38             	sub    $0x38,%esp
-  int pid1, pid2, pid3;
-  int pfds[2];
-
-  printf(1, "preempt: ");
-     c8b:	c7 44 24 04 8d 4e 00 	movl   $0x4e8d,0x4(%esp)
-     c92:	00 
-     c93:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
-     c9a:	e8 5c 39 00 00       	call   45fb <printf>
-  pid1 = fork();
-     c9f:	e8 b0 37 00 00       	call   4454 <fork>
-     ca4:	89 45 f4             	mov    %eax,-0xc(%ebp)
-  if(pid1 == 0)
-     ca7:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
-     cab:	75 02                	jne    caf <preempt+0x2a>
-    for(;;)
-      ;
-     cad:	eb fe                	jmp    cad <preempt+0x28>
-
-  pid2 = fork();
-     caf:	e8 a0 37 00 00       	call   4454 <fork>
-     cb4:	89 45 f0             	mov    %eax,-0x10(%ebp)
-  if(pid2 == 0)
-     cb7:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
-     cbb:	75 02                	jne    cbf <preempt+0x3a>
-    for(;;)
-      ;
-     cbd:	eb fe                	jmp    cbd <preempt+0x38>
-
-  pipe(pfds);
-     cbf:	8d 45 e4             	lea    -0x1c(%ebp),%eax
-     cc2:	89 04 24             	mov    %eax,(%esp)
-     cc5:	e8 a2 37 00 00       	call   446c <pipe>
-  pid3 = fork();
-     cca:	e8 85 37 00 00       	call   4454 <fork>
-     ccf:	89 45 ec             	mov    %eax,-0x14(%ebp)
-  if(pid3 == 0){
-     cd2:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
-     cd6:	75 4c                	jne    d24 <preempt+0x9f>
-    close(pfds[0]);
-     cd8:	8b 45 e4             	mov    -0x1c(%ebp),%eax
-     cdb:	89 04 24             	mov    %eax,(%esp)
-     cde:	e8 a1 37 00 00       	call   4484 <close>
-    if(write(pfds[1], "x", 1) != 1)
-     ce3:	8b 45 e8             	mov    -0x18(%ebp),%eax
-     ce6:	c7 44 24 08 01 00 00 	movl   $0x1,0x8(%esp)
-     ced:	00 
-     cee:	c7 44 24 04 97 4e 00 	movl   $0x4e97,0x4(%esp)
-     cf5:	00 
-     cf6:	89 04 24             	mov    %eax,(%esp)
-     cf9:	e8 7e 37 00 00       	call   447c <write>
-     cfe:	83 f8 01             	cmp    $0x1,%eax
-     d01:	74 14                	je     d17 <preempt+0x92>
-      printf(1, "preempt write error");
-     d03:	c7 44 24 04 99 4e 00 	movl   $0x4e99,0x4(%esp)
-     d0a:	00 
-     d0b:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
-     d12:	e8 e4 38 00 00       	call   45fb <printf>
-    close(pfds[1]);
-     d17:	8b 45 e8             	mov    -0x18(%ebp),%eax
-     d1a:	89 04 24             	mov    %eax,(%esp)
-     d1d:	e8 62 37 00 00       	call   4484 <close>
-    for(;;)
-      ;
-     d22:	eb fe                	jmp    d22 <preempt+0x9d>
-  }
-
-  close(pfds[1]);
-     d24:	8b 45 e8             	mov    -0x18(%ebp),%eax
-     d27:	89 04 24             	mov    %eax,(%esp)
-     d2a:	e8 55 37 00 00       	call   4484 <close>
-  if(read(pfds[0], buf, sizeof(buf)) != 1){
-     d2f:	8b 45 e4             	mov    -0x1c(%ebp),%eax
-     d32:	c7 44 24 08 00 20 00 	movl   $0x2000,0x8(%esp)
-     d39:	00 
-     d3a:	c7 44 24 04 60 90 00 	movl   $0x9060,0x4(%esp)
-     d41:	00 
-     d42:	89 04 24             	mov    %eax,(%esp)
-     d45:	e8 2a 37 00 00       	call   4474 <read>
-     d4a:	83 f8 01             	cmp    $0x1,%eax
-     d4d:	74 19                	je     d68 <preempt+0xe3>
-    printf(1, "preempt read error");
-     d4f:	c7 44 24 04 ad 4e 00 	movl   $0x4ead,0x4(%esp)
-     d56:	00 
-     d57:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
-     d5e:	e8 98 38 00 00       	call   45fb <printf>
-    return;
-     d63:	e9 8c 00 00 00       	jmp    df4 <preempt+0x16f>
-  }
-  close(pfds[0]);
-     d68:	8b 45 e4             	mov    -0x1c(%ebp),%eax
-     d6b:	89 04 24             	mov    %eax,(%esp)
-     d6e:	e8 11 37 00 00       	call   4484 <close>
-  printf(1, "kill... ");
-     d73:	c7 44 24 04 c0 4e 00 	movl   $0x4ec0,0x4(%esp)
-     d7a:	00 
-     d7b:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
-     d82:	e8 74 38 00 00       	call   45fb <printf>
-  kill(pid1);
-     d87:	8b 45 f4             	mov    -0xc(%ebp),%eax
-     d8a:	89 04 24             	mov    %eax,(%esp)
-     d8d:	e8 fa 36 00 00       	call   448c <kill>
-  kill(pid2);
-     d92:	8b 45 f0             	mov    -0x10(%ebp),%eax
-     d95:	89 04 24             	mov    %eax,(%esp)
-     d98:	e8 ef 36 00 00       	call   448c <kill>
-  kill(pid3);
-     d9d:	8b 45 ec             	mov    -0x14(%ebp),%eax
-     da0:	89 04 24             	mov    %eax,(%esp)
-     da3:	e8 e4 36 00 00       	call   448c <kill>
-  printf(1, "wait... ");
-     da8:	c7 44 24 04 c9 4e 00 	movl   $0x4ec9,0x4(%esp)
-     daf:	00 
-     db0:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
-     db7:	e8 3f 38 00 00       	call   45fb <printf>
-  wait(0);
-     dbc:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
-     dc3:	e8 9c 36 00 00       	call   4464 <wait>
-  wait(0);
-     dc8:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
-     dcf:	e8 90 36 00 00       	call   4464 <wait>
-  wait(0);
-     dd4:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
-     ddb:	e8 84 36 00 00       	call   4464 <wait>
-  printf(1, "preempt ok\n");
-     de0:	c7 44 24 04 d2 4e 00 	movl   $0x4ed2,0x4(%esp)
-     de7:	00 
-     de8:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
-     def:	e8 07 38 00 00       	call   45fb <printf>
-}
-     df4:	c9                   	leave  
-     df5:	c3                   	ret    
-
-00000df6 <exitwait>:
-
-// try to find any races between exit and wait
-void
-exitwait(void)
-{
-     df6:	55                   	push   %ebp
-     df7:	89 e5                	mov    %esp,%ebp
-     df9:	83 ec 28             	sub    $0x28,%esp
-  int i, pid;
-
-  for(i = 0; i < 100; i++){
-     dfc:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
-     e03:	eb 61                	jmp    e66 <exitwait+0x70>
-    pid = fork();
-     e05:	e8 4a 36 00 00       	call   4454 <fork>
-     e0a:	89 45 f0             	mov    %eax,-0x10(%ebp)
-    if(pid < 0){
-     e0d:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
-     e11:	79 16                	jns    e29 <exitwait+0x33>
-      printf(1, "fork failed\n");
-     e13:	c7 44 24 04 61 4a 00 	movl   $0x4a61,0x4(%esp)
-     e1a:	00 
-     e1b:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
-     e22:	e8 d4 37 00 00       	call   45fb <printf>
-      return;
-     e27:	eb 57                	jmp    e80 <exitwait+0x8a>
-    }
-    if(pid){
-     e29:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
-     e2d:	74 27                	je     e56 <exitwait+0x60>
-      if(wait(0) != pid){
-     e2f:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
-     e36:	e8 29 36 00 00       	call   4464 <wait>
-     e3b:	3b 45 f0             	cmp    -0x10(%ebp),%eax
-     e3e:	74 22                	je     e62 <exitwait+0x6c>
-        printf(1, "wait wrong pid\n");
-     e40:	c7 44 24 04 de 4e 00 	movl   $0x4ede,0x4(%esp)
-     e47:	00 
-     e48:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
-     e4f:	e8 a7 37 00 00       	call   45fb <printf>
-        return;
-     e54:	eb 2a                	jmp    e80 <exitwait+0x8a>
-      }
-    } else {
-      exit(EXIT_STATUS_DEFAULT);
-     e56:	c7 04 24 02 00 00 00 	movl   $0x2,(%esp)
-     e5d:	e8 fa 35 00 00       	call   445c <exit>
-void
-exitwait(void)
-{
-  int i, pid;
-
-  for(i = 0; i < 100; i++){
-     e62:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
-     e66:	83 7d f4 63          	cmpl   $0x63,-0xc(%ebp)
-     e6a:	7e 99                	jle    e05 <exitwait+0xf>
-      }
-    } else {
-      exit(EXIT_STATUS_DEFAULT);
-    }
-  }
-  printf(1, "exitwait ok\n");
-     e6c:	c7 44 24 04 ee 4e 00 	movl   $0x4eee,0x4(%esp)
-     e73:	00 
-     e74:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
-     e7b:	e8 7b 37 00 00       	call   45fb <printf>
-}
-     e80:	c9                   	leave  
-     e81:	c3                   	ret    
-
-00000e82 <mem>:
-
-void
-mem(void)
-{
-     e82:	55                   	push   %ebp
-     e83:	89 e5                	mov    %esp,%ebp
-     e85:	83 ec 28             	sub    $0x28,%esp
-  void *m1, *m2;
-  int pid, ppid;
-
-  printf(1, "mem test\n");
-     e88:	c7 44 24 04 fb 4e 00 	movl   $0x4efb,0x4(%esp)
-     e8f:	00 
-     e90:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
-     e97:	e8 5f 37 00 00       	call   45fb <printf>
-  ppid = getpid();
-     e9c:	e8 3b 36 00 00       	call   44dc <getpid>
-     ea1:	89 45 f0             	mov    %eax,-0x10(%ebp)
-  if((pid = fork()) == 0){
-     ea4:	e8 ab 35 00 00       	call   4454 <fork>
-     ea9:	89 45 ec             	mov    %eax,-0x14(%ebp)
-     eac:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
-     eb0:	0f 85 b8 00 00 00    	jne    f6e <mem+0xec>
-    m1 = 0;
-     eb6:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
-    while((m2 = malloc(10001)) != 0){
-     ebd:	eb 0e                	jmp    ecd <mem+0x4b>
-      *(char**)m2 = m1;
-     ebf:	8b 45 e8             	mov    -0x18(%ebp),%eax
-     ec2:	8b 55 f4             	mov    -0xc(%ebp),%edx
-     ec5:	89 10                	mov    %edx,(%eax)
-      m1 = m2;
-     ec7:	8b 45 e8             	mov    -0x18(%ebp),%eax
-     eca:	89 45 f4             	mov    %eax,-0xc(%ebp)
-
-  printf(1, "mem test\n");
-  ppid = getpid();
-  if((pid = fork()) == 0){
-    m1 = 0;
-    while((m2 = malloc(10001)) != 0){
-     ecd:	c7 04 24 11 27 00 00 	movl   $0x2711,(%esp)
-     ed4:	e8 06 3a 00 00       	call   48df <malloc>
-     ed9:	89 45 e8             	mov    %eax,-0x18(%ebp)
-     edc:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
-     ee0:	75 dd                	jne    ebf <mem+0x3d>
-      *(char**)m2 = m1;
-      m1 = m2;
-    }
-    while(m1){
-     ee2:	eb 19                	jmp    efd <mem+0x7b>
-      m2 = *(char**)m1;
-     ee4:	8b 45 f4             	mov    -0xc(%ebp),%eax
-     ee7:	8b 00                	mov    (%eax),%eax
-     ee9:	89 45 e8             	mov    %eax,-0x18(%ebp)
-      free(m1);
-     eec:	8b 45 f4             	mov    -0xc(%ebp),%eax
-     eef:	89 04 24             	mov    %eax,(%esp)
-     ef2:	e8 b9 38 00 00       	call   47b0 <free>
-      m1 = m2;
-     ef7:	8b 45 e8             	mov    -0x18(%ebp),%eax
-     efa:	89 45 f4             	mov    %eax,-0xc(%ebp)
-    m1 = 0;
-    while((m2 = malloc(10001)) != 0){
-      *(char**)m2 = m1;
-      m1 = m2;
-    }
-    while(m1){
-     efd:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
-     f01:	75 e1                	jne    ee4 <mem+0x62>
-      m2 = *(char**)m1;
-      free(m1);
-      m1 = m2;
-    }
-    m1 = malloc(1024*20);
-     f03:	c7 04 24 00 50 00 00 	movl   $0x5000,(%esp)
-     f0a:	e8 d0 39 00 00       	call   48df <malloc>
-     f0f:	89 45 f4             	mov    %eax,-0xc(%ebp)
-    if(m1 == 0){
-     f12:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
-     f16:	75 2b                	jne    f43 <mem+0xc1>
-      printf(1, "couldn't allocate mem?!!\n");
-     f18:	c7 44 24 04 05 4f 00 	movl   $0x4f05,0x4(%esp)
-     f1f:	00 
-     f20:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
-     f27:	e8 cf 36 00 00       	call   45fb <printf>
-      kill(ppid);
-     f2c:	8b 45 f0             	mov    -0x10(%ebp),%eax
-     f2f:	89 04 24             	mov    %eax,(%esp)
-     f32:	e8 55 35 00 00       	call   448c <kill>
-      exit(EXIT_STATUS_DEFAULT);
-     f37:	c7 04 24 02 00 00 00 	movl   $0x2,(%esp)
-     f3e:	e8 19 35 00 00       	call   445c <exit>
-    }
-    free(m1);
-     f43:	8b 45 f4             	mov    -0xc(%ebp),%eax
-     f46:	89 04 24             	mov    %eax,(%esp)
-     f49:	e8 62 38 00 00       	call   47b0 <free>
-    printf(1, "mem ok\n");
-     f4e:	c7 44 24 04 1f 4f 00 	movl   $0x4f1f,0x4(%esp)
-     f55:	00 
-     f56:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
-     f5d:	e8 99 36 00 00       	call   45fb <printf>
-    exit(EXIT_STATUS_DEFAULT);
-     f62:	c7 04 24 02 00 00 00 	movl   $0x2,(%esp)
-     f69:	e8 ee 34 00 00       	call   445c <exit>
-  } else {
-    wait(0);
-     f6e:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
-     f75:	e8 ea 34 00 00       	call   4464 <wait>
-  }
-}
-     f7a:	c9                   	leave  
-     f7b:	c3                   	ret    
-
-00000f7c <sharedfd>:
-
-// two processes write to the same file descriptor
-// is the offset shared? does inode locking work?
-void
-sharedfd(void)
-{
-     f7c:	55                   	push   %ebp
-     f7d:	89 e5                	mov    %esp,%ebp
-     f7f:	83 ec 48             	sub    $0x48,%esp
-  int fd, pid, i, n, nc, np;
-  char buf[10];
-
-  printf(1, "sharedfd test\n");
-     f82:	c7 44 24 04 27 4f 00 	movl   $0x4f27,0x4(%esp)
-     f89:	00 
-     f8a:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
-     f91:	e8 65 36 00 00       	call   45fb <printf>
-
-  unlink("sharedfd");
-     f96:	c7 04 24 36 4f 00 00 	movl   $0x4f36,(%esp)
-     f9d:	e8 0a 35 00 00       	call   44ac <unlink>
-  fd = open("sharedfd", O_CREATE|O_RDWR);
-     fa2:	c7 44 24 04 02 02 00 	movl   $0x202,0x4(%esp)
-     fa9:	00 
-     faa:	c7 04 24 36 4f 00 00 	movl   $0x4f36,(%esp)
-     fb1:	e8 e6 34 00 00       	call   449c <open>
-     fb6:	89 45 e8             	mov    %eax,-0x18(%ebp)
-  if(fd < 0){
-     fb9:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
-     fbd:	79 19                	jns    fd8 <sharedfd+0x5c>
-    printf(1, "fstests: cannot open sharedfd for writing");
-     fbf:	c7 44 24 04 40 4f 00 	movl   $0x4f40,0x4(%esp)
-     fc6:	00 
-     fc7:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
-     fce:	e8 28 36 00 00       	call   45fb <printf>
-    return;
-     fd3:	e9 b1 01 00 00       	jmp    1189 <sharedfd+0x20d>
-  }
-  pid = fork();
-     fd8:	e8 77 34 00 00       	call   4454 <fork>
-     fdd:	89 45 e4             	mov    %eax,-0x1c(%ebp)
-  memset(buf, pid==0?'c':'p', sizeof(buf));
-     fe0:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
-     fe4:	75 07                	jne    fed <sharedfd+0x71>
-     fe6:	b8 63 00 00 00       	mov    $0x63,%eax
-     feb:	eb 05                	jmp    ff2 <sharedfd+0x76>
-     fed:	b8 70 00 00 00       	mov    $0x70,%eax
-     ff2:	c7 44 24 08 0a 00 00 	movl   $0xa,0x8(%esp)
-     ff9:	00 
-     ffa:	89 44 24 04          	mov    %eax,0x4(%esp)
-     ffe:	8d 45 d6             	lea    -0x2a(%ebp),%eax
-    1001:	89 04 24             	mov    %eax,(%esp)
-    1004:	e8 ae 32 00 00       	call   42b7 <memset>
-  for(i = 0; i < 1000; i++){
-    1009:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
-    1010:	eb 39                	jmp    104b <sharedfd+0xcf>
-    if(write(fd, buf, sizeof(buf)) != sizeof(buf)){
-    1012:	c7 44 24 08 0a 00 00 	movl   $0xa,0x8(%esp)
-    1019:	00 
-    101a:	8d 45 d6             	lea    -0x2a(%ebp),%eax
-    101d:	89 44 24 04          	mov    %eax,0x4(%esp)
-    1021:	8b 45 e8             	mov    -0x18(%ebp),%eax
-    1024:	89 04 24             	mov    %eax,(%esp)
-    1027:	e8 50 34 00 00       	call   447c <write>
-    102c:	83 f8 0a             	cmp    $0xa,%eax
-    102f:	74 16                	je     1047 <sharedfd+0xcb>
-      printf(1, "fstests: write sharedfd failed\n");
-    1031:	c7 44 24 04 6c 4f 00 	movl   $0x4f6c,0x4(%esp)
-    1038:	00 
-    1039:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
-    1040:	e8 b6 35 00 00       	call   45fb <printf>
-      break;
-    1045:	eb 0d                	jmp    1054 <sharedfd+0xd8>
-    printf(1, "fstests: cannot open sharedfd for writing");
-    return;
-  }
-  pid = fork();
-  memset(buf, pid==0?'c':'p', sizeof(buf));
-  for(i = 0; i < 1000; i++){
-    1047:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
-    104b:	81 7d f4 e7 03 00 00 	cmpl   $0x3e7,-0xc(%ebp)
-    1052:	7e be                	jle    1012 <sharedfd+0x96>
-    if(write(fd, buf, sizeof(buf)) != sizeof(buf)){
-      printf(1, "fstests: write sharedfd failed\n");
-      break;
-    }
-  }
-  if(pid == 0)
-    1054:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
-    1058:	75 0c                	jne    1066 <sharedfd+0xea>
-    exit(EXIT_STATUS_DEFAULT);
-    105a:	c7 04 24 02 00 00 00 	movl   $0x2,(%esp)
-    1061:	e8 f6 33 00 00       	call   445c <exit>
-  else
-    wait(0);
-    1066:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
-    106d:	e8 f2 33 00 00       	call   4464 <wait>
-  close(fd);
-    1072:	8b 45 e8             	mov    -0x18(%ebp),%eax
-    1075:	89 04 24             	mov    %eax,(%esp)
-    1078:	e8 07 34 00 00       	call   4484 <close>
-  fd = open("sharedfd", 0);
-    107d:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
-    1084:	00 
-    1085:	c7 04 24 36 4f 00 00 	movl   $0x4f36,(%esp)
-    108c:	e8 0b 34 00 00       	call   449c <open>
-    1091:	89 45 e8             	mov    %eax,-0x18(%ebp)
-  if(fd < 0){
-    1094:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
-    1098:	79 19                	jns    10b3 <sharedfd+0x137>
-    printf(1, "fstests: cannot open sharedfd for reading\n");
-    109a:	c7 44 24 04 8c 4f 00 	movl   $0x4f8c,0x4(%esp)
-    10a1:	00 
-    10a2:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
-    10a9:	e8 4d 35 00 00       	call   45fb <printf>
-    return;
-    10ae:	e9 d6 00 00 00       	jmp    1189 <sharedfd+0x20d>
-  }
-  nc = np = 0;
-    10b3:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
-    10ba:	8b 45 ec             	mov    -0x14(%ebp),%eax
-    10bd:	89 45 f0             	mov    %eax,-0x10(%ebp)
-  while((n = read(fd, buf, sizeof(buf))) > 0){
-    10c0:	eb 37                	jmp    10f9 <sharedfd+0x17d>
-    for(i = 0; i < sizeof(buf); i++){
-    10c2:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
-    10c9:	eb 26                	jmp    10f1 <sharedfd+0x175>
-      if(buf[i] == 'c')
-    10cb:	8d 45 d6             	lea    -0x2a(%ebp),%eax
-    10ce:	03 45 f4             	add    -0xc(%ebp),%eax
-    10d1:	0f b6 00             	movzbl (%eax),%eax
-    10d4:	3c 63                	cmp    $0x63,%al
-    10d6:	75 04                	jne    10dc <sharedfd+0x160>
-        nc++;
-    10d8:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)
-      if(buf[i] == 'p')
-    10dc:	8d 45 d6             	lea    -0x2a(%ebp),%eax
-    10df:	03 45 f4             	add    -0xc(%ebp),%eax
-    10e2:	0f b6 00             	movzbl (%eax),%eax
-    10e5:	3c 70                	cmp    $0x70,%al
-    10e7:	75 04                	jne    10ed <sharedfd+0x171>
-        np++;
-    10e9:	83 45 ec 01          	addl   $0x1,-0x14(%ebp)
-    printf(1, "fstests: cannot open sharedfd for reading\n");
-    return;
-  }
-  nc = np = 0;
-  while((n = read(fd, buf, sizeof(buf))) > 0){
-    for(i = 0; i < sizeof(buf); i++){
-    10ed:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
-    10f1:	8b 45 f4             	mov    -0xc(%ebp),%eax
-    10f4:	83 f8 09             	cmp    $0x9,%eax
-    10f7:	76 d2                	jbe    10cb <sharedfd+0x14f>
-  if(fd < 0){
-    printf(1, "fstests: cannot open sharedfd for reading\n");
-    return;
-  }
-  nc = np = 0;
-  while((n = read(fd, buf, sizeof(buf))) > 0){
-    10f9:	c7 44 24 08 0a 00 00 	movl   $0xa,0x8(%esp)
-    1100:	00 
-    1101:	8d 45 d6             	lea    -0x2a(%ebp),%eax
-    1104:	89 44 24 04          	mov    %eax,0x4(%esp)
-    1108:	8b 45 e8             	mov    -0x18(%ebp),%eax
-    110b:	89 04 24             	mov    %eax,(%esp)
-    110e:	e8 61 33 00 00       	call   4474 <read>
-    1113:	89 45 e0             	mov    %eax,-0x20(%ebp)
-    1116:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
-    111a:	7f a6                	jg     10c2 <sharedfd+0x146>
-        nc++;
-      if(buf[i] == 'p')
-        np++;
-    }
-  }
-  close(fd);
-    111c:	8b 45 e8             	mov    -0x18(%ebp),%eax
-    111f:	89 04 24             	mov    %eax,(%esp)
-    1122:	e8 5d 33 00 00       	call   4484 <close>
-  unlink("sharedfd");
-    1127:	c7 04 24 36 4f 00 00 	movl   $0x4f36,(%esp)
-    112e:	e8 79 33 00 00       	call   44ac <unlink>
-  if(nc == 10000 && np == 10000){
-    1133:	81 7d f0 10 27 00 00 	cmpl   $0x2710,-0x10(%ebp)
-    113a:	75 1f                	jne    115b <sharedfd+0x1df>
-    113c:	81 7d ec 10 27 00 00 	cmpl   $0x2710,-0x14(%ebp)
-    1143:	75 16                	jne    115b <sharedfd+0x1df>
-    printf(1, "sharedfd ok\n");
-    1145:	c7 44 24 04 b7 4f 00 	movl   $0x4fb7,0x4(%esp)
-    114c:	00 
-    114d:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
-    1154:	e8 a2 34 00 00       	call   45fb <printf>
-    1159:	eb 2e                	jmp    1189 <sharedfd+0x20d>
-  } else {
-    printf(1, "sharedfd oops %d %d\n", nc, np);
-    115b:	8b 45 ec             	mov    -0x14(%ebp),%eax
-    115e:	89 44 24 0c          	mov    %eax,0xc(%esp)
-    1162:	8b 45 f0             	mov    -0x10(%ebp),%eax
-    1165:	89 44 24 08          	mov    %eax,0x8(%esp)
-    1169:	c7 44 24 04 c4 4f 00 	movl   $0x4fc4,0x4(%esp)
-    1170:	00 
-    1171:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
-    1178:	e8 7e 34 00 00       	call   45fb <printf>
-    exit(EXIT_STATUS_DEFAULT);
-    117d:	c7 04 24 02 00 00 00 	movl   $0x2,(%esp)
-    1184:	e8 d3 32 00 00       	call   445c <exit>
-  }
-}
-    1189:	c9                   	leave  
-    118a:	c3                   	ret    
-
-0000118b <fourfiles>:
-
-// four processes write different files at the same
-// time, to test block allocation.
-void
-fourfiles(void)
-{
-    118b:	55                   	push   %ebp
-    118c:	89 e5                	mov    %esp,%ebp
-    118e:	83 ec 48             	sub    $0x48,%esp
-  int fd, pid, i, j, n, total, pi;
-  char *names[] = { "f0", "f1", "f2", "f3" };
-    1191:	c7 45 c8 d9 4f 00 00 	movl   $0x4fd9,-0x38(%ebp)
-    1198:	c7 45 cc dc 4f 00 00 	movl   $0x4fdc,-0x34(%ebp)
-    119f:	c7 45 d0 df 4f 00 00 	movl   $0x4fdf,-0x30(%ebp)
-    11a6:	c7 45 d4 e2 4f 00 00 	movl   $0x4fe2,-0x2c(%ebp)
-  char *fname;
-
-  printf(1, "fourfiles test\n");
-    11ad:	c7 44 24 04 e5 4f 00 	movl   $0x4fe5,0x4(%esp)
-    11b4:	00 
-    11b5:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
-    11bc:	e8 3a 34 00 00       	call   45fb <printf>
-
-  for(pi = 0; pi < 4; pi++){
-    11c1:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
-    11c8:	e9 18 01 00 00       	jmp    12e5 <fourfiles+0x15a>
-    fname = names[pi];
-    11cd:	8b 45 e8             	mov    -0x18(%ebp),%eax
-    11d0:	8b 44 85 c8          	mov    -0x38(%ebp,%eax,4),%eax
-    11d4:	89 45 e4             	mov    %eax,-0x1c(%ebp)
-    unlink(fname);
-    11d7:	8b 45 e4             	mov    -0x1c(%ebp),%eax
-    11da:	89 04 24             	mov    %eax,(%esp)
-    11dd:	e8 ca 32 00 00       	call   44ac <unlink>
-
-    pid = fork();
-    11e2:	e8 6d 32 00 00       	call   4454 <fork>
-    11e7:	89 45 e0             	mov    %eax,-0x20(%ebp)
-    if(pid < 0){
-    11ea:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
-    11ee:	79 20                	jns    1210 <fourfiles+0x85>
-      printf(1, "fork failed\n");
-    11f0:	c7 44 24 04 61 4a 00 	movl   $0x4a61,0x4(%esp)
-    11f7:	00 
-    11f8:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
-    11ff:	e8 f7 33 00 00       	call   45fb <printf>
-      exit(EXIT_STATUS_DEFAULT);
-    1204:	c7 04 24 02 00 00 00 	movl   $0x2,(%esp)
-    120b:	e8 4c 32 00 00       	call   445c <exit>
-    }
-
-    if(pid == 0){
-    1210:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
-    1214:	0f 85 c7 00 00 00    	jne    12e1 <fourfiles+0x156>
-      fd = open(fname, O_CREATE | O_RDWR);
-    121a:	c7 44 24 04 02 02 00 	movl   $0x202,0x4(%esp)
-    1221:	00 
-    1222:	8b 45 e4             	mov    -0x1c(%ebp),%eax
-    1225:	89 04 24             	mov    %eax,(%esp)
-    1228:	e8 6f 32 00 00       	call   449c <open>
-    122d:	89 45 dc             	mov    %eax,-0x24(%ebp)
-      if(fd < 0){
-    1230:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
-    1234:	79 20                	jns    1256 <fourfiles+0xcb>
-        printf(1, "create failed\n");
-    1236:	c7 44 24 04 f5 4f 00 	movl   $0x4ff5,0x4(%esp)
-    123d:	00 
-    123e:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
-    1245:	e8 b1 33 00 00       	call   45fb <printf>
-        exit(EXIT_STATUS_DEFAULT);
-    124a:	c7 04 24 02 00 00 00 	movl   $0x2,(%esp)
-    1251:	e8 06 32 00 00       	call   445c <exit>
-      }
-      
-      memset(buf, '0'+pi, 512);
-    1256:	8b 45 e8             	mov    -0x18(%ebp),%eax
-    1259:	83 c0 30             	add    $0x30,%eax
-    125c:	c7 44 24 08 00 02 00 	movl   $0x200,0x8(%esp)
-    1263:	00 
-    1264:	89 44 24 04          	mov    %eax,0x4(%esp)
-    1268:	c7 04 24 60 90 00 00 	movl   $0x9060,(%esp)
-    126f:	e8 43 30 00 00       	call   42b7 <memset>
-      for(i = 0; i < 12; i++){
-    1274:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
-    127b:	eb 52                	jmp    12cf <fourfiles+0x144>
-        if((n = write(fd, buf, 500)) != 500){
-    127d:	c7 44 24 08 f4 01 00 	movl   $0x1f4,0x8(%esp)
-    1284:	00 
-    1285:	c7 44 24 04 60 90 00 	movl   $0x9060,0x4(%esp)
-    128c:	00 
-    128d:	8b 45 dc             	mov    -0x24(%ebp),%eax
-    1290:	89 04 24             	mov    %eax,(%esp)
-    1293:	e8 e4 31 00 00       	call   447c <write>
-    1298:	89 45 d8             	mov    %eax,-0x28(%ebp)
-    129b:	81 7d d8 f4 01 00 00 	cmpl   $0x1f4,-0x28(%ebp)
-    12a2:	74 27                	je     12cb <fourfiles+0x140>
-          printf(1, "write failed %d\n", n);
-    12a4:	8b 45 d8             	mov    -0x28(%ebp),%eax
-    12a7:	89 44 24 08          	mov    %eax,0x8(%esp)
-    12ab:	c7 44 24 04 04 50 00 	movl   $0x5004,0x4(%esp)
-    12b2:	00 
-    12b3:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
-    12ba:	e8 3c 33 00 00       	call   45fb <printf>
-          exit(EXIT_STATUS_DEFAULT);
-    12bf:	c7 04 24 02 00 00 00 	movl   $0x2,(%esp)
-    12c6:	e8 91 31 00 00       	call   445c <exit>
-        printf(1, "create failed\n");
-        exit(EXIT_STATUS_DEFAULT);
-      }
-      
-      memset(buf, '0'+pi, 512);
-      for(i = 0; i < 12; i++){
-    12cb:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
-    12cf:	83 7d f4 0b          	cmpl   $0xb,-0xc(%ebp)
-    12d3:	7e a8                	jle    127d <fourfiles+0xf2>
-        if((n = write(fd, buf, 500)) != 500){
-          printf(1, "write failed %d\n", n);
-          exit(EXIT_STATUS_DEFAULT);
-        }
-      }
-      exit(EXIT_STATUS_DEFAULT);
-    12d5:	c7 04 24 02 00 00 00 	movl   $0x2,(%esp)
-    12dc:	e8 7b 31 00 00       	call   445c <exit>
-  char *names[] = { "f0", "f1", "f2", "f3" };
-  char *fname;
-
-  printf(1, "fourfiles test\n");
-
-  for(pi = 0; pi < 4; pi++){
-    12e1:	83 45 e8 01          	addl   $0x1,-0x18(%ebp)
-    12e5:	83 7d e8 03          	cmpl   $0x3,-0x18(%ebp)
-    12e9:	0f 8e de fe ff ff    	jle    11cd <fourfiles+0x42>
-      }
-      exit(EXIT_STATUS_DEFAULT);
-    }
-  }
-
-  for(pi = 0; pi < 4; pi++){
-    12ef:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
-    12f6:	eb 10                	jmp    1308 <fourfiles+0x17d>
-    wait(0);
-    12f8:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
-    12ff:	e8 60 31 00 00       	call   4464 <wait>
-      }
-      exit(EXIT_STATUS_DEFAULT);
-    }
-  }
-
-  for(pi = 0; pi < 4; pi++){
-    1304:	83 45 e8 01          	addl   $0x1,-0x18(%ebp)
-    1308:	83 7d e8 03          	cmpl   $0x3,-0x18(%ebp)
-    130c:	7e ea                	jle    12f8 <fourfiles+0x16d>
-    wait(0);
-  }
-
-  for(i = 0; i < 2; i++){
-    130e:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
-    1315:	e9 ea 00 00 00       	jmp    1404 <fourfiles+0x279>
-    fname = names[i];
-    131a:	8b 45 f4             	mov    -0xc(%ebp),%eax
-    131d:	8b 44 85 c8          	mov    -0x38(%ebp,%eax,4),%eax
-    1321:	89 45 e4             	mov    %eax,-0x1c(%ebp)
-    fd = open(fname, 0);
-    1324:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
-    132b:	00 
-    132c:	8b 45 e4             	mov    -0x1c(%ebp),%eax
-    132f:	89 04 24             	mov    %eax,(%esp)
-    1332:	e8 65 31 00 00       	call   449c <open>
-    1337:	89 45 dc             	mov    %eax,-0x24(%ebp)
-    total = 0;
-    133a:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
-    while((n = read(fd, buf, sizeof(buf))) > 0){
-    1341:	eb 53                	jmp    1396 <fourfiles+0x20b>
-      for(j = 0; j < n; j++){
-    1343:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
-    134a:	eb 3c                	jmp    1388 <fourfiles+0x1fd>
-        if(buf[j] != '0'+i){
-    134c:	8b 45 f0             	mov    -0x10(%ebp),%eax
-    134f:	05 60 90 00 00       	add    $0x9060,%eax
-    1354:	0f b6 00             	movzbl (%eax),%eax
-    1357:	0f be c0             	movsbl %al,%eax
-    135a:	8b 55 f4             	mov    -0xc(%ebp),%edx
-    135d:	83 c2 30             	add    $0x30,%edx
-    1360:	39 d0                	cmp    %edx,%eax
-    1362:	74 20                	je     1384 <fourfiles+0x1f9>
-          printf(1, "wrong char\n");
-    1364:	c7 44 24 04 15 50 00 	movl   $0x5015,0x4(%esp)
-    136b:	00 
-    136c:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
-    1373:	e8 83 32 00 00       	call   45fb <printf>
-          exit(EXIT_STATUS_DEFAULT);
-    1378:	c7 04 24 02 00 00 00 	movl   $0x2,(%esp)
-    137f:	e8 d8 30 00 00       	call   445c <exit>
-  for(i = 0; i < 2; i++){
-    fname = names[i];
-    fd = open(fname, 0);
-    total = 0;
-    while((n = read(fd, buf, sizeof(buf))) > 0){
-      for(j = 0; j < n; j++){
-    1384:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)
-    1388:	8b 45 f0             	mov    -0x10(%ebp),%eax
-    138b:	3b 45 d8             	cmp    -0x28(%ebp),%eax
-    138e:	7c bc                	jl     134c <fourfiles+0x1c1>
-        if(buf[j] != '0'+i){
-          printf(1, "wrong char\n");
-          exit(EXIT_STATUS_DEFAULT);
-        }
-      }
-      total += n;
-    1390:	8b 45 d8             	mov    -0x28(%ebp),%eax
-    1393:	01 45 ec             	add    %eax,-0x14(%ebp)
-
-  for(i = 0; i < 2; i++){
-    fname = names[i];
-    fd = open(fname, 0);
-    total = 0;
-    while((n = read(fd, buf, sizeof(buf))) > 0){
-    1396:	c7 44 24 08 00 20 00 	movl   $0x2000,0x8(%esp)
-    139d:	00 
-    139e:	c7 44 24 04 60 90 00 	movl   $0x9060,0x4(%esp)
-    13a5:	00 
-    13a6:	8b 45 dc             	mov    -0x24(%ebp),%eax
-    13a9:	89 04 24             	mov    %eax,(%esp)
-    13ac:	e8 c3 30 00 00       	call   4474 <read>
-    13b1:	89 45 d8             	mov    %eax,-0x28(%ebp)
-    13b4:	83 7d d8 00          	cmpl   $0x0,-0x28(%ebp)
-    13b8:	7f 89                	jg     1343 <fourfiles+0x1b8>
-          exit(EXIT_STATUS_DEFAULT);
-        }
-      }
-      total += n;
-    }
-    close(fd);
-    13ba:	8b 45 dc             	mov    -0x24(%ebp),%eax
-    13bd:	89 04 24             	mov    %eax,(%esp)
-    13c0:	e8 bf 30 00 00       	call   4484 <close>
-    if(total != 12*500){
-    13c5:	81 7d ec 70 17 00 00 	cmpl   $0x1770,-0x14(%ebp)
-    13cc:	74 27                	je     13f5 <fourfiles+0x26a>
-      printf(1, "wrong length %d\n", total);
-    13ce:	8b 45 ec             	mov    -0x14(%ebp),%eax
-    13d1:	89 44 24 08          	mov    %eax,0x8(%esp)
-    13d5:	c7 44 24 04 21 50 00 	movl   $0x5021,0x4(%esp)
-    13dc:	00 
-    13dd:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
-    13e4:	e8 12 32 00 00       	call   45fb <printf>
-      exit(EXIT_STATUS_DEFAULT);
-    13e9:	c7 04 24 02 00 00 00 	movl   $0x2,(%esp)
-    13f0:	e8 67 30 00 00       	call   445c <exit>
-    }
-    unlink(fname);
-    13f5:	8b 45 e4             	mov    -0x1c(%ebp),%eax
-    13f8:	89 04 24             	mov    %eax,(%esp)
-    13fb:	e8 ac 30 00 00       	call   44ac <unlink>
-
-  for(pi = 0; pi < 4; pi++){
-    wait(0);
-  }
-
-  for(i = 0; i < 2; i++){
-    1400:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
-    1404:	83 7d f4 01          	cmpl   $0x1,-0xc(%ebp)
-    1408:	0f 8e 0c ff ff ff    	jle    131a <fourfiles+0x18f>
-      exit(EXIT_STATUS_DEFAULT);
-    }
-    unlink(fname);
-  }
-
-  printf(1, "fourfiles ok\n");
-    140e:	c7 44 24 04 32 50 00 	movl   $0x5032,0x4(%esp)
-    1415:	00 
-    1416:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
-    141d:	e8 d9 31 00 00       	call   45fb <printf>
-}
-    1422:	c9                   	leave  
-    1423:	c3                   	ret    
-
-00001424 <createdelete>:
-
-// four processes create and delete different files in same directory
-void
-createdelete(void)
-{
-    1424:	55                   	push   %ebp
-    1425:	89 e5                	mov    %esp,%ebp
-    1427:	83 ec 48             	sub    $0x48,%esp
-  enum { N = 20 };
-  int pid, i, fd, pi;
-  char name[32];
-
-  printf(1, "createdelete test\n");
-    142a:	c7 44 24 04 40 50 00 	movl   $0x5040,0x4(%esp)
-    1431:	00 
-    1432:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
-    1439:	e8 bd 31 00 00       	call   45fb <printf>
-
-  for(pi = 0; pi < 4; pi++){
-    143e:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
-    1445:	e9 10 01 00 00       	jmp    155a <createdelete+0x136>
-    pid = fork();
-    144a:	e8 05 30 00 00       	call   4454 <fork>
-    144f:	89 45 ec             	mov    %eax,-0x14(%ebp)
-    if(pid < 0){
-    1452:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
-    1456:	79 20                	jns    1478 <createdelete+0x54>
-      printf(1, "fork failed\n");
-    1458:	c7 44 24 04 61 4a 00 	movl   $0x4a61,0x4(%esp)
-    145f:	00 
-    1460:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
-    1467:	e8 8f 31 00 00       	call   45fb <printf>
-      exit(EXIT_STATUS_DEFAULT);
-    146c:	c7 04 24 02 00 00 00 	movl   $0x2,(%esp)
-    1473:	e8 e4 2f 00 00       	call   445c <exit>
-    }
-
-    if(pid == 0){
-    1478:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
-    147c:	0f 85 d4 00 00 00    	jne    1556 <createdelete+0x132>
-      name[0] = 'p' + pi;
-    1482:	8b 45 f0             	mov    -0x10(%ebp),%eax
-    1485:	83 c0 70             	add    $0x70,%eax
-    1488:	88 45 c8             	mov    %al,-0x38(%ebp)
-      name[2] = '\0';
-    148b:	c6 45 ca 00          	movb   $0x0,-0x36(%ebp)
-      for(i = 0; i < N; i++){
-    148f:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
-    1496:	e9 a5 00 00 00       	jmp    1540 <createdelete+0x11c>
-        name[1] = '0' + i;
-    149b:	8b 45 f4             	mov    -0xc(%ebp),%eax
-    149e:	83 c0 30             	add    $0x30,%eax
-    14a1:	88 45 c9             	mov    %al,-0x37(%ebp)
-        fd = open(name, O_CREATE | O_RDWR);
-    14a4:	c7 44 24 04 02 02 00 	movl   $0x202,0x4(%esp)
-    14ab:	00 
-    14ac:	8d 45 c8             	lea    -0x38(%ebp),%eax
-    14af:	89 04 24             	mov    %eax,(%esp)
-    14b2:	e8 e5 2f 00 00       	call   449c <open>
-    14b7:	89 45 e8             	mov    %eax,-0x18(%ebp)
-        if(fd < 0){
-    14ba:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
-    14be:	79 20                	jns    14e0 <createdelete+0xbc>
-          printf(1, "create failed\n");
-    14c0:	c7 44 24 04 f5 4f 00 	movl   $0x4ff5,0x4(%esp)
-    14c7:	00 
-    14c8:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
-    14cf:	e8 27 31 00 00       	call   45fb <printf>
-          exit(EXIT_STATUS_DEFAULT);
-    14d4:	c7 04 24 02 00 00 00 	movl   $0x2,(%esp)
-    14db:	e8 7c 2f 00 00       	call   445c <exit>
-        }
-        close(fd);
-    14e0:	8b 45 e8             	mov    -0x18(%ebp),%eax
-    14e3:	89 04 24             	mov    %eax,(%esp)
-    14e6:	e8 99 2f 00 00       	call   4484 <close>
-        if(i > 0 && (i % 2 ) == 0){
-    14eb:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
-    14ef:	7e 4b                	jle    153c <createdelete+0x118>
-    14f1:	8b 45 f4             	mov    -0xc(%ebp),%eax
-    14f4:	83 e0 01             	and    $0x1,%eax
-    14f7:	85 c0                	test   %eax,%eax
-    14f9:	75 41                	jne    153c <createdelete+0x118>
-          name[1] = '0' + (i / 2);
-    14fb:	8b 45 f4             	mov    -0xc(%ebp),%eax
-    14fe:	89 c2                	mov    %eax,%edx
-    1500:	c1 ea 1f             	shr    $0x1f,%edx
-    1503:	01 d0                	add    %edx,%eax
-    1505:	d1 f8                	sar    %eax
-    1507:	83 c0 30             	add    $0x30,%eax
-    150a:	88 45 c9             	mov    %al,-0x37(%ebp)
-          if(unlink(name) < 0){
-    150d:	8d 45 c8             	lea    -0x38(%ebp),%eax
-    1510:	89 04 24             	mov    %eax,(%esp)
-    1513:	e8 94 2f 00 00       	call   44ac <unlink>
-    1518:	85 c0                	test   %eax,%eax
-    151a:	79 20                	jns    153c <createdelete+0x118>
-            printf(1, "unlink failed\n");
-    151c:	c7 44 24 04 e4 4a 00 	movl   $0x4ae4,0x4(%esp)
-    1523:	00 
-    1524:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
-    152b:	e8 cb 30 00 00       	call   45fb <printf>
-            exit(EXIT_STATUS_DEFAULT);
-    1530:	c7 04 24 02 00 00 00 	movl   $0x2,(%esp)
-    1537:	e8 20 2f 00 00       	call   445c <exit>
-    }
-
-    if(pid == 0){
-      name[0] = 'p' + pi;
-      name[2] = '\0';
-      for(i = 0; i < N; i++){
-    153c:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
-    1540:	83 7d f4 13          	cmpl   $0x13,-0xc(%ebp)
-    1544:	0f 8e 51 ff ff ff    	jle    149b <createdelete+0x77>
-            printf(1, "unlink failed\n");
-            exit(EXIT_STATUS_DEFAULT);
-          }
-        }
-      }
-      exit(EXIT_STATUS_DEFAULT);
-    154a:	c7 04 24 02 00 00 00 	movl   $0x2,(%esp)
-    1551:	e8 06 2f 00 00       	call   445c <exit>
-  int pid, i, fd, pi;
-  char name[32];
-
-  printf(1, "createdelete test\n");
-
-  for(pi = 0; pi < 4; pi++){
-    1556:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)
-    155a:	83 7d f0 03          	cmpl   $0x3,-0x10(%ebp)
-    155e:	0f 8e e6 fe ff ff    	jle    144a <createdelete+0x26>
-      }
-      exit(EXIT_STATUS_DEFAULT);
-    }
-  }
-
-  for(pi = 0; pi < 4; pi++){
-    1564:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
-    156b:	eb 10                	jmp    157d <createdelete+0x159>
-    wait(0);
-    156d:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
-    1574:	e8 eb 2e 00 00       	call   4464 <wait>
-      }
-      exit(EXIT_STATUS_DEFAULT);
-    }
-  }
-
-  for(pi = 0; pi < 4; pi++){
-    1579:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)
-    157d:	83 7d f0 03          	cmpl   $0x3,-0x10(%ebp)
-    1581:	7e ea                	jle    156d <createdelete+0x149>
-    wait(0);
-  }
-
-  name[0] = name[1] = name[2] = 0;
-    1583:	c6 45 ca 00          	movb   $0x0,-0x36(%ebp)
-    1587:	0f b6 45 ca          	movzbl -0x36(%ebp),%eax
-    158b:	88 45 c9             	mov    %al,-0x37(%ebp)
-    158e:	0f b6 45 c9          	movzbl -0x37(%ebp),%eax
-    1592:	88 45 c8             	mov    %al,-0x38(%ebp)
-  for(i = 0; i < N; i++){
-    1595:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
-    159c:	e9 c9 00 00 00       	jmp    166a <createdelete+0x246>
-    for(pi = 0; pi < 4; pi++){
-    15a1:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
-    15a8:	e9 af 00 00 00       	jmp    165c <createdelete+0x238>
-      name[0] = 'p' + pi;
-    15ad:	8b 45 f0             	mov    -0x10(%ebp),%eax
-    15b0:	83 c0 70             	add    $0x70,%eax
-    15b3:	88 45 c8             	mov    %al,-0x38(%ebp)
-      name[1] = '0' + i;
-    15b6:	8b 45 f4             	mov    -0xc(%ebp),%eax
-    15b9:	83 c0 30             	add    $0x30,%eax
-    15bc:	88 45 c9             	mov    %al,-0x37(%ebp)
-      fd = open(name, 0);
-    15bf:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
-    15c6:	00 
-    15c7:	8d 45 c8             	lea    -0x38(%ebp),%eax
-    15ca:	89 04 24             	mov    %eax,(%esp)
-    15cd:	e8 ca 2e 00 00       	call   449c <open>
-    15d2:	89 45 e8             	mov    %eax,-0x18(%ebp)
-      if((i == 0 || i >= N/2) && fd < 0){
-    15d5:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
-    15d9:	74 06                	je     15e1 <createdelete+0x1bd>
-    15db:	83 7d f4 09          	cmpl   $0x9,-0xc(%ebp)
-    15df:	7e 2d                	jle    160e <createdelete+0x1ea>
-    15e1:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
-    15e5:	79 27                	jns    160e <createdelete+0x1ea>
-        printf(1, "oops createdelete %s didn't exist\n", name);
-    15e7:	8d 45 c8             	lea    -0x38(%ebp),%eax
-    15ea:	89 44 24 08          	mov    %eax,0x8(%esp)
-    15ee:	c7 44 24 04 54 50 00 	movl   $0x5054,0x4(%esp)
-    15f5:	00 
-    15f6:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
-    15fd:	e8 f9 2f 00 00       	call   45fb <printf>
-        exit(EXIT_STATUS_DEFAULT);
-    1602:	c7 04 24 02 00 00 00 	movl   $0x2,(%esp)
-    1609:	e8 4e 2e 00 00       	call   445c <exit>
-      } else if((i >= 1 && i < N/2) && fd >= 0){
-    160e:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
-    1612:	7e 33                	jle    1647 <createdelete+0x223>
-    1614:	83 7d f4 09          	cmpl   $0x9,-0xc(%ebp)
-    1618:	7f 2d                	jg     1647 <createdelete+0x223>
-    161a:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
-    161e:	78 27                	js     1647 <createdelete+0x223>
-        printf(1, "oops createdelete %s did exist\n", name);
-    1620:	8d 45 c8             	lea    -0x38(%ebp),%eax
-    1623:	89 44 24 08          	mov    %eax,0x8(%esp)
-    1627:	c7 44 24 04 78 50 00 	movl   $0x5078,0x4(%esp)
-    162e:	00 
-    162f:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
-    1636:	e8 c0 2f 00 00       	call   45fb <printf>
-        exit(EXIT_STATUS_DEFAULT);
-    163b:	c7 04 24 02 00 00 00 	movl   $0x2,(%esp)
-    1642:	e8 15 2e 00 00       	call   445c <exit>
-      }
-      if(fd >= 0)
-    1647:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
-    164b:	78 0b                	js     1658 <createdelete+0x234>
-        close(fd);
-    164d:	8b 45 e8             	mov    -0x18(%ebp),%eax
-    1650:	89 04 24             	mov    %eax,(%esp)
-    1653:	e8 2c 2e 00 00       	call   4484 <close>
-    wait(0);
-  }
-
-  name[0] = name[1] = name[2] = 0;
-  for(i = 0; i < N; i++){
-    for(pi = 0; pi < 4; pi++){
-    1658:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)
-    165c:	83 7d f0 03          	cmpl   $0x3,-0x10(%ebp)
-    1660:	0f 8e 47 ff ff ff    	jle    15ad <createdelete+0x189>
-  for(pi = 0; pi < 4; pi++){
-    wait(0);
-  }
-
-  name[0] = name[1] = name[2] = 0;
-  for(i = 0; i < N; i++){
-    1666:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
-    166a:	83 7d f4 13          	cmpl   $0x13,-0xc(%ebp)
-    166e:	0f 8e 2d ff ff ff    	jle    15a1 <createdelete+0x17d>
-      if(fd >= 0)
-        close(fd);
-    }
-  }
-
-  for(i = 0; i < N; i++){
-    1674:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
-    167b:	eb 34                	jmp    16b1 <createdelete+0x28d>
-    for(pi = 0; pi < 4; pi++){
-    167d:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
-    1684:	eb 21                	jmp    16a7 <createdelete+0x283>
-      name[0] = 'p' + i;
-    1686:	8b 45 f4             	mov    -0xc(%ebp),%eax
-    1689:	83 c0 70             	add    $0x70,%eax
-    168c:	88 45 c8             	mov    %al,-0x38(%ebp)
-      name[1] = '0' + i;
-    168f:	8b 45 f4             	mov    -0xc(%ebp),%eax
-    1692:	83 c0 30             	add    $0x30,%eax
-    1695:	88 45 c9             	mov    %al,-0x37(%ebp)
-      unlink(name);
-    1698:	8d 45 c8             	lea    -0x38(%ebp),%eax
-    169b:	89 04 24             	mov    %eax,(%esp)
-    169e:	e8 09 2e 00 00       	call   44ac <unlink>
-        close(fd);
-    }
-  }
-
-  for(i = 0; i < N; i++){
-    for(pi = 0; pi < 4; pi++){
-    16a3:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)
-    16a7:	83 7d f0 03          	cmpl   $0x3,-0x10(%ebp)
-    16ab:	7e d9                	jle    1686 <createdelete+0x262>
-      if(fd >= 0)
-        close(fd);
-    }
-  }
-
-  for(i = 0; i < N; i++){
-    16ad:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
-    16b1:	83 7d f4 13          	cmpl   $0x13,-0xc(%ebp)
-    16b5:	7e c6                	jle    167d <createdelete+0x259>
-      name[1] = '0' + i;
-      unlink(name);
-    }
-  }
-
-  printf(1, "createdelete ok\n");
-    16b7:	c7 44 24 04 98 50 00 	movl   $0x5098,0x4(%esp)
-    16be:	00 
-    16bf:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
-    16c6:	e8 30 2f 00 00       	call   45fb <printf>
-}
-    16cb:	c9                   	leave  
-    16cc:	c3                   	ret    
-
-000016cd <unlinkread>:
-
-// can I unlink a file and still read it?
-void
-unlinkread(void)
-{
-    16cd:	55                   	push   %ebp
-    16ce:	89 e5                	mov    %esp,%ebp
-    16d0:	83 ec 28             	sub    $0x28,%esp
-  int fd, fd1;
-
-  printf(1, "unlinkread test\n");
-    16d3:	c7 44 24 04 a9 50 00 	movl   $0x50a9,0x4(%esp)
-    16da:	00 
-    16db:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
-    16e2:	e8 14 2f 00 00       	call   45fb <printf>
-  fd = open("unlinkread", O_CREATE | O_RDWR);
-    16e7:	c7 44 24 04 02 02 00 	movl   $0x202,0x4(%esp)
-    16ee:	00 
-    16ef:	c7 04 24 ba 50 00 00 	movl   $0x50ba,(%esp)
-    16f6:	e8 a1 2d 00 00       	call   449c <open>
-    16fb:	89 45 f4             	mov    %eax,-0xc(%ebp)
-  if(fd < 0){
-    16fe:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
-    1702:	79 20                	jns    1724 <unlinkread+0x57>
-    printf(1, "create unlinkread failed\n");
-    1704:	c7 44 24 04 c5 50 00 	movl   $0x50c5,0x4(%esp)
-    170b:	00 
-    170c:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
-    1713:	e8 e3 2e 00 00       	call   45fb <printf>
-    exit(EXIT_STATUS_DEFAULT);
-    1718:	c7 04 24 02 00 00 00 	movl   $0x2,(%esp)
-    171f:	e8 38 2d 00 00       	call   445c <exit>
-  }
-  write(fd, "hello", 5);
-    1724:	c7 44 24 08 05 00 00 	movl   $0x5,0x8(%esp)
-    172b:	00 
-    172c:	c7 44 24 04 df 50 00 	movl   $0x50df,0x4(%esp)
-    1733:	00 
-    1734:	8b 45 f4             	mov    -0xc(%ebp),%eax
-    1737:	89 04 24             	mov    %eax,(%esp)
-    173a:	e8 3d 2d 00 00       	call   447c <write>
-  close(fd);
-    173f:	8b 45 f4             	mov    -0xc(%ebp),%eax
-    1742:	89 04 24             	mov    %eax,(%esp)
-    1745:	e8 3a 2d 00 00       	call   4484 <close>
-
-  fd = open("unlinkread", O_RDWR);
-    174a:	c7 44 24 04 02 00 00 	movl   $0x2,0x4(%esp)
-    1751:	00 
-    1752:	c7 04 24 ba 50 00 00 	movl   $0x50ba,(%esp)
-    1759:	e8 3e 2d 00 00       	call   449c <open>
-    175e:	89 45 f4             	mov    %eax,-0xc(%ebp)
-  if(fd < 0){
-    1761:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
-    1765:	79 20                	jns    1787 <unlinkread+0xba>
-    printf(1, "open unlinkread failed\n");
-    1767:	c7 44 24 04 e5 50 00 	movl   $0x50e5,0x4(%esp)
-    176e:	00 
-    176f:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
-    1776:	e8 80 2e 00 00       	call   45fb <printf>
-    exit(EXIT_STATUS_DEFAULT);
-    177b:	c7 04 24 02 00 00 00 	movl   $0x2,(%esp)
-    1782:	e8 d5 2c 00 00       	call   445c <exit>
-  }
-  if(unlink("unlinkread") != 0){
-    1787:	c7 04 24 ba 50 00 00 	movl   $0x50ba,(%esp)
-    178e:	e8 19 2d 00 00       	call   44ac <unlink>
-    1793:	85 c0                	test   %eax,%eax
-    1795:	74 20                	je     17b7 <unlinkread+0xea>
-    printf(1, "unlink unlinkread failed\n");
-    1797:	c7 44 24 04 fd 50 00 	movl   $0x50fd,0x4(%esp)
-    179e:	00 
-    179f:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
-    17a6:	e8 50 2e 00 00       	call   45fb <printf>
-    exit(EXIT_STATUS_DEFAULT);
-    17ab:	c7 04 24 02 00 00 00 	movl   $0x2,(%esp)
-    17b2:	e8 a5 2c 00 00       	call   445c <exit>
-  }
-
-  fd1 = open("unlinkread", O_CREATE | O_RDWR);
-    17b7:	c7 44 24 04 02 02 00 	movl   $0x202,0x4(%esp)
-    17be:	00 
-    17bf:	c7 04 24 ba 50 00 00 	movl   $0x50ba,(%esp)
-    17c6:	e8 d1 2c 00 00       	call   449c <open>
-    17cb:	89 45 f0             	mov    %eax,-0x10(%ebp)
-  write(fd1, "yyy", 3);
-    17ce:	c7 44 24 08 03 00 00 	movl   $0x3,0x8(%esp)
-    17d5:	00 
-    17d6:	c7 44 24 04 17 51 00 	movl   $0x5117,0x4(%esp)
-    17dd:	00 
-    17de:	8b 45 f0             	mov    -0x10(%ebp),%eax
-    17e1:	89 04 24             	mov    %eax,(%esp)
-    17e4:	e8 93 2c 00 00       	call   447c <write>
-  close(fd1);
-    17e9:	8b 45 f0             	mov    -0x10(%ebp),%eax
-    17ec:	89 04 24             	mov    %eax,(%esp)
-    17ef:	e8 90 2c 00 00       	call   4484 <close>
-
-  if(read(fd, buf, sizeof(buf)) != 5){
-    17f4:	c7 44 24 08 00 20 00 	movl   $0x2000,0x8(%esp)
-    17fb:	00 
-    17fc:	c7 44 24 04 60 90 00 	movl   $0x9060,0x4(%esp)
-    1803:	00 
-    1804:	8b 45 f4             	mov    -0xc(%ebp),%eax
-    1807:	89 04 24             	mov    %eax,(%esp)
-    180a:	e8 65 2c 00 00       	call   4474 <read>
-    180f:	83 f8 05             	cmp    $0x5,%eax
-    1812:	74 20                	je     1834 <unlinkread+0x167>
-    printf(1, "unlinkread read failed");
-    1814:	c7 44 24 04 1b 51 00 	movl   $0x511b,0x4(%esp)
-    181b:	00 
-    181c:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
-    1823:	e8 d3 2d 00 00       	call   45fb <printf>
-    exit(EXIT_STATUS_DEFAULT);
-    1828:	c7 04 24 02 00 00 00 	movl   $0x2,(%esp)
-    182f:	e8 28 2c 00 00       	call   445c <exit>
-  }
-  if(buf[0] != 'h'){
-    1834:	0f b6 05 60 90 00 00 	movzbl 0x9060,%eax
-    183b:	3c 68                	cmp    $0x68,%al
-    183d:	74 20                	je     185f <unlinkread+0x192>
-    printf(1, "unlinkread wrong data\n");
-    183f:	c7 44 24 04 32 51 00 	movl   $0x5132,0x4(%esp)
-    1846:	00 
-    1847:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
-    184e:	e8 a8 2d 00 00       	call   45fb <printf>
-    exit(EXIT_STATUS_DEFAULT);
-    1853:	c7 04 24 02 00 00 00 	movl   $0x2,(%esp)
-    185a:	e8 fd 2b 00 00       	call   445c <exit>
-  }
-  if(write(fd, buf, 10) != 10){
-    185f:	c7 44 24 08 0a 00 00 	movl   $0xa,0x8(%esp)
-    1866:	00 
-    1867:	c7 44 24 04 60 90 00 	movl   $0x9060,0x4(%esp)
-    186e:	00 
-    186f:	8b 45 f4             	mov    -0xc(%ebp),%eax
-    1872:	89 04 24             	mov    %eax,(%esp)
-    1875:	e8 02 2c 00 00       	call   447c <write>
-    187a:	83 f8 0a             	cmp    $0xa,%eax
-    187d:	74 20                	je     189f <unlinkread+0x1d2>
-    printf(1, "unlinkread write failed\n");
-    187f:	c7 44 24 04 49 51 00 	movl   $0x5149,0x4(%esp)
-    1886:	00 
-    1887:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
-    188e:	e8 68 2d 00 00       	call   45fb <printf>
-    exit(EXIT_STATUS_DEFAULT);
-    1893:	c7 04 24 02 00 00 00 	movl   $0x2,(%esp)
-    189a:	e8 bd 2b 00 00       	call   445c <exit>
-  }
-  close(fd);
-    189f:	8b 45 f4             	mov    -0xc(%ebp),%eax
-    18a2:	89 04 24             	mov    %eax,(%esp)
-    18a5:	e8 da 2b 00 00       	call   4484 <close>
-  unlink("unlinkread");
-    18aa:	c7 04 24 ba 50 00 00 	movl   $0x50ba,(%esp)
-    18b1:	e8 f6 2b 00 00       	call   44ac <unlink>
-  printf(1, "unlinkread ok\n");
-    18b6:	c7 44 24 04 62 51 00 	movl   $0x5162,0x4(%esp)
-    18bd:	00 
-    18be:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
-    18c5:	e8 31 2d 00 00       	call   45fb <printf>
-}
-    18ca:	c9                   	leave  
-    18cb:	c3                   	ret    
-
-000018cc <linktest>:
-
-void
-linktest(void)
-{
-    18cc:	55                   	push   %ebp
-    18cd:	89 e5                	mov    %esp,%ebp
-    18cf:	83 ec 28             	sub    $0x28,%esp
-  int fd;
-
-  printf(1, "linktest\n");
-    18d2:	c7 44 24 04 71 51 00 	movl   $0x5171,0x4(%esp)
-    18d9:	00 
-    18da:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
-    18e1:	e8 15 2d 00 00       	call   45fb <printf>
-
-  unlink("lf1");
-    18e6:	c7 04 24 7b 51 00 00 	movl   $0x517b,(%esp)
-    18ed:	e8 ba 2b 00 00       	call   44ac <unlink>
-  unlink("lf2");
-    18f2:	c7 04 24 7f 51 00 00 	movl   $0x517f,(%esp)
-    18f9:	e8 ae 2b 00 00       	call   44ac <unlink>
-
-  fd = open("lf1", O_CREATE|O_RDWR);
-    18fe:	c7 44 24 04 02 02 00 	movl   $0x202,0x4(%esp)
-    1905:	00 
-    1906:	c7 04 24 7b 51 00 00 	movl   $0x517b,(%esp)
-    190d:	e8 8a 2b 00 00       	call   449c <open>
-    1912:	89 45 f4             	mov    %eax,-0xc(%ebp)
-  if(fd < 0){
-    1915:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
-    1919:	79 20                	jns    193b <linktest+0x6f>
-    printf(1, "create lf1 failed\n");
-    191b:	c7 44 24 04 83 51 00 	movl   $0x5183,0x4(%esp)
-    1922:	00 
-    1923:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
-    192a:	e8 cc 2c 00 00       	call   45fb <printf>
-    exit(EXIT_STATUS_DEFAULT);
-    192f:	c7 04 24 02 00 00 00 	movl   $0x2,(%esp)
-    1936:	e8 21 2b 00 00       	call   445c <exit>
-  }
-  if(write(fd, "hello", 5) != 5){
-    193b:	c7 44 24 08 05 00 00 	movl   $0x5,0x8(%esp)
-    1942:	00 
-    1943:	c7 44 24 04 df 50 00 	movl   $0x50df,0x4(%esp)
-    194a:	00 
-    194b:	8b 45 f4             	mov    -0xc(%ebp),%eax
-    194e:	89 04 24             	mov    %eax,(%esp)
-    1951:	e8 26 2b 00 00       	call   447c <write>
-    1956:	83 f8 05             	cmp    $0x5,%eax
-    1959:	74 20                	je     197b <linktest+0xaf>
-    printf(1, "write lf1 failed\n");
-    195b:	c7 44 24 04 96 51 00 	movl   $0x5196,0x4(%esp)
-    1962:	00 
-    1963:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
-    196a:	e8 8c 2c 00 00       	call   45fb <printf>
-    exit(EXIT_STATUS_DEFAULT);
-    196f:	c7 04 24 02 00 00 00 	movl   $0x2,(%esp)
-    1976:	e8 e1 2a 00 00       	call   445c <exit>
-  }
-  close(fd);
-    197b:	8b 45 f4             	mov    -0xc(%ebp),%eax
-    197e:	89 04 24             	mov    %eax,(%esp)
-    1981:	e8 fe 2a 00 00       	call   4484 <close>
-
-  if(link("lf1", "lf2") < 0){
-    1986:	c7 44 24 04 7f 51 00 	movl   $0x517f,0x4(%esp)
-    198d:	00 
-    198e:	c7 04 24 7b 51 00 00 	movl   $0x517b,(%esp)
-    1995:	e8 22 2b 00 00       	call   44bc <link>
-    199a:	85 c0                	test   %eax,%eax
-    199c:	79 20                	jns    19be <linktest+0xf2>
-    printf(1, "link lf1 lf2 failed\n");
-    199e:	c7 44 24 04 a8 51 00 	movl   $0x51a8,0x4(%esp)
-    19a5:	00 
-    19a6:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
-    19ad:	e8 49 2c 00 00       	call   45fb <printf>
-    exit(EXIT_STATUS_DEFAULT);
-    19b2:	c7 04 24 02 00 00 00 	movl   $0x2,(%esp)
-    19b9:	e8 9e 2a 00 00       	call   445c <exit>
-  }
-  unlink("lf1");
-    19be:	c7 04 24 7b 51 00 00 	movl   $0x517b,(%esp)
-    19c5:	e8 e2 2a 00 00       	call   44ac <unlink>
-
-  if(open("lf1", 0) >= 0){
-    19ca:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
-    19d1:	00 
-    19d2:	c7 04 24 7b 51 00 00 	movl   $0x517b,(%esp)
-    19d9:	e8 be 2a 00 00       	call   449c <open>
-    19de:	85 c0                	test   %eax,%eax
-    19e0:	78 20                	js     1a02 <linktest+0x136>
-    printf(1, "unlinked lf1 but it is still there!\n");
-    19e2:	c7 44 24 04 c0 51 00 	movl   $0x51c0,0x4(%esp)
-    19e9:	00 
-    19ea:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
-    19f1:	e8 05 2c 00 00       	call   45fb <printf>
-    exit(EXIT_STATUS_DEFAULT);
-    19f6:	c7 04 24 02 00 00 00 	movl   $0x2,(%esp)
-    19fd:	e8 5a 2a 00 00       	call   445c <exit>
-  }
-
-  fd = open("lf2", 0);
-    1a02:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
-    1a09:	00 
-    1a0a:	c7 04 24 7f 51 00 00 	movl   $0x517f,(%esp)
-    1a11:	e8 86 2a 00 00       	call   449c <open>
-    1a16:	89 45 f4             	mov    %eax,-0xc(%ebp)
-  if(fd < 0){
-    1a19:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
-    1a1d:	79 20                	jns    1a3f <linktest+0x173>
-    printf(1, "open lf2 failed\n");
-    1a1f:	c7 44 24 04 e5 51 00 	movl   $0x51e5,0x4(%esp)
-    1a26:	00 
-    1a27:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
-    1a2e:	e8 c8 2b 00 00       	call   45fb <printf>
-    exit(EXIT_STATUS_DEFAULT);
-    1a33:	c7 04 24 02 00 00 00 	movl   $0x2,(%esp)
-    1a3a:	e8 1d 2a 00 00       	call   445c <exit>
-  }
-  if(read(fd, buf, sizeof(buf)) != 5){
-    1a3f:	c7 44 24 08 00 20 00 	movl   $0x2000,0x8(%esp)
-    1a46:	00 
-    1a47:	c7 44 24 04 60 90 00 	movl   $0x9060,0x4(%esp)
-    1a4e:	00 
-    1a4f:	8b 45 f4             	mov    -0xc(%ebp),%eax
-    1a52:	89 04 24             	mov    %eax,(%esp)
-    1a55:	e8 1a 2a 00 00       	call   4474 <read>
-    1a5a:	83 f8 05             	cmp    $0x5,%eax
-    1a5d:	74 20                	je     1a7f <linktest+0x1b3>
-    printf(1, "read lf2 failed\n");
-    1a5f:	c7 44 24 04 f6 51 00 	movl   $0x51f6,0x4(%esp)
-    1a66:	00 
-    1a67:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
-    1a6e:	e8 88 2b 00 00       	call   45fb <printf>
-    exit(EXIT_STATUS_DEFAULT);
-    1a73:	c7 04 24 02 00 00 00 	movl   $0x2,(%esp)
-    1a7a:	e8 dd 29 00 00       	call   445c <exit>
-  }
-  close(fd);
-    1a7f:	8b 45 f4             	mov    -0xc(%ebp),%eax
-    1a82:	89 04 24             	mov    %eax,(%esp)
-    1a85:	e8 fa 29 00 00       	call   4484 <close>
-
-  if(link("lf2", "lf2") >= 0){
-    1a8a:	c7 44 24 04 7f 51 00 	movl   $0x517f,0x4(%esp)
-    1a91:	00 
-    1a92:	c7 04 24 7f 51 00 00 	movl   $0x517f,(%esp)
-    1a99:	e8 1e 2a 00 00       	call   44bc <link>
-    1a9e:	85 c0                	test   %eax,%eax
-    1aa0:	78 20                	js     1ac2 <linktest+0x1f6>
-    printf(1, "link lf2 lf2 succeeded! oops\n");
-    1aa2:	c7 44 24 04 07 52 00 	movl   $0x5207,0x4(%esp)
-    1aa9:	00 
-    1aaa:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
-    1ab1:	e8 45 2b 00 00       	call   45fb <printf>
-    exit(EXIT_STATUS_DEFAULT);
-    1ab6:	c7 04 24 02 00 00 00 	movl   $0x2,(%esp)
-    1abd:	e8 9a 29 00 00       	call   445c <exit>
-  }
-
-  unlink("lf2");
-    1ac2:	c7 04 24 7f 51 00 00 	movl   $0x517f,(%esp)
-    1ac9:	e8 de 29 00 00       	call   44ac <unlink>
-  if(link("lf2", "lf1") >= 0){
-    1ace:	c7 44 24 04 7b 51 00 	movl   $0x517b,0x4(%esp)
-    1ad5:	00 
-    1ad6:	c7 04 24 7f 51 00 00 	movl   $0x517f,(%esp)
-    1add:	e8 da 29 00 00       	call   44bc <link>
-    1ae2:	85 c0                	test   %eax,%eax
-    1ae4:	78 20                	js     1b06 <linktest+0x23a>
-    printf(1, "link non-existant succeeded! oops\n");
-    1ae6:	c7 44 24 04 28 52 00 	movl   $0x5228,0x4(%esp)
-    1aed:	00 
-    1aee:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
-    1af5:	e8 01 2b 00 00       	call   45fb <printf>
-    exit(EXIT_STATUS_DEFAULT);
-    1afa:	c7 04 24 02 00 00 00 	movl   $0x2,(%esp)
-    1b01:	e8 56 29 00 00       	call   445c <exit>
-  }
-
-  if(link(".", "lf1") >= 0){
-    1b06:	c7 44 24 04 7b 51 00 	movl   $0x517b,0x4(%esp)
-    1b0d:	00 
-    1b0e:	c7 04 24 4b 52 00 00 	movl   $0x524b,(%esp)
-    1b15:	e8 a2 29 00 00       	call   44bc <link>
-    1b1a:	85 c0                	test   %eax,%eax
-    1b1c:	78 20                	js     1b3e <linktest+0x272>
-    printf(1, "link . lf1 succeeded! oops\n");
-    1b1e:	c7 44 24 04 4d 52 00 	movl   $0x524d,0x4(%esp)
-    1b25:	00 
-    1b26:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
-    1b2d:	e8 c9 2a 00 00       	call   45fb <printf>
-    exit(EXIT_STATUS_DEFAULT);
-    1b32:	c7 04 24 02 00 00 00 	movl   $0x2,(%esp)
-    1b39:	e8 1e 29 00 00       	call   445c <exit>
-  }
-
-  printf(1, "linktest ok\n");
-    1b3e:	c7 44 24 04 69 52 00 	movl   $0x5269,0x4(%esp)
-    1b45:	00 
-    1b46:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
-    1b4d:	e8 a9 2a 00 00       	call   45fb <printf>
-}
-    1b52:	c9                   	leave  
-    1b53:	c3                   	ret    
-
-00001b54 <concreate>:
-
-// test concurrent create/link/unlink of the same file
-void
-concreate(void)
-{
-    1b54:	55                   	push   %ebp
-    1b55:	89 e5                	mov    %esp,%ebp
-    1b57:	83 ec 68             	sub    $0x68,%esp
-  struct {
-    ushort inum;
-    char name[14];
-  } de;
-
-  printf(1, "concreate test\n");
-    1b5a:	c7 44 24 04 76 52 00 	movl   $0x5276,0x4(%esp)
-    1b61:	00 
-    1b62:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
-    1b69:	e8 8d 2a 00 00       	call   45fb <printf>
-  file[0] = 'C';
-    1b6e:	c6 45 e5 43          	movb   $0x43,-0x1b(%ebp)
-  file[2] = '\0';
-    1b72:	c6 45 e7 00          	movb   $0x0,-0x19(%ebp)
-  for(i = 0; i < 40; i++){
-    1b76:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
-    1b7d:	e9 0c 01 00 00       	jmp    1c8e <concreate+0x13a>
-    file[1] = '0' + i;
-    1b82:	8b 45 f4             	mov    -0xc(%ebp),%eax
-    1b85:	83 c0 30             	add    $0x30,%eax
-    1b88:	88 45 e6             	mov    %al,-0x1a(%ebp)
-    unlink(file);
-    1b8b:	8d 45 e5             	lea    -0x1b(%ebp),%eax
-    1b8e:	89 04 24             	mov    %eax,(%esp)
-    1b91:	e8 16 29 00 00       	call   44ac <unlink>
-    pid = fork();
-    1b96:	e8 b9 28 00 00       	call   4454 <fork>
-    1b9b:	89 45 ec             	mov    %eax,-0x14(%ebp)
-    if(pid && (i % 3) == 1){
-    1b9e:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
-    1ba2:	74 3a                	je     1bde <concreate+0x8a>
-    1ba4:	8b 4d f4             	mov    -0xc(%ebp),%ecx
-    1ba7:	ba 56 55 55 55       	mov    $0x55555556,%edx
-    1bac:	89 c8                	mov    %ecx,%eax
-    1bae:	f7 ea                	imul   %edx
-    1bb0:	89 c8                	mov    %ecx,%eax
-    1bb2:	c1 f8 1f             	sar    $0x1f,%eax
-    1bb5:	29 c2                	sub    %eax,%edx
-    1bb7:	89 d0                	mov    %edx,%eax
-    1bb9:	01 c0                	add    %eax,%eax
-    1bbb:	01 d0                	add    %edx,%eax
-    1bbd:	89 ca                	mov    %ecx,%edx
-    1bbf:	29 c2                	sub    %eax,%edx
-    1bc1:	83 fa 01             	cmp    $0x1,%edx
-    1bc4:	75 18                	jne    1bde <concreate+0x8a>
-      link("C0", file);
-    1bc6:	8d 45 e5             	lea    -0x1b(%ebp),%eax
-    1bc9:	89 44 24 04          	mov    %eax,0x4(%esp)
-    1bcd:	c7 04 24 86 52 00 00 	movl   $0x5286,(%esp)
-    1bd4:	e8 e3 28 00 00       	call   44bc <link>
-    1bd9:	e9 8e 00 00 00       	jmp    1c6c <concreate+0x118>
-    } else if(pid == 0 && (i % 5) == 1){
-    1bde:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
-    1be2:	75 3a                	jne    1c1e <concreate+0xca>
-    1be4:	8b 4d f4             	mov    -0xc(%ebp),%ecx
-    1be7:	ba 67 66 66 66       	mov    $0x66666667,%edx
-    1bec:	89 c8                	mov    %ecx,%eax
-    1bee:	f7 ea                	imul   %edx
-    1bf0:	d1 fa                	sar    %edx
-    1bf2:	89 c8                	mov    %ecx,%eax
-    1bf4:	c1 f8 1f             	sar    $0x1f,%eax
-    1bf7:	29 c2                	sub    %eax,%edx
-    1bf9:	89 d0                	mov    %edx,%eax
-    1bfb:	c1 e0 02             	shl    $0x2,%eax
-    1bfe:	01 d0                	add    %edx,%eax
-    1c00:	89 ca                	mov    %ecx,%edx
-    1c02:	29 c2                	sub    %eax,%edx
-    1c04:	83 fa 01             	cmp    $0x1,%edx
-    1c07:	75 15                	jne    1c1e <concreate+0xca>
-      link("C0", file);
-    1c09:	8d 45 e5             	lea    -0x1b(%ebp),%eax
-    1c0c:	89 44 24 04          	mov    %eax,0x4(%esp)
-    1c10:	c7 04 24 86 52 00 00 	movl   $0x5286,(%esp)
-    1c17:	e8 a0 28 00 00       	call   44bc <link>
-    1c1c:	eb 4e                	jmp    1c6c <concreate+0x118>
-    } else {
-      fd = open(file, O_CREATE | O_RDWR);
-    1c1e:	c7 44 24 04 02 02 00 	movl   $0x202,0x4(%esp)
-    1c25:	00 
-    1c26:	8d 45 e5             	lea    -0x1b(%ebp),%eax
-    1c29:	89 04 24             	mov    %eax,(%esp)
-    1c2c:	e8 6b 28 00 00       	call   449c <open>
-    1c31:	89 45 e8             	mov    %eax,-0x18(%ebp)
-      if(fd < 0){
-    1c34:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
-    1c38:	79 27                	jns    1c61 <concreate+0x10d>
-        printf(1, "concreate create %s failed\n", file);
-    1c3a:	8d 45 e5             	lea    -0x1b(%ebp),%eax
-    1c3d:	89 44 24 08          	mov    %eax,0x8(%esp)
-    1c41:	c7 44 24 04 89 52 00 	movl   $0x5289,0x4(%esp)
-    1c48:	00 
-    1c49:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
-    1c50:	e8 a6 29 00 00       	call   45fb <printf>
-        exit(EXIT_STATUS_DEFAULT);
-    1c55:	c7 04 24 02 00 00 00 	movl   $0x2,(%esp)
-    1c5c:	e8 fb 27 00 00       	call   445c <exit>
-      }
-      close(fd);
-    1c61:	8b 45 e8             	mov    -0x18(%ebp),%eax
-    1c64:	89 04 24             	mov    %eax,(%esp)
-    1c67:	e8 18 28 00 00       	call   4484 <close>
-    }
-    if(pid == 0)
-    1c6c:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
-    1c70:	75 0c                	jne    1c7e <concreate+0x12a>
-      exit(EXIT_STATUS_DEFAULT);
-    1c72:	c7 04 24 02 00 00 00 	movl   $0x2,(%esp)
-    1c79:	e8 de 27 00 00       	call   445c <exit>
-    else
-      wait(0);
-    1c7e:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
-    1c85:	e8 da 27 00 00       	call   4464 <wait>
-  } de;
-
-  printf(1, "concreate test\n");
-  file[0] = 'C';
-  file[2] = '\0';
-  for(i = 0; i < 40; i++){
-    1c8a:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
-    1c8e:	83 7d f4 27          	cmpl   $0x27,-0xc(%ebp)
-    1c92:	0f 8e ea fe ff ff    	jle    1b82 <concreate+0x2e>
-      exit(EXIT_STATUS_DEFAULT);
-    else
-      wait(0);
-  }
-
-  memset(fa, 0, sizeof(fa));
-    1c98:	c7 44 24 08 28 00 00 	movl   $0x28,0x8(%esp)
-    1c9f:	00 
-    1ca0:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
-    1ca7:	00 
-    1ca8:	8d 45 bd             	lea    -0x43(%ebp),%eax
-    1cab:	89 04 24             	mov    %eax,(%esp)
-    1cae:	e8 04 26 00 00       	call   42b7 <memset>
-  fd = open(".", 0);
-    1cb3:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
-    1cba:	00 
-    1cbb:	c7 04 24 4b 52 00 00 	movl   $0x524b,(%esp)
-    1cc2:	e8 d5 27 00 00       	call   449c <open>
-    1cc7:	89 45 e8             	mov    %eax,-0x18(%ebp)
-  n = 0;
-    1cca:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
-  while(read(fd, &de, sizeof(de)) > 0){
-    1cd1:	e9 b1 00 00 00       	jmp    1d87 <concreate+0x233>
-    if(de.inum == 0)
-    1cd6:	0f b7 45 ac          	movzwl -0x54(%ebp),%eax
-    1cda:	66 85 c0             	test   %ax,%ax
-    1cdd:	0f 84 a3 00 00 00    	je     1d86 <concreate+0x232>
-      continue;
-    if(de.name[0] == 'C' && de.name[2] == '\0'){
-    1ce3:	0f b6 45 ae          	movzbl -0x52(%ebp),%eax
-    1ce7:	3c 43                	cmp    $0x43,%al
-    1ce9:	0f 85 98 00 00 00    	jne    1d87 <concreate+0x233>
-    1cef:	0f b6 45 b0          	movzbl -0x50(%ebp),%eax
-    1cf3:	84 c0                	test   %al,%al
-    1cf5:	0f 85 8c 00 00 00    	jne    1d87 <concreate+0x233>
-      i = de.name[1] - '0';
-    1cfb:	0f b6 45 af          	movzbl -0x51(%ebp),%eax
-    1cff:	0f be c0             	movsbl %al,%eax
-    1d02:	83 e8 30             	sub    $0x30,%eax
-    1d05:	89 45 f4             	mov    %eax,-0xc(%ebp)
-      if(i < 0 || i >= sizeof(fa)){
-    1d08:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
-    1d0c:	78 08                	js     1d16 <concreate+0x1c2>
-    1d0e:	8b 45 f4             	mov    -0xc(%ebp),%eax
-    1d11:	83 f8 27             	cmp    $0x27,%eax
-    1d14:	76 2a                	jbe    1d40 <concreate+0x1ec>
-        printf(1, "concreate weird file %s\n", de.name);
-    1d16:	8d 45 ac             	lea    -0x54(%ebp),%eax
-    1d19:	83 c0 02             	add    $0x2,%eax
-    1d1c:	89 44 24 08          	mov    %eax,0x8(%esp)
-    1d20:	c7 44 24 04 a5 52 00 	movl   $0x52a5,0x4(%esp)
-    1d27:	00 
-    1d28:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
-    1d2f:	e8 c7 28 00 00       	call   45fb <printf>
-        exit(EXIT_STATUS_DEFAULT);
-    1d34:	c7 04 24 02 00 00 00 	movl   $0x2,(%esp)
-    1d3b:	e8 1c 27 00 00       	call   445c <exit>
-      }
-      if(fa[i]){
-    1d40:	8d 45 bd             	lea    -0x43(%ebp),%eax
-    1d43:	03 45 f4             	add    -0xc(%ebp),%eax
-    1d46:	0f b6 00             	movzbl (%eax),%eax
-    1d49:	84 c0                	test   %al,%al
-    1d4b:	74 2a                	je     1d77 <concreate+0x223>
-        printf(1, "concreate duplicate file %s\n", de.name);
-    1d4d:	8d 45 ac             	lea    -0x54(%ebp),%eax
-    1d50:	83 c0 02             	add    $0x2,%eax
-    1d53:	89 44 24 08          	mov    %eax,0x8(%esp)
-    1d57:	c7 44 24 04 be 52 00 	movl   $0x52be,0x4(%esp)
-    1d5e:	00 
-    1d5f:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
-    1d66:	e8 90 28 00 00       	call   45fb <printf>
-        exit(EXIT_STATUS_DEFAULT);
-    1d6b:	c7 04 24 02 00 00 00 	movl   $0x2,(%esp)
-    1d72:	e8 e5 26 00 00       	call   445c <exit>
-      }
-      fa[i] = 1;
-    1d77:	8d 45 bd             	lea    -0x43(%ebp),%eax
-    1d7a:	03 45 f4             	add    -0xc(%ebp),%eax
-    1d7d:	c6 00 01             	movb   $0x1,(%eax)
-      n++;
-    1d80:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)
-    1d84:	eb 01                	jmp    1d87 <concreate+0x233>
-  memset(fa, 0, sizeof(fa));
-  fd = open(".", 0);
-  n = 0;
-  while(read(fd, &de, sizeof(de)) > 0){
-    if(de.inum == 0)
-      continue;
-    1d86:	90                   	nop
-  }
-
-  memset(fa, 0, sizeof(fa));
-  fd = open(".", 0);
-  n = 0;
-  while(read(fd, &de, sizeof(de)) > 0){
-    1d87:	c7 44 24 08 10 00 00 	movl   $0x10,0x8(%esp)
-    1d8e:	00 
-    1d8f:	8d 45 ac             	lea    -0x54(%ebp),%eax
-    1d92:	89 44 24 04          	mov    %eax,0x4(%esp)
-    1d96:	8b 45 e8             	mov    -0x18(%ebp),%eax
-    1d99:	89 04 24             	mov    %eax,(%esp)
-    1d9c:	e8 d3 26 00 00       	call   4474 <read>
-    1da1:	85 c0                	test   %eax,%eax
-    1da3:	0f 8f 2d ff ff ff    	jg     1cd6 <concreate+0x182>
-      }
-      fa[i] = 1;
-      n++;
-    }
-  }
-  close(fd);
-    1da9:	8b 45 e8             	mov    -0x18(%ebp),%eax
-    1dac:	89 04 24             	mov    %eax,(%esp)
-    1daf:	e8 d0 26 00 00       	call   4484 <close>
-
-  if(n != 40){
-    1db4:	83 7d f0 28          	cmpl   $0x28,-0x10(%ebp)
-    1db8:	74 20                	je     1dda <concreate+0x286>
-    printf(1, "concreate not enough files in directory listing\n");
-    1dba:	c7 44 24 04 dc 52 00 	movl   $0x52dc,0x4(%esp)
-    1dc1:	00 
-    1dc2:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
-    1dc9:	e8 2d 28 00 00       	call   45fb <printf>
-    exit(EXIT_STATUS_DEFAULT);
-    1dce:	c7 04 24 02 00 00 00 	movl   $0x2,(%esp)
-    1dd5:	e8 82 26 00 00       	call   445c <exit>
-  }
-
-  for(i = 0; i < 40; i++){
-    1dda:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
-    1de1:	e9 42 01 00 00       	jmp    1f28 <concreate+0x3d4>
-    file[1] = '0' + i;
-    1de6:	8b 45 f4             	mov    -0xc(%ebp),%eax
-    1de9:	83 c0 30             	add    $0x30,%eax
-    1dec:	88 45 e6             	mov    %al,-0x1a(%ebp)
-    pid = fork();
-    1def:	e8 60 26 00 00       	call   4454 <fork>
-    1df4:	89 45 ec             	mov    %eax,-0x14(%ebp)
-    if(pid < 0){
-    1df7:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
-    1dfb:	79 20                	jns    1e1d <concreate+0x2c9>
-      printf(1, "fork failed\n");
-    1dfd:	c7 44 24 04 61 4a 00 	movl   $0x4a61,0x4(%esp)
-    1e04:	00 
-    1e05:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
-    1e0c:	e8 ea 27 00 00       	call   45fb <printf>
-      exit(EXIT_STATUS_DEFAULT);
-    1e11:	c7 04 24 02 00 00 00 	movl   $0x2,(%esp)
-    1e18:	e8 3f 26 00 00       	call   445c <exit>
-    }
-    if(((i % 3) == 0 && pid == 0) ||
-    1e1d:	8b 4d f4             	mov    -0xc(%ebp),%ecx
-    1e20:	ba 56 55 55 55       	mov    $0x55555556,%edx
-    1e25:	89 c8                	mov    %ecx,%eax
-    1e27:	f7 ea                	imul   %edx
-    1e29:	89 c8                	mov    %ecx,%eax
-    1e2b:	c1 f8 1f             	sar    $0x1f,%eax
-    1e2e:	29 c2                	sub    %eax,%edx
-    1e30:	89 d0                	mov    %edx,%eax
-    1e32:	01 c0                	add    %eax,%eax
-    1e34:	01 d0                	add    %edx,%eax
-    1e36:	89 ca                	mov    %ecx,%edx
-    1e38:	29 c2                	sub    %eax,%edx
-    1e3a:	85 d2                	test   %edx,%edx
-    1e3c:	75 06                	jne    1e44 <concreate+0x2f0>
-    1e3e:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
-    1e42:	74 28                	je     1e6c <concreate+0x318>
-       ((i % 3) == 1 && pid != 0)){
-    1e44:	8b 4d f4             	mov    -0xc(%ebp),%ecx
-    1e47:	ba 56 55 55 55       	mov    $0x55555556,%edx
-    1e4c:	89 c8                	mov    %ecx,%eax
-    1e4e:	f7 ea                	imul   %edx
-    1e50:	89 c8                	mov    %ecx,%eax
-    1e52:	c1 f8 1f             	sar    $0x1f,%eax
-    1e55:	29 c2                	sub    %eax,%edx
-    1e57:	89 d0                	mov    %edx,%eax
-    1e59:	01 c0                	add    %eax,%eax
-    1e5b:	01 d0                	add    %edx,%eax
-    1e5d:	89 ca                	mov    %ecx,%edx
-    1e5f:	29 c2                	sub    %eax,%edx
-    pid = fork();
-    if(pid < 0){
-      printf(1, "fork failed\n");
-      exit(EXIT_STATUS_DEFAULT);
-    }
-    if(((i % 3) == 0 && pid == 0) ||
-    1e61:	83 fa 01             	cmp    $0x1,%edx
-    1e64:	75 74                	jne    1eda <concreate+0x386>
-       ((i % 3) == 1 && pid != 0)){
-    1e66:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
-    1e6a:	74 6e                	je     1eda <concreate+0x386>
-      close(open(file, 0));
-    1e6c:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
-    1e73:	00 
-    1e74:	8d 45 e5             	lea    -0x1b(%ebp),%eax
-    1e77:	89 04 24             	mov    %eax,(%esp)
-    1e7a:	e8 1d 26 00 00       	call   449c <open>
-    1e7f:	89 04 24             	mov    %eax,(%esp)
-    1e82:	e8 fd 25 00 00       	call   4484 <close>
-      close(open(file, 0));
-    1e87:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
-    1e8e:	00 
-    1e8f:	8d 45 e5             	lea    -0x1b(%ebp),%eax
-    1e92:	89 04 24             	mov    %eax,(%esp)
-    1e95:	e8 02 26 00 00       	call   449c <open>
-    1e9a:	89 04 24             	mov    %eax,(%esp)
-    1e9d:	e8 e2 25 00 00       	call   4484 <close>
-      close(open(file, 0));
-    1ea2:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
-    1ea9:	00 
-    1eaa:	8d 45 e5             	lea    -0x1b(%ebp),%eax
-    1ead:	89 04 24             	mov    %eax,(%esp)
-    1eb0:	e8 e7 25 00 00       	call   449c <open>
-    1eb5:	89 04 24             	mov    %eax,(%esp)
-    1eb8:	e8 c7 25 00 00       	call   4484 <close>
-      close(open(file, 0));
-    1ebd:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
-    1ec4:	00 
-    1ec5:	8d 45 e5             	lea    -0x1b(%ebp),%eax
-    1ec8:	89 04 24             	mov    %eax,(%esp)
-    1ecb:	e8 cc 25 00 00       	call   449c <open>
-    1ed0:	89 04 24             	mov    %eax,(%esp)
-    1ed3:	e8 ac 25 00 00       	call   4484 <close>
-    1ed8:	eb 2c                	jmp    1f06 <concreate+0x3b2>
-    } else {
-      unlink(file);
-    1eda:	8d 45 e5             	lea    -0x1b(%ebp),%eax
-    1edd:	89 04 24             	mov    %eax,(%esp)
-    1ee0:	e8 c7 25 00 00       	call   44ac <unlink>
-      unlink(file);
-    1ee5:	8d 45 e5             	lea    -0x1b(%ebp),%eax
-    1ee8:	89 04 24             	mov    %eax,(%esp)
-    1eeb:	e8 bc 25 00 00       	call   44ac <unlink>
-      unlink(file);
-    1ef0:	8d 45 e5             	lea    -0x1b(%ebp),%eax
-    1ef3:	89 04 24             	mov    %eax,(%esp)
-    1ef6:	e8 b1 25 00 00       	call   44ac <unlink>
-      unlink(file);
-    1efb:	8d 45 e5             	lea    -0x1b(%ebp),%eax
-    1efe:	89 04 24             	mov    %eax,(%esp)
-    1f01:	e8 a6 25 00 00       	call   44ac <unlink>
-    }
-    if(pid == 0)
-    1f06:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
-    1f0a:	75 0c                	jne    1f18 <concreate+0x3c4>
-      exit(EXIT_STATUS_DEFAULT);
-    1f0c:	c7 04 24 02 00 00 00 	movl   $0x2,(%esp)
-    1f13:	e8 44 25 00 00       	call   445c <exit>
-    else
-      wait(0);
-    1f18:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
-    1f1f:	e8 40 25 00 00       	call   4464 <wait>
-  if(n != 40){
-    printf(1, "concreate not enough files in directory listing\n");
-    exit(EXIT_STATUS_DEFAULT);
-  }
-
-  for(i = 0; i < 40; i++){
-    1f24:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
-    1f28:	83 7d f4 27          	cmpl   $0x27,-0xc(%ebp)
-    1f2c:	0f 8e b4 fe ff ff    	jle    1de6 <concreate+0x292>
-      exit(EXIT_STATUS_DEFAULT);
-    else
-      wait(0);
-  }
-
-  printf(1, "concreate ok\n");
-    1f32:	c7 44 24 04 0d 53 00 	movl   $0x530d,0x4(%esp)
-    1f39:	00 
-    1f3a:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
-    1f41:	e8 b5 26 00 00       	call   45fb <printf>
-}
-    1f46:	c9                   	leave  
-    1f47:	c3                   	ret    
-
-00001f48 <linkunlink>:
-
-// another concurrent link/unlink/create test,
-// to look for deadlocks.
-void
-linkunlink()
-{
-    1f48:	55                   	push   %ebp
-    1f49:	89 e5                	mov    %esp,%ebp
-    1f4b:	83 ec 28             	sub    $0x28,%esp
-  int pid, i;
-
-  printf(1, "linkunlink test\n");
-    1f4e:	c7 44 24 04 1b 53 00 	movl   $0x531b,0x4(%esp)
-    1f55:	00 
-    1f56:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
-    1f5d:	e8 99 26 00 00       	call   45fb <printf>
-
-  unlink("x");
-    1f62:	c7 04 24 97 4e 00 00 	movl   $0x4e97,(%esp)
-    1f69:	e8 3e 25 00 00       	call   44ac <unlink>
-  pid = fork();
-    1f6e:	e8 e1 24 00 00       	call   4454 <fork>
-    1f73:	89 45 ec             	mov    %eax,-0x14(%ebp)
-  if(pid < 0){
-    1f76:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
-    1f7a:	79 20                	jns    1f9c <linkunlink+0x54>
-    printf(1, "fork failed\n");
-    1f7c:	c7 44 24 04 61 4a 00 	movl   $0x4a61,0x4(%esp)
-    1f83:	00 
-    1f84:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
-    1f8b:	e8 6b 26 00 00       	call   45fb <printf>
-    exit(EXIT_STATUS_DEFAULT);
-    1f90:	c7 04 24 02 00 00 00 	movl   $0x2,(%esp)
-    1f97:	e8 c0 24 00 00       	call   445c <exit>
-  }
-
-  unsigned int x = (pid ? 1 : 97);
-    1f9c:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
-    1fa0:	74 07                	je     1fa9 <linkunlink+0x61>
-    1fa2:	b8 01 00 00 00       	mov    $0x1,%eax
-    1fa7:	eb 05                	jmp    1fae <linkunlink+0x66>
-    1fa9:	b8 61 00 00 00       	mov    $0x61,%eax
-    1fae:	89 45 f0             	mov    %eax,-0x10(%ebp)
-  for(i = 0; i < 100; i++){
-    1fb1:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
-    1fb8:	e9 8e 00 00 00       	jmp    204b <linkunlink+0x103>
-    x = x * 1103515245 + 12345;
-    1fbd:	8b 45 f0             	mov    -0x10(%ebp),%eax
-    1fc0:	69 c0 6d 4e c6 41    	imul   $0x41c64e6d,%eax,%eax
-    1fc6:	05 39 30 00 00       	add    $0x3039,%eax
-    1fcb:	89 45 f0             	mov    %eax,-0x10(%ebp)
-    if((x % 3) == 0){
-    1fce:	8b 4d f0             	mov    -0x10(%ebp),%ecx
-    1fd1:	ba ab aa aa aa       	mov    $0xaaaaaaab,%edx
-    1fd6:	89 c8                	mov    %ecx,%eax
-    1fd8:	f7 e2                	mul    %edx
-    1fda:	d1 ea                	shr    %edx
-    1fdc:	89 d0                	mov    %edx,%eax
-    1fde:	01 c0                	add    %eax,%eax
-    1fe0:	01 d0                	add    %edx,%eax
-    1fe2:	89 ca                	mov    %ecx,%edx
-    1fe4:	29 c2                	sub    %eax,%edx
-    1fe6:	85 d2                	test   %edx,%edx
-    1fe8:	75 1e                	jne    2008 <linkunlink+0xc0>
-      close(open("x", O_RDWR | O_CREATE));
-    1fea:	c7 44 24 04 02 02 00 	movl   $0x202,0x4(%esp)
-    1ff1:	00 
-    1ff2:	c7 04 24 97 4e 00 00 	movl   $0x4e97,(%esp)
-    1ff9:	e8 9e 24 00 00       	call   449c <open>
-    1ffe:	89 04 24             	mov    %eax,(%esp)
-    2001:	e8 7e 24 00 00       	call   4484 <close>
-    2006:	eb 3f                	jmp    2047 <linkunlink+0xff>
-    } else if((x % 3) == 1){
-    2008:	8b 4d f0             	mov    -0x10(%ebp),%ecx
-    200b:	ba ab aa aa aa       	mov    $0xaaaaaaab,%edx
-    2010:	89 c8                	mov    %ecx,%eax
-    2012:	f7 e2                	mul    %edx
-    2014:	d1 ea                	shr    %edx
-    2016:	89 d0                	mov    %edx,%eax
-    2018:	01 c0                	add    %eax,%eax
-    201a:	01 d0                	add    %edx,%eax
-    201c:	89 ca                	mov    %ecx,%edx
-    201e:	29 c2                	sub    %eax,%edx
-    2020:	83 fa 01             	cmp    $0x1,%edx
-    2023:	75 16                	jne    203b <linkunlink+0xf3>
-      link("cat", "x");
-    2025:	c7 44 24 04 97 4e 00 	movl   $0x4e97,0x4(%esp)
-    202c:	00 
-    202d:	c7 04 24 2c 53 00 00 	movl   $0x532c,(%esp)
-    2034:	e8 83 24 00 00       	call   44bc <link>
-    2039:	eb 0c                	jmp    2047 <linkunlink+0xff>
-    } else {
-      unlink("x");
-    203b:	c7 04 24 97 4e 00 00 	movl   $0x4e97,(%esp)
-    2042:	e8 65 24 00 00       	call   44ac <unlink>
-    printf(1, "fork failed\n");
-    exit(EXIT_STATUS_DEFAULT);
-  }
-
-  unsigned int x = (pid ? 1 : 97);
-  for(i = 0; i < 100; i++){
-    2047:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
-    204b:	83 7d f4 63          	cmpl   $0x63,-0xc(%ebp)
-    204f:	0f 8e 68 ff ff ff    	jle    1fbd <linkunlink+0x75>
-    } else {
-      unlink("x");
-    }
-  }
-
-  if(pid)
-    2055:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
-    2059:	74 22                	je     207d <linkunlink+0x135>
-    wait(0);
-    205b:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
-    2062:	e8 fd 23 00 00       	call   4464 <wait>
-  else 
-    exit(EXIT_STATUS_DEFAULT);
-
-  printf(1, "linkunlink ok\n");
-    2067:	c7 44 24 04 30 53 00 	movl   $0x5330,0x4(%esp)
-    206e:	00 
-    206f:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
-    2076:	e8 80 25 00 00       	call   45fb <printf>
-}
-    207b:	c9                   	leave  
-    207c:	c3                   	ret    
-  }
-
-  if(pid)
-    wait(0);
-  else 
-    exit(EXIT_STATUS_DEFAULT);
-    207d:	c7 04 24 02 00 00 00 	movl   $0x2,(%esp)
-    2084:	e8 d3 23 00 00       	call   445c <exit>
-
-00002089 <bigdir>:
-}
-
-// directory that uses indirect blocks
-void
-bigdir(void)
-{
-    2089:	55                   	push   %ebp
-    208a:	89 e5                	mov    %esp,%ebp
-    208c:	83 ec 38             	sub    $0x38,%esp
-  int i, fd;
-  char name[10];
-
-  printf(1, "bigdir test\n");
-    208f:	c7 44 24 04 3f 53 00 	movl   $0x533f,0x4(%esp)
-    2096:	00 
-    2097:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
-    209e:	e8 58 25 00 00       	call   45fb <printf>
-  unlink("bd");
-    20a3:	c7 04 24 4c 53 00 00 	movl   $0x534c,(%esp)
-    20aa:	e8 fd 23 00 00       	call   44ac <unlink>
-
-  fd = open("bd", O_CREATE);
-    20af:	c7 44 24 04 00 02 00 	movl   $0x200,0x4(%esp)
-    20b6:	00 
-    20b7:	c7 04 24 4c 53 00 00 	movl   $0x534c,(%esp)
-    20be:	e8 d9 23 00 00       	call   449c <open>
-    20c3:	89 45 f0             	mov    %eax,-0x10(%ebp)
-  if(fd < 0){
-    20c6:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
-    20ca:	79 20                	jns    20ec <bigdir+0x63>
-    printf(1, "bigdir create failed\n");
-    20cc:	c7 44 24 04 4f 53 00 	movl   $0x534f,0x4(%esp)
-    20d3:	00 
-    20d4:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
-    20db:	e8 1b 25 00 00       	call   45fb <printf>
-    exit(EXIT_STATUS_DEFAULT);
-    20e0:	c7 04 24 02 00 00 00 	movl   $0x2,(%esp)
-    20e7:	e8 70 23 00 00       	call   445c <exit>
-  }
-  close(fd);
-    20ec:	8b 45 f0             	mov    -0x10(%ebp),%eax
-    20ef:	89 04 24             	mov    %eax,(%esp)
-    20f2:	e8 8d 23 00 00       	call   4484 <close>
-
-  for(i = 0; i < 500; i++){
-    20f7:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
-    20fe:	eb 6f                	jmp    216f <bigdir+0xe6>
-    name[0] = 'x';
-    2100:	c6 45 e6 78          	movb   $0x78,-0x1a(%ebp)
-    name[1] = '0' + (i / 64);
-    2104:	8b 45 f4             	mov    -0xc(%ebp),%eax
-    2107:	8d 50 3f             	lea    0x3f(%eax),%edx
-    210a:	85 c0                	test   %eax,%eax
-    210c:	0f 48 c2             	cmovs  %edx,%eax
-    210f:	c1 f8 06             	sar    $0x6,%eax
-    2112:	83 c0 30             	add    $0x30,%eax
-    2115:	88 45 e7             	mov    %al,-0x19(%ebp)
-    name[2] = '0' + (i % 64);
-    2118:	8b 45 f4             	mov    -0xc(%ebp),%eax
-    211b:	89 c2                	mov    %eax,%edx
-    211d:	c1 fa 1f             	sar    $0x1f,%edx
-    2120:	c1 ea 1a             	shr    $0x1a,%edx
-    2123:	01 d0                	add    %edx,%eax
-    2125:	83 e0 3f             	and    $0x3f,%eax
-    2128:	29 d0                	sub    %edx,%eax
-    212a:	83 c0 30             	add    $0x30,%eax
-    212d:	88 45 e8             	mov    %al,-0x18(%ebp)
-    name[3] = '\0';
-    2130:	c6 45 e9 00          	movb   $0x0,-0x17(%ebp)
-    if(link("bd", name) != 0){
-    2134:	8d 45 e6             	lea    -0x1a(%ebp),%eax
-    2137:	89 44 24 04          	mov    %eax,0x4(%esp)
-    213b:	c7 04 24 4c 53 00 00 	movl   $0x534c,(%esp)
-    2142:	e8 75 23 00 00       	call   44bc <link>
-    2147:	85 c0                	test   %eax,%eax
-    2149:	74 20                	je     216b <bigdir+0xe2>
-      printf(1, "bigdir link failed\n");
-    214b:	c7 44 24 04 65 53 00 	movl   $0x5365,0x4(%esp)
-    2152:	00 
-    2153:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
-    215a:	e8 9c 24 00 00       	call   45fb <printf>
-      exit(EXIT_STATUS_DEFAULT);
-    215f:	c7 04 24 02 00 00 00 	movl   $0x2,(%esp)
-    2166:	e8 f1 22 00 00       	call   445c <exit>
-    printf(1, "bigdir create failed\n");
-    exit(EXIT_STATUS_DEFAULT);
-  }
-  close(fd);
-
-  for(i = 0; i < 500; i++){
-    216b:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
-    216f:	81 7d f4 f3 01 00 00 	cmpl   $0x1f3,-0xc(%ebp)
-    2176:	7e 88                	jle    2100 <bigdir+0x77>
-      printf(1, "bigdir link failed\n");
-      exit(EXIT_STATUS_DEFAULT);
-    }
-  }
-
-  unlink("bd");
-    2178:	c7 04 24 4c 53 00 00 	movl   $0x534c,(%esp)
-    217f:	e8 28 23 00 00       	call   44ac <unlink>
-  for(i = 0; i < 500; i++){
-    2184:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
-    218b:	eb 67                	jmp    21f4 <bigdir+0x16b>
-    name[0] = 'x';
-    218d:	c6 45 e6 78          	movb   $0x78,-0x1a(%ebp)
-    name[1] = '0' + (i / 64);
-    2191:	8b 45 f4             	mov    -0xc(%ebp),%eax
-    2194:	8d 50 3f             	lea    0x3f(%eax),%edx
-    2197:	85 c0                	test   %eax,%eax
-    2199:	0f 48 c2             	cmovs  %edx,%eax
-    219c:	c1 f8 06             	sar    $0x6,%eax
-    219f:	83 c0 30             	add    $0x30,%eax
-    21a2:	88 45 e7             	mov    %al,-0x19(%ebp)
-    name[2] = '0' + (i % 64);
-    21a5:	8b 45 f4             	mov    -0xc(%ebp),%eax
-    21a8:	89 c2                	mov    %eax,%edx
-    21aa:	c1 fa 1f             	sar    $0x1f,%edx
-    21ad:	c1 ea 1a             	shr    $0x1a,%edx
-    21b0:	01 d0                	add    %edx,%eax
-    21b2:	83 e0 3f             	and    $0x3f,%eax
-    21b5:	29 d0                	sub    %edx,%eax
-    21b7:	83 c0 30             	add    $0x30,%eax
-    21ba:	88 45 e8             	mov    %al,-0x18(%ebp)
-    name[3] = '\0';
-    21bd:	c6 45 e9 00          	movb   $0x0,-0x17(%ebp)
-    if(unlink(name) != 0){
-    21c1:	8d 45 e6             	lea    -0x1a(%ebp),%eax
-    21c4:	89 04 24             	mov    %eax,(%esp)
-    21c7:	e8 e0 22 00 00       	call   44ac <unlink>
-    21cc:	85 c0                	test   %eax,%eax
-    21ce:	74 20                	je     21f0 <bigdir+0x167>
-      printf(1, "bigdir unlink failed");
-    21d0:	c7 44 24 04 79 53 00 	movl   $0x5379,0x4(%esp)
-    21d7:	00 
-    21d8:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
-    21df:	e8 17 24 00 00       	call   45fb <printf>
-      exit(EXIT_STATUS_DEFAULT);
-    21e4:	c7 04 24 02 00 00 00 	movl   $0x2,(%esp)
-    21eb:	e8 6c 22 00 00       	call   445c <exit>
-      exit(EXIT_STATUS_DEFAULT);
-    }
-  }
-
-  unlink("bd");
-  for(i = 0; i < 500; i++){
-    21f0:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
-    21f4:	81 7d f4 f3 01 00 00 	cmpl   $0x1f3,-0xc(%ebp)
-    21fb:	7e 90                	jle    218d <bigdir+0x104>
-      printf(1, "bigdir unlink failed");
-      exit(EXIT_STATUS_DEFAULT);
-    }
-  }
-
-  printf(1, "bigdir ok\n");
-    21fd:	c7 44 24 04 8e 53 00 	movl   $0x538e,0x4(%esp)
-    2204:	00 
-    2205:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
-    220c:	e8 ea 23 00 00       	call   45fb <printf>
-}
-    2211:	c9                   	leave  
-    2212:	c3                   	ret    
-
-00002213 <subdir>:
-
-void
-subdir(void)
-{
-    2213:	55                   	push   %ebp
-    2214:	89 e5                	mov    %esp,%ebp
-    2216:	83 ec 28             	sub    $0x28,%esp
-  int fd, cc;
-
-  printf(1, "subdir test\n");
-    2219:	c7 44 24 04 99 53 00 	movl   $0x5399,0x4(%esp)
-    2220:	00 
-    2221:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
-    2228:	e8 ce 23 00 00       	call   45fb <printf>
-
-  unlink("ff");
-    222d:	c7 04 24 a6 53 00 00 	movl   $0x53a6,(%esp)
-    2234:	e8 73 22 00 00       	call   44ac <unlink>
-  if(mkdir("dd") != 0){
-    2239:	c7 04 24 a9 53 00 00 	movl   $0x53a9,(%esp)
-    2240:	e8 7f 22 00 00       	call   44c4 <mkdir>
-    2245:	85 c0                	test   %eax,%eax
-    2247:	74 20                	je     2269 <subdir+0x56>
-    printf(1, "subdir mkdir dd failed\n");
-    2249:	c7 44 24 04 ac 53 00 	movl   $0x53ac,0x4(%esp)
-    2250:	00 
-    2251:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
-    2258:	e8 9e 23 00 00       	call   45fb <printf>
-    exit(EXIT_STATUS_DEFAULT);
-    225d:	c7 04 24 02 00 00 00 	movl   $0x2,(%esp)
-    2264:	e8 f3 21 00 00       	call   445c <exit>
-  }
-
-  fd = open("dd/ff", O_CREATE | O_RDWR);
-    2269:	c7 44 24 04 02 02 00 	movl   $0x202,0x4(%esp)
-    2270:	00 
-    2271:	c7 04 24 c4 53 00 00 	movl   $0x53c4,(%esp)
-    2278:	e8 1f 22 00 00       	call   449c <open>
-    227d:	89 45 f4             	mov    %eax,-0xc(%ebp)
-  if(fd < 0){
-    2280:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
-    2284:	79 20                	jns    22a6 <subdir+0x93>
-    printf(1, "create dd/ff failed\n");
-    2286:	c7 44 24 04 ca 53 00 	movl   $0x53ca,0x4(%esp)
-    228d:	00 
-    228e:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
-    2295:	e8 61 23 00 00       	call   45fb <printf>
-    exit(EXIT_STATUS_DEFAULT);
-    229a:	c7 04 24 02 00 00 00 	movl   $0x2,(%esp)
-    22a1:	e8 b6 21 00 00       	call   445c <exit>
-  }
-  write(fd, "ff", 2);
-    22a6:	c7 44 24 08 02 00 00 	movl   $0x2,0x8(%esp)
-    22ad:	00 
-    22ae:	c7 44 24 04 a6 53 00 	movl   $0x53a6,0x4(%esp)
-    22b5:	00 
-    22b6:	8b 45 f4             	mov    -0xc(%ebp),%eax
-    22b9:	89 04 24             	mov    %eax,(%esp)
-    22bc:	e8 bb 21 00 00       	call   447c <write>
-  close(fd);
-    22c1:	8b 45 f4             	mov    -0xc(%ebp),%eax
-    22c4:	89 04 24             	mov    %eax,(%esp)
-    22c7:	e8 b8 21 00 00       	call   4484 <close>
-  
-  if(unlink("dd") >= 0){
-    22cc:	c7 04 24 a9 53 00 00 	movl   $0x53a9,(%esp)
-    22d3:	e8 d4 21 00 00       	call   44ac <unlink>
-    22d8:	85 c0                	test   %eax,%eax
-    22da:	78 20                	js     22fc <subdir+0xe9>
-    printf(1, "unlink dd (non-empty dir) succeeded!\n");
-    22dc:	c7 44 24 04 e0 53 00 	movl   $0x53e0,0x4(%esp)
-    22e3:	00 
-    22e4:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
-    22eb:	e8 0b 23 00 00       	call   45fb <printf>
-    exit(EXIT_STATUS_DEFAULT);
-    22f0:	c7 04 24 02 00 00 00 	movl   $0x2,(%esp)
-    22f7:	e8 60 21 00 00       	call   445c <exit>
-  }
-
-  if(mkdir("/dd/dd") != 0){
-    22fc:	c7 04 24 06 54 00 00 	movl   $0x5406,(%esp)
-    2303:	e8 bc 21 00 00       	call   44c4 <mkdir>
-    2308:	85 c0                	test   %eax,%eax
-    230a:	74 20                	je     232c <subdir+0x119>
-    printf(1, "subdir mkdir dd/dd failed\n");
-    230c:	c7 44 24 04 0d 54 00 	movl   $0x540d,0x4(%esp)
-    2313:	00 
-    2314:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
-    231b:	e8 db 22 00 00       	call   45fb <printf>
-    exit(EXIT_STATUS_DEFAULT);
-    2320:	c7 04 24 02 00 00 00 	movl   $0x2,(%esp)
-    2327:	e8 30 21 00 00       	call   445c <exit>
-  }
-
-  fd = open("dd/dd/ff", O_CREATE | O_RDWR);
-    232c:	c7 44 24 04 02 02 00 	movl   $0x202,0x4(%esp)
-    2333:	00 
-    2334:	c7 04 24 28 54 00 00 	movl   $0x5428,(%esp)
-    233b:	e8 5c 21 00 00       	call   449c <open>
-    2340:	89 45 f4             	mov    %eax,-0xc(%ebp)
-  if(fd < 0){
-    2343:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
-    2347:	79 20                	jns    2369 <subdir+0x156>
-    printf(1, "create dd/dd/ff failed\n");
-    2349:	c7 44 24 04 31 54 00 	movl   $0x5431,0x4(%esp)
-    2350:	00 
-    2351:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
-    2358:	e8 9e 22 00 00       	call   45fb <printf>
-    exit(EXIT_STATUS_DEFAULT);
-    235d:	c7 04 24 02 00 00 00 	movl   $0x2,(%esp)
-    2364:	e8 f3 20 00 00       	call   445c <exit>
-  }
-  write(fd, "FF", 2);
-    2369:	c7 44 24 08 02 00 00 	movl   $0x2,0x8(%esp)
-    2370:	00 
-    2371:	c7 44 24 04 49 54 00 	movl   $0x5449,0x4(%esp)
-    2378:	00 
-    2379:	8b 45 f4             	mov    -0xc(%ebp),%eax
-    237c:	89 04 24             	mov    %eax,(%esp)
-    237f:	e8 f8 20 00 00       	call   447c <write>
-  close(fd);
-    2384:	8b 45 f4             	mov    -0xc(%ebp),%eax
-    2387:	89 04 24             	mov    %eax,(%esp)
-    238a:	e8 f5 20 00 00       	call   4484 <close>
-
-  fd = open("dd/dd/../ff", 0);
-    238f:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
-    2396:	00 
-    2397:	c7 04 24 4c 54 00 00 	movl   $0x544c,(%esp)
-    239e:	e8 f9 20 00 00       	call   449c <open>
-    23a3:	89 45 f4             	mov    %eax,-0xc(%ebp)
-  if(fd < 0){
-    23a6:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
-    23aa:	79 20                	jns    23cc <subdir+0x1b9>
-    printf(1, "open dd/dd/../ff failed\n");
-    23ac:	c7 44 24 04 58 54 00 	movl   $0x5458,0x4(%esp)
-    23b3:	00 
-    23b4:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
-    23bb:	e8 3b 22 00 00       	call   45fb <printf>
-    exit(EXIT_STATUS_DEFAULT);
-    23c0:	c7 04 24 02 00 00 00 	movl   $0x2,(%esp)
-    23c7:	e8 90 20 00 00       	call   445c <exit>
-  }
-  cc = read(fd, buf, sizeof(buf));
-    23cc:	c7 44 24 08 00 20 00 	movl   $0x2000,0x8(%esp)
-    23d3:	00 
-    23d4:	c7 44 24 04 60 90 00 	movl   $0x9060,0x4(%esp)
-    23db:	00 
-    23dc:	8b 45 f4             	mov    -0xc(%ebp),%eax
-    23df:	89 04 24             	mov    %eax,(%esp)
-    23e2:	e8 8d 20 00 00       	call   4474 <read>
-    23e7:	89 45 f0             	mov    %eax,-0x10(%ebp)
-  if(cc != 2 || buf[0] != 'f'){
-    23ea:	83 7d f0 02          	cmpl   $0x2,-0x10(%ebp)
-    23ee:	75 0b                	jne    23fb <subdir+0x1e8>
-    23f0:	0f b6 05 60 90 00 00 	movzbl 0x9060,%eax
-    23f7:	3c 66                	cmp    $0x66,%al
-    23f9:	74 20                	je     241b <subdir+0x208>
-    printf(1, "dd/dd/../ff wrong content\n");
-    23fb:	c7 44 24 04 71 54 00 	movl   $0x5471,0x4(%esp)
-    2402:	00 
-    2403:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
-    240a:	e8 ec 21 00 00       	call   45fb <printf>
-    exit(EXIT_STATUS_DEFAULT);
-    240f:	c7 04 24 02 00 00 00 	movl   $0x2,(%esp)
-    2416:	e8 41 20 00 00       	call   445c <exit>
-  }
-  close(fd);
-    241b:	8b 45 f4             	mov    -0xc(%ebp),%eax
-    241e:	89 04 24             	mov    %eax,(%esp)
-    2421:	e8 5e 20 00 00       	call   4484 <close>
-
-  if(link("dd/dd/ff", "dd/dd/ffff") != 0){
-    2426:	c7 44 24 04 8c 54 00 	movl   $0x548c,0x4(%esp)
-    242d:	00 
-    242e:	c7 04 24 28 54 00 00 	movl   $0x5428,(%esp)
-    2435:	e8 82 20 00 00       	call   44bc <link>
-    243a:	85 c0                	test   %eax,%eax
-    243c:	74 20                	je     245e <subdir+0x24b>
-    printf(1, "link dd/dd/ff dd/dd/ffff failed\n");
-    243e:	c7 44 24 04 98 54 00 	movl   $0x5498,0x4(%esp)
-    2445:	00 
-    2446:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
-    244d:	e8 a9 21 00 00       	call   45fb <printf>
-    exit(EXIT_STATUS_DEFAULT);
-    2452:	c7 04 24 02 00 00 00 	movl   $0x2,(%esp)
-    2459:	e8 fe 1f 00 00       	call   445c <exit>
-  }
-
-  if(unlink("dd/dd/ff") != 0){
-    245e:	c7 04 24 28 54 00 00 	movl   $0x5428,(%esp)
-    2465:	e8 42 20 00 00       	call   44ac <unlink>
-    246a:	85 c0                	test   %eax,%eax
-    246c:	74 20                	je     248e <subdir+0x27b>
-    printf(1, "unlink dd/dd/ff failed\n");
-    246e:	c7 44 24 04 b9 54 00 	movl   $0x54b9,0x4(%esp)
-    2475:	00 
-    2476:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
-    247d:	e8 79 21 00 00       	call   45fb <printf>
-    exit(EXIT_STATUS_DEFAULT);
-    2482:	c7 04 24 02 00 00 00 	movl   $0x2,(%esp)
-    2489:	e8 ce 1f 00 00       	call   445c <exit>
-  }
-  if(open("dd/dd/ff", O_RDONLY) >= 0){
-    248e:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
-    2495:	00 
-    2496:	c7 04 24 28 54 00 00 	movl   $0x5428,(%esp)
-    249d:	e8 fa 1f 00 00       	call   449c <open>
-    24a2:	85 c0                	test   %eax,%eax
-    24a4:	78 20                	js     24c6 <subdir+0x2b3>
-    printf(1, "open (unlinked) dd/dd/ff succeeded\n");
-    24a6:	c7 44 24 04 d4 54 00 	movl   $0x54d4,0x4(%esp)
-    24ad:	00 
-    24ae:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
-    24b5:	e8 41 21 00 00       	call   45fb <printf>
-    exit(EXIT_STATUS_DEFAULT);
-    24ba:	c7 04 24 02 00 00 00 	movl   $0x2,(%esp)
-    24c1:	e8 96 1f 00 00       	call   445c <exit>
-  }
-
-  if(chdir("dd") != 0){
-    24c6:	c7 04 24 a9 53 00 00 	movl   $0x53a9,(%esp)
-    24cd:	e8 fa 1f 00 00       	call   44cc <chdir>
-    24d2:	85 c0                	test   %eax,%eax
-    24d4:	74 20                	je     24f6 <subdir+0x2e3>
-    printf(1, "chdir dd failed\n");
-    24d6:	c7 44 24 04 f8 54 00 	movl   $0x54f8,0x4(%esp)
-    24dd:	00 
-    24de:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
-    24e5:	e8 11 21 00 00       	call   45fb <printf>
-    exit(EXIT_STATUS_DEFAULT);
-    24ea:	c7 04 24 02 00 00 00 	movl   $0x2,(%esp)
-    24f1:	e8 66 1f 00 00       	call   445c <exit>
-  }
-  if(chdir("dd/../../dd") != 0){
-    24f6:	c7 04 24 09 55 00 00 	movl   $0x5509,(%esp)
-    24fd:	e8 ca 1f 00 00       	call   44cc <chdir>
-    2502:	85 c0                	test   %eax,%eax
-    2504:	74 20                	je     2526 <subdir+0x313>
-    printf(1, "chdir dd/../../dd failed\n");
-    2506:	c7 44 24 04 15 55 00 	movl   $0x5515,0x4(%esp)
-    250d:	00 
-    250e:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
-    2515:	e8 e1 20 00 00       	call   45fb <printf>
-    exit(EXIT_STATUS_DEFAULT);
-    251a:	c7 04 24 02 00 00 00 	movl   $0x2,(%esp)
-    2521:	e8 36 1f 00 00       	call   445c <exit>
-  }
-  if(chdir("dd/../../../dd") != 0){
-    2526:	c7 04 24 2f 55 00 00 	movl   $0x552f,(%esp)
-    252d:	e8 9a 1f 00 00       	call   44cc <chdir>
-    2532:	85 c0                	test   %eax,%eax
-    2534:	74 20                	je     2556 <subdir+0x343>
-    printf(1, "chdir dd/../../dd failed\n");
-    2536:	c7 44 24 04 15 55 00 	movl   $0x5515,0x4(%esp)
-    253d:	00 
-    253e:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
-    2545:	e8 b1 20 00 00       	call   45fb <printf>
-    exit(EXIT_STATUS_DEFAULT);
-    254a:	c7 04 24 02 00 00 00 	movl   $0x2,(%esp)
-    2551:	e8 06 1f 00 00       	call   445c <exit>
-  }
-  if(chdir("./..") != 0){
-    2556:	c7 04 24 3e 55 00 00 	movl   $0x553e,(%esp)
-    255d:	e8 6a 1f 00 00       	call   44cc <chdir>
-    2562:	85 c0                	test   %eax,%eax
-    2564:	74 20                	je     2586 <subdir+0x373>
-    printf(1, "chdir ./.. failed\n");
-    2566:	c7 44 24 04 43 55 00 	movl   $0x5543,0x4(%esp)
-    256d:	00 
-    256e:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
-    2575:	e8 81 20 00 00       	call   45fb <printf>
-    exit(EXIT_STATUS_DEFAULT);
-    257a:	c7 04 24 02 00 00 00 	movl   $0x2,(%esp)
-    2581:	e8 d6 1e 00 00       	call   445c <exit>
-  }
-
-  fd = open("dd/dd/ffff", 0);
-    2586:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
-    258d:	00 
-    258e:	c7 04 24 8c 54 00 00 	movl   $0x548c,(%esp)
-    2595:	e8 02 1f 00 00       	call   449c <open>
-    259a:	89 45 f4             	mov    %eax,-0xc(%ebp)
-  if(fd < 0){
-    259d:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
-    25a1:	79 20                	jns    25c3 <subdir+0x3b0>
-    printf(1, "open dd/dd/ffff failed\n");
-    25a3:	c7 44 24 04 56 55 00 	movl   $0x5556,0x4(%esp)
-    25aa:	00 
-    25ab:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
-    25b2:	e8 44 20 00 00       	call   45fb <printf>
-    exit(EXIT_STATUS_DEFAULT);
-    25b7:	c7 04 24 02 00 00 00 	movl   $0x2,(%esp)
-    25be:	e8 99 1e 00 00       	call   445c <exit>
-  }
-  if(read(fd, buf, sizeof(buf)) != 2){
-    25c3:	c7 44 24 08 00 20 00 	movl   $0x2000,0x8(%esp)
-    25ca:	00 
-    25cb:	c7 44 24 04 60 90 00 	movl   $0x9060,0x4(%esp)
-    25d2:	00 
-    25d3:	8b 45 f4             	mov    -0xc(%ebp),%eax
-    25d6:	89 04 24             	mov    %eax,(%esp)
-    25d9:	e8 96 1e 00 00       	call   4474 <read>
-    25de:	83 f8 02             	cmp    $0x2,%eax
-    25e1:	74 20                	je     2603 <subdir+0x3f0>
-    printf(1, "read dd/dd/ffff wrong len\n");
-    25e3:	c7 44 24 04 6e 55 00 	movl   $0x556e,0x4(%esp)
-    25ea:	00 
-    25eb:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
-    25f2:	e8 04 20 00 00       	call   45fb <printf>
-    exit(EXIT_STATUS_DEFAULT);
-    25f7:	c7 04 24 02 00 00 00 	movl   $0x2,(%esp)
-    25fe:	e8 59 1e 00 00       	call   445c <exit>
-  }
-  close(fd);
-    2603:	8b 45 f4             	mov    -0xc(%ebp),%eax
-    2606:	89 04 24             	mov    %eax,(%esp)
-    2609:	e8 76 1e 00 00       	call   4484 <close>
-
-  if(open("dd/dd/ff", O_RDONLY) >= 0){
-    260e:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
-    2615:	00 
-    2616:	c7 04 24 28 54 00 00 	movl   $0x5428,(%esp)
-    261d:	e8 7a 1e 00 00       	call   449c <open>
-    2622:	85 c0                	test   %eax,%eax
-    2624:	78 20                	js     2646 <subdir+0x433>
-    printf(1, "open (unlinked) dd/dd/ff succeeded!\n");
-    2626:	c7 44 24 04 8c 55 00 	movl   $0x558c,0x4(%esp)
-    262d:	00 
-    262e:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
-    2635:	e8 c1 1f 00 00       	call   45fb <printf>
-    exit(EXIT_STATUS_DEFAULT);
-    263a:	c7 04 24 02 00 00 00 	movl   $0x2,(%esp)
-    2641:	e8 16 1e 00 00       	call   445c <exit>
-  }
-
-  if(open("dd/ff/ff", O_CREATE|O_RDWR) >= 0){
-    2646:	c7 44 24 04 02 02 00 	movl   $0x202,0x4(%esp)
-    264d:	00 
-    264e:	c7 04 24 b1 55 00 00 	movl   $0x55b1,(%esp)
-    2655:	e8 42 1e 00 00       	call   449c <open>
-    265a:	85 c0                	test   %eax,%eax
-    265c:	78 20                	js     267e <subdir+0x46b>
-    printf(1, "create dd/ff/ff succeeded!\n");
-    265e:	c7 44 24 04 ba 55 00 	movl   $0x55ba,0x4(%esp)
-    2665:	00 
-    2666:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
-    266d:	e8 89 1f 00 00       	call   45fb <printf>
-    exit(EXIT_STATUS_DEFAULT);
-    2672:	c7 04 24 02 00 00 00 	movl   $0x2,(%esp)
-    2679:	e8 de 1d 00 00       	call   445c <exit>
-  }
-  if(open("dd/xx/ff", O_CREATE|O_RDWR) >= 0){
-    267e:	c7 44 24 04 02 02 00 	movl   $0x202,0x4(%esp)
-    2685:	00 
-    2686:	c7 04 24 d6 55 00 00 	movl   $0x55d6,(%esp)
-    268d:	e8 0a 1e 00 00       	call   449c <open>
-    2692:	85 c0                	test   %eax,%eax
-    2694:	78 20                	js     26b6 <subdir+0x4a3>
-    printf(1, "create dd/xx/ff succeeded!\n");
-    2696:	c7 44 24 04 df 55 00 	movl   $0x55df,0x4(%esp)
-    269d:	00 
-    269e:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
-    26a5:	e8 51 1f 00 00       	call   45fb <printf>
-    exit(EXIT_STATUS_DEFAULT);
-    26aa:	c7 04 24 02 00 00 00 	movl   $0x2,(%esp)
-    26b1:	e8 a6 1d 00 00       	call   445c <exit>
-  }
-  if(open("dd", O_CREATE) >= 0){
-    26b6:	c7 44 24 04 00 02 00 	movl   $0x200,0x4(%esp)
-    26bd:	00 
-    26be:	c7 04 24 a9 53 00 00 	movl   $0x53a9,(%esp)
-    26c5:	e8 d2 1d 00 00       	call   449c <open>
-    26ca:	85 c0                	test   %eax,%eax
-    26cc:	78 20                	js     26ee <subdir+0x4db>
-    printf(1, "create dd succeeded!\n");
-    26ce:	c7 44 24 04 fb 55 00 	movl   $0x55fb,0x4(%esp)
-    26d5:	00 
-    26d6:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
-    26dd:	e8 19 1f 00 00       	call   45fb <printf>
-    exit(EXIT_STATUS_DEFAULT);
-    26e2:	c7 04 24 02 00 00 00 	movl   $0x2,(%esp)
-    26e9:	e8 6e 1d 00 00       	call   445c <exit>
-  }
-  if(open("dd", O_RDWR) >= 0){
-    26ee:	c7 44 24 04 02 00 00 	movl   $0x2,0x4(%esp)
-    26f5:	00 
-    26f6:	c7 04 24 a9 53 00 00 	movl   $0x53a9,(%esp)
-    26fd:	e8 9a 1d 00 00       	call   449c <open>
-    2702:	85 c0                	test   %eax,%eax
-    2704:	78 20                	js     2726 <subdir+0x513>
-    printf(1, "open dd rdwr succeeded!\n");
-    2706:	c7 44 24 04 11 56 00 	movl   $0x5611,0x4(%esp)
-    270d:	00 
-    270e:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
-    2715:	e8 e1 1e 00 00       	call   45fb <printf>
-    exit(EXIT_STATUS_DEFAULT);
-    271a:	c7 04 24 02 00 00 00 	movl   $0x2,(%esp)
-    2721:	e8 36 1d 00 00       	call   445c <exit>
-  }
-  if(open("dd", O_WRONLY) >= 0){
-    2726:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
-    272d:	00 
-    272e:	c7 04 24 a9 53 00 00 	movl   $0x53a9,(%esp)
-    2735:	e8 62 1d 00 00       	call   449c <open>
-    273a:	85 c0                	test   %eax,%eax
-    273c:	78 20                	js     275e <subdir+0x54b>
-    printf(1, "open dd wronly succeeded!\n");
-    273e:	c7 44 24 04 2a 56 00 	movl   $0x562a,0x4(%esp)
-    2745:	00 
-    2746:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
-    274d:	e8 a9 1e 00 00       	call   45fb <printf>
-    exit(EXIT_STATUS_DEFAULT);
-    2752:	c7 04 24 02 00 00 00 	movl   $0x2,(%esp)
-    2759:	e8 fe 1c 00 00       	call   445c <exit>
-  }
-  if(link("dd/ff/ff", "dd/dd/xx") == 0){
-    275e:	c7 44 24 04 45 56 00 	movl   $0x5645,0x4(%esp)
-    2765:	00 
-    2766:	c7 04 24 b1 55 00 00 	movl   $0x55b1,(%esp)
-    276d:	e8 4a 1d 00 00       	call   44bc <link>
-    2772:	85 c0                	test   %eax,%eax
-    2774:	75 20                	jne    2796 <subdir+0x583>
-    printf(1, "link dd/ff/ff dd/dd/xx succeeded!\n");
-    2776:	c7 44 24 04 50 56 00 	movl   $0x5650,0x4(%esp)
-    277d:	00 
-    277e:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
-    2785:	e8 71 1e 00 00       	call   45fb <printf>
-    exit(EXIT_STATUS_DEFAULT);
-    278a:	c7 04 24 02 00 00 00 	movl   $0x2,(%esp)
-    2791:	e8 c6 1c 00 00       	call   445c <exit>
-  }
-  if(link("dd/xx/ff", "dd/dd/xx") == 0){
-    2796:	c7 44 24 04 45 56 00 	movl   $0x5645,0x4(%esp)
-    279d:	00 
-    279e:	c7 04 24 d6 55 00 00 	movl   $0x55d6,(%esp)
-    27a5:	e8 12 1d 00 00       	call   44bc <link>
-    27aa:	85 c0                	test   %eax,%eax
-    27ac:	75 20                	jne    27ce <subdir+0x5bb>
-    printf(1, "link dd/xx/ff dd/dd/xx succeeded!\n");
-    27ae:	c7 44 24 04 74 56 00 	movl   $0x5674,0x4(%esp)
-    27b5:	00 
-    27b6:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
-    27bd:	e8 39 1e 00 00       	call   45fb <printf>
-    exit(EXIT_STATUS_DEFAULT);
-    27c2:	c7 04 24 02 00 00 00 	movl   $0x2,(%esp)
-    27c9:	e8 8e 1c 00 00       	call   445c <exit>
-  }
-  if(link("dd/ff", "dd/dd/ffff") == 0){
-    27ce:	c7 44 24 04 8c 54 00 	movl   $0x548c,0x4(%esp)
-    27d5:	00 
-    27d6:	c7 04 24 c4 53 00 00 	movl   $0x53c4,(%esp)
-    27dd:	e8 da 1c 00 00       	call   44bc <link>
-    27e2:	85 c0                	test   %eax,%eax
-    27e4:	75 20                	jne    2806 <subdir+0x5f3>
-    printf(1, "link dd/ff dd/dd/ffff succeeded!\n");
-    27e6:	c7 44 24 04 98 56 00 	movl   $0x5698,0x4(%esp)
-    27ed:	00 
-    27ee:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
-    27f5:	e8 01 1e 00 00       	call   45fb <printf>
-    exit(EXIT_STATUS_DEFAULT);
-    27fa:	c7 04 24 02 00 00 00 	movl   $0x2,(%esp)
-    2801:	e8 56 1c 00 00       	call   445c <exit>
-  }
-  if(mkdir("dd/ff/ff") == 0){
-    2806:	c7 04 24 b1 55 00 00 	movl   $0x55b1,(%esp)
-    280d:	e8 b2 1c 00 00       	call   44c4 <mkdir>
-    2812:	85 c0                	test   %eax,%eax
-    2814:	75 20                	jne    2836 <subdir+0x623>
-    printf(1, "mkdir dd/ff/ff succeeded!\n");
-    2816:	c7 44 24 04 ba 56 00 	movl   $0x56ba,0x4(%esp)
-    281d:	00 
-    281e:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
-    2825:	e8 d1 1d 00 00       	call   45fb <printf>
-    exit(EXIT_STATUS_DEFAULT);
-    282a:	c7 04 24 02 00 00 00 	movl   $0x2,(%esp)
-    2831:	e8 26 1c 00 00       	call   445c <exit>
-  }
-  if(mkdir("dd/xx/ff") == 0){
-    2836:	c7 04 24 d6 55 00 00 	movl   $0x55d6,(%esp)
-    283d:	e8 82 1c 00 00       	call   44c4 <mkdir>
-    2842:	85 c0                	test   %eax,%eax
-    2844:	75 20                	jne    2866 <subdir+0x653>
-    printf(1, "mkdir dd/xx/ff succeeded!\n");
-    2846:	c7 44 24 04 d5 56 00 	movl   $0x56d5,0x4(%esp)
-    284d:	00 
-    284e:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
-    2855:	e8 a1 1d 00 00       	call   45fb <printf>
-    exit(EXIT_STATUS_DEFAULT);
-    285a:	c7 04 24 02 00 00 00 	movl   $0x2,(%esp)
-    2861:	e8 f6 1b 00 00       	call   445c <exit>
-  }
-  if(mkdir("dd/dd/ffff") == 0){
-    2866:	c7 04 24 8c 54 00 00 	movl   $0x548c,(%esp)
-    286d:	e8 52 1c 00 00       	call   44c4 <mkdir>
-    2872:	85 c0                	test   %eax,%eax
-    2874:	75 20                	jne    2896 <subdir+0x683>
-    printf(1, "mkdir dd/dd/ffff succeeded!\n");
-    2876:	c7 44 24 04 f0 56 00 	movl   $0x56f0,0x4(%esp)
-    287d:	00 
-    287e:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
-    2885:	e8 71 1d 00 00       	call   45fb <printf>
-    exit(EXIT_STATUS_DEFAULT);
-    288a:	c7 04 24 02 00 00 00 	movl   $0x2,(%esp)
-    2891:	e8 c6 1b 00 00       	call   445c <exit>
-  }
-  if(unlink("dd/xx/ff") == 0){
-    2896:	c7 04 24 d6 55 00 00 	movl   $0x55d6,(%esp)
-    289d:	e8 0a 1c 00 00       	call   44ac <unlink>
-    28a2:	85 c0                	test   %eax,%eax
-    28a4:	75 20                	jne    28c6 <subdir+0x6b3>
-    printf(1, "unlink dd/xx/ff succeeded!\n");
-    28a6:	c7 44 24 04 0d 57 00 	movl   $0x570d,0x4(%esp)
-    28ad:	00 
-    28ae:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
-    28b5:	e8 41 1d 00 00       	call   45fb <printf>
-    exit(EXIT_STATUS_DEFAULT);
-    28ba:	c7 04 24 02 00 00 00 	movl   $0x2,(%esp)
-    28c1:	e8 96 1b 00 00       	call   445c <exit>
-  }
-  if(unlink("dd/ff/ff") == 0){
-    28c6:	c7 04 24 b1 55 00 00 	movl   $0x55b1,(%esp)
-    28cd:	e8 da 1b 00 00       	call   44ac <unlink>
-    28d2:	85 c0                	test   %eax,%eax
-    28d4:	75 20                	jne    28f6 <subdir+0x6e3>
-    printf(1, "unlink dd/ff/ff succeeded!\n");
-    28d6:	c7 44 24 04 29 57 00 	movl   $0x5729,0x4(%esp)
-    28dd:	00 
-    28de:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
-    28e5:	e8 11 1d 00 00       	call   45fb <printf>
-    exit(EXIT_STATUS_DEFAULT);
-    28ea:	c7 04 24 02 00 00 00 	movl   $0x2,(%esp)
-    28f1:	e8 66 1b 00 00       	call   445c <exit>
-  }
-  if(chdir("dd/ff") == 0){
-    28f6:	c7 04 24 c4 53 00 00 	movl   $0x53c4,(%esp)
-    28fd:	e8 ca 1b 00 00       	call   44cc <chdir>
-    2902:	85 c0                	test   %eax,%eax
-    2904:	75 20                	jne    2926 <subdir+0x713>
-    printf(1, "chdir dd/ff succeeded!\n");
-    2906:	c7 44 24 04 45 57 00 	movl   $0x5745,0x4(%esp)
-    290d:	00 
-    290e:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
-    2915:	e8 e1 1c 00 00       	call   45fb <printf>
-    exit(EXIT_STATUS_DEFAULT);
-    291a:	c7 04 24 02 00 00 00 	movl   $0x2,(%esp)
-    2921:	e8 36 1b 00 00       	call   445c <exit>
-  }
-  if(chdir("dd/xx") == 0){
-    2926:	c7 04 24 5d 57 00 00 	movl   $0x575d,(%esp)
-    292d:	e8 9a 1b 00 00       	call   44cc <chdir>
-    2932:	85 c0                	test   %eax,%eax
-    2934:	75 20                	jne    2956 <subdir+0x743>
-    printf(1, "chdir dd/xx succeeded!\n");
-    2936:	c7 44 24 04 63 57 00 	movl   $0x5763,0x4(%esp)
-    293d:	00 
-    293e:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
-    2945:	e8 b1 1c 00 00       	call   45fb <printf>
-    exit(EXIT_STATUS_DEFAULT);
-    294a:	c7 04 24 02 00 00 00 	movl   $0x2,(%esp)
-    2951:	e8 06 1b 00 00       	call   445c <exit>
-  }
-
-  if(unlink("dd/dd/ffff") != 0){
-    2956:	c7 04 24 8c 54 00 00 	movl   $0x548c,(%esp)
-    295d:	e8 4a 1b 00 00       	call   44ac <unlink>
-    2962:	85 c0                	test   %eax,%eax
-    2964:	74 20                	je     2986 <subdir+0x773>
-    printf(1, "unlink dd/dd/ff failed\n");
-    2966:	c7 44 24 04 b9 54 00 	movl   $0x54b9,0x4(%esp)
-    296d:	00 
-    296e:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
-    2975:	e8 81 1c 00 00       	call   45fb <printf>
-    exit(EXIT_STATUS_DEFAULT);
-    297a:	c7 04 24 02 00 00 00 	movl   $0x2,(%esp)
-    2981:	e8 d6 1a 00 00       	call   445c <exit>
-  }
-  if(unlink("dd/ff") != 0){
-    2986:	c7 04 24 c4 53 00 00 	movl   $0x53c4,(%esp)
-    298d:	e8 1a 1b 00 00       	call   44ac <unlink>
-    2992:	85 c0                	test   %eax,%eax
-    2994:	74 20                	je     29b6 <subdir+0x7a3>
-    printf(1, "unlink dd/ff failed\n");
-    2996:	c7 44 24 04 7b 57 00 	movl   $0x577b,0x4(%esp)
-    299d:	00 
-    299e:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
-    29a5:	e8 51 1c 00 00       	call   45fb <printf>
-    exit(EXIT_STATUS_DEFAULT);
-    29aa:	c7 04 24 02 00 00 00 	movl   $0x2,(%esp)
-    29b1:	e8 a6 1a 00 00       	call   445c <exit>
-  }
-  if(unlink("dd") == 0){
-    29b6:	c7 04 24 a9 53 00 00 	movl   $0x53a9,(%esp)
-    29bd:	e8 ea 1a 00 00       	call   44ac <unlink>
-    29c2:	85 c0                	test   %eax,%eax
-    29c4:	75 20                	jne    29e6 <subdir+0x7d3>
-    printf(1, "unlink non-empty dd succeeded!\n");
-    29c6:	c7 44 24 04 90 57 00 	movl   $0x5790,0x4(%esp)
-    29cd:	00 
-    29ce:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
-    29d5:	e8 21 1c 00 00       	call   45fb <printf>
-    exit(EXIT_STATUS_DEFAULT);
-    29da:	c7 04 24 02 00 00 00 	movl   $0x2,(%esp)
-    29e1:	e8 76 1a 00 00       	call   445c <exit>
-  }
-  if(unlink("dd/dd") < 0){
-    29e6:	c7 04 24 b0 57 00 00 	movl   $0x57b0,(%esp)
-    29ed:	e8 ba 1a 00 00       	call   44ac <unlink>
-    29f2:	85 c0                	test   %eax,%eax
-    29f4:	79 20                	jns    2a16 <subdir+0x803>
-    printf(1, "unlink dd/dd failed\n");
-    29f6:	c7 44 24 04 b6 57 00 	movl   $0x57b6,0x4(%esp)
-    29fd:	00 
-    29fe:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
-    2a05:	e8 f1 1b 00 00       	call   45fb <printf>
-    exit(EXIT_STATUS_DEFAULT);
-    2a0a:	c7 04 24 02 00 00 00 	movl   $0x2,(%esp)
-    2a11:	e8 46 1a 00 00       	call   445c <exit>
-  }
-  if(unlink("dd") < 0){
-    2a16:	c7 04 24 a9 53 00 00 	movl   $0x53a9,(%esp)
-    2a1d:	e8 8a 1a 00 00       	call   44ac <unlink>
-    2a22:	85 c0                	test   %eax,%eax
-    2a24:	79 20                	jns    2a46 <subdir+0x833>
-    printf(1, "unlink dd failed\n");
-    2a26:	c7 44 24 04 cb 57 00 	movl   $0x57cb,0x4(%esp)
-    2a2d:	00 
-    2a2e:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
-    2a35:	e8 c1 1b 00 00       	call   45fb <printf>
-    exit(EXIT_STATUS_DEFAULT);
-    2a3a:	c7 04 24 02 00 00 00 	movl   $0x2,(%esp)
-    2a41:	e8 16 1a 00 00       	call   445c <exit>
-  }
-
-  printf(1, "subdir ok\n");
-    2a46:	c7 44 24 04 dd 57 00 	movl   $0x57dd,0x4(%esp)
-    2a4d:	00 
-    2a4e:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
-    2a55:	e8 a1 1b 00 00       	call   45fb <printf>
-}
-    2a5a:	c9                   	leave  
-    2a5b:	c3                   	ret    
-
-00002a5c <bigwrite>:
-
-// test writes that are larger than the log.
-void
-bigwrite(void)
-{
-    2a5c:	55                   	push   %ebp
-    2a5d:	89 e5                	mov    %esp,%ebp
-    2a5f:	83 ec 28             	sub    $0x28,%esp
-  int fd, sz;
-
-  printf(1, "bigwrite test\n");
-    2a62:	c7 44 24 04 e8 57 00 	movl   $0x57e8,0x4(%esp)
-    2a69:	00 
-    2a6a:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
-    2a71:	e8 85 1b 00 00       	call   45fb <printf>
-
-  unlink("bigwrite");
-    2a76:	c7 04 24 f7 57 00 00 	movl   $0x57f7,(%esp)
-    2a7d:	e8 2a 1a 00 00       	call   44ac <unlink>
-  for(sz = 499; sz < 12*512; sz += 471){
-    2a82:	c7 45 f4 f3 01 00 00 	movl   $0x1f3,-0xc(%ebp)
-    2a89:	e9 c1 00 00 00       	jmp    2b4f <bigwrite+0xf3>
-    fd = open("bigwrite", O_CREATE | O_RDWR);
-    2a8e:	c7 44 24 04 02 02 00 	movl   $0x202,0x4(%esp)
-    2a95:	00 
-    2a96:	c7 04 24 f7 57 00 00 	movl   $0x57f7,(%esp)
-    2a9d:	e8 fa 19 00 00       	call   449c <open>
-    2aa2:	89 45 ec             	mov    %eax,-0x14(%ebp)
-    if(fd < 0){
-    2aa5:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
-    2aa9:	79 20                	jns    2acb <bigwrite+0x6f>
-      printf(1, "cannot create bigwrite\n");
-    2aab:	c7 44 24 04 00 58 00 	movl   $0x5800,0x4(%esp)
-    2ab2:	00 
-    2ab3:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
-    2aba:	e8 3c 1b 00 00       	call   45fb <printf>
-      exit(EXIT_STATUS_DEFAULT);
-    2abf:	c7 04 24 02 00 00 00 	movl   $0x2,(%esp)
-    2ac6:	e8 91 19 00 00       	call   445c <exit>
-    }
-    int i;
-    for(i = 0; i < 2; i++){
-    2acb:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
-    2ad2:	eb 57                	jmp    2b2b <bigwrite+0xcf>
-      int cc = write(fd, buf, sz);
-    2ad4:	8b 45 f4             	mov    -0xc(%ebp),%eax
-    2ad7:	89 44 24 08          	mov    %eax,0x8(%esp)
-    2adb:	c7 44 24 04 60 90 00 	movl   $0x9060,0x4(%esp)
-    2ae2:	00 
-    2ae3:	8b 45 ec             	mov    -0x14(%ebp),%eax
-    2ae6:	89 04 24             	mov    %eax,(%esp)
-    2ae9:	e8 8e 19 00 00       	call   447c <write>
-    2aee:	89 45 e8             	mov    %eax,-0x18(%ebp)
-      if(cc != sz){
-    2af1:	8b 45 e8             	mov    -0x18(%ebp),%eax
-    2af4:	3b 45 f4             	cmp    -0xc(%ebp),%eax
-    2af7:	74 2e                	je     2b27 <bigwrite+0xcb>
-        printf(1, "write(%d) ret %d\n", sz, cc);
-    2af9:	8b 45 e8             	mov    -0x18(%ebp),%eax
-    2afc:	89 44 24 0c          	mov    %eax,0xc(%esp)
-    2b00:	8b 45 f4             	mov    -0xc(%ebp),%eax
-    2b03:	89 44 24 08          	mov    %eax,0x8(%esp)
-    2b07:	c7 44 24 04 18 58 00 	movl   $0x5818,0x4(%esp)
-    2b0e:	00 
-    2b0f:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
-    2b16:	e8 e0 1a 00 00       	call   45fb <printf>
-        exit(EXIT_STATUS_DEFAULT);
-    2b1b:	c7 04 24 02 00 00 00 	movl   $0x2,(%esp)
-    2b22:	e8 35 19 00 00       	call   445c <exit>
-    if(fd < 0){
-      printf(1, "cannot create bigwrite\n");
-      exit(EXIT_STATUS_DEFAULT);
-    }
-    int i;
-    for(i = 0; i < 2; i++){
-    2b27:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)
-    2b2b:	83 7d f0 01          	cmpl   $0x1,-0x10(%ebp)
-    2b2f:	7e a3                	jle    2ad4 <bigwrite+0x78>
-      if(cc != sz){
-        printf(1, "write(%d) ret %d\n", sz, cc);
-        exit(EXIT_STATUS_DEFAULT);
-      }
-    }
-    close(fd);
-    2b31:	8b 45 ec             	mov    -0x14(%ebp),%eax
-    2b34:	89 04 24             	mov    %eax,(%esp)
-    2b37:	e8 48 19 00 00       	call   4484 <close>
-    unlink("bigwrite");
-    2b3c:	c7 04 24 f7 57 00 00 	movl   $0x57f7,(%esp)
-    2b43:	e8 64 19 00 00       	call   44ac <unlink>
-  int fd, sz;
-
-  printf(1, "bigwrite test\n");
-
-  unlink("bigwrite");
-  for(sz = 499; sz < 12*512; sz += 471){
-    2b48:	81 45 f4 d7 01 00 00 	addl   $0x1d7,-0xc(%ebp)
-    2b4f:	81 7d f4 ff 17 00 00 	cmpl   $0x17ff,-0xc(%ebp)
-    2b56:	0f 8e 32 ff ff ff    	jle    2a8e <bigwrite+0x32>
-    }
-    close(fd);
-    unlink("bigwrite");
-  }
-
-  printf(1, "bigwrite ok\n");
-    2b5c:	c7 44 24 04 2a 58 00 	movl   $0x582a,0x4(%esp)
-    2b63:	00 
-    2b64:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
-    2b6b:	e8 8b 1a 00 00       	call   45fb <printf>
-}
-    2b70:	c9                   	leave  
-    2b71:	c3                   	ret    
-
-00002b72 <bigfile>:
-
-void
-bigfile(void)
-{
-    2b72:	55                   	push   %ebp
-    2b73:	89 e5                	mov    %esp,%ebp
-    2b75:	83 ec 28             	sub    $0x28,%esp
-  int fd, i, total, cc;
-
-  printf(1, "bigfile test\n");
-    2b78:	c7 44 24 04 37 58 00 	movl   $0x5837,0x4(%esp)
-    2b7f:	00 
-    2b80:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
-    2b87:	e8 6f 1a 00 00       	call   45fb <printf>
-
-  unlink("bigfile");
-    2b8c:	c7 04 24 45 58 00 00 	movl   $0x5845,(%esp)
-    2b93:	e8 14 19 00 00       	call   44ac <unlink>
-  fd = open("bigfile", O_CREATE | O_RDWR);
-    2b98:	c7 44 24 04 02 02 00 	movl   $0x202,0x4(%esp)
-    2b9f:	00 
-    2ba0:	c7 04 24 45 58 00 00 	movl   $0x5845,(%esp)
-    2ba7:	e8 f0 18 00 00       	call   449c <open>
-    2bac:	89 45 ec             	mov    %eax,-0x14(%ebp)
-  if(fd < 0){
-    2baf:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
-    2bb3:	79 20                	jns    2bd5 <bigfile+0x63>
-    printf(1, "cannot create bigfile");
-    2bb5:	c7 44 24 04 4d 58 00 	movl   $0x584d,0x4(%esp)
-    2bbc:	00 
-    2bbd:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
-    2bc4:	e8 32 1a 00 00       	call   45fb <printf>
-    exit(EXIT_STATUS_DEFAULT);
-    2bc9:	c7 04 24 02 00 00 00 	movl   $0x2,(%esp)
-    2bd0:	e8 87 18 00 00       	call   445c <exit>
-  }
-  for(i = 0; i < 20; i++){
-    2bd5:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
-    2bdc:	eb 61                	jmp    2c3f <bigfile+0xcd>
-    memset(buf, i, 600);
-    2bde:	c7 44 24 08 58 02 00 	movl   $0x258,0x8(%esp)
-    2be5:	00 
-    2be6:	8b 45 f4             	mov    -0xc(%ebp),%eax
-    2be9:	89 44 24 04          	mov    %eax,0x4(%esp)
-    2bed:	c7 04 24 60 90 00 00 	movl   $0x9060,(%esp)
-    2bf4:	e8 be 16 00 00       	call   42b7 <memset>
-    if(write(fd, buf, 600) != 600){
-    2bf9:	c7 44 24 08 58 02 00 	movl   $0x258,0x8(%esp)
-    2c00:	00 
-    2c01:	c7 44 24 04 60 90 00 	movl   $0x9060,0x4(%esp)
-    2c08:	00 
-    2c09:	8b 45 ec             	mov    -0x14(%ebp),%eax
-    2c0c:	89 04 24             	mov    %eax,(%esp)
-    2c0f:	e8 68 18 00 00       	call   447c <write>
-    2c14:	3d 58 02 00 00       	cmp    $0x258,%eax
-    2c19:	74 20                	je     2c3b <bigfile+0xc9>
-      printf(1, "write bigfile failed\n");
-    2c1b:	c7 44 24 04 63 58 00 	movl   $0x5863,0x4(%esp)
-    2c22:	00 
-    2c23:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
-    2c2a:	e8 cc 19 00 00       	call   45fb <printf>
-      exit(EXIT_STATUS_DEFAULT);
-    2c2f:	c7 04 24 02 00 00 00 	movl   $0x2,(%esp)
-    2c36:	e8 21 18 00 00       	call   445c <exit>
-  fd = open("bigfile", O_CREATE | O_RDWR);
-  if(fd < 0){
-    printf(1, "cannot create bigfile");
-    exit(EXIT_STATUS_DEFAULT);
-  }
-  for(i = 0; i < 20; i++){
-    2c3b:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
-    2c3f:	83 7d f4 13          	cmpl   $0x13,-0xc(%ebp)
-    2c43:	7e 99                	jle    2bde <bigfile+0x6c>
-    if(write(fd, buf, 600) != 600){
-      printf(1, "write bigfile failed\n");
-      exit(EXIT_STATUS_DEFAULT);
-    }
-  }
-  close(fd);
-    2c45:	8b 45 ec             	mov    -0x14(%ebp),%eax
-    2c48:	89 04 24             	mov    %eax,(%esp)
-    2c4b:	e8 34 18 00 00       	call   4484 <close>
-
-  fd = open("bigfile", 0);
-    2c50:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
-    2c57:	00 
-    2c58:	c7 04 24 45 58 00 00 	movl   $0x5845,(%esp)
-    2c5f:	e8 38 18 00 00       	call   449c <open>
-    2c64:	89 45 ec             	mov    %eax,-0x14(%ebp)
-  if(fd < 0){
-    2c67:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
-    2c6b:	79 20                	jns    2c8d <bigfile+0x11b>
-    printf(1, "cannot open bigfile\n");
-    2c6d:	c7 44 24 04 79 58 00 	movl   $0x5879,0x4(%esp)
-    2c74:	00 
-    2c75:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
-    2c7c:	e8 7a 19 00 00       	call   45fb <printf>
-    exit(EXIT_STATUS_DEFAULT);
-    2c81:	c7 04 24 02 00 00 00 	movl   $0x2,(%esp)
-    2c88:	e8 cf 17 00 00       	call   445c <exit>
-  }
-  total = 0;
-    2c8d:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
-  for(i = 0; ; i++){
-    2c94:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
-    cc = read(fd, buf, 300);
-    2c9b:	c7 44 24 08 2c 01 00 	movl   $0x12c,0x8(%esp)
-    2ca2:	00 
-    2ca3:	c7 44 24 04 60 90 00 	movl   $0x9060,0x4(%esp)
-    2caa:	00 
-    2cab:	8b 45 ec             	mov    -0x14(%ebp),%eax
-    2cae:	89 04 24             	mov    %eax,(%esp)
-    2cb1:	e8 be 17 00 00       	call   4474 <read>
-    2cb6:	89 45 e8             	mov    %eax,-0x18(%ebp)
-    if(cc < 0){
-    2cb9:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
-    2cbd:	79 20                	jns    2cdf <bigfile+0x16d>
-      printf(1, "read bigfile failed\n");
-    2cbf:	c7 44 24 04 8e 58 00 	movl   $0x588e,0x4(%esp)
-    2cc6:	00 
-    2cc7:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
-    2cce:	e8 28 19 00 00       	call   45fb <printf>
-      exit(EXIT_STATUS_DEFAULT);
-    2cd3:	c7 04 24 02 00 00 00 	movl   $0x2,(%esp)
-    2cda:	e8 7d 17 00 00       	call   445c <exit>
-    }
-    if(cc == 0)
-    2cdf:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
-    2ce3:	0f 84 8c 00 00 00    	je     2d75 <bigfile+0x203>
-      break;
-    if(cc != 300){
-    2ce9:	81 7d e8 2c 01 00 00 	cmpl   $0x12c,-0x18(%ebp)
-    2cf0:	74 20                	je     2d12 <bigfile+0x1a0>
-      printf(1, "short read bigfile\n");
-    2cf2:	c7 44 24 04 a3 58 00 	movl   $0x58a3,0x4(%esp)
-    2cf9:	00 
-    2cfa:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
-    2d01:	e8 f5 18 00 00       	call   45fb <printf>
-      exit(EXIT_STATUS_DEFAULT);
-    2d06:	c7 04 24 02 00 00 00 	movl   $0x2,(%esp)
-    2d0d:	e8 4a 17 00 00       	call   445c <exit>
-    }
-    if(buf[0] != i/2 || buf[299] != i/2){
-    2d12:	0f b6 05 60 90 00 00 	movzbl 0x9060,%eax
-    2d19:	0f be d0             	movsbl %al,%edx
-    2d1c:	8b 45 f4             	mov    -0xc(%ebp),%eax
-    2d1f:	89 c1                	mov    %eax,%ecx
-    2d21:	c1 e9 1f             	shr    $0x1f,%ecx
-    2d24:	01 c8                	add    %ecx,%eax
-    2d26:	d1 f8                	sar    %eax
-    2d28:	39 c2                	cmp    %eax,%edx
-    2d2a:	75 1a                	jne    2d46 <bigfile+0x1d4>
-    2d2c:	0f b6 05 8b 91 00 00 	movzbl 0x918b,%eax
-    2d33:	0f be d0             	movsbl %al,%edx
-    2d36:	8b 45 f4             	mov    -0xc(%ebp),%eax
-    2d39:	89 c1                	mov    %eax,%ecx
-    2d3b:	c1 e9 1f             	shr    $0x1f,%ecx
-    2d3e:	01 c8                	add    %ecx,%eax
-    2d40:	d1 f8                	sar    %eax
-    2d42:	39 c2                	cmp    %eax,%edx
-    2d44:	74 20                	je     2d66 <bigfile+0x1f4>
-      printf(1, "read bigfile wrong data\n");
-    2d46:	c7 44 24 04 b7 58 00 	movl   $0x58b7,0x4(%esp)
-    2d4d:	00 
-    2d4e:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
-    2d55:	e8 a1 18 00 00       	call   45fb <printf>
-      exit(EXIT_STATUS_DEFAULT);
-    2d5a:	c7 04 24 02 00 00 00 	movl   $0x2,(%esp)
-    2d61:	e8 f6 16 00 00       	call   445c <exit>
-    }
-    total += cc;
-    2d66:	8b 45 e8             	mov    -0x18(%ebp),%eax
-    2d69:	01 45 f0             	add    %eax,-0x10(%ebp)
-  if(fd < 0){
-    printf(1, "cannot open bigfile\n");
-    exit(EXIT_STATUS_DEFAULT);
-  }
-  total = 0;
-  for(i = 0; ; i++){
-    2d6c:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
-    if(buf[0] != i/2 || buf[299] != i/2){
-      printf(1, "read bigfile wrong data\n");
-      exit(EXIT_STATUS_DEFAULT);
-    }
-    total += cc;
-  }
-    2d70:	e9 26 ff ff ff       	jmp    2c9b <bigfile+0x129>
-    if(cc < 0){
-      printf(1, "read bigfile failed\n");
-      exit(EXIT_STATUS_DEFAULT);
-    }
-    if(cc == 0)
-      break;
-    2d75:	90                   	nop
-      printf(1, "read bigfile wrong data\n");
-      exit(EXIT_STATUS_DEFAULT);
-    }
-    total += cc;
-  }
-  close(fd);
-    2d76:	8b 45 ec             	mov    -0x14(%ebp),%eax
-    2d79:	89 04 24             	mov    %eax,(%esp)
-    2d7c:	e8 03 17 00 00       	call   4484 <close>
-  if(total != 20*600){
-    2d81:	81 7d f0 e0 2e 00 00 	cmpl   $0x2ee0,-0x10(%ebp)
-    2d88:	74 20                	je     2daa <bigfile+0x238>
-    printf(1, "read bigfile wrong total\n");
-    2d8a:	c7 44 24 04 d0 58 00 	movl   $0x58d0,0x4(%esp)
-    2d91:	00 
-    2d92:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
-    2d99:	e8 5d 18 00 00       	call   45fb <printf>
-    exit(EXIT_STATUS_DEFAULT);
-    2d9e:	c7 04 24 02 00 00 00 	movl   $0x2,(%esp)
-    2da5:	e8 b2 16 00 00       	call   445c <exit>
-  }
-  unlink("bigfile");
-    2daa:	c7 04 24 45 58 00 00 	movl   $0x5845,(%esp)
-    2db1:	e8 f6 16 00 00       	call   44ac <unlink>
-
-  printf(1, "bigfile test ok\n");
-    2db6:	c7 44 24 04 ea 58 00 	movl   $0x58ea,0x4(%esp)
-    2dbd:	00 
-    2dbe:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
-    2dc5:	e8 31 18 00 00       	call   45fb <printf>
-}
-    2dca:	c9                   	leave  
-    2dcb:	c3                   	ret    
-
-00002dcc <fourteen>:
-
-void
-fourteen(void)
-{
-    2dcc:	55                   	push   %ebp
-    2dcd:	89 e5                	mov    %esp,%ebp
-    2dcf:	83 ec 28             	sub    $0x28,%esp
-  int fd;
-
-  // DIRSIZ is 14.
-  printf(1, "fourteen test\n");
-    2dd2:	c7 44 24 04 fb 58 00 	movl   $0x58fb,0x4(%esp)
-    2dd9:	00 
-    2dda:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
-    2de1:	e8 15 18 00 00       	call   45fb <printf>
-
-  if(mkdir("12345678901234") != 0){
-    2de6:	c7 04 24 0a 59 00 00 	movl   $0x590a,(%esp)
-    2ded:	e8 d2 16 00 00       	call   44c4 <mkdir>
-    2df2:	85 c0                	test   %eax,%eax
-    2df4:	74 20                	je     2e16 <fourteen+0x4a>
-    printf(1, "mkdir 12345678901234 failed\n");
-    2df6:	c7 44 24 04 19 59 00 	movl   $0x5919,0x4(%esp)
-    2dfd:	00 
-    2dfe:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
-    2e05:	e8 f1 17 00 00       	call   45fb <printf>
-    exit(EXIT_STATUS_DEFAULT);
-    2e0a:	c7 04 24 02 00 00 00 	movl   $0x2,(%esp)
-    2e11:	e8 46 16 00 00       	call   445c <exit>
-  }
-  if(mkdir("12345678901234/123456789012345") != 0){
-    2e16:	c7 04 24 38 59 00 00 	movl   $0x5938,(%esp)
-    2e1d:	e8 a2 16 00 00       	call   44c4 <mkdir>
-    2e22:	85 c0                	test   %eax,%eax
-    2e24:	74 20                	je     2e46 <fourteen+0x7a>
-    printf(1, "mkdir 12345678901234/123456789012345 failed\n");
-    2e26:	c7 44 24 04 58 59 00 	movl   $0x5958,0x4(%esp)
-    2e2d:	00 
-    2e2e:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
-    2e35:	e8 c1 17 00 00       	call   45fb <printf>
-    exit(EXIT_STATUS_DEFAULT);
-    2e3a:	c7 04 24 02 00 00 00 	movl   $0x2,(%esp)
-    2e41:	e8 16 16 00 00       	call   445c <exit>
-  }
-  fd = open("123456789012345/123456789012345/123456789012345", O_CREATE);
-    2e46:	c7 44 24 04 00 02 00 	movl   $0x200,0x4(%esp)
-    2e4d:	00 
-    2e4e:	c7 04 24 88 59 00 00 	movl   $0x5988,(%esp)
-    2e55:	e8 42 16 00 00       	call   449c <open>
-    2e5a:	89 45 f4             	mov    %eax,-0xc(%ebp)
-  if(fd < 0){
-    2e5d:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
-    2e61:	79 20                	jns    2e83 <fourteen+0xb7>
-    printf(1, "create 123456789012345/123456789012345/123456789012345 failed\n");
-    2e63:	c7 44 24 04 b8 59 00 	movl   $0x59b8,0x4(%esp)
-    2e6a:	00 
-    2e6b:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
-    2e72:	e8 84 17 00 00       	call   45fb <printf>
-    exit(EXIT_STATUS_DEFAULT);
-    2e77:	c7 04 24 02 00 00 00 	movl   $0x2,(%esp)
-    2e7e:	e8 d9 15 00 00       	call   445c <exit>
-  }
-  close(fd);
-    2e83:	8b 45 f4             	mov    -0xc(%ebp),%eax
-    2e86:	89 04 24             	mov    %eax,(%esp)
-    2e89:	e8 f6 15 00 00       	call   4484 <close>
-  fd = open("12345678901234/12345678901234/12345678901234", 0);
-    2e8e:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
-    2e95:	00 
-    2e96:	c7 04 24 f8 59 00 00 	movl   $0x59f8,(%esp)
-    2e9d:	e8 fa 15 00 00       	call   449c <open>
-    2ea2:	89 45 f4             	mov    %eax,-0xc(%ebp)
-  if(fd < 0){
-    2ea5:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
-    2ea9:	79 20                	jns    2ecb <fourteen+0xff>
-    printf(1, "open 12345678901234/12345678901234/12345678901234 failed\n");
-    2eab:	c7 44 24 04 28 5a 00 	movl   $0x5a28,0x4(%esp)
-    2eb2:	00 
-    2eb3:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
-    2eba:	e8 3c 17 00 00       	call   45fb <printf>
-    exit(EXIT_STATUS_DEFAULT);
-    2ebf:	c7 04 24 02 00 00 00 	movl   $0x2,(%esp)
-    2ec6:	e8 91 15 00 00       	call   445c <exit>
-  }
-  close(fd);
-    2ecb:	8b 45 f4             	mov    -0xc(%ebp),%eax
-    2ece:	89 04 24             	mov    %eax,(%esp)
-    2ed1:	e8 ae 15 00 00       	call   4484 <close>
-
-  if(mkdir("12345678901234/12345678901234") == 0){
-    2ed6:	c7 04 24 62 5a 00 00 	movl   $0x5a62,(%esp)
-    2edd:	e8 e2 15 00 00       	call   44c4 <mkdir>
-    2ee2:	85 c0                	test   %eax,%eax
-    2ee4:	75 20                	jne    2f06 <fourteen+0x13a>
-    printf(1, "mkdir 12345678901234/12345678901234 succeeded!\n");
-    2ee6:	c7 44 24 04 80 5a 00 	movl   $0x5a80,0x4(%esp)
-    2eed:	00 
-    2eee:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
-    2ef5:	e8 01 17 00 00       	call   45fb <printf>
-    exit(EXIT_STATUS_DEFAULT);
-    2efa:	c7 04 24 02 00 00 00 	movl   $0x2,(%esp)
-    2f01:	e8 56 15 00 00       	call   445c <exit>
-  }
-  if(mkdir("123456789012345/12345678901234") == 0){
-    2f06:	c7 04 24 b0 5a 00 00 	movl   $0x5ab0,(%esp)
-    2f0d:	e8 b2 15 00 00       	call   44c4 <mkdir>
-    2f12:	85 c0                	test   %eax,%eax
-    2f14:	75 20                	jne    2f36 <fourteen+0x16a>
-    printf(1, "mkdir 12345678901234/123456789012345 succeeded!\n");
-    2f16:	c7 44 24 04 d0 5a 00 	movl   $0x5ad0,0x4(%esp)
-    2f1d:	00 
-    2f1e:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
-    2f25:	e8 d1 16 00 00       	call   45fb <printf>
-    exit(EXIT_STATUS_DEFAULT);
-    2f2a:	c7 04 24 02 00 00 00 	movl   $0x2,(%esp)
-    2f31:	e8 26 15 00 00       	call   445c <exit>
-  }
-
-  printf(1, "fourteen ok\n");
-    2f36:	c7 44 24 04 01 5b 00 	movl   $0x5b01,0x4(%esp)
-    2f3d:	00 
-    2f3e:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
-    2f45:	e8 b1 16 00 00       	call   45fb <printf>
-}
-    2f4a:	c9                   	leave  
-    2f4b:	c3                   	ret    
-
-00002f4c <rmdot>:
-
-void
-rmdot(void)
-{
-    2f4c:	55                   	push   %ebp
-    2f4d:	89 e5                	mov    %esp,%ebp
-    2f4f:	83 ec 18             	sub    $0x18,%esp
-  printf(1, "rmdot test\n");
-    2f52:	c7 44 24 04 0e 5b 00 	movl   $0x5b0e,0x4(%esp)
-    2f59:	00 
-    2f5a:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
-    2f61:	e8 95 16 00 00       	call   45fb <printf>
-  if(mkdir("dots") != 0){
-    2f66:	c7 04 24 1a 5b 00 00 	movl   $0x5b1a,(%esp)
-    2f6d:	e8 52 15 00 00       	call   44c4 <mkdir>
-    2f72:	85 c0                	test   %eax,%eax
-    2f74:	74 20                	je     2f96 <rmdot+0x4a>
-    printf(1, "mkdir dots failed\n");
-    2f76:	c7 44 24 04 1f 5b 00 	movl   $0x5b1f,0x4(%esp)
-    2f7d:	00 
-    2f7e:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
-    2f85:	e8 71 16 00 00       	call   45fb <printf>
-    exit(EXIT_STATUS_DEFAULT);
-    2f8a:	c7 04 24 02 00 00 00 	movl   $0x2,(%esp)
-    2f91:	e8 c6 14 00 00       	call   445c <exit>
-  }
-  if(chdir("dots") != 0){
-    2f96:	c7 04 24 1a 5b 00 00 	movl   $0x5b1a,(%esp)
-    2f9d:	e8 2a 15 00 00       	call   44cc <chdir>
-    2fa2:	85 c0                	test   %eax,%eax
-    2fa4:	74 20                	je     2fc6 <rmdot+0x7a>
-    printf(1, "chdir dots failed\n");
-    2fa6:	c7 44 24 04 32 5b 00 	movl   $0x5b32,0x4(%esp)
-    2fad:	00 
-    2fae:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
-    2fb5:	e8 41 16 00 00       	call   45fb <printf>
-    exit(EXIT_STATUS_DEFAULT);
-    2fba:	c7 04 24 02 00 00 00 	movl   $0x2,(%esp)
-    2fc1:	e8 96 14 00 00       	call   445c <exit>
-  }
-  if(unlink(".") == 0){
-    2fc6:	c7 04 24 4b 52 00 00 	movl   $0x524b,(%esp)
-    2fcd:	e8 da 14 00 00       	call   44ac <unlink>
-    2fd2:	85 c0                	test   %eax,%eax
-    2fd4:	75 20                	jne    2ff6 <rmdot+0xaa>
-    printf(1, "rm . worked!\n");
-    2fd6:	c7 44 24 04 45 5b 00 	movl   $0x5b45,0x4(%esp)
-    2fdd:	00 
-    2fde:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
-    2fe5:	e8 11 16 00 00       	call   45fb <printf>
-    exit(EXIT_STATUS_DEFAULT);
-    2fea:	c7 04 24 02 00 00 00 	movl   $0x2,(%esp)
-    2ff1:	e8 66 14 00 00       	call   445c <exit>
-  }
-  if(unlink("..") == 0){
-    2ff6:	c7 04 24 de 4d 00 00 	movl   $0x4dde,(%esp)
-    2ffd:	e8 aa 14 00 00       	call   44ac <unlink>
-    3002:	85 c0                	test   %eax,%eax
-    3004:	75 20                	jne    3026 <rmdot+0xda>
-    printf(1, "rm .. worked!\n");
-    3006:	c7 44 24 04 53 5b 00 	movl   $0x5b53,0x4(%esp)
-    300d:	00 
-    300e:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
-    3015:	e8 e1 15 00 00       	call   45fb <printf>
-    exit(EXIT_STATUS_DEFAULT);
-    301a:	c7 04 24 02 00 00 00 	movl   $0x2,(%esp)
-    3021:	e8 36 14 00 00       	call   445c <exit>
-  }
-  if(chdir("/") != 0){
-    3026:	c7 04 24 32 4a 00 00 	movl   $0x4a32,(%esp)
-    302d:	e8 9a 14 00 00       	call   44cc <chdir>
-    3032:	85 c0                	test   %eax,%eax
-    3034:	74 20                	je     3056 <rmdot+0x10a>
-    printf(1, "chdir / failed\n");
-    3036:	c7 44 24 04 34 4a 00 	movl   $0x4a34,0x4(%esp)
-    303d:	00 
-    303e:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
-    3045:	e8 b1 15 00 00       	call   45fb <printf>
-    exit(EXIT_STATUS_DEFAULT);
-    304a:	c7 04 24 02 00 00 00 	movl   $0x2,(%esp)
-    3051:	e8 06 14 00 00       	call   445c <exit>
-  }
-  if(unlink("dots/.") == 0){
-    3056:	c7 04 24 62 5b 00 00 	movl   $0x5b62,(%esp)
-    305d:	e8 4a 14 00 00       	call   44ac <unlink>
-    3062:	85 c0                	test   %eax,%eax
-    3064:	75 20                	jne    3086 <rmdot+0x13a>
-    printf(1, "unlink dots/. worked!\n");
-    3066:	c7 44 24 04 69 5b 00 	movl   $0x5b69,0x4(%esp)
-    306d:	00 
-    306e:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
-    3075:	e8 81 15 00 00       	call   45fb <printf>
-    exit(EXIT_STATUS_DEFAULT);
-    307a:	c7 04 24 02 00 00 00 	movl   $0x2,(%esp)
-    3081:	e8 d6 13 00 00       	call   445c <exit>
-  }
-  if(unlink("dots/..") == 0){
-    3086:	c7 04 24 80 5b 00 00 	movl   $0x5b80,(%esp)
-    308d:	e8 1a 14 00 00       	call   44ac <unlink>
-    3092:	85 c0                	test   %eax,%eax
-    3094:	75 20                	jne    30b6 <rmdot+0x16a>
-    printf(1, "unlink dots/.. worked!\n");
-    3096:	c7 44 24 04 88 5b 00 	movl   $0x5b88,0x4(%esp)
-    309d:	00 
-    309e:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
-    30a5:	e8 51 15 00 00       	call   45fb <printf>
-    exit(EXIT_STATUS_DEFAULT);
-    30aa:	c7 04 24 02 00 00 00 	movl   $0x2,(%esp)
-    30b1:	e8 a6 13 00 00       	call   445c <exit>
-  }
-  if(unlink("dots") != 0){
-    30b6:	c7 04 24 1a 5b 00 00 	movl   $0x5b1a,(%esp)
-    30bd:	e8 ea 13 00 00       	call   44ac <unlink>
-    30c2:	85 c0                	test   %eax,%eax
-    30c4:	74 20                	je     30e6 <rmdot+0x19a>
-    printf(1, "unlink dots failed!\n");
-    30c6:	c7 44 24 04 a0 5b 00 	movl   $0x5ba0,0x4(%esp)
-    30cd:	00 
-    30ce:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
-    30d5:	e8 21 15 00 00       	call   45fb <printf>
-    exit(EXIT_STATUS_DEFAULT);
-    30da:	c7 04 24 02 00 00 00 	movl   $0x2,(%esp)
-    30e1:	e8 76 13 00 00       	call   445c <exit>
-  }
-  printf(1, "rmdot ok\n");
-    30e6:	c7 44 24 04 b5 5b 00 	movl   $0x5bb5,0x4(%esp)
-    30ed:	00 
-    30ee:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
-    30f5:	e8 01 15 00 00       	call   45fb <printf>
-}
-    30fa:	c9                   	leave  
-    30fb:	c3                   	ret    
-
-000030fc <dirfile>:
-
-void
-dirfile(void)
-{
-    30fc:	55                   	push   %ebp
-    30fd:	89 e5                	mov    %esp,%ebp
-    30ff:	83 ec 28             	sub    $0x28,%esp
-  int fd;
-
-  printf(1, "dir vs file\n");
-    3102:	c7 44 24 04 bf 5b 00 	movl   $0x5bbf,0x4(%esp)
-    3109:	00 
-    310a:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
-    3111:	e8 e5 14 00 00       	call   45fb <printf>
-
-  fd = open("dirfile", O_CREATE);
-    3116:	c7 44 24 04 00 02 00 	movl   $0x200,0x4(%esp)
-    311d:	00 
-    311e:	c7 04 24 cc 5b 00 00 	movl   $0x5bcc,(%esp)
-    3125:	e8 72 13 00 00       	call   449c <open>
-    312a:	89 45 f4             	mov    %eax,-0xc(%ebp)
-  if(fd < 0){
-    312d:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
-    3131:	79 20                	jns    3153 <dirfile+0x57>
-    printf(1, "create dirfile failed\n");
-    3133:	c7 44 24 04 d4 5b 00 	movl   $0x5bd4,0x4(%esp)
-    313a:	00 
-    313b:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
-    3142:	e8 b4 14 00 00       	call   45fb <printf>
-    exit(EXIT_STATUS_DEFAULT);
-    3147:	c7 04 24 02 00 00 00 	movl   $0x2,(%esp)
-    314e:	e8 09 13 00 00       	call   445c <exit>
-  }
-  close(fd);
-    3153:	8b 45 f4             	mov    -0xc(%ebp),%eax
-    3156:	89 04 24             	mov    %eax,(%esp)
-    3159:	e8 26 13 00 00       	call   4484 <close>
-  if(chdir("dirfile") == 0){
-    315e:	c7 04 24 cc 5b 00 00 	movl   $0x5bcc,(%esp)
-    3165:	e8 62 13 00 00       	call   44cc <chdir>
-    316a:	85 c0                	test   %eax,%eax
-    316c:	75 20                	jne    318e <dirfile+0x92>
-    printf(1, "chdir dirfile succeeded!\n");
-    316e:	c7 44 24 04 eb 5b 00 	movl   $0x5beb,0x4(%esp)
-    3175:	00 
-    3176:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
-    317d:	e8 79 14 00 00       	call   45fb <printf>
-    exit(EXIT_STATUS_DEFAULT);
-    3182:	c7 04 24 02 00 00 00 	movl   $0x2,(%esp)
-    3189:	e8 ce 12 00 00       	call   445c <exit>
-  }
-  fd = open("dirfile/xx", 0);
-    318e:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
-    3195:	00 
-    3196:	c7 04 24 05 5c 00 00 	movl   $0x5c05,(%esp)
-    319d:	e8 fa 12 00 00       	call   449c <open>
-    31a2:	89 45 f4             	mov    %eax,-0xc(%ebp)
-  if(fd >= 0){
-    31a5:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
-    31a9:	78 20                	js     31cb <dirfile+0xcf>
-    printf(1, "create dirfile/xx succeeded!\n");
-    31ab:	c7 44 24 04 10 5c 00 	movl   $0x5c10,0x4(%esp)
-    31b2:	00 
-    31b3:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
-    31ba:	e8 3c 14 00 00       	call   45fb <printf>
-    exit(EXIT_STATUS_DEFAULT);
-    31bf:	c7 04 24 02 00 00 00 	movl   $0x2,(%esp)
-    31c6:	e8 91 12 00 00       	call   445c <exit>
-  }
-  fd = open("dirfile/xx", O_CREATE);
-    31cb:	c7 44 24 04 00 02 00 	movl   $0x200,0x4(%esp)
-    31d2:	00 
-    31d3:	c7 04 24 05 5c 00 00 	movl   $0x5c05,(%esp)
-    31da:	e8 bd 12 00 00       	call   449c <open>
-    31df:	89 45 f4             	mov    %eax,-0xc(%ebp)
-  if(fd >= 0){
-    31e2:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
-    31e6:	78 20                	js     3208 <dirfile+0x10c>
-    printf(1, "create dirfile/xx succeeded!\n");
-    31e8:	c7 44 24 04 10 5c 00 	movl   $0x5c10,0x4(%esp)
-    31ef:	00 
-    31f0:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
-    31f7:	e8 ff 13 00 00       	call   45fb <printf>
-    exit(EXIT_STATUS_DEFAULT);
-    31fc:	c7 04 24 02 00 00 00 	movl   $0x2,(%esp)
-    3203:	e8 54 12 00 00       	call   445c <exit>
-  }
-  if(mkdir("dirfile/xx") == 0){
-    3208:	c7 04 24 05 5c 00 00 	movl   $0x5c05,(%esp)
-    320f:	e8 b0 12 00 00       	call   44c4 <mkdir>
-    3214:	85 c0                	test   %eax,%eax
-    3216:	75 20                	jne    3238 <dirfile+0x13c>
-    printf(1, "mkdir dirfile/xx succeeded!\n");
-    3218:	c7 44 24 04 2e 5c 00 	movl   $0x5c2e,0x4(%esp)
-    321f:	00 
-    3220:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
-    3227:	e8 cf 13 00 00       	call   45fb <printf>
-    exit(EXIT_STATUS_DEFAULT);
-    322c:	c7 04 24 02 00 00 00 	movl   $0x2,(%esp)
-    3233:	e8 24 12 00 00       	call   445c <exit>
-  }
-  if(unlink("dirfile/xx") == 0){
-    3238:	c7 04 24 05 5c 00 00 	movl   $0x5c05,(%esp)
-    323f:	e8 68 12 00 00       	call   44ac <unlink>
-    3244:	85 c0                	test   %eax,%eax
-    3246:	75 20                	jne    3268 <dirfile+0x16c>
-    printf(1, "unlink dirfile/xx succeeded!\n");
-    3248:	c7 44 24 04 4b 5c 00 	movl   $0x5c4b,0x4(%esp)
-    324f:	00 
-    3250:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
-    3257:	e8 9f 13 00 00       	call   45fb <printf>
-    exit(EXIT_STATUS_DEFAULT);
-    325c:	c7 04 24 02 00 00 00 	movl   $0x2,(%esp)
-    3263:	e8 f4 11 00 00       	call   445c <exit>
-  }
-  if(link("README", "dirfile/xx") == 0){
-    3268:	c7 44 24 04 05 5c 00 	movl   $0x5c05,0x4(%esp)
-    326f:	00 
-    3270:	c7 04 24 69 5c 00 00 	movl   $0x5c69,(%esp)
-    3277:	e8 40 12 00 00       	call   44bc <link>
-    327c:	85 c0                	test   %eax,%eax
-    327e:	75 20                	jne    32a0 <dirfile+0x1a4>
-    printf(1, "link to dirfile/xx succeeded!\n");
-    3280:	c7 44 24 04 70 5c 00 	movl   $0x5c70,0x4(%esp)
-    3287:	00 
-    3288:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
-    328f:	e8 67 13 00 00       	call   45fb <printf>
-    exit(EXIT_STATUS_DEFAULT);
-    3294:	c7 04 24 02 00 00 00 	movl   $0x2,(%esp)
-    329b:	e8 bc 11 00 00       	call   445c <exit>
-  }
-  if(unlink("dirfile") != 0){
-    32a0:	c7 04 24 cc 5b 00 00 	movl   $0x5bcc,(%esp)
-    32a7:	e8 00 12 00 00       	call   44ac <unlink>
-    32ac:	85 c0                	test   %eax,%eax
-    32ae:	74 20                	je     32d0 <dirfile+0x1d4>
-    printf(1, "unlink dirfile failed!\n");
-    32b0:	c7 44 24 04 8f 5c 00 	movl   $0x5c8f,0x4(%esp)
-    32b7:	00 
-    32b8:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
-    32bf:	e8 37 13 00 00       	call   45fb <printf>
-    exit(EXIT_STATUS_DEFAULT);
-    32c4:	c7 04 24 02 00 00 00 	movl   $0x2,(%esp)
-    32cb:	e8 8c 11 00 00       	call   445c <exit>
-  }
-
-  fd = open(".", O_RDWR);
-    32d0:	c7 44 24 04 02 00 00 	movl   $0x2,0x4(%esp)
-    32d7:	00 
-    32d8:	c7 04 24 4b 52 00 00 	movl   $0x524b,(%esp)
-    32df:	e8 b8 11 00 00       	call   449c <open>
-    32e4:	89 45 f4             	mov    %eax,-0xc(%ebp)
-  if(fd >= 0){
-    32e7:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
-    32eb:	78 20                	js     330d <dirfile+0x211>
-    printf(1, "open . for writing succeeded!\n");
-    32ed:	c7 44 24 04 a8 5c 00 	movl   $0x5ca8,0x4(%esp)
-    32f4:	00 
-    32f5:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
-    32fc:	e8 fa 12 00 00       	call   45fb <printf>
-    exit(EXIT_STATUS_DEFAULT);
-    3301:	c7 04 24 02 00 00 00 	movl   $0x2,(%esp)
-    3308:	e8 4f 11 00 00       	call   445c <exit>
-  }
-  fd = open(".", 0);
-    330d:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
-    3314:	00 
-    3315:	c7 04 24 4b 52 00 00 	movl   $0x524b,(%esp)
-    331c:	e8 7b 11 00 00       	call   449c <open>
-    3321:	89 45 f4             	mov    %eax,-0xc(%ebp)
-  if(write(fd, "x", 1) > 0){
-    3324:	c7 44 24 08 01 00 00 	movl   $0x1,0x8(%esp)
-    332b:	00 
-    332c:	c7 44 24 04 97 4e 00 	movl   $0x4e97,0x4(%esp)
-    3333:	00 
-    3334:	8b 45 f4             	mov    -0xc(%ebp),%eax
-    3337:	89 04 24             	mov    %eax,(%esp)
-    333a:	e8 3d 11 00 00       	call   447c <write>
-    333f:	85 c0                	test   %eax,%eax
-    3341:	7e 20                	jle    3363 <dirfile+0x267>
-    printf(1, "write . succeeded!\n");
-    3343:	c7 44 24 04 c7 5c 00 	movl   $0x5cc7,0x4(%esp)
-    334a:	00 
-    334b:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
-    3352:	e8 a4 12 00 00       	call   45fb <printf>
-    exit(EXIT_STATUS_DEFAULT);
-    3357:	c7 04 24 02 00 00 00 	movl   $0x2,(%esp)
-    335e:	e8 f9 10 00 00       	call   445c <exit>
-  }
-  close(fd);
-    3363:	8b 45 f4             	mov    -0xc(%ebp),%eax
-    3366:	89 04 24             	mov    %eax,(%esp)
-    3369:	e8 16 11 00 00       	call   4484 <close>
-
-  printf(1, "dir vs file OK\n");
-    336e:	c7 44 24 04 db 5c 00 	movl   $0x5cdb,0x4(%esp)
-    3375:	00 
-    3376:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
-    337d:	e8 79 12 00 00       	call   45fb <printf>
-}
-    3382:	c9                   	leave  
-    3383:	c3                   	ret    
-
-00003384 <iref>:
-
-// test that iput() is called at the end of _namei()
-void
-iref(void)
-{
-    3384:	55                   	push   %ebp
-    3385:	89 e5                	mov    %esp,%ebp
-    3387:	83 ec 28             	sub    $0x28,%esp
-  int i, fd;
-
-  printf(1, "empty file name\n");
-    338a:	c7 44 24 04 eb 5c 00 	movl   $0x5ceb,0x4(%esp)
-    3391:	00 
-    3392:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
-    3399:	e8 5d 12 00 00       	call   45fb <printf>
-
-  // the 50 is NINODE
-  for(i = 0; i < 50 + 1; i++){
-    339e:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
-    33a5:	e9 e0 00 00 00       	jmp    348a <iref+0x106>
-    if(mkdir("irefd") != 0){
-    33aa:	c7 04 24 fc 5c 00 00 	movl   $0x5cfc,(%esp)
-    33b1:	e8 0e 11 00 00       	call   44c4 <mkdir>
-    33b6:	85 c0                	test   %eax,%eax
-    33b8:	74 20                	je     33da <iref+0x56>
-      printf(1, "mkdir irefd failed\n");
-    33ba:	c7 44 24 04 02 5d 00 	movl   $0x5d02,0x4(%esp)
-    33c1:	00 
-    33c2:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
-    33c9:	e8 2d 12 00 00       	call   45fb <printf>
-      exit(EXIT_STATUS_DEFAULT);
-    33ce:	c7 04 24 02 00 00 00 	movl   $0x2,(%esp)
-    33d5:	e8 82 10 00 00       	call   445c <exit>
-    }
-    if(chdir("irefd") != 0){
-    33da:	c7 04 24 fc 5c 00 00 	movl   $0x5cfc,(%esp)
-    33e1:	e8 e6 10 00 00       	call   44cc <chdir>
-    33e6:	85 c0                	test   %eax,%eax
-    33e8:	74 20                	je     340a <iref+0x86>
-      printf(1, "chdir irefd failed\n");
-    33ea:	c7 44 24 04 16 5d 00 	movl   $0x5d16,0x4(%esp)
-    33f1:	00 
-    33f2:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
-    33f9:	e8 fd 11 00 00       	call   45fb <printf>
-      exit(EXIT_STATUS_DEFAULT);
-    33fe:	c7 04 24 02 00 00 00 	movl   $0x2,(%esp)
-    3405:	e8 52 10 00 00       	call   445c <exit>
-    }
-
-    mkdir("");
-    340a:	c7 04 24 2a 5d 00 00 	movl   $0x5d2a,(%esp)
-    3411:	e8 ae 10 00 00       	call   44c4 <mkdir>
-    link("README", "");
-    3416:	c7 44 24 04 2a 5d 00 	movl   $0x5d2a,0x4(%esp)
-    341d:	00 
-    341e:	c7 04 24 69 5c 00 00 	movl   $0x5c69,(%esp)
-    3425:	e8 92 10 00 00       	call   44bc <link>
-    fd = open("", O_CREATE);
-    342a:	c7 44 24 04 00 02 00 	movl   $0x200,0x4(%esp)
-    3431:	00 
-    3432:	c7 04 24 2a 5d 00 00 	movl   $0x5d2a,(%esp)
-    3439:	e8 5e 10 00 00       	call   449c <open>
-    343e:	89 45 f0             	mov    %eax,-0x10(%ebp)
-    if(fd >= 0)
-    3441:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
-    3445:	78 0b                	js     3452 <iref+0xce>
-      close(fd);
-    3447:	8b 45 f0             	mov    -0x10(%ebp),%eax
-    344a:	89 04 24             	mov    %eax,(%esp)
-    344d:	e8 32 10 00 00       	call   4484 <close>
-    fd = open("xx", O_CREATE);
-    3452:	c7 44 24 04 00 02 00 	movl   $0x200,0x4(%esp)
-    3459:	00 
-    345a:	c7 04 24 2b 5d 00 00 	movl   $0x5d2b,(%esp)
-    3461:	e8 36 10 00 00       	call   449c <open>
-    3466:	89 45 f0             	mov    %eax,-0x10(%ebp)
-    if(fd >= 0)
-    3469:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
-    346d:	78 0b                	js     347a <iref+0xf6>
-      close(fd);
-    346f:	8b 45 f0             	mov    -0x10(%ebp),%eax
-    3472:	89 04 24             	mov    %eax,(%esp)
-    3475:	e8 0a 10 00 00       	call   4484 <close>
-    unlink("xx");
-    347a:	c7 04 24 2b 5d 00 00 	movl   $0x5d2b,(%esp)
-    3481:	e8 26 10 00 00       	call   44ac <unlink>
-  int i, fd;
-
-  printf(1, "empty file name\n");
-
-  // the 50 is NINODE
-  for(i = 0; i < 50 + 1; i++){
-    3486:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
-    348a:	83 7d f4 32          	cmpl   $0x32,-0xc(%ebp)
-    348e:	0f 8e 16 ff ff ff    	jle    33aa <iref+0x26>
-    if(fd >= 0)
-      close(fd);
-    unlink("xx");
-  }
-
-  chdir("/");
-    3494:	c7 04 24 32 4a 00 00 	movl   $0x4a32,(%esp)
-    349b:	e8 2c 10 00 00       	call   44cc <chdir>
-  printf(1, "empty file name OK\n");
-    34a0:	c7 44 24 04 2e 5d 00 	movl   $0x5d2e,0x4(%esp)
-    34a7:	00 
-    34a8:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
-    34af:	e8 47 11 00 00       	call   45fb <printf>
-}
-    34b4:	c9                   	leave  
-    34b5:	c3                   	ret    
-
-000034b6 <forktest>:
-// test that fork fails gracefully
-// the forktest binary also does this, but it runs out of proc entries first.
-// inside the bigger usertests binary, we run out of memory first.
-void
-forktest(void)
-{
-    34b6:	55                   	push   %ebp
-    34b7:	89 e5                	mov    %esp,%ebp
-    34b9:	83 ec 28             	sub    $0x28,%esp
-  int n, pid;
-
-  printf(1, "fork test\n");
-    34bc:	c7 44 24 04 42 5d 00 	movl   $0x5d42,0x4(%esp)
-    34c3:	00 
-    34c4:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
-    34cb:	e8 2b 11 00 00       	call   45fb <printf>
-
-  for(n=0; n<1000; n++){
-    34d0:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
-    34d7:	eb 24                	jmp    34fd <forktest+0x47>
-    pid = fork();
-    34d9:	e8 76 0f 00 00       	call   4454 <fork>
-    34de:	89 45 f0             	mov    %eax,-0x10(%ebp)
-    if(pid < 0)
-    34e1:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
-    34e5:	78 21                	js     3508 <forktest+0x52>
-      break;
-    if(pid == 0)
-    34e7:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
-    34eb:	75 0c                	jne    34f9 <forktest+0x43>
-      exit(EXIT_STATUS_DEFAULT);
-    34ed:	c7 04 24 02 00 00 00 	movl   $0x2,(%esp)
-    34f4:	e8 63 0f 00 00       	call   445c <exit>
-{
-  int n, pid;
-
-  printf(1, "fork test\n");
-
-  for(n=0; n<1000; n++){
-    34f9:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
-    34fd:	81 7d f4 e7 03 00 00 	cmpl   $0x3e7,-0xc(%ebp)
-    3504:	7e d3                	jle    34d9 <forktest+0x23>
-    3506:	eb 01                	jmp    3509 <forktest+0x53>
-    pid = fork();
-    if(pid < 0)
-      break;
-    3508:	90                   	nop
-    if(pid == 0)
-      exit(EXIT_STATUS_DEFAULT);
-  }
-  
-  if(n == 1000){
-    3509:	81 7d f4 e8 03 00 00 	cmpl   $0x3e8,-0xc(%ebp)
-    3510:	75 54                	jne    3566 <forktest+0xb0>
-    printf(1, "fork claimed to work 1000 times!\n");
-    3512:	c7 44 24 04 50 5d 00 	movl   $0x5d50,0x4(%esp)
-    3519:	00 
-    351a:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
-    3521:	e8 d5 10 00 00       	call   45fb <printf>
-    exit(EXIT_STATUS_DEFAULT);
-    3526:	c7 04 24 02 00 00 00 	movl   $0x2,(%esp)
-    352d:	e8 2a 0f 00 00       	call   445c <exit>
-  }
-  
-  for(; n > 0; n--){
-    if(wait(0) < 0){
-    3532:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
-    3539:	e8 26 0f 00 00       	call   4464 <wait>
-    353e:	85 c0                	test   %eax,%eax
-    3540:	79 20                	jns    3562 <forktest+0xac>
-      printf(1, "wait stopped early\n");
-    3542:	c7 44 24 04 72 5d 00 	movl   $0x5d72,0x4(%esp)
-    3549:	00 
-    354a:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
-    3551:	e8 a5 10 00 00       	call   45fb <printf>
-      exit(EXIT_STATUS_DEFAULT);
-    3556:	c7 04 24 02 00 00 00 	movl   $0x2,(%esp)
-    355d:	e8 fa 0e 00 00       	call   445c <exit>
-  if(n == 1000){
-    printf(1, "fork claimed to work 1000 times!\n");
-    exit(EXIT_STATUS_DEFAULT);
-  }
-  
-  for(; n > 0; n--){
-    3562:	83 6d f4 01          	subl   $0x1,-0xc(%ebp)
-    3566:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
-    356a:	7f c6                	jg     3532 <forktest+0x7c>
-      printf(1, "wait stopped early\n");
-      exit(EXIT_STATUS_DEFAULT);
-    }
-  }
-  
-  if(wait(0) != -1){
-    356c:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
-    3573:	e8 ec 0e 00 00       	call   4464 <wait>
-    3578:	83 f8 ff             	cmp    $0xffffffff,%eax
-    357b:	74 20                	je     359d <forktest+0xe7>
-    printf(1, "wait got too many\n");
-    357d:	c7 44 24 04 86 5d 00 	movl   $0x5d86,0x4(%esp)
-    3584:	00 
-    3585:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
-    358c:	e8 6a 10 00 00       	call   45fb <printf>
-    exit(EXIT_STATUS_DEFAULT);
-    3591:	c7 04 24 02 00 00 00 	movl   $0x2,(%esp)
-    3598:	e8 bf 0e 00 00       	call   445c <exit>
-  }
-  
-  printf(1, "fork test OK\n");
-    359d:	c7 44 24 04 99 5d 00 	movl   $0x5d99,0x4(%esp)
-    35a4:	00 
-    35a5:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
-    35ac:	e8 4a 10 00 00       	call   45fb <printf>
-}
-    35b1:	c9                   	leave  
-    35b2:	c3                   	ret    
-
-000035b3 <sbrktest>:
-
-void
-sbrktest(void)
-{
-    35b3:	55                   	push   %ebp
-    35b4:	89 e5                	mov    %esp,%ebp
-    35b6:	53                   	push   %ebx
-    35b7:	81 ec 84 00 00 00    	sub    $0x84,%esp
-  int fds[2], pid, pids[10], ppid;
-  char *a, *b, *c, *lastaddr, *oldbrk, *p, scratch;
-  uint amt;
-
-  printf(stdout, "sbrk test\n");
-    35bd:	a1 80 68 00 00       	mov    0x6880,%eax
-    35c2:	c7 44 24 04 a7 5d 00 	movl   $0x5da7,0x4(%esp)
-    35c9:	00 
-    35ca:	89 04 24             	mov    %eax,(%esp)
-    35cd:	e8 29 10 00 00       	call   45fb <printf>
-  oldbrk = sbrk(0);
-    35d2:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
-    35d9:	e8 06 0f 00 00       	call   44e4 <sbrk>
-    35de:	89 45 ec             	mov    %eax,-0x14(%ebp)
-
-  // can one sbrk() less than a page?
-  a = sbrk(0);
-    35e1:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
-    35e8:	e8 f7 0e 00 00       	call   44e4 <sbrk>
-    35ed:	89 45 f4             	mov    %eax,-0xc(%ebp)
-  int i;
-  for(i = 0; i < 5000; i++){ 
-    35f0:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
-    35f7:	eb 60                	jmp    3659 <sbrktest+0xa6>
-    b = sbrk(1);
-    35f9:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
-    3600:	e8 df 0e 00 00       	call   44e4 <sbrk>
-    3605:	89 45 e8             	mov    %eax,-0x18(%ebp)
-    if(b != a){
-    3608:	8b 45 e8             	mov    -0x18(%ebp),%eax
-    360b:	3b 45 f4             	cmp    -0xc(%ebp),%eax
-    360e:	74 36                	je     3646 <sbrktest+0x93>
-      printf(stdout, "sbrk test failed %d %x %x\n", i, a, b);
-    3610:	a1 80 68 00 00       	mov    0x6880,%eax
-    3615:	8b 55 e8             	mov    -0x18(%ebp),%edx
-    3618:	89 54 24 10          	mov    %edx,0x10(%esp)
-    361c:	8b 55 f4             	mov    -0xc(%ebp),%edx
-    361f:	89 54 24 0c          	mov    %edx,0xc(%esp)
-    3623:	8b 55 f0             	mov    -0x10(%ebp),%edx
-    3626:	89 54 24 08          	mov    %edx,0x8(%esp)
-    362a:	c7 44 24 04 b2 5d 00 	movl   $0x5db2,0x4(%esp)
-    3631:	00 
-    3632:	89 04 24             	mov    %eax,(%esp)
-    3635:	e8 c1 0f 00 00       	call   45fb <printf>
-      exit(EXIT_STATUS_DEFAULT);
-    363a:	c7 04 24 02 00 00 00 	movl   $0x2,(%esp)
-    3641:	e8 16 0e 00 00       	call   445c <exit>
-    }
-    *b = 1;
-    3646:	8b 45 e8             	mov    -0x18(%ebp),%eax
-    3649:	c6 00 01             	movb   $0x1,(%eax)
-    a = b + 1;
-    364c:	8b 45 e8             	mov    -0x18(%ebp),%eax
-    364f:	83 c0 01             	add    $0x1,%eax
-    3652:	89 45 f4             	mov    %eax,-0xc(%ebp)
-  oldbrk = sbrk(0);
-
-  // can one sbrk() less than a page?
-  a = sbrk(0);
-  int i;
-  for(i = 0; i < 5000; i++){ 
-    3655:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)
-    3659:	81 7d f0 87 13 00 00 	cmpl   $0x1387,-0x10(%ebp)
-    3660:	7e 97                	jle    35f9 <sbrktest+0x46>
-      exit(EXIT_STATUS_DEFAULT);
-    }
-    *b = 1;
-    a = b + 1;
-  }
-  pid = fork();
-    3662:	e8 ed 0d 00 00       	call   4454 <fork>
-    3667:	89 45 e4             	mov    %eax,-0x1c(%ebp)
-  if(pid < 0){
-    366a:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
-    366e:	79 21                	jns    3691 <sbrktest+0xde>
-    printf(stdout, "sbrk test fork failed\n");
-    3670:	a1 80 68 00 00       	mov    0x6880,%eax
-    3675:	c7 44 24 04 cd 5d 00 	movl   $0x5dcd,0x4(%esp)
-    367c:	00 
-    367d:	89 04 24             	mov    %eax,(%esp)
-    3680:	e8 76 0f 00 00       	call   45fb <printf>
-    exit(EXIT_STATUS_DEFAULT);
-    3685:	c7 04 24 02 00 00 00 	movl   $0x2,(%esp)
-    368c:	e8 cb 0d 00 00       	call   445c <exit>
-  }
-  c = sbrk(1);
-    3691:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
-    3698:	e8 47 0e 00 00       	call   44e4 <sbrk>
-    369d:	89 45 e0             	mov    %eax,-0x20(%ebp)
-  c = sbrk(1);
-    36a0:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
-    36a7:	e8 38 0e 00 00       	call   44e4 <sbrk>
-    36ac:	89 45 e0             	mov    %eax,-0x20(%ebp)
-  if(c != a + 1){
-    36af:	8b 45 f4             	mov    -0xc(%ebp),%eax
-    36b2:	83 c0 01             	add    $0x1,%eax
-    36b5:	3b 45 e0             	cmp    -0x20(%ebp),%eax
-    36b8:	74 21                	je     36db <sbrktest+0x128>
-    printf(stdout, "sbrk test failed post-fork\n");
-    36ba:	a1 80 68 00 00       	mov    0x6880,%eax
-    36bf:	c7 44 24 04 e4 5d 00 	movl   $0x5de4,0x4(%esp)
-    36c6:	00 
-    36c7:	89 04 24             	mov    %eax,(%esp)
-    36ca:	e8 2c 0f 00 00       	call   45fb <printf>
-    exit(EXIT_STATUS_DEFAULT);
-    36cf:	c7 04 24 02 00 00 00 	movl   $0x2,(%esp)
-    36d6:	e8 81 0d 00 00       	call   445c <exit>
-  }
-  if(pid == 0)
-    36db:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
-    36df:	75 0c                	jne    36ed <sbrktest+0x13a>
-    exit(EXIT_STATUS_DEFAULT);
-    36e1:	c7 04 24 02 00 00 00 	movl   $0x2,(%esp)
-    36e8:	e8 6f 0d 00 00       	call   445c <exit>
-  wait(0);
-    36ed:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
-    36f4:	e8 6b 0d 00 00       	call   4464 <wait>
-
-  // can one grow address space to something big?
-#define BIG (100*1024*1024)
-  a = sbrk(0);
-    36f9:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
-    3700:	e8 df 0d 00 00       	call   44e4 <sbrk>
-    3705:	89 45 f4             	mov    %eax,-0xc(%ebp)
-  amt = (BIG) - (uint)a;
-    3708:	8b 45 f4             	mov    -0xc(%ebp),%eax
-    370b:	ba 00 00 40 06       	mov    $0x6400000,%edx
-    3710:	89 d1                	mov    %edx,%ecx
-    3712:	29 c1                	sub    %eax,%ecx
-    3714:	89 c8                	mov    %ecx,%eax
-    3716:	89 45 dc             	mov    %eax,-0x24(%ebp)
-  p = sbrk(amt);
-    3719:	8b 45 dc             	mov    -0x24(%ebp),%eax
-    371c:	89 04 24             	mov    %eax,(%esp)
-    371f:	e8 c0 0d 00 00       	call   44e4 <sbrk>
-    3724:	89 45 d8             	mov    %eax,-0x28(%ebp)
-  if (p != a) { 
-    3727:	8b 45 d8             	mov    -0x28(%ebp),%eax
-    372a:	3b 45 f4             	cmp    -0xc(%ebp),%eax
-    372d:	74 21                	je     3750 <sbrktest+0x19d>
-    printf(stdout, "sbrk test failed to grow big address space; enough phys mem?\n");
-    372f:	a1 80 68 00 00       	mov    0x6880,%eax
-    3734:	c7 44 24 04 00 5e 00 	movl   $0x5e00,0x4(%esp)
-    373b:	00 
-    373c:	89 04 24             	mov    %eax,(%esp)
-    373f:	e8 b7 0e 00 00       	call   45fb <printf>
-    exit(EXIT_STATUS_DEFAULT);
-    3744:	c7 04 24 02 00 00 00 	movl   $0x2,(%esp)
-    374b:	e8 0c 0d 00 00       	call   445c <exit>
-  }
-  lastaddr = (char*) (BIG-1);
-    3750:	c7 45 d4 ff ff 3f 06 	movl   $0x63fffff,-0x2c(%ebp)
-  *lastaddr = 99;
-    3757:	8b 45 d4             	mov    -0x2c(%ebp),%eax
-    375a:	c6 00 63             	movb   $0x63,(%eax)
-
-  // can one de-allocate?
-  a = sbrk(0);
-    375d:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
-    3764:	e8 7b 0d 00 00       	call   44e4 <sbrk>
-    3769:	89 45 f4             	mov    %eax,-0xc(%ebp)
-  c = sbrk(-4096);
-    376c:	c7 04 24 00 f0 ff ff 	movl   $0xfffff000,(%esp)
-    3773:	e8 6c 0d 00 00       	call   44e4 <sbrk>
-    3778:	89 45 e0             	mov    %eax,-0x20(%ebp)
-  if(c == (char*)0xffffffff){
-    377b:	83 7d e0 ff          	cmpl   $0xffffffff,-0x20(%ebp)
-    377f:	75 21                	jne    37a2 <sbrktest+0x1ef>
-    printf(stdout, "sbrk could not deallocate\n");
-    3781:	a1 80 68 00 00       	mov    0x6880,%eax
-    3786:	c7 44 24 04 3e 5e 00 	movl   $0x5e3e,0x4(%esp)
-    378d:	00 
-    378e:	89 04 24             	mov    %eax,(%esp)
-    3791:	e8 65 0e 00 00       	call   45fb <printf>
-    exit(EXIT_STATUS_DEFAULT);
-    3796:	c7 04 24 02 00 00 00 	movl   $0x2,(%esp)
-    379d:	e8 ba 0c 00 00       	call   445c <exit>
-  }
-  c = sbrk(0);
-    37a2:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
-    37a9:	e8 36 0d 00 00       	call   44e4 <sbrk>
-    37ae:	89 45 e0             	mov    %eax,-0x20(%ebp)
-  if(c != a - 4096){
-    37b1:	8b 45 f4             	mov    -0xc(%ebp),%eax
-    37b4:	2d 00 10 00 00       	sub    $0x1000,%eax
-    37b9:	3b 45 e0             	cmp    -0x20(%ebp),%eax
-    37bc:	74 2f                	je     37ed <sbrktest+0x23a>
-    printf(stdout, "sbrk deallocation produced wrong address, a %x c %x\n", a, c);
-    37be:	a1 80 68 00 00       	mov    0x6880,%eax
-    37c3:	8b 55 e0             	mov    -0x20(%ebp),%edx
-    37c6:	89 54 24 0c          	mov    %edx,0xc(%esp)
-    37ca:	8b 55 f4             	mov    -0xc(%ebp),%edx
-    37cd:	89 54 24 08          	mov    %edx,0x8(%esp)
-    37d1:	c7 44 24 04 5c 5e 00 	movl   $0x5e5c,0x4(%esp)
-    37d8:	00 
-    37d9:	89 04 24             	mov    %eax,(%esp)
-    37dc:	e8 1a 0e 00 00       	call   45fb <printf>
-    exit(EXIT_STATUS_DEFAULT);
-    37e1:	c7 04 24 02 00 00 00 	movl   $0x2,(%esp)
-    37e8:	e8 6f 0c 00 00       	call   445c <exit>
-  }
-
-  // can one re-allocate that page?
-  a = sbrk(0);
-    37ed:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
-    37f4:	e8 eb 0c 00 00       	call   44e4 <sbrk>
-    37f9:	89 45 f4             	mov    %eax,-0xc(%ebp)
-  c = sbrk(4096);
-    37fc:	c7 04 24 00 10 00 00 	movl   $0x1000,(%esp)
-    3803:	e8 dc 0c 00 00       	call   44e4 <sbrk>
-    3808:	89 45 e0             	mov    %eax,-0x20(%ebp)
-  if(c != a || sbrk(0) != a + 4096){
-    380b:	8b 45 e0             	mov    -0x20(%ebp),%eax
-    380e:	3b 45 f4             	cmp    -0xc(%ebp),%eax
-    3811:	75 19                	jne    382c <sbrktest+0x279>
-    3813:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
-    381a:	e8 c5 0c 00 00       	call   44e4 <sbrk>
-    381f:	8b 55 f4             	mov    -0xc(%ebp),%edx
-    3822:	81 c2 00 10 00 00    	add    $0x1000,%edx
-    3828:	39 d0                	cmp    %edx,%eax
-    382a:	74 2f                	je     385b <sbrktest+0x2a8>
-    printf(stdout, "sbrk re-allocation failed, a %x c %x\n", a, c);
-    382c:	a1 80 68 00 00       	mov    0x6880,%eax
-    3831:	8b 55 e0             	mov    -0x20(%ebp),%edx
-    3834:	89 54 24 0c          	mov    %edx,0xc(%esp)
-    3838:	8b 55 f4             	mov    -0xc(%ebp),%edx
-    383b:	89 54 24 08          	mov    %edx,0x8(%esp)
-    383f:	c7 44 24 04 94 5e 00 	movl   $0x5e94,0x4(%esp)
-    3846:	00 
-    3847:	89 04 24             	mov    %eax,(%esp)
-    384a:	e8 ac 0d 00 00       	call   45fb <printf>
-    exit(EXIT_STATUS_DEFAULT);
-    384f:	c7 04 24 02 00 00 00 	movl   $0x2,(%esp)
-    3856:	e8 01 0c 00 00       	call   445c <exit>
-  }
-  if(*lastaddr == 99){
-    385b:	8b 45 d4             	mov    -0x2c(%ebp),%eax
-    385e:	0f b6 00             	movzbl (%eax),%eax
-    3861:	3c 63                	cmp    $0x63,%al
-    3863:	75 21                	jne    3886 <sbrktest+0x2d3>
-    // should be zero
-    printf(stdout, "sbrk de-allocation didn't really deallocate\n");
-    3865:	a1 80 68 00 00       	mov    0x6880,%eax
-    386a:	c7 44 24 04 bc 5e 00 	movl   $0x5ebc,0x4(%esp)
-    3871:	00 
-    3872:	89 04 24             	mov    %eax,(%esp)
-    3875:	e8 81 0d 00 00       	call   45fb <printf>
-    exit(EXIT_STATUS_DEFAULT);
-    387a:	c7 04 24 02 00 00 00 	movl   $0x2,(%esp)
-    3881:	e8 d6 0b 00 00       	call   445c <exit>
-  }
-
-  a = sbrk(0);
-    3886:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
-    388d:	e8 52 0c 00 00       	call   44e4 <sbrk>
-    3892:	89 45 f4             	mov    %eax,-0xc(%ebp)
-  c = sbrk(-(sbrk(0) - oldbrk));
-    3895:	8b 5d ec             	mov    -0x14(%ebp),%ebx
-    3898:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
-    389f:	e8 40 0c 00 00       	call   44e4 <sbrk>
-    38a4:	89 da                	mov    %ebx,%edx
-    38a6:	29 c2                	sub    %eax,%edx
-    38a8:	89 d0                	mov    %edx,%eax
-    38aa:	89 04 24             	mov    %eax,(%esp)
-    38ad:	e8 32 0c 00 00       	call   44e4 <sbrk>
-    38b2:	89 45 e0             	mov    %eax,-0x20(%ebp)
-  if(c != a){
-    38b5:	8b 45 e0             	mov    -0x20(%ebp),%eax
-    38b8:	3b 45 f4             	cmp    -0xc(%ebp),%eax
-    38bb:	74 2f                	je     38ec <sbrktest+0x339>
-    printf(stdout, "sbrk downsize failed, a %x c %x\n", a, c);
-    38bd:	a1 80 68 00 00       	mov    0x6880,%eax
-    38c2:	8b 55 e0             	mov    -0x20(%ebp),%edx
-    38c5:	89 54 24 0c          	mov    %edx,0xc(%esp)
-    38c9:	8b 55 f4             	mov    -0xc(%ebp),%edx
-    38cc:	89 54 24 08          	mov    %edx,0x8(%esp)
-    38d0:	c7 44 24 04 ec 5e 00 	movl   $0x5eec,0x4(%esp)
-    38d7:	00 
-    38d8:	89 04 24             	mov    %eax,(%esp)
-    38db:	e8 1b 0d 00 00       	call   45fb <printf>
-    exit(EXIT_STATUS_DEFAULT);
-    38e0:	c7 04 24 02 00 00 00 	movl   $0x2,(%esp)
-    38e7:	e8 70 0b 00 00       	call   445c <exit>
-  }
-  
-  // can we read the kernel's memory?
-  for(a = (char*)(KERNBASE); a < (char*) (KERNBASE+2000000); a += 50000){
-    38ec:	c7 45 f4 00 00 00 80 	movl   $0x80000000,-0xc(%ebp)
-    38f3:	e9 90 00 00 00       	jmp    3988 <sbrktest+0x3d5>
-    ppid = getpid();
-    38f8:	e8 df 0b 00 00       	call   44dc <getpid>
-    38fd:	89 45 d0             	mov    %eax,-0x30(%ebp)
-    pid = fork();
-    3900:	e8 4f 0b 00 00       	call   4454 <fork>
-    3905:	89 45 e4             	mov    %eax,-0x1c(%ebp)
-    if(pid < 0){
-    3908:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
-    390c:	79 21                	jns    392f <sbrktest+0x37c>
-      printf(stdout, "fork failed\n");
-    390e:	a1 80 68 00 00       	mov    0x6880,%eax
-    3913:	c7 44 24 04 61 4a 00 	movl   $0x4a61,0x4(%esp)
-    391a:	00 
-    391b:	89 04 24             	mov    %eax,(%esp)
-    391e:	e8 d8 0c 00 00       	call   45fb <printf>
-      exit(EXIT_STATUS_DEFAULT);
-    3923:	c7 04 24 02 00 00 00 	movl   $0x2,(%esp)
-    392a:	e8 2d 0b 00 00       	call   445c <exit>
-    }
-    if(pid == 0){
-    392f:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
-    3933:	75 40                	jne    3975 <sbrktest+0x3c2>
-      printf(stdout, "oops could read %x = %x\n", a, *a);
-    3935:	8b 45 f4             	mov    -0xc(%ebp),%eax
-    3938:	0f b6 00             	movzbl (%eax),%eax
-    393b:	0f be d0             	movsbl %al,%edx
-    393e:	a1 80 68 00 00       	mov    0x6880,%eax
-    3943:	89 54 24 0c          	mov    %edx,0xc(%esp)
-    3947:	8b 55 f4             	mov    -0xc(%ebp),%edx
-    394a:	89 54 24 08          	mov    %edx,0x8(%esp)
-    394e:	c7 44 24 04 0d 5f 00 	movl   $0x5f0d,0x4(%esp)
-    3955:	00 
-    3956:	89 04 24             	mov    %eax,(%esp)
-    3959:	e8 9d 0c 00 00       	call   45fb <printf>
-      kill(ppid);
-    395e:	8b 45 d0             	mov    -0x30(%ebp),%eax
-    3961:	89 04 24             	mov    %eax,(%esp)
-    3964:	e8 23 0b 00 00       	call   448c <kill>
-      exit(EXIT_STATUS_DEFAULT);
-    3969:	c7 04 24 02 00 00 00 	movl   $0x2,(%esp)
-    3970:	e8 e7 0a 00 00       	call   445c <exit>
-    }
-    wait(0);
-    3975:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
-    397c:	e8 e3 0a 00 00       	call   4464 <wait>
-    printf(stdout, "sbrk downsize failed, a %x c %x\n", a, c);
-    exit(EXIT_STATUS_DEFAULT);
-  }
-  
-  // can we read the kernel's memory?
-  for(a = (char*)(KERNBASE); a < (char*) (KERNBASE+2000000); a += 50000){
-    3981:	81 45 f4 50 c3 00 00 	addl   $0xc350,-0xc(%ebp)
-    3988:	81 7d f4 7f 84 1e 80 	cmpl   $0x801e847f,-0xc(%ebp)
-    398f:	0f 86 63 ff ff ff    	jbe    38f8 <sbrktest+0x345>
-    wait(0);
-  }
-
-  // if we run the system out of memory, does it clean up the last
-  // failed allocation?
-  if(pipe(fds) != 0){
-    3995:	8d 45 c8             	lea    -0x38(%ebp),%eax
-    3998:	89 04 24             	mov    %eax,(%esp)
-    399b:	e8 cc 0a 00 00       	call   446c <pipe>
-    39a0:	85 c0                	test   %eax,%eax
-    39a2:	74 20                	je     39c4 <sbrktest+0x411>
-    printf(1, "pipe() failed\n");
-    39a4:	c7 44 24 04 32 4e 00 	movl   $0x4e32,0x4(%esp)
-    39ab:	00 
-    39ac:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
-    39b3:	e8 43 0c 00 00       	call   45fb <printf>
-    exit(EXIT_STATUS_DEFAULT);
-    39b8:	c7 04 24 02 00 00 00 	movl   $0x2,(%esp)
-    39bf:	e8 98 0a 00 00       	call   445c <exit>
-  }
-  for(i = 0; i < sizeof(pids)/sizeof(pids[0]); i++){
-    39c4:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
-    39cb:	e9 89 00 00 00       	jmp    3a59 <sbrktest+0x4a6>
-    if((pids[i] = fork()) == 0){
-    39d0:	e8 7f 0a 00 00       	call   4454 <fork>
-    39d5:	8b 55 f0             	mov    -0x10(%ebp),%edx
-    39d8:	89 44 95 a0          	mov    %eax,-0x60(%ebp,%edx,4)
-    39dc:	8b 45 f0             	mov    -0x10(%ebp),%eax
-    39df:	8b 44 85 a0          	mov    -0x60(%ebp,%eax,4),%eax
-    39e3:	85 c0                	test   %eax,%eax
-    39e5:	75 48                	jne    3a2f <sbrktest+0x47c>
-      // allocate a lot of memory
-      sbrk(BIG - (uint)sbrk(0));
-    39e7:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
-    39ee:	e8 f1 0a 00 00       	call   44e4 <sbrk>
-    39f3:	ba 00 00 40 06       	mov    $0x6400000,%edx
-    39f8:	89 d1                	mov    %edx,%ecx
-    39fa:	29 c1                	sub    %eax,%ecx
-    39fc:	89 c8                	mov    %ecx,%eax
-    39fe:	89 04 24             	mov    %eax,(%esp)
-    3a01:	e8 de 0a 00 00       	call   44e4 <sbrk>
-      write(fds[1], "x", 1);
-    3a06:	8b 45 cc             	mov    -0x34(%ebp),%eax
-    3a09:	c7 44 24 08 01 00 00 	movl   $0x1,0x8(%esp)
-    3a10:	00 
-    3a11:	c7 44 24 04 97 4e 00 	movl   $0x4e97,0x4(%esp)
-    3a18:	00 
-    3a19:	89 04 24             	mov    %eax,(%esp)
-    3a1c:	e8 5b 0a 00 00       	call   447c <write>
-      // sit around until killed
-      for(;;) sleep(1000);
-    3a21:	c7 04 24 e8 03 00 00 	movl   $0x3e8,(%esp)
-    3a28:	e8 bf 0a 00 00       	call   44ec <sleep>
-    3a2d:	eb f2                	jmp    3a21 <sbrktest+0x46e>
-    }
-    if(pids[i] != -1)
-    3a2f:	8b 45 f0             	mov    -0x10(%ebp),%eax
-    3a32:	8b 44 85 a0          	mov    -0x60(%ebp,%eax,4),%eax
-    3a36:	83 f8 ff             	cmp    $0xffffffff,%eax
-    3a39:	74 1a                	je     3a55 <sbrktest+0x4a2>
-      read(fds[0], &scratch, 1);
-    3a3b:	8b 45 c8             	mov    -0x38(%ebp),%eax
-    3a3e:	c7 44 24 08 01 00 00 	movl   $0x1,0x8(%esp)
-    3a45:	00 
-    3a46:	8d 55 9f             	lea    -0x61(%ebp),%edx
-    3a49:	89 54 24 04          	mov    %edx,0x4(%esp)
-    3a4d:	89 04 24             	mov    %eax,(%esp)
-    3a50:	e8 1f 0a 00 00       	call   4474 <read>
-  // failed allocation?
-  if(pipe(fds) != 0){
-    printf(1, "pipe() failed\n");
-    exit(EXIT_STATUS_DEFAULT);
-  }
-  for(i = 0; i < sizeof(pids)/sizeof(pids[0]); i++){
-    3a55:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)
-    3a59:	8b 45 f0             	mov    -0x10(%ebp),%eax
-    3a5c:	83 f8 09             	cmp    $0x9,%eax
-    3a5f:	0f 86 6b ff ff ff    	jbe    39d0 <sbrktest+0x41d>
-    if(pids[i] != -1)
-      read(fds[0], &scratch, 1);
-  }
-  // if those failed allocations freed up the pages they did allocate,
-  // we'll be able to allocate here
-  c = sbrk(4096);
-    3a65:	c7 04 24 00 10 00 00 	movl   $0x1000,(%esp)
-    3a6c:	e8 73 0a 00 00       	call   44e4 <sbrk>
-    3a71:	89 45 e0             	mov    %eax,-0x20(%ebp)
-  for(i = 0; i < sizeof(pids)/sizeof(pids[0]); i++){
-    3a74:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
-    3a7b:	eb 2e                	jmp    3aab <sbrktest+0x4f8>
-    if(pids[i] == -1)
-    3a7d:	8b 45 f0             	mov    -0x10(%ebp),%eax
-    3a80:	8b 44 85 a0          	mov    -0x60(%ebp,%eax,4),%eax
-    3a84:	83 f8 ff             	cmp    $0xffffffff,%eax
-    3a87:	74 1d                	je     3aa6 <sbrktest+0x4f3>
-      continue;
-    kill(pids[i]);
-    3a89:	8b 45 f0             	mov    -0x10(%ebp),%eax
-    3a8c:	8b 44 85 a0          	mov    -0x60(%ebp,%eax,4),%eax
-    3a90:	89 04 24             	mov    %eax,(%esp)
-    3a93:	e8 f4 09 00 00       	call   448c <kill>
-    wait(0);
-    3a98:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
-    3a9f:	e8 c0 09 00 00       	call   4464 <wait>
-    3aa4:	eb 01                	jmp    3aa7 <sbrktest+0x4f4>
-  // if those failed allocations freed up the pages they did allocate,
-  // we'll be able to allocate here
-  c = sbrk(4096);
-  for(i = 0; i < sizeof(pids)/sizeof(pids[0]); i++){
-    if(pids[i] == -1)
-      continue;
-    3aa6:	90                   	nop
-      read(fds[0], &scratch, 1);
-  }
-  // if those failed allocations freed up the pages they did allocate,
-  // we'll be able to allocate here
-  c = sbrk(4096);
-  for(i = 0; i < sizeof(pids)/sizeof(pids[0]); i++){
-    3aa7:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)
-    3aab:	8b 45 f0             	mov    -0x10(%ebp),%eax
-    3aae:	83 f8 09             	cmp    $0x9,%eax
-    3ab1:	76 ca                	jbe    3a7d <sbrktest+0x4ca>
-    if(pids[i] == -1)
-      continue;
-    kill(pids[i]);
-    wait(0);
-  }
-  if(c == (char*)0xffffffff){
-    3ab3:	83 7d e0 ff          	cmpl   $0xffffffff,-0x20(%ebp)
-    3ab7:	75 21                	jne    3ada <sbrktest+0x527>
-    printf(stdout, "failed sbrk leaked memory\n");
-    3ab9:	a1 80 68 00 00       	mov    0x6880,%eax
-    3abe:	c7 44 24 04 26 5f 00 	movl   $0x5f26,0x4(%esp)
-    3ac5:	00 
-    3ac6:	89 04 24             	mov    %eax,(%esp)
-    3ac9:	e8 2d 0b 00 00       	call   45fb <printf>
-    exit(EXIT_STATUS_DEFAULT);
-    3ace:	c7 04 24 02 00 00 00 	movl   $0x2,(%esp)
-    3ad5:	e8 82 09 00 00       	call   445c <exit>
-  }
-
-  if(sbrk(0) > oldbrk)
-    3ada:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
-    3ae1:	e8 fe 09 00 00       	call   44e4 <sbrk>
-    3ae6:	3b 45 ec             	cmp    -0x14(%ebp),%eax
-    3ae9:	76 1d                	jbe    3b08 <sbrktest+0x555>
-    sbrk(-(sbrk(0) - oldbrk));
-    3aeb:	8b 5d ec             	mov    -0x14(%ebp),%ebx
-    3aee:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
-    3af5:	e8 ea 09 00 00       	call   44e4 <sbrk>
-    3afa:	89 da                	mov    %ebx,%edx
-    3afc:	29 c2                	sub    %eax,%edx
-    3afe:	89 d0                	mov    %edx,%eax
-    3b00:	89 04 24             	mov    %eax,(%esp)
-    3b03:	e8 dc 09 00 00       	call   44e4 <sbrk>
-
-  printf(stdout, "sbrk test OK\n");
-    3b08:	a1 80 68 00 00       	mov    0x6880,%eax
-    3b0d:	c7 44 24 04 41 5f 00 	movl   $0x5f41,0x4(%esp)
-    3b14:	00 
-    3b15:	89 04 24             	mov    %eax,(%esp)
-    3b18:	e8 de 0a 00 00       	call   45fb <printf>
-}
-    3b1d:	81 c4 84 00 00 00    	add    $0x84,%esp
-    3b23:	5b                   	pop    %ebx
-    3b24:	5d                   	pop    %ebp
-    3b25:	c3                   	ret    
-
-00003b26 <validateint>:
-
-void
-validateint(int *p)
-{
-    3b26:	55                   	push   %ebp
-    3b27:	89 e5                	mov    %esp,%ebp
-    3b29:	56                   	push   %esi
-    3b2a:	53                   	push   %ebx
-    3b2b:	83 ec 14             	sub    $0x14,%esp
-  int res;
-  asm("mov %%esp, %%ebx\n\t"
-    3b2e:	c7 45 e4 0d 00 00 00 	movl   $0xd,-0x1c(%ebp)
-    3b35:	8b 55 08             	mov    0x8(%ebp),%edx
-    3b38:	8b 45 e4             	mov    -0x1c(%ebp),%eax
-    3b3b:	89 d1                	mov    %edx,%ecx
-    3b3d:	89 e3                	mov    %esp,%ebx
-    3b3f:	89 cc                	mov    %ecx,%esp
-    3b41:	cd 40                	int    $0x40
-    3b43:	89 dc                	mov    %ebx,%esp
-    3b45:	89 c6                	mov    %eax,%esi
-    3b47:	89 75 f4             	mov    %esi,-0xc(%ebp)
-      "int %2\n\t"
-      "mov %%ebx, %%esp" :
-      "=a" (res) :
-      "a" (SYS_sleep), "n" (T_SYSCALL), "c" (p) :
-      "ebx");
-}
-    3b4a:	83 c4 14             	add    $0x14,%esp
-    3b4d:	5b                   	pop    %ebx
-    3b4e:	5e                   	pop    %esi
-    3b4f:	5d                   	pop    %ebp
-    3b50:	c3                   	ret    
-
-00003b51 <validatetest>:
-
-void
-validatetest(void)
-{
-    3b51:	55                   	push   %ebp
-    3b52:	89 e5                	mov    %esp,%ebp
-    3b54:	83 ec 28             	sub    $0x28,%esp
-  int hi, pid;
-  uint p;
-
-  printf(stdout, "validate test\n");
-    3b57:	a1 80 68 00 00       	mov    0x6880,%eax
-    3b5c:	c7 44 24 04 4f 5f 00 	movl   $0x5f4f,0x4(%esp)
-    3b63:	00 
-    3b64:	89 04 24             	mov    %eax,(%esp)
-    3b67:	e8 8f 0a 00 00       	call   45fb <printf>
-  hi = 1100*1024;
-    3b6c:	c7 45 f0 00 30 11 00 	movl   $0x113000,-0x10(%ebp)
-
-  for(p = 0; p <= (uint)hi; p += 4096){
-    3b73:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
-    3b7a:	e9 94 00 00 00       	jmp    3c13 <validatetest+0xc2>
-    if((pid = fork()) == 0){
-    3b7f:	e8 d0 08 00 00       	call   4454 <fork>
-    3b84:	89 45 ec             	mov    %eax,-0x14(%ebp)
-    3b87:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
-    3b8b:	75 17                	jne    3ba4 <validatetest+0x53>
-      // try to crash the kernel by passing in a badly placed integer
-      validateint((int*)p);
-    3b8d:	8b 45 f4             	mov    -0xc(%ebp),%eax
-    3b90:	89 04 24             	mov    %eax,(%esp)
-    3b93:	e8 8e ff ff ff       	call   3b26 <validateint>
-      exit(EXIT_STATUS_DEFAULT);
-    3b98:	c7 04 24 02 00 00 00 	movl   $0x2,(%esp)
-    3b9f:	e8 b8 08 00 00       	call   445c <exit>
-    }
-    sleep(0);
-    3ba4:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
-    3bab:	e8 3c 09 00 00       	call   44ec <sleep>
-    sleep(0);
-    3bb0:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
-    3bb7:	e8 30 09 00 00       	call   44ec <sleep>
-    kill(pid);
-    3bbc:	8b 45 ec             	mov    -0x14(%ebp),%eax
-    3bbf:	89 04 24             	mov    %eax,(%esp)
-    3bc2:	e8 c5 08 00 00       	call   448c <kill>
-    wait(0);
-    3bc7:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
-    3bce:	e8 91 08 00 00       	call   4464 <wait>
-
-    // try to crash the kernel by passing in a bad string pointer
-    if(link("nosuchfile", (char*)p) != -1){
-    3bd3:	8b 45 f4             	mov    -0xc(%ebp),%eax
-    3bd6:	89 44 24 04          	mov    %eax,0x4(%esp)
-    3bda:	c7 04 24 5e 5f 00 00 	movl   $0x5f5e,(%esp)
-    3be1:	e8 d6 08 00 00       	call   44bc <link>
-    3be6:	83 f8 ff             	cmp    $0xffffffff,%eax
-    3be9:	74 21                	je     3c0c <validatetest+0xbb>
-      printf(stdout, "link should not succeed\n");
-    3beb:	a1 80 68 00 00       	mov    0x6880,%eax
-    3bf0:	c7 44 24 04 69 5f 00 	movl   $0x5f69,0x4(%esp)
-    3bf7:	00 
-    3bf8:	89 04 24             	mov    %eax,(%esp)
-    3bfb:	e8 fb 09 00 00       	call   45fb <printf>
-      exit(EXIT_STATUS_DEFAULT);
-    3c00:	c7 04 24 02 00 00 00 	movl   $0x2,(%esp)
-    3c07:	e8 50 08 00 00       	call   445c <exit>
-  uint p;
-
-  printf(stdout, "validate test\n");
-  hi = 1100*1024;
-
-  for(p = 0; p <= (uint)hi; p += 4096){
-    3c0c:	81 45 f4 00 10 00 00 	addl   $0x1000,-0xc(%ebp)
-    3c13:	8b 45 f0             	mov    -0x10(%ebp),%eax
-    3c16:	3b 45 f4             	cmp    -0xc(%ebp),%eax
-    3c19:	0f 83 60 ff ff ff    	jae    3b7f <validatetest+0x2e>
-      printf(stdout, "link should not succeed\n");
-      exit(EXIT_STATUS_DEFAULT);
-    }
-  }
-
-  printf(stdout, "validate ok\n");
-    3c1f:	a1 80 68 00 00       	mov    0x6880,%eax
-    3c24:	c7 44 24 04 82 5f 00 	movl   $0x5f82,0x4(%esp)
-    3c2b:	00 
-    3c2c:	89 04 24             	mov    %eax,(%esp)
-    3c2f:	e8 c7 09 00 00       	call   45fb <printf>
-}
-    3c34:	c9                   	leave  
-    3c35:	c3                   	ret    
-
-00003c36 <bsstest>:
-
-// does unintialized data start out zero?
-char uninit[10000];
-void
-bsstest(void)
-{
-    3c36:	55                   	push   %ebp
-    3c37:	89 e5                	mov    %esp,%ebp
-    3c39:	83 ec 28             	sub    $0x28,%esp
-  int i;
-
-  printf(stdout, "bss test\n");
-    3c3c:	a1 80 68 00 00       	mov    0x6880,%eax
-    3c41:	c7 44 24 04 8f 5f 00 	movl   $0x5f8f,0x4(%esp)
-    3c48:	00 
-    3c49:	89 04 24             	mov    %eax,(%esp)
-    3c4c:	e8 aa 09 00 00       	call   45fb <printf>
-  for(i = 0; i < sizeof(uninit); i++){
-    3c51:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
-    3c58:	eb 34                	jmp    3c8e <bsstest+0x58>
-    if(uninit[i] != '\0'){
-    3c5a:	8b 45 f4             	mov    -0xc(%ebp),%eax
-    3c5d:	05 40 69 00 00       	add    $0x6940,%eax
-    3c62:	0f b6 00             	movzbl (%eax),%eax
-    3c65:	84 c0                	test   %al,%al
-    3c67:	74 21                	je     3c8a <bsstest+0x54>
-      printf(stdout, "bss test failed\n");
-    3c69:	a1 80 68 00 00       	mov    0x6880,%eax
-    3c6e:	c7 44 24 04 99 5f 00 	movl   $0x5f99,0x4(%esp)
-    3c75:	00 
-    3c76:	89 04 24             	mov    %eax,(%esp)
-    3c79:	e8 7d 09 00 00       	call   45fb <printf>
-      exit(EXIT_STATUS_DEFAULT);
-    3c7e:	c7 04 24 02 00 00 00 	movl   $0x2,(%esp)
-    3c85:	e8 d2 07 00 00       	call   445c <exit>
-bsstest(void)
-{
-  int i;
-
-  printf(stdout, "bss test\n");
-  for(i = 0; i < sizeof(uninit); i++){
-    3c8a:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
-    3c8e:	8b 45 f4             	mov    -0xc(%ebp),%eax
-    3c91:	3d 0f 27 00 00       	cmp    $0x270f,%eax
-    3c96:	76 c2                	jbe    3c5a <bsstest+0x24>
-    if(uninit[i] != '\0'){
-      printf(stdout, "bss test failed\n");
-      exit(EXIT_STATUS_DEFAULT);
-    }
-  }
-  printf(stdout, "bss test ok\n");
-    3c98:	a1 80 68 00 00       	mov    0x6880,%eax
-    3c9d:	c7 44 24 04 aa 5f 00 	movl   $0x5faa,0x4(%esp)
-    3ca4:	00 
-    3ca5:	89 04 24             	mov    %eax,(%esp)
-    3ca8:	e8 4e 09 00 00       	call   45fb <printf>
-}
-    3cad:	c9                   	leave  
-    3cae:	c3                   	ret    
-
-00003caf <bigargtest>:
-// does exec return an error if the arguments
-// are larger than a page? or does it write
-// below the stack and wreck the instructions/data?
-void
-bigargtest(void)
-{
-    3caf:	55                   	push   %ebp
-    3cb0:	89 e5                	mov    %esp,%ebp
-    3cb2:	83 ec 28             	sub    $0x28,%esp
-  int pid, fd;
-
-  unlink("bigarg-ok");
-    3cb5:	c7 04 24 b7 5f 00 00 	movl   $0x5fb7,(%esp)
-    3cbc:	e8 eb 07 00 00       	call   44ac <unlink>
-  pid = fork();
-    3cc1:	e8 8e 07 00 00       	call   4454 <fork>
-    3cc6:	89 45 f0             	mov    %eax,-0x10(%ebp)
-  if(pid == 0){
-    3cc9:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
-    3ccd:	0f 85 97 00 00 00    	jne    3d6a <bigargtest+0xbb>
-    static char *args[MAXARG];
-    int i;
-    for(i = 0; i < MAXARG-1; i++)
-    3cd3:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
-    3cda:	eb 12                	jmp    3cee <bigargtest+0x3f>
-      args[i] = "bigargs test: failed\n                                                                                                                                                                                                       ";
-    3cdc:	8b 45 f4             	mov    -0xc(%ebp),%eax
-    3cdf:	c7 04 85 a0 68 00 00 	movl   $0x5fc4,0x68a0(,%eax,4)
-    3ce6:	c4 5f 00 00 
-  unlink("bigarg-ok");
-  pid = fork();
-  if(pid == 0){
-    static char *args[MAXARG];
-    int i;
-    for(i = 0; i < MAXARG-1; i++)
-    3cea:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
-    3cee:	83 7d f4 1e          	cmpl   $0x1e,-0xc(%ebp)
-    3cf2:	7e e8                	jle    3cdc <bigargtest+0x2d>
-      args[i] = "bigargs test: failed\n                                                                                                                                                                                                       ";
-    args[MAXARG-1] = 0;
-    3cf4:	c7 05 1c 69 00 00 00 	movl   $0x0,0x691c
-    3cfb:	00 00 00 
-    printf(stdout, "bigarg test\n");
-    3cfe:	a1 80 68 00 00       	mov    0x6880,%eax
-    3d03:	c7 44 24 04 a1 60 00 	movl   $0x60a1,0x4(%esp)
-    3d0a:	00 
-    3d0b:	89 04 24             	mov    %eax,(%esp)
-    3d0e:	e8 e8 08 00 00       	call   45fb <printf>
-    exec("echo", args);
-    3d13:	c7 44 24 04 a0 68 00 	movl   $0x68a0,0x4(%esp)
-    3d1a:	00 
-    3d1b:	c7 04 24 c0 49 00 00 	movl   $0x49c0,(%esp)
-    3d22:	e8 6d 07 00 00       	call   4494 <exec>
-    printf(stdout, "bigarg test ok\n");
-    3d27:	a1 80 68 00 00       	mov    0x6880,%eax
-    3d2c:	c7 44 24 04 ae 60 00 	movl   $0x60ae,0x4(%esp)
-    3d33:	00 
-    3d34:	89 04 24             	mov    %eax,(%esp)
-    3d37:	e8 bf 08 00 00       	call   45fb <printf>
-    fd = open("bigarg-ok", O_CREATE);
-    3d3c:	c7 44 24 04 00 02 00 	movl   $0x200,0x4(%esp)
-    3d43:	00 
-    3d44:	c7 04 24 b7 5f 00 00 	movl   $0x5fb7,(%esp)
-    3d4b:	e8 4c 07 00 00       	call   449c <open>
-    3d50:	89 45 ec             	mov    %eax,-0x14(%ebp)
-    close(fd);
-    3d53:	8b 45 ec             	mov    -0x14(%ebp),%eax
-    3d56:	89 04 24             	mov    %eax,(%esp)
-    3d59:	e8 26 07 00 00       	call   4484 <close>
-    exit(EXIT_STATUS_DEFAULT);
-    3d5e:	c7 04 24 02 00 00 00 	movl   $0x2,(%esp)
-    3d65:	e8 f2 06 00 00       	call   445c <exit>
-  } else if(pid < 0){
-    3d6a:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
-    3d6e:	79 21                	jns    3d91 <bigargtest+0xe2>
-    printf(stdout, "bigargtest: fork failed\n");
-    3d70:	a1 80 68 00 00       	mov    0x6880,%eax
-    3d75:	c7 44 24 04 be 60 00 	movl   $0x60be,0x4(%esp)
-    3d7c:	00 
-    3d7d:	89 04 24             	mov    %eax,(%esp)
-    3d80:	e8 76 08 00 00       	call   45fb <printf>
-    exit(EXIT_STATUS_DEFAULT);
-    3d85:	c7 04 24 02 00 00 00 	movl   $0x2,(%esp)
-    3d8c:	e8 cb 06 00 00       	call   445c <exit>
-  }
-  wait(0);
-    3d91:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
-    3d98:	e8 c7 06 00 00       	call   4464 <wait>
-  fd = open("bigarg-ok", 0);
-    3d9d:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
-    3da4:	00 
-    3da5:	c7 04 24 b7 5f 00 00 	movl   $0x5fb7,(%esp)
-    3dac:	e8 eb 06 00 00       	call   449c <open>
-    3db1:	89 45 ec             	mov    %eax,-0x14(%ebp)
-  if(fd < 0){
-    3db4:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
-    3db8:	79 21                	jns    3ddb <bigargtest+0x12c>
-    printf(stdout, "bigarg test failed!\n");
-    3dba:	a1 80 68 00 00       	mov    0x6880,%eax
-    3dbf:	c7 44 24 04 d7 60 00 	movl   $0x60d7,0x4(%esp)
-    3dc6:	00 
-    3dc7:	89 04 24             	mov    %eax,(%esp)
-    3dca:	e8 2c 08 00 00       	call   45fb <printf>
-    exit(EXIT_STATUS_DEFAULT);
-    3dcf:	c7 04 24 02 00 00 00 	movl   $0x2,(%esp)
-    3dd6:	e8 81 06 00 00       	call   445c <exit>
-  }
-  close(fd);
-    3ddb:	8b 45 ec             	mov    -0x14(%ebp),%eax
-    3dde:	89 04 24             	mov    %eax,(%esp)
-    3de1:	e8 9e 06 00 00       	call   4484 <close>
-  unlink("bigarg-ok");
-    3de6:	c7 04 24 b7 5f 00 00 	movl   $0x5fb7,(%esp)
-    3ded:	e8 ba 06 00 00       	call   44ac <unlink>
-}
-    3df2:	c9                   	leave  
-    3df3:	c3                   	ret    
-
-00003df4 <fsfull>:
-
-// what happens when the file system runs out of blocks?
-// answer: balloc panics, so this test is not useful.
-void
-fsfull()
-{
-    3df4:	55                   	push   %ebp
-    3df5:	89 e5                	mov    %esp,%ebp
-    3df7:	53                   	push   %ebx
-    3df8:	83 ec 74             	sub    $0x74,%esp
-  int nfiles;
-  int fsblocks = 0;
-    3dfb:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
-
-  printf(1, "fsfull test\n");
-    3e02:	c7 44 24 04 ec 60 00 	movl   $0x60ec,0x4(%esp)
-    3e09:	00 
-    3e0a:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
-    3e11:	e8 e5 07 00 00       	call   45fb <printf>
-
-  for(nfiles = 0; ; nfiles++){
-    3e16:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
-    char name[64];
-    name[0] = 'f';
-    3e1d:	c6 45 a4 66          	movb   $0x66,-0x5c(%ebp)
-    name[1] = '0' + nfiles / 1000;
-    3e21:	8b 4d f4             	mov    -0xc(%ebp),%ecx
-    3e24:	ba d3 4d 62 10       	mov    $0x10624dd3,%edx
-    3e29:	89 c8                	mov    %ecx,%eax
-    3e2b:	f7 ea                	imul   %edx
-    3e2d:	c1 fa 06             	sar    $0x6,%edx
-    3e30:	89 c8                	mov    %ecx,%eax
-    3e32:	c1 f8 1f             	sar    $0x1f,%eax
-    3e35:	89 d1                	mov    %edx,%ecx
-    3e37:	29 c1                	sub    %eax,%ecx
-    3e39:	89 c8                	mov    %ecx,%eax
-    3e3b:	83 c0 30             	add    $0x30,%eax
-    3e3e:	88 45 a5             	mov    %al,-0x5b(%ebp)
-    name[2] = '0' + (nfiles % 1000) / 100;
-    3e41:	8b 5d f4             	mov    -0xc(%ebp),%ebx
-    3e44:	ba d3 4d 62 10       	mov    $0x10624dd3,%edx
-    3e49:	89 d8                	mov    %ebx,%eax
-    3e4b:	f7 ea                	imul   %edx
-    3e4d:	c1 fa 06             	sar    $0x6,%edx
-    3e50:	89 d8                	mov    %ebx,%eax
-    3e52:	c1 f8 1f             	sar    $0x1f,%eax
-    3e55:	89 d1                	mov    %edx,%ecx
-    3e57:	29 c1                	sub    %eax,%ecx
-    3e59:	69 c1 e8 03 00 00    	imul   $0x3e8,%ecx,%eax
-    3e5f:	89 d9                	mov    %ebx,%ecx
-    3e61:	29 c1                	sub    %eax,%ecx
-    3e63:	ba 1f 85 eb 51       	mov    $0x51eb851f,%edx
-    3e68:	89 c8                	mov    %ecx,%eax
-    3e6a:	f7 ea                	imul   %edx
-    3e6c:	c1 fa 05             	sar    $0x5,%edx
-    3e6f:	89 c8                	mov    %ecx,%eax
-    3e71:	c1 f8 1f             	sar    $0x1f,%eax
-    3e74:	89 d1                	mov    %edx,%ecx
-    3e76:	29 c1                	sub    %eax,%ecx
-    3e78:	89 c8                	mov    %ecx,%eax
-    3e7a:	83 c0 30             	add    $0x30,%eax
-    3e7d:	88 45 a6             	mov    %al,-0x5a(%ebp)
-    name[3] = '0' + (nfiles % 100) / 10;
-    3e80:	8b 5d f4             	mov    -0xc(%ebp),%ebx
-    3e83:	ba 1f 85 eb 51       	mov    $0x51eb851f,%edx
-    3e88:	89 d8                	mov    %ebx,%eax
-    3e8a:	f7 ea                	imul   %edx
-    3e8c:	c1 fa 05             	sar    $0x5,%edx
-    3e8f:	89 d8                	mov    %ebx,%eax
-    3e91:	c1 f8 1f             	sar    $0x1f,%eax
-    3e94:	89 d1                	mov    %edx,%ecx
-    3e96:	29 c1                	sub    %eax,%ecx
-    3e98:	6b c1 64             	imul   $0x64,%ecx,%eax
-    3e9b:	89 d9                	mov    %ebx,%ecx
-    3e9d:	29 c1                	sub    %eax,%ecx
-    3e9f:	ba 67 66 66 66       	mov    $0x66666667,%edx
-    3ea4:	89 c8                	mov    %ecx,%eax
-    3ea6:	f7 ea                	imul   %edx
-    3ea8:	c1 fa 02             	sar    $0x2,%edx
-    3eab:	89 c8                	mov    %ecx,%eax
-    3ead:	c1 f8 1f             	sar    $0x1f,%eax
-    3eb0:	89 d1                	mov    %edx,%ecx
-    3eb2:	29 c1                	sub    %eax,%ecx
-    3eb4:	89 c8                	mov    %ecx,%eax
-    3eb6:	83 c0 30             	add    $0x30,%eax
-    3eb9:	88 45 a7             	mov    %al,-0x59(%ebp)
-    name[4] = '0' + (nfiles % 10);
-    3ebc:	8b 4d f4             	mov    -0xc(%ebp),%ecx
-    3ebf:	ba 67 66 66 66       	mov    $0x66666667,%edx
-    3ec4:	89 c8                	mov    %ecx,%eax
-    3ec6:	f7 ea                	imul   %edx
-    3ec8:	c1 fa 02             	sar    $0x2,%edx
-    3ecb:	89 c8                	mov    %ecx,%eax
-    3ecd:	c1 f8 1f             	sar    $0x1f,%eax
-    3ed0:	29 c2                	sub    %eax,%edx
-    3ed2:	89 d0                	mov    %edx,%eax
-    3ed4:	c1 e0 02             	shl    $0x2,%eax
-    3ed7:	01 d0                	add    %edx,%eax
-    3ed9:	01 c0                	add    %eax,%eax
-    3edb:	89 ca                	mov    %ecx,%edx
-    3edd:	29 c2                	sub    %eax,%edx
-    3edf:	89 d0                	mov    %edx,%eax
-    3ee1:	83 c0 30             	add    $0x30,%eax
-    3ee4:	88 45 a8             	mov    %al,-0x58(%ebp)
-    name[5] = '\0';
-    3ee7:	c6 45 a9 00          	movb   $0x0,-0x57(%ebp)
-    printf(1, "writing %s\n", name);
-    3eeb:	8d 45 a4             	lea    -0x5c(%ebp),%eax
-    3eee:	89 44 24 08          	mov    %eax,0x8(%esp)
-    3ef2:	c7 44 24 04 f9 60 00 	movl   $0x60f9,0x4(%esp)
-    3ef9:	00 
-    3efa:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
-    3f01:	e8 f5 06 00 00       	call   45fb <printf>
-    int fd = open(name, O_CREATE|O_RDWR);
-    3f06:	c7 44 24 04 02 02 00 	movl   $0x202,0x4(%esp)
-    3f0d:	00 
-    3f0e:	8d 45 a4             	lea    -0x5c(%ebp),%eax
-    3f11:	89 04 24             	mov    %eax,(%esp)
-    3f14:	e8 83 05 00 00       	call   449c <open>
-    3f19:	89 45 e8             	mov    %eax,-0x18(%ebp)
-    if(fd < 0){
-    3f1c:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
-    3f20:	79 1d                	jns    3f3f <fsfull+0x14b>
-      printf(1, "open %s failed\n", name);
-    3f22:	8d 45 a4             	lea    -0x5c(%ebp),%eax
-    3f25:	89 44 24 08          	mov    %eax,0x8(%esp)
-    3f29:	c7 44 24 04 05 61 00 	movl   $0x6105,0x4(%esp)
-    3f30:	00 
-    3f31:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
-    3f38:	e8 be 06 00 00       	call   45fb <printf>
-      break;
-    3f3d:	eb 71                	jmp    3fb0 <fsfull+0x1bc>
-    }
-    int total = 0;
-    3f3f:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
-    while(1){
-      int cc = write(fd, buf, 512);
-    3f46:	c7 44 24 08 00 02 00 	movl   $0x200,0x8(%esp)
-    3f4d:	00 
-    3f4e:	c7 44 24 04 60 90 00 	movl   $0x9060,0x4(%esp)
-    3f55:	00 
-    3f56:	8b 45 e8             	mov    -0x18(%ebp),%eax
-    3f59:	89 04 24             	mov    %eax,(%esp)
-    3f5c:	e8 1b 05 00 00       	call   447c <write>
-    3f61:	89 45 e4             	mov    %eax,-0x1c(%ebp)
-      if(cc < 512)
-    3f64:	81 7d e4 ff 01 00 00 	cmpl   $0x1ff,-0x1c(%ebp)
-    3f6b:	7e 0c                	jle    3f79 <fsfull+0x185>
-        break;
-      total += cc;
-    3f6d:	8b 45 e4             	mov    -0x1c(%ebp),%eax
-    3f70:	01 45 ec             	add    %eax,-0x14(%ebp)
-      fsblocks++;
-    3f73:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)
-    }
-    3f77:	eb cd                	jmp    3f46 <fsfull+0x152>
-    }
-    int total = 0;
-    while(1){
-      int cc = write(fd, buf, 512);
-      if(cc < 512)
-        break;
-    3f79:	90                   	nop
-      total += cc;
-      fsblocks++;
-    }
-    printf(1, "wrote %d bytes\n", total);
-    3f7a:	8b 45 ec             	mov    -0x14(%ebp),%eax
-    3f7d:	89 44 24 08          	mov    %eax,0x8(%esp)
-    3f81:	c7 44 24 04 15 61 00 	movl   $0x6115,0x4(%esp)
-    3f88:	00 
-    3f89:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
-    3f90:	e8 66 06 00 00       	call   45fb <printf>
-    close(fd);
-    3f95:	8b 45 e8             	mov    -0x18(%ebp),%eax
-    3f98:	89 04 24             	mov    %eax,(%esp)
-    3f9b:	e8 e4 04 00 00       	call   4484 <close>
-    if(total == 0)
-    3fa0:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
-    3fa4:	74 09                	je     3faf <fsfull+0x1bb>
-  int nfiles;
-  int fsblocks = 0;
-
-  printf(1, "fsfull test\n");
-
-  for(nfiles = 0; ; nfiles++){
-    3fa6:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
-    }
-    printf(1, "wrote %d bytes\n", total);
-    close(fd);
-    if(total == 0)
-      break;
-  }
-    3faa:	e9 6e fe ff ff       	jmp    3e1d <fsfull+0x29>
-      fsblocks++;
-    }
-    printf(1, "wrote %d bytes\n", total);
-    close(fd);
-    if(total == 0)
-      break;
-    3faf:	90                   	nop
-  }
-
-  while(nfiles >= 0){
-    3fb0:	e9 dd 00 00 00       	jmp    4092 <fsfull+0x29e>
-    char name[64];
-    name[0] = 'f';
-    3fb5:	c6 45 a4 66          	movb   $0x66,-0x5c(%ebp)
-    name[1] = '0' + nfiles / 1000;
-    3fb9:	8b 4d f4             	mov    -0xc(%ebp),%ecx
-    3fbc:	ba d3 4d 62 10       	mov    $0x10624dd3,%edx
-    3fc1:	89 c8                	mov    %ecx,%eax
-    3fc3:	f7 ea                	imul   %edx
-    3fc5:	c1 fa 06             	sar    $0x6,%edx
-    3fc8:	89 c8                	mov    %ecx,%eax
-    3fca:	c1 f8 1f             	sar    $0x1f,%eax
-    3fcd:	89 d1                	mov    %edx,%ecx
-    3fcf:	29 c1                	sub    %eax,%ecx
-    3fd1:	89 c8                	mov    %ecx,%eax
-    3fd3:	83 c0 30             	add    $0x30,%eax
-    3fd6:	88 45 a5             	mov    %al,-0x5b(%ebp)
-    name[2] = '0' + (nfiles % 1000) / 100;
-    3fd9:	8b 5d f4             	mov    -0xc(%ebp),%ebx
-    3fdc:	ba d3 4d 62 10       	mov    $0x10624dd3,%edx
-    3fe1:	89 d8                	mov    %ebx,%eax
-    3fe3:	f7 ea                	imul   %edx
-    3fe5:	c1 fa 06             	sar    $0x6,%edx
-    3fe8:	89 d8                	mov    %ebx,%eax
-    3fea:	c1 f8 1f             	sar    $0x1f,%eax
-    3fed:	89 d1                	mov    %edx,%ecx
-    3fef:	29 c1                	sub    %eax,%ecx
-    3ff1:	69 c1 e8 03 00 00    	imul   $0x3e8,%ecx,%eax
-    3ff7:	89 d9                	mov    %ebx,%ecx
-    3ff9:	29 c1                	sub    %eax,%ecx
-    3ffb:	ba 1f 85 eb 51       	mov    $0x51eb851f,%edx
-    4000:	89 c8                	mov    %ecx,%eax
-    4002:	f7 ea                	imul   %edx
-    4004:	c1 fa 05             	sar    $0x5,%edx
-    4007:	89 c8                	mov    %ecx,%eax
-    4009:	c1 f8 1f             	sar    $0x1f,%eax
-    400c:	89 d1                	mov    %edx,%ecx
-    400e:	29 c1                	sub    %eax,%ecx
-    4010:	89 c8                	mov    %ecx,%eax
-    4012:	83 c0 30             	add    $0x30,%eax
-    4015:	88 45 a6             	mov    %al,-0x5a(%ebp)
-    name[3] = '0' + (nfiles % 100) / 10;
-    4018:	8b 5d f4             	mov    -0xc(%ebp),%ebx
-    401b:	ba 1f 85 eb 51       	mov    $0x51eb851f,%edx
-    4020:	89 d8                	mov    %ebx,%eax
-    4022:	f7 ea                	imul   %edx
-    4024:	c1 fa 05             	sar    $0x5,%edx
-    4027:	89 d8                	mov    %ebx,%eax
-    4029:	c1 f8 1f             	sar    $0x1f,%eax
-    402c:	89 d1                	mov    %edx,%ecx
-    402e:	29 c1                	sub    %eax,%ecx
-    4030:	6b c1 64             	imul   $0x64,%ecx,%eax
-    4033:	89 d9                	mov    %ebx,%ecx
-    4035:	29 c1                	sub    %eax,%ecx
-    4037:	ba 67 66 66 66       	mov    $0x66666667,%edx
-    403c:	89 c8                	mov    %ecx,%eax
-    403e:	f7 ea                	imul   %edx
-    4040:	c1 fa 02             	sar    $0x2,%edx
-    4043:	89 c8                	mov    %ecx,%eax
-    4045:	c1 f8 1f             	sar    $0x1f,%eax
-    4048:	89 d1                	mov    %edx,%ecx
-    404a:	29 c1                	sub    %eax,%ecx
-    404c:	89 c8                	mov    %ecx,%eax
-    404e:	83 c0 30             	add    $0x30,%eax
-    4051:	88 45 a7             	mov    %al,-0x59(%ebp)
-    name[4] = '0' + (nfiles % 10);
-    4054:	8b 4d f4             	mov    -0xc(%ebp),%ecx
-    4057:	ba 67 66 66 66       	mov    $0x66666667,%edx
-    405c:	89 c8                	mov    %ecx,%eax
-    405e:	f7 ea                	imul   %edx
-    4060:	c1 fa 02             	sar    $0x2,%edx
-    4063:	89 c8                	mov    %ecx,%eax
-    4065:	c1 f8 1f             	sar    $0x1f,%eax
-    4068:	29 c2                	sub    %eax,%edx
-    406a:	89 d0                	mov    %edx,%eax
-    406c:	c1 e0 02             	shl    $0x2,%eax
-    406f:	01 d0                	add    %edx,%eax
-    4071:	01 c0                	add    %eax,%eax
-    4073:	89 ca                	mov    %ecx,%edx
-    4075:	29 c2                	sub    %eax,%edx
-    4077:	89 d0                	mov    %edx,%eax
-    4079:	83 c0 30             	add    $0x30,%eax
-    407c:	88 45 a8             	mov    %al,-0x58(%ebp)
-    name[5] = '\0';
-    407f:	c6 45 a9 00          	movb   $0x0,-0x57(%ebp)
-    unlink(name);
-    4083:	8d 45 a4             	lea    -0x5c(%ebp),%eax
-    4086:	89 04 24             	mov    %eax,(%esp)
-    4089:	e8 1e 04 00 00       	call   44ac <unlink>
-    nfiles--;
-    408e:	83 6d f4 01          	subl   $0x1,-0xc(%ebp)
-    close(fd);
-    if(total == 0)
-      break;
-  }
-
-  while(nfiles >= 0){
-    4092:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
-    4096:	0f 89 19 ff ff ff    	jns    3fb5 <fsfull+0x1c1>
-    name[5] = '\0';
-    unlink(name);
-    nfiles--;
-  }
-
-  printf(1, "fsfull test finished\n");
-    409c:	c7 44 24 04 25 61 00 	movl   $0x6125,0x4(%esp)
-    40a3:	00 
-    40a4:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
-    40ab:	e8 4b 05 00 00       	call   45fb <printf>
-}
-    40b0:	83 c4 74             	add    $0x74,%esp
-    40b3:	5b                   	pop    %ebx
-    40b4:	5d                   	pop    %ebp
-    40b5:	c3                   	ret    
-
-000040b6 <rand>:
-
-unsigned long randstate = 1;
-unsigned int
-rand()
-{
-    40b6:	55                   	push   %ebp
-    40b7:	89 e5                	mov    %esp,%ebp
-  randstate = randstate * 1664525 + 1013904223;
-    40b9:	a1 84 68 00 00       	mov    0x6884,%eax
-    40be:	69 c0 0d 66 19 00    	imul   $0x19660d,%eax,%eax
-    40c4:	05 5f f3 6e 3c       	add    $0x3c6ef35f,%eax
-    40c9:	a3 84 68 00 00       	mov    %eax,0x6884
-  return randstate;
-    40ce:	a1 84 68 00 00       	mov    0x6884,%eax
-}
-    40d3:	5d                   	pop    %ebp
-    40d4:	c3                   	ret    
-
-000040d5 <main>:
-
-int
-main(int argc, char *argv[])
-{
-    40d5:	55                   	push   %ebp
-    40d6:	89 e5                	mov    %esp,%ebp
-    40d8:	83 e4 f0             	and    $0xfffffff0,%esp
-    40db:	83 ec 10             	sub    $0x10,%esp
-  printf(1, "usertests starting\n");
-    40de:	c7 44 24 04 3b 61 00 	movl   $0x613b,0x4(%esp)
-    40e5:	00 
-    40e6:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
-    40ed:	e8 09 05 00 00       	call   45fb <printf>
-
-  if(open("usertests.ran", 0) >= 0){
-    40f2:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
-    40f9:	00 
-    40fa:	c7 04 24 4f 61 00 00 	movl   $0x614f,(%esp)
-    4101:	e8 96 03 00 00       	call   449c <open>
-    4106:	85 c0                	test   %eax,%eax
-    4108:	78 20                	js     412a <main+0x55>
-    printf(1, "already ran user tests -- rebuild fs.img\n");
-    410a:	c7 44 24 04 60 61 00 	movl   $0x6160,0x4(%esp)
-    4111:	00 
-    4112:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
-    4119:	e8 dd 04 00 00       	call   45fb <printf>
-    exit(EXIT_STATUS_DEFAULT);
-    411e:	c7 04 24 02 00 00 00 	movl   $0x2,(%esp)
-    4125:	e8 32 03 00 00       	call   445c <exit>
-  }
-  close(open("usertests.ran", O_CREATE));
-    412a:	c7 44 24 04 00 02 00 	movl   $0x200,0x4(%esp)
-    4131:	00 
-    4132:	c7 04 24 4f 61 00 00 	movl   $0x614f,(%esp)
-    4139:	e8 5e 03 00 00       	call   449c <open>
-    413e:	89 04 24             	mov    %eax,(%esp)
-    4141:	e8 3e 03 00 00       	call   4484 <close>
-
-  createdelete();
-    4146:	e8 d9 d2 ff ff       	call   1424 <createdelete>
-  linkunlink();
-    414b:	e8 f8 dd ff ff       	call   1f48 <linkunlink>
-  concreate();
-    4150:	e8 ff d9 ff ff       	call   1b54 <concreate>
-  fourfiles();
-    4155:	e8 31 d0 ff ff       	call   118b <fourfiles>
-  sharedfd();
-    415a:	e8 1d ce ff ff       	call   f7c <sharedfd>
-
-  bigargtest();
-    415f:	e8 4b fb ff ff       	call   3caf <bigargtest>
-  bigwrite();
-    4164:	e8 f3 e8 ff ff       	call   2a5c <bigwrite>
-  bigargtest();
-    4169:	e8 41 fb ff ff       	call   3caf <bigargtest>
-  bsstest();
-    416e:	e8 c3 fa ff ff       	call   3c36 <bsstest>
-  sbrktest();
-    4173:	e8 3b f4 ff ff       	call   35b3 <sbrktest>
-  validatetest();
-    4178:	e8 d4 f9 ff ff       	call   3b51 <validatetest>
-
-  opentest();
-    417d:	e8 b5 c1 ff ff       	call   337 <opentest>
-  writetest();
-    4182:	e8 69 c2 ff ff       	call   3f0 <writetest>
-  writetest1();
-    4187:	e8 a3 c4 ff ff       	call   62f <writetest1>
-  createtest();
-    418c:	e8 d8 c6 ff ff       	call   869 <createtest>
-
-  openiputtest();
-    4191:	e8 76 c0 ff ff       	call   20c <openiputtest>
-  exitiputtest();
-    4196:	e8 5b bf ff ff       	call   f6 <exitiputtest>
-  iputtest();
-    419b:	e8 60 be ff ff       	call   0 <iputtest>
-
-  mem();
-    41a0:	e8 dd cc ff ff       	call   e82 <mem>
-  pipe1();
-    41a5:	e8 c3 c8 ff ff       	call   a6d <pipe1>
-  preempt();
-    41aa:	e8 d6 ca ff ff       	call   c85 <preempt>
-  exitwait();
-    41af:	e8 42 cc ff ff       	call   df6 <exitwait>
-
-  rmdot();
-    41b4:	e8 93 ed ff ff       	call   2f4c <rmdot>
-  fourteen();
-    41b9:	e8 0e ec ff ff       	call   2dcc <fourteen>
-  bigfile();
-    41be:	e8 af e9 ff ff       	call   2b72 <bigfile>
-  subdir();
-    41c3:	e8 4b e0 ff ff       	call   2213 <subdir>
-  linktest();
-    41c8:	e8 ff d6 ff ff       	call   18cc <linktest>
-  unlinkread();
-    41cd:	e8 fb d4 ff ff       	call   16cd <unlinkread>
-  dirfile();
-    41d2:	e8 25 ef ff ff       	call   30fc <dirfile>
-  iref();
-    41d7:	e8 a8 f1 ff ff       	call   3384 <iref>
-  forktest();
-    41dc:	e8 d5 f2 ff ff       	call   34b6 <forktest>
-  bigdir(); // slow
-    41e1:	e8 a3 de ff ff       	call   2089 <bigdir>
-  exectest();
-    41e6:	e8 2c c8 ff ff       	call   a17 <exectest>
-
-  exit(EXIT_STATUS_DEFAULT);
-    41eb:	c7 04 24 02 00 00 00 	movl   $0x2,(%esp)
-    41f2:	e8 65 02 00 00       	call   445c <exit>
-    41f7:	90                   	nop
-
-000041f8 <stosb>:
-               "cc");
-}
-
-static inline void
-stosb(void *addr, int data, int cnt)
-{
-    41f8:	55                   	push   %ebp
-    41f9:	89 e5                	mov    %esp,%ebp
-    41fb:	57                   	push   %edi
-    41fc:	53                   	push   %ebx
-  asm volatile("cld; rep stosb" :
-    41fd:	8b 4d 08             	mov    0x8(%ebp),%ecx
-    4200:	8b 55 10             	mov    0x10(%ebp),%edx
-    4203:	8b 45 0c             	mov    0xc(%ebp),%eax
-    4206:	89 cb                	mov    %ecx,%ebx
-    4208:	89 df                	mov    %ebx,%edi
-    420a:	89 d1                	mov    %edx,%ecx
-    420c:	fc                   	cld    
-    420d:	f3 aa                	rep stos %al,%es:(%edi)
-    420f:	89 ca                	mov    %ecx,%edx
-    4211:	89 fb                	mov    %edi,%ebx
-    4213:	89 5d 08             	mov    %ebx,0x8(%ebp)
-    4216:	89 55 10             	mov    %edx,0x10(%ebp)
-               "=D" (addr), "=c" (cnt) :
-               "0" (addr), "1" (cnt), "a" (data) :
-               "memory", "cc");
-}
-    4219:	5b                   	pop    %ebx
-    421a:	5f                   	pop    %edi
-    421b:	5d                   	pop    %ebp
-    421c:	c3                   	ret    
-
-0000421d <strcpy>:
-#include "user.h"
-#include "x86.h"
-
-char*
-strcpy(char *s, char *t)
-{
-    421d:	55                   	push   %ebp
-    421e:	89 e5                	mov    %esp,%ebp
-    4220:	83 ec 10             	sub    $0x10,%esp
-  char *os;
-
-  os = s;
-    4223:	8b 45 08             	mov    0x8(%ebp),%eax
-    4226:	89 45 fc             	mov    %eax,-0x4(%ebp)
-  while((*s++ = *t++) != 0)
-    4229:	90                   	nop
-    422a:	8b 45 0c             	mov    0xc(%ebp),%eax
-    422d:	0f b6 10             	movzbl (%eax),%edx
-    4230:	8b 45 08             	mov    0x8(%ebp),%eax
-    4233:	88 10                	mov    %dl,(%eax)
-    4235:	8b 45 08             	mov    0x8(%ebp),%eax
-    4238:	0f b6 00             	movzbl (%eax),%eax
-    423b:	84 c0                	test   %al,%al
-    423d:	0f 95 c0             	setne  %al
-    4240:	83 45 08 01          	addl   $0x1,0x8(%ebp)
-    4244:	83 45 0c 01          	addl   $0x1,0xc(%ebp)
-    4248:	84 c0                	test   %al,%al
-    424a:	75 de                	jne    422a <strcpy+0xd>
-    ;
-  return os;
-    424c:	8b 45 fc             	mov    -0x4(%ebp),%eax
-}
-    424f:	c9                   	leave  
-    4250:	c3                   	ret    
-
-00004251 <strcmp>:
-
-int
-strcmp(const char *p, const char *q)
-{
-    4251:	55                   	push   %ebp
-    4252:	89 e5                	mov    %esp,%ebp
-  while(*p && *p == *q)
-    4254:	eb 08                	jmp    425e <strcmp+0xd>
-    p++, q++;
-    4256:	83 45 08 01          	addl   $0x1,0x8(%ebp)
-    425a:	83 45 0c 01          	addl   $0x1,0xc(%ebp)
-}
-
-int
-strcmp(const char *p, const char *q)
-{
-  while(*p && *p == *q)
-    425e:	8b 45 08             	mov    0x8(%ebp),%eax
-    4261:	0f b6 00             	movzbl (%eax),%eax
-    4264:	84 c0                	test   %al,%al
-    4266:	74 10                	je     4278 <strcmp+0x27>
-    4268:	8b 45 08             	mov    0x8(%ebp),%eax
-    426b:	0f b6 10             	movzbl (%eax),%edx
-    426e:	8b 45 0c             	mov    0xc(%ebp),%eax
-    4271:	0f b6 00             	movzbl (%eax),%eax
-    4274:	38 c2                	cmp    %al,%dl
-    4276:	74 de                	je     4256 <strcmp+0x5>
-    p++, q++;
-  return (uchar)*p - (uchar)*q;
-    4278:	8b 45 08             	mov    0x8(%ebp),%eax
-    427b:	0f b6 00             	movzbl (%eax),%eax
-    427e:	0f b6 d0             	movzbl %al,%edx
-    4281:	8b 45 0c             	mov    0xc(%ebp),%eax
-    4284:	0f b6 00             	movzbl (%eax),%eax
-    4287:	0f b6 c0             	movzbl %al,%eax
-    428a:	89 d1                	mov    %edx,%ecx
-    428c:	29 c1                	sub    %eax,%ecx
-    428e:	89 c8                	mov    %ecx,%eax
-}
-    4290:	5d                   	pop    %ebp
-    4291:	c3                   	ret    
-
-00004292 <strlen>:
-
-uint
-strlen(char *s)
-{
-    4292:	55                   	push   %ebp
-    4293:	89 e5                	mov    %esp,%ebp
-    4295:	83 ec 10             	sub    $0x10,%esp
-  int n;
-
-  for(n = 0; s[n]; n++)
-    4298:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
-    429f:	eb 04                	jmp    42a5 <strlen+0x13>
-    42a1:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
-    42a5:	8b 45 fc             	mov    -0x4(%ebp),%eax
-    42a8:	03 45 08             	add    0x8(%ebp),%eax
-    42ab:	0f b6 00             	movzbl (%eax),%eax
-    42ae:	84 c0                	test   %al,%al
-    42b0:	75 ef                	jne    42a1 <strlen+0xf>
-    ;
-  return n;
-    42b2:	8b 45 fc             	mov    -0x4(%ebp),%eax
-}
-    42b5:	c9                   	leave  
-    42b6:	c3                   	ret    
-
-000042b7 <memset>:
-
-void*
-memset(void *dst, int c, uint n)
-{
-    42b7:	55                   	push   %ebp
-    42b8:	89 e5                	mov    %esp,%ebp
-    42ba:	83 ec 0c             	sub    $0xc,%esp
-  stosb(dst, c, n);
-    42bd:	8b 45 10             	mov    0x10(%ebp),%eax
-    42c0:	89 44 24 08          	mov    %eax,0x8(%esp)
-    42c4:	8b 45 0c             	mov    0xc(%ebp),%eax
-    42c7:	89 44 24 04          	mov    %eax,0x4(%esp)
-    42cb:	8b 45 08             	mov    0x8(%ebp),%eax
-    42ce:	89 04 24             	mov    %eax,(%esp)
-    42d1:	e8 22 ff ff ff       	call   41f8 <stosb>
-  return dst;
-    42d6:	8b 45 08             	mov    0x8(%ebp),%eax
-}
-    42d9:	c9                   	leave  
-    42da:	c3                   	ret    
-
-000042db <strchr>:
-
-char*
-strchr(const char *s, char c)
-{
-    42db:	55                   	push   %ebp
-    42dc:	89 e5                	mov    %esp,%ebp
-    42de:	83 ec 04             	sub    $0x4,%esp
-    42e1:	8b 45 0c             	mov    0xc(%ebp),%eax
-    42e4:	88 45 fc             	mov    %al,-0x4(%ebp)
-  for(; *s; s++)
-    42e7:	eb 14                	jmp    42fd <strchr+0x22>
-    if(*s == c)
-    42e9:	8b 45 08             	mov    0x8(%ebp),%eax
-    42ec:	0f b6 00             	movzbl (%eax),%eax
-    42ef:	3a 45 fc             	cmp    -0x4(%ebp),%al
-    42f2:	75 05                	jne    42f9 <strchr+0x1e>
-      return (char*)s;
-    42f4:	8b 45 08             	mov    0x8(%ebp),%eax
-    42f7:	eb 13                	jmp    430c <strchr+0x31>
-}
-
-char*
-strchr(const char *s, char c)
-{
-  for(; *s; s++)
-    42f9:	83 45 08 01          	addl   $0x1,0x8(%ebp)
-    42fd:	8b 45 08             	mov    0x8(%ebp),%eax
-    4300:	0f b6 00             	movzbl (%eax),%eax
-    4303:	84 c0                	test   %al,%al
-    4305:	75 e2                	jne    42e9 <strchr+0xe>
-    if(*s == c)
-      return (char*)s;
-  return 0;
-    4307:	b8 00 00 00 00       	mov    $0x0,%eax
-}
-    430c:	c9                   	leave  
-    430d:	c3                   	ret    
-
-0000430e <gets>:
-
-char*
-gets(char *buf, int max)
-{
-    430e:	55                   	push   %ebp
-    430f:	89 e5                	mov    %esp,%ebp
-    4311:	83 ec 28             	sub    $0x28,%esp
-  int i, cc;
-  char c;
-
-  for(i=0; i+1 < max; ){
-    4314:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
-    431b:	eb 44                	jmp    4361 <gets+0x53>
-    cc = read(0, &c, 1);
-    431d:	c7 44 24 08 01 00 00 	movl   $0x1,0x8(%esp)
-    4324:	00 
-    4325:	8d 45 ef             	lea    -0x11(%ebp),%eax
-    4328:	89 44 24 04          	mov    %eax,0x4(%esp)
-    432c:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
-    4333:	e8 3c 01 00 00       	call   4474 <read>
-    4338:	89 45 f0             	mov    %eax,-0x10(%ebp)
-    if(cc < 1)
-    433b:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
-    433f:	7e 2d                	jle    436e <gets+0x60>
-      break;
-    buf[i++] = c;
-    4341:	8b 45 f4             	mov    -0xc(%ebp),%eax
-    4344:	03 45 08             	add    0x8(%ebp),%eax
-    4347:	0f b6 55 ef          	movzbl -0x11(%ebp),%edx
-    434b:	88 10                	mov    %dl,(%eax)
-    434d:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
-    if(c == '\n' || c == '\r')
-    4351:	0f b6 45 ef          	movzbl -0x11(%ebp),%eax
-    4355:	3c 0a                	cmp    $0xa,%al
-    4357:	74 16                	je     436f <gets+0x61>
-    4359:	0f b6 45 ef          	movzbl -0x11(%ebp),%eax
-    435d:	3c 0d                	cmp    $0xd,%al
-    435f:	74 0e                	je     436f <gets+0x61>
-gets(char *buf, int max)
-{
-  int i, cc;
-  char c;
-
-  for(i=0; i+1 < max; ){
-    4361:	8b 45 f4             	mov    -0xc(%ebp),%eax
-    4364:	83 c0 01             	add    $0x1,%eax
-    4367:	3b 45 0c             	cmp    0xc(%ebp),%eax
-    436a:	7c b1                	jl     431d <gets+0xf>
-    436c:	eb 01                	jmp    436f <gets+0x61>
-    cc = read(0, &c, 1);
-    if(cc < 1)
-      break;
-    436e:	90                   	nop
-    buf[i++] = c;
-    if(c == '\n' || c == '\r')
-      break;
-  }
-  buf[i] = '\0';
-    436f:	8b 45 f4             	mov    -0xc(%ebp),%eax
-    4372:	03 45 08             	add    0x8(%ebp),%eax
-    4375:	c6 00 00             	movb   $0x0,(%eax)
-  return buf;
-    4378:	8b 45 08             	mov    0x8(%ebp),%eax
-}
-    437b:	c9                   	leave  
-    437c:	c3                   	ret    
-
-0000437d <stat>:
-
-int
-stat(char *n, struct stat *st)
-{
-    437d:	55                   	push   %ebp
-    437e:	89 e5                	mov    %esp,%ebp
-    4380:	83 ec 28             	sub    $0x28,%esp
-  int fd;
-  int r;
-
-  fd = open(n, O_RDONLY);
-    4383:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
-    438a:	00 
-    438b:	8b 45 08             	mov    0x8(%ebp),%eax
-    438e:	89 04 24             	mov    %eax,(%esp)
-    4391:	e8 06 01 00 00       	call   449c <open>
-    4396:	89 45 f4             	mov    %eax,-0xc(%ebp)
-  if(fd < 0)
-    4399:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
-    439d:	79 07                	jns    43a6 <stat+0x29>
-    return -1;
-    439f:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
-    43a4:	eb 23                	jmp    43c9 <stat+0x4c>
-  r = fstat(fd, st);
-    43a6:	8b 45 0c             	mov    0xc(%ebp),%eax
-    43a9:	89 44 24 04          	mov    %eax,0x4(%esp)
-    43ad:	8b 45 f4             	mov    -0xc(%ebp),%eax
-    43b0:	89 04 24             	mov    %eax,(%esp)
-    43b3:	e8 fc 00 00 00       	call   44b4 <fstat>
-    43b8:	89 45 f0             	mov    %eax,-0x10(%ebp)
-  close(fd);
-    43bb:	8b 45 f4             	mov    -0xc(%ebp),%eax
-    43be:	89 04 24             	mov    %eax,(%esp)
-    43c1:	e8 be 00 00 00       	call   4484 <close>
-  return r;
-    43c6:	8b 45 f0             	mov    -0x10(%ebp),%eax
-}
-    43c9:	c9                   	leave  
-    43ca:	c3                   	ret    
-
-000043cb <atoi>:
-
-int
-atoi(const char *s)
-{
-    43cb:	55                   	push   %ebp
-    43cc:	89 e5                	mov    %esp,%ebp
-    43ce:	83 ec 10             	sub    $0x10,%esp
-  int n;
-
-  n = 0;
-    43d1:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
-  while('0' <= *s && *s <= '9')
-    43d8:	eb 23                	jmp    43fd <atoi+0x32>
-    n = n*10 + *s++ - '0';
-    43da:	8b 55 fc             	mov    -0x4(%ebp),%edx
-    43dd:	89 d0                	mov    %edx,%eax
-    43df:	c1 e0 02             	shl    $0x2,%eax
-    43e2:	01 d0                	add    %edx,%eax
-    43e4:	01 c0                	add    %eax,%eax
-    43e6:	89 c2                	mov    %eax,%edx
-    43e8:	8b 45 08             	mov    0x8(%ebp),%eax
-    43eb:	0f b6 00             	movzbl (%eax),%eax
-    43ee:	0f be c0             	movsbl %al,%eax
-    43f1:	01 d0                	add    %edx,%eax
-    43f3:	83 e8 30             	sub    $0x30,%eax
-    43f6:	89 45 fc             	mov    %eax,-0x4(%ebp)
-    43f9:	83 45 08 01          	addl   $0x1,0x8(%ebp)
-atoi(const char *s)
-{
-  int n;
-
-  n = 0;
-  while('0' <= *s && *s <= '9')
-    43fd:	8b 45 08             	mov    0x8(%ebp),%eax
-    4400:	0f b6 00             	movzbl (%eax),%eax
-    4403:	3c 2f                	cmp    $0x2f,%al
-    4405:	7e 0a                	jle    4411 <atoi+0x46>
-    4407:	8b 45 08             	mov    0x8(%ebp),%eax
-    440a:	0f b6 00             	movzbl (%eax),%eax
-    440d:	3c 39                	cmp    $0x39,%al
-    440f:	7e c9                	jle    43da <atoi+0xf>
-    n = n*10 + *s++ - '0';
-  return n;
-    4411:	8b 45 fc             	mov    -0x4(%ebp),%eax
-}
-    4414:	c9                   	leave  
-    4415:	c3                   	ret    
-
-00004416 <memmove>:
-
-void*
-memmove(void *vdst, void *vsrc, int n)
-{
-    4416:	55                   	push   %ebp
-    4417:	89 e5                	mov    %esp,%ebp
-    4419:	83 ec 10             	sub    $0x10,%esp
-  char *dst, *src;
-  
-  dst = vdst;
-    441c:	8b 45 08             	mov    0x8(%ebp),%eax
-    441f:	89 45 fc             	mov    %eax,-0x4(%ebp)
-  src = vsrc;
-    4422:	8b 45 0c             	mov    0xc(%ebp),%eax
-    4425:	89 45 f8             	mov    %eax,-0x8(%ebp)
-  while(n-- > 0)
-    4428:	eb 13                	jmp    443d <memmove+0x27>
-    *dst++ = *src++;
-    442a:	8b 45 f8             	mov    -0x8(%ebp),%eax
-    442d:	0f b6 10             	movzbl (%eax),%edx
-    4430:	8b 45 fc             	mov    -0x4(%ebp),%eax
-    4433:	88 10                	mov    %dl,(%eax)
-    4435:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
-    4439:	83 45 f8 01          	addl   $0x1,-0x8(%ebp)
-{
-  char *dst, *src;
-  
-  dst = vdst;
-  src = vsrc;
-  while(n-- > 0)
-    443d:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
-    4441:	0f 9f c0             	setg   %al
-    4444:	83 6d 10 01          	subl   $0x1,0x10(%ebp)
-    4448:	84 c0                	test   %al,%al
-    444a:	75 de                	jne    442a <memmove+0x14>
-    *dst++ = *src++;
-  return vdst;
-    444c:	8b 45 08             	mov    0x8(%ebp),%eax
-}
-    444f:	c9                   	leave  
-    4450:	c3                   	ret    
-    4451:	90                   	nop
-    4452:	90                   	nop
-    4453:	90                   	nop
-
-00004454 <fork>:
-  name: \
-    movl $SYS_ ## name, %eax; \
-    int $T_SYSCALL; \
-    ret
-
-SYSCALL(fork)
-    4454:	b8 01 00 00 00       	mov    $0x1,%eax
-    4459:	cd 40                	int    $0x40
-    445b:	c3                   	ret    
-
-0000445c <exit>:
-SYSCALL(exit)
-    445c:	b8 02 00 00 00       	mov    $0x2,%eax
-    4461:	cd 40                	int    $0x40
-    4463:	c3                   	ret    
-
-00004464 <wait>:
-SYSCALL(wait)
-    4464:	b8 03 00 00 00       	mov    $0x3,%eax
-    4469:	cd 40                	int    $0x40
-    446b:	c3                   	ret    
-
-0000446c <pipe>:
-SYSCALL(pipe)
-    446c:	b8 04 00 00 00       	mov    $0x4,%eax
-    4471:	cd 40                	int    $0x40
-    4473:	c3                   	ret    
-
-00004474 <read>:
-SYSCALL(read)
-    4474:	b8 05 00 00 00       	mov    $0x5,%eax
-    4479:	cd 40                	int    $0x40
-    447b:	c3                   	ret    
-
-0000447c <write>:
-SYSCALL(write)
-    447c:	b8 10 00 00 00       	mov    $0x10,%eax
-    4481:	cd 40                	int    $0x40
-    4483:	c3                   	ret    
-
-00004484 <close>:
-SYSCALL(close)
-    4484:	b8 15 00 00 00       	mov    $0x15,%eax
-    4489:	cd 40                	int    $0x40
-    448b:	c3                   	ret    
-
-0000448c <kill>:
-SYSCALL(kill)
-    448c:	b8 06 00 00 00       	mov    $0x6,%eax
-    4491:	cd 40                	int    $0x40
-    4493:	c3                   	ret    
-
-00004494 <exec>:
-SYSCALL(exec)
-    4494:	b8 07 00 00 00       	mov    $0x7,%eax
-    4499:	cd 40                	int    $0x40
-    449b:	c3                   	ret    
-
-0000449c <open>:
-SYSCALL(open)
-    449c:	b8 0f 00 00 00       	mov    $0xf,%eax
-    44a1:	cd 40                	int    $0x40
-    44a3:	c3                   	ret    
-
-000044a4 <mknod>:
-SYSCALL(mknod)
-    44a4:	b8 11 00 00 00       	mov    $0x11,%eax
-    44a9:	cd 40                	int    $0x40
-    44ab:	c3                   	ret    
-
-000044ac <unlink>:
-SYSCALL(unlink)
-    44ac:	b8 12 00 00 00       	mov    $0x12,%eax
-    44b1:	cd 40                	int    $0x40
-    44b3:	c3                   	ret    
-
-000044b4 <fstat>:
-SYSCALL(fstat)
-    44b4:	b8 08 00 00 00       	mov    $0x8,%eax
-    44b9:	cd 40                	int    $0x40
-    44bb:	c3                   	ret    
-
-000044bc <link>:
-SYSCALL(link)
-    44bc:	b8 13 00 00 00       	mov    $0x13,%eax
-    44c1:	cd 40                	int    $0x40
-    44c3:	c3                   	ret    
-
-000044c4 <mkdir>:
-SYSCALL(mkdir)
-    44c4:	b8 14 00 00 00       	mov    $0x14,%eax
-    44c9:	cd 40                	int    $0x40
-    44cb:	c3                   	ret    
-
-000044cc <chdir>:
-SYSCALL(chdir)
-    44cc:	b8 09 00 00 00       	mov    $0x9,%eax
-    44d1:	cd 40                	int    $0x40
-    44d3:	c3                   	ret    
-
-000044d4 <dup>:
-SYSCALL(dup)
-    44d4:	b8 0a 00 00 00       	mov    $0xa,%eax
-    44d9:	cd 40                	int    $0x40
-    44db:	c3                   	ret    
-
-000044dc <getpid>:
-SYSCALL(getpid)
-    44dc:	b8 0b 00 00 00       	mov    $0xb,%eax
-    44e1:	cd 40                	int    $0x40
-    44e3:	c3                   	ret    
-
-000044e4 <sbrk>:
-SYSCALL(sbrk)
-    44e4:	b8 0c 00 00 00       	mov    $0xc,%eax
-    44e9:	cd 40                	int    $0x40
-    44eb:	c3                   	ret    
-
-000044ec <sleep>:
-SYSCALL(sleep)
-    44ec:	b8 0d 00 00 00       	mov    $0xd,%eax
-    44f1:	cd 40                	int    $0x40
-    44f3:	c3                   	ret    
-
-000044f4 <uptime>:
-SYSCALL(uptime)
-    44f4:	b8 0e 00 00 00       	mov    $0xe,%eax
-    44f9:	cd 40                	int    $0x40
-    44fb:	c3                   	ret    
-
-000044fc <waitpid>:
-SYSCALL(waitpid)
-    44fc:	b8 16 00 00 00       	mov    $0x16,%eax
-    4501:	cd 40                	int    $0x40
-    4503:	c3                   	ret    
-
-00004504 <wait_stat>:
-SYSCALL(wait_stat)
-    4504:	b8 17 00 00 00       	mov    $0x17,%eax
-    4509:	cd 40                	int    $0x40
-    450b:	c3                   	ret    
-
-0000450c <list_pgroup>:
-SYSCALL(list_pgroup)
-    450c:	b8 18 00 00 00       	mov    $0x18,%eax
-    4511:	cd 40                	int    $0x40
-    4513:	c3                   	ret    
-
-00004514 <foreground>:
-SYSCALL(foreground)
-    4514:	b8 19 00 00 00       	mov    $0x19,%eax
-    4519:	cd 40                	int    $0x40
-    451b:	c3                   	ret    
-
-0000451c <set_priority>:
-SYSCALL(set_priority)
-    451c:	b8 1a 00 00 00       	mov    $0x1a,%eax
-    4521:	cd 40                	int    $0x40
-    4523:	c3                   	ret    
-
-00004524 <putc>:
-#include "stat.h"
-#include "user.h"
-
-static void
-putc(int fd, char c)
-{
-    4524:	55                   	push   %ebp
-    4525:	89 e5                	mov    %esp,%ebp
-    4527:	83 ec 28             	sub    $0x28,%esp
-    452a:	8b 45 0c             	mov    0xc(%ebp),%eax
-    452d:	88 45 f4             	mov    %al,-0xc(%ebp)
-  write(fd, &c, 1);
-    4530:	c7 44 24 08 01 00 00 	movl   $0x1,0x8(%esp)
-    4537:	00 
-    4538:	8d 45 f4             	lea    -0xc(%ebp),%eax
-    453b:	89 44 24 04          	mov    %eax,0x4(%esp)
-    453f:	8b 45 08             	mov    0x8(%ebp),%eax
-    4542:	89 04 24             	mov    %eax,(%esp)
-    4545:	e8 32 ff ff ff       	call   447c <write>
-}
-    454a:	c9                   	leave  
-    454b:	c3                   	ret    
-
-0000454c <printint>:
-
-static void
-printint(int fd, int xx, int base, int sgn)
-{
-    454c:	55                   	push   %ebp
-    454d:	89 e5                	mov    %esp,%ebp
-    454f:	83 ec 48             	sub    $0x48,%esp
-  static char digits[] = "0123456789ABCDEF";
-  char buf[16];
-  int i, neg;
-  uint x;
-
-  neg = 0;
-    4552:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
-  if(sgn && xx < 0){
-    4559:	83 7d 14 00          	cmpl   $0x0,0x14(%ebp)
-    455d:	74 17                	je     4576 <printint+0x2a>
-    455f:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
-    4563:	79 11                	jns    4576 <printint+0x2a>
-    neg = 1;
-    4565:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
-    x = -xx;
-    456c:	8b 45 0c             	mov    0xc(%ebp),%eax
-    456f:	f7 d8                	neg    %eax
-    4571:	89 45 ec             	mov    %eax,-0x14(%ebp)
-    4574:	eb 06                	jmp    457c <printint+0x30>
-  } else {
-    x = xx;
-    4576:	8b 45 0c             	mov    0xc(%ebp),%eax
-    4579:	89 45 ec             	mov    %eax,-0x14(%ebp)
-  }
-
-  i = 0;
-    457c:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
-  do{
-    buf[i++] = digits[x % base];
-    4583:	8b 4d 10             	mov    0x10(%ebp),%ecx
-    4586:	8b 45 ec             	mov    -0x14(%ebp),%eax
-    4589:	ba 00 00 00 00       	mov    $0x0,%edx
-    458e:	f7 f1                	div    %ecx
-    4590:	89 d0                	mov    %edx,%eax
-    4592:	0f b6 90 88 68 00 00 	movzbl 0x6888(%eax),%edx
-    4599:	8d 45 dc             	lea    -0x24(%ebp),%eax
-    459c:	03 45 f4             	add    -0xc(%ebp),%eax
-    459f:	88 10                	mov    %dl,(%eax)
-    45a1:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
-  }while((x /= base) != 0);
-    45a5:	8b 55 10             	mov    0x10(%ebp),%edx
-    45a8:	89 55 d4             	mov    %edx,-0x2c(%ebp)
-    45ab:	8b 45 ec             	mov    -0x14(%ebp),%eax
-    45ae:	ba 00 00 00 00       	mov    $0x0,%edx
-    45b3:	f7 75 d4             	divl   -0x2c(%ebp)
-    45b6:	89 45 ec             	mov    %eax,-0x14(%ebp)
-    45b9:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
-    45bd:	75 c4                	jne    4583 <printint+0x37>
-  if(neg)
-    45bf:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
-    45c3:	74 2a                	je     45ef <printint+0xa3>
-    buf[i++] = '-';
-    45c5:	8d 45 dc             	lea    -0x24(%ebp),%eax
-    45c8:	03 45 f4             	add    -0xc(%ebp),%eax
-    45cb:	c6 00 2d             	movb   $0x2d,(%eax)
-    45ce:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
-
-  while(--i >= 0)
-    45d2:	eb 1b                	jmp    45ef <printint+0xa3>
-    putc(fd, buf[i]);
-    45d4:	8d 45 dc             	lea    -0x24(%ebp),%eax
-    45d7:	03 45 f4             	add    -0xc(%ebp),%eax
-    45da:	0f b6 00             	movzbl (%eax),%eax
-    45dd:	0f be c0             	movsbl %al,%eax
-    45e0:	89 44 24 04          	mov    %eax,0x4(%esp)
-    45e4:	8b 45 08             	mov    0x8(%ebp),%eax
-    45e7:	89 04 24             	mov    %eax,(%esp)
-    45ea:	e8 35 ff ff ff       	call   4524 <putc>
-    buf[i++] = digits[x % base];
-  }while((x /= base) != 0);
-  if(neg)
-    buf[i++] = '-';
-
-  while(--i >= 0)
-    45ef:	83 6d f4 01          	subl   $0x1,-0xc(%ebp)
-    45f3:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
-    45f7:	79 db                	jns    45d4 <printint+0x88>
-    putc(fd, buf[i]);
-}
-    45f9:	c9                   	leave  
-    45fa:	c3                   	ret    
-
-000045fb <printf>:
-
-// Print to the given fd. Only understands %d, %x, %p, %s.
-void
-printf(int fd, char *fmt, ...)
-{
-    45fb:	55                   	push   %ebp
-    45fc:	89 e5                	mov    %esp,%ebp
-    45fe:	83 ec 38             	sub    $0x38,%esp
-  char *s;
-  int c, i, state;
-  uint *ap;
-
-  state = 0;
-    4601:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
-  ap = (uint*)(void*)&fmt + 1;
-    4608:	8d 45 0c             	lea    0xc(%ebp),%eax
-    460b:	83 c0 04             	add    $0x4,%eax
-    460e:	89 45 e8             	mov    %eax,-0x18(%ebp)
-  for(i = 0; fmt[i]; i++){
-    4611:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
-    4618:	e9 7d 01 00 00       	jmp    479a <printf+0x19f>
-    c = fmt[i] & 0xff;
-    461d:	8b 55 0c             	mov    0xc(%ebp),%edx
-    4620:	8b 45 f0             	mov    -0x10(%ebp),%eax
-    4623:	01 d0                	add    %edx,%eax
-    4625:	0f b6 00             	movzbl (%eax),%eax
-    4628:	0f be c0             	movsbl %al,%eax
-    462b:	25 ff 00 00 00       	and    $0xff,%eax
-    4630:	89 45 e4             	mov    %eax,-0x1c(%ebp)
-    if(state == 0){
-    4633:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
-    4637:	75 2c                	jne    4665 <printf+0x6a>
-      if(c == '%'){
-    4639:	83 7d e4 25          	cmpl   $0x25,-0x1c(%ebp)
-    463d:	75 0c                	jne    464b <printf+0x50>
-        state = '%';
-    463f:	c7 45 ec 25 00 00 00 	movl   $0x25,-0x14(%ebp)
-    4646:	e9 4b 01 00 00       	jmp    4796 <printf+0x19b>
-      } else {
-        putc(fd, c);
-    464b:	8b 45 e4             	mov    -0x1c(%ebp),%eax
-    464e:	0f be c0             	movsbl %al,%eax
-    4651:	89 44 24 04          	mov    %eax,0x4(%esp)
-    4655:	8b 45 08             	mov    0x8(%ebp),%eax
-    4658:	89 04 24             	mov    %eax,(%esp)
-    465b:	e8 c4 fe ff ff       	call   4524 <putc>
-    4660:	e9 31 01 00 00       	jmp    4796 <printf+0x19b>
-      }
-    } else if(state == '%'){
-    4665:	83 7d ec 25          	cmpl   $0x25,-0x14(%ebp)
-    4669:	0f 85 27 01 00 00    	jne    4796 <printf+0x19b>
-      if(c == 'd'){
-    466f:	83 7d e4 64          	cmpl   $0x64,-0x1c(%ebp)
-    4673:	75 2d                	jne    46a2 <printf+0xa7>
-        printint(fd, *ap, 10, 1);
-    4675:	8b 45 e8             	mov    -0x18(%ebp),%eax
-    4678:	8b 00                	mov    (%eax),%eax
-    467a:	c7 44 24 0c 01 00 00 	movl   $0x1,0xc(%esp)
-    4681:	00 
-    4682:	c7 44 24 08 0a 00 00 	movl   $0xa,0x8(%esp)
-    4689:	00 
-    468a:	89 44 24 04          	mov    %eax,0x4(%esp)
-    468e:	8b 45 08             	mov    0x8(%ebp),%eax
-    4691:	89 04 24             	mov    %eax,(%esp)
-    4694:	e8 b3 fe ff ff       	call   454c <printint>
-        ap++;
-    4699:	83 45 e8 04          	addl   $0x4,-0x18(%ebp)
-    469d:	e9 ed 00 00 00       	jmp    478f <printf+0x194>
-      } else if(c == 'x' || c == 'p'){
-    46a2:	83 7d e4 78          	cmpl   $0x78,-0x1c(%ebp)
-    46a6:	74 06                	je     46ae <printf+0xb3>
-    46a8:	83 7d e4 70          	cmpl   $0x70,-0x1c(%ebp)
-    46ac:	75 2d                	jne    46db <printf+0xe0>
-        printint(fd, *ap, 16, 0);
-    46ae:	8b 45 e8             	mov    -0x18(%ebp),%eax
-    46b1:	8b 00                	mov    (%eax),%eax
-    46b3:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
-    46ba:	00 
-    46bb:	c7 44 24 08 10 00 00 	movl   $0x10,0x8(%esp)
-    46c2:	00 
-    46c3:	89 44 24 04          	mov    %eax,0x4(%esp)
-    46c7:	8b 45 08             	mov    0x8(%ebp),%eax
-    46ca:	89 04 24             	mov    %eax,(%esp)
-    46cd:	e8 7a fe ff ff       	call   454c <printint>
-        ap++;
-    46d2:	83 45 e8 04          	addl   $0x4,-0x18(%ebp)
-    46d6:	e9 b4 00 00 00       	jmp    478f <printf+0x194>
-      } else if(c == 's'){
-    46db:	83 7d e4 73          	cmpl   $0x73,-0x1c(%ebp)
-    46df:	75 46                	jne    4727 <printf+0x12c>
-        s = (char*)*ap;
-    46e1:	8b 45 e8             	mov    -0x18(%ebp),%eax
-    46e4:	8b 00                	mov    (%eax),%eax
-    46e6:	89 45 f4             	mov    %eax,-0xc(%ebp)
-        ap++;
-    46e9:	83 45 e8 04          	addl   $0x4,-0x18(%ebp)
-        if(s == 0)
-    46ed:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
-    46f1:	75 27                	jne    471a <printf+0x11f>
-          s = "(null)";
-    46f3:	c7 45 f4 8a 61 00 00 	movl   $0x618a,-0xc(%ebp)
-        while(*s != 0){
-    46fa:	eb 1e                	jmp    471a <printf+0x11f>
-          putc(fd, *s);
-    46fc:	8b 45 f4             	mov    -0xc(%ebp),%eax
-    46ff:	0f b6 00             	movzbl (%eax),%eax
-    4702:	0f be c0             	movsbl %al,%eax
-    4705:	89 44 24 04          	mov    %eax,0x4(%esp)
-    4709:	8b 45 08             	mov    0x8(%ebp),%eax
-    470c:	89 04 24             	mov    %eax,(%esp)
-    470f:	e8 10 fe ff ff       	call   4524 <putc>
-          s++;
-    4714:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
-    4718:	eb 01                	jmp    471b <printf+0x120>
-      } else if(c == 's'){
-        s = (char*)*ap;
-        ap++;
-        if(s == 0)
-          s = "(null)";
-        while(*s != 0){
-    471a:	90                   	nop
-    471b:	8b 45 f4             	mov    -0xc(%ebp),%eax
-    471e:	0f b6 00             	movzbl (%eax),%eax
-    4721:	84 c0                	test   %al,%al
-    4723:	75 d7                	jne    46fc <printf+0x101>
-    4725:	eb 68                	jmp    478f <printf+0x194>
-          putc(fd, *s);
-          s++;
-        }
-      } else if(c == 'c'){
-    4727:	83 7d e4 63          	cmpl   $0x63,-0x1c(%ebp)
-    472b:	75 1d                	jne    474a <printf+0x14f>
-        putc(fd, *ap);
-    472d:	8b 45 e8             	mov    -0x18(%ebp),%eax
-    4730:	8b 00                	mov    (%eax),%eax
-    4732:	0f be c0             	movsbl %al,%eax
-    4735:	89 44 24 04          	mov    %eax,0x4(%esp)
-    4739:	8b 45 08             	mov    0x8(%ebp),%eax
-    473c:	89 04 24             	mov    %eax,(%esp)
-    473f:	e8 e0 fd ff ff       	call   4524 <putc>
-        ap++;
-    4744:	83 45 e8 04          	addl   $0x4,-0x18(%ebp)
-    4748:	eb 45                	jmp    478f <printf+0x194>
-      } else if(c == '%'){
-    474a:	83 7d e4 25          	cmpl   $0x25,-0x1c(%ebp)
-    474e:	75 17                	jne    4767 <printf+0x16c>
-        putc(fd, c);
-    4750:	8b 45 e4             	mov    -0x1c(%ebp),%eax
-    4753:	0f be c0             	movsbl %al,%eax
-    4756:	89 44 24 04          	mov    %eax,0x4(%esp)
-    475a:	8b 45 08             	mov    0x8(%ebp),%eax
-    475d:	89 04 24             	mov    %eax,(%esp)
-    4760:	e8 bf fd ff ff       	call   4524 <putc>
-    4765:	eb 28                	jmp    478f <printf+0x194>
-      } else {
-        // Unknown % sequence.  Print it to draw attention.
-        putc(fd, '%');
-    4767:	c7 44 24 04 25 00 00 	movl   $0x25,0x4(%esp)
-    476e:	00 
-    476f:	8b 45 08             	mov    0x8(%ebp),%eax
-    4772:	89 04 24             	mov    %eax,(%esp)
-    4775:	e8 aa fd ff ff       	call   4524 <putc>
-        putc(fd, c);
-    477a:	8b 45 e4             	mov    -0x1c(%ebp),%eax
-    477d:	0f be c0             	movsbl %al,%eax
-    4780:	89 44 24 04          	mov    %eax,0x4(%esp)
-    4784:	8b 45 08             	mov    0x8(%ebp),%eax
-    4787:	89 04 24             	mov    %eax,(%esp)
-    478a:	e8 95 fd ff ff       	call   4524 <putc>
-      }
-      state = 0;
-    478f:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
-  int c, i, state;
-  uint *ap;
-
-  state = 0;
-  ap = (uint*)(void*)&fmt + 1;
-  for(i = 0; fmt[i]; i++){
-    4796:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)
-    479a:	8b 55 0c             	mov    0xc(%ebp),%edx
-    479d:	8b 45 f0             	mov    -0x10(%ebp),%eax
-    47a0:	01 d0                	add    %edx,%eax
-    47a2:	0f b6 00             	movzbl (%eax),%eax
-    47a5:	84 c0                	test   %al,%al
-    47a7:	0f 85 70 fe ff ff    	jne    461d <printf+0x22>
-        putc(fd, c);
-      }
-      state = 0;
-    }
-  }
-}
-    47ad:	c9                   	leave  
-    47ae:	c3                   	ret    
-    47af:	90                   	nop
-
-000047b0 <free>:
-static Header base;
-static Header *freep;
-
-void
-free(void *ap)
-{
-    47b0:	55                   	push   %ebp
-    47b1:	89 e5                	mov    %esp,%ebp
-    47b3:	83 ec 10             	sub    $0x10,%esp
-  Header *bp, *p;
-
-  bp = (Header*)ap - 1;
-    47b6:	8b 45 08             	mov    0x8(%ebp),%eax
-    47b9:	83 e8 08             	sub    $0x8,%eax
-    47bc:	89 45 f8             	mov    %eax,-0x8(%ebp)
-  for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
-    47bf:	a1 28 69 00 00       	mov    0x6928,%eax
-    47c4:	89 45 fc             	mov    %eax,-0x4(%ebp)
-    47c7:	eb 24                	jmp    47ed <free+0x3d>
-    if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
-    47c9:	8b 45 fc             	mov    -0x4(%ebp),%eax
-    47cc:	8b 00                	mov    (%eax),%eax
-    47ce:	3b 45 fc             	cmp    -0x4(%ebp),%eax
-    47d1:	77 12                	ja     47e5 <free+0x35>
-    47d3:	8b 45 f8             	mov    -0x8(%ebp),%eax
-    47d6:	3b 45 fc             	cmp    -0x4(%ebp),%eax
-    47d9:	77 24                	ja     47ff <free+0x4f>
-    47db:	8b 45 fc             	mov    -0x4(%ebp),%eax
-    47de:	8b 00                	mov    (%eax),%eax
-    47e0:	3b 45 f8             	cmp    -0x8(%ebp),%eax
-    47e3:	77 1a                	ja     47ff <free+0x4f>
-free(void *ap)
-{
-  Header *bp, *p;
-
-  bp = (Header*)ap - 1;
-  for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
-    47e5:	8b 45 fc             	mov    -0x4(%ebp),%eax
-    47e8:	8b 00                	mov    (%eax),%eax
-    47ea:	89 45 fc             	mov    %eax,-0x4(%ebp)
-    47ed:	8b 45 f8             	mov    -0x8(%ebp),%eax
-    47f0:	3b 45 fc             	cmp    -0x4(%ebp),%eax
-    47f3:	76 d4                	jbe    47c9 <free+0x19>
-    47f5:	8b 45 fc             	mov    -0x4(%ebp),%eax
-    47f8:	8b 00                	mov    (%eax),%eax
-    47fa:	3b 45 f8             	cmp    -0x8(%ebp),%eax
-    47fd:	76 ca                	jbe    47c9 <free+0x19>
-    if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
-      break;
-  if(bp + bp->s.size == p->s.ptr){
-    47ff:	8b 45 f8             	mov    -0x8(%ebp),%eax
-    4802:	8b 40 04             	mov    0x4(%eax),%eax
-    4805:	c1 e0 03             	shl    $0x3,%eax
-    4808:	89 c2                	mov    %eax,%edx
-    480a:	03 55 f8             	add    -0x8(%ebp),%edx
-    480d:	8b 45 fc             	mov    -0x4(%ebp),%eax
-    4810:	8b 00                	mov    (%eax),%eax
-    4812:	39 c2                	cmp    %eax,%edx
-    4814:	75 24                	jne    483a <free+0x8a>
-    bp->s.size += p->s.ptr->s.size;
-    4816:	8b 45 f8             	mov    -0x8(%ebp),%eax
-    4819:	8b 50 04             	mov    0x4(%eax),%edx
-    481c:	8b 45 fc             	mov    -0x4(%ebp),%eax
-    481f:	8b 00                	mov    (%eax),%eax
-    4821:	8b 40 04             	mov    0x4(%eax),%eax
-    4824:	01 c2                	add    %eax,%edx
-    4826:	8b 45 f8             	mov    -0x8(%ebp),%eax
-    4829:	89 50 04             	mov    %edx,0x4(%eax)
-    bp->s.ptr = p->s.ptr->s.ptr;
-    482c:	8b 45 fc             	mov    -0x4(%ebp),%eax
-    482f:	8b 00                	mov    (%eax),%eax
-    4831:	8b 10                	mov    (%eax),%edx
-    4833:	8b 45 f8             	mov    -0x8(%ebp),%eax
-    4836:	89 10                	mov    %edx,(%eax)
-    4838:	eb 0a                	jmp    4844 <free+0x94>
-  } else
-    bp->s.ptr = p->s.ptr;
-    483a:	8b 45 fc             	mov    -0x4(%ebp),%eax
-    483d:	8b 10                	mov    (%eax),%edx
-    483f:	8b 45 f8             	mov    -0x8(%ebp),%eax
-    4842:	89 10                	mov    %edx,(%eax)
-  if(p + p->s.size == bp){
-    4844:	8b 45 fc             	mov    -0x4(%ebp),%eax
-    4847:	8b 40 04             	mov    0x4(%eax),%eax
-    484a:	c1 e0 03             	shl    $0x3,%eax
-    484d:	03 45 fc             	add    -0x4(%ebp),%eax
-    4850:	3b 45 f8             	cmp    -0x8(%ebp),%eax
-    4853:	75 20                	jne    4875 <free+0xc5>
-    p->s.size += bp->s.size;
-    4855:	8b 45 fc             	mov    -0x4(%ebp),%eax
-    4858:	8b 50 04             	mov    0x4(%eax),%edx
-    485b:	8b 45 f8             	mov    -0x8(%ebp),%eax
-    485e:	8b 40 04             	mov    0x4(%eax),%eax
-    4861:	01 c2                	add    %eax,%edx
-    4863:	8b 45 fc             	mov    -0x4(%ebp),%eax
-    4866:	89 50 04             	mov    %edx,0x4(%eax)
-    p->s.ptr = bp->s.ptr;
-    4869:	8b 45 f8             	mov    -0x8(%ebp),%eax
-    486c:	8b 10                	mov    (%eax),%edx
-    486e:	8b 45 fc             	mov    -0x4(%ebp),%eax
-    4871:	89 10                	mov    %edx,(%eax)
-    4873:	eb 08                	jmp    487d <free+0xcd>
-  } else
-    p->s.ptr = bp;
-    4875:	8b 45 fc             	mov    -0x4(%ebp),%eax
-    4878:	8b 55 f8             	mov    -0x8(%ebp),%edx
-    487b:	89 10                	mov    %edx,(%eax)
-  freep = p;
-    487d:	8b 45 fc             	mov    -0x4(%ebp),%eax
-    4880:	a3 28 69 00 00       	mov    %eax,0x6928
-}
-    4885:	c9                   	leave  
-    4886:	c3                   	ret    
-
-00004887 <morecore>:
-
-static Header*
-morecore(uint nu)
-{
-    4887:	55                   	push   %ebp
-    4888:	89 e5                	mov    %esp,%ebp
-    488a:	83 ec 28             	sub    $0x28,%esp
-  char *p;
-  Header *hp;
-
-  if(nu < 4096)
-    488d:	81 7d 08 ff 0f 00 00 	cmpl   $0xfff,0x8(%ebp)
-    4894:	77 07                	ja     489d <morecore+0x16>
-    nu = 4096;
-    4896:	c7 45 08 00 10 00 00 	movl   $0x1000,0x8(%ebp)
-  p = sbrk(nu * sizeof(Header));
-    489d:	8b 45 08             	mov    0x8(%ebp),%eax
-    48a0:	c1 e0 03             	shl    $0x3,%eax
-    48a3:	89 04 24             	mov    %eax,(%esp)
-    48a6:	e8 39 fc ff ff       	call   44e4 <sbrk>
-    48ab:	89 45 f4             	mov    %eax,-0xc(%ebp)
-  if(p == (char*)-1)
-    48ae:	83 7d f4 ff          	cmpl   $0xffffffff,-0xc(%ebp)
-    48b2:	75 07                	jne    48bb <morecore+0x34>
-    return 0;
-    48b4:	b8 00 00 00 00       	mov    $0x0,%eax
-    48b9:	eb 22                	jmp    48dd <morecore+0x56>
-  hp = (Header*)p;
-    48bb:	8b 45 f4             	mov    -0xc(%ebp),%eax
-    48be:	89 45 f0             	mov    %eax,-0x10(%ebp)
-  hp->s.size = nu;
-    48c1:	8b 45 f0             	mov    -0x10(%ebp),%eax
-    48c4:	8b 55 08             	mov    0x8(%ebp),%edx
-    48c7:	89 50 04             	mov    %edx,0x4(%eax)
-  free((void*)(hp + 1));
-    48ca:	8b 45 f0             	mov    -0x10(%ebp),%eax
-    48cd:	83 c0 08             	add    $0x8,%eax
-    48d0:	89 04 24             	mov    %eax,(%esp)
-    48d3:	e8 d8 fe ff ff       	call   47b0 <free>
-  return freep;
-    48d8:	a1 28 69 00 00       	mov    0x6928,%eax
-}
-    48dd:	c9                   	leave  
-    48de:	c3                   	ret    
-
-000048df <malloc>:
-
-void*
-malloc(uint nbytes)
-{
-    48df:	55                   	push   %ebp
-    48e0:	89 e5                	mov    %esp,%ebp
-    48e2:	83 ec 28             	sub    $0x28,%esp
-  Header *p, *prevp;
-  uint nunits;
-
-  nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;
-    48e5:	8b 45 08             	mov    0x8(%ebp),%eax
-    48e8:	83 c0 07             	add    $0x7,%eax
-    48eb:	c1 e8 03             	shr    $0x3,%eax
-    48ee:	83 c0 01             	add    $0x1,%eax
-    48f1:	89 45 ec             	mov    %eax,-0x14(%ebp)
-  if((prevp = freep) == 0){
-    48f4:	a1 28 69 00 00       	mov    0x6928,%eax
-    48f9:	89 45 f0             	mov    %eax,-0x10(%ebp)
-    48fc:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
-    4900:	75 23                	jne    4925 <malloc+0x46>
-    base.s.ptr = freep = prevp = &base;
-    4902:	c7 45 f0 20 69 00 00 	movl   $0x6920,-0x10(%ebp)
-    4909:	8b 45 f0             	mov    -0x10(%ebp),%eax
-    490c:	a3 28 69 00 00       	mov    %eax,0x6928
-    4911:	a1 28 69 00 00       	mov    0x6928,%eax
-    4916:	a3 20 69 00 00       	mov    %eax,0x6920
-    base.s.size = 0;
-    491b:	c7 05 24 69 00 00 00 	movl   $0x0,0x6924
-    4922:	00 00 00 
-  }
-  for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
-    4925:	8b 45 f0             	mov    -0x10(%ebp),%eax
-    4928:	8b 00                	mov    (%eax),%eax
-    492a:	89 45 f4             	mov    %eax,-0xc(%ebp)
-    if(p->s.size >= nunits){
-    492d:	8b 45 f4             	mov    -0xc(%ebp),%eax
-    4930:	8b 40 04             	mov    0x4(%eax),%eax
-    4933:	3b 45 ec             	cmp    -0x14(%ebp),%eax
-    4936:	72 4d                	jb     4985 <malloc+0xa6>
-      if(p->s.size == nunits)
-    4938:	8b 45 f4             	mov    -0xc(%ebp),%eax
-    493b:	8b 40 04             	mov    0x4(%eax),%eax
-    493e:	3b 45 ec             	cmp    -0x14(%ebp),%eax
-    4941:	75 0c                	jne    494f <malloc+0x70>
-        prevp->s.ptr = p->s.ptr;
-    4943:	8b 45 f4             	mov    -0xc(%ebp),%eax
-    4946:	8b 10                	mov    (%eax),%edx
-    4948:	8b 45 f0             	mov    -0x10(%ebp),%eax
-    494b:	89 10                	mov    %edx,(%eax)
-    494d:	eb 26                	jmp    4975 <malloc+0x96>
-      else {
-        p->s.size -= nunits;
-    494f:	8b 45 f4             	mov    -0xc(%ebp),%eax
-    4952:	8b 40 04             	mov    0x4(%eax),%eax
-    4955:	89 c2                	mov    %eax,%edx
-    4957:	2b 55 ec             	sub    -0x14(%ebp),%edx
-    495a:	8b 45 f4             	mov    -0xc(%ebp),%eax
-    495d:	89 50 04             	mov    %edx,0x4(%eax)
-        p += p->s.size;
-    4960:	8b 45 f4             	mov    -0xc(%ebp),%eax
-    4963:	8b 40 04             	mov    0x4(%eax),%eax
-    4966:	c1 e0 03             	shl    $0x3,%eax
-    4969:	01 45 f4             	add    %eax,-0xc(%ebp)
-        p->s.size = nunits;
-    496c:	8b 45 f4             	mov    -0xc(%ebp),%eax
-    496f:	8b 55 ec             	mov    -0x14(%ebp),%edx
-    4972:	89 50 04             	mov    %edx,0x4(%eax)
-      }
-      freep = prevp;
-    4975:	8b 45 f0             	mov    -0x10(%ebp),%eax
-    4978:	a3 28 69 00 00       	mov    %eax,0x6928
-      return (void*)(p + 1);
-    497d:	8b 45 f4             	mov    -0xc(%ebp),%eax
-    4980:	83 c0 08             	add    $0x8,%eax
-    4983:	eb 38                	jmp    49bd <malloc+0xde>
-    }
-    if(p == freep)
-    4985:	a1 28 69 00 00       	mov    0x6928,%eax
-    498a:	39 45 f4             	cmp    %eax,-0xc(%ebp)
-    498d:	75 1b                	jne    49aa <malloc+0xcb>
-      if((p = morecore(nunits)) == 0)
-    498f:	8b 45 ec             	mov    -0x14(%ebp),%eax
-    4992:	89 04 24             	mov    %eax,(%esp)
-    4995:	e8 ed fe ff ff       	call   4887 <morecore>
-    499a:	89 45 f4             	mov    %eax,-0xc(%ebp)
-    499d:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
-    49a1:	75 07                	jne    49aa <malloc+0xcb>
-        return 0;
-    49a3:	b8 00 00 00 00       	mov    $0x0,%eax
-    49a8:	eb 13                	jmp    49bd <malloc+0xde>
-  nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;
-  if((prevp = freep) == 0){
-    base.s.ptr = freep = prevp = &base;
-    base.s.size = 0;
-  }
-  for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
-    49aa:	8b 45 f4             	mov    -0xc(%ebp),%eax
-    49ad:	89 45 f0             	mov    %eax,-0x10(%ebp)
-    49b0:	8b 45 f4             	mov    -0xc(%ebp),%eax
-    49b3:	8b 00                	mov    (%eax),%eax
-    49b5:	89 45 f4             	mov    %eax,-0xc(%ebp)
-      return (void*)(p + 1);
-    }
-    if(p == freep)
-      if((p = morecore(nunits)) == 0)
-        return 0;
-  }
-    49b8:	e9 70 ff ff ff       	jmp    492d <malloc+0x4e>
-}
-    49bd:	c9                   	leave  
-    49be:	c3                   	ret    
diff --git a/xv6/usertests.c b/xv6/usertests.c
deleted file mode 100644
index 3b3189e..0000000
--- a/xv6/usertests.c
+++ /dev/null
@@ -1,1757 +0,0 @@
-#include "param.h"
-#include "types.h"
-#include "stat.h"
-#include "user.h"
-#include "fs.h"
-#include "fcntl.h"
-#include "syscall.h"
-#include "traps.h"
-#include "memlayout.h"
-
-char buf[8192];
-char name[3];
-char *echoargv[] = { "echo", "ALL", "TESTS", "PASSED", 0 };
-int stdout = 1;
-
-// does chdir() call iput(p->cwd) in a transaction?
-void
-iputtest(void)
-{
-  printf(stdout, "iput test\n");
-
-  if(mkdir("iputdir") < 0){
-    printf(stdout, "mkdir failed\n");
-    exit(EXIT_STATUS_DEFAULT);
-  }
-  if(chdir("iputdir") < 0){
-    printf(stdout, "chdir iputdir failed\n");
-    exit(EXIT_STATUS_DEFAULT);
-  }
-  if(unlink("../iputdir") < 0){
-    printf(stdout, "unlink ../iputdir failed\n");
-    exit(EXIT_STATUS_DEFAULT);
-  }
-  if(chdir("/") < 0){
-    printf(stdout, "chdir / failed\n");
-    exit(EXIT_STATUS_DEFAULT);
-  }
-  printf(stdout, "iput test ok\n");
-}
-
-// does exit(EXIT_STATUS_DEFAULT) call iput(p->cwd) in a transaction?
-void
-exitiputtest(void)
-{
-  int pid;
-
-  printf(stdout, "exitiput test\n");
-
-  pid = fork();
-  if(pid < 0){
-    printf(stdout, "fork failed\n");
-    exit(EXIT_STATUS_DEFAULT);
-  }
-  if(pid == 0){
-    if(mkdir("iputdir") < 0){
-      printf(stdout, "mkdir failed\n");
-      exit(EXIT_STATUS_DEFAULT);
-    }
-    if(chdir("iputdir") < 0){
-      printf(stdout, "child chdir failed\n");
-      exit(EXIT_STATUS_DEFAULT);
-    }
-    if(unlink("../iputdir") < 0){
-      printf(stdout, "unlink ../iputdir failed\n");
-      exit(EXIT_STATUS_DEFAULT);
-    }
-    exit(EXIT_STATUS_DEFAULT);
-  }
-  wait(0);
-  printf(stdout, "exitiput test ok\n");
-}
-
-// does the error path in open() for attempt to write a
-// directory call iput() in a transaction?
-// needs a hacked kernel that pauses just after the namei()
-// call in sys_open():
-//    if((ip = namei(path)) == 0)
-//      return -1;
-//    {
-//      int i;
-//      for(i = 0; i < 10000; i++)
-//        yield();
-//    }
-void
-openiputtest(void)
-{
-  int pid;
-
-  printf(stdout, "openiput test\n");
-  if(mkdir("oidir") < 0){
-    printf(stdout, "mkdir oidir failed\n");
-    exit(EXIT_STATUS_DEFAULT);
-  }
-  pid = fork();
-  if(pid < 0){
-    printf(stdout, "fork failed\n");
-    exit(EXIT_STATUS_DEFAULT);
-  }
-  if(pid == 0){
-    int fd = open("oidir", O_RDWR);
-    if(fd >= 0){
-      printf(stdout, "open directory for write succeeded\n");
-      exit(EXIT_STATUS_DEFAULT);
-    }
-    exit(EXIT_STATUS_DEFAULT);
-  }
-  sleep(1);
-  if(unlink("oidir") != 0){
-    printf(stdout, "unlink failed\n");
-    exit(EXIT_STATUS_DEFAULT);
-  }
-  wait(0);
-  printf(stdout, "openiput test ok\n");
-}
-
-// simple file system tests
-
-void
-opentest(void)
-{
-  int fd;
-
-  printf(stdout, "open test\n");
-  fd = open("echo", 0);
-  if(fd < 0){
-    printf(stdout, "open echo failed!\n");
-    exit(EXIT_STATUS_DEFAULT);
-  }
-  close(fd);
-  fd = open("doesnotexist", 0);
-  if(fd >= 0){
-    printf(stdout, "open doesnotexist succeeded!\n");
-    exit(EXIT_STATUS_DEFAULT);
-  }
-  printf(stdout, "open test ok\n");
-}
-
-void
-writetest(void)
-{
-  int fd;
-  int i;
-
-  printf(stdout, "small file test\n");
-  fd = open("small", O_CREATE|O_RDWR);
-  if(fd >= 0){
-    printf(stdout, "creat small succeeded; ok\n");
-  } else {
-    printf(stdout, "error: creat small failed!\n");
-    exit(EXIT_STATUS_DEFAULT);
-  }
-  for(i = 0; i < 100; i++){
-    if(write(fd, "aaaaaaaaaa", 10) != 10){
-      printf(stdout, "error: write aa %d new file failed\n", i);
-      exit(EXIT_STATUS_DEFAULT);
-    }
-    if(write(fd, "bbbbbbbbbb", 10) != 10){
-      printf(stdout, "error: write bb %d new file failed\n", i);
-      exit(EXIT_STATUS_DEFAULT);
-    }
-  }
-  printf(stdout, "writes ok\n");
-  close(fd);
-  fd = open("small", O_RDONLY);
-  if(fd >= 0){
-    printf(stdout, "open small succeeded ok\n");
-  } else {
-    printf(stdout, "error: open small failed!\n");
-    exit(EXIT_STATUS_DEFAULT);
-  }
-  i = read(fd, buf, 2000);
-  if(i == 2000){
-    printf(stdout, "read succeeded ok\n");
-  } else {
-    printf(stdout, "read failed\n");
-    exit(EXIT_STATUS_DEFAULT);
-  }
-  close(fd);
-
-  if(unlink("small") < 0){
-    printf(stdout, "unlink small failed\n");
-    exit(EXIT_STATUS_DEFAULT);
-  }
-  printf(stdout, "small file test ok\n");
-}
-
-void
-writetest1(void)
-{
-  int i, fd, n;
-
-  printf(stdout, "big files test\n");
-
-  fd = open("big", O_CREATE|O_RDWR);
-  if(fd < 0){
-    printf(stdout, "error: creat big failed!\n");
-    exit(EXIT_STATUS_DEFAULT);
-  }
-
-  for(i = 0; i < MAXFILE; i++){
-    ((int*)buf)[0] = i;
-    if(write(fd, buf, 512) != 512){
-      printf(stdout, "error: write big file failed\n", i);
-      exit(EXIT_STATUS_DEFAULT);
-    }
-  }
-
-  close(fd);
-
-  fd = open("big", O_RDONLY);
-  if(fd < 0){
-    printf(stdout, "error: open big failed!\n");
-    exit(EXIT_STATUS_DEFAULT);
-  }
-
-  n = 0;
-  for(;;){
-    i = read(fd, buf, 512);
-    if(i == 0){
-      if(n == MAXFILE - 1){
-        printf(stdout, "read only %d blocks from big", n);
-        exit(EXIT_STATUS_DEFAULT);
-      }
-      break;
-    } else if(i != 512){
-      printf(stdout, "read failed %d\n", i);
-      exit(EXIT_STATUS_DEFAULT);
-    }
-    if(((int*)buf)[0] != n){
-      printf(stdout, "read content of block %d is %d\n",
-             n, ((int*)buf)[0]);
-      exit(EXIT_STATUS_DEFAULT);
-    }
-    n++;
-  }
-  close(fd);
-  if(unlink("big") < 0){
-    printf(stdout, "unlink big failed\n");
-    exit(EXIT_STATUS_DEFAULT);
-  }
-  printf(stdout, "big files ok\n");
-}
-
-void
-createtest(void)
-{
-  int i, fd;
-
-  printf(stdout, "many creates, followed by unlink test\n");
-
-  name[0] = 'a';
-  name[2] = '\0';
-  for(i = 0; i < 52; i++){
-    name[1] = '0' + i;
-    fd = open(name, O_CREATE|O_RDWR);
-    close(fd);
-  }
-  name[0] = 'a';
-  name[2] = '\0';
-  for(i = 0; i < 52; i++){
-    name[1] = '0' + i;
-    unlink(name);
-  }
-  printf(stdout, "many creates, followed by unlink; ok\n");
-}
-
-void dirtest(void)
-{
-  printf(stdout, "mkdir test\n");
-
-  if(mkdir("dir0") < 0){
-    printf(stdout, "mkdir failed\n");
-    exit(EXIT_STATUS_DEFAULT);
-  }
-
-  if(chdir("dir0") < 0){
-    printf(stdout, "chdir dir0 failed\n");
-    exit(EXIT_STATUS_DEFAULT);
-  }
-
-  if(chdir("..") < 0){
-    printf(stdout, "chdir .. failed\n");
-    exit(EXIT_STATUS_DEFAULT);
-  }
-
-  if(unlink("dir0") < 0){
-    printf(stdout, "unlink dir0 failed\n");
-    exit(EXIT_STATUS_DEFAULT);
-  }
-  printf(stdout, "mkdir test ok\n");
-}
-
-void
-exectest(void)
-{
-  printf(stdout, "exec test\n");
-  if(exec("echo", echoargv) < 0){
-    printf(stdout, "exec echo failed\n");
-    exit(EXIT_STATUS_DEFAULT);
-  }
-}
-
-// simple fork and pipe read/write
-
-void
-pipe1(void)
-{
-  int fds[2], pid;
-  int seq, i, n, cc, total;
-
-  if(pipe(fds) != 0){
-    printf(1, "pipe() failed\n");
-    exit(EXIT_STATUS_DEFAULT);
-  }
-  pid = fork();
-  seq = 0;
-  if(pid == 0){
-    close(fds[0]);
-    for(n = 0; n < 5; n++){
-      for(i = 0; i < 1033; i++)
-        buf[i] = seq++;
-      if(write(fds[1], buf, 1033) != 1033){
-        printf(1, "pipe1 oops 1\n");
-        exit(EXIT_STATUS_DEFAULT);
-      }
-    }
-    exit(EXIT_STATUS_DEFAULT);
-  } else if(pid > 0){
-    close(fds[1]);
-    total = 0;
-    cc = 1;
-    while((n = read(fds[0], buf, cc)) > 0){
-      for(i = 0; i < n; i++){
-        if((buf[i] & 0xff) != (seq++ & 0xff)){
-          printf(1, "pipe1 oops 2\n");
-          return;
-        }
-      }
-      total += n;
-      cc = cc * 2;
-      if(cc > sizeof(buf))
-        cc = sizeof(buf);
-    }
-    if(total != 5 * 1033){
-      printf(1, "pipe1 oops 3 total %d\n", total);
-      exit(EXIT_STATUS_DEFAULT);
-    }
-    close(fds[0]);
-    wait(0);
-  } else {
-    printf(1, "fork() failed\n");
-    exit(EXIT_STATUS_DEFAULT);
-  }
-  printf(1, "pipe1 ok\n");
-}
-
-// meant to be run w/ at most two CPUs
-void
-preempt(void)
-{
-  int pid1, pid2, pid3;
-  int pfds[2];
-
-  printf(1, "preempt: ");
-  pid1 = fork();
-  if(pid1 == 0)
-    for(;;)
-      ;
-
-  pid2 = fork();
-  if(pid2 == 0)
-    for(;;)
-      ;
-
-  pipe(pfds);
-  pid3 = fork();
-  if(pid3 == 0){
-    close(pfds[0]);
-    if(write(pfds[1], "x", 1) != 1)
-      printf(1, "preempt write error");
-    close(pfds[1]);
-    for(;;)
-      ;
-  }
-
-  close(pfds[1]);
-  if(read(pfds[0], buf, sizeof(buf)) != 1){
-    printf(1, "preempt read error");
-    return;
-  }
-  close(pfds[0]);
-  printf(1, "kill... ");
-  kill(pid1);
-  kill(pid2);
-  kill(pid3);
-  printf(1, "wait... ");
-  wait(0);
-  wait(0);
-  wait(0);
-  printf(1, "preempt ok\n");
-}
-
-// try to find any races between exit and wait
-void
-exitwait(void)
-{
-  int i, pid;
-
-  for(i = 0; i < 100; i++){
-    pid = fork();
-    if(pid < 0){
-      printf(1, "fork failed\n");
-      return;
-    }
-    if(pid){
-      if(wait(0) != pid){
-        printf(1, "wait wrong pid\n");
-        return;
-      }
-    } else {
-      exit(EXIT_STATUS_DEFAULT);
-    }
-  }
-  printf(1, "exitwait ok\n");
-}
-
-void
-mem(void)
-{
-  void *m1, *m2;
-  int pid, ppid;
-
-  printf(1, "mem test\n");
-  ppid = getpid();
-  if((pid = fork()) == 0){
-    m1 = 0;
-    while((m2 = malloc(10001)) != 0){
-      *(char**)m2 = m1;
-      m1 = m2;
-    }
-    while(m1){
-      m2 = *(char**)m1;
-      free(m1);
-      m1 = m2;
-    }
-    m1 = malloc(1024*20);
-    if(m1 == 0){
-      printf(1, "couldn't allocate mem?!!\n");
-      kill(ppid);
-      exit(EXIT_STATUS_DEFAULT);
-    }
-    free(m1);
-    printf(1, "mem ok\n");
-    exit(EXIT_STATUS_DEFAULT);
-  } else {
-    wait(0);
-  }
-}
-
-// More file system tests
-
-// two processes write to the same file descriptor
-// is the offset shared? does inode locking work?
-void
-sharedfd(void)
-{
-  int fd, pid, i, n, nc, np;
-  char buf[10];
-
-  printf(1, "sharedfd test\n");
-
-  unlink("sharedfd");
-  fd = open("sharedfd", O_CREATE|O_RDWR);
-  if(fd < 0){
-    printf(1, "fstests: cannot open sharedfd for writing");
-    return;
-  }
-  pid = fork();
-  memset(buf, pid==0?'c':'p', sizeof(buf));
-  for(i = 0; i < 1000; i++){
-    if(write(fd, buf, sizeof(buf)) != sizeof(buf)){
-      printf(1, "fstests: write sharedfd failed\n");
-      break;
-    }
-  }
-  if(pid == 0)
-    exit(EXIT_STATUS_DEFAULT);
-  else
-    wait(0);
-  close(fd);
-  fd = open("sharedfd", 0);
-  if(fd < 0){
-    printf(1, "fstests: cannot open sharedfd for reading\n");
-    return;
-  }
-  nc = np = 0;
-  while((n = read(fd, buf, sizeof(buf))) > 0){
-    for(i = 0; i < sizeof(buf); i++){
-      if(buf[i] == 'c')
-        nc++;
-      if(buf[i] == 'p')
-        np++;
-    }
-  }
-  close(fd);
-  unlink("sharedfd");
-  if(nc == 10000 && np == 10000){
-    printf(1, "sharedfd ok\n");
-  } else {
-    printf(1, "sharedfd oops %d %d\n", nc, np);
-    exit(EXIT_STATUS_DEFAULT);
-  }
-}
-
-// four processes write different files at the same
-// time, to test block allocation.
-void
-fourfiles(void)
-{
-  int fd, pid, i, j, n, total, pi;
-  char *names[] = { "f0", "f1", "f2", "f3" };
-  char *fname;
-
-  printf(1, "fourfiles test\n");
-
-  for(pi = 0; pi < 4; pi++){
-    fname = names[pi];
-    unlink(fname);
-
-    pid = fork();
-    if(pid < 0){
-      printf(1, "fork failed\n");
-      exit(EXIT_STATUS_DEFAULT);
-    }
-
-    if(pid == 0){
-      fd = open(fname, O_CREATE | O_RDWR);
-      if(fd < 0){
-        printf(1, "create failed\n");
-        exit(EXIT_STATUS_DEFAULT);
-      }
-      
-      memset(buf, '0'+pi, 512);
-      for(i = 0; i < 12; i++){
-        if((n = write(fd, buf, 500)) != 500){
-          printf(1, "write failed %d\n", n);
-          exit(EXIT_STATUS_DEFAULT);
-        }
-      }
-      exit(EXIT_STATUS_DEFAULT);
-    }
-  }
-
-  for(pi = 0; pi < 4; pi++){
-    wait(0);
-  }
-
-  for(i = 0; i < 2; i++){
-    fname = names[i];
-    fd = open(fname, 0);
-    total = 0;
-    while((n = read(fd, buf, sizeof(buf))) > 0){
-      for(j = 0; j < n; j++){
-        if(buf[j] != '0'+i){
-          printf(1, "wrong char\n");
-          exit(EXIT_STATUS_DEFAULT);
-        }
-      }
-      total += n;
-    }
-    close(fd);
-    if(total != 12*500){
-      printf(1, "wrong length %d\n", total);
-      exit(EXIT_STATUS_DEFAULT);
-    }
-    unlink(fname);
-  }
-
-  printf(1, "fourfiles ok\n");
-}
-
-// four processes create and delete different files in same directory
-void
-createdelete(void)
-{
-  enum { N = 20 };
-  int pid, i, fd, pi;
-  char name[32];
-
-  printf(1, "createdelete test\n");
-
-  for(pi = 0; pi < 4; pi++){
-    pid = fork();
-    if(pid < 0){
-      printf(1, "fork failed\n");
-      exit(EXIT_STATUS_DEFAULT);
-    }
-
-    if(pid == 0){
-      name[0] = 'p' + pi;
-      name[2] = '\0';
-      for(i = 0; i < N; i++){
-        name[1] = '0' + i;
-        fd = open(name, O_CREATE | O_RDWR);
-        if(fd < 0){
-          printf(1, "create failed\n");
-          exit(EXIT_STATUS_DEFAULT);
-        }
-        close(fd);
-        if(i > 0 && (i % 2 ) == 0){
-          name[1] = '0' + (i / 2);
-          if(unlink(name) < 0){
-            printf(1, "unlink failed\n");
-            exit(EXIT_STATUS_DEFAULT);
-          }
-        }
-      }
-      exit(EXIT_STATUS_DEFAULT);
-    }
-  }
-
-  for(pi = 0; pi < 4; pi++){
-    wait(0);
-  }
-
-  name[0] = name[1] = name[2] = 0;
-  for(i = 0; i < N; i++){
-    for(pi = 0; pi < 4; pi++){
-      name[0] = 'p' + pi;
-      name[1] = '0' + i;
-      fd = open(name, 0);
-      if((i == 0 || i >= N/2) && fd < 0){
-        printf(1, "oops createdelete %s didn't exist\n", name);
-        exit(EXIT_STATUS_DEFAULT);
-      } else if((i >= 1 && i < N/2) && fd >= 0){
-        printf(1, "oops createdelete %s did exist\n", name);
-        exit(EXIT_STATUS_DEFAULT);
-      }
-      if(fd >= 0)
-        close(fd);
-    }
-  }
-
-  for(i = 0; i < N; i++){
-    for(pi = 0; pi < 4; pi++){
-      name[0] = 'p' + i;
-      name[1] = '0' + i;
-      unlink(name);
-    }
-  }
-
-  printf(1, "createdelete ok\n");
-}
-
-// can I unlink a file and still read it?
-void
-unlinkread(void)
-{
-  int fd, fd1;
-
-  printf(1, "unlinkread test\n");
-  fd = open("unlinkread", O_CREATE | O_RDWR);
-  if(fd < 0){
-    printf(1, "create unlinkread failed\n");
-    exit(EXIT_STATUS_DEFAULT);
-  }
-  write(fd, "hello", 5);
-  close(fd);
-
-  fd = open("unlinkread", O_RDWR);
-  if(fd < 0){
-    printf(1, "open unlinkread failed\n");
-    exit(EXIT_STATUS_DEFAULT);
-  }
-  if(unlink("unlinkread") != 0){
-    printf(1, "unlink unlinkread failed\n");
-    exit(EXIT_STATUS_DEFAULT);
-  }
-
-  fd1 = open("unlinkread", O_CREATE | O_RDWR);
-  write(fd1, "yyy", 3);
-  close(fd1);
-
-  if(read(fd, buf, sizeof(buf)) != 5){
-    printf(1, "unlinkread read failed");
-    exit(EXIT_STATUS_DEFAULT);
-  }
-  if(buf[0] != 'h'){
-    printf(1, "unlinkread wrong data\n");
-    exit(EXIT_STATUS_DEFAULT);
-  }
-  if(write(fd, buf, 10) != 10){
-    printf(1, "unlinkread write failed\n");
-    exit(EXIT_STATUS_DEFAULT);
-  }
-  close(fd);
-  unlink("unlinkread");
-  printf(1, "unlinkread ok\n");
-}
-
-void
-linktest(void)
-{
-  int fd;
-
-  printf(1, "linktest\n");
-
-  unlink("lf1");
-  unlink("lf2");
-
-  fd = open("lf1", O_CREATE|O_RDWR);
-  if(fd < 0){
-    printf(1, "create lf1 failed\n");
-    exit(EXIT_STATUS_DEFAULT);
-  }
-  if(write(fd, "hello", 5) != 5){
-    printf(1, "write lf1 failed\n");
-    exit(EXIT_STATUS_DEFAULT);
-  }
-  close(fd);
-
-  if(link("lf1", "lf2") < 0){
-    printf(1, "link lf1 lf2 failed\n");
-    exit(EXIT_STATUS_DEFAULT);
-  }
-  unlink("lf1");
-
-  if(open("lf1", 0) >= 0){
-    printf(1, "unlinked lf1 but it is still there!\n");
-    exit(EXIT_STATUS_DEFAULT);
-  }
-
-  fd = open("lf2", 0);
-  if(fd < 0){
-    printf(1, "open lf2 failed\n");
-    exit(EXIT_STATUS_DEFAULT);
-  }
-  if(read(fd, buf, sizeof(buf)) != 5){
-    printf(1, "read lf2 failed\n");
-    exit(EXIT_STATUS_DEFAULT);
-  }
-  close(fd);
-
-  if(link("lf2", "lf2") >= 0){
-    printf(1, "link lf2 lf2 succeeded! oops\n");
-    exit(EXIT_STATUS_DEFAULT);
-  }
-
-  unlink("lf2");
-  if(link("lf2", "lf1") >= 0){
-    printf(1, "link non-existant succeeded! oops\n");
-    exit(EXIT_STATUS_DEFAULT);
-  }
-
-  if(link(".", "lf1") >= 0){
-    printf(1, "link . lf1 succeeded! oops\n");
-    exit(EXIT_STATUS_DEFAULT);
-  }
-
-  printf(1, "linktest ok\n");
-}
-
-// test concurrent create/link/unlink of the same file
-void
-concreate(void)
-{
-  char file[3];
-  int i, pid, n, fd;
-  char fa[40];
-  struct {
-    ushort inum;
-    char name[14];
-  } de;
-
-  printf(1, "concreate test\n");
-  file[0] = 'C';
-  file[2] = '\0';
-  for(i = 0; i < 40; i++){
-    file[1] = '0' + i;
-    unlink(file);
-    pid = fork();
-    if(pid && (i % 3) == 1){
-      link("C0", file);
-    } else if(pid == 0 && (i % 5) == 1){
-      link("C0", file);
-    } else {
-      fd = open(file, O_CREATE | O_RDWR);
-      if(fd < 0){
-        printf(1, "concreate create %s failed\n", file);
-        exit(EXIT_STATUS_DEFAULT);
-      }
-      close(fd);
-    }
-    if(pid == 0)
-      exit(EXIT_STATUS_DEFAULT);
-    else
-      wait(0);
-  }
-
-  memset(fa, 0, sizeof(fa));
-  fd = open(".", 0);
-  n = 0;
-  while(read(fd, &de, sizeof(de)) > 0){
-    if(de.inum == 0)
-      continue;
-    if(de.name[0] == 'C' && de.name[2] == '\0'){
-      i = de.name[1] - '0';
-      if(i < 0 || i >= sizeof(fa)){
-        printf(1, "concreate weird file %s\n", de.name);
-        exit(EXIT_STATUS_DEFAULT);
-      }
-      if(fa[i]){
-        printf(1, "concreate duplicate file %s\n", de.name);
-        exit(EXIT_STATUS_DEFAULT);
-      }
-      fa[i] = 1;
-      n++;
-    }
-  }
-  close(fd);
-
-  if(n != 40){
-    printf(1, "concreate not enough files in directory listing\n");
-    exit(EXIT_STATUS_DEFAULT);
-  }
-
-  for(i = 0; i < 40; i++){
-    file[1] = '0' + i;
-    pid = fork();
-    if(pid < 0){
-      printf(1, "fork failed\n");
-      exit(EXIT_STATUS_DEFAULT);
-    }
-    if(((i % 3) == 0 && pid == 0) ||
-       ((i % 3) == 1 && pid != 0)){
-      close(open(file, 0));
-      close(open(file, 0));
-      close(open(file, 0));
-      close(open(file, 0));
-    } else {
-      unlink(file);
-      unlink(file);
-      unlink(file);
-      unlink(file);
-    }
-    if(pid == 0)
-      exit(EXIT_STATUS_DEFAULT);
-    else
-      wait(0);
-  }
-
-  printf(1, "concreate ok\n");
-}
-
-// another concurrent link/unlink/create test,
-// to look for deadlocks.
-void
-linkunlink()
-{
-  int pid, i;
-
-  printf(1, "linkunlink test\n");
-
-  unlink("x");
-  pid = fork();
-  if(pid < 0){
-    printf(1, "fork failed\n");
-    exit(EXIT_STATUS_DEFAULT);
-  }
-
-  unsigned int x = (pid ? 1 : 97);
-  for(i = 0; i < 100; i++){
-    x = x * 1103515245 + 12345;
-    if((x % 3) == 0){
-      close(open("x", O_RDWR | O_CREATE));
-    } else if((x % 3) == 1){
-      link("cat", "x");
-    } else {
-      unlink("x");
-    }
-  }
-
-  if(pid)
-    wait(0);
-  else 
-    exit(EXIT_STATUS_DEFAULT);
-
-  printf(1, "linkunlink ok\n");
-}
-
-// directory that uses indirect blocks
-void
-bigdir(void)
-{
-  int i, fd;
-  char name[10];
-
-  printf(1, "bigdir test\n");
-  unlink("bd");
-
-  fd = open("bd", O_CREATE);
-  if(fd < 0){
-    printf(1, "bigdir create failed\n");
-    exit(EXIT_STATUS_DEFAULT);
-  }
-  close(fd);
-
-  for(i = 0; i < 500; i++){
-    name[0] = 'x';
-    name[1] = '0' + (i / 64);
-    name[2] = '0' + (i % 64);
-    name[3] = '\0';
-    if(link("bd", name) != 0){
-      printf(1, "bigdir link failed\n");
-      exit(EXIT_STATUS_DEFAULT);
-    }
-  }
-
-  unlink("bd");
-  for(i = 0; i < 500; i++){
-    name[0] = 'x';
-    name[1] = '0' + (i / 64);
-    name[2] = '0' + (i % 64);
-    name[3] = '\0';
-    if(unlink(name) != 0){
-      printf(1, "bigdir unlink failed");
-      exit(EXIT_STATUS_DEFAULT);
-    }
-  }
-
-  printf(1, "bigdir ok\n");
-}
-
-void
-subdir(void)
-{
-  int fd, cc;
-
-  printf(1, "subdir test\n");
-
-  unlink("ff");
-  if(mkdir("dd") != 0){
-    printf(1, "subdir mkdir dd failed\n");
-    exit(EXIT_STATUS_DEFAULT);
-  }
-
-  fd = open("dd/ff", O_CREATE | O_RDWR);
-  if(fd < 0){
-    printf(1, "create dd/ff failed\n");
-    exit(EXIT_STATUS_DEFAULT);
-  }
-  write(fd, "ff", 2);
-  close(fd);
-  
-  if(unlink("dd") >= 0){
-    printf(1, "unlink dd (non-empty dir) succeeded!\n");
-    exit(EXIT_STATUS_DEFAULT);
-  }
-
-  if(mkdir("/dd/dd") != 0){
-    printf(1, "subdir mkdir dd/dd failed\n");
-    exit(EXIT_STATUS_DEFAULT);
-  }
-
-  fd = open("dd/dd/ff", O_CREATE | O_RDWR);
-  if(fd < 0){
-    printf(1, "create dd/dd/ff failed\n");
-    exit(EXIT_STATUS_DEFAULT);
-  }
-  write(fd, "FF", 2);
-  close(fd);
-
-  fd = open("dd/dd/../ff", 0);
-  if(fd < 0){
-    printf(1, "open dd/dd/../ff failed\n");
-    exit(EXIT_STATUS_DEFAULT);
-  }
-  cc = read(fd, buf, sizeof(buf));
-  if(cc != 2 || buf[0] != 'f'){
-    printf(1, "dd/dd/../ff wrong content\n");
-    exit(EXIT_STATUS_DEFAULT);
-  }
-  close(fd);
-
-  if(link("dd/dd/ff", "dd/dd/ffff") != 0){
-    printf(1, "link dd/dd/ff dd/dd/ffff failed\n");
-    exit(EXIT_STATUS_DEFAULT);
-  }
-
-  if(unlink("dd/dd/ff") != 0){
-    printf(1, "unlink dd/dd/ff failed\n");
-    exit(EXIT_STATUS_DEFAULT);
-  }
-  if(open("dd/dd/ff", O_RDONLY) >= 0){
-    printf(1, "open (unlinked) dd/dd/ff succeeded\n");
-    exit(EXIT_STATUS_DEFAULT);
-  }
-
-  if(chdir("dd") != 0){
-    printf(1, "chdir dd failed\n");
-    exit(EXIT_STATUS_DEFAULT);
-  }
-  if(chdir("dd/../../dd") != 0){
-    printf(1, "chdir dd/../../dd failed\n");
-    exit(EXIT_STATUS_DEFAULT);
-  }
-  if(chdir("dd/../../../dd") != 0){
-    printf(1, "chdir dd/../../dd failed\n");
-    exit(EXIT_STATUS_DEFAULT);
-  }
-  if(chdir("./..") != 0){
-    printf(1, "chdir ./.. failed\n");
-    exit(EXIT_STATUS_DEFAULT);
-  }
-
-  fd = open("dd/dd/ffff", 0);
-  if(fd < 0){
-    printf(1, "open dd/dd/ffff failed\n");
-    exit(EXIT_STATUS_DEFAULT);
-  }
-  if(read(fd, buf, sizeof(buf)) != 2){
-    printf(1, "read dd/dd/ffff wrong len\n");
-    exit(EXIT_STATUS_DEFAULT);
-  }
-  close(fd);
-
-  if(open("dd/dd/ff", O_RDONLY) >= 0){
-    printf(1, "open (unlinked) dd/dd/ff succeeded!\n");
-    exit(EXIT_STATUS_DEFAULT);
-  }
-
-  if(open("dd/ff/ff", O_CREATE|O_RDWR) >= 0){
-    printf(1, "create dd/ff/ff succeeded!\n");
-    exit(EXIT_STATUS_DEFAULT);
-  }
-  if(open("dd/xx/ff", O_CREATE|O_RDWR) >= 0){
-    printf(1, "create dd/xx/ff succeeded!\n");
-    exit(EXIT_STATUS_DEFAULT);
-  }
-  if(open("dd", O_CREATE) >= 0){
-    printf(1, "create dd succeeded!\n");
-    exit(EXIT_STATUS_DEFAULT);
-  }
-  if(open("dd", O_RDWR) >= 0){
-    printf(1, "open dd rdwr succeeded!\n");
-    exit(EXIT_STATUS_DEFAULT);
-  }
-  if(open("dd", O_WRONLY) >= 0){
-    printf(1, "open dd wronly succeeded!\n");
-    exit(EXIT_STATUS_DEFAULT);
-  }
-  if(link("dd/ff/ff", "dd/dd/xx") == 0){
-    printf(1, "link dd/ff/ff dd/dd/xx succeeded!\n");
-    exit(EXIT_STATUS_DEFAULT);
-  }
-  if(link("dd/xx/ff", "dd/dd/xx") == 0){
-    printf(1, "link dd/xx/ff dd/dd/xx succeeded!\n");
-    exit(EXIT_STATUS_DEFAULT);
-  }
-  if(link("dd/ff", "dd/dd/ffff") == 0){
-    printf(1, "link dd/ff dd/dd/ffff succeeded!\n");
-    exit(EXIT_STATUS_DEFAULT);
-  }
-  if(mkdir("dd/ff/ff") == 0){
-    printf(1, "mkdir dd/ff/ff succeeded!\n");
-    exit(EXIT_STATUS_DEFAULT);
-  }
-  if(mkdir("dd/xx/ff") == 0){
-    printf(1, "mkdir dd/xx/ff succeeded!\n");
-    exit(EXIT_STATUS_DEFAULT);
-  }
-  if(mkdir("dd/dd/ffff") == 0){
-    printf(1, "mkdir dd/dd/ffff succeeded!\n");
-    exit(EXIT_STATUS_DEFAULT);
-  }
-  if(unlink("dd/xx/ff") == 0){
-    printf(1, "unlink dd/xx/ff succeeded!\n");
-    exit(EXIT_STATUS_DEFAULT);
-  }
-  if(unlink("dd/ff/ff") == 0){
-    printf(1, "unlink dd/ff/ff succeeded!\n");
-    exit(EXIT_STATUS_DEFAULT);
-  }
-  if(chdir("dd/ff") == 0){
-    printf(1, "chdir dd/ff succeeded!\n");
-    exit(EXIT_STATUS_DEFAULT);
-  }
-  if(chdir("dd/xx") == 0){
-    printf(1, "chdir dd/xx succeeded!\n");
-    exit(EXIT_STATUS_DEFAULT);
-  }
-
-  if(unlink("dd/dd/ffff") != 0){
-    printf(1, "unlink dd/dd/ff failed\n");
-    exit(EXIT_STATUS_DEFAULT);
-  }
-  if(unlink("dd/ff") != 0){
-    printf(1, "unlink dd/ff failed\n");
-    exit(EXIT_STATUS_DEFAULT);
-  }
-  if(unlink("dd") == 0){
-    printf(1, "unlink non-empty dd succeeded!\n");
-    exit(EXIT_STATUS_DEFAULT);
-  }
-  if(unlink("dd/dd") < 0){
-    printf(1, "unlink dd/dd failed\n");
-    exit(EXIT_STATUS_DEFAULT);
-  }
-  if(unlink("dd") < 0){
-    printf(1, "unlink dd failed\n");
-    exit(EXIT_STATUS_DEFAULT);
-  }
-
-  printf(1, "subdir ok\n");
-}
-
-// test writes that are larger than the log.
-void
-bigwrite(void)
-{
-  int fd, sz;
-
-  printf(1, "bigwrite test\n");
-
-  unlink("bigwrite");
-  for(sz = 499; sz < 12*512; sz += 471){
-    fd = open("bigwrite", O_CREATE | O_RDWR);
-    if(fd < 0){
-      printf(1, "cannot create bigwrite\n");
-      exit(EXIT_STATUS_DEFAULT);
-    }
-    int i;
-    for(i = 0; i < 2; i++){
-      int cc = write(fd, buf, sz);
-      if(cc != sz){
-        printf(1, "write(%d) ret %d\n", sz, cc);
-        exit(EXIT_STATUS_DEFAULT);
-      }
-    }
-    close(fd);
-    unlink("bigwrite");
-  }
-
-  printf(1, "bigwrite ok\n");
-}
-
-void
-bigfile(void)
-{
-  int fd, i, total, cc;
-
-  printf(1, "bigfile test\n");
-
-  unlink("bigfile");
-  fd = open("bigfile", O_CREATE | O_RDWR);
-  if(fd < 0){
-    printf(1, "cannot create bigfile");
-    exit(EXIT_STATUS_DEFAULT);
-  }
-  for(i = 0; i < 20; i++){
-    memset(buf, i, 600);
-    if(write(fd, buf, 600) != 600){
-      printf(1, "write bigfile failed\n");
-      exit(EXIT_STATUS_DEFAULT);
-    }
-  }
-  close(fd);
-
-  fd = open("bigfile", 0);
-  if(fd < 0){
-    printf(1, "cannot open bigfile\n");
-    exit(EXIT_STATUS_DEFAULT);
-  }
-  total = 0;
-  for(i = 0; ; i++){
-    cc = read(fd, buf, 300);
-    if(cc < 0){
-      printf(1, "read bigfile failed\n");
-      exit(EXIT_STATUS_DEFAULT);
-    }
-    if(cc == 0)
-      break;
-    if(cc != 300){
-      printf(1, "short read bigfile\n");
-      exit(EXIT_STATUS_DEFAULT);
-    }
-    if(buf[0] != i/2 || buf[299] != i/2){
-      printf(1, "read bigfile wrong data\n");
-      exit(EXIT_STATUS_DEFAULT);
-    }
-    total += cc;
-  }
-  close(fd);
-  if(total != 20*600){
-    printf(1, "read bigfile wrong total\n");
-    exit(EXIT_STATUS_DEFAULT);
-  }
-  unlink("bigfile");
-
-  printf(1, "bigfile test ok\n");
-}
-
-void
-fourteen(void)
-{
-  int fd;
-
-  // DIRSIZ is 14.
-  printf(1, "fourteen test\n");
-
-  if(mkdir("12345678901234") != 0){
-    printf(1, "mkdir 12345678901234 failed\n");
-    exit(EXIT_STATUS_DEFAULT);
-  }
-  if(mkdir("12345678901234/123456789012345") != 0){
-    printf(1, "mkdir 12345678901234/123456789012345 failed\n");
-    exit(EXIT_STATUS_DEFAULT);
-  }
-  fd = open("123456789012345/123456789012345/123456789012345", O_CREATE);
-  if(fd < 0){
-    printf(1, "create 123456789012345/123456789012345/123456789012345 failed\n");
-    exit(EXIT_STATUS_DEFAULT);
-  }
-  close(fd);
-  fd = open("12345678901234/12345678901234/12345678901234", 0);
-  if(fd < 0){
-    printf(1, "open 12345678901234/12345678901234/12345678901234 failed\n");
-    exit(EXIT_STATUS_DEFAULT);
-  }
-  close(fd);
-
-  if(mkdir("12345678901234/12345678901234") == 0){
-    printf(1, "mkdir 12345678901234/12345678901234 succeeded!\n");
-    exit(EXIT_STATUS_DEFAULT);
-  }
-  if(mkdir("123456789012345/12345678901234") == 0){
-    printf(1, "mkdir 12345678901234/123456789012345 succeeded!\n");
-    exit(EXIT_STATUS_DEFAULT);
-  }
-
-  printf(1, "fourteen ok\n");
-}
-
-void
-rmdot(void)
-{
-  printf(1, "rmdot test\n");
-  if(mkdir("dots") != 0){
-    printf(1, "mkdir dots failed\n");
-    exit(EXIT_STATUS_DEFAULT);
-  }
-  if(chdir("dots") != 0){
-    printf(1, "chdir dots failed\n");
-    exit(EXIT_STATUS_DEFAULT);
-  }
-  if(unlink(".") == 0){
-    printf(1, "rm . worked!\n");
-    exit(EXIT_STATUS_DEFAULT);
-  }
-  if(unlink("..") == 0){
-    printf(1, "rm .. worked!\n");
-    exit(EXIT_STATUS_DEFAULT);
-  }
-  if(chdir("/") != 0){
-    printf(1, "chdir / failed\n");
-    exit(EXIT_STATUS_DEFAULT);
-  }
-  if(unlink("dots/.") == 0){
-    printf(1, "unlink dots/. worked!\n");
-    exit(EXIT_STATUS_DEFAULT);
-  }
-  if(unlink("dots/..") == 0){
-    printf(1, "unlink dots/.. worked!\n");
-    exit(EXIT_STATUS_DEFAULT);
-  }
-  if(unlink("dots") != 0){
-    printf(1, "unlink dots failed!\n");
-    exit(EXIT_STATUS_DEFAULT);
-  }
-  printf(1, "rmdot ok\n");
-}
-
-void
-dirfile(void)
-{
-  int fd;
-
-  printf(1, "dir vs file\n");
-
-  fd = open("dirfile", O_CREATE);
-  if(fd < 0){
-    printf(1, "create dirfile failed\n");
-    exit(EXIT_STATUS_DEFAULT);
-  }
-  close(fd);
-  if(chdir("dirfile") == 0){
-    printf(1, "chdir dirfile succeeded!\n");
-    exit(EXIT_STATUS_DEFAULT);
-  }
-  fd = open("dirfile/xx", 0);
-  if(fd >= 0){
-    printf(1, "create dirfile/xx succeeded!\n");
-    exit(EXIT_STATUS_DEFAULT);
-  }
-  fd = open("dirfile/xx", O_CREATE);
-  if(fd >= 0){
-    printf(1, "create dirfile/xx succeeded!\n");
-    exit(EXIT_STATUS_DEFAULT);
-  }
-  if(mkdir("dirfile/xx") == 0){
-    printf(1, "mkdir dirfile/xx succeeded!\n");
-    exit(EXIT_STATUS_DEFAULT);
-  }
-  if(unlink("dirfile/xx") == 0){
-    printf(1, "unlink dirfile/xx succeeded!\n");
-    exit(EXIT_STATUS_DEFAULT);
-  }
-  if(link("README", "dirfile/xx") == 0){
-    printf(1, "link to dirfile/xx succeeded!\n");
-    exit(EXIT_STATUS_DEFAULT);
-  }
-  if(unlink("dirfile") != 0){
-    printf(1, "unlink dirfile failed!\n");
-    exit(EXIT_STATUS_DEFAULT);
-  }
-
-  fd = open(".", O_RDWR);
-  if(fd >= 0){
-    printf(1, "open . for writing succeeded!\n");
-    exit(EXIT_STATUS_DEFAULT);
-  }
-  fd = open(".", 0);
-  if(write(fd, "x", 1) > 0){
-    printf(1, "write . succeeded!\n");
-    exit(EXIT_STATUS_DEFAULT);
-  }
-  close(fd);
-
-  printf(1, "dir vs file OK\n");
-}
-
-// test that iput() is called at the end of _namei()
-void
-iref(void)
-{
-  int i, fd;
-
-  printf(1, "empty file name\n");
-
-  // the 50 is NINODE
-  for(i = 0; i < 50 + 1; i++){
-    if(mkdir("irefd") != 0){
-      printf(1, "mkdir irefd failed\n");
-      exit(EXIT_STATUS_DEFAULT);
-    }
-    if(chdir("irefd") != 0){
-      printf(1, "chdir irefd failed\n");
-      exit(EXIT_STATUS_DEFAULT);
-    }
-
-    mkdir("");
-    link("README", "");
-    fd = open("", O_CREATE);
-    if(fd >= 0)
-      close(fd);
-    fd = open("xx", O_CREATE);
-    if(fd >= 0)
-      close(fd);
-    unlink("xx");
-  }
-
-  chdir("/");
-  printf(1, "empty file name OK\n");
-}
-
-// test that fork fails gracefully
-// the forktest binary also does this, but it runs out of proc entries first.
-// inside the bigger usertests binary, we run out of memory first.
-void
-forktest(void)
-{
-  int n, pid;
-
-  printf(1, "fork test\n");
-
-  for(n=0; n<1000; n++){
-    pid = fork();
-    if(pid < 0)
-      break;
-    if(pid == 0)
-      exit(EXIT_STATUS_DEFAULT);
-  }
-  
-  if(n == 1000){
-    printf(1, "fork claimed to work 1000 times!\n");
-    exit(EXIT_STATUS_DEFAULT);
-  }
-  
-  for(; n > 0; n--){
-    if(wait(0) < 0){
-      printf(1, "wait stopped early\n");
-      exit(EXIT_STATUS_DEFAULT);
-    }
-  }
-  
-  if(wait(0) != -1){
-    printf(1, "wait got too many\n");
-    exit(EXIT_STATUS_DEFAULT);
-  }
-  
-  printf(1, "fork test OK\n");
-}
-
-void
-sbrktest(void)
-{
-  int fds[2], pid, pids[10], ppid;
-  char *a, *b, *c, *lastaddr, *oldbrk, *p, scratch;
-  uint amt;
-
-  printf(stdout, "sbrk test\n");
-  oldbrk = sbrk(0);
-
-  // can one sbrk() less than a page?
-  a = sbrk(0);
-  int i;
-  for(i = 0; i < 5000; i++){ 
-    b = sbrk(1);
-    if(b != a){
-      printf(stdout, "sbrk test failed %d %x %x\n", i, a, b);
-      exit(EXIT_STATUS_DEFAULT);
-    }
-    *b = 1;
-    a = b + 1;
-  }
-  pid = fork();
-  if(pid < 0){
-    printf(stdout, "sbrk test fork failed\n");
-    exit(EXIT_STATUS_DEFAULT);
-  }
-  c = sbrk(1);
-  c = sbrk(1);
-  if(c != a + 1){
-    printf(stdout, "sbrk test failed post-fork\n");
-    exit(EXIT_STATUS_DEFAULT);
-  }
-  if(pid == 0)
-    exit(EXIT_STATUS_DEFAULT);
-  wait(0);
-
-  // can one grow address space to something big?
-#define BIG (100*1024*1024)
-  a = sbrk(0);
-  amt = (BIG) - (uint)a;
-  p = sbrk(amt);
-  if (p != a) { 
-    printf(stdout, "sbrk test failed to grow big address space; enough phys mem?\n");
-    exit(EXIT_STATUS_DEFAULT);
-  }
-  lastaddr = (char*) (BIG-1);
-  *lastaddr = 99;
-
-  // can one de-allocate?
-  a = sbrk(0);
-  c = sbrk(-4096);
-  if(c == (char*)0xffffffff){
-    printf(stdout, "sbrk could not deallocate\n");
-    exit(EXIT_STATUS_DEFAULT);
-  }
-  c = sbrk(0);
-  if(c != a - 4096){
-    printf(stdout, "sbrk deallocation produced wrong address, a %x c %x\n", a, c);
-    exit(EXIT_STATUS_DEFAULT);
-  }
-
-  // can one re-allocate that page?
-  a = sbrk(0);
-  c = sbrk(4096);
-  if(c != a || sbrk(0) != a + 4096){
-    printf(stdout, "sbrk re-allocation failed, a %x c %x\n", a, c);
-    exit(EXIT_STATUS_DEFAULT);
-  }
-  if(*lastaddr == 99){
-    // should be zero
-    printf(stdout, "sbrk de-allocation didn't really deallocate\n");
-    exit(EXIT_STATUS_DEFAULT);
-  }
-
-  a = sbrk(0);
-  c = sbrk(-(sbrk(0) - oldbrk));
-  if(c != a){
-    printf(stdout, "sbrk downsize failed, a %x c %x\n", a, c);
-    exit(EXIT_STATUS_DEFAULT);
-  }
-  
-  // can we read the kernel's memory?
-  for(a = (char*)(KERNBASE); a < (char*) (KERNBASE+2000000); a += 50000){
-    ppid = getpid();
-    pid = fork();
-    if(pid < 0){
-      printf(stdout, "fork failed\n");
-      exit(EXIT_STATUS_DEFAULT);
-    }
-    if(pid == 0){
-      printf(stdout, "oops could read %x = %x\n", a, *a);
-      kill(ppid);
-      exit(EXIT_STATUS_DEFAULT);
-    }
-    wait(0);
-  }
-
-  // if we run the system out of memory, does it clean up the last
-  // failed allocation?
-  if(pipe(fds) != 0){
-    printf(1, "pipe() failed\n");
-    exit(EXIT_STATUS_DEFAULT);
-  }
-  for(i = 0; i < sizeof(pids)/sizeof(pids[0]); i++){
-    if((pids[i] = fork()) == 0){
-      // allocate a lot of memory
-      sbrk(BIG - (uint)sbrk(0));
-      write(fds[1], "x", 1);
-      // sit around until killed
-      for(;;) sleep(1000);
-    }
-    if(pids[i] != -1)
-      read(fds[0], &scratch, 1);
-  }
-  // if those failed allocations freed up the pages they did allocate,
-  // we'll be able to allocate here
-  c = sbrk(4096);
-  for(i = 0; i < sizeof(pids)/sizeof(pids[0]); i++){
-    if(pids[i] == -1)
-      continue;
-    kill(pids[i]);
-    wait(0);
-  }
-  if(c == (char*)0xffffffff){
-    printf(stdout, "failed sbrk leaked memory\n");
-    exit(EXIT_STATUS_DEFAULT);
-  }
-
-  if(sbrk(0) > oldbrk)
-    sbrk(-(sbrk(0) - oldbrk));
-
-  printf(stdout, "sbrk test OK\n");
-}
-
-void
-validateint(int *p)
-{
-  int res;
-  asm("mov %%esp, %%ebx\n\t"
-      "mov %3, %%esp\n\t"
-      "int %2\n\t"
-      "mov %%ebx, %%esp" :
-      "=a" (res) :
-      "a" (SYS_sleep), "n" (T_SYSCALL), "c" (p) :
-      "ebx");
-}
-
-void
-validatetest(void)
-{
-  int hi, pid;
-  uint p;
-
-  printf(stdout, "validate test\n");
-  hi = 1100*1024;
-
-  for(p = 0; p <= (uint)hi; p += 4096){
-    if((pid = fork()) == 0){
-      // try to crash the kernel by passing in a badly placed integer
-      validateint((int*)p);
-      exit(EXIT_STATUS_DEFAULT);
-    }
-    sleep(0);
-    sleep(0);
-    kill(pid);
-    wait(0);
-
-    // try to crash the kernel by passing in a bad string pointer
-    if(link("nosuchfile", (char*)p) != -1){
-      printf(stdout, "link should not succeed\n");
-      exit(EXIT_STATUS_DEFAULT);
-    }
-  }
-
-  printf(stdout, "validate ok\n");
-}
-
-// does unintialized data start out zero?
-char uninit[10000];
-void
-bsstest(void)
-{
-  int i;
-
-  printf(stdout, "bss test\n");
-  for(i = 0; i < sizeof(uninit); i++){
-    if(uninit[i] != '\0'){
-      printf(stdout, "bss test failed\n");
-      exit(EXIT_STATUS_DEFAULT);
-    }
-  }
-  printf(stdout, "bss test ok\n");
-}
-
-// does exec return an error if the arguments
-// are larger than a page? or does it write
-// below the stack and wreck the instructions/data?
-void
-bigargtest(void)
-{
-  int pid, fd;
-
-  unlink("bigarg-ok");
-  pid = fork();
-  if(pid == 0){
-    static char *args[MAXARG];
-    int i;
-    for(i = 0; i < MAXARG-1; i++)
-      args[i] = "bigargs test: failed\n                                                                                                                                                                                                       ";
-    args[MAXARG-1] = 0;
-    printf(stdout, "bigarg test\n");
-    exec("echo", args);
-    printf(stdout, "bigarg test ok\n");
-    fd = open("bigarg-ok", O_CREATE);
-    close(fd);
-    exit(EXIT_STATUS_DEFAULT);
-  } else if(pid < 0){
-    printf(stdout, "bigargtest: fork failed\n");
-    exit(EXIT_STATUS_DEFAULT);
-  }
-  wait(0);
-  fd = open("bigarg-ok", 0);
-  if(fd < 0){
-    printf(stdout, "bigarg test failed!\n");
-    exit(EXIT_STATUS_DEFAULT);
-  }
-  close(fd);
-  unlink("bigarg-ok");
-}
-
-// what happens when the file system runs out of blocks?
-// answer: balloc panics, so this test is not useful.
-void
-fsfull()
-{
-  int nfiles;
-  int fsblocks = 0;
-
-  printf(1, "fsfull test\n");
-
-  for(nfiles = 0; ; nfiles++){
-    char name[64];
-    name[0] = 'f';
-    name[1] = '0' + nfiles / 1000;
-    name[2] = '0' + (nfiles % 1000) / 100;
-    name[3] = '0' + (nfiles % 100) / 10;
-    name[4] = '0' + (nfiles % 10);
-    name[5] = '\0';
-    printf(1, "writing %s\n", name);
-    int fd = open(name, O_CREATE|O_RDWR);
-    if(fd < 0){
-      printf(1, "open %s failed\n", name);
-      break;
-    }
-    int total = 0;
-    while(1){
-      int cc = write(fd, buf, 512);
-      if(cc < 512)
-        break;
-      total += cc;
-      fsblocks++;
-    }
-    printf(1, "wrote %d bytes\n", total);
-    close(fd);
-    if(total == 0)
-      break;
-  }
-
-  while(nfiles >= 0){
-    char name[64];
-    name[0] = 'f';
-    name[1] = '0' + nfiles / 1000;
-    name[2] = '0' + (nfiles % 1000) / 100;
-    name[3] = '0' + (nfiles % 100) / 10;
-    name[4] = '0' + (nfiles % 10);
-    name[5] = '\0';
-    unlink(name);
-    nfiles--;
-  }
-
-  printf(1, "fsfull test finished\n");
-}
-
-unsigned long randstate = 1;
-unsigned int
-rand()
-{
-  randstate = randstate * 1664525 + 1013904223;
-  return randstate;
-}
-
-int
-main(int argc, char *argv[])
-{
-  printf(1, "usertests starting\n");
-
-  if(open("usertests.ran", 0) >= 0){
-    printf(1, "already ran user tests -- rebuild fs.img\n");
-    exit(EXIT_STATUS_DEFAULT);
-  }
-  close(open("usertests.ran", O_CREATE));
-
-  createdelete();
-  linkunlink();
-  concreate();
-  fourfiles();
-  sharedfd();
-
-  bigargtest();
-  bigwrite();
-  bigargtest();
-  bsstest();
-  sbrktest();
-  validatetest();
-
-  opentest();
-  writetest();
-  writetest1();
-  createtest();
-
-  openiputtest();
-  exitiputtest();
-  iputtest();
-
-  mem();
-  pipe1();
-  preempt();
-  exitwait();
-
-  rmdot();
-  fourteen();
-  bigfile();
-  subdir();
-  linktest();
-  unlinkread();
-  dirfile();
-  iref();
-  forktest();
-  bigdir(); // slow
-  exectest();
-
-  exit(EXIT_STATUS_DEFAULT);
-}
diff --git a/xv6/usertests.d b/xv6/usertests.d
deleted file mode 100644
index e2dec28..0000000
--- a/xv6/usertests.d
+++ /dev/null
@@ -1,2 +0,0 @@
-usertests.o: usertests.c param.h types.h stat.h user.h fs.h fcntl.h \
- syscall.h traps.h memlayout.h
diff --git a/xv6/usertests.sym b/xv6/usertests.sym
deleted file mode 100644
index bc1dab6..0000000
--- a/xv6/usertests.sym
+++ /dev/null
@@ -1,109 +0,0 @@
-00000000 .text
-000049c0 .rodata
-00006194 .eh_frame
-0000686c .data
-000068a0 .bss
-00000000 .comment
-00000000 .debug_aranges
-00000000 .debug_info
-00000000 .debug_abbrev
-00000000 .debug_line
-00000000 .debug_str
-00000000 .debug_loc
-00000000 .debug_ranges
-00000000 usertests.c
-000068a0 args.1290
-00000000 ulib.c
-000041f8 stosb
-00000000 printf.c
-00004524 putc
-0000454c printint
-00006888 digits.923
-00000000 umalloc.c
-00006920 base
-00006928 freep
-00004887 morecore
-0000421d strcpy
-00000df6 exitwait
-000044fc waitpid
-000045fb printf
-00006880 stdout
-00003caf bigargtest
-00004416 memmove
-0000020c openiputtest
-000044a4 mknod
-00004514 foreground
-0000430e gets
-000044dc getpid
-00000a6d pipe1
-00003384 iref
-000048df malloc
-000044ec sleep
-000000f6 exitiputtest
-00003df4 fsfull
-00002089 bigdir
-0000451c set_priority
-000034b6 forktest
-00004504 wait_stat
-0000062f writetest1
-00002a5c bigwrite
-00000f7c sharedfd
-00006884 randstate
-0000446c pipe
-00006940 uninit
-000030fc dirfile
-0000447c write
-00003c36 bsstest
-0000686c echoargv
-000044b4 fstat
-0000448c kill
-00003b51 validatetest
-00002f4c rmdot
-000044cc chdir
-00000a17 exectest
-00004494 exec
-00004464 wait
-000040b6 rand
-00004474 read
-00000c85 preempt
-000044ac unlink
-00000e82 mem
-00004454 fork
-000044e4 sbrk
-000044f4 uptime
-0000689c __bss_start
-000042b7 memset
-00000869 createtest
-000040d5 main
-00001424 createdelete
-00004251 strcmp
-000003f0 writetest
-000044d4 dup
-000035b3 sbrktest
-00000337 opentest
-00002213 subdir
-000018cc linktest
-00009060 buf
-00000921 dirtest
-0000450c list_pgroup
-00000000 iputtest
-0000437d stat
-00002b72 bigfile
-0000689c _edata
-0000b064 _end
-000016cd unlinkread
-000044bc link
-0000445c exit
-000043cb atoi
-00001f48 linkunlink
-0000b060 name
-00004292 strlen
-0000449c open
-000042db strchr
-00001b54 concreate
-00002dcc fourteen
-00003b26 validateint
-0000118b fourfiles
-000044c4 mkdir
-00004484 close
-000047b0 free
diff --git a/xv6/usys.S b/xv6/usys.S
deleted file mode 100644
index ad9ff4d..0000000
--- a/xv6/usys.S
+++ /dev/null
@@ -1,36 +0,0 @@
-#include "syscall.h"
-#include "traps.h"
-
-#define SYSCALL(name) \
-  .globl name; \
-  name: \
-    movl $SYS_ ## name, %eax; \
-    int $T_SYSCALL; \
-    ret
-
-SYSCALL(fork)
-SYSCALL(exit)
-SYSCALL(wait)
-SYSCALL(pipe)
-SYSCALL(read)
-SYSCALL(write)
-SYSCALL(close)
-SYSCALL(kill)
-SYSCALL(exec)
-SYSCALL(open)
-SYSCALL(mknod)
-SYSCALL(unlink)
-SYSCALL(fstat)
-SYSCALL(link)
-SYSCALL(mkdir)
-SYSCALL(chdir)
-SYSCALL(dup)
-SYSCALL(getpid)
-SYSCALL(sbrk)
-SYSCALL(sleep)
-SYSCALL(uptime)
-SYSCALL(waitpid)
-SYSCALL(wait_stat)
-SYSCALL(list_pgroup)
-SYSCALL(foreground)
-SYSCALL(set_priority)
diff --git a/xv6/vectors.S b/xv6/vectors.S
deleted file mode 100644
index 9e4041a..0000000
--- a/xv6/vectors.S
+++ /dev/null
@@ -1,1537 +0,0 @@
-# generated by vectors.pl - do not edit
-# handlers
-.globl alltraps
-.globl vector0
-vector0:
-  pushl $0
-  pushl $0
-  jmp alltraps
-.globl vector1
-vector1:
-  pushl $0
-  pushl $1
-  jmp alltraps
-.globl vector2
-vector2:
-  pushl $0
-  pushl $2
-  jmp alltraps
-.globl vector3
-vector3:
-  pushl $0
-  pushl $3
-  jmp alltraps
-.globl vector4
-vector4:
-  pushl $0
-  pushl $4
-  jmp alltraps
-.globl vector5
-vector5:
-  pushl $0
-  pushl $5
-  jmp alltraps
-.globl vector6
-vector6:
-  pushl $0
-  pushl $6
-  jmp alltraps
-.globl vector7
-vector7:
-  pushl $0
-  pushl $7
-  jmp alltraps
-.globl vector8
-vector8:
-  pushl $8
-  jmp alltraps
-.globl vector9
-vector9:
-  pushl $0
-  pushl $9
-  jmp alltraps
-.globl vector10
-vector10:
-  pushl $10
-  jmp alltraps
-.globl vector11
-vector11:
-  pushl $11
-  jmp alltraps
-.globl vector12
-vector12:
-  pushl $12
-  jmp alltraps
-.globl vector13
-vector13:
-  pushl $13
-  jmp alltraps
-.globl vector14
-vector14:
-  pushl $14
-  jmp alltraps
-.globl vector15
-vector15:
-  pushl $0
-  pushl $15
-  jmp alltraps
-.globl vector16
-vector16:
-  pushl $0
-  pushl $16
-  jmp alltraps
-.globl vector17
-vector17:
-  pushl $17
-  jmp alltraps
-.globl vector18
-vector18:
-  pushl $0
-  pushl $18
-  jmp alltraps
-.globl vector19
-vector19:
-  pushl $0
-  pushl $19
-  jmp alltraps
-.globl vector20
-vector20:
-  pushl $0
-  pushl $20
-  jmp alltraps
-.globl vector21
-vector21:
-  pushl $0
-  pushl $21
-  jmp alltraps
-.globl vector22
-vector22:
-  pushl $0
-  pushl $22
-  jmp alltraps
-.globl vector23
-vector23:
-  pushl $0
-  pushl $23
-  jmp alltraps
-.globl vector24
-vector24:
-  pushl $0
-  pushl $24
-  jmp alltraps
-.globl vector25
-vector25:
-  pushl $0
-  pushl $25
-  jmp alltraps
-.globl vector26
-vector26:
-  pushl $0
-  pushl $26
-  jmp alltraps
-.globl vector27
-vector27:
-  pushl $0
-  pushl $27
-  jmp alltraps
-.globl vector28
-vector28:
-  pushl $0
-  pushl $28
-  jmp alltraps
-.globl vector29
-vector29:
-  pushl $0
-  pushl $29
-  jmp alltraps
-.globl vector30
-vector30:
-  pushl $0
-  pushl $30
-  jmp alltraps
-.globl vector31
-vector31:
-  pushl $0
-  pushl $31
-  jmp alltraps
-.globl vector32
-vector32:
-  pushl $0
-  pushl $32
-  jmp alltraps
-.globl vector33
-vector33:
-  pushl $0
-  pushl $33
-  jmp alltraps
-.globl vector34
-vector34:
-  pushl $0
-  pushl $34
-  jmp alltraps
-.globl vector35
-vector35:
-  pushl $0
-  pushl $35
-  jmp alltraps
-.globl vector36
-vector36:
-  pushl $0
-  pushl $36
-  jmp alltraps
-.globl vector37
-vector37:
-  pushl $0
-  pushl $37
-  jmp alltraps
-.globl vector38
-vector38:
-  pushl $0
-  pushl $38
-  jmp alltraps
-.globl vector39
-vector39:
-  pushl $0
-  pushl $39
-  jmp alltraps
-.globl vector40
-vector40:
-  pushl $0
-  pushl $40
-  jmp alltraps
-.globl vector41
-vector41:
-  pushl $0
-  pushl $41
-  jmp alltraps
-.globl vector42
-vector42:
-  pushl $0
-  pushl $42
-  jmp alltraps
-.globl vector43
-vector43:
-  pushl $0
-  pushl $43
-  jmp alltraps
-.globl vector44
-vector44:
-  pushl $0
-  pushl $44
-  jmp alltraps
-.globl vector45
-vector45:
-  pushl $0
-  pushl $45
-  jmp alltraps
-.globl vector46
-vector46:
-  pushl $0
-  pushl $46
-  jmp alltraps
-.globl vector47
-vector47:
-  pushl $0
-  pushl $47
-  jmp alltraps
-.globl vector48
-vector48:
-  pushl $0
-  pushl $48
-  jmp alltraps
-.globl vector49
-vector49:
-  pushl $0
-  pushl $49
-  jmp alltraps
-.globl vector50
-vector50:
-  pushl $0
-  pushl $50
-  jmp alltraps
-.globl vector51
-vector51:
-  pushl $0
-  pushl $51
-  jmp alltraps
-.globl vector52
-vector52:
-  pushl $0
-  pushl $52
-  jmp alltraps
-.globl vector53
-vector53:
-  pushl $0
-  pushl $53
-  jmp alltraps
-.globl vector54
-vector54:
-  pushl $0
-  pushl $54
-  jmp alltraps
-.globl vector55
-vector55:
-  pushl $0
-  pushl $55
-  jmp alltraps
-.globl vector56
-vector56:
-  pushl $0
-  pushl $56
-  jmp alltraps
-.globl vector57
-vector57:
-  pushl $0
-  pushl $57
-  jmp alltraps
-.globl vector58
-vector58:
-  pushl $0
-  pushl $58
-  jmp alltraps
-.globl vector59
-vector59:
-  pushl $0
-  pushl $59
-  jmp alltraps
-.globl vector60
-vector60:
-  pushl $0
-  pushl $60
-  jmp alltraps
-.globl vector61
-vector61:
-  pushl $0
-  pushl $61
-  jmp alltraps
-.globl vector62
-vector62:
-  pushl $0
-  pushl $62
-  jmp alltraps
-.globl vector63
-vector63:
-  pushl $0
-  pushl $63
-  jmp alltraps
-.globl vector64
-vector64:
-  pushl $0
-  pushl $64
-  jmp alltraps
-.globl vector65
-vector65:
-  pushl $0
-  pushl $65
-  jmp alltraps
-.globl vector66
-vector66:
-  pushl $0
-  pushl $66
-  jmp alltraps
-.globl vector67
-vector67:
-  pushl $0
-  pushl $67
-  jmp alltraps
-.globl vector68
-vector68:
-  pushl $0
-  pushl $68
-  jmp alltraps
-.globl vector69
-vector69:
-  pushl $0
-  pushl $69
-  jmp alltraps
-.globl vector70
-vector70:
-  pushl $0
-  pushl $70
-  jmp alltraps
-.globl vector71
-vector71:
-  pushl $0
-  pushl $71
-  jmp alltraps
-.globl vector72
-vector72:
-  pushl $0
-  pushl $72
-  jmp alltraps
-.globl vector73
-vector73:
-  pushl $0
-  pushl $73
-  jmp alltraps
-.globl vector74
-vector74:
-  pushl $0
-  pushl $74
-  jmp alltraps
-.globl vector75
-vector75:
-  pushl $0
-  pushl $75
-  jmp alltraps
-.globl vector76
-vector76:
-  pushl $0
-  pushl $76
-  jmp alltraps
-.globl vector77
-vector77:
-  pushl $0
-  pushl $77
-  jmp alltraps
-.globl vector78
-vector78:
-  pushl $0
-  pushl $78
-  jmp alltraps
-.globl vector79
-vector79:
-  pushl $0
-  pushl $79
-  jmp alltraps
-.globl vector80
-vector80:
-  pushl $0
-  pushl $80
-  jmp alltraps
-.globl vector81
-vector81:
-  pushl $0
-  pushl $81
-  jmp alltraps
-.globl vector82
-vector82:
-  pushl $0
-  pushl $82
-  jmp alltraps
-.globl vector83
-vector83:
-  pushl $0
-  pushl $83
-  jmp alltraps
-.globl vector84
-vector84:
-  pushl $0
-  pushl $84
-  jmp alltraps
-.globl vector85
-vector85:
-  pushl $0
-  pushl $85
-  jmp alltraps
-.globl vector86
-vector86:
-  pushl $0
-  pushl $86
-  jmp alltraps
-.globl vector87
-vector87:
-  pushl $0
-  pushl $87
-  jmp alltraps
-.globl vector88
-vector88:
-  pushl $0
-  pushl $88
-  jmp alltraps
-.globl vector89
-vector89:
-  pushl $0
-  pushl $89
-  jmp alltraps
-.globl vector90
-vector90:
-  pushl $0
-  pushl $90
-  jmp alltraps
-.globl vector91
-vector91:
-  pushl $0
-  pushl $91
-  jmp alltraps
-.globl vector92
-vector92:
-  pushl $0
-  pushl $92
-  jmp alltraps
-.globl vector93
-vector93:
-  pushl $0
-  pushl $93
-  jmp alltraps
-.globl vector94
-vector94:
-  pushl $0
-  pushl $94
-  jmp alltraps
-.globl vector95
-vector95:
-  pushl $0
-  pushl $95
-  jmp alltraps
-.globl vector96
-vector96:
-  pushl $0
-  pushl $96
-  jmp alltraps
-.globl vector97
-vector97:
-  pushl $0
-  pushl $97
-  jmp alltraps
-.globl vector98
-vector98:
-  pushl $0
-  pushl $98
-  jmp alltraps
-.globl vector99
-vector99:
-  pushl $0
-  pushl $99
-  jmp alltraps
-.globl vector100
-vector100:
-  pushl $0
-  pushl $100
-  jmp alltraps
-.globl vector101
-vector101:
-  pushl $0
-  pushl $101
-  jmp alltraps
-.globl vector102
-vector102:
-  pushl $0
-  pushl $102
-  jmp alltraps
-.globl vector103
-vector103:
-  pushl $0
-  pushl $103
-  jmp alltraps
-.globl vector104
-vector104:
-  pushl $0
-  pushl $104
-  jmp alltraps
-.globl vector105
-vector105:
-  pushl $0
-  pushl $105
-  jmp alltraps
-.globl vector106
-vector106:
-  pushl $0
-  pushl $106
-  jmp alltraps
-.globl vector107
-vector107:
-  pushl $0
-  pushl $107
-  jmp alltraps
-.globl vector108
-vector108:
-  pushl $0
-  pushl $108
-  jmp alltraps
-.globl vector109
-vector109:
-  pushl $0
-  pushl $109
-  jmp alltraps
-.globl vector110
-vector110:
-  pushl $0
-  pushl $110
-  jmp alltraps
-.globl vector111
-vector111:
-  pushl $0
-  pushl $111
-  jmp alltraps
-.globl vector112
-vector112:
-  pushl $0
-  pushl $112
-  jmp alltraps
-.globl vector113
-vector113:
-  pushl $0
-  pushl $113
-  jmp alltraps
-.globl vector114
-vector114:
-  pushl $0
-  pushl $114
-  jmp alltraps
-.globl vector115
-vector115:
-  pushl $0
-  pushl $115
-  jmp alltraps
-.globl vector116
-vector116:
-  pushl $0
-  pushl $116
-  jmp alltraps
-.globl vector117
-vector117:
-  pushl $0
-  pushl $117
-  jmp alltraps
-.globl vector118
-vector118:
-  pushl $0
-  pushl $118
-  jmp alltraps
-.globl vector119
-vector119:
-  pushl $0
-  pushl $119
-  jmp alltraps
-.globl vector120
-vector120:
-  pushl $0
-  pushl $120
-  jmp alltraps
-.globl vector121
-vector121:
-  pushl $0
-  pushl $121
-  jmp alltraps
-.globl vector122
-vector122:
-  pushl $0
-  pushl $122
-  jmp alltraps
-.globl vector123
-vector123:
-  pushl $0
-  pushl $123
-  jmp alltraps
-.globl vector124
-vector124:
-  pushl $0
-  pushl $124
-  jmp alltraps
-.globl vector125
-vector125:
-  pushl $0
-  pushl $125
-  jmp alltraps
-.globl vector126
-vector126:
-  pushl $0
-  pushl $126
-  jmp alltraps
-.globl vector127
-vector127:
-  pushl $0
-  pushl $127
-  jmp alltraps
-.globl vector128
-vector128:
-  pushl $0
-  pushl $128
-  jmp alltraps
-.globl vector129
-vector129:
-  pushl $0
-  pushl $129
-  jmp alltraps
-.globl vector130
-vector130:
-  pushl $0
-  pushl $130
-  jmp alltraps
-.globl vector131
-vector131:
-  pushl $0
-  pushl $131
-  jmp alltraps
-.globl vector132
-vector132:
-  pushl $0
-  pushl $132
-  jmp alltraps
-.globl vector133
-vector133:
-  pushl $0
-  pushl $133
-  jmp alltraps
-.globl vector134
-vector134:
-  pushl $0
-  pushl $134
-  jmp alltraps
-.globl vector135
-vector135:
-  pushl $0
-  pushl $135
-  jmp alltraps
-.globl vector136
-vector136:
-  pushl $0
-  pushl $136
-  jmp alltraps
-.globl vector137
-vector137:
-  pushl $0
-  pushl $137
-  jmp alltraps
-.globl vector138
-vector138:
-  pushl $0
-  pushl $138
-  jmp alltraps
-.globl vector139
-vector139:
-  pushl $0
-  pushl $139
-  jmp alltraps
-.globl vector140
-vector140:
-  pushl $0
-  pushl $140
-  jmp alltraps
-.globl vector141
-vector141:
-  pushl $0
-  pushl $141
-  jmp alltraps
-.globl vector142
-vector142:
-  pushl $0
-  pushl $142
-  jmp alltraps
-.globl vector143
-vector143:
-  pushl $0
-  pushl $143
-  jmp alltraps
-.globl vector144
-vector144:
-  pushl $0
-  pushl $144
-  jmp alltraps
-.globl vector145
-vector145:
-  pushl $0
-  pushl $145
-  jmp alltraps
-.globl vector146
-vector146:
-  pushl $0
-  pushl $146
-  jmp alltraps
-.globl vector147
-vector147:
-  pushl $0
-  pushl $147
-  jmp alltraps
-.globl vector148
-vector148:
-  pushl $0
-  pushl $148
-  jmp alltraps
-.globl vector149
-vector149:
-  pushl $0
-  pushl $149
-  jmp alltraps
-.globl vector150
-vector150:
-  pushl $0
-  pushl $150
-  jmp alltraps
-.globl vector151
-vector151:
-  pushl $0
-  pushl $151
-  jmp alltraps
-.globl vector152
-vector152:
-  pushl $0
-  pushl $152
-  jmp alltraps
-.globl vector153
-vector153:
-  pushl $0
-  pushl $153
-  jmp alltraps
-.globl vector154
-vector154:
-  pushl $0
-  pushl $154
-  jmp alltraps
-.globl vector155
-vector155:
-  pushl $0
-  pushl $155
-  jmp alltraps
-.globl vector156
-vector156:
-  pushl $0
-  pushl $156
-  jmp alltraps
-.globl vector157
-vector157:
-  pushl $0
-  pushl $157
-  jmp alltraps
-.globl vector158
-vector158:
-  pushl $0
-  pushl $158
-  jmp alltraps
-.globl vector159
-vector159:
-  pushl $0
-  pushl $159
-  jmp alltraps
-.globl vector160
-vector160:
-  pushl $0
-  pushl $160
-  jmp alltraps
-.globl vector161
-vector161:
-  pushl $0
-  pushl $161
-  jmp alltraps
-.globl vector162
-vector162:
-  pushl $0
-  pushl $162
-  jmp alltraps
-.globl vector163
-vector163:
-  pushl $0
-  pushl $163
-  jmp alltraps
-.globl vector164
-vector164:
-  pushl $0
-  pushl $164
-  jmp alltraps
-.globl vector165
-vector165:
-  pushl $0
-  pushl $165
-  jmp alltraps
-.globl vector166
-vector166:
-  pushl $0
-  pushl $166
-  jmp alltraps
-.globl vector167
-vector167:
-  pushl $0
-  pushl $167
-  jmp alltraps
-.globl vector168
-vector168:
-  pushl $0
-  pushl $168
-  jmp alltraps
-.globl vector169
-vector169:
-  pushl $0
-  pushl $169
-  jmp alltraps
-.globl vector170
-vector170:
-  pushl $0
-  pushl $170
-  jmp alltraps
-.globl vector171
-vector171:
-  pushl $0
-  pushl $171
-  jmp alltraps
-.globl vector172
-vector172:
-  pushl $0
-  pushl $172
-  jmp alltraps
-.globl vector173
-vector173:
-  pushl $0
-  pushl $173
-  jmp alltraps
-.globl vector174
-vector174:
-  pushl $0
-  pushl $174
-  jmp alltraps
-.globl vector175
-vector175:
-  pushl $0
-  pushl $175
-  jmp alltraps
-.globl vector176
-vector176:
-  pushl $0
-  pushl $176
-  jmp alltraps
-.globl vector177
-vector177:
-  pushl $0
-  pushl $177
-  jmp alltraps
-.globl vector178
-vector178:
-  pushl $0
-  pushl $178
-  jmp alltraps
-.globl vector179
-vector179:
-  pushl $0
-  pushl $179
-  jmp alltraps
-.globl vector180
-vector180:
-  pushl $0
-  pushl $180
-  jmp alltraps
-.globl vector181
-vector181:
-  pushl $0
-  pushl $181
-  jmp alltraps
-.globl vector182
-vector182:
-  pushl $0
-  pushl $182
-  jmp alltraps
-.globl vector183
-vector183:
-  pushl $0
-  pushl $183
-  jmp alltraps
-.globl vector184
-vector184:
-  pushl $0
-  pushl $184
-  jmp alltraps
-.globl vector185
-vector185:
-  pushl $0
-  pushl $185
-  jmp alltraps
-.globl vector186
-vector186:
-  pushl $0
-  pushl $186
-  jmp alltraps
-.globl vector187
-vector187:
-  pushl $0
-  pushl $187
-  jmp alltraps
-.globl vector188
-vector188:
-  pushl $0
-  pushl $188
-  jmp alltraps
-.globl vector189
-vector189:
-  pushl $0
-  pushl $189
-  jmp alltraps
-.globl vector190
-vector190:
-  pushl $0
-  pushl $190
-  jmp alltraps
-.globl vector191
-vector191:
-  pushl $0
-  pushl $191
-  jmp alltraps
-.globl vector192
-vector192:
-  pushl $0
-  pushl $192
-  jmp alltraps
-.globl vector193
-vector193:
-  pushl $0
-  pushl $193
-  jmp alltraps
-.globl vector194
-vector194:
-  pushl $0
-  pushl $194
-  jmp alltraps
-.globl vector195
-vector195:
-  pushl $0
-  pushl $195
-  jmp alltraps
-.globl vector196
-vector196:
-  pushl $0
-  pushl $196
-  jmp alltraps
-.globl vector197
-vector197:
-  pushl $0
-  pushl $197
-  jmp alltraps
-.globl vector198
-vector198:
-  pushl $0
-  pushl $198
-  jmp alltraps
-.globl vector199
-vector199:
-  pushl $0
-  pushl $199
-  jmp alltraps
-.globl vector200
-vector200:
-  pushl $0
-  pushl $200
-  jmp alltraps
-.globl vector201
-vector201:
-  pushl $0
-  pushl $201
-  jmp alltraps
-.globl vector202
-vector202:
-  pushl $0
-  pushl $202
-  jmp alltraps
-.globl vector203
-vector203:
-  pushl $0
-  pushl $203
-  jmp alltraps
-.globl vector204
-vector204:
-  pushl $0
-  pushl $204
-  jmp alltraps
-.globl vector205
-vector205:
-  pushl $0
-  pushl $205
-  jmp alltraps
-.globl vector206
-vector206:
-  pushl $0
-  pushl $206
-  jmp alltraps
-.globl vector207
-vector207:
-  pushl $0
-  pushl $207
-  jmp alltraps
-.globl vector208
-vector208:
-  pushl $0
-  pushl $208
-  jmp alltraps
-.globl vector209
-vector209:
-  pushl $0
-  pushl $209
-  jmp alltraps
-.globl vector210
-vector210:
-  pushl $0
-  pushl $210
-  jmp alltraps
-.globl vector211
-vector211:
-  pushl $0
-  pushl $211
-  jmp alltraps
-.globl vector212
-vector212:
-  pushl $0
-  pushl $212
-  jmp alltraps
-.globl vector213
-vector213:
-  pushl $0
-  pushl $213
-  jmp alltraps
-.globl vector214
-vector214:
-  pushl $0
-  pushl $214
-  jmp alltraps
-.globl vector215
-vector215:
-  pushl $0
-  pushl $215
-  jmp alltraps
-.globl vector216
-vector216:
-  pushl $0
-  pushl $216
-  jmp alltraps
-.globl vector217
-vector217:
-  pushl $0
-  pushl $217
-  jmp alltraps
-.globl vector218
-vector218:
-  pushl $0
-  pushl $218
-  jmp alltraps
-.globl vector219
-vector219:
-  pushl $0
-  pushl $219
-  jmp alltraps
-.globl vector220
-vector220:
-  pushl $0
-  pushl $220
-  jmp alltraps
-.globl vector221
-vector221:
-  pushl $0
-  pushl $221
-  jmp alltraps
-.globl vector222
-vector222:
-  pushl $0
-  pushl $222
-  jmp alltraps
-.globl vector223
-vector223:
-  pushl $0
-  pushl $223
-  jmp alltraps
-.globl vector224
-vector224:
-  pushl $0
-  pushl $224
-  jmp alltraps
-.globl vector225
-vector225:
-  pushl $0
-  pushl $225
-  jmp alltraps
-.globl vector226
-vector226:
-  pushl $0
-  pushl $226
-  jmp alltraps
-.globl vector227
-vector227:
-  pushl $0
-  pushl $227
-  jmp alltraps
-.globl vector228
-vector228:
-  pushl $0
-  pushl $228
-  jmp alltraps
-.globl vector229
-vector229:
-  pushl $0
-  pushl $229
-  jmp alltraps
-.globl vector230
-vector230:
-  pushl $0
-  pushl $230
-  jmp alltraps
-.globl vector231
-vector231:
-  pushl $0
-  pushl $231
-  jmp alltraps
-.globl vector232
-vector232:
-  pushl $0
-  pushl $232
-  jmp alltraps
-.globl vector233
-vector233:
-  pushl $0
-  pushl $233
-  jmp alltraps
-.globl vector234
-vector234:
-  pushl $0
-  pushl $234
-  jmp alltraps
-.globl vector235
-vector235:
-  pushl $0
-  pushl $235
-  jmp alltraps
-.globl vector236
-vector236:
-  pushl $0
-  pushl $236
-  jmp alltraps
-.globl vector237
-vector237:
-  pushl $0
-  pushl $237
-  jmp alltraps
-.globl vector238
-vector238:
-  pushl $0
-  pushl $238
-  jmp alltraps
-.globl vector239
-vector239:
-  pushl $0
-  pushl $239
-  jmp alltraps
-.globl vector240
-vector240:
-  pushl $0
-  pushl $240
-  jmp alltraps
-.globl vector241
-vector241:
-  pushl $0
-  pushl $241
-  jmp alltraps
-.globl vector242
-vector242:
-  pushl $0
-  pushl $242
-  jmp alltraps
-.globl vector243
-vector243:
-  pushl $0
-  pushl $243
-  jmp alltraps
-.globl vector244
-vector244:
-  pushl $0
-  pushl $244
-  jmp alltraps
-.globl vector245
-vector245:
-  pushl $0
-  pushl $245
-  jmp alltraps
-.globl vector246
-vector246:
-  pushl $0
-  pushl $246
-  jmp alltraps
-.globl vector247
-vector247:
-  pushl $0
-  pushl $247
-  jmp alltraps
-.globl vector248
-vector248:
-  pushl $0
-  pushl $248
-  jmp alltraps
-.globl vector249
-vector249:
-  pushl $0
-  pushl $249
-  jmp alltraps
-.globl vector250
-vector250:
-  pushl $0
-  pushl $250
-  jmp alltraps
-.globl vector251
-vector251:
-  pushl $0
-  pushl $251
-  jmp alltraps
-.globl vector252
-vector252:
-  pushl $0
-  pushl $252
-  jmp alltraps
-.globl vector253
-vector253:
-  pushl $0
-  pushl $253
-  jmp alltraps
-.globl vector254
-vector254:
-  pushl $0
-  pushl $254
-  jmp alltraps
-.globl vector255
-vector255:
-  pushl $0
-  pushl $255
-  jmp alltraps
-
-# vector table
-.data
-.globl vectors
-vectors:
-  .long vector0
-  .long vector1
-  .long vector2
-  .long vector3
-  .long vector4
-  .long vector5
-  .long vector6
-  .long vector7
-  .long vector8
-  .long vector9
-  .long vector10
-  .long vector11
-  .long vector12
-  .long vector13
-  .long vector14
-  .long vector15
-  .long vector16
-  .long vector17
-  .long vector18
-  .long vector19
-  .long vector20
-  .long vector21
-  .long vector22
-  .long vector23
-  .long vector24
-  .long vector25
-  .long vector26
-  .long vector27
-  .long vector28
-  .long vector29
-  .long vector30
-  .long vector31
-  .long vector32
-  .long vector33
-  .long vector34
-  .long vector35
-  .long vector36
-  .long vector37
-  .long vector38
-  .long vector39
-  .long vector40
-  .long vector41
-  .long vector42
-  .long vector43
-  .long vector44
-  .long vector45
-  .long vector46
-  .long vector47
-  .long vector48
-  .long vector49
-  .long vector50
-  .long vector51
-  .long vector52
-  .long vector53
-  .long vector54
-  .long vector55
-  .long vector56
-  .long vector57
-  .long vector58
-  .long vector59
-  .long vector60
-  .long vector61
-  .long vector62
-  .long vector63
-  .long vector64
-  .long vector65
-  .long vector66
-  .long vector67
-  .long vector68
-  .long vector69
-  .long vector70
-  .long vector71
-  .long vector72
-  .long vector73
-  .long vector74
-  .long vector75
-  .long vector76
-  .long vector77
-  .long vector78
-  .long vector79
-  .long vector80
-  .long vector81
-  .long vector82
-  .long vector83
-  .long vector84
-  .long vector85
-  .long vector86
-  .long vector87
-  .long vector88
-  .long vector89
-  .long vector90
-  .long vector91
-  .long vector92
-  .long vector93
-  .long vector94
-  .long vector95
-  .long vector96
-  .long vector97
-  .long vector98
-  .long vector99
-  .long vector100
-  .long vector101
-  .long vector102
-  .long vector103
-  .long vector104
-  .long vector105
-  .long vector106
-  .long vector107
-  .long vector108
-  .long vector109
-  .long vector110
-  .long vector111
-  .long vector112
-  .long vector113
-  .long vector114
-  .long vector115
-  .long vector116
-  .long vector117
-  .long vector118
-  .long vector119
-  .long vector120
-  .long vector121
-  .long vector122
-  .long vector123
-  .long vector124
-  .long vector125
-  .long vector126
-  .long vector127
-  .long vector128
-  .long vector129
-  .long vector130
-  .long vector131
-  .long vector132
-  .long vector133
-  .long vector134
-  .long vector135
-  .long vector136
-  .long vector137
-  .long vector138
-  .long vector139
-  .long vector140
-  .long vector141
-  .long vector142
-  .long vector143
-  .long vector144
-  .long vector145
-  .long vector146
-  .long vector147
-  .long vector148
-  .long vector149
-  .long vector150
-  .long vector151
-  .long vector152
-  .long vector153
-  .long vector154
-  .long vector155
-  .long vector156
-  .long vector157
-  .long vector158
-  .long vector159
-  .long vector160
-  .long vector161
-  .long vector162
-  .long vector163
-  .long vector164
-  .long vector165
-  .long vector166
-  .long vector167
-  .long vector168
-  .long vector169
-  .long vector170
-  .long vector171
-  .long vector172
-  .long vector173
-  .long vector174
-  .long vector175
-  .long vector176
-  .long vector177
-  .long vector178
-  .long vector179
-  .long vector180
-  .long vector181
-  .long vector182
-  .long vector183
-  .long vector184
-  .long vector185
-  .long vector186
-  .long vector187
-  .long vector188
-  .long vector189
-  .long vector190
-  .long vector191
-  .long vector192
-  .long vector193
-  .long vector194
-  .long vector195
-  .long vector196
-  .long vector197
-  .long vector198
-  .long vector199
-  .long vector200
-  .long vector201
-  .long vector202
-  .long vector203
-  .long vector204
-  .long vector205
-  .long vector206
-  .long vector207
-  .long vector208
-  .long vector209
-  .long vector210
-  .long vector211
-  .long vector212
-  .long vector213
-  .long vector214
-  .long vector215
-  .long vector216
-  .long vector217
-  .long vector218
-  .long vector219
-  .long vector220
-  .long vector221
-  .long vector222
-  .long vector223
-  .long vector224
-  .long vector225
-  .long vector226
-  .long vector227
-  .long vector228
-  .long vector229
-  .long vector230
-  .long vector231
-  .long vector232
-  .long vector233
-  .long vector234
-  .long vector235
-  .long vector236
-  .long vector237
-  .long vector238
-  .long vector239
-  .long vector240
-  .long vector241
-  .long vector242
-  .long vector243
-  .long vector244
-  .long vector245
-  .long vector246
-  .long vector247
-  .long vector248
-  .long vector249
-  .long vector250
-  .long vector251
-  .long vector252
-  .long vector253
-  .long vector254
-  .long vector255
diff --git a/xv6/vectors.pl b/xv6/vectors.pl
deleted file mode 100755
index 57b49dd..0000000
--- a/xv6/vectors.pl
+++ /dev/null
@@ -1,47 +0,0 @@
-#!/usr/bin/perl -w
-
-# Generate vectors.S, the trap/interrupt entry points.
-# There has to be one entry point per interrupt number
-# since otherwise there's no way for trap() to discover
-# the interrupt number.
-
-print "# generated by vectors.pl - do not edit\n";
-print "# handlers\n";
-print ".globl alltraps\n";
-for(my $i = 0; $i < 256; $i++){
-    print ".globl vector$i\n";
-    print "vector$i:\n";
-    if(!($i == 8 || ($i >= 10 && $i <= 14) || $i == 17)){
-        print "  pushl \$0\n";
-    }
-    print "  pushl \$$i\n";
-    print "  jmp alltraps\n";
-}
-
-print "\n# vector table\n";
-print ".data\n";
-print ".globl vectors\n";
-print "vectors:\n";
-for(my $i = 0; $i < 256; $i++){
-    print "  .long vector$i\n";
-}
-
-# sample output:
-#   # handlers
-#   .globl alltraps
-#   .globl vector0
-#   vector0:
-#     pushl $0
-#     pushl $0
-#     jmp alltraps
-#   ...
-#   
-#   # vector table
-#   .data
-#   .globl vectors
-#   vectors:
-#     .long vector0
-#     .long vector1
-#     .long vector2
-#   ...
-
diff --git a/xv6/vm.c b/xv6/vm.c
deleted file mode 100644
index 5326d14..0000000
--- a/xv6/vm.c
+++ /dev/null
@@ -1,386 +0,0 @@
-#include "param.h"
-#include "types.h"
-#include "defs.h"
-#include "x86.h"
-#include "memlayout.h"
-#include "mmu.h"
-#include "proc.h"
-#include "elf.h"
-
-extern char data[];  // defined by kernel.ld
-pde_t *kpgdir;  // for use in scheduler()
-struct segdesc gdt[NSEGS];
-
-// Set up CPU's kernel segment descriptors.
-// Run once on entry on each CPU.
-void
-seginit(void)
-{
-  struct cpu *c;
-
-  // Map "logical" addresses to virtual addresses using identity map.
-  // Cannot share a CODE descriptor for both kernel and user
-  // because it would have to have DPL_USR, but the CPU forbids
-  // an interrupt from CPL=0 to DPL=3.
-  c = &cpus[cpunum()];
-  c->gdt[SEG_KCODE] = SEG(STA_X|STA_R, 0, 0xffffffff, 0);
-  c->gdt[SEG_KDATA] = SEG(STA_W, 0, 0xffffffff, 0);
-  c->gdt[SEG_UCODE] = SEG(STA_X|STA_R, 0, 0xffffffff, DPL_USER);
-  c->gdt[SEG_UDATA] = SEG(STA_W, 0, 0xffffffff, DPL_USER);
-
-  // Map cpu, and curproc
-  c->gdt[SEG_KCPU] = SEG(STA_W, &c->cpu, 8, 0);
-
-  lgdt(c->gdt, sizeof(c->gdt));
-  loadgs(SEG_KCPU << 3);
-  
-  // Initialize cpu-local storage.
-  cpu = c;
-  proc = 0;
-}
-
-// Return the address of the PTE in page table pgdir
-// that corresponds to virtual address va.  If alloc!=0,
-// create any required page table pages.
-static pte_t *
-walkpgdir(pde_t *pgdir, const void *va, int alloc)
-{
-  pde_t *pde;
-  pte_t *pgtab;
-
-  pde = &pgdir[PDX(va)];
-  if(*pde & PTE_P){
-    pgtab = (pte_t*)p2v(PTE_ADDR(*pde));
-  } else {
-    if(!alloc || (pgtab = (pte_t*)kalloc()) == 0)
-      return 0;
-    // Make sure all those PTE_P bits are zero.
-    memset(pgtab, 0, PGSIZE);
-    // The permissions here are overly generous, but they can
-    // be further restricted by the permissions in the page table 
-    // entries, if necessary.
-    *pde = v2p(pgtab) | PTE_P | PTE_W | PTE_U;
-  }
-  return &pgtab[PTX(va)];
-}
-
-// Create PTEs for virtual addresses starting at va that refer to
-// physical addresses starting at pa. va and size might not
-// be page-aligned.
-static int
-mappages(pde_t *pgdir, void *va, uint size, uint pa, int perm)
-{
-  char *a, *last;
-  pte_t *pte;
-  
-  a = (char*)PGROUNDDOWN((uint)va);
-  last = (char*)PGROUNDDOWN(((uint)va) + size - 1);
-  for(;;){
-    if((pte = walkpgdir(pgdir, a, 1)) == 0)
-      return -1;
-    if(*pte & PTE_P)
-      panic("remap");
-    *pte = pa | perm | PTE_P;
-    if(a == last)
-      break;
-    a += PGSIZE;
-    pa += PGSIZE;
-  }
-  return 0;
-}
-
-// There is one page table per process, plus one that's used when
-// a CPU is not running any process (kpgdir). The kernel uses the
-// current process's page table during system calls and interrupts;
-// page protection bits prevent user code from using the kernel's
-// mappings.
-// 
-// setupkvm() and exec() set up every page table like this:
-//
-//   0..KERNBASE: user memory (text+data+stack+heap), mapped to
-//                phys memory allocated by the kernel
-//   KERNBASE..KERNBASE+EXTMEM: mapped to 0..EXTMEM (for I/O space)
-//   KERNBASE+EXTMEM..data: mapped to EXTMEM..V2P(data)
-//                for the kernel's instructions and r/o data
-//   data..KERNBASE+PHYSTOP: mapped to V2P(data)..PHYSTOP, 
-//                                  rw data + free physical memory
-//   0xfe000000..0: mapped direct (devices such as ioapic)
-//
-// The kernel allocates physical memory for its heap and for user memory
-// between V2P(end) and the end of physical memory (PHYSTOP)
-// (directly addressable from end..P2V(PHYSTOP)).
-
-// This table defines the kernel's mappings, which are present in
-// every process's page table.
-static struct kmap {
-  void *virt;
-  uint phys_start;
-  uint phys_end;
-  int perm;
-} kmap[] = {
- { (void*)KERNBASE, 0,             EXTMEM,    PTE_W}, // I/O space
- { (void*)KERNLINK, V2P(KERNLINK), V2P(data), 0},     // kern text+rodata
- { (void*)data,     V2P(data),     PHYSTOP,   PTE_W}, // kern data+memory
- { (void*)DEVSPACE, DEVSPACE,      0,         PTE_W}, // more devices
-};
-
-// Set up kernel part of a page table.
-pde_t*
-setupkvm(void)
-{
-  pde_t *pgdir;
-  struct kmap *k;
-
-  if((pgdir = (pde_t*)kalloc()) == 0)
-    return 0;
-  memset(pgdir, 0, PGSIZE);
-  if (p2v(PHYSTOP) > (void*)DEVSPACE)
-    panic("PHYSTOP too high");
-  for(k = kmap; k < &kmap[NELEM(kmap)]; k++)
-    if(mappages(pgdir, k->virt, k->phys_end - k->phys_start, 
-                (uint)k->phys_start, k->perm) < 0)
-      return 0;
-  return pgdir;
-}
-
-// Allocate one page table for the machine for the kernel address
-// space for scheduler processes.
-void
-kvmalloc(void)
-{
-  kpgdir = setupkvm();
-  switchkvm();
-}
-
-// Switch h/w page table register to the kernel-only page table,
-// for when no process is running.
-void
-switchkvm(void)
-{
-  lcr3(v2p(kpgdir));   // switch to the kernel page table
-}
-
-// Switch TSS and h/w page table to correspond to process p.
-void
-switchuvm(struct proc *p)
-{
-  pushcli();
-  cpu->gdt[SEG_TSS] = SEG16(STS_T32A, &cpu->ts, sizeof(cpu->ts)-1, 0);
-  cpu->gdt[SEG_TSS].s = 0;
-  cpu->ts.ss0 = SEG_KDATA << 3;
-  cpu->ts.esp0 = (uint)proc->kstack + KSTACKSIZE;
-  ltr(SEG_TSS << 3);
-  if(p->pgdir == 0)
-    panic("switchuvm: no pgdir");
-  lcr3(v2p(p->pgdir));  // switch to new address space
-  popcli();
-}
-
-// Load the initcode into address 0 of pgdir.
-// sz must be less than a page.
-void
-inituvm(pde_t *pgdir, char *init, uint sz)
-{
-  char *mem;
-  
-  if(sz >= PGSIZE)
-    panic("inituvm: more than a page");
-  mem = kalloc();
-  memset(mem, 0, PGSIZE);
-  mappages(pgdir, 0, PGSIZE, v2p(mem), PTE_W|PTE_U);
-  memmove(mem, init, sz);
-}
-
-// Load a program segment into pgdir.  addr must be page-aligned
-// and the pages from addr to addr+sz must already be mapped.
-int
-loaduvm(pde_t *pgdir, char *addr, struct inode *ip, uint offset, uint sz)
-{
-  uint i, pa, n;
-  pte_t *pte;
-
-  if((uint) addr % PGSIZE != 0)
-    panic("loaduvm: addr must be page aligned");
-  for(i = 0; i < sz; i += PGSIZE){
-    if((pte = walkpgdir(pgdir, addr+i, 0)) == 0)
-      panic("loaduvm: address should exist");
-    pa = PTE_ADDR(*pte);
-    if(sz - i < PGSIZE)
-      n = sz - i;
-    else
-      n = PGSIZE;
-    if(readi(ip, p2v(pa), offset+i, n) != n)
-      return -1;
-  }
-  return 0;
-}
-
-// Allocate page tables and physical memory to grow process from oldsz to
-// newsz, which need not be page aligned.  Returns new size or 0 on error.
-int
-allocuvm(pde_t *pgdir, uint oldsz, uint newsz)
-{
-  char *mem;
-  uint a;
-
-  if(newsz >= KERNBASE)
-    return 0;
-  if(newsz < oldsz)
-    return oldsz;
-
-  a = PGROUNDUP(oldsz);
-  for(; a < newsz; a += PGSIZE){
-    mem = kalloc();
-    if(mem == 0){
-      cprintf("allocuvm out of memory\n");
-      deallocuvm(pgdir, newsz, oldsz);
-      return 0;
-    }
-    memset(mem, 0, PGSIZE);
-    mappages(pgdir, (char*)a, PGSIZE, v2p(mem), PTE_W|PTE_U);
-  }
-  return newsz;
-}
-
-// Deallocate user pages to bring the process size from oldsz to
-// newsz.  oldsz and newsz need not be page-aligned, nor does newsz
-// need to be less than oldsz.  oldsz can be larger than the actual
-// process size.  Returns the new process size.
-int
-deallocuvm(pde_t *pgdir, uint oldsz, uint newsz)
-{
-  pte_t *pte;
-  uint a, pa;
-
-  if(newsz >= oldsz)
-    return oldsz;
-
-  a = PGROUNDUP(newsz);
-  for(; a  < oldsz; a += PGSIZE){
-    pte = walkpgdir(pgdir, (char*)a, 0);
-    if(!pte)
-      a += (NPTENTRIES - 1) * PGSIZE;
-    else if((*pte & PTE_P) != 0){
-      pa = PTE_ADDR(*pte);
-      if(pa == 0)
-        panic("kfree");
-      char *v = p2v(pa);
-      kfree(v);
-      *pte = 0;
-    }
-  }
-  return newsz;
-}
-
-// Free a page table and all the physical memory pages
-// in the user part.
-void
-freevm(pde_t *pgdir)
-{
-  uint i;
-
-  if(pgdir == 0)
-    panic("freevm: no pgdir");
-  deallocuvm(pgdir, KERNBASE, 0);
-  for(i = 0; i < NPDENTRIES; i++){
-    if(pgdir[i] & PTE_P){
-      char * v = p2v(PTE_ADDR(pgdir[i]));
-      kfree(v);
-    }
-  }
-  kfree((char*)pgdir);
-}
-
-// Clear PTE_U on a page. Used to create an inaccessible
-// page beneath the user stack.
-void
-clearpteu(pde_t *pgdir, char *uva)
-{
-  pte_t *pte;
-
-  pte = walkpgdir(pgdir, uva, 0);
-  if(pte == 0)
-    panic("clearpteu");
-  *pte &= ~PTE_U;
-}
-
-// Given a parent process's page table, create a copy
-// of it for a child.
-pde_t*
-copyuvm(pde_t *pgdir, uint sz)
-{
-  pde_t *d;
-  pte_t *pte;
-  uint pa, i, flags;
-  char *mem;
-
-  if((d = setupkvm()) == 0)
-    return 0;
-  for(i = 0; i < sz; i += PGSIZE){
-    if((pte = walkpgdir(pgdir, (void *) i, 0)) == 0)
-      panic("copyuvm: pte should exist");
-    if(!(*pte & PTE_P))
-      panic("copyuvm: page not present");
-    pa = PTE_ADDR(*pte);
-    flags = PTE_FLAGS(*pte);
-    if((mem = kalloc()) == 0)
-      goto bad;
-    memmove(mem, (char*)p2v(pa), PGSIZE);
-    if(mappages(d, (void*)i, PGSIZE, v2p(mem), flags) < 0)
-      goto bad;
-  }
-  return d;
-
-bad:
-  freevm(d);
-  return 0;
-}
-
-//PAGEBREAK!
-// Map user virtual address to kernel address.
-char*
-uva2ka(pde_t *pgdir, char *uva)
-{
-  pte_t *pte;
-
-  pte = walkpgdir(pgdir, uva, 0);
-  if((*pte & PTE_P) == 0)
-    return 0;
-  if((*pte & PTE_U) == 0)
-    return 0;
-  return (char*)p2v(PTE_ADDR(*pte));
-}
-
-// Copy len bytes from p to user address va in page table pgdir.
-// Most useful when pgdir is not the current page table.
-// uva2ka ensures this only works for PTE_U pages.
-int
-copyout(pde_t *pgdir, uint va, void *p, uint len)
-{
-  char *buf, *pa0;
-  uint n, va0;
-
-  buf = (char*)p;
-  while(len > 0){
-    va0 = (uint)PGROUNDDOWN(va);
-    pa0 = uva2ka(pgdir, (char*)va0);
-    if(pa0 == 0)
-      return -1;
-    n = PGSIZE - (va - va0);
-    if(n > len)
-      n = len;
-    memmove(pa0 + (va - va0), buf, n);
-    len -= n;
-    buf += n;
-    va = va0 + PGSIZE;
-  }
-  return 0;
-}
-
-//PAGEBREAK!
-// Blank page.
-//PAGEBREAK!
-// Blank page.
-//PAGEBREAK!
-// Blank page.
-
diff --git a/xv6/vm.d b/xv6/vm.d
deleted file mode 100644
index 0f5bf81..0000000
--- a/xv6/vm.d
+++ /dev/null
@@ -1 +0,0 @@
-vm.o: vm.c param.h types.h defs.h x86.h memlayout.h mmu.h proc.h elf.h
diff --git a/xv6/wc.asm b/xv6/wc.asm
deleted file mode 100644
index 72d3464..0000000
--- a/xv6/wc.asm
+++ /dev/null
@@ -1,1357 +0,0 @@
-
-_wc:     file format elf32-i386
-
-
-Disassembly of section .text:
-
-00000000 <wc>:
-
-char buf[512];
-
-void
-wc(int fd, char *name)
-{
-   0:	55                   	push   %ebp
-   1:	89 e5                	mov    %esp,%ebp
-   3:	83 ec 48             	sub    $0x48,%esp
-  int i, n;
-  int l, w, c, inword;
-
-  l = w = c = 0;
-   6:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
-   d:	8b 45 e8             	mov    -0x18(%ebp),%eax
-  10:	89 45 ec             	mov    %eax,-0x14(%ebp)
-  13:	8b 45 ec             	mov    -0x14(%ebp),%eax
-  16:	89 45 f0             	mov    %eax,-0x10(%ebp)
-  inword = 0;
-  19:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
-  while((n = read(fd, buf, sizeof(buf))) > 0){
-  20:	eb 68                	jmp    8a <wc+0x8a>
-    for(i=0; i<n; i++){
-  22:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
-  29:	eb 57                	jmp    82 <wc+0x82>
-      c++;
-  2b:	83 45 e8 01          	addl   $0x1,-0x18(%ebp)
-      if(buf[i] == '\n')
-  2f:	8b 45 f4             	mov    -0xc(%ebp),%eax
-  32:	05 80 0c 00 00       	add    $0xc80,%eax
-  37:	0f b6 00             	movzbl (%eax),%eax
-  3a:	3c 0a                	cmp    $0xa,%al
-  3c:	75 04                	jne    42 <wc+0x42>
-        l++;
-  3e:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)
-      if(strchr(" \r\t\n\v", buf[i]))
-  42:	8b 45 f4             	mov    -0xc(%ebp),%eax
-  45:	05 80 0c 00 00       	add    $0xc80,%eax
-  4a:	0f b6 00             	movzbl (%eax),%eax
-  4d:	0f be c0             	movsbl %al,%eax
-  50:	89 44 24 04          	mov    %eax,0x4(%esp)
-  54:	c7 04 24 ab 09 00 00 	movl   $0x9ab,(%esp)
-  5b:	e8 67 02 00 00       	call   2c7 <strchr>
-  60:	85 c0                	test   %eax,%eax
-  62:	74 09                	je     6d <wc+0x6d>
-        inword = 0;
-  64:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
-  6b:	eb 11                	jmp    7e <wc+0x7e>
-      else if(!inword){
-  6d:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
-  71:	75 0b                	jne    7e <wc+0x7e>
-        w++;
-  73:	83 45 ec 01          	addl   $0x1,-0x14(%ebp)
-        inword = 1;
-  77:	c7 45 e4 01 00 00 00 	movl   $0x1,-0x1c(%ebp)
-  int l, w, c, inword;
-
-  l = w = c = 0;
-  inword = 0;
-  while((n = read(fd, buf, sizeof(buf))) > 0){
-    for(i=0; i<n; i++){
-  7e:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
-  82:	8b 45 f4             	mov    -0xc(%ebp),%eax
-  85:	3b 45 e0             	cmp    -0x20(%ebp),%eax
-  88:	7c a1                	jl     2b <wc+0x2b>
-  int i, n;
-  int l, w, c, inword;
-
-  l = w = c = 0;
-  inword = 0;
-  while((n = read(fd, buf, sizeof(buf))) > 0){
-  8a:	c7 44 24 08 00 02 00 	movl   $0x200,0x8(%esp)
-  91:	00 
-  92:	c7 44 24 04 80 0c 00 	movl   $0xc80,0x4(%esp)
-  99:	00 
-  9a:	8b 45 08             	mov    0x8(%ebp),%eax
-  9d:	89 04 24             	mov    %eax,(%esp)
-  a0:	e8 bb 03 00 00       	call   460 <read>
-  a5:	89 45 e0             	mov    %eax,-0x20(%ebp)
-  a8:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
-  ac:	0f 8f 70 ff ff ff    	jg     22 <wc+0x22>
-        w++;
-        inword = 1;
-      }
-    }
-  }
-  if(n < 0){
-  b2:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
-  b6:	79 20                	jns    d8 <wc+0xd8>
-    printf(1, "wc: read error\n");
-  b8:	c7 44 24 04 b1 09 00 	movl   $0x9b1,0x4(%esp)
-  bf:	00 
-  c0:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
-  c7:	e8 1b 05 00 00       	call   5e7 <printf>
-    exit(EXIT_STATUS_DEFAULT);
-  cc:	c7 04 24 02 00 00 00 	movl   $0x2,(%esp)
-  d3:	e8 70 03 00 00       	call   448 <exit>
-  }
-  printf(1, "%d %d %d %s\n", l, w, c, name);
-  d8:	8b 45 0c             	mov    0xc(%ebp),%eax
-  db:	89 44 24 14          	mov    %eax,0x14(%esp)
-  df:	8b 45 e8             	mov    -0x18(%ebp),%eax
-  e2:	89 44 24 10          	mov    %eax,0x10(%esp)
-  e6:	8b 45 ec             	mov    -0x14(%ebp),%eax
-  e9:	89 44 24 0c          	mov    %eax,0xc(%esp)
-  ed:	8b 45 f0             	mov    -0x10(%ebp),%eax
-  f0:	89 44 24 08          	mov    %eax,0x8(%esp)
-  f4:	c7 44 24 04 c1 09 00 	movl   $0x9c1,0x4(%esp)
-  fb:	00 
-  fc:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
- 103:	e8 df 04 00 00       	call   5e7 <printf>
-}
- 108:	c9                   	leave  
- 109:	c3                   	ret    
-
-0000010a <main>:
-
-int
-main(int argc, char *argv[])
-{
- 10a:	55                   	push   %ebp
- 10b:	89 e5                	mov    %esp,%ebp
- 10d:	83 e4 f0             	and    $0xfffffff0,%esp
- 110:	83 ec 20             	sub    $0x20,%esp
-  int fd, i;
-
-  if(argc <= 1){
- 113:	83 7d 08 01          	cmpl   $0x1,0x8(%ebp)
- 117:	7f 20                	jg     139 <main+0x2f>
-    wc(0, "");
- 119:	c7 44 24 04 ce 09 00 	movl   $0x9ce,0x4(%esp)
- 120:	00 
- 121:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
- 128:	e8 d3 fe ff ff       	call   0 <wc>
-    exit(EXIT_STATUS_DEFAULT);
- 12d:	c7 04 24 02 00 00 00 	movl   $0x2,(%esp)
- 134:	e8 0f 03 00 00       	call   448 <exit>
-  }
-
-  for(i = 1; i < argc; i++){
- 139:	c7 44 24 1c 01 00 00 	movl   $0x1,0x1c(%esp)
- 140:	00 
- 141:	e9 84 00 00 00       	jmp    1ca <main+0xc0>
-    if((fd = open(argv[i], 0)) < 0){
- 146:	8b 44 24 1c          	mov    0x1c(%esp),%eax
- 14a:	c1 e0 02             	shl    $0x2,%eax
- 14d:	03 45 0c             	add    0xc(%ebp),%eax
- 150:	8b 00                	mov    (%eax),%eax
- 152:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
- 159:	00 
- 15a:	89 04 24             	mov    %eax,(%esp)
- 15d:	e8 26 03 00 00       	call   488 <open>
- 162:	89 44 24 18          	mov    %eax,0x18(%esp)
- 166:	83 7c 24 18 00       	cmpl   $0x0,0x18(%esp)
- 16b:	79 30                	jns    19d <main+0x93>
-      printf(1, "wc: cannot open %s\n", argv[i]);
- 16d:	8b 44 24 1c          	mov    0x1c(%esp),%eax
- 171:	c1 e0 02             	shl    $0x2,%eax
- 174:	03 45 0c             	add    0xc(%ebp),%eax
- 177:	8b 00                	mov    (%eax),%eax
- 179:	89 44 24 08          	mov    %eax,0x8(%esp)
- 17d:	c7 44 24 04 cf 09 00 	movl   $0x9cf,0x4(%esp)
- 184:	00 
- 185:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
- 18c:	e8 56 04 00 00       	call   5e7 <printf>
-      exit(EXIT_STATUS_DEFAULT);
- 191:	c7 04 24 02 00 00 00 	movl   $0x2,(%esp)
- 198:	e8 ab 02 00 00       	call   448 <exit>
-    }
-    wc(fd, argv[i]);
- 19d:	8b 44 24 1c          	mov    0x1c(%esp),%eax
- 1a1:	c1 e0 02             	shl    $0x2,%eax
- 1a4:	03 45 0c             	add    0xc(%ebp),%eax
- 1a7:	8b 00                	mov    (%eax),%eax
- 1a9:	89 44 24 04          	mov    %eax,0x4(%esp)
- 1ad:	8b 44 24 18          	mov    0x18(%esp),%eax
- 1b1:	89 04 24             	mov    %eax,(%esp)
- 1b4:	e8 47 fe ff ff       	call   0 <wc>
-    close(fd);
- 1b9:	8b 44 24 18          	mov    0x18(%esp),%eax
- 1bd:	89 04 24             	mov    %eax,(%esp)
- 1c0:	e8 ab 02 00 00       	call   470 <close>
-  if(argc <= 1){
-    wc(0, "");
-    exit(EXIT_STATUS_DEFAULT);
-  }
-
-  for(i = 1; i < argc; i++){
- 1c5:	83 44 24 1c 01       	addl   $0x1,0x1c(%esp)
- 1ca:	8b 44 24 1c          	mov    0x1c(%esp),%eax
- 1ce:	3b 45 08             	cmp    0x8(%ebp),%eax
- 1d1:	0f 8c 6f ff ff ff    	jl     146 <main+0x3c>
-      exit(EXIT_STATUS_DEFAULT);
-    }
-    wc(fd, argv[i]);
-    close(fd);
-  }
-  exit(EXIT_STATUS_DEFAULT);
- 1d7:	c7 04 24 02 00 00 00 	movl   $0x2,(%esp)
- 1de:	e8 65 02 00 00       	call   448 <exit>
- 1e3:	90                   	nop
-
-000001e4 <stosb>:
-               "cc");
-}
-
-static inline void
-stosb(void *addr, int data, int cnt)
-{
- 1e4:	55                   	push   %ebp
- 1e5:	89 e5                	mov    %esp,%ebp
- 1e7:	57                   	push   %edi
- 1e8:	53                   	push   %ebx
-  asm volatile("cld; rep stosb" :
- 1e9:	8b 4d 08             	mov    0x8(%ebp),%ecx
- 1ec:	8b 55 10             	mov    0x10(%ebp),%edx
- 1ef:	8b 45 0c             	mov    0xc(%ebp),%eax
- 1f2:	89 cb                	mov    %ecx,%ebx
- 1f4:	89 df                	mov    %ebx,%edi
- 1f6:	89 d1                	mov    %edx,%ecx
- 1f8:	fc                   	cld    
- 1f9:	f3 aa                	rep stos %al,%es:(%edi)
- 1fb:	89 ca                	mov    %ecx,%edx
- 1fd:	89 fb                	mov    %edi,%ebx
- 1ff:	89 5d 08             	mov    %ebx,0x8(%ebp)
- 202:	89 55 10             	mov    %edx,0x10(%ebp)
-               "=D" (addr), "=c" (cnt) :
-               "0" (addr), "1" (cnt), "a" (data) :
-               "memory", "cc");
-}
- 205:	5b                   	pop    %ebx
- 206:	5f                   	pop    %edi
- 207:	5d                   	pop    %ebp
- 208:	c3                   	ret    
-
-00000209 <strcpy>:
-#include "user.h"
-#include "x86.h"
-
-char*
-strcpy(char *s, char *t)
-{
- 209:	55                   	push   %ebp
- 20a:	89 e5                	mov    %esp,%ebp
- 20c:	83 ec 10             	sub    $0x10,%esp
-  char *os;
-
-  os = s;
- 20f:	8b 45 08             	mov    0x8(%ebp),%eax
- 212:	89 45 fc             	mov    %eax,-0x4(%ebp)
-  while((*s++ = *t++) != 0)
- 215:	90                   	nop
- 216:	8b 45 0c             	mov    0xc(%ebp),%eax
- 219:	0f b6 10             	movzbl (%eax),%edx
- 21c:	8b 45 08             	mov    0x8(%ebp),%eax
- 21f:	88 10                	mov    %dl,(%eax)
- 221:	8b 45 08             	mov    0x8(%ebp),%eax
- 224:	0f b6 00             	movzbl (%eax),%eax
- 227:	84 c0                	test   %al,%al
- 229:	0f 95 c0             	setne  %al
- 22c:	83 45 08 01          	addl   $0x1,0x8(%ebp)
- 230:	83 45 0c 01          	addl   $0x1,0xc(%ebp)
- 234:	84 c0                	test   %al,%al
- 236:	75 de                	jne    216 <strcpy+0xd>
-    ;
-  return os;
- 238:	8b 45 fc             	mov    -0x4(%ebp),%eax
-}
- 23b:	c9                   	leave  
- 23c:	c3                   	ret    
-
-0000023d <strcmp>:
-
-int
-strcmp(const char *p, const char *q)
-{
- 23d:	55                   	push   %ebp
- 23e:	89 e5                	mov    %esp,%ebp
-  while(*p && *p == *q)
- 240:	eb 08                	jmp    24a <strcmp+0xd>
-    p++, q++;
- 242:	83 45 08 01          	addl   $0x1,0x8(%ebp)
- 246:	83 45 0c 01          	addl   $0x1,0xc(%ebp)
-}
-
-int
-strcmp(const char *p, const char *q)
-{
-  while(*p && *p == *q)
- 24a:	8b 45 08             	mov    0x8(%ebp),%eax
- 24d:	0f b6 00             	movzbl (%eax),%eax
- 250:	84 c0                	test   %al,%al
- 252:	74 10                	je     264 <strcmp+0x27>
- 254:	8b 45 08             	mov    0x8(%ebp),%eax
- 257:	0f b6 10             	movzbl (%eax),%edx
- 25a:	8b 45 0c             	mov    0xc(%ebp),%eax
- 25d:	0f b6 00             	movzbl (%eax),%eax
- 260:	38 c2                	cmp    %al,%dl
- 262:	74 de                	je     242 <strcmp+0x5>
-    p++, q++;
-  return (uchar)*p - (uchar)*q;
- 264:	8b 45 08             	mov    0x8(%ebp),%eax
- 267:	0f b6 00             	movzbl (%eax),%eax
- 26a:	0f b6 d0             	movzbl %al,%edx
- 26d:	8b 45 0c             	mov    0xc(%ebp),%eax
- 270:	0f b6 00             	movzbl (%eax),%eax
- 273:	0f b6 c0             	movzbl %al,%eax
- 276:	89 d1                	mov    %edx,%ecx
- 278:	29 c1                	sub    %eax,%ecx
- 27a:	89 c8                	mov    %ecx,%eax
-}
- 27c:	5d                   	pop    %ebp
- 27d:	c3                   	ret    
-
-0000027e <strlen>:
-
-uint
-strlen(char *s)
-{
- 27e:	55                   	push   %ebp
- 27f:	89 e5                	mov    %esp,%ebp
- 281:	83 ec 10             	sub    $0x10,%esp
-  int n;
-
-  for(n = 0; s[n]; n++)
- 284:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
- 28b:	eb 04                	jmp    291 <strlen+0x13>
- 28d:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
- 291:	8b 45 fc             	mov    -0x4(%ebp),%eax
- 294:	03 45 08             	add    0x8(%ebp),%eax
- 297:	0f b6 00             	movzbl (%eax),%eax
- 29a:	84 c0                	test   %al,%al
- 29c:	75 ef                	jne    28d <strlen+0xf>
-    ;
-  return n;
- 29e:	8b 45 fc             	mov    -0x4(%ebp),%eax
-}
- 2a1:	c9                   	leave  
- 2a2:	c3                   	ret    
-
-000002a3 <memset>:
-
-void*
-memset(void *dst, int c, uint n)
-{
- 2a3:	55                   	push   %ebp
- 2a4:	89 e5                	mov    %esp,%ebp
- 2a6:	83 ec 0c             	sub    $0xc,%esp
-  stosb(dst, c, n);
- 2a9:	8b 45 10             	mov    0x10(%ebp),%eax
- 2ac:	89 44 24 08          	mov    %eax,0x8(%esp)
- 2b0:	8b 45 0c             	mov    0xc(%ebp),%eax
- 2b3:	89 44 24 04          	mov    %eax,0x4(%esp)
- 2b7:	8b 45 08             	mov    0x8(%ebp),%eax
- 2ba:	89 04 24             	mov    %eax,(%esp)
- 2bd:	e8 22 ff ff ff       	call   1e4 <stosb>
-  return dst;
- 2c2:	8b 45 08             	mov    0x8(%ebp),%eax
-}
- 2c5:	c9                   	leave  
- 2c6:	c3                   	ret    
-
-000002c7 <strchr>:
-
-char*
-strchr(const char *s, char c)
-{
- 2c7:	55                   	push   %ebp
- 2c8:	89 e5                	mov    %esp,%ebp
- 2ca:	83 ec 04             	sub    $0x4,%esp
- 2cd:	8b 45 0c             	mov    0xc(%ebp),%eax
- 2d0:	88 45 fc             	mov    %al,-0x4(%ebp)
-  for(; *s; s++)
- 2d3:	eb 14                	jmp    2e9 <strchr+0x22>
-    if(*s == c)
- 2d5:	8b 45 08             	mov    0x8(%ebp),%eax
- 2d8:	0f b6 00             	movzbl (%eax),%eax
- 2db:	3a 45 fc             	cmp    -0x4(%ebp),%al
- 2de:	75 05                	jne    2e5 <strchr+0x1e>
-      return (char*)s;
- 2e0:	8b 45 08             	mov    0x8(%ebp),%eax
- 2e3:	eb 13                	jmp    2f8 <strchr+0x31>
-}
-
-char*
-strchr(const char *s, char c)
-{
-  for(; *s; s++)
- 2e5:	83 45 08 01          	addl   $0x1,0x8(%ebp)
- 2e9:	8b 45 08             	mov    0x8(%ebp),%eax
- 2ec:	0f b6 00             	movzbl (%eax),%eax
- 2ef:	84 c0                	test   %al,%al
- 2f1:	75 e2                	jne    2d5 <strchr+0xe>
-    if(*s == c)
-      return (char*)s;
-  return 0;
- 2f3:	b8 00 00 00 00       	mov    $0x0,%eax
-}
- 2f8:	c9                   	leave  
- 2f9:	c3                   	ret    
-
-000002fa <gets>:
-
-char*
-gets(char *buf, int max)
-{
- 2fa:	55                   	push   %ebp
- 2fb:	89 e5                	mov    %esp,%ebp
- 2fd:	83 ec 28             	sub    $0x28,%esp
-  int i, cc;
-  char c;
-
-  for(i=0; i+1 < max; ){
- 300:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
- 307:	eb 44                	jmp    34d <gets+0x53>
-    cc = read(0, &c, 1);
- 309:	c7 44 24 08 01 00 00 	movl   $0x1,0x8(%esp)
- 310:	00 
- 311:	8d 45 ef             	lea    -0x11(%ebp),%eax
- 314:	89 44 24 04          	mov    %eax,0x4(%esp)
- 318:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
- 31f:	e8 3c 01 00 00       	call   460 <read>
- 324:	89 45 f0             	mov    %eax,-0x10(%ebp)
-    if(cc < 1)
- 327:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
- 32b:	7e 2d                	jle    35a <gets+0x60>
-      break;
-    buf[i++] = c;
- 32d:	8b 45 f4             	mov    -0xc(%ebp),%eax
- 330:	03 45 08             	add    0x8(%ebp),%eax
- 333:	0f b6 55 ef          	movzbl -0x11(%ebp),%edx
- 337:	88 10                	mov    %dl,(%eax)
- 339:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
-    if(c == '\n' || c == '\r')
- 33d:	0f b6 45 ef          	movzbl -0x11(%ebp),%eax
- 341:	3c 0a                	cmp    $0xa,%al
- 343:	74 16                	je     35b <gets+0x61>
- 345:	0f b6 45 ef          	movzbl -0x11(%ebp),%eax
- 349:	3c 0d                	cmp    $0xd,%al
- 34b:	74 0e                	je     35b <gets+0x61>
-gets(char *buf, int max)
-{
-  int i, cc;
-  char c;
-
-  for(i=0; i+1 < max; ){
- 34d:	8b 45 f4             	mov    -0xc(%ebp),%eax
- 350:	83 c0 01             	add    $0x1,%eax
- 353:	3b 45 0c             	cmp    0xc(%ebp),%eax
- 356:	7c b1                	jl     309 <gets+0xf>
- 358:	eb 01                	jmp    35b <gets+0x61>
-    cc = read(0, &c, 1);
-    if(cc < 1)
-      break;
- 35a:	90                   	nop
-    buf[i++] = c;
-    if(c == '\n' || c == '\r')
-      break;
-  }
-  buf[i] = '\0';
- 35b:	8b 45 f4             	mov    -0xc(%ebp),%eax
- 35e:	03 45 08             	add    0x8(%ebp),%eax
- 361:	c6 00 00             	movb   $0x0,(%eax)
-  return buf;
- 364:	8b 45 08             	mov    0x8(%ebp),%eax
-}
- 367:	c9                   	leave  
- 368:	c3                   	ret    
-
-00000369 <stat>:
-
-int
-stat(char *n, struct stat *st)
-{
- 369:	55                   	push   %ebp
- 36a:	89 e5                	mov    %esp,%ebp
- 36c:	83 ec 28             	sub    $0x28,%esp
-  int fd;
-  int r;
-
-  fd = open(n, O_RDONLY);
- 36f:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
- 376:	00 
- 377:	8b 45 08             	mov    0x8(%ebp),%eax
- 37a:	89 04 24             	mov    %eax,(%esp)
- 37d:	e8 06 01 00 00       	call   488 <open>
- 382:	89 45 f4             	mov    %eax,-0xc(%ebp)
-  if(fd < 0)
- 385:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
- 389:	79 07                	jns    392 <stat+0x29>
-    return -1;
- 38b:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
- 390:	eb 23                	jmp    3b5 <stat+0x4c>
-  r = fstat(fd, st);
- 392:	8b 45 0c             	mov    0xc(%ebp),%eax
- 395:	89 44 24 04          	mov    %eax,0x4(%esp)
- 399:	8b 45 f4             	mov    -0xc(%ebp),%eax
- 39c:	89 04 24             	mov    %eax,(%esp)
- 39f:	e8 fc 00 00 00       	call   4a0 <fstat>
- 3a4:	89 45 f0             	mov    %eax,-0x10(%ebp)
-  close(fd);
- 3a7:	8b 45 f4             	mov    -0xc(%ebp),%eax
- 3aa:	89 04 24             	mov    %eax,(%esp)
- 3ad:	e8 be 00 00 00       	call   470 <close>
-  return r;
- 3b2:	8b 45 f0             	mov    -0x10(%ebp),%eax
-}
- 3b5:	c9                   	leave  
- 3b6:	c3                   	ret    
-
-000003b7 <atoi>:
-
-int
-atoi(const char *s)
-{
- 3b7:	55                   	push   %ebp
- 3b8:	89 e5                	mov    %esp,%ebp
- 3ba:	83 ec 10             	sub    $0x10,%esp
-  int n;
-
-  n = 0;
- 3bd:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
-  while('0' <= *s && *s <= '9')
- 3c4:	eb 23                	jmp    3e9 <atoi+0x32>
-    n = n*10 + *s++ - '0';
- 3c6:	8b 55 fc             	mov    -0x4(%ebp),%edx
- 3c9:	89 d0                	mov    %edx,%eax
- 3cb:	c1 e0 02             	shl    $0x2,%eax
- 3ce:	01 d0                	add    %edx,%eax
- 3d0:	01 c0                	add    %eax,%eax
- 3d2:	89 c2                	mov    %eax,%edx
- 3d4:	8b 45 08             	mov    0x8(%ebp),%eax
- 3d7:	0f b6 00             	movzbl (%eax),%eax
- 3da:	0f be c0             	movsbl %al,%eax
- 3dd:	01 d0                	add    %edx,%eax
- 3df:	83 e8 30             	sub    $0x30,%eax
- 3e2:	89 45 fc             	mov    %eax,-0x4(%ebp)
- 3e5:	83 45 08 01          	addl   $0x1,0x8(%ebp)
-atoi(const char *s)
-{
-  int n;
-
-  n = 0;
-  while('0' <= *s && *s <= '9')
- 3e9:	8b 45 08             	mov    0x8(%ebp),%eax
- 3ec:	0f b6 00             	movzbl (%eax),%eax
- 3ef:	3c 2f                	cmp    $0x2f,%al
- 3f1:	7e 0a                	jle    3fd <atoi+0x46>
- 3f3:	8b 45 08             	mov    0x8(%ebp),%eax
- 3f6:	0f b6 00             	movzbl (%eax),%eax
- 3f9:	3c 39                	cmp    $0x39,%al
- 3fb:	7e c9                	jle    3c6 <atoi+0xf>
-    n = n*10 + *s++ - '0';
-  return n;
- 3fd:	8b 45 fc             	mov    -0x4(%ebp),%eax
-}
- 400:	c9                   	leave  
- 401:	c3                   	ret    
-
-00000402 <memmove>:
-
-void*
-memmove(void *vdst, void *vsrc, int n)
-{
- 402:	55                   	push   %ebp
- 403:	89 e5                	mov    %esp,%ebp
- 405:	83 ec 10             	sub    $0x10,%esp
-  char *dst, *src;
-  
-  dst = vdst;
- 408:	8b 45 08             	mov    0x8(%ebp),%eax
- 40b:	89 45 fc             	mov    %eax,-0x4(%ebp)
-  src = vsrc;
- 40e:	8b 45 0c             	mov    0xc(%ebp),%eax
- 411:	89 45 f8             	mov    %eax,-0x8(%ebp)
-  while(n-- > 0)
- 414:	eb 13                	jmp    429 <memmove+0x27>
-    *dst++ = *src++;
- 416:	8b 45 f8             	mov    -0x8(%ebp),%eax
- 419:	0f b6 10             	movzbl (%eax),%edx
- 41c:	8b 45 fc             	mov    -0x4(%ebp),%eax
- 41f:	88 10                	mov    %dl,(%eax)
- 421:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
- 425:	83 45 f8 01          	addl   $0x1,-0x8(%ebp)
-{
-  char *dst, *src;
-  
-  dst = vdst;
-  src = vsrc;
-  while(n-- > 0)
- 429:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
- 42d:	0f 9f c0             	setg   %al
- 430:	83 6d 10 01          	subl   $0x1,0x10(%ebp)
- 434:	84 c0                	test   %al,%al
- 436:	75 de                	jne    416 <memmove+0x14>
-    *dst++ = *src++;
-  return vdst;
- 438:	8b 45 08             	mov    0x8(%ebp),%eax
-}
- 43b:	c9                   	leave  
- 43c:	c3                   	ret    
- 43d:	90                   	nop
- 43e:	90                   	nop
- 43f:	90                   	nop
-
-00000440 <fork>:
-  name: \
-    movl $SYS_ ## name, %eax; \
-    int $T_SYSCALL; \
-    ret
-
-SYSCALL(fork)
- 440:	b8 01 00 00 00       	mov    $0x1,%eax
- 445:	cd 40                	int    $0x40
- 447:	c3                   	ret    
-
-00000448 <exit>:
-SYSCALL(exit)
- 448:	b8 02 00 00 00       	mov    $0x2,%eax
- 44d:	cd 40                	int    $0x40
- 44f:	c3                   	ret    
-
-00000450 <wait>:
-SYSCALL(wait)
- 450:	b8 03 00 00 00       	mov    $0x3,%eax
- 455:	cd 40                	int    $0x40
- 457:	c3                   	ret    
-
-00000458 <pipe>:
-SYSCALL(pipe)
- 458:	b8 04 00 00 00       	mov    $0x4,%eax
- 45d:	cd 40                	int    $0x40
- 45f:	c3                   	ret    
-
-00000460 <read>:
-SYSCALL(read)
- 460:	b8 05 00 00 00       	mov    $0x5,%eax
- 465:	cd 40                	int    $0x40
- 467:	c3                   	ret    
-
-00000468 <write>:
-SYSCALL(write)
- 468:	b8 10 00 00 00       	mov    $0x10,%eax
- 46d:	cd 40                	int    $0x40
- 46f:	c3                   	ret    
-
-00000470 <close>:
-SYSCALL(close)
- 470:	b8 15 00 00 00       	mov    $0x15,%eax
- 475:	cd 40                	int    $0x40
- 477:	c3                   	ret    
-
-00000478 <kill>:
-SYSCALL(kill)
- 478:	b8 06 00 00 00       	mov    $0x6,%eax
- 47d:	cd 40                	int    $0x40
- 47f:	c3                   	ret    
-
-00000480 <exec>:
-SYSCALL(exec)
- 480:	b8 07 00 00 00       	mov    $0x7,%eax
- 485:	cd 40                	int    $0x40
- 487:	c3                   	ret    
-
-00000488 <open>:
-SYSCALL(open)
- 488:	b8 0f 00 00 00       	mov    $0xf,%eax
- 48d:	cd 40                	int    $0x40
- 48f:	c3                   	ret    
-
-00000490 <mknod>:
-SYSCALL(mknod)
- 490:	b8 11 00 00 00       	mov    $0x11,%eax
- 495:	cd 40                	int    $0x40
- 497:	c3                   	ret    
-
-00000498 <unlink>:
-SYSCALL(unlink)
- 498:	b8 12 00 00 00       	mov    $0x12,%eax
- 49d:	cd 40                	int    $0x40
- 49f:	c3                   	ret    
-
-000004a0 <fstat>:
-SYSCALL(fstat)
- 4a0:	b8 08 00 00 00       	mov    $0x8,%eax
- 4a5:	cd 40                	int    $0x40
- 4a7:	c3                   	ret    
-
-000004a8 <link>:
-SYSCALL(link)
- 4a8:	b8 13 00 00 00       	mov    $0x13,%eax
- 4ad:	cd 40                	int    $0x40
- 4af:	c3                   	ret    
-
-000004b0 <mkdir>:
-SYSCALL(mkdir)
- 4b0:	b8 14 00 00 00       	mov    $0x14,%eax
- 4b5:	cd 40                	int    $0x40
- 4b7:	c3                   	ret    
-
-000004b8 <chdir>:
-SYSCALL(chdir)
- 4b8:	b8 09 00 00 00       	mov    $0x9,%eax
- 4bd:	cd 40                	int    $0x40
- 4bf:	c3                   	ret    
-
-000004c0 <dup>:
-SYSCALL(dup)
- 4c0:	b8 0a 00 00 00       	mov    $0xa,%eax
- 4c5:	cd 40                	int    $0x40
- 4c7:	c3                   	ret    
-
-000004c8 <getpid>:
-SYSCALL(getpid)
- 4c8:	b8 0b 00 00 00       	mov    $0xb,%eax
- 4cd:	cd 40                	int    $0x40
- 4cf:	c3                   	ret    
-
-000004d0 <sbrk>:
-SYSCALL(sbrk)
- 4d0:	b8 0c 00 00 00       	mov    $0xc,%eax
- 4d5:	cd 40                	int    $0x40
- 4d7:	c3                   	ret    
-
-000004d8 <sleep>:
-SYSCALL(sleep)
- 4d8:	b8 0d 00 00 00       	mov    $0xd,%eax
- 4dd:	cd 40                	int    $0x40
- 4df:	c3                   	ret    
-
-000004e0 <uptime>:
-SYSCALL(uptime)
- 4e0:	b8 0e 00 00 00       	mov    $0xe,%eax
- 4e5:	cd 40                	int    $0x40
- 4e7:	c3                   	ret    
-
-000004e8 <waitpid>:
-SYSCALL(waitpid)
- 4e8:	b8 16 00 00 00       	mov    $0x16,%eax
- 4ed:	cd 40                	int    $0x40
- 4ef:	c3                   	ret    
-
-000004f0 <wait_stat>:
-SYSCALL(wait_stat)
- 4f0:	b8 17 00 00 00       	mov    $0x17,%eax
- 4f5:	cd 40                	int    $0x40
- 4f7:	c3                   	ret    
-
-000004f8 <list_pgroup>:
-SYSCALL(list_pgroup)
- 4f8:	b8 18 00 00 00       	mov    $0x18,%eax
- 4fd:	cd 40                	int    $0x40
- 4ff:	c3                   	ret    
-
-00000500 <foreground>:
-SYSCALL(foreground)
- 500:	b8 19 00 00 00       	mov    $0x19,%eax
- 505:	cd 40                	int    $0x40
- 507:	c3                   	ret    
-
-00000508 <set_priority>:
-SYSCALL(set_priority)
- 508:	b8 1a 00 00 00       	mov    $0x1a,%eax
- 50d:	cd 40                	int    $0x40
- 50f:	c3                   	ret    
-
-00000510 <putc>:
-#include "stat.h"
-#include "user.h"
-
-static void
-putc(int fd, char c)
-{
- 510:	55                   	push   %ebp
- 511:	89 e5                	mov    %esp,%ebp
- 513:	83 ec 28             	sub    $0x28,%esp
- 516:	8b 45 0c             	mov    0xc(%ebp),%eax
- 519:	88 45 f4             	mov    %al,-0xc(%ebp)
-  write(fd, &c, 1);
- 51c:	c7 44 24 08 01 00 00 	movl   $0x1,0x8(%esp)
- 523:	00 
- 524:	8d 45 f4             	lea    -0xc(%ebp),%eax
- 527:	89 44 24 04          	mov    %eax,0x4(%esp)
- 52b:	8b 45 08             	mov    0x8(%ebp),%eax
- 52e:	89 04 24             	mov    %eax,(%esp)
- 531:	e8 32 ff ff ff       	call   468 <write>
-}
- 536:	c9                   	leave  
- 537:	c3                   	ret    
-
-00000538 <printint>:
-
-static void
-printint(int fd, int xx, int base, int sgn)
-{
- 538:	55                   	push   %ebp
- 539:	89 e5                	mov    %esp,%ebp
- 53b:	83 ec 48             	sub    $0x48,%esp
-  static char digits[] = "0123456789ABCDEF";
-  char buf[16];
-  int i, neg;
-  uint x;
-
-  neg = 0;
- 53e:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
-  if(sgn && xx < 0){
- 545:	83 7d 14 00          	cmpl   $0x0,0x14(%ebp)
- 549:	74 17                	je     562 <printint+0x2a>
- 54b:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
- 54f:	79 11                	jns    562 <printint+0x2a>
-    neg = 1;
- 551:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
-    x = -xx;
- 558:	8b 45 0c             	mov    0xc(%ebp),%eax
- 55b:	f7 d8                	neg    %eax
- 55d:	89 45 ec             	mov    %eax,-0x14(%ebp)
- 560:	eb 06                	jmp    568 <printint+0x30>
-  } else {
-    x = xx;
- 562:	8b 45 0c             	mov    0xc(%ebp),%eax
- 565:	89 45 ec             	mov    %eax,-0x14(%ebp)
-  }
-
-  i = 0;
- 568:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
-  do{
-    buf[i++] = digits[x % base];
- 56f:	8b 4d 10             	mov    0x10(%ebp),%ecx
- 572:	8b 45 ec             	mov    -0x14(%ebp),%eax
- 575:	ba 00 00 00 00       	mov    $0x0,%edx
- 57a:	f7 f1                	div    %ecx
- 57c:	89 d0                	mov    %edx,%eax
- 57e:	0f b6 90 48 0c 00 00 	movzbl 0xc48(%eax),%edx
- 585:	8d 45 dc             	lea    -0x24(%ebp),%eax
- 588:	03 45 f4             	add    -0xc(%ebp),%eax
- 58b:	88 10                	mov    %dl,(%eax)
- 58d:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
-  }while((x /= base) != 0);
- 591:	8b 55 10             	mov    0x10(%ebp),%edx
- 594:	89 55 d4             	mov    %edx,-0x2c(%ebp)
- 597:	8b 45 ec             	mov    -0x14(%ebp),%eax
- 59a:	ba 00 00 00 00       	mov    $0x0,%edx
- 59f:	f7 75 d4             	divl   -0x2c(%ebp)
- 5a2:	89 45 ec             	mov    %eax,-0x14(%ebp)
- 5a5:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
- 5a9:	75 c4                	jne    56f <printint+0x37>
-  if(neg)
- 5ab:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
- 5af:	74 2a                	je     5db <printint+0xa3>
-    buf[i++] = '-';
- 5b1:	8d 45 dc             	lea    -0x24(%ebp),%eax
- 5b4:	03 45 f4             	add    -0xc(%ebp),%eax
- 5b7:	c6 00 2d             	movb   $0x2d,(%eax)
- 5ba:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
-
-  while(--i >= 0)
- 5be:	eb 1b                	jmp    5db <printint+0xa3>
-    putc(fd, buf[i]);
- 5c0:	8d 45 dc             	lea    -0x24(%ebp),%eax
- 5c3:	03 45 f4             	add    -0xc(%ebp),%eax
- 5c6:	0f b6 00             	movzbl (%eax),%eax
- 5c9:	0f be c0             	movsbl %al,%eax
- 5cc:	89 44 24 04          	mov    %eax,0x4(%esp)
- 5d0:	8b 45 08             	mov    0x8(%ebp),%eax
- 5d3:	89 04 24             	mov    %eax,(%esp)
- 5d6:	e8 35 ff ff ff       	call   510 <putc>
-    buf[i++] = digits[x % base];
-  }while((x /= base) != 0);
-  if(neg)
-    buf[i++] = '-';
-
-  while(--i >= 0)
- 5db:	83 6d f4 01          	subl   $0x1,-0xc(%ebp)
- 5df:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
- 5e3:	79 db                	jns    5c0 <printint+0x88>
-    putc(fd, buf[i]);
-}
- 5e5:	c9                   	leave  
- 5e6:	c3                   	ret    
-
-000005e7 <printf>:
-
-// Print to the given fd. Only understands %d, %x, %p, %s.
-void
-printf(int fd, char *fmt, ...)
-{
- 5e7:	55                   	push   %ebp
- 5e8:	89 e5                	mov    %esp,%ebp
- 5ea:	83 ec 38             	sub    $0x38,%esp
-  char *s;
-  int c, i, state;
-  uint *ap;
-
-  state = 0;
- 5ed:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
-  ap = (uint*)(void*)&fmt + 1;
- 5f4:	8d 45 0c             	lea    0xc(%ebp),%eax
- 5f7:	83 c0 04             	add    $0x4,%eax
- 5fa:	89 45 e8             	mov    %eax,-0x18(%ebp)
-  for(i = 0; fmt[i]; i++){
- 5fd:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
- 604:	e9 7d 01 00 00       	jmp    786 <printf+0x19f>
-    c = fmt[i] & 0xff;
- 609:	8b 55 0c             	mov    0xc(%ebp),%edx
- 60c:	8b 45 f0             	mov    -0x10(%ebp),%eax
- 60f:	01 d0                	add    %edx,%eax
- 611:	0f b6 00             	movzbl (%eax),%eax
- 614:	0f be c0             	movsbl %al,%eax
- 617:	25 ff 00 00 00       	and    $0xff,%eax
- 61c:	89 45 e4             	mov    %eax,-0x1c(%ebp)
-    if(state == 0){
- 61f:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
- 623:	75 2c                	jne    651 <printf+0x6a>
-      if(c == '%'){
- 625:	83 7d e4 25          	cmpl   $0x25,-0x1c(%ebp)
- 629:	75 0c                	jne    637 <printf+0x50>
-        state = '%';
- 62b:	c7 45 ec 25 00 00 00 	movl   $0x25,-0x14(%ebp)
- 632:	e9 4b 01 00 00       	jmp    782 <printf+0x19b>
-      } else {
-        putc(fd, c);
- 637:	8b 45 e4             	mov    -0x1c(%ebp),%eax
- 63a:	0f be c0             	movsbl %al,%eax
- 63d:	89 44 24 04          	mov    %eax,0x4(%esp)
- 641:	8b 45 08             	mov    0x8(%ebp),%eax
- 644:	89 04 24             	mov    %eax,(%esp)
- 647:	e8 c4 fe ff ff       	call   510 <putc>
- 64c:	e9 31 01 00 00       	jmp    782 <printf+0x19b>
-      }
-    } else if(state == '%'){
- 651:	83 7d ec 25          	cmpl   $0x25,-0x14(%ebp)
- 655:	0f 85 27 01 00 00    	jne    782 <printf+0x19b>
-      if(c == 'd'){
- 65b:	83 7d e4 64          	cmpl   $0x64,-0x1c(%ebp)
- 65f:	75 2d                	jne    68e <printf+0xa7>
-        printint(fd, *ap, 10, 1);
- 661:	8b 45 e8             	mov    -0x18(%ebp),%eax
- 664:	8b 00                	mov    (%eax),%eax
- 666:	c7 44 24 0c 01 00 00 	movl   $0x1,0xc(%esp)
- 66d:	00 
- 66e:	c7 44 24 08 0a 00 00 	movl   $0xa,0x8(%esp)
- 675:	00 
- 676:	89 44 24 04          	mov    %eax,0x4(%esp)
- 67a:	8b 45 08             	mov    0x8(%ebp),%eax
- 67d:	89 04 24             	mov    %eax,(%esp)
- 680:	e8 b3 fe ff ff       	call   538 <printint>
-        ap++;
- 685:	83 45 e8 04          	addl   $0x4,-0x18(%ebp)
- 689:	e9 ed 00 00 00       	jmp    77b <printf+0x194>
-      } else if(c == 'x' || c == 'p'){
- 68e:	83 7d e4 78          	cmpl   $0x78,-0x1c(%ebp)
- 692:	74 06                	je     69a <printf+0xb3>
- 694:	83 7d e4 70          	cmpl   $0x70,-0x1c(%ebp)
- 698:	75 2d                	jne    6c7 <printf+0xe0>
-        printint(fd, *ap, 16, 0);
- 69a:	8b 45 e8             	mov    -0x18(%ebp),%eax
- 69d:	8b 00                	mov    (%eax),%eax
- 69f:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
- 6a6:	00 
- 6a7:	c7 44 24 08 10 00 00 	movl   $0x10,0x8(%esp)
- 6ae:	00 
- 6af:	89 44 24 04          	mov    %eax,0x4(%esp)
- 6b3:	8b 45 08             	mov    0x8(%ebp),%eax
- 6b6:	89 04 24             	mov    %eax,(%esp)
- 6b9:	e8 7a fe ff ff       	call   538 <printint>
-        ap++;
- 6be:	83 45 e8 04          	addl   $0x4,-0x18(%ebp)
- 6c2:	e9 b4 00 00 00       	jmp    77b <printf+0x194>
-      } else if(c == 's'){
- 6c7:	83 7d e4 73          	cmpl   $0x73,-0x1c(%ebp)
- 6cb:	75 46                	jne    713 <printf+0x12c>
-        s = (char*)*ap;
- 6cd:	8b 45 e8             	mov    -0x18(%ebp),%eax
- 6d0:	8b 00                	mov    (%eax),%eax
- 6d2:	89 45 f4             	mov    %eax,-0xc(%ebp)
-        ap++;
- 6d5:	83 45 e8 04          	addl   $0x4,-0x18(%ebp)
-        if(s == 0)
- 6d9:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
- 6dd:	75 27                	jne    706 <printf+0x11f>
-          s = "(null)";
- 6df:	c7 45 f4 e3 09 00 00 	movl   $0x9e3,-0xc(%ebp)
-        while(*s != 0){
- 6e6:	eb 1e                	jmp    706 <printf+0x11f>
-          putc(fd, *s);
- 6e8:	8b 45 f4             	mov    -0xc(%ebp),%eax
- 6eb:	0f b6 00             	movzbl (%eax),%eax
- 6ee:	0f be c0             	movsbl %al,%eax
- 6f1:	89 44 24 04          	mov    %eax,0x4(%esp)
- 6f5:	8b 45 08             	mov    0x8(%ebp),%eax
- 6f8:	89 04 24             	mov    %eax,(%esp)
- 6fb:	e8 10 fe ff ff       	call   510 <putc>
-          s++;
- 700:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
- 704:	eb 01                	jmp    707 <printf+0x120>
-      } else if(c == 's'){
-        s = (char*)*ap;
-        ap++;
-        if(s == 0)
-          s = "(null)";
-        while(*s != 0){
- 706:	90                   	nop
- 707:	8b 45 f4             	mov    -0xc(%ebp),%eax
- 70a:	0f b6 00             	movzbl (%eax),%eax
- 70d:	84 c0                	test   %al,%al
- 70f:	75 d7                	jne    6e8 <printf+0x101>
- 711:	eb 68                	jmp    77b <printf+0x194>
-          putc(fd, *s);
-          s++;
-        }
-      } else if(c == 'c'){
- 713:	83 7d e4 63          	cmpl   $0x63,-0x1c(%ebp)
- 717:	75 1d                	jne    736 <printf+0x14f>
-        putc(fd, *ap);
- 719:	8b 45 e8             	mov    -0x18(%ebp),%eax
- 71c:	8b 00                	mov    (%eax),%eax
- 71e:	0f be c0             	movsbl %al,%eax
- 721:	89 44 24 04          	mov    %eax,0x4(%esp)
- 725:	8b 45 08             	mov    0x8(%ebp),%eax
- 728:	89 04 24             	mov    %eax,(%esp)
- 72b:	e8 e0 fd ff ff       	call   510 <putc>
-        ap++;
- 730:	83 45 e8 04          	addl   $0x4,-0x18(%ebp)
- 734:	eb 45                	jmp    77b <printf+0x194>
-      } else if(c == '%'){
- 736:	83 7d e4 25          	cmpl   $0x25,-0x1c(%ebp)
- 73a:	75 17                	jne    753 <printf+0x16c>
-        putc(fd, c);
- 73c:	8b 45 e4             	mov    -0x1c(%ebp),%eax
- 73f:	0f be c0             	movsbl %al,%eax
- 742:	89 44 24 04          	mov    %eax,0x4(%esp)
- 746:	8b 45 08             	mov    0x8(%ebp),%eax
- 749:	89 04 24             	mov    %eax,(%esp)
- 74c:	e8 bf fd ff ff       	call   510 <putc>
- 751:	eb 28                	jmp    77b <printf+0x194>
-      } else {
-        // Unknown % sequence.  Print it to draw attention.
-        putc(fd, '%');
- 753:	c7 44 24 04 25 00 00 	movl   $0x25,0x4(%esp)
- 75a:	00 
- 75b:	8b 45 08             	mov    0x8(%ebp),%eax
- 75e:	89 04 24             	mov    %eax,(%esp)
- 761:	e8 aa fd ff ff       	call   510 <putc>
-        putc(fd, c);
- 766:	8b 45 e4             	mov    -0x1c(%ebp),%eax
- 769:	0f be c0             	movsbl %al,%eax
- 76c:	89 44 24 04          	mov    %eax,0x4(%esp)
- 770:	8b 45 08             	mov    0x8(%ebp),%eax
- 773:	89 04 24             	mov    %eax,(%esp)
- 776:	e8 95 fd ff ff       	call   510 <putc>
-      }
-      state = 0;
- 77b:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
-  int c, i, state;
-  uint *ap;
-
-  state = 0;
-  ap = (uint*)(void*)&fmt + 1;
-  for(i = 0; fmt[i]; i++){
- 782:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)
- 786:	8b 55 0c             	mov    0xc(%ebp),%edx
- 789:	8b 45 f0             	mov    -0x10(%ebp),%eax
- 78c:	01 d0                	add    %edx,%eax
- 78e:	0f b6 00             	movzbl (%eax),%eax
- 791:	84 c0                	test   %al,%al
- 793:	0f 85 70 fe ff ff    	jne    609 <printf+0x22>
-        putc(fd, c);
-      }
-      state = 0;
-    }
-  }
-}
- 799:	c9                   	leave  
- 79a:	c3                   	ret    
- 79b:	90                   	nop
-
-0000079c <free>:
-static Header base;
-static Header *freep;
-
-void
-free(void *ap)
-{
- 79c:	55                   	push   %ebp
- 79d:	89 e5                	mov    %esp,%ebp
- 79f:	83 ec 10             	sub    $0x10,%esp
-  Header *bp, *p;
-
-  bp = (Header*)ap - 1;
- 7a2:	8b 45 08             	mov    0x8(%ebp),%eax
- 7a5:	83 e8 08             	sub    $0x8,%eax
- 7a8:	89 45 f8             	mov    %eax,-0x8(%ebp)
-  for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
- 7ab:	a1 68 0c 00 00       	mov    0xc68,%eax
- 7b0:	89 45 fc             	mov    %eax,-0x4(%ebp)
- 7b3:	eb 24                	jmp    7d9 <free+0x3d>
-    if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
- 7b5:	8b 45 fc             	mov    -0x4(%ebp),%eax
- 7b8:	8b 00                	mov    (%eax),%eax
- 7ba:	3b 45 fc             	cmp    -0x4(%ebp),%eax
- 7bd:	77 12                	ja     7d1 <free+0x35>
- 7bf:	8b 45 f8             	mov    -0x8(%ebp),%eax
- 7c2:	3b 45 fc             	cmp    -0x4(%ebp),%eax
- 7c5:	77 24                	ja     7eb <free+0x4f>
- 7c7:	8b 45 fc             	mov    -0x4(%ebp),%eax
- 7ca:	8b 00                	mov    (%eax),%eax
- 7cc:	3b 45 f8             	cmp    -0x8(%ebp),%eax
- 7cf:	77 1a                	ja     7eb <free+0x4f>
-free(void *ap)
-{
-  Header *bp, *p;
-
-  bp = (Header*)ap - 1;
-  for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
- 7d1:	8b 45 fc             	mov    -0x4(%ebp),%eax
- 7d4:	8b 00                	mov    (%eax),%eax
- 7d6:	89 45 fc             	mov    %eax,-0x4(%ebp)
- 7d9:	8b 45 f8             	mov    -0x8(%ebp),%eax
- 7dc:	3b 45 fc             	cmp    -0x4(%ebp),%eax
- 7df:	76 d4                	jbe    7b5 <free+0x19>
- 7e1:	8b 45 fc             	mov    -0x4(%ebp),%eax
- 7e4:	8b 00                	mov    (%eax),%eax
- 7e6:	3b 45 f8             	cmp    -0x8(%ebp),%eax
- 7e9:	76 ca                	jbe    7b5 <free+0x19>
-    if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
-      break;
-  if(bp + bp->s.size == p->s.ptr){
- 7eb:	8b 45 f8             	mov    -0x8(%ebp),%eax
- 7ee:	8b 40 04             	mov    0x4(%eax),%eax
- 7f1:	c1 e0 03             	shl    $0x3,%eax
- 7f4:	89 c2                	mov    %eax,%edx
- 7f6:	03 55 f8             	add    -0x8(%ebp),%edx
- 7f9:	8b 45 fc             	mov    -0x4(%ebp),%eax
- 7fc:	8b 00                	mov    (%eax),%eax
- 7fe:	39 c2                	cmp    %eax,%edx
- 800:	75 24                	jne    826 <free+0x8a>
-    bp->s.size += p->s.ptr->s.size;
- 802:	8b 45 f8             	mov    -0x8(%ebp),%eax
- 805:	8b 50 04             	mov    0x4(%eax),%edx
- 808:	8b 45 fc             	mov    -0x4(%ebp),%eax
- 80b:	8b 00                	mov    (%eax),%eax
- 80d:	8b 40 04             	mov    0x4(%eax),%eax
- 810:	01 c2                	add    %eax,%edx
- 812:	8b 45 f8             	mov    -0x8(%ebp),%eax
- 815:	89 50 04             	mov    %edx,0x4(%eax)
-    bp->s.ptr = p->s.ptr->s.ptr;
- 818:	8b 45 fc             	mov    -0x4(%ebp),%eax
- 81b:	8b 00                	mov    (%eax),%eax
- 81d:	8b 10                	mov    (%eax),%edx
- 81f:	8b 45 f8             	mov    -0x8(%ebp),%eax
- 822:	89 10                	mov    %edx,(%eax)
- 824:	eb 0a                	jmp    830 <free+0x94>
-  } else
-    bp->s.ptr = p->s.ptr;
- 826:	8b 45 fc             	mov    -0x4(%ebp),%eax
- 829:	8b 10                	mov    (%eax),%edx
- 82b:	8b 45 f8             	mov    -0x8(%ebp),%eax
- 82e:	89 10                	mov    %edx,(%eax)
-  if(p + p->s.size == bp){
- 830:	8b 45 fc             	mov    -0x4(%ebp),%eax
- 833:	8b 40 04             	mov    0x4(%eax),%eax
- 836:	c1 e0 03             	shl    $0x3,%eax
- 839:	03 45 fc             	add    -0x4(%ebp),%eax
- 83c:	3b 45 f8             	cmp    -0x8(%ebp),%eax
- 83f:	75 20                	jne    861 <free+0xc5>
-    p->s.size += bp->s.size;
- 841:	8b 45 fc             	mov    -0x4(%ebp),%eax
- 844:	8b 50 04             	mov    0x4(%eax),%edx
- 847:	8b 45 f8             	mov    -0x8(%ebp),%eax
- 84a:	8b 40 04             	mov    0x4(%eax),%eax
- 84d:	01 c2                	add    %eax,%edx
- 84f:	8b 45 fc             	mov    -0x4(%ebp),%eax
- 852:	89 50 04             	mov    %edx,0x4(%eax)
-    p->s.ptr = bp->s.ptr;
- 855:	8b 45 f8             	mov    -0x8(%ebp),%eax
- 858:	8b 10                	mov    (%eax),%edx
- 85a:	8b 45 fc             	mov    -0x4(%ebp),%eax
- 85d:	89 10                	mov    %edx,(%eax)
- 85f:	eb 08                	jmp    869 <free+0xcd>
-  } else
-    p->s.ptr = bp;
- 861:	8b 45 fc             	mov    -0x4(%ebp),%eax
- 864:	8b 55 f8             	mov    -0x8(%ebp),%edx
- 867:	89 10                	mov    %edx,(%eax)
-  freep = p;
- 869:	8b 45 fc             	mov    -0x4(%ebp),%eax
- 86c:	a3 68 0c 00 00       	mov    %eax,0xc68
-}
- 871:	c9                   	leave  
- 872:	c3                   	ret    
-
-00000873 <morecore>:
-
-static Header*
-morecore(uint nu)
-{
- 873:	55                   	push   %ebp
- 874:	89 e5                	mov    %esp,%ebp
- 876:	83 ec 28             	sub    $0x28,%esp
-  char *p;
-  Header *hp;
-
-  if(nu < 4096)
- 879:	81 7d 08 ff 0f 00 00 	cmpl   $0xfff,0x8(%ebp)
- 880:	77 07                	ja     889 <morecore+0x16>
-    nu = 4096;
- 882:	c7 45 08 00 10 00 00 	movl   $0x1000,0x8(%ebp)
-  p = sbrk(nu * sizeof(Header));
- 889:	8b 45 08             	mov    0x8(%ebp),%eax
- 88c:	c1 e0 03             	shl    $0x3,%eax
- 88f:	89 04 24             	mov    %eax,(%esp)
- 892:	e8 39 fc ff ff       	call   4d0 <sbrk>
- 897:	89 45 f4             	mov    %eax,-0xc(%ebp)
-  if(p == (char*)-1)
- 89a:	83 7d f4 ff          	cmpl   $0xffffffff,-0xc(%ebp)
- 89e:	75 07                	jne    8a7 <morecore+0x34>
-    return 0;
- 8a0:	b8 00 00 00 00       	mov    $0x0,%eax
- 8a5:	eb 22                	jmp    8c9 <morecore+0x56>
-  hp = (Header*)p;
- 8a7:	8b 45 f4             	mov    -0xc(%ebp),%eax
- 8aa:	89 45 f0             	mov    %eax,-0x10(%ebp)
-  hp->s.size = nu;
- 8ad:	8b 45 f0             	mov    -0x10(%ebp),%eax
- 8b0:	8b 55 08             	mov    0x8(%ebp),%edx
- 8b3:	89 50 04             	mov    %edx,0x4(%eax)
-  free((void*)(hp + 1));
- 8b6:	8b 45 f0             	mov    -0x10(%ebp),%eax
- 8b9:	83 c0 08             	add    $0x8,%eax
- 8bc:	89 04 24             	mov    %eax,(%esp)
- 8bf:	e8 d8 fe ff ff       	call   79c <free>
-  return freep;
- 8c4:	a1 68 0c 00 00       	mov    0xc68,%eax
-}
- 8c9:	c9                   	leave  
- 8ca:	c3                   	ret    
-
-000008cb <malloc>:
-
-void*
-malloc(uint nbytes)
-{
- 8cb:	55                   	push   %ebp
- 8cc:	89 e5                	mov    %esp,%ebp
- 8ce:	83 ec 28             	sub    $0x28,%esp
-  Header *p, *prevp;
-  uint nunits;
-
-  nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;
- 8d1:	8b 45 08             	mov    0x8(%ebp),%eax
- 8d4:	83 c0 07             	add    $0x7,%eax
- 8d7:	c1 e8 03             	shr    $0x3,%eax
- 8da:	83 c0 01             	add    $0x1,%eax
- 8dd:	89 45 ec             	mov    %eax,-0x14(%ebp)
-  if((prevp = freep) == 0){
- 8e0:	a1 68 0c 00 00       	mov    0xc68,%eax
- 8e5:	89 45 f0             	mov    %eax,-0x10(%ebp)
- 8e8:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
- 8ec:	75 23                	jne    911 <malloc+0x46>
-    base.s.ptr = freep = prevp = &base;
- 8ee:	c7 45 f0 60 0c 00 00 	movl   $0xc60,-0x10(%ebp)
- 8f5:	8b 45 f0             	mov    -0x10(%ebp),%eax
- 8f8:	a3 68 0c 00 00       	mov    %eax,0xc68
- 8fd:	a1 68 0c 00 00       	mov    0xc68,%eax
- 902:	a3 60 0c 00 00       	mov    %eax,0xc60
-    base.s.size = 0;
- 907:	c7 05 64 0c 00 00 00 	movl   $0x0,0xc64
- 90e:	00 00 00 
-  }
-  for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
- 911:	8b 45 f0             	mov    -0x10(%ebp),%eax
- 914:	8b 00                	mov    (%eax),%eax
- 916:	89 45 f4             	mov    %eax,-0xc(%ebp)
-    if(p->s.size >= nunits){
- 919:	8b 45 f4             	mov    -0xc(%ebp),%eax
- 91c:	8b 40 04             	mov    0x4(%eax),%eax
- 91f:	3b 45 ec             	cmp    -0x14(%ebp),%eax
- 922:	72 4d                	jb     971 <malloc+0xa6>
-      if(p->s.size == nunits)
- 924:	8b 45 f4             	mov    -0xc(%ebp),%eax
- 927:	8b 40 04             	mov    0x4(%eax),%eax
- 92a:	3b 45 ec             	cmp    -0x14(%ebp),%eax
- 92d:	75 0c                	jne    93b <malloc+0x70>
-        prevp->s.ptr = p->s.ptr;
- 92f:	8b 45 f4             	mov    -0xc(%ebp),%eax
- 932:	8b 10                	mov    (%eax),%edx
- 934:	8b 45 f0             	mov    -0x10(%ebp),%eax
- 937:	89 10                	mov    %edx,(%eax)
- 939:	eb 26                	jmp    961 <malloc+0x96>
-      else {
-        p->s.size -= nunits;
- 93b:	8b 45 f4             	mov    -0xc(%ebp),%eax
- 93e:	8b 40 04             	mov    0x4(%eax),%eax
- 941:	89 c2                	mov    %eax,%edx
- 943:	2b 55 ec             	sub    -0x14(%ebp),%edx
- 946:	8b 45 f4             	mov    -0xc(%ebp),%eax
- 949:	89 50 04             	mov    %edx,0x4(%eax)
-        p += p->s.size;
- 94c:	8b 45 f4             	mov    -0xc(%ebp),%eax
- 94f:	8b 40 04             	mov    0x4(%eax),%eax
- 952:	c1 e0 03             	shl    $0x3,%eax
- 955:	01 45 f4             	add    %eax,-0xc(%ebp)
-        p->s.size = nunits;
- 958:	8b 45 f4             	mov    -0xc(%ebp),%eax
- 95b:	8b 55 ec             	mov    -0x14(%ebp),%edx
- 95e:	89 50 04             	mov    %edx,0x4(%eax)
-      }
-      freep = prevp;
- 961:	8b 45 f0             	mov    -0x10(%ebp),%eax
- 964:	a3 68 0c 00 00       	mov    %eax,0xc68
-      return (void*)(p + 1);
- 969:	8b 45 f4             	mov    -0xc(%ebp),%eax
- 96c:	83 c0 08             	add    $0x8,%eax
- 96f:	eb 38                	jmp    9a9 <malloc+0xde>
-    }
-    if(p == freep)
- 971:	a1 68 0c 00 00       	mov    0xc68,%eax
- 976:	39 45 f4             	cmp    %eax,-0xc(%ebp)
- 979:	75 1b                	jne    996 <malloc+0xcb>
-      if((p = morecore(nunits)) == 0)
- 97b:	8b 45 ec             	mov    -0x14(%ebp),%eax
- 97e:	89 04 24             	mov    %eax,(%esp)
- 981:	e8 ed fe ff ff       	call   873 <morecore>
- 986:	89 45 f4             	mov    %eax,-0xc(%ebp)
- 989:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
- 98d:	75 07                	jne    996 <malloc+0xcb>
-        return 0;
- 98f:	b8 00 00 00 00       	mov    $0x0,%eax
- 994:	eb 13                	jmp    9a9 <malloc+0xde>
-  nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;
-  if((prevp = freep) == 0){
-    base.s.ptr = freep = prevp = &base;
-    base.s.size = 0;
-  }
-  for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
- 996:	8b 45 f4             	mov    -0xc(%ebp),%eax
- 999:	89 45 f0             	mov    %eax,-0x10(%ebp)
- 99c:	8b 45 f4             	mov    -0xc(%ebp),%eax
- 99f:	8b 00                	mov    (%eax),%eax
- 9a1:	89 45 f4             	mov    %eax,-0xc(%ebp)
-      return (void*)(p + 1);
-    }
-    if(p == freep)
-      if((p = morecore(nunits)) == 0)
-        return 0;
-  }
- 9a4:	e9 70 ff ff ff       	jmp    919 <malloc+0x4e>
-}
- 9a9:	c9                   	leave  
- 9aa:	c3                   	ret    
diff --git a/xv6/wc.c b/xv6/wc.c
deleted file mode 100644
index dc8042a..0000000
--- a/xv6/wc.c
+++ /dev/null
@@ -1,54 +0,0 @@
-#include "types.h"
-#include "stat.h"
-#include "user.h"
-
-char buf[512];
-
-void
-wc(int fd, char *name)
-{
-  int i, n;
-  int l, w, c, inword;
-
-  l = w = c = 0;
-  inword = 0;
-  while((n = read(fd, buf, sizeof(buf))) > 0){
-    for(i=0; i<n; i++){
-      c++;
-      if(buf[i] == '\n')
-        l++;
-      if(strchr(" \r\t\n\v", buf[i]))
-        inword = 0;
-      else if(!inword){
-        w++;
-        inword = 1;
-      }
-    }
-  }
-  if(n < 0){
-    printf(1, "wc: read error\n");
-    exit(EXIT_STATUS_DEFAULT);
-  }
-  printf(1, "%d %d %d %s\n", l, w, c, name);
-}
-
-int
-main(int argc, char *argv[])
-{
-  int fd, i;
-
-  if(argc <= 1){
-    wc(0, "");
-    exit(EXIT_STATUS_DEFAULT);
-  }
-
-  for(i = 1; i < argc; i++){
-    if((fd = open(argv[i], 0)) < 0){
-      printf(1, "wc: cannot open %s\n", argv[i]);
-      exit(EXIT_STATUS_DEFAULT);
-    }
-    wc(fd, argv[i]);
-    close(fd);
-  }
-  exit(EXIT_STATUS_DEFAULT);
-}
diff --git a/xv6/wc.d b/xv6/wc.d
deleted file mode 100644
index 4f80db2..0000000
--- a/xv6/wc.d
+++ /dev/null
@@ -1 +0,0 @@
-wc.o: wc.c types.h stat.h user.h
diff --git a/xv6/wc.sym b/xv6/wc.sym
deleted file mode 100644
index 7769864..0000000
--- a/xv6/wc.sym
+++ /dev/null
@@ -1,67 +0,0 @@
-00000000 .text
-000009ab .rodata
-000009ec .eh_frame
-00000c48 .data
-00000c60 .bss
-00000000 .comment
-00000000 .debug_aranges
-00000000 .debug_info
-00000000 .debug_abbrev
-00000000 .debug_line
-00000000 .debug_str
-00000000 .debug_loc
-00000000 wc.c
-00000000 ulib.c
-000001e4 stosb
-00000000 printf.c
-00000510 putc
-00000538 printint
-00000c48 digits.923
-00000000 umalloc.c
-00000c60 base
-00000c68 freep
-00000873 morecore
-00000209 strcpy
-000004e8 waitpid
-000005e7 printf
-00000402 memmove
-00000490 mknod
-00000500 foreground
-000002fa gets
-000004c8 getpid
-000008cb malloc
-000004d8 sleep
-00000508 set_priority
-000004f0 wait_stat
-00000458 pipe
-00000468 write
-000004a0 fstat
-00000478 kill
-000004b8 chdir
-00000480 exec
-00000450 wait
-00000460 read
-00000498 unlink
-00000000 wc
-00000440 fork
-000004d0 sbrk
-000004e0 uptime
-00000c5c __bss_start
-000002a3 memset
-0000010a main
-0000023d strcmp
-000004c0 dup
-00000c80 buf
-000004f8 list_pgroup
-00000369 stat
-00000c5c _edata
-00000e80 _end
-000004a8 link
-00000448 exit
-000003b7 atoi
-0000027e strlen
-00000488 open
-000002c7 strchr
-000004b0 mkdir
-00000470 close
-0000079c free
diff --git a/xv6/x86.h b/xv6/x86.h
deleted file mode 100644
index 3949900..0000000
--- a/xv6/x86.h
+++ /dev/null
@@ -1,183 +0,0 @@
-// Routines to let C code use special x86 instructions.
-
-static inline uchar
-inb(ushort port)
-{
-  uchar data;
-
-  asm volatile("in %1,%0" : "=a" (data) : "d" (port));
-  return data;
-}
-
-static inline void
-insl(int port, void *addr, int cnt)
-{
-  asm volatile("cld; rep insl" :
-               "=D" (addr), "=c" (cnt) :
-               "d" (port), "0" (addr), "1" (cnt) :
-               "memory", "cc");
-}
-
-static inline void
-outb(ushort port, uchar data)
-{
-  asm volatile("out %0,%1" : : "a" (data), "d" (port));
-}
-
-static inline void
-outw(ushort port, ushort data)
-{
-  asm volatile("out %0,%1" : : "a" (data), "d" (port));
-}
-
-static inline void
-outsl(int port, const void *addr, int cnt)
-{
-  asm volatile("cld; rep outsl" :
-               "=S" (addr), "=c" (cnt) :
-               "d" (port), "0" (addr), "1" (cnt) :
-               "cc");
-}
-
-static inline void
-stosb(void *addr, int data, int cnt)
-{
-  asm volatile("cld; rep stosb" :
-               "=D" (addr), "=c" (cnt) :
-               "0" (addr), "1" (cnt), "a" (data) :
-               "memory", "cc");
-}
-
-static inline void
-stosl(void *addr, int data, int cnt)
-{
-  asm volatile("cld; rep stosl" :
-               "=D" (addr), "=c" (cnt) :
-               "0" (addr), "1" (cnt), "a" (data) :
-               "memory", "cc");
-}
-
-struct segdesc;
-
-static inline void
-lgdt(struct segdesc *p, int size)
-{
-  volatile ushort pd[3];
-
-  pd[0] = size-1;
-  pd[1] = (uint)p;
-  pd[2] = (uint)p >> 16;
-
-  asm volatile("lgdt (%0)" : : "r" (pd));
-}
-
-struct gatedesc;
-
-static inline void
-lidt(struct gatedesc *p, int size)
-{
-  volatile ushort pd[3];
-
-  pd[0] = size-1;
-  pd[1] = (uint)p;
-  pd[2] = (uint)p >> 16;
-
-  asm volatile("lidt (%0)" : : "r" (pd));
-}
-
-static inline void
-ltr(ushort sel)
-{
-  asm volatile("ltr %0" : : "r" (sel));
-}
-
-static inline uint
-readeflags(void)
-{
-  uint eflags;
-  asm volatile("pushfl; popl %0" : "=r" (eflags));
-  return eflags;
-}
-
-static inline void
-loadgs(ushort v)
-{
-  asm volatile("movw %0, %%gs" : : "r" (v));
-}
-
-static inline void
-cli(void)
-{
-  asm volatile("cli");
-}
-
-static inline void
-sti(void)
-{
-  asm volatile("sti");
-}
-
-static inline uint
-xchg(volatile uint *addr, uint newval)
-{
-  uint result;
-  
-  // The + in "+m" denotes a read-modify-write operand.
-  asm volatile("lock; xchgl %0, %1" :
-               "+m" (*addr), "=a" (result) :
-               "1" (newval) :
-               "cc");
-  return result;
-}
-
-static inline uint
-rcr2(void)
-{
-  uint val;
-  asm volatile("movl %%cr2,%0" : "=r" (val));
-  return val;
-}
-
-static inline void
-lcr3(uint val) 
-{
-  asm volatile("movl %0,%%cr3" : : "r" (val));
-}
-
-//PAGEBREAK: 36
-// Layout of the trap frame built on the stack by the
-// hardware and by trapasm.S, and passed to trap().
-struct trapframe {
-  // registers as pushed by pusha
-  uint edi;
-  uint esi;
-  uint ebp;
-  uint oesp;      // useless & ignored
-  uint ebx;
-  uint edx;
-  uint ecx;
-  uint eax;
-
-  // rest of trap frame
-  ushort gs;
-  ushort padding1;
-  ushort fs;
-  ushort padding2;
-  ushort es;
-  ushort padding3;
-  ushort ds;
-  ushort padding4;
-  uint trapno;
-
-  // below here defined by x86 hardware
-  uint err;
-  uint eip;
-  ushort cs;
-  ushort padding5;
-  uint eflags;
-
-  // below here only when crossing rings, such as from user to kernel
-  uint esp;
-  ushort ss;
-  ushort padding6;
-};
diff --git a/xv6/zombie.asm b/xv6/zombie.asm
deleted file mode 100644
index 94e2bba..0000000
--- a/xv6/zombie.asm
+++ /dev/null
@@ -1,1178 +0,0 @@
-
-_zombie:     file format elf32-i386
-
-
-Disassembly of section .text:
-
-00000000 <main>:
-#include "stat.h"
-#include "user.h"
-
-int
-main(void)
-{
-   0:	55                   	push   %ebp
-   1:	89 e5                	mov    %esp,%ebp
-   3:	83 e4 f0             	and    $0xfffffff0,%esp
-   6:	83 ec 10             	sub    $0x10,%esp
-  if(fork() > 0)
-   9:	e8 7a 02 00 00       	call   288 <fork>
-   e:	85 c0                	test   %eax,%eax
-  10:	7e 0c                	jle    1e <main+0x1e>
-    sleep(5);  // Let child exit before parent.
-  12:	c7 04 24 05 00 00 00 	movl   $0x5,(%esp)
-  19:	e8 02 03 00 00       	call   320 <sleep>
-  exit(EXIT_STATUS_DEFAULT);
-  1e:	c7 04 24 02 00 00 00 	movl   $0x2,(%esp)
-  25:	e8 66 02 00 00       	call   290 <exit>
-  2a:	90                   	nop
-  2b:	90                   	nop
-
-0000002c <stosb>:
-               "cc");
-}
-
-static inline void
-stosb(void *addr, int data, int cnt)
-{
-  2c:	55                   	push   %ebp
-  2d:	89 e5                	mov    %esp,%ebp
-  2f:	57                   	push   %edi
-  30:	53                   	push   %ebx
-  asm volatile("cld; rep stosb" :
-  31:	8b 4d 08             	mov    0x8(%ebp),%ecx
-  34:	8b 55 10             	mov    0x10(%ebp),%edx
-  37:	8b 45 0c             	mov    0xc(%ebp),%eax
-  3a:	89 cb                	mov    %ecx,%ebx
-  3c:	89 df                	mov    %ebx,%edi
-  3e:	89 d1                	mov    %edx,%ecx
-  40:	fc                   	cld    
-  41:	f3 aa                	rep stos %al,%es:(%edi)
-  43:	89 ca                	mov    %ecx,%edx
-  45:	89 fb                	mov    %edi,%ebx
-  47:	89 5d 08             	mov    %ebx,0x8(%ebp)
-  4a:	89 55 10             	mov    %edx,0x10(%ebp)
-               "=D" (addr), "=c" (cnt) :
-               "0" (addr), "1" (cnt), "a" (data) :
-               "memory", "cc");
-}
-  4d:	5b                   	pop    %ebx
-  4e:	5f                   	pop    %edi
-  4f:	5d                   	pop    %ebp
-  50:	c3                   	ret    
-
-00000051 <strcpy>:
-#include "user.h"
-#include "x86.h"
-
-char*
-strcpy(char *s, char *t)
-{
-  51:	55                   	push   %ebp
-  52:	89 e5                	mov    %esp,%ebp
-  54:	83 ec 10             	sub    $0x10,%esp
-  char *os;
-
-  os = s;
-  57:	8b 45 08             	mov    0x8(%ebp),%eax
-  5a:	89 45 fc             	mov    %eax,-0x4(%ebp)
-  while((*s++ = *t++) != 0)
-  5d:	90                   	nop
-  5e:	8b 45 0c             	mov    0xc(%ebp),%eax
-  61:	0f b6 10             	movzbl (%eax),%edx
-  64:	8b 45 08             	mov    0x8(%ebp),%eax
-  67:	88 10                	mov    %dl,(%eax)
-  69:	8b 45 08             	mov    0x8(%ebp),%eax
-  6c:	0f b6 00             	movzbl (%eax),%eax
-  6f:	84 c0                	test   %al,%al
-  71:	0f 95 c0             	setne  %al
-  74:	83 45 08 01          	addl   $0x1,0x8(%ebp)
-  78:	83 45 0c 01          	addl   $0x1,0xc(%ebp)
-  7c:	84 c0                	test   %al,%al
-  7e:	75 de                	jne    5e <strcpy+0xd>
-    ;
-  return os;
-  80:	8b 45 fc             	mov    -0x4(%ebp),%eax
-}
-  83:	c9                   	leave  
-  84:	c3                   	ret    
-
-00000085 <strcmp>:
-
-int
-strcmp(const char *p, const char *q)
-{
-  85:	55                   	push   %ebp
-  86:	89 e5                	mov    %esp,%ebp
-  while(*p && *p == *q)
-  88:	eb 08                	jmp    92 <strcmp+0xd>
-    p++, q++;
-  8a:	83 45 08 01          	addl   $0x1,0x8(%ebp)
-  8e:	83 45 0c 01          	addl   $0x1,0xc(%ebp)
-}
-
-int
-strcmp(const char *p, const char *q)
-{
-  while(*p && *p == *q)
-  92:	8b 45 08             	mov    0x8(%ebp),%eax
-  95:	0f b6 00             	movzbl (%eax),%eax
-  98:	84 c0                	test   %al,%al
-  9a:	74 10                	je     ac <strcmp+0x27>
-  9c:	8b 45 08             	mov    0x8(%ebp),%eax
-  9f:	0f b6 10             	movzbl (%eax),%edx
-  a2:	8b 45 0c             	mov    0xc(%ebp),%eax
-  a5:	0f b6 00             	movzbl (%eax),%eax
-  a8:	38 c2                	cmp    %al,%dl
-  aa:	74 de                	je     8a <strcmp+0x5>
-    p++, q++;
-  return (uchar)*p - (uchar)*q;
-  ac:	8b 45 08             	mov    0x8(%ebp),%eax
-  af:	0f b6 00             	movzbl (%eax),%eax
-  b2:	0f b6 d0             	movzbl %al,%edx
-  b5:	8b 45 0c             	mov    0xc(%ebp),%eax
-  b8:	0f b6 00             	movzbl (%eax),%eax
-  bb:	0f b6 c0             	movzbl %al,%eax
-  be:	89 d1                	mov    %edx,%ecx
-  c0:	29 c1                	sub    %eax,%ecx
-  c2:	89 c8                	mov    %ecx,%eax
-}
-  c4:	5d                   	pop    %ebp
-  c5:	c3                   	ret    
-
-000000c6 <strlen>:
-
-uint
-strlen(char *s)
-{
-  c6:	55                   	push   %ebp
-  c7:	89 e5                	mov    %esp,%ebp
-  c9:	83 ec 10             	sub    $0x10,%esp
-  int n;
-
-  for(n = 0; s[n]; n++)
-  cc:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
-  d3:	eb 04                	jmp    d9 <strlen+0x13>
-  d5:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
-  d9:	8b 45 fc             	mov    -0x4(%ebp),%eax
-  dc:	03 45 08             	add    0x8(%ebp),%eax
-  df:	0f b6 00             	movzbl (%eax),%eax
-  e2:	84 c0                	test   %al,%al
-  e4:	75 ef                	jne    d5 <strlen+0xf>
-    ;
-  return n;
-  e6:	8b 45 fc             	mov    -0x4(%ebp),%eax
-}
-  e9:	c9                   	leave  
-  ea:	c3                   	ret    
-
-000000eb <memset>:
-
-void*
-memset(void *dst, int c, uint n)
-{
-  eb:	55                   	push   %ebp
-  ec:	89 e5                	mov    %esp,%ebp
-  ee:	83 ec 0c             	sub    $0xc,%esp
-  stosb(dst, c, n);
-  f1:	8b 45 10             	mov    0x10(%ebp),%eax
-  f4:	89 44 24 08          	mov    %eax,0x8(%esp)
-  f8:	8b 45 0c             	mov    0xc(%ebp),%eax
-  fb:	89 44 24 04          	mov    %eax,0x4(%esp)
-  ff:	8b 45 08             	mov    0x8(%ebp),%eax
- 102:	89 04 24             	mov    %eax,(%esp)
- 105:	e8 22 ff ff ff       	call   2c <stosb>
-  return dst;
- 10a:	8b 45 08             	mov    0x8(%ebp),%eax
-}
- 10d:	c9                   	leave  
- 10e:	c3                   	ret    
-
-0000010f <strchr>:
-
-char*
-strchr(const char *s, char c)
-{
- 10f:	55                   	push   %ebp
- 110:	89 e5                	mov    %esp,%ebp
- 112:	83 ec 04             	sub    $0x4,%esp
- 115:	8b 45 0c             	mov    0xc(%ebp),%eax
- 118:	88 45 fc             	mov    %al,-0x4(%ebp)
-  for(; *s; s++)
- 11b:	eb 14                	jmp    131 <strchr+0x22>
-    if(*s == c)
- 11d:	8b 45 08             	mov    0x8(%ebp),%eax
- 120:	0f b6 00             	movzbl (%eax),%eax
- 123:	3a 45 fc             	cmp    -0x4(%ebp),%al
- 126:	75 05                	jne    12d <strchr+0x1e>
-      return (char*)s;
- 128:	8b 45 08             	mov    0x8(%ebp),%eax
- 12b:	eb 13                	jmp    140 <strchr+0x31>
-}
-
-char*
-strchr(const char *s, char c)
-{
-  for(; *s; s++)
- 12d:	83 45 08 01          	addl   $0x1,0x8(%ebp)
- 131:	8b 45 08             	mov    0x8(%ebp),%eax
- 134:	0f b6 00             	movzbl (%eax),%eax
- 137:	84 c0                	test   %al,%al
- 139:	75 e2                	jne    11d <strchr+0xe>
-    if(*s == c)
-      return (char*)s;
-  return 0;
- 13b:	b8 00 00 00 00       	mov    $0x0,%eax
-}
- 140:	c9                   	leave  
- 141:	c3                   	ret    
-
-00000142 <gets>:
-
-char*
-gets(char *buf, int max)
-{
- 142:	55                   	push   %ebp
- 143:	89 e5                	mov    %esp,%ebp
- 145:	83 ec 28             	sub    $0x28,%esp
-  int i, cc;
-  char c;
-
-  for(i=0; i+1 < max; ){
- 148:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
- 14f:	eb 44                	jmp    195 <gets+0x53>
-    cc = read(0, &c, 1);
- 151:	c7 44 24 08 01 00 00 	movl   $0x1,0x8(%esp)
- 158:	00 
- 159:	8d 45 ef             	lea    -0x11(%ebp),%eax
- 15c:	89 44 24 04          	mov    %eax,0x4(%esp)
- 160:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
- 167:	e8 3c 01 00 00       	call   2a8 <read>
- 16c:	89 45 f0             	mov    %eax,-0x10(%ebp)
-    if(cc < 1)
- 16f:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
- 173:	7e 2d                	jle    1a2 <gets+0x60>
-      break;
-    buf[i++] = c;
- 175:	8b 45 f4             	mov    -0xc(%ebp),%eax
- 178:	03 45 08             	add    0x8(%ebp),%eax
- 17b:	0f b6 55 ef          	movzbl -0x11(%ebp),%edx
- 17f:	88 10                	mov    %dl,(%eax)
- 181:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
-    if(c == '\n' || c == '\r')
- 185:	0f b6 45 ef          	movzbl -0x11(%ebp),%eax
- 189:	3c 0a                	cmp    $0xa,%al
- 18b:	74 16                	je     1a3 <gets+0x61>
- 18d:	0f b6 45 ef          	movzbl -0x11(%ebp),%eax
- 191:	3c 0d                	cmp    $0xd,%al
- 193:	74 0e                	je     1a3 <gets+0x61>
-gets(char *buf, int max)
-{
-  int i, cc;
-  char c;
-
-  for(i=0; i+1 < max; ){
- 195:	8b 45 f4             	mov    -0xc(%ebp),%eax
- 198:	83 c0 01             	add    $0x1,%eax
- 19b:	3b 45 0c             	cmp    0xc(%ebp),%eax
- 19e:	7c b1                	jl     151 <gets+0xf>
- 1a0:	eb 01                	jmp    1a3 <gets+0x61>
-    cc = read(0, &c, 1);
-    if(cc < 1)
-      break;
- 1a2:	90                   	nop
-    buf[i++] = c;
-    if(c == '\n' || c == '\r')
-      break;
-  }
-  buf[i] = '\0';
- 1a3:	8b 45 f4             	mov    -0xc(%ebp),%eax
- 1a6:	03 45 08             	add    0x8(%ebp),%eax
- 1a9:	c6 00 00             	movb   $0x0,(%eax)
-  return buf;
- 1ac:	8b 45 08             	mov    0x8(%ebp),%eax
-}
- 1af:	c9                   	leave  
- 1b0:	c3                   	ret    
-
-000001b1 <stat>:
-
-int
-stat(char *n, struct stat *st)
-{
- 1b1:	55                   	push   %ebp
- 1b2:	89 e5                	mov    %esp,%ebp
- 1b4:	83 ec 28             	sub    $0x28,%esp
-  int fd;
-  int r;
-
-  fd = open(n, O_RDONLY);
- 1b7:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
- 1be:	00 
- 1bf:	8b 45 08             	mov    0x8(%ebp),%eax
- 1c2:	89 04 24             	mov    %eax,(%esp)
- 1c5:	e8 06 01 00 00       	call   2d0 <open>
- 1ca:	89 45 f4             	mov    %eax,-0xc(%ebp)
-  if(fd < 0)
- 1cd:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
- 1d1:	79 07                	jns    1da <stat+0x29>
-    return -1;
- 1d3:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
- 1d8:	eb 23                	jmp    1fd <stat+0x4c>
-  r = fstat(fd, st);
- 1da:	8b 45 0c             	mov    0xc(%ebp),%eax
- 1dd:	89 44 24 04          	mov    %eax,0x4(%esp)
- 1e1:	8b 45 f4             	mov    -0xc(%ebp),%eax
- 1e4:	89 04 24             	mov    %eax,(%esp)
- 1e7:	e8 fc 00 00 00       	call   2e8 <fstat>
- 1ec:	89 45 f0             	mov    %eax,-0x10(%ebp)
-  close(fd);
- 1ef:	8b 45 f4             	mov    -0xc(%ebp),%eax
- 1f2:	89 04 24             	mov    %eax,(%esp)
- 1f5:	e8 be 00 00 00       	call   2b8 <close>
-  return r;
- 1fa:	8b 45 f0             	mov    -0x10(%ebp),%eax
-}
- 1fd:	c9                   	leave  
- 1fe:	c3                   	ret    
-
-000001ff <atoi>:
-
-int
-atoi(const char *s)
-{
- 1ff:	55                   	push   %ebp
- 200:	89 e5                	mov    %esp,%ebp
- 202:	83 ec 10             	sub    $0x10,%esp
-  int n;
-
-  n = 0;
- 205:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
-  while('0' <= *s && *s <= '9')
- 20c:	eb 23                	jmp    231 <atoi+0x32>
-    n = n*10 + *s++ - '0';
- 20e:	8b 55 fc             	mov    -0x4(%ebp),%edx
- 211:	89 d0                	mov    %edx,%eax
- 213:	c1 e0 02             	shl    $0x2,%eax
- 216:	01 d0                	add    %edx,%eax
- 218:	01 c0                	add    %eax,%eax
- 21a:	89 c2                	mov    %eax,%edx
- 21c:	8b 45 08             	mov    0x8(%ebp),%eax
- 21f:	0f b6 00             	movzbl (%eax),%eax
- 222:	0f be c0             	movsbl %al,%eax
- 225:	01 d0                	add    %edx,%eax
- 227:	83 e8 30             	sub    $0x30,%eax
- 22a:	89 45 fc             	mov    %eax,-0x4(%ebp)
- 22d:	83 45 08 01          	addl   $0x1,0x8(%ebp)
-atoi(const char *s)
-{
-  int n;
-
-  n = 0;
-  while('0' <= *s && *s <= '9')
- 231:	8b 45 08             	mov    0x8(%ebp),%eax
- 234:	0f b6 00             	movzbl (%eax),%eax
- 237:	3c 2f                	cmp    $0x2f,%al
- 239:	7e 0a                	jle    245 <atoi+0x46>
- 23b:	8b 45 08             	mov    0x8(%ebp),%eax
- 23e:	0f b6 00             	movzbl (%eax),%eax
- 241:	3c 39                	cmp    $0x39,%al
- 243:	7e c9                	jle    20e <atoi+0xf>
-    n = n*10 + *s++ - '0';
-  return n;
- 245:	8b 45 fc             	mov    -0x4(%ebp),%eax
-}
- 248:	c9                   	leave  
- 249:	c3                   	ret    
-
-0000024a <memmove>:
-
-void*
-memmove(void *vdst, void *vsrc, int n)
-{
- 24a:	55                   	push   %ebp
- 24b:	89 e5                	mov    %esp,%ebp
- 24d:	83 ec 10             	sub    $0x10,%esp
-  char *dst, *src;
-  
-  dst = vdst;
- 250:	8b 45 08             	mov    0x8(%ebp),%eax
- 253:	89 45 fc             	mov    %eax,-0x4(%ebp)
-  src = vsrc;
- 256:	8b 45 0c             	mov    0xc(%ebp),%eax
- 259:	89 45 f8             	mov    %eax,-0x8(%ebp)
-  while(n-- > 0)
- 25c:	eb 13                	jmp    271 <memmove+0x27>
-    *dst++ = *src++;
- 25e:	8b 45 f8             	mov    -0x8(%ebp),%eax
- 261:	0f b6 10             	movzbl (%eax),%edx
- 264:	8b 45 fc             	mov    -0x4(%ebp),%eax
- 267:	88 10                	mov    %dl,(%eax)
- 269:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
- 26d:	83 45 f8 01          	addl   $0x1,-0x8(%ebp)
-{
-  char *dst, *src;
-  
-  dst = vdst;
-  src = vsrc;
-  while(n-- > 0)
- 271:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
- 275:	0f 9f c0             	setg   %al
- 278:	83 6d 10 01          	subl   $0x1,0x10(%ebp)
- 27c:	84 c0                	test   %al,%al
- 27e:	75 de                	jne    25e <memmove+0x14>
-    *dst++ = *src++;
-  return vdst;
- 280:	8b 45 08             	mov    0x8(%ebp),%eax
-}
- 283:	c9                   	leave  
- 284:	c3                   	ret    
- 285:	90                   	nop
- 286:	90                   	nop
- 287:	90                   	nop
-
-00000288 <fork>:
-  name: \
-    movl $SYS_ ## name, %eax; \
-    int $T_SYSCALL; \
-    ret
-
-SYSCALL(fork)
- 288:	b8 01 00 00 00       	mov    $0x1,%eax
- 28d:	cd 40                	int    $0x40
- 28f:	c3                   	ret    
-
-00000290 <exit>:
-SYSCALL(exit)
- 290:	b8 02 00 00 00       	mov    $0x2,%eax
- 295:	cd 40                	int    $0x40
- 297:	c3                   	ret    
-
-00000298 <wait>:
-SYSCALL(wait)
- 298:	b8 03 00 00 00       	mov    $0x3,%eax
- 29d:	cd 40                	int    $0x40
- 29f:	c3                   	ret    
-
-000002a0 <pipe>:
-SYSCALL(pipe)
- 2a0:	b8 04 00 00 00       	mov    $0x4,%eax
- 2a5:	cd 40                	int    $0x40
- 2a7:	c3                   	ret    
-
-000002a8 <read>:
-SYSCALL(read)
- 2a8:	b8 05 00 00 00       	mov    $0x5,%eax
- 2ad:	cd 40                	int    $0x40
- 2af:	c3                   	ret    
-
-000002b0 <write>:
-SYSCALL(write)
- 2b0:	b8 10 00 00 00       	mov    $0x10,%eax
- 2b5:	cd 40                	int    $0x40
- 2b7:	c3                   	ret    
-
-000002b8 <close>:
-SYSCALL(close)
- 2b8:	b8 15 00 00 00       	mov    $0x15,%eax
- 2bd:	cd 40                	int    $0x40
- 2bf:	c3                   	ret    
-
-000002c0 <kill>:
-SYSCALL(kill)
- 2c0:	b8 06 00 00 00       	mov    $0x6,%eax
- 2c5:	cd 40                	int    $0x40
- 2c7:	c3                   	ret    
-
-000002c8 <exec>:
-SYSCALL(exec)
- 2c8:	b8 07 00 00 00       	mov    $0x7,%eax
- 2cd:	cd 40                	int    $0x40
- 2cf:	c3                   	ret    
-
-000002d0 <open>:
-SYSCALL(open)
- 2d0:	b8 0f 00 00 00       	mov    $0xf,%eax
- 2d5:	cd 40                	int    $0x40
- 2d7:	c3                   	ret    
-
-000002d8 <mknod>:
-SYSCALL(mknod)
- 2d8:	b8 11 00 00 00       	mov    $0x11,%eax
- 2dd:	cd 40                	int    $0x40
- 2df:	c3                   	ret    
-
-000002e0 <unlink>:
-SYSCALL(unlink)
- 2e0:	b8 12 00 00 00       	mov    $0x12,%eax
- 2e5:	cd 40                	int    $0x40
- 2e7:	c3                   	ret    
-
-000002e8 <fstat>:
-SYSCALL(fstat)
- 2e8:	b8 08 00 00 00       	mov    $0x8,%eax
- 2ed:	cd 40                	int    $0x40
- 2ef:	c3                   	ret    
-
-000002f0 <link>:
-SYSCALL(link)
- 2f0:	b8 13 00 00 00       	mov    $0x13,%eax
- 2f5:	cd 40                	int    $0x40
- 2f7:	c3                   	ret    
-
-000002f8 <mkdir>:
-SYSCALL(mkdir)
- 2f8:	b8 14 00 00 00       	mov    $0x14,%eax
- 2fd:	cd 40                	int    $0x40
- 2ff:	c3                   	ret    
-
-00000300 <chdir>:
-SYSCALL(chdir)
- 300:	b8 09 00 00 00       	mov    $0x9,%eax
- 305:	cd 40                	int    $0x40
- 307:	c3                   	ret    
-
-00000308 <dup>:
-SYSCALL(dup)
- 308:	b8 0a 00 00 00       	mov    $0xa,%eax
- 30d:	cd 40                	int    $0x40
- 30f:	c3                   	ret    
-
-00000310 <getpid>:
-SYSCALL(getpid)
- 310:	b8 0b 00 00 00       	mov    $0xb,%eax
- 315:	cd 40                	int    $0x40
- 317:	c3                   	ret    
-
-00000318 <sbrk>:
-SYSCALL(sbrk)
- 318:	b8 0c 00 00 00       	mov    $0xc,%eax
- 31d:	cd 40                	int    $0x40
- 31f:	c3                   	ret    
-
-00000320 <sleep>:
-SYSCALL(sleep)
- 320:	b8 0d 00 00 00       	mov    $0xd,%eax
- 325:	cd 40                	int    $0x40
- 327:	c3                   	ret    
-
-00000328 <uptime>:
-SYSCALL(uptime)
- 328:	b8 0e 00 00 00       	mov    $0xe,%eax
- 32d:	cd 40                	int    $0x40
- 32f:	c3                   	ret    
-
-00000330 <waitpid>:
-SYSCALL(waitpid)
- 330:	b8 16 00 00 00       	mov    $0x16,%eax
- 335:	cd 40                	int    $0x40
- 337:	c3                   	ret    
-
-00000338 <wait_stat>:
-SYSCALL(wait_stat)
- 338:	b8 17 00 00 00       	mov    $0x17,%eax
- 33d:	cd 40                	int    $0x40
- 33f:	c3                   	ret    
-
-00000340 <list_pgroup>:
-SYSCALL(list_pgroup)
- 340:	b8 18 00 00 00       	mov    $0x18,%eax
- 345:	cd 40                	int    $0x40
- 347:	c3                   	ret    
-
-00000348 <foreground>:
-SYSCALL(foreground)
- 348:	b8 19 00 00 00       	mov    $0x19,%eax
- 34d:	cd 40                	int    $0x40
- 34f:	c3                   	ret    
-
-00000350 <set_priority>:
-SYSCALL(set_priority)
- 350:	b8 1a 00 00 00       	mov    $0x1a,%eax
- 355:	cd 40                	int    $0x40
- 357:	c3                   	ret    
-
-00000358 <putc>:
-#include "stat.h"
-#include "user.h"
-
-static void
-putc(int fd, char c)
-{
- 358:	55                   	push   %ebp
- 359:	89 e5                	mov    %esp,%ebp
- 35b:	83 ec 28             	sub    $0x28,%esp
- 35e:	8b 45 0c             	mov    0xc(%ebp),%eax
- 361:	88 45 f4             	mov    %al,-0xc(%ebp)
-  write(fd, &c, 1);
- 364:	c7 44 24 08 01 00 00 	movl   $0x1,0x8(%esp)
- 36b:	00 
- 36c:	8d 45 f4             	lea    -0xc(%ebp),%eax
- 36f:	89 44 24 04          	mov    %eax,0x4(%esp)
- 373:	8b 45 08             	mov    0x8(%ebp),%eax
- 376:	89 04 24             	mov    %eax,(%esp)
- 379:	e8 32 ff ff ff       	call   2b0 <write>
-}
- 37e:	c9                   	leave  
- 37f:	c3                   	ret    
-
-00000380 <printint>:
-
-static void
-printint(int fd, int xx, int base, int sgn)
-{
- 380:	55                   	push   %ebp
- 381:	89 e5                	mov    %esp,%ebp
- 383:	83 ec 48             	sub    $0x48,%esp
-  static char digits[] = "0123456789ABCDEF";
-  char buf[16];
-  int i, neg;
-  uint x;
-
-  neg = 0;
- 386:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
-  if(sgn && xx < 0){
- 38d:	83 7d 14 00          	cmpl   $0x0,0x14(%ebp)
- 391:	74 17                	je     3aa <printint+0x2a>
- 393:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
- 397:	79 11                	jns    3aa <printint+0x2a>
-    neg = 1;
- 399:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
-    x = -xx;
- 3a0:	8b 45 0c             	mov    0xc(%ebp),%eax
- 3a3:	f7 d8                	neg    %eax
- 3a5:	89 45 ec             	mov    %eax,-0x14(%ebp)
- 3a8:	eb 06                	jmp    3b0 <printint+0x30>
-  } else {
-    x = xx;
- 3aa:	8b 45 0c             	mov    0xc(%ebp),%eax
- 3ad:	89 45 ec             	mov    %eax,-0x14(%ebp)
-  }
-
-  i = 0;
- 3b0:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
-  do{
-    buf[i++] = digits[x % base];
- 3b7:	8b 4d 10             	mov    0x10(%ebp),%ecx
- 3ba:	8b 45 ec             	mov    -0x14(%ebp),%eax
- 3bd:	ba 00 00 00 00       	mov    $0x0,%edx
- 3c2:	f7 f1                	div    %ecx
- 3c4:	89 d0                	mov    %edx,%eax
- 3c6:	0f b6 90 38 0a 00 00 	movzbl 0xa38(%eax),%edx
- 3cd:	8d 45 dc             	lea    -0x24(%ebp),%eax
- 3d0:	03 45 f4             	add    -0xc(%ebp),%eax
- 3d3:	88 10                	mov    %dl,(%eax)
- 3d5:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
-  }while((x /= base) != 0);
- 3d9:	8b 55 10             	mov    0x10(%ebp),%edx
- 3dc:	89 55 d4             	mov    %edx,-0x2c(%ebp)
- 3df:	8b 45 ec             	mov    -0x14(%ebp),%eax
- 3e2:	ba 00 00 00 00       	mov    $0x0,%edx
- 3e7:	f7 75 d4             	divl   -0x2c(%ebp)
- 3ea:	89 45 ec             	mov    %eax,-0x14(%ebp)
- 3ed:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
- 3f1:	75 c4                	jne    3b7 <printint+0x37>
-  if(neg)
- 3f3:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
- 3f7:	74 2a                	je     423 <printint+0xa3>
-    buf[i++] = '-';
- 3f9:	8d 45 dc             	lea    -0x24(%ebp),%eax
- 3fc:	03 45 f4             	add    -0xc(%ebp),%eax
- 3ff:	c6 00 2d             	movb   $0x2d,(%eax)
- 402:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
-
-  while(--i >= 0)
- 406:	eb 1b                	jmp    423 <printint+0xa3>
-    putc(fd, buf[i]);
- 408:	8d 45 dc             	lea    -0x24(%ebp),%eax
- 40b:	03 45 f4             	add    -0xc(%ebp),%eax
- 40e:	0f b6 00             	movzbl (%eax),%eax
- 411:	0f be c0             	movsbl %al,%eax
- 414:	89 44 24 04          	mov    %eax,0x4(%esp)
- 418:	8b 45 08             	mov    0x8(%ebp),%eax
- 41b:	89 04 24             	mov    %eax,(%esp)
- 41e:	e8 35 ff ff ff       	call   358 <putc>
-    buf[i++] = digits[x % base];
-  }while((x /= base) != 0);
-  if(neg)
-    buf[i++] = '-';
-
-  while(--i >= 0)
- 423:	83 6d f4 01          	subl   $0x1,-0xc(%ebp)
- 427:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
- 42b:	79 db                	jns    408 <printint+0x88>
-    putc(fd, buf[i]);
-}
- 42d:	c9                   	leave  
- 42e:	c3                   	ret    
-
-0000042f <printf>:
-
-// Print to the given fd. Only understands %d, %x, %p, %s.
-void
-printf(int fd, char *fmt, ...)
-{
- 42f:	55                   	push   %ebp
- 430:	89 e5                	mov    %esp,%ebp
- 432:	83 ec 38             	sub    $0x38,%esp
-  char *s;
-  int c, i, state;
-  uint *ap;
-
-  state = 0;
- 435:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
-  ap = (uint*)(void*)&fmt + 1;
- 43c:	8d 45 0c             	lea    0xc(%ebp),%eax
- 43f:	83 c0 04             	add    $0x4,%eax
- 442:	89 45 e8             	mov    %eax,-0x18(%ebp)
-  for(i = 0; fmt[i]; i++){
- 445:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
- 44c:	e9 7d 01 00 00       	jmp    5ce <printf+0x19f>
-    c = fmt[i] & 0xff;
- 451:	8b 55 0c             	mov    0xc(%ebp),%edx
- 454:	8b 45 f0             	mov    -0x10(%ebp),%eax
- 457:	01 d0                	add    %edx,%eax
- 459:	0f b6 00             	movzbl (%eax),%eax
- 45c:	0f be c0             	movsbl %al,%eax
- 45f:	25 ff 00 00 00       	and    $0xff,%eax
- 464:	89 45 e4             	mov    %eax,-0x1c(%ebp)
-    if(state == 0){
- 467:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
- 46b:	75 2c                	jne    499 <printf+0x6a>
-      if(c == '%'){
- 46d:	83 7d e4 25          	cmpl   $0x25,-0x1c(%ebp)
- 471:	75 0c                	jne    47f <printf+0x50>
-        state = '%';
- 473:	c7 45 ec 25 00 00 00 	movl   $0x25,-0x14(%ebp)
- 47a:	e9 4b 01 00 00       	jmp    5ca <printf+0x19b>
-      } else {
-        putc(fd, c);
- 47f:	8b 45 e4             	mov    -0x1c(%ebp),%eax
- 482:	0f be c0             	movsbl %al,%eax
- 485:	89 44 24 04          	mov    %eax,0x4(%esp)
- 489:	8b 45 08             	mov    0x8(%ebp),%eax
- 48c:	89 04 24             	mov    %eax,(%esp)
- 48f:	e8 c4 fe ff ff       	call   358 <putc>
- 494:	e9 31 01 00 00       	jmp    5ca <printf+0x19b>
-      }
-    } else if(state == '%'){
- 499:	83 7d ec 25          	cmpl   $0x25,-0x14(%ebp)
- 49d:	0f 85 27 01 00 00    	jne    5ca <printf+0x19b>
-      if(c == 'd'){
- 4a3:	83 7d e4 64          	cmpl   $0x64,-0x1c(%ebp)
- 4a7:	75 2d                	jne    4d6 <printf+0xa7>
-        printint(fd, *ap, 10, 1);
- 4a9:	8b 45 e8             	mov    -0x18(%ebp),%eax
- 4ac:	8b 00                	mov    (%eax),%eax
- 4ae:	c7 44 24 0c 01 00 00 	movl   $0x1,0xc(%esp)
- 4b5:	00 
- 4b6:	c7 44 24 08 0a 00 00 	movl   $0xa,0x8(%esp)
- 4bd:	00 
- 4be:	89 44 24 04          	mov    %eax,0x4(%esp)
- 4c2:	8b 45 08             	mov    0x8(%ebp),%eax
- 4c5:	89 04 24             	mov    %eax,(%esp)
- 4c8:	e8 b3 fe ff ff       	call   380 <printint>
-        ap++;
- 4cd:	83 45 e8 04          	addl   $0x4,-0x18(%ebp)
- 4d1:	e9 ed 00 00 00       	jmp    5c3 <printf+0x194>
-      } else if(c == 'x' || c == 'p'){
- 4d6:	83 7d e4 78          	cmpl   $0x78,-0x1c(%ebp)
- 4da:	74 06                	je     4e2 <printf+0xb3>
- 4dc:	83 7d e4 70          	cmpl   $0x70,-0x1c(%ebp)
- 4e0:	75 2d                	jne    50f <printf+0xe0>
-        printint(fd, *ap, 16, 0);
- 4e2:	8b 45 e8             	mov    -0x18(%ebp),%eax
- 4e5:	8b 00                	mov    (%eax),%eax
- 4e7:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
- 4ee:	00 
- 4ef:	c7 44 24 08 10 00 00 	movl   $0x10,0x8(%esp)
- 4f6:	00 
- 4f7:	89 44 24 04          	mov    %eax,0x4(%esp)
- 4fb:	8b 45 08             	mov    0x8(%ebp),%eax
- 4fe:	89 04 24             	mov    %eax,(%esp)
- 501:	e8 7a fe ff ff       	call   380 <printint>
-        ap++;
- 506:	83 45 e8 04          	addl   $0x4,-0x18(%ebp)
- 50a:	e9 b4 00 00 00       	jmp    5c3 <printf+0x194>
-      } else if(c == 's'){
- 50f:	83 7d e4 73          	cmpl   $0x73,-0x1c(%ebp)
- 513:	75 46                	jne    55b <printf+0x12c>
-        s = (char*)*ap;
- 515:	8b 45 e8             	mov    -0x18(%ebp),%eax
- 518:	8b 00                	mov    (%eax),%eax
- 51a:	89 45 f4             	mov    %eax,-0xc(%ebp)
-        ap++;
- 51d:	83 45 e8 04          	addl   $0x4,-0x18(%ebp)
-        if(s == 0)
- 521:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
- 525:	75 27                	jne    54e <printf+0x11f>
-          s = "(null)";
- 527:	c7 45 f4 f3 07 00 00 	movl   $0x7f3,-0xc(%ebp)
-        while(*s != 0){
- 52e:	eb 1e                	jmp    54e <printf+0x11f>
-          putc(fd, *s);
- 530:	8b 45 f4             	mov    -0xc(%ebp),%eax
- 533:	0f b6 00             	movzbl (%eax),%eax
- 536:	0f be c0             	movsbl %al,%eax
- 539:	89 44 24 04          	mov    %eax,0x4(%esp)
- 53d:	8b 45 08             	mov    0x8(%ebp),%eax
- 540:	89 04 24             	mov    %eax,(%esp)
- 543:	e8 10 fe ff ff       	call   358 <putc>
-          s++;
- 548:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
- 54c:	eb 01                	jmp    54f <printf+0x120>
-      } else if(c == 's'){
-        s = (char*)*ap;
-        ap++;
-        if(s == 0)
-          s = "(null)";
-        while(*s != 0){
- 54e:	90                   	nop
- 54f:	8b 45 f4             	mov    -0xc(%ebp),%eax
- 552:	0f b6 00             	movzbl (%eax),%eax
- 555:	84 c0                	test   %al,%al
- 557:	75 d7                	jne    530 <printf+0x101>
- 559:	eb 68                	jmp    5c3 <printf+0x194>
-          putc(fd, *s);
-          s++;
-        }
-      } else if(c == 'c'){
- 55b:	83 7d e4 63          	cmpl   $0x63,-0x1c(%ebp)
- 55f:	75 1d                	jne    57e <printf+0x14f>
-        putc(fd, *ap);
- 561:	8b 45 e8             	mov    -0x18(%ebp),%eax
- 564:	8b 00                	mov    (%eax),%eax
- 566:	0f be c0             	movsbl %al,%eax
- 569:	89 44 24 04          	mov    %eax,0x4(%esp)
- 56d:	8b 45 08             	mov    0x8(%ebp),%eax
- 570:	89 04 24             	mov    %eax,(%esp)
- 573:	e8 e0 fd ff ff       	call   358 <putc>
-        ap++;
- 578:	83 45 e8 04          	addl   $0x4,-0x18(%ebp)
- 57c:	eb 45                	jmp    5c3 <printf+0x194>
-      } else if(c == '%'){
- 57e:	83 7d e4 25          	cmpl   $0x25,-0x1c(%ebp)
- 582:	75 17                	jne    59b <printf+0x16c>
-        putc(fd, c);
- 584:	8b 45 e4             	mov    -0x1c(%ebp),%eax
- 587:	0f be c0             	movsbl %al,%eax
- 58a:	89 44 24 04          	mov    %eax,0x4(%esp)
- 58e:	8b 45 08             	mov    0x8(%ebp),%eax
- 591:	89 04 24             	mov    %eax,(%esp)
- 594:	e8 bf fd ff ff       	call   358 <putc>
- 599:	eb 28                	jmp    5c3 <printf+0x194>
-      } else {
-        // Unknown % sequence.  Print it to draw attention.
-        putc(fd, '%');
- 59b:	c7 44 24 04 25 00 00 	movl   $0x25,0x4(%esp)
- 5a2:	00 
- 5a3:	8b 45 08             	mov    0x8(%ebp),%eax
- 5a6:	89 04 24             	mov    %eax,(%esp)
- 5a9:	e8 aa fd ff ff       	call   358 <putc>
-        putc(fd, c);
- 5ae:	8b 45 e4             	mov    -0x1c(%ebp),%eax
- 5b1:	0f be c0             	movsbl %al,%eax
- 5b4:	89 44 24 04          	mov    %eax,0x4(%esp)
- 5b8:	8b 45 08             	mov    0x8(%ebp),%eax
- 5bb:	89 04 24             	mov    %eax,(%esp)
- 5be:	e8 95 fd ff ff       	call   358 <putc>
-      }
-      state = 0;
- 5c3:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
-  int c, i, state;
-  uint *ap;
-
-  state = 0;
-  ap = (uint*)(void*)&fmt + 1;
-  for(i = 0; fmt[i]; i++){
- 5ca:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)
- 5ce:	8b 55 0c             	mov    0xc(%ebp),%edx
- 5d1:	8b 45 f0             	mov    -0x10(%ebp),%eax
- 5d4:	01 d0                	add    %edx,%eax
- 5d6:	0f b6 00             	movzbl (%eax),%eax
- 5d9:	84 c0                	test   %al,%al
- 5db:	0f 85 70 fe ff ff    	jne    451 <printf+0x22>
-        putc(fd, c);
-      }
-      state = 0;
-    }
-  }
-}
- 5e1:	c9                   	leave  
- 5e2:	c3                   	ret    
- 5e3:	90                   	nop
-
-000005e4 <free>:
-static Header base;
-static Header *freep;
-
-void
-free(void *ap)
-{
- 5e4:	55                   	push   %ebp
- 5e5:	89 e5                	mov    %esp,%ebp
- 5e7:	83 ec 10             	sub    $0x10,%esp
-  Header *bp, *p;
-
-  bp = (Header*)ap - 1;
- 5ea:	8b 45 08             	mov    0x8(%ebp),%eax
- 5ed:	83 e8 08             	sub    $0x8,%eax
- 5f0:	89 45 f8             	mov    %eax,-0x8(%ebp)
-  for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
- 5f3:	a1 54 0a 00 00       	mov    0xa54,%eax
- 5f8:	89 45 fc             	mov    %eax,-0x4(%ebp)
- 5fb:	eb 24                	jmp    621 <free+0x3d>
-    if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
- 5fd:	8b 45 fc             	mov    -0x4(%ebp),%eax
- 600:	8b 00                	mov    (%eax),%eax
- 602:	3b 45 fc             	cmp    -0x4(%ebp),%eax
- 605:	77 12                	ja     619 <free+0x35>
- 607:	8b 45 f8             	mov    -0x8(%ebp),%eax
- 60a:	3b 45 fc             	cmp    -0x4(%ebp),%eax
- 60d:	77 24                	ja     633 <free+0x4f>
- 60f:	8b 45 fc             	mov    -0x4(%ebp),%eax
- 612:	8b 00                	mov    (%eax),%eax
- 614:	3b 45 f8             	cmp    -0x8(%ebp),%eax
- 617:	77 1a                	ja     633 <free+0x4f>
-free(void *ap)
-{
-  Header *bp, *p;
-
-  bp = (Header*)ap - 1;
-  for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
- 619:	8b 45 fc             	mov    -0x4(%ebp),%eax
- 61c:	8b 00                	mov    (%eax),%eax
- 61e:	89 45 fc             	mov    %eax,-0x4(%ebp)
- 621:	8b 45 f8             	mov    -0x8(%ebp),%eax
- 624:	3b 45 fc             	cmp    -0x4(%ebp),%eax
- 627:	76 d4                	jbe    5fd <free+0x19>
- 629:	8b 45 fc             	mov    -0x4(%ebp),%eax
- 62c:	8b 00                	mov    (%eax),%eax
- 62e:	3b 45 f8             	cmp    -0x8(%ebp),%eax
- 631:	76 ca                	jbe    5fd <free+0x19>
-    if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
-      break;
-  if(bp + bp->s.size == p->s.ptr){
- 633:	8b 45 f8             	mov    -0x8(%ebp),%eax
- 636:	8b 40 04             	mov    0x4(%eax),%eax
- 639:	c1 e0 03             	shl    $0x3,%eax
- 63c:	89 c2                	mov    %eax,%edx
- 63e:	03 55 f8             	add    -0x8(%ebp),%edx
- 641:	8b 45 fc             	mov    -0x4(%ebp),%eax
- 644:	8b 00                	mov    (%eax),%eax
- 646:	39 c2                	cmp    %eax,%edx
- 648:	75 24                	jne    66e <free+0x8a>
-    bp->s.size += p->s.ptr->s.size;
- 64a:	8b 45 f8             	mov    -0x8(%ebp),%eax
- 64d:	8b 50 04             	mov    0x4(%eax),%edx
- 650:	8b 45 fc             	mov    -0x4(%ebp),%eax
- 653:	8b 00                	mov    (%eax),%eax
- 655:	8b 40 04             	mov    0x4(%eax),%eax
- 658:	01 c2                	add    %eax,%edx
- 65a:	8b 45 f8             	mov    -0x8(%ebp),%eax
- 65d:	89 50 04             	mov    %edx,0x4(%eax)
-    bp->s.ptr = p->s.ptr->s.ptr;
- 660:	8b 45 fc             	mov    -0x4(%ebp),%eax
- 663:	8b 00                	mov    (%eax),%eax
- 665:	8b 10                	mov    (%eax),%edx
- 667:	8b 45 f8             	mov    -0x8(%ebp),%eax
- 66a:	89 10                	mov    %edx,(%eax)
- 66c:	eb 0a                	jmp    678 <free+0x94>
-  } else
-    bp->s.ptr = p->s.ptr;
- 66e:	8b 45 fc             	mov    -0x4(%ebp),%eax
- 671:	8b 10                	mov    (%eax),%edx
- 673:	8b 45 f8             	mov    -0x8(%ebp),%eax
- 676:	89 10                	mov    %edx,(%eax)
-  if(p + p->s.size == bp){
- 678:	8b 45 fc             	mov    -0x4(%ebp),%eax
- 67b:	8b 40 04             	mov    0x4(%eax),%eax
- 67e:	c1 e0 03             	shl    $0x3,%eax
- 681:	03 45 fc             	add    -0x4(%ebp),%eax
- 684:	3b 45 f8             	cmp    -0x8(%ebp),%eax
- 687:	75 20                	jne    6a9 <free+0xc5>
-    p->s.size += bp->s.size;
- 689:	8b 45 fc             	mov    -0x4(%ebp),%eax
- 68c:	8b 50 04             	mov    0x4(%eax),%edx
- 68f:	8b 45 f8             	mov    -0x8(%ebp),%eax
- 692:	8b 40 04             	mov    0x4(%eax),%eax
- 695:	01 c2                	add    %eax,%edx
- 697:	8b 45 fc             	mov    -0x4(%ebp),%eax
- 69a:	89 50 04             	mov    %edx,0x4(%eax)
-    p->s.ptr = bp->s.ptr;
- 69d:	8b 45 f8             	mov    -0x8(%ebp),%eax
- 6a0:	8b 10                	mov    (%eax),%edx
- 6a2:	8b 45 fc             	mov    -0x4(%ebp),%eax
- 6a5:	89 10                	mov    %edx,(%eax)
- 6a7:	eb 08                	jmp    6b1 <free+0xcd>
-  } else
-    p->s.ptr = bp;
- 6a9:	8b 45 fc             	mov    -0x4(%ebp),%eax
- 6ac:	8b 55 f8             	mov    -0x8(%ebp),%edx
- 6af:	89 10                	mov    %edx,(%eax)
-  freep = p;
- 6b1:	8b 45 fc             	mov    -0x4(%ebp),%eax
- 6b4:	a3 54 0a 00 00       	mov    %eax,0xa54
-}
- 6b9:	c9                   	leave  
- 6ba:	c3                   	ret    
-
-000006bb <morecore>:
-
-static Header*
-morecore(uint nu)
-{
- 6bb:	55                   	push   %ebp
- 6bc:	89 e5                	mov    %esp,%ebp
- 6be:	83 ec 28             	sub    $0x28,%esp
-  char *p;
-  Header *hp;
-
-  if(nu < 4096)
- 6c1:	81 7d 08 ff 0f 00 00 	cmpl   $0xfff,0x8(%ebp)
- 6c8:	77 07                	ja     6d1 <morecore+0x16>
-    nu = 4096;
- 6ca:	c7 45 08 00 10 00 00 	movl   $0x1000,0x8(%ebp)
-  p = sbrk(nu * sizeof(Header));
- 6d1:	8b 45 08             	mov    0x8(%ebp),%eax
- 6d4:	c1 e0 03             	shl    $0x3,%eax
- 6d7:	89 04 24             	mov    %eax,(%esp)
- 6da:	e8 39 fc ff ff       	call   318 <sbrk>
- 6df:	89 45 f4             	mov    %eax,-0xc(%ebp)
-  if(p == (char*)-1)
- 6e2:	83 7d f4 ff          	cmpl   $0xffffffff,-0xc(%ebp)
- 6e6:	75 07                	jne    6ef <morecore+0x34>
-    return 0;
- 6e8:	b8 00 00 00 00       	mov    $0x0,%eax
- 6ed:	eb 22                	jmp    711 <morecore+0x56>
-  hp = (Header*)p;
- 6ef:	8b 45 f4             	mov    -0xc(%ebp),%eax
- 6f2:	89 45 f0             	mov    %eax,-0x10(%ebp)
-  hp->s.size = nu;
- 6f5:	8b 45 f0             	mov    -0x10(%ebp),%eax
- 6f8:	8b 55 08             	mov    0x8(%ebp),%edx
- 6fb:	89 50 04             	mov    %edx,0x4(%eax)
-  free((void*)(hp + 1));
- 6fe:	8b 45 f0             	mov    -0x10(%ebp),%eax
- 701:	83 c0 08             	add    $0x8,%eax
- 704:	89 04 24             	mov    %eax,(%esp)
- 707:	e8 d8 fe ff ff       	call   5e4 <free>
-  return freep;
- 70c:	a1 54 0a 00 00       	mov    0xa54,%eax
-}
- 711:	c9                   	leave  
- 712:	c3                   	ret    
-
-00000713 <malloc>:
-
-void*
-malloc(uint nbytes)
-{
- 713:	55                   	push   %ebp
- 714:	89 e5                	mov    %esp,%ebp
- 716:	83 ec 28             	sub    $0x28,%esp
-  Header *p, *prevp;
-  uint nunits;
-
-  nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;
- 719:	8b 45 08             	mov    0x8(%ebp),%eax
- 71c:	83 c0 07             	add    $0x7,%eax
- 71f:	c1 e8 03             	shr    $0x3,%eax
- 722:	83 c0 01             	add    $0x1,%eax
- 725:	89 45 ec             	mov    %eax,-0x14(%ebp)
-  if((prevp = freep) == 0){
- 728:	a1 54 0a 00 00       	mov    0xa54,%eax
- 72d:	89 45 f0             	mov    %eax,-0x10(%ebp)
- 730:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
- 734:	75 23                	jne    759 <malloc+0x46>
-    base.s.ptr = freep = prevp = &base;
- 736:	c7 45 f0 4c 0a 00 00 	movl   $0xa4c,-0x10(%ebp)
- 73d:	8b 45 f0             	mov    -0x10(%ebp),%eax
- 740:	a3 54 0a 00 00       	mov    %eax,0xa54
- 745:	a1 54 0a 00 00       	mov    0xa54,%eax
- 74a:	a3 4c 0a 00 00       	mov    %eax,0xa4c
-    base.s.size = 0;
- 74f:	c7 05 50 0a 00 00 00 	movl   $0x0,0xa50
- 756:	00 00 00 
-  }
-  for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
- 759:	8b 45 f0             	mov    -0x10(%ebp),%eax
- 75c:	8b 00                	mov    (%eax),%eax
- 75e:	89 45 f4             	mov    %eax,-0xc(%ebp)
-    if(p->s.size >= nunits){
- 761:	8b 45 f4             	mov    -0xc(%ebp),%eax
- 764:	8b 40 04             	mov    0x4(%eax),%eax
- 767:	3b 45 ec             	cmp    -0x14(%ebp),%eax
- 76a:	72 4d                	jb     7b9 <malloc+0xa6>
-      if(p->s.size == nunits)
- 76c:	8b 45 f4             	mov    -0xc(%ebp),%eax
- 76f:	8b 40 04             	mov    0x4(%eax),%eax
- 772:	3b 45 ec             	cmp    -0x14(%ebp),%eax
- 775:	75 0c                	jne    783 <malloc+0x70>
-        prevp->s.ptr = p->s.ptr;
- 777:	8b 45 f4             	mov    -0xc(%ebp),%eax
- 77a:	8b 10                	mov    (%eax),%edx
- 77c:	8b 45 f0             	mov    -0x10(%ebp),%eax
- 77f:	89 10                	mov    %edx,(%eax)
- 781:	eb 26                	jmp    7a9 <malloc+0x96>
-      else {
-        p->s.size -= nunits;
- 783:	8b 45 f4             	mov    -0xc(%ebp),%eax
- 786:	8b 40 04             	mov    0x4(%eax),%eax
- 789:	89 c2                	mov    %eax,%edx
- 78b:	2b 55 ec             	sub    -0x14(%ebp),%edx
- 78e:	8b 45 f4             	mov    -0xc(%ebp),%eax
- 791:	89 50 04             	mov    %edx,0x4(%eax)
-        p += p->s.size;
- 794:	8b 45 f4             	mov    -0xc(%ebp),%eax
- 797:	8b 40 04             	mov    0x4(%eax),%eax
- 79a:	c1 e0 03             	shl    $0x3,%eax
- 79d:	01 45 f4             	add    %eax,-0xc(%ebp)
-        p->s.size = nunits;
- 7a0:	8b 45 f4             	mov    -0xc(%ebp),%eax
- 7a3:	8b 55 ec             	mov    -0x14(%ebp),%edx
- 7a6:	89 50 04             	mov    %edx,0x4(%eax)
-      }
-      freep = prevp;
- 7a9:	8b 45 f0             	mov    -0x10(%ebp),%eax
- 7ac:	a3 54 0a 00 00       	mov    %eax,0xa54
-      return (void*)(p + 1);
- 7b1:	8b 45 f4             	mov    -0xc(%ebp),%eax
- 7b4:	83 c0 08             	add    $0x8,%eax
- 7b7:	eb 38                	jmp    7f1 <malloc+0xde>
-    }
-    if(p == freep)
- 7b9:	a1 54 0a 00 00       	mov    0xa54,%eax
- 7be:	39 45 f4             	cmp    %eax,-0xc(%ebp)
- 7c1:	75 1b                	jne    7de <malloc+0xcb>
-      if((p = morecore(nunits)) == 0)
- 7c3:	8b 45 ec             	mov    -0x14(%ebp),%eax
- 7c6:	89 04 24             	mov    %eax,(%esp)
- 7c9:	e8 ed fe ff ff       	call   6bb <morecore>
- 7ce:	89 45 f4             	mov    %eax,-0xc(%ebp)
- 7d1:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
- 7d5:	75 07                	jne    7de <malloc+0xcb>
-        return 0;
- 7d7:	b8 00 00 00 00       	mov    $0x0,%eax
- 7dc:	eb 13                	jmp    7f1 <malloc+0xde>
-  nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;
-  if((prevp = freep) == 0){
-    base.s.ptr = freep = prevp = &base;
-    base.s.size = 0;
-  }
-  for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
- 7de:	8b 45 f4             	mov    -0xc(%ebp),%eax
- 7e1:	89 45 f0             	mov    %eax,-0x10(%ebp)
- 7e4:	8b 45 f4             	mov    -0xc(%ebp),%eax
- 7e7:	8b 00                	mov    (%eax),%eax
- 7e9:	89 45 f4             	mov    %eax,-0xc(%ebp)
-      return (void*)(p + 1);
-    }
-    if(p == freep)
-      if((p = morecore(nunits)) == 0)
-        return 0;
-  }
- 7ec:	e9 70 ff ff ff       	jmp    761 <malloc+0x4e>
-}
- 7f1:	c9                   	leave  
- 7f2:	c3                   	ret    
diff --git a/xv6/zombie.c b/xv6/zombie.c
deleted file mode 100644
index a64409a..0000000
--- a/xv6/zombie.c
+++ /dev/null
@@ -1,14 +0,0 @@
-// Create a zombie process that 
-// must be reparented at exit.
-
-#include "types.h"
-#include "stat.h"
-#include "user.h"
-
-int
-main(void)
-{
-  if(fork() > 0)
-    sleep(5);  // Let child exit before parent.
-  exit(EXIT_STATUS_DEFAULT);
-}
diff --git a/xv6/zombie.d b/xv6/zombie.d
deleted file mode 100644
index 611e953..0000000
--- a/xv6/zombie.d
+++ /dev/null
@@ -1 +0,0 @@
-zombie.o: zombie.c types.h stat.h user.h
diff --git a/xv6/zombie.sym b/xv6/zombie.sym
deleted file mode 100644
index 8c03f13..0000000
--- a/xv6/zombie.sym
+++ /dev/null
@@ -1,65 +0,0 @@
-00000000 .text
-000007f3 .rodata
-000007fc .eh_frame
-00000a38 .data
-00000a4c .bss
-00000000 .comment
-00000000 .debug_aranges
-00000000 .debug_info
-00000000 .debug_abbrev
-00000000 .debug_line
-00000000 .debug_str
-00000000 .debug_loc
-00000000 zombie.c
-00000000 ulib.c
-0000002c stosb
-00000000 printf.c
-00000358 putc
-00000380 printint
-00000a38 digits.923
-00000000 umalloc.c
-00000a4c base
-00000a54 freep
-000006bb morecore
-00000051 strcpy
-00000330 waitpid
-0000042f printf
-0000024a memmove
-000002d8 mknod
-00000348 foreground
-00000142 gets
-00000310 getpid
-00000713 malloc
-00000320 sleep
-00000350 set_priority
-00000338 wait_stat
-000002a0 pipe
-000002b0 write
-000002e8 fstat
-000002c0 kill
-00000300 chdir
-000002c8 exec
-00000298 wait
-000002a8 read
-000002e0 unlink
-00000288 fork
-00000318 sbrk
-00000328 uptime
-00000a4c __bss_start
-000000eb memset
-00000000 main
-00000085 strcmp
-00000308 dup
-00000340 list_pgroup
-000001b1 stat
-00000a4c _edata
-00000a58 _end
-000002f0 link
-00000290 exit
-000001ff atoi
-000000c6 strlen
-000002d0 open
-0000010f strchr
-000002f8 mkdir
-000002b8 close
-000005e4 free
diff --git a/zombie.c b/zombie.c
new file mode 100644
index 0000000..077c02c
--- /dev/null
+++ b/zombie.c
@@ -0,0 +1,14 @@
+// Create a zombie process that 
+// must be reparented at exit.
+
+#include "types.h"
+#include "stat.h"
+#include "user.h"
+
+int
+main(void)
+{
+  if(fork() > 0)
+    sleep(5);  // Let child exit before parent.
+  exit();
+}
